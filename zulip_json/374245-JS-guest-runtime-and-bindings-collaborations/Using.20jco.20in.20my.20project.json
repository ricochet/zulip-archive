[
    {
        "content": "<p>Hello, I wanted to ask if I can use the files generated by jco in my project. I am making <a href=\"https://github.com/kajacx/wasm-bridge\">wasm-bridge</a>, a Rust crate that would allow to run the same Rust code you use with wasmtime, but on the web.</p>\n<p>To best support the component model, I need to be able to take component bytes in <code>Component::new()</code> and turn them into a component that can run on the web at runtime.</p>\n<p>This can be done using jco, as demonstrated in <a href=\"https://github.com/DougAnderson444/rollup-plugin-wit-component\">this</a> plugin repo. This is basicly jco transpiling itself so it can run on the web, but it works.</p>\n<p>I would need to include the \"binary\" files generated in jco at <code>/obj/js-component-bindgen-component*</code> in wasm-bridge, so I wanted to ask if that is OK and which license (if any) should I use in the source code of wasm-bridge to indicate where are those files coming from.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/kajacx/wasm-bridge\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/095f7c184beac03337f63bae2eb986677a88ad5b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663536353361613333353661303566333366393531333363396439393932633566633834336430316638613839306631306432323934353162636134656135632f6b616a6163782f7761736d2d627269646765)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/kajacx/wasm-bridge\" title=\"GitHub - kajacx/wasm-bridge: Provides a single unified API to run WASM modules on the desktop using wasmtime, or on the web using js-sys.\">GitHub - kajacx/wasm-bridge: Provides a single unified API to run WASM modules on the desktop using wasmtime, or on the web using js-sys.</a></div><div class=\"message_embed_description\">Provides a single unified API to run WASM modules on the desktop using wasmtime, or on the web using js-sys. - GitHub - kajacx/wasm-bridge: Provides a single unified API to run WASM modules on the ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/DougAnderson444/rollup-plugin-wit-component\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bd9ef1e91711a44a87c4efc043685142a910f6c7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333363343134663564316130316639663037646532366633326364616665336463626635303637356538356136313539343534623735303733663131333936642f446f7567416e646572736f6e3434342f726f6c6c75702d706c7567696e2d7769742d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/DougAnderson444/rollup-plugin-wit-component\" title=\"GitHub - DougAnderson444/rollup-plugin-wit-component: Rollup Plugin the bundles your wasm component JS glue for you\">GitHub - DougAnderson444/rollup-plugin-wit-component: Rollup Plugin the bundles your wasm component JS glue for you</a></div><div class=\"message_embed_description\">Rollup Plugin the bundles your wasm component JS glue for you - GitHub - DougAnderson444/rollup-plugin-wit-component: Rollup Plugin the bundles your wasm component JS glue for you</div></div></div>",
        "id": 376982818,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1689860417
    },
    {
        "content": "<p>See <a href=\"https://github.com/kajacx/wasm-bridge/tree/master/resources/original/jco-generate\">here</a> for an example what it might look like.</p>",
        "id": 377001619,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1689863632
    },
    {
        "content": "<p>Again, I'll reiterate that the best way to use something is to contribute the changes upstream first instead of just making local modifications for your own needs, as that allows others to benefit more widely from the effort. A browser build of jco provided by jco itself would also mean less maintenance for yourself. Having a browser-suitable build process in the jco project would be my preference for these kinds of workflows. But the short answer to your question is also yes that it is fine to use as long as you include the license.</p>",
        "id": 377059950,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1689873996
    },
    {
        "content": "<p>Ok, I'll give a specific example: <a href=\"https://github.com/bytecodealliance/jco/blob/main/packages/preview2-shim/lib/http/wasi-http.js#L18\">These two imports</a> do not work for me, I had to replace them with <code>../browser/something</code>. That is not something I can merge upstream, because on nodejs, it should be <code>../nodejs/something</code>.</p>\n<p>I guess the \"correct\" solution would be to still use relative path, but a different relative path based on build environment. I have no idea how to do that though.</p>\n<p>There were other issues, for example, I had to \"manually\" remove <code>if (!_initialized) throwUninitialized();</code> checks from the transpiled program, because the <code>_initialized</code> variable was not even initialized. I guess that is a real error that I should create an issue for, and I probably will, but there are still other changes that I don't believe fit with how jco is supposed to be used.</p>\n<p>For example, the \"ideal\" way to use jco on the web would be to add \"jco\" to your npm/yarn dependencies, and then just \"import {generate} from jco\" in your JS/TS file and you are good to go. However, that is not what I want. I want to load the jco code from Rust, and in a way where the user doesn't have to do <em>anything</em>. The crate will load it for them.</p>\n<p>So it is a very different use case, and even if jco could run on the web normally today, I would still need to modify it. So pushing changes upstream that make jco run on the web will not help me. I guess it would be cool if jco could do that in its own way, but if you want to load wasm components on the web, you can do so from Rust, which is what wasm-bridge is doing.</p>",
        "id": 377076520,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1689877955
    },
    {
        "content": "<p>Those imports you point to are exactly to get around the problem of environment-specific pathing. If it's not working in your environment then you might not be using a modern JS resolver. Putting the code through a build tool that supports modern resolution rules to get a single file script that you can run in your environment would resolve that issue.</p>\n<p>The <code>_initialized</code> check is the support for top-level await, since we have jco users who do not support environments with top-level await. The exported <code>$init</code> promise must first be awaited in this case.</p>\n<p>I don't think your case of running assumptionless JS code is as brittle as you think, provided you have a good esbuild / rollup configuration. But collaboration is of course entirely your choice.</p>",
        "id": 377080163,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1689878792
    },
    {
        "content": "<p>Ok, I think I am beginning to understand. I think what you want is that I add an new npm \"task\" to build jco in the way I need it build, right? I guess that would work, and it would not \"mess up\" the \"main build path\" which is why I didn't want to merge the changes I needed to make upstream.</p>\n<p>But that is not really necessary, I realized that I can just include the Rust crate in my Rust code, instead of making a component out of it and them transpilinging that component with jco ... (facepalm).</p>\n<p>Anyway, is there a chance that the <a href=\"https://github.com/bytecodealliance/jco/tree/main/crates/js-component-bindgen-component\">js-component-bindgen-component</a> would be published on <a href=\"http://crates.io\">crates.io</a>? It would provide a Rust api to jco generate with minimal effort, which would be great.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div>",
        "id": 377200432,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1689924956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal (kajacx)</span> I just published the <code>js-component-bindgen</code> crate to <a href=\"http://crates.io\">crates.io</a>, thanks for the bump on that</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div>",
        "id": 377441990,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1689978924
    }
]