[
    {
        "content": "<p>Hey! Could someone help me understand why the <code>wevaled</code> StarlingMonkey WASM size is almost the same as the full interpreter without partial evaluation? My reasoning is that after partial evaluation for the given \"simple\" JS bytecode, only a small portion of the interpreter code should be used. Therefore, <code>wasm-opt</code> should be able to eliminate unreachable parts and significantly reduce the binary size. However, this doesn't seem to be happening.</p>",
        "id": 480944637,
        "sender_full_name": "Tomasz Andrzejak",
        "timestamp": 1730906729
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"763150\">@Tomasz Andrzejak</span> -- great question, and good insight, yes, in compiled code ideally we should be able to remove all of the JS engine's parsing frontend and interpreter.</p>\n<p>The simple answer why we can't in principle today is <code>eval()</code>. If we ran a subset of the language without that (and any other APIs for dynamic code loading), then we could in theory DCE those bits of the engine away; it would still take a little care to properly mark pieces as unreachable, because of the way that the wizening works (everything is built into the image, and there are two entry points; the init one is not removed today), but doable in theory.</p>",
        "id": 480955805,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730910103
    },
    {
        "content": "<p>I suppose we could also know that <code>eval()</code> is not present after wevaling actually -- we can make a closed-world assumption at that point. Then we could unroot the parser frontend. That would take some work to do the analysis/tracking, and again to cut at the right points to make the code <em>statically</em> unreachable (rather than only as as a consequence of data-driven branching) but, again, doable for someone properly motivated</p>",
        "id": 480956338,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730910260
    },
    {
        "content": "<p>(oh, and one more detail here to braindump: we do rely on the interpreter still even when all code is present at wizening and compiled AOT -- we need it for async functions (because we don't have a way to lower the mid-function restarts to wasm) and for exception catches (again for restarts))</p>",
        "id": 480956619,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730910361
    },
    {
        "content": "<p>Maybe it could be a hint / configuration via something akin to CSP unsafe-eval settings so even if eval is present it is expected to fail with an exception.</p>",
        "id": 480958505,
        "sender_full_name": "Milan",
        "timestamp": 1730910929
    },
    {
        "content": "<p>yeah, I like that option as well</p>",
        "id": 480958779,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730911011
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>  That's very interesting! What do you imagine is the way forward to reduce the size of the binary? I mean, in an environment where we want to treat the wasm instances as disposable small units, a size of 11MB could be an issue?</p>",
        "id": 480959791,
        "sender_full_name": "Tomasz Andrzejak",
        "timestamp": 1730911319
    },
    {
        "content": "<blockquote>\n<p>what is the way forward</p>\n</blockquote>\n<p>I think my answer above stands as the high level direction. Concretely someone would need to have the time to work on this; I don't at the moment</p>\n<blockquote>\n<p>wasm instances as disposable small units, a size of 11MB could be an issue?</p>\n</blockquote>\n<p>I actually don't think so necessarily; it depends on what is dynamic. If the module itself is loaded once and used many times (\"disposable\" per request, for example), then it's no problem: we mmap the precompiled code section from disk into memory, and it doesn't really matter if a bunch of code exists that is never touched, it won't even be paged in. Now, if you're dynamically compiling new modules and loading them, that could be an issue...</p>",
        "id": 480960272,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730911453
    },
    {
        "content": "<p>That makes sense. Thanks for your insight!</p>",
        "id": 480960990,
        "sender_full_name": "Tomasz Andrzejak",
        "timestamp": 1730911683
    }
]