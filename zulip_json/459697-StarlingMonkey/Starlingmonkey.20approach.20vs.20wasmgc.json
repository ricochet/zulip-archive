[
    {
        "content": "<p>Hi bytecodealliance,<br>\nI've been looking at  language options for implementing wasm components. When considering JS as a source language, I was surprised to see the lack of a wasmgc compiler for JS. Seeing as the BA owns starlingmonkey I was hoping to get some context on why that approach is being taken over what dart and the jvm languages seem to be doing (compiling to wasmgc).<br>\nThanks!</p>",
        "id": 476188939,
        "sender_full_name": "Evan Simmons",
        "timestamp": 1728582785
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"206238\" href=\"/#narrow/stream/206238-general/topic/Starlingmonkey.20approach.20vs.20wasmgc\">#general &gt; Starlingmonkey approach vs wasmgc</a> by <span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span>.</p>",
        "id": 476193203,
        "sender_full_name": "Notification Bot",
        "timestamp": 1728584123
    },
    {
        "content": "<p>The main considerations are timeline, compatibility and engineering effort. JS is a large language, and a full engine that supports every corner is a multi-year project; so the simplest possible answer to your question is that an engine that uses WasmGC would be a large refactor of an existing engine, and is a much longer path than porting an existing engine using linear memory and its own GC</p>",
        "id": 476224807,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728594335
    },
    {
        "content": "<p>keep in mind too that JS' GC has a number of subtleties that would be difficult (impossible?) to map 1-1 to WasmGC as it is today: weak maps/ephemerons, finalizer registries, etc</p>",
        "id": 476224923,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728594372
    },
    {
        "content": "<p>The other factor here is that JS is fundamentally dynamic; one can infer static object shapes at runtime, but that's not the same as what Java and Dart have with truly static, strong type systems. So a mapping to WasmGC would require another level of indirection where the Wasm-level GC structs are various slot shapes</p>",
        "id": 476225101,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728594451
    },
    {
        "content": "<p>All this points to the more incremental approach we took: we ported SpiderMonkey to run on Wasm/WASI using its existing GC in linear memory, which was relatively straightforward (this was done four years ago, before StarlingMonkey wrapped SpiderMonkey/WASI); and then we've added compilation as a variant of its existing bytecode, using the same object runtime</p>",
        "id": 476225330,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728594528
    },
    {
        "content": "<p>TYSM for the context, that makes total sense. Is there any perf data that has been published? (startup time, memory use etc)</p>",
        "id": 476247750,
        "sender_full_name": "Evan Simmons",
        "timestamp": 1728604926
    },
    {
        "content": "<p>Startup time: there are various measurements around, and the benchmark in the wasmtime source tree, for Wasm instantiation. When you're launching a wizened wasm produced by the starlingmonkey build process, there is no runtime startup; you're launching a snapshot of an already-started runtime and you very quickly hit the first JS opcode. It's on the order of 5 µs or so.</p>",
        "id": 476247863,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728605005
    },
    {
        "content": "<p>Execution speed: PRs that added AOT compilation have some relative measurements (tl;dr, about a 2.5-3x speedup). Relative to a full JIT engine on native, it's still slower, depends on workload.</p>",
        "id": 476247904,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728605036
    },
    {
        "content": "<p>Memory use: depends on what the workload does of course; a base heap image is typically a few megabytes.</p>",
        "id": 476247960,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728605052
    },
    {
        "content": "<p>As always my standard advice would be \"measure it and see if it fits your use-case\" :-)</p>",
        "id": 476248012,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728605099
    },
    {
        "content": "<blockquote>\n<p>As always my standard advice would be \"measure it and see if it fits your use-case\" :-)</p>\n</blockquote>\n<p>Excellent advice, the broad strokes here are super helpful as a starting point.  And my goodness is 5 µs impressive!</p>",
        "id": 476306522,
        "sender_full_name": "Evan Simmons",
        "timestamp": 1728626857
    },
    {
        "content": "<p>Heya :) Might be worth mentioning that CanadaHonk is working on an from-scratch JS to Wasm compiler, it's not the only effort in this space ofc but he's got 5 years of funding and already passes 50% of test262 so definitely something to watch</p>",
        "id": 478436198,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1729671020
    },
    {
        "content": "<p>doesn't help you right now though I think</p>",
        "id": 478436230,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1729671033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"769939\">@Jonas Kruckenberg</span> always looking for a great path from js to wasm!</p>",
        "id": 478440462,
        "sender_full_name": "Ralph",
        "timestamp": 1729672397
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"769939\">@Jonas Kruckenberg</span> do you know anything about the <code>porffor</code> project's plans to implement WASI? Right now there's not much other than  <a href=\"https://github.com/CanadaHonk/porffor/issues/19\">tracking issue from May</a> (though of course I'm sure they're busy with lots of other things :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/CanadaHonk/porffor/issues/19\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/427d3d08071b577148342b35b745aecff12a4c0c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653733333236663462363733323334656662653236363337643061656562373032373736316634636535343962623062363430663036323938386530326135612f43616e616461486f6e6b2f706f7266666f722f6973737565732f3139&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/CanadaHonk/porffor/issues/19\" title=\"WASI target · Issue #19 · CanadaHonk/porffor\">WASI target · Issue #19 · CanadaHonk/porffor</a></div><div class=\"message_embed_description\">A from-scratch experimental AOT JS engine, written in JS - WASI target · Issue #19 · CanadaHonk/porffor</div></div></div>",
        "id": 478733041,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1729780558
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> sorry for the delay, I went and asked oliver about wasi and he said currently it’s a custom set of imports for ease of development but that later on supporting wasi probably will be a thing</p>",
        "id": 480856582,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1730876980
    },
    {
        "content": "<p>just bc obviously thats sort of where everybody is heading</p>",
        "id": 480856608,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1730876996
    }
]