[
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>Apparently on ARM when</p>\n<ul>\n<li>a store is unaligned</li>\n<li>and crosses a page boundary</li>\n<li>and one page faults but the other doesn't</li>\n</ul>\n<p>then there is no guarantee that the part of the store to the page that didn't fault will not succeed, despite the other part raising a signal.</p>\n<p>This means that partially out-of-bounds Wasm stores that trigger a trap can potentially mutate memory for the in-bounds portion of the write, which is not spec compliant.</p>\n<p>Apparently it is implementation-defined behavior, so it may or may not be an issue on any given ARM machine.</p>\n<p>Thus far, @cfallin tested on the ARM machines he has access to and none of the following have failed the attached test case:</p>\n<ul>\n<li>Apple M2</li>\n<li>RPi4</li>\n<li>the BA ARM server (\"Neoverse N1 core, I think, in an Ampere Altra CPU\")</li>\n</ul>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"i64.store\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i64.store</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"i32.load8_u\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.load8_u</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"err\">assert_trap</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i64.store\"</span>\n                     <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65529</span><span class=\"p\">)</span>\n                     <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mf\">0xffffffffffffffff)</span><span class=\"p\">)</span>\n             <span class=\"s2\">\"out of bounds memory access\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; Partial bytes were not written.</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65529</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65530</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65531</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65532</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65533</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65534</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65535</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<h3>See Also</h3>\n<ul>\n<li><a href=\"https://github.com/WebAssembly/design/issues/1490\">https://github.com/WebAssembly/design/issues/1490</a></li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1666747\">https://bugzilla.mozilla.org/show_bug.cgi?id=1666747</a></li>\n</ul>\n</blockquote>",
        "id": 396936441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697472784
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>Apparently on ARM (edit: and riscv) when</p>\n<ul>\n<li>a store is unaligned</li>\n<li>and crosses a page boundary</li>\n<li>and one page faults but the other doesn't</li>\n</ul>\n<p>then there is no guarantee that the part of the store to the page that didn't fault will not succeed, despite the other part raising a signal.</p>\n<p>This means that partially out-of-bounds Wasm stores that trigger a trap can potentially mutate memory for the in-bounds portion of the write, which is not spec compliant.</p>\n<p>Apparently it is implementation-defined behavior, so it may or may not be an issue on any given ARM machine.</p>\n<p>Thus far, @cfallin tested on the ARM machines he has access to and none of the following have failed the attached test case:</p>\n<ul>\n<li>Apple M2</li>\n<li>RPi4</li>\n<li>the BA ARM server (\"Neoverse N1 core, I think, in an Ampere Altra CPU\")</li>\n</ul>\n<p>The test case does fail on the following machines we have tested:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-1763523982\">JH7110 (SiFive u74 core)</a> (riscv)</li>\n</ul>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"i64.store\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i64.store</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"i32.load8_u\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.load8_u</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"err\">assert_trap</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i64.store\"</span>\n                     <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65529</span><span class=\"p\">)</span>\n                     <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mf\">0xffffffffffffffff)</span><span class=\"p\">)</span>\n             <span class=\"s2\">\"out of bounds memory access\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; Partial bytes were not written.</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65529</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65530</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65531</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65532</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65533</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65534</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"i32.load8_u\"</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">65535</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<h3>See Also</h3>\n<ul>\n<li><a href=\"https://github.com/WebAssembly/design/issues/1490\">https://github.com/WebAssembly/design/issues/1490</a></li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1666747\">https://bugzilla.mozilla.org/show_bug.cgi?id=1666747</a></li>\n</ul>\n</blockquote>",
        "id": 396936690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697472886
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-1765842711\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<blockquote>\n<p>if the platform doesn't guarantee consistency in its behavior</p>\n</blockquote>\n<p>The Arm architecture doesn't give you any guarantees, but if a specific OS only runs on specific microarchitectures, that do provide the semantics, then it will be conforming. But, of course, there's no guarantee that future microarchitectures on that platform will continue to provide the necessary semantics.</p>\n</blockquote>",
        "id": 397047696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697528371
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-1765917362\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>It also has the issue of migrating between cpu's. Whether for live vm migration, or for something like rr.</p>\n</blockquote>",
        "id": 397055092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697531042
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-2015255174\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>This was rediscovered <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216\">recently</a> with fuzzing</p>\n</blockquote>",
        "id": 428345199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711118572
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-2015395876\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>I'll copy here the <a href=\"https://github.com/WebAssembly/design/issues/1490#issuecomment-1762043224\">idea I posted in the Wasm design thread</a>, which AFAIK is the lowest-overhead potential solution today if the spec doesn't change: insert a load of the same size before every store. This is correct in the sense that if we're about to store to an address, a load to that same address should be legal, and if it traps the store would have trapped; and prevents side-effects because if one instruction occurs before another and traps, the side-effects of the latter must not occur at all, architecturally at least (here we're not thinking about speculation; also there was some discussion in the other thread about memory models and atomics, but this is fully within a single thread and relies only on instruction order in that thread). I think I will prototype this idea just to see what the overhead is, and to allow folks with write-tearing machines to test.</p>\n</blockquote>",
        "id": 428361255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711123001
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-2015478841\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>I will be very interested in hearing the results! I've currently got a prototype patch for V8 which enables trap handling for byte stores and for any store for which we know is aligned, and that gives a 2% uplift in some benchmarks.</p>\n</blockquote>",
        "id": 428369955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711125566
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-2015605467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>I've implemented the idea in #8221 and I see a 2% perf degradation (on an Apple M2 Max machine when running spidermonkey.wasm in Wasmtime). That seems reasonable to me to enable under some conditions -- not universally -- if the spec remains the same. It's still a hard question exactly what those conditions are: require a non-default setting for precise post-trap memory state? Perform a torn-store test at startup and fail if option was not enabled during compilation (or turn it on, the same way we infer native flags otherwise -- \"non-tearing\" hardware is then like an ISA extension in that sense)?</p>\n</blockquote>",
        "id": 428381144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711129396
    },
    {
        "content": "<p>pervognsen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-2525042313\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>Alex Bradbury pointed me to this thread. I was working on the specification of a low-level sandbox ISA and realized that partially visible page-crossing stores would be a potential issue if I overspecified it relative to what guarantees existing ISAs could offer. In my case I have a page-based memory model with both read and read/write permissions per page, so load probing does not suffice.</p>\n<p>However, if you specify maximally-complete bytewise store semantics (i.e. store every byte that can be stored given the page permissions) I believe you should be able to implement it with software emulation in the fault handler via idempotent stores: the architectural state at the faulting instruction still has the address and the source operand accessible (in registers in my case or on the stack in Wasm's case). This would have zero performance impact on the non-faulting code path. In Wasm's case I don't know if this would be inconsistent with the specification in other areas (e.g. concurrency) but I thought I'd mention it.</p>\n</blockquote>",
        "id": 486650748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733562253
    },
    {
        "content": "<p>pervognsen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-2525042313\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>Alex Bradbury pointed me to this thread. I was working on the specification of a low-level sandbox ISA and realized that partially visible page-crossing stores would be a potential issue if I overspecified it relative to what guarantees existing ISAs could offer. In my case I have a page-based memory model with both read and read/write permissions per page, so load probing does not suffice Edit: on second thought, load probing _would_ suffice but you'd need to keep the load-probed bytes in a temp register so the fault handler could undo a partial store by restoring the original bytes.</p>\n<p>However, if you specify maximally-complete bytewise store semantics (i.e. store every byte that can be stored given the page permissions) I believe you should be able to implement it with software emulation in the fault handler via idempotent stores: the architectural state at the faulting instruction still has the address and the source operand accessible (in registers in my case or on the stack in Wasm's case). This would have zero performance impact on the non-faulting code path. In Wasm's case I don't know if this would be inconsistent with the specification in other areas (e.g. concurrency) but I thought I'd mention it.</p>\n</blockquote>",
        "id": 486688248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733592063
    },
    {
        "content": "<p>pervognsen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-2525042313\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>Alex Bradbury pointed me to this thread. I was working on the specification of a low-level sandbox ISA and realized that partially visible page-crossing stores would be a potential issue if I overspecified it relative to what guarantees existing ISAs could offer. In my case I have a page-based memory model with both read and read/write permissions per page, so load probing does not suffice Edit: on second thought, load probing _would_ suffice if you kept the load-probed bytes in a temp register so the fault handler could undo a partial store by restoring the original bytes.</p>\n<p>However, if you specify maximally-complete bytewise store semantics (i.e. store every byte that can be stored given the page permissions) I believe you should be able to implement it with software emulation in the fault handler via idempotent stores: the architectural state at the faulting instruction still has the address and the source operand accessible (in registers in my case or on the stack in Wasm's case). This would have zero performance impact on the non-faulting code path. In Wasm's case I don't know if this would be inconsistent with the specification in other areas (e.g. concurrency) but I thought I'd mention it.</p>\n</blockquote>",
        "id": 486688495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733592255
    },
    {
        "content": "<p>pervognsen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237#issuecomment-2525042313\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">issue #7237</a>:</p>\n<blockquote>\n<p>Alex Bradbury pointed me to this thread. I was working on the specification of a low-level sandbox ISA and realized that partially visible page-crossing stores would be a potential issue if I overspecified it relative to what guarantees existing ISAs could offer. In my case I have a page-based memory model with both read and read/write permissions per page, so load probing does not suffice Edit: on second thought, load probing _would_ suffice if you kept all loadable bytes in a temp register so the fault handler could undo a partial store by restoring the original bytes. But this requires you to split the unaligned load probe into two aligned load probes which also adds some alignment math.</p>\n<p>However, if you specify maximal bytewise store semantics (i.e. store every byte that can be stored given the page permissions) I believe you should be able to implement it with software emulation in the fault handler via idempotent stores: the architectural state at the faulting instruction still has the address and the source operand accessible (in registers in my case or on the stack in Wasm's case). This would have zero performance impact on the non-faulting code path. In Wasm's case I don't know if this would be inconsistent with the specification in other areas (e.g. concurrency) but I thought I'd mention it.</p>\n</blockquote>",
        "id": 486691768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733594972
    }
]