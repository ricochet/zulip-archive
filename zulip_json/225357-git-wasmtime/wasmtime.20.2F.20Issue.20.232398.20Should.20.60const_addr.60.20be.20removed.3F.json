[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">Issue #2398</a>:</p>\n<blockquote>\n<p>While implementing packed shifts for the old backend, I needed a way to be able to determine the memory address o an offset into a constant emitted by Cranelift. To do this, I added <code>const_addr</code>, an instruction that returns the base address of where the constant is emitted in memory. This pattern followed similar instructions in Cranelift: <code>table_addr</code>, <code>func_addr</code>, <code>stack_addr</code>, <code>heap_addr</code>. In the new backend, I can lower packed shifts without this instruction: since I have more direct control of the compiler machinery, I can figure out the location of the constant in the buffer and emit the appropriate machine-level instructions. <code>const_addr</code> exists because in the old backend this had to be done using CLIF instructions.</p>\n<p>I am debating whether to remove this instruction:</p>\n<ul>\n<li>in favor of removing it, fewer instructions would be nice and the primary purpose of this instruction can be fulfilled at a different level</li>\n<li>in favor of keeping it, Cranelift frontend users might find it useful for mask tables (like I did) and the instruction is symmetrical to other <code>*_addr</code> instructions Cranelift provides.</li>\n</ul>\n<p>Any strong opinions one way or the other?</p>\n</blockquote>",
        "id": 216415367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605142052
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398#issuecomment-725748744\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">Issue #2398</a>:</p>\n<blockquote>\n<p>cc: @cfallin, @bjorn3, @sunfishcode</p>\n</blockquote>",
        "id": 216415386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605142079
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398#issuecomment-725770658\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">Issue #2398</a>:</p>\n<blockquote>\n<p>It does have a nice symmetry, as you say. On the other hand, it implies that constants are placed in a constant pool in memory; I think it's true that otherwise, constants act as values (that are arguments to certain instructions), right? In other words, <code>const_addr</code> forces us to choose a constant-pool implementation strategy (at least for some constants), whereas otherwise, some targets might choose to generate constants inline, or whatever. Also, at the module level, a code generator can always emit constant data as a global; having two ways to do this (<code>.data</code>/<code>.rodata</code> section and per-function constant pool) is somewhat non-orthogonal.</p>\n<p>So I could go either way, but if there are no other users, I might lean in the direction of removing it. Not a super-strong opinion though!</p>\n</blockquote>",
        "id": 216418010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605144875
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398#issuecomment-725899857\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">Issue #2398</a>:</p>\n<blockquote>\n<blockquote>\n<p>Also, at the module level, a code generator can always emit constant data as a global</p>\n</blockquote>\n<p>While true, this does prevent optimizations from being able to determine the value of the constants. There are currently no optimizations that use this knowledge, but there may be in the future.</p>\n<blockquote>\n<p>In other words, const_addr forces us to choose a constant-pool implementation strategy (at least for some constants), whereas otherwise, some targets might choose to generate constants inline, or whatever.</p>\n</blockquote>\n<p>If <code>const_addr</code> isn't used on a constant, the backend may choose to generate constants in any way they want.</p>\n</blockquote>",
        "id": 216435937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605166848
    }
]