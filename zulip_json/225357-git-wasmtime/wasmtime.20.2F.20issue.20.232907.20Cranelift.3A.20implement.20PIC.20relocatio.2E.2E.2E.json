[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>Cranelift emits AbsoluteRelocation <code>Reloc::Abs8</code> when <code>is_pic</code> setting is enabled in architecture <code>aarch64</code></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"c1\">;; Recursive factorial</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"fac-rec\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.eq</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">then</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">else</span>\n        <span class=\"p\">(</span><span class=\"nb\">i64.mul</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i64.sub</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wasm2obj</span><span class=\"w\"> </span><span class=\"n\">fac</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">fac</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Code emitted <code>fac.o</code> has absolute relocations.</p>\n<h3>Expected Results</h3>\n<p>Is expected for Cranelift to emit a relative relocation for aarch64 when <code>is_pic</code> is enabled.</p>\n<h3>Actual Results</h3>\n<p>Code emitted with an absolute relocation.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version: <code>cranelift-codegen = \"0.73.0\"</code><br>\nOperating system: Any<br>\nArchitecture: Aarch64</p>\n<h2>Extra info</h2>\n<p>Here's where the wrong code is emitted:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/207da989acf5c6d828dd5d1704c05c0d01b1dead/cranelift/codegen/src/isa/aarch64/inst/emit.rs#L2440-L2462\">https://github.com/bytecodealliance/wasmtime/blob/207da989acf5c6d828dd5d1704c05c0d01b1dead/cranelift/codegen/src/isa/aarch64/inst/emit.rs#L2440-L2462</a></p>\n<p>In the new x86 backend however, the <code>is_pic</code> case is properly handled:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/isa/x64/inst/emit.rs#L2350-L2387\">https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/isa/x64/inst/emit.rs#L2350-L2387</a></p>\n</blockquote>",
        "id": 238871031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621057068
    },
    {
        "content": "<p>syrusakbary <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907#issuecomment-841740240\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>I'd love to create a PR, but I will need a bit of guidance since I'm not very familiar with the new backend architecture.<br>\nI think asserting the non-PIC settings upon creation is a good idea. Could you point which file is responsible for that logic?</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 238933811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621122262
    },
    {
        "content": "<p>syrusakbary edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907#issuecomment-841740240\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>I'd love to create a PR, but I will need a bit of guidance since I'm not very familiar with the new backend architecture.<br>\nI think asserting the non-PIC settings upon creation is a good idea. Could you point what (module/file) should be responsible to handle that logic?</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 239012816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621205948
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907#issuecomment-842155365\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>I don't have any plans to work on this as part of the M1 focus, so anyone feel free to take this!</p>\n</blockquote>",
        "id": 239055309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621242289
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907#issuecomment-842475043\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>Issue #1657 seems to be related to this.</p>\n</blockquote>",
        "id": 239122650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621269946
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>Cranelift emits AbsoluteRelocation <code>Reloc::Abs8</code> when <code>is_pic</code> setting is enabled in architecture <code>aarch64</code></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"c1\">;; Recursive factorial</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"fac-rec\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.eq</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">then</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">else</span>\n        <span class=\"p\">(</span><span class=\"nb\">i64.mul</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i64.sub</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wasm2obj</span><span class=\"w\"> </span><span class=\"n\">fac</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">fac</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Code emitted <code>fac.o</code> has absolute relocations.</p>\n<h3>Expected Results</h3>\n<p>Is expected for Cranelift to emit a relative relocation for aarch64 when <code>is_pic</code> is enabled.</p>\n<h3>Actual Results</h3>\n<p>Code emitted with an absolute relocation.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version: <code>cranelift-codegen = \"0.73.0\"</code><br>\nOperating system: Any<br>\nArchitecture: Aarch64</p>\n<h2>Extra info</h2>\n<p>Here's where the wrong code is emitted:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/207da989acf5c6d828dd5d1704c05c0d01b1dead/cranelift/codegen/src/isa/aarch64/inst/emit.rs#L2440-L2462\">https://github.com/bytecodealliance/wasmtime/blob/207da989acf5c6d828dd5d1704c05c0d01b1dead/cranelift/codegen/src/isa/aarch64/inst/emit.rs#L2440-L2462</a></p>\n<p>In the new x86 backend however, the <code>is_pic</code> case is properly handled:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/isa/x64/inst/emit.rs#L2350-L2387\">https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/isa/x64/inst/emit.rs#L2350-L2387</a></p>\n</blockquote>",
        "id": 239122693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621269958
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907#issuecomment-846248256\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>@syrusakbary a top-level check/assert in <code>aarch64/mod.rs</code> where the <code>AArch64Backend</code> is created (in <code>new_with_flags</code>) would be a good short-term bandaid to fail more cleanly.</p>\n<p>The actual GOT-reference implementation is probably not too bad either -- the main thing is to match the relocations and instructions that the linker expects, which one could get by building e.g. some C code and looking at the resulting .o.</p>\n</blockquote>",
        "id": 239810285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621629655
    },
    {
        "content": "<p>syrusakbary <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907#issuecomment-846264579\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>@cfallin thanks for the insights, I just did a quick check on the code.<br>\nWould you be open on refactoring <code>new_with_flags</code> so it returns a <code>Result</code>? (probably this change will also spill on other structs)</p>\n<p>The main reason for that is that setting up a Backend would never cause an abort/exit, even if it's provided with a flag that exists, but is not supported in a specific backend (in that case it will return an <code>Err</code>).</p>\n</blockquote>",
        "id": 239814207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621631840
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907#issuecomment-846287688\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>Sure, that sounds reasonable -- it's plausible there may be other \"unsupported configuration errors\" in the future. This would propagate a <code>Result</code> out to the ISA builder API, I guess, and then we can fail on that in the toplevel CLI.</p>\n</blockquote>",
        "id": 239819150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621635038
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907#issuecomment-1001748833\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>Someone on the zulip got hit by this. Android requires position independent code and the dynamic linker refuses to run any executables with relocations in the <code>.text</code> section.</p>\n</blockquote>",
        "id": 266204196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1640638566
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\">issue #2907</a>:</p>\n<blockquote>\n<p>Cranelift emits AbsoluteRelocation <code>Reloc::Abs8</code> when <code>is_pic</code> setting is enabled in architecture <code>aarch64</code></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"c1\">;; Recursive factorial</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"fac-rec\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.eq</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">then</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">else</span>\n        <span class=\"p\">(</span><span class=\"nb\">i64.mul</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i64.sub</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wasm2obj</span><span class=\"w\"> </span><span class=\"n\">fac</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">fac</span><span class=\"p\">.</span><span class=\"n\">o</span>\n</code></pre></div>\n<p>Code emitted <code>fac.o</code> has absolute relocations.</p>\n<h3>Expected Results</h3>\n<p>Is expected for Cranelift to emit a relative relocation for aarch64 when <code>is_pic</code> is enabled.</p>\n<h3>Actual Results</h3>\n<p>Code emitted with an absolute relocation.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version: <code>cranelift-codegen = \"0.73.0\"</code><br>\nOperating system: Any<br>\nArchitecture: Aarch64</p>\n<h2>Extra info</h2>\n<p>Here's where the wrong code is emitted:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/207da989acf5c6d828dd5d1704c05c0d01b1dead/cranelift/codegen/src/isa/aarch64/inst/emit.rs#L2440-L2462\">https://github.com/bytecodealliance/wasmtime/blob/207da989acf5c6d828dd5d1704c05c0d01b1dead/cranelift/codegen/src/isa/aarch64/inst/emit.rs#L2440-L2462</a></p>\n<p>In the new x86 backend however, the <code>is_pic</code> case is properly handled:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/isa/x64/inst/emit.rs#L2350-L2387\">https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/isa/x64/inst/emit.rs#L2350-L2387</a></p>\n</blockquote>",
        "id": 328126987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676503162
    }
]