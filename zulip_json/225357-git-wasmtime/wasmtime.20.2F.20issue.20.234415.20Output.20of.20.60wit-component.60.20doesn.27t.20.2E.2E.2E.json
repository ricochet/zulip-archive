[
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>Loading in a <code>Component</code> hits <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7000b0a4cff1798b8e2fc5316b1be29b9fee2415/crates/environ/src/component/translate.rs#L737\">this <code>unimplemented!()</code> statement</a> when the component was generated with <code>wit-bindgen</code> and <code>wit-component</code>. <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1177753030\">According to @alexcrichton</a> this is a bug.  </p>\n<h3>Test Case</h3>\n<p>I've created <a href=\"https://github.com/tsoutsman/wit-type-import-bug\">a repo</a>. To recreate the example run <code>./run.sh</code>.</p>\n<h3>Expected Results</h3>\n<p>The component loads.</p>\n<h3>Actual Results</h3>\n<p>Panic.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span>: <span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">export</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">klim</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">checkouts</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"mi\">41807828</span><span class=\"n\">cb3a7a7e</span><span class=\"o\">/</span><span class=\"n\">a8ce7f1</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">environ</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">translate</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">743</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: Latest git commit</p>\n<p>Operating system: Fedora Linux</p>\n<p>Architecture: x86-64</p>\n<h3>Notes</h3>\n<p>Maybe it'd be better to open this issue in the <code>wit-bindgen</code> repo.<br>\n</p>\n</blockquote>",
        "id": 289207669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657553276
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1180556805\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>Ok I've worked with this a bit and I'm unable to come to an immediate solution. @peterhuene you're likely interested in this as well. The problem here is that Wasmtime doesn't implement type exports because I don't know what those mean (<a href=\"https://github.com/WebAssembly/component-model/issues/12\">https://github.com/WebAssembly/component-model/issues/12</a>) and I don't know what the purpose of them are beyond the naming here. I naively tried to remove type exports in the <code>wit-component</code> tooling but that doesn't work because it requires types like <code>flags</code> to have a name which is currently lifted from the export name.</p>\n<p>Overall I don't know what to do here. It's easy enough to simply ignore type exports in Wasmtime for now or I guess expose RTTI-style information about them. Otherwise though I'm personally uncomfortable continuing to bake in this \"wouldn't it be nice to import/export types\" scheme without having a clear direction for where this is going. In that sense I would prefer not to simply ignore the types in Wasmtime right now.</p>\n<p>Do you have thoughts @peterhuene about how best to tackle this?</p>\n</blockquote>",
        "id": 289208107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657553442
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1182264837\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>Given that type imports aren't used in the tooling just yet, but type exports are used today to describe the component's interface(s), I think we should probably represent type exports in Wasmtime's API rather than ignoring them.</p>\n<p>I would imagine you could use something like <code>Component::exports</code> (a conceptual analogous method to <code>Module::exports</code>) to view the component's exported types. In theory, you could generate bindings from this information.</p>\n<p>For the instance representation, as type imports aren't important yet, we could probably erase type exports for now?</p>\n<p>I'm also okay with ignoring type exports in Wasmtime for now if that's easier to do, but keeping the <code>unimplemented!</code> for type imports.</p>\n</blockquote>",
        "id": 289369581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657651971
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1182264837\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>Given that type imports aren't used in the tooling just yet, but type exports are used today to describe the component's interface(s), I think we should probably represent type exports in Wasmtime's API rather than ignoring them.</p>\n<p>I would imagine you could use something like <code>Component::exports</code> (a conceptual analogous method to <code>Module::exports</code>) to view the component's exported types. In theory, you could generate bindings from this information.</p>\n<p>For the instance representation, as type imports aren't important yet, we could probably erase type exports for now?</p>\n<p>I'm also okay with ignoring type exports in Wasmtime for now if that's easier to do (with a <code>TODO: represent this eventually</code>), but keeping the <code>unimplemented!</code> for type imports.</p>\n</blockquote>",
        "id": 289369677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657652023
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1183269214\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>While that's probably the easiest solution I'm not sure that it's the best way forward myself. I <a href=\"https://github.com/WebAssembly/component-model/issues/12\">don't understand why everything is exportable</a> in the sense of what the purpose is beyond simply naming. If all we want is to name something then I think a <code>name</code> section or equivalent is a better option. Right now there are restrictions on <code>*.wit</code> naming and there are no restrictions on the <code>export</code> names. </p>\n<p>I ideally want to stick on a trajectory to this all being in a final-ish state in terms of basics, which makes me wary of ignoring type exports or something like that for now.</p>\n</blockquote>",
        "id": 289463789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657721076
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1183517572\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>I don't really have a horse in the \"how best to give types a name\" debate from the proposal repo, to be honest, although I do think exporting types makes sense given its symmetry with type imports and more prescriptive than a custom section that can be stripped.</p>\n<p>Indeed, the restrictions on names differing between the component model and wit could be problematic. I realize there is discussion to standardize wit as part of the component model, but I personally think that it should be just a separate representation that sits on top of the component model whereby if you name things according to wit's conventions, then you get to use wit-based bindings generators (thus _wit itself_ is specific to that _wit-based_ tooling). I don't know if that is a popular opinion or not, but I think the component model format itself must have a way to represent interfaces with full-fidelity and thus custom sections feel unsuited to that purpose.</p>\n<p>That (needlessly) said, I think we should promptly come to some final conclusion on the utility of type exports in the proposal to move this forward; we shouldn't be blocking the testing of components generated with our tooling that currently uses type exports for the above stated purpose.</p>\n</blockquote>",
        "id": 289497100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657735033
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1184497001\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>My hesitation on exports is that in addition to naming something it also implies runtime support. Given a hypothetical exports iterator from an instance you need to get some sort of runtime value for the type to poke at. Additionally I would symmetrically expect to be able to import a type (which is also something that doesn't make sense to me).</p>\n<p>Overall the only purpose seems to be naming, not requiring the runtime bits for exports, so I don't know why we're using the export section for that. If a custom section doesn't sit well with others then we could have a \"type name\" section or similar which isn't a custom section which lists the names for types. I generally want to move away from the export section itself since we only need one of the features of the export section for this feature.</p>\n</blockquote>",
        "id": 289596937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657807841
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1184727136\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>I believe @lukewagner's intention post-MVP is to base support for resources on top of type imports, where the type bounds goes beyond equality to include subtyping. At that point type exports will need to be a thing anyway. I think this is all predicated on the need for components to share _the exact same type_ such that multiple components can pass around handles to the same thing. Luke, please correct me if I'm wrong here (which I like am).</p>\n<p>If that's indeed the case, I don't see why we wouldn't use type exports now for the naming of types, at the cost of the some complexity in Wasmtime's component model API for something it won't really make use of today.</p>\n</blockquote>",
        "id": 289624668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657820507
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1184727136\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>I believe @lukewagner's intention post-MVP is to base support for resources on top of type imports, where the type bounds goes beyond equality to include subtyping. At that point type exports will need to be a thing anyway. I think this is all predicated on the need for components to share _the exact same type_ such that multiple components can pass around handles to the same thing. Luke, please correct me if I'm wrong here (which I likely am <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>).</p>\n<p>If that's indeed the case, I don't see why we wouldn't use type exports now for the naming of types, at the cost of the some complexity in Wasmtime's component model API for something it won't really make use of today.</p>\n</blockquote>",
        "id": 289624743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657820533
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1184727136\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>I believe @lukewagner's intention post-MVP is to base support for resources on top of type imports, where the type bounds goes beyond equality to include subtyping. At that point type exports will need to be a thing anyway. I think this is all predicated on the need for components to share _the exact same type_ such that multiple components can pass around handles to the same thing. Luke, please correct me if I'm wrong here (which I likely am <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>).</p>\n<p>If that's indeed the case, I don't see why we wouldn't use type exports now for the naming of types, at the cost of the some complexity in Wasmtime's component model API for something it won't really make use (yet).</p>\n</blockquote>",
        "id": 289625017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657820673
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1184727136\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>I believe @lukewagner's intention post-MVP is to base support for resources on top of type imports, where the type bounds goes beyond equality to include subtyping. At that point type exports will need to be a thing anyway. I think this is all predicated on the need for components to share _the exact same type_ such that multiple components can pass around handles to the same thing. Luke, please correct me if I'm wrong here (which I likely am <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>).</p>\n<p>If that's indeed the case, I don't see why we wouldn't use type exports now for the naming of types, at the cost of the some complexity in Wasmtime's component model API for something it won't really make use of (yet).</p>\n</blockquote>",
        "id": 289625031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657820681
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1184749220\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>If you're right, then I think that may make sense in the long term, but I don't want to bake in design decisions today based on a hypothetical future use case that we haven't sketched out fully. For example if resources are exported and imported then they should perhaps be a separate index space rather than part of the type index space. </p>\n<p>With wit you can export the <code>string</code> type but I don't think you'll ever be able to import the <code>string</code> type (or why we'd want to allow that), which is why if all we want to do is name types then I think there should be a dedicated section for that rather than trying to wrap it all up in the import/export machinery.</p>\n</blockquote>",
        "id": 289628105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657822103
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1184753324\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>I'm certainly not opposed to having a dedicated (non-custom) section for naming types (vs. what we had before type exports where it was inline in the type section; that way runtimes can just skip that section entirely).</p>\n<p>If we do go in that direction, I'd probably favor removing type imports and exports from the MVP until we've fleshed that out more too.</p>\n</blockquote>",
        "id": 289628529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657822339
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1184761801\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>In the meantime, I think the prudent course of action is to suppress type exports in <code>wit-component</code> and <code>cargo-component</code>, keeping them only for <code>wit2wasm</code>, until we figure out ultimately how to describe a component's interface in the binary encoding sufficient for bindings generation.</p>\n<p>This should unblock running components generated with those tools in Wasmtime.</p>\n</blockquote>",
        "id": 289629795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657822896
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415#issuecomment-1185023739\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>Importing and exporting resource types is intended to be part of the MVP (and added to the component-model proposal just as soon as higher-priority things are out of the way).  Having all resources imported from the host via (resource) type imports is a critical part of how host interfaces are virtualizable (and how a component can virtualize a host interface by defining and exporting a resource type imported by another component).  Thus, in general, I think we definitely want imports/exports with the <code>sort</code>=<code>type</code> for <em>at least</em> resource types.  Allowing <em>all</em> type definitions, instead of just <em>resource</em> type definitions, then just sortof kills a few birds with one stone.  In addition to allowing non-resource-types to be named for bindings generation purposes, there are also some other use cases which take a bit more time to motivate and explain, but where type imports/exports serve a more substantial role; I could go into it now, but I don't want to go off on that tangent unless we all want to.</p>\n</blockquote>",
        "id": 289663990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657841464
    },
    {
        "content": "<p>peterhuene closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4415\">issue #4415</a>:</p>\n<blockquote>\n<p>Loading in a <code>Component</code> hits <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7000b0a4cff1798b8e2fc5316b1be29b9fee2415/crates/environ/src/component/translate.rs#L737\">this <code>unimplemented!()</code> statement</a> when the component was generated with <code>wit-bindgen</code> and <code>wit-component</code>. <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1177753030\">According to @alexcrichton</a> this is a bug.  </p>\n<h3>Test Case</h3>\n<p>I've created <a href=\"https://github.com/tsoutsman/wit-type-import-bug\">a repo</a>. To recreate the example run <code>./run.sh</code>.</p>\n<h3>Expected Results</h3>\n<p>The component loads.</p>\n<h3>Actual Results</h3>\n<p>Panic.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span>: <span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">export</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">klim</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">checkouts</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"mi\">41807828</span><span class=\"n\">cb3a7a7e</span><span class=\"o\">/</span><span class=\"n\">a8ce7f1</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">environ</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">translate</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">743</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: Latest git commit</p>\n<p>Operating system: Fedora Linux</p>\n<p>Architecture: x86-64</p>\n<h3>Notes</h3>\n<p>Maybe it'd be better to open this issue in the <code>wit-bindgen</code> repo.<br>\n</p>\n</blockquote>",
        "id": 290319365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658364633
    }
]