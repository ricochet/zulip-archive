[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856\">Issue #1856</a>:</p>\n<blockquote>\n<p><code>object::elf</code> export type definitions for all important structs used here. You can use <code>object::pod::from_bytes</code> and <code>object::pos::bytes_of</code> to convert between a slice and these structs. A <code>from_bytes_mut</code> method would be useful for this though. You should be able to create one by adapting <code>from_bytes</code>.</p>\n<p>_Originally posted by @bjorn3 in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1848_\">https://github.com/bytecodealliance/wasmtime/pull/1848_</a></p>\n</blockquote>",
        "id": 200441107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591806678
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856#issuecomment-642755178\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856\">Issue #1856</a>:</p>\n<blockquote>\n<p>I created #1860 to partially address the issue. Though I had a little success with the object v0.19's pod API to refactor convert_object_elf_to_loadable_file. There are gaps in this API to make it simple.</p>\n</blockquote>",
        "id": 200562650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591890344
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856#issuecomment-645150946\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856\">Issue #1856</a>:</p>\n<blockquote>\n<p>@yurydelendik What is missing besides <code>from_bytes_mut</code>? Some of what you have done can be simplified already. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">-    let header: &amp;FileHeader64&lt;LittleEndian&gt; =</span>\n<span class=\"gd\">-        unsafe { &amp;*(bytes.as_mut_ptr() as *const FileHeader64&lt;_&gt;) };</span>\n<span class=\"gi\">+    let header = from_bytes::&lt;FileHeader64&lt;LittleEndian&gt;&gt;(&amp;bytes).unwrap().0;</span>\n</code></pre></div>\n\n\n<p>I thought about adding a <code>&amp;mut [u8]</code> equivalent of <code>Bytes</code>, but I think it would be unusable with rust's borrowing rules.</p>\n</blockquote>",
        "id": 201101748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592369974
    },
    {
        "content": "<p>philipc edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856#issuecomment-645150946\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856\">Issue #1856</a>:</p>\n<blockquote>\n<p>@yurydelendik What is missing besides <code>from_bytes_mut</code>? Some of what you have done can be simplified already. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">-    let header: &amp;FileHeader64&lt;LittleEndian&gt; =</span>\n<span class=\"gd\">-        unsafe { &amp;*(bytes.as_mut_ptr() as *const FileHeader64&lt;_&gt;) };</span>\n<span class=\"gi\">+    let header = from_bytes::&lt;FileHeader64&lt;LittleEndian&gt;&gt;(&amp;bytes).unwrap().0;</span>\n</code></pre></div>\n\n\n<p>(Note that this is for the use that doesn't need to be mutable.)</p>\n<p>I thought about adding a <code>&amp;mut [u8]</code> equivalent of <code>Bytes</code>, but I think it would be unusable with rust's borrowing rules.</p>\n</blockquote>",
        "id": 201101927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592370174
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856#issuecomment-645553874\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856\">Issue #1856</a>:</p>\n<blockquote>\n<p>Yes, the immutable/reading part worked. Once I started patching, it all felt apart (including borrowing rules you mentioned).</p>\n</blockquote>",
        "id": 201184026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592419518
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856#issuecomment-803435095\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856\">Issue #1856</a>:</p>\n<blockquote>\n<p>I think this is fixed since #1860.</p>\n</blockquote>",
        "id": 231160999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616263079
    },
    {
        "content": "<p>bjorn3 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1856\">Issue #1856</a>:</p>\n<blockquote>\n<p><code>object::elf</code> export type definitions for all important structs used here. You can use <code>object::pod::from_bytes</code> and <code>object::pos::bytes_of</code> to convert between a slice and these structs. A <code>from_bytes_mut</code> method would be useful for this though. You should be able to create one by adapting <code>from_bytes</code>.</p>\n<p>_Originally posted by @bjorn3 in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1848_\">https://github.com/bytecodealliance/wasmtime/pull/1848_</a></p>\n</blockquote>",
        "id": 231161000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616263080
    }
]