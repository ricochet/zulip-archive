[
    {
        "content": "<p>syrusakbary opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>In the latest published version of Cranelift (0.63), there has been <strong>breaking changes</strong> that are <a href=\"https://github.com/bytecodealliance/wasmtime/blob/864cf98c8def770a2bcfc7328a8ffc10b12e8aa2/RELEASES.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/864cf98c8def770a2bcfc7328a8ffc10b12e8aa2/RELEASES.md\">not documented anywhere</a>, and with no alternative ways of using them.</p>\n<ul>\n<li>Frame information has been deleted (as part of #1466)</li>\n<li>Frame Sink doesn't exist any longer (this can be good, as it makes unwind generation lazy, however the next point is crucial if the sink doesn't exist)</li>\n<li>New Frame info structure fields can't be accessed outside of Cranelift. As such, <code>UnwindCode </code>, <code>UnwindInfo</code> or <code>CallFrameInstruction</code> data can't be retrieved outside of Cranelift. </li>\n</ul>\n<p>The last point is specially sensitive, as implementors that want to access the unwind information generated by the Cranelift IR right now are unable to do it with the latest version of Cranelift.</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0432]: unresolved imports `cranelift_codegen::binemit::FrameUnwindKind`, `cranelift_codegen::binemit::FrameUnwindOffset`, `cranelift_codegen::binemit::FrameUnwindSink`\n  --&gt; lib/cranelift-backend/src/unwind.rs:12:38\n   |\n12 |     use cranelift_codegen::binemit::{FrameUnwindKind, FrameUnwindOffset, FrameUnwindSink, Reloc};\n   |                                      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^ no `FrameUnwindSink` in `binemit`\n   |                                      |                |\n   |                                      |                no `FrameUnwindOffset` in `binemit`\n   |                                      no `FrameUnwindKind` in `binemit`\n\nerror: aborting due to 2 previous errors\n</code></pre></div>\n\n\n<p>Sadly, this might be have exposed the side effects of  <code>cranelift</code> and <code>wasmtime</code> packages living together.</p>\n<p>We hoped that the merge <a href=\"https://twitter.com/tschneidereit/status/1235629443353374722\" title=\"https://twitter.com/tschneidereit/status/1235629443353374722\">would have no implications</a> such as the one exposed on this issue, but I think now that both projects live together, this theme have to be specially sensitive if Cranelift is intended to be used as a general IR.</p>\n</blockquote>",
        "id": 195792376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588213146
    },
    {
        "content": "<p>syrusakbary labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>In the latest published version of Cranelift (0.63), there has been <strong>breaking changes</strong> that are <a href=\"https://github.com/bytecodealliance/wasmtime/blob/864cf98c8def770a2bcfc7328a8ffc10b12e8aa2/RELEASES.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/864cf98c8def770a2bcfc7328a8ffc10b12e8aa2/RELEASES.md\">not documented anywhere</a>, and with no alternative ways of using them.</p>\n<ul>\n<li>Frame information has been deleted (as part of #1466)</li>\n<li>Frame Sink doesn't exist any longer (this can be good, as it makes unwind generation lazy, however the next point is crucial if the sink doesn't exist)</li>\n<li>New Frame info structure fields can't be accessed outside of Cranelift. As such, <code>UnwindCode </code>, <code>UnwindInfo</code> or <code>CallFrameInstruction</code> data can't be retrieved outside of Cranelift. </li>\n</ul>\n<p>The last point is specially sensitive, as implementors that want to access the unwind information generated by the Cranelift IR right now are unable to do it with the latest version of Cranelift.</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0432]: unresolved imports `cranelift_codegen::binemit::FrameUnwindKind`, `cranelift_codegen::binemit::FrameUnwindOffset`, `cranelift_codegen::binemit::FrameUnwindSink`\n  --&gt; lib/cranelift-backend/src/unwind.rs:12:38\n   |\n12 |     use cranelift_codegen::binemit::{FrameUnwindKind, FrameUnwindOffset, FrameUnwindSink, Reloc};\n   |                                      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^ no `FrameUnwindSink` in `binemit`\n   |                                      |                |\n   |                                      |                no `FrameUnwindOffset` in `binemit`\n   |                                      no `FrameUnwindKind` in `binemit`\n\nerror: aborting due to 2 previous errors\n</code></pre></div>\n\n\n<p>Sadly, this might be have exposed the side effects of  <code>cranelift</code> and <code>wasmtime</code> packages living together.</p>\n<p>We hoped that the merge <a href=\"https://twitter.com/tschneidereit/status/1235629443353374722\" title=\"https://twitter.com/tschneidereit/status/1235629443353374722\">would have no implications</a> such as the one exposed on this issue, but I think now that both projects live together, this theme have to be specially sensitive if Cranelift is intended to be used as a general IR.</p>\n</blockquote>",
        "id": 195792377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588213146
    },
    {
        "content": "<p>syrusakbary labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>In the latest published version of Cranelift (0.63), there has been <strong>breaking changes</strong> that are <a href=\"https://github.com/bytecodealliance/wasmtime/blob/864cf98c8def770a2bcfc7328a8ffc10b12e8aa2/RELEASES.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/864cf98c8def770a2bcfc7328a8ffc10b12e8aa2/RELEASES.md\">not documented anywhere</a>, and with no alternative ways of using them.</p>\n<ul>\n<li>Frame information has been deleted (as part of #1466)</li>\n<li>Frame Sink doesn't exist any longer (this can be good, as it makes unwind generation lazy, however the next point is crucial if the sink doesn't exist)</li>\n<li>New Frame info structure fields can't be accessed outside of Cranelift. As such, <code>UnwindCode </code>, <code>UnwindInfo</code> or <code>CallFrameInstruction</code> data can't be retrieved outside of Cranelift. </li>\n</ul>\n<p>The last point is specially sensitive, as implementors that want to access the unwind information generated by the Cranelift IR right now are unable to do it with the latest version of Cranelift.</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0432]: unresolved imports `cranelift_codegen::binemit::FrameUnwindKind`, `cranelift_codegen::binemit::FrameUnwindOffset`, `cranelift_codegen::binemit::FrameUnwindSink`\n  --&gt; lib/cranelift-backend/src/unwind.rs:12:38\n   |\n12 |     use cranelift_codegen::binemit::{FrameUnwindKind, FrameUnwindOffset, FrameUnwindSink, Reloc};\n   |                                      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^ no `FrameUnwindSink` in `binemit`\n   |                                      |                |\n   |                                      |                no `FrameUnwindOffset` in `binemit`\n   |                                      no `FrameUnwindKind` in `binemit`\n\nerror: aborting due to 2 previous errors\n</code></pre></div>\n\n\n<p>Sadly, this might be have exposed the side effects of  <code>cranelift</code> and <code>wasmtime</code> packages living together.</p>\n<p>We hoped that the merge <a href=\"https://twitter.com/tschneidereit/status/1235629443353374722\" title=\"https://twitter.com/tschneidereit/status/1235629443353374722\">would have no implications</a> such as the one exposed on this issue, but I think now that both projects live together, this theme have to be specially sensitive if Cranelift is intended to be used as a general IR.</p>\n</blockquote>",
        "id": 195792378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588213147
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-621572767\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-621572767\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 195792380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588213158
    },
    {
        "content": "<p>syrusakbary edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>In the latest published version of Cranelift (0.63), there has been <strong>breaking changes</strong> that are <a href=\"https://github.com/bytecodealliance/wasmtime/blob/864cf98c8def770a2bcfc7328a8ffc10b12e8aa2/RELEASES.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/864cf98c8def770a2bcfc7328a8ffc10b12e8aa2/RELEASES.md\">not documented anywhere</a>, and with no alternative ways of using them.</p>\n<ul>\n<li>Frame information has been deleted (as part of #1466)</li>\n<li>Frame Sink doesn't exist any longer (this can be good, as it makes unwind generation lazy, however the next point is crucial if the sink doesn't exist)</li>\n<li>New Frame info structure fields can't be accessed outside of Cranelift. As such, <code>UnwindCode </code>, <code>UnwindInfo</code> or <code>CallFrameInstruction</code> data can't be retrieved outside of Cranelift. </li>\n</ul>\n<p>The last point is specially sensitive, as implementors that want to access the unwind information generated by the Cranelift IR right now are unable to do it with the latest version of Cranelift.</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0432]: unresolved imports `cranelift_codegen::binemit::FrameUnwindKind`, `cranelift_codegen::binemit::FrameUnwindOffset`, `cranelift_codegen::binemit::FrameUnwindSink`\n  --&gt; lib/cranelift-backend/src/unwind.rs:12:38\n   |\n12 |     use cranelift_codegen::binemit::{FrameUnwindKind, FrameUnwindOffset, FrameUnwindSink, Reloc};\n   |                                      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^ no `FrameUnwindSink` in `binemit`\n   |                                      |                |\n   |                                      |                no `FrameUnwindOffset` in `binemit`\n   |                                      no `FrameUnwindKind` in `binemit`\n\nerror: aborting due to 2 previous errors\n</code></pre></div>\n\n\n<p>[Edit: removed assumptions]</p>\n</blockquote>",
        "id": 195793397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588214637
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-621618643\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-621618643\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<blockquote>\n<p>New Frame info structure fields can't be accessed outside of Cranelift. As such, <code>UnwindCode </code>, <code>UnwindInfo</code> or <code>CallFrameInstruction</code> data can't be retrieved outside of Cranelift.</p>\n</blockquote>\n<p>This is true. Were you manually processing frame layout changes? I would expect typical use to be translating them to the appropriate platform unwind information and little else. This is still quite possible through the public Cranelift APIs, you can see an example of this in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/jit/src/unwind/systemv.rs#L77-L99\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/jit/src/unwind/systemv.rs#L77-L99\"><code>wasmtime</code>'s use to generate <code>.eh_frame</code> tables</a>.</p>\n<p>In fact, this change in interface allows straightforward generation of a single eh_frame table with shared CIEs, which before would have required users editing bytes for eh_frame FDE records after emitting them, or walking each function's FrameLayoutChange and translating to the appropriate CFA  directives when assembling .eh_frame itself. This made unwind generation for Cranelift users who are not JIT engines fairly tricky - restructuring these APIs is partially to make Cranelift more amenable to non-wasmtime uses. I've looked at the Windows APIs somewhat less and my understanding is that this was less a concern before, but is largely unimpacted by this change either way?</p>\n<blockquote>\n<p>breaking changes that are not documented anywhere,</p>\n</blockquote>\n<p>You've linked to the <code>wasmtime</code> release notes here, not <code>cranelift</code> release notes - I'm not aware of a specific CHANGELOG-style list of changes in Cranelift, but I wouldn't expect Cranelift changes to show up there now or in the future. I would note that Cranelift is not 1.0+, so breaking changes alone are semver-compliant on minor version bumps. They can and do occur, and are typically paired with functionality-preserving changes. If your use-case is not simply generating platform unwind information, that's both surprising and probably deserving of some tweaks to Cranelift interfaces.</p>\n<p>I see you edited back a comment suggesting that merging repos might have yielded a Wasmtime-biased change, but I want to address it anyway: Wasmtime has no special access to Cranelift-internal functionality. Published crate versions must build from published crates, so there's no off-release shenanigans here. If unwind information were no longer available in Cranelift public APIs, this would be a showstopper for Wasmtime's usage of that functionality as well.</p>\n</blockquote>",
        "id": 195799527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588224010
    },
    {
        "content": "<p>syrusakbary <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-621749097\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-621749097\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>Thanks for the quick reply.</p>\n<blockquote>\n<p>This is true. Were you manually processing frame layout changes? </p>\n</blockquote>\n<p>Yes, in the case of SystemV, it's already possible to access the gimli struct via the <code>to_fde</code> field, however for the Windows Unwind info it's currently impossible and it will be useful to have access to internal fields.</p>\n<blockquote>\n<p>You've linked to the wasmtime release notes here, not cranelift release notes - I'm not aware of a specific CHANGELOG-style list of changes in Cranelift, but I wouldn't expect Cranelift changes to show up there now or in the future</p>\n</blockquote>\n<p>I think it will be a good practice to start documenting Cranelift changes in a CHANGELOG-style format. As for the Wasmer use case, I think there are more users just interested on the Cranelift IR itself, and it would be useful to have a list of changes (new features &amp; breaking changes) for it, so we can keep up to date with the progress.</p>\n<p>Right now our process to keep up to date with the progress in Cranelift is very tedious: we have to scrape all commits and investigate each of the changes in a daily basis, which is really non-ideal.</p>\n<blockquote>\n<p>Published crate versions must build from published crates, so there's no off-release shenanigans here. If unwind information were no longer available in Cranelift public APIs, this would be a showstopper for Wasmtime's usage of that functionality as well.</p>\n</blockquote>\n<p>Yeah, you are completely right. However, I feel some of the breaking changes in Cranelift have been taken with only wasmtime in mind and no input from external users.<br>\nWe are very proud to be <a href=\"https://crates.io/crates/cranelift-native/reverse_dependencies\" title=\"https://crates.io/crates/cranelift-native/reverse_dependencies\">a big driver of adoption for Cranelift</a>, and would love be taken in consideration (just a bit) when this kind of breaking changes happen, if possible.</p>\n<p>I didn't mean to flame the discussion, so that's why I edited the comment :)</p>\n</blockquote>",
        "id": 195821010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588242532
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-621794642\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-621794642\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<blockquote>\n<p>However, I feel some of the breaking changes in Cranelift have been taken with only wasmtime in mind and no input from external users.</p>\n</blockquote>\n<p>I will repeat what I said in that tweet: even if we wanted to, which we don't, we couldn't possibly only take Wasmtime into consideration when making changes to Cranelift, because we have other projects that are very high priority, with Firefox being one of them.</p>\n<p>As you can no doubt tell, Cranelift is undergoing significant changes right now. I appreciate that those cause work for downstream projects. Given that we're very much not making any API (or behavior) stability guarantees yet, I don't think us putting in the extra work of breaking out documentation of larger changes into a changelog would make a meaningful difference to the amount of work required to keep up, either.</p>\n<p>One way to avoid that churn is to wait it out and stick to a specific version of Cranelift until things have settled down a bit.</p>\n</blockquote>",
        "id": 195830074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588248806
    },
    {
        "content": "<p>awortman-fastly <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-622052518\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-622052518\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<blockquote>\n<p>however for the Windows Unwind info it's currently impossible</p>\n</blockquote>\n<p>You ought to be able to use <code>winx64::UnwindInfo</code> (in <code>UnwindInfo::WindowsX64</code>)'s <code>emit_size</code> and <code>emit</code> functions (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/isa/unwind/winx64.rs#L160-L209\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/isa/unwind/winx64.rs#L160-L209\">here</a>) to produce Windows x86_64 SEH information. You'll still have to build the appropriate <code>RUNTIME_FUNCTION</code> struct tables and inform Windows of them (or stick 'em in a <code>.pdata</code> section for an on-disk PE), but that shouldn't require looking at implementation details of Cranelift I'd hope.</p>\n<p>I took a quick look at what I think your <a href=\"https://github.com/wasmerio/wasmer/tree/master/lib/clif-backend/src\" title=\"https://github.com/wasmerio/wasmer/tree/master/lib/clif-backend/src\"><code>cranelift-backend</code></a> rustc output references, but I don't see an <code>unwind.rs</code> in there. (and it's <code>clif-backend</code> not <code>cranelift-backend</code>, different branch maybe?) If <code>winx64::UnwindInfo</code>'s <code>emit</code> is insufficient for your use case, can you please expand a little on what processing you're doing? That would help a lot in ensuring we can design a public interface that is flexible for different uses and can stay more stable.</p>\n</blockquote>",
        "id": 195888307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588274341
    },
    {
        "content": "<p>awortman-fastly deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-622052518\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-622052518\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<blockquote>\n<p>however for the Windows Unwind info it's currently impossible</p>\n</blockquote>\n<p>You ought to be able to use <code>winx64::UnwindInfo</code> (in <code>UnwindInfo::WindowsX64</code>)'s <code>emit_size</code> and <code>emit</code> functions (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/isa/unwind/winx64.rs#L160-L209\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/isa/unwind/winx64.rs#L160-L209\">here</a>) to produce Windows x86_64 SEH information. You'll still have to build the appropriate <code>RUNTIME_FUNCTION</code> struct tables and inform Windows of them (or stick 'em in a <code>.pdata</code> section for an on-disk PE), but that shouldn't require looking at implementation details of Cranelift I'd hope.</p>\n<p>I took a quick look at what I think your <a href=\"https://github.com/wasmerio/wasmer/tree/master/lib/clif-backend/src\" title=\"https://github.com/wasmerio/wasmer/tree/master/lib/clif-backend/src\"><code>cranelift-backend</code></a> rustc output references, but I don't see an <code>unwind.rs</code> in there. (and it's <code>clif-backend</code> not <code>cranelift-backend</code>, different branch maybe?) If <code>winx64::UnwindInfo</code>'s <code>emit</code> is insufficient for your use case, can you please expand a little on what processing you're doing? That would help a lot in ensuring we can design a public interface that is flexible for different uses and can stay more stable.</p>\n</blockquote>",
        "id": 195888356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588274358
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-622052777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-622052777\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<blockquote>\n<p>however for the Windows Unwind info it's currently impossible</p>\n</blockquote>\n<p>You ought to be able to use <code>winx64::UnwindInfo</code> (in <code>UnwindInfo::WindowsX64</code>)'s <code>emit_size</code> and <code>emit</code> functions (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/isa/unwind/winx64.rs#L160-L209\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/isa/unwind/winx64.rs#L160-L209\">here</a>) to produce Windows x86_64 SEH information. You'll still have to build the appropriate <code>RUNTIME_FUNCTION</code> struct tables and inform Windows of them (or stick 'em in a <code>.pdata</code> section for an on-disk PE), but that shouldn't require looking at implementation details of Cranelift I'd hope.</p>\n<p>I took a quick look at what I think your <a href=\"https://github.com/wasmerio/wasmer/tree/master/lib/clif-backend/src\" title=\"https://github.com/wasmerio/wasmer/tree/master/lib/clif-backend/src\"><code>cranelift-backend</code></a> rustc output references, but I don't see an <code>unwind.rs</code> in there. (and it's <code>clif-backend</code> not <code>cranelift-backend</code>, different branch maybe?) If <code>winx64::UnwindInfo</code>'s <code>emit</code> is insufficient for your use case, can you please expand a little on what processing you're doing? That would help a lot in ensuring we can design a public interface that is flexible for different uses and can stay more stable.</p>\n</blockquote>",
        "id": 195888369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588274370
    },
    {
        "content": "<p>syrusakbary <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-622156922\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-622156922\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't think us putting in the extra work of breaking out documentation of larger changes into a changelog would make a meaningful difference to the amount of work required to keep up, either</p>\n</blockquote>\n<p>It makes me a bit sad to hear that, specially because I believe having a CHANGELOG will benefit the Cranelift project as a whole.</p>\n<blockquote>\n<p>I took a quick look at what I think your cranelift-backend rustc output references, but I don't see an <a href=\"http://unwind.rs\" title=\"http://unwind.rs\">unwind.rs</a> in there</p>\n</blockquote>\n<p>We are going some code changes for unwinding which are not yet published. Thanks for taking a look anyway!</p>\n<blockquote>\n<p>That would help a lot in ensuring we can design a public interface that is flexible for different uses and can stay more stable</p>\n</blockquote>\n<p>Thanks! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️ I will ping you once is ready so we can discuss the API from a practical perspective</p>\n</blockquote>",
        "id": 195911538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588286641
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-623154850\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-623154850\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm not aware of a specific CHANGELOG-style list of changes in Cranelift, but I wouldn't expect Cranelift changes to show up there now or in the future. I would note that Cranelift is not 1.0+, so breaking changes alone are semver-compliant on minor version bumps.</p>\n<p>One way to avoid that churn is to wait it out and stick to a specific version of Cranelift until things have settled down a bit.</p>\n</blockquote>\n<p>Cranelift has been changing continuously at least since I started using it in July 2019. I understand that minor version bumps are semver-compliant, but since there is no plan (that I know of) to go 1.0 any time soon, waiting for 1.0 isn't really feasible. Also, I doubt Cranelift would be able to document every breaking change since 0.1 even if they _did_ release 1.0, so we'd still have to deal with it at some point.</p>\n<blockquote>\n<blockquote>\n<p>I don't think us putting in the extra work of breaking out documentation of larger changes into a changelog would make a meaningful difference to the amount of work required to keep up, either.</p>\n</blockquote>\n<p>It makes me a bit sad to hear that, specially because I believe having a CHANGELOG will benefit the Cranelift project as a whole.</p>\n</blockquote>\n<p>I agree. The difficult part of using cranelift is not the rapid change but the lack of documentation (both for the changes and for cranelift as a whole). Take for example <code>0.62</code>, which changed <a href=\"https://docs.rs/cranelift-module/0.62.0/cranelift_module/struct.Module.html#method.declare_data\" title=\"https://docs.rs/cranelift-module/0.62.0/cranelift_module/struct.Module.html#method.declare_data\"><code>cranelift_module::Module::declare_data</code></a> to take a new <code>tls</code> argument. There is no indication of what <code>tls</code> stands for or what argument should be passed to keep the previous behavior - the only way I knew I should pass <code>false</code> is because I'd been following <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174\">https://github.com/bytecodealliance/cranelift/pull/1174</a> (which is now very difficult to find since it's in a different repo).</p>\n<blockquote>\n<p>I think it will be a good practice to start documenting Cranelift changes in a CHANGELOG-style format. As for the Wasmer use case, I think there are more users just interested on the Cranelift IR itself, and it would be useful to have a list of changes (new features &amp; breaking changes) for it, so we can keep up to date with the progress.</p>\n</blockquote>\n<p>+1</p>\n</blockquote>",
        "id": 196115280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588529352
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-623452418\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-623452418\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>To clarify, I do agree that Cranelift should eventually get a better story for documenting breaking changes. More importantly, it should get a somewhat more stable API and reduce the amount of breaking changes. That should probably happen before a 1.0 release, but we don't have firm plans for either at this time.</p>\n<p>@jyn514, in the meantime, I'm curious to hear more about how you think a change log would help. The <code>tls</code> example seems like it'd be addressed better by improving the API docs, and I'm not entirely sure what a change log would've contained that'd have helped here.</p>\n<p>The best I can come up with is something like \"Add TLS (thread local storage) support for ELF targets to Cranelift\", as the PR says, but would that have helped in figuring out what to pass for your usage of <code>declare_data</code>? ISTM that anything beyond that should really be API docs, but perhaps there's a way to address this that's reasonably low-effort and better than API docs?</p>\n</blockquote>",
        "id": 196177156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588597627
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-623481540\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-623481540\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<blockquote>\n<p>The best I can come up with is something like \"Add TLS (thread local storage) support for ELF targets to Cranelift\", as the PR says, but would that have helped in figuring out what to pass for your usage of declare_data? </p>\n</blockquote>\n<p>Absolutely. Now that I know TLS is thread local storage, I can search for it, find the PR, find resources on Wikipedia. <code>tls</code> alone doesn't give me enough information to do any of that.</p>\n<p>In general I find Cranelift assumes a lot of background knowledge, which would be fine except that it doesn't give you any links where you can learn more. Take all the ebb docs: the first result for <code>ebb</code> on Google is for the movement of the sea:  ![Screenshot_20200504-095831_Ecosia](<a href=\"https://user-images.githubusercontent.com/23638587/80973846-e495a780-8ded-11ea-9355-5ee5bea9cef2.jpg\" title=\"https://user-images.githubusercontent.com/23638587/80973846-e495a780-8ded-11ea-9355-5ee5bea9cef2.jpg\">https://user-images.githubusercontent.com/23638587/80973846-e495a780-8ded-11ea-9355-5ee5bea9cef2.jpg</a>)</p>\n<p>I'm not asking for in depth explanations of all these concepts, just the bare minimum so that I can find out more on my own.</p>\n</blockquote>",
        "id": 196183222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588600800
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-623730030\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-623730030\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>Try to restrict your search to the domain you are interested in: \"compiler tls\" or \"compiler ebb\". For me, this gives the correct wikipedia article as the top result.</p>\n</blockquote>",
        "id": 196244943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588629502
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-803434330\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>I think there is little value in keeping this issue open.</p>\n</blockquote>",
        "id": 231160736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616262756
    },
    {
        "content": "<p>syrusakbary <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634#issuecomment-803437441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>We were able to adapt to newer APIs. I think it will still be useful to implement the last suggestion, but we have no exact need for it now.</p>\n<blockquote>\n<p>New Frame info structure fields can't be accessed outside of Cranelift. As such, UnwindCode , UnwindInfo or CallFrameInstruction data can't be retrieved outside of Cranelift.</p>\n</blockquote>\n<p>Closing the issue for now</p>\n</blockquote>",
        "id": 231161933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616263966
    },
    {
        "content": "<p>syrusakbary closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1634\">Issue #1634</a>:</p>\n<blockquote>\n<p>In the latest published version of Cranelift (0.63), there has been <strong>breaking changes</strong> that are <a href=\"https://github.com/bytecodealliance/wasmtime/blob/864cf98c8def770a2bcfc7328a8ffc10b12e8aa2/RELEASES.md\">not documented anywhere</a>, and with no alternative ways of using them.</p>\n<ul>\n<li>Frame information has been deleted (as part of #1466)</li>\n<li>Frame Sink doesn't exist any longer (this can be good, as it makes unwind generation lazy, however the next point is crucial if the sink doesn't exist)</li>\n<li>New Frame info structure fields can't be accessed outside of Cranelift. As such, <code>UnwindCode </code>, <code>UnwindInfo</code> or <code>CallFrameInstruction</code> data can't be retrieved outside of Cranelift. </li>\n</ul>\n<p>The last point is specially sensitive, as implementors that want to access the unwind information generated by the Cranelift IR right now are unable to do it with the latest version of Cranelift.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0432</span><span class=\"p\">]</span>: <span class=\"nc\">unresolved</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">binemit</span>::<span class=\"n\">FrameUnwindKind</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">binemit</span>::<span class=\"n\">FrameUnwindOffset</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">binemit</span>::<span class=\"n\">FrameUnwindSink</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">lib</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">backend</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">unwind</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">12</span>:<span class=\"mi\">38</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">binemit</span>::<span class=\"p\">{</span><span class=\"n\">FrameUnwindKind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FrameUnwindOffset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FrameUnwindSink</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Reloc</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">^^^^^^^^^^^^^^^</span><span class=\"w\">  </span><span class=\"o\">^^^^^^^^^^^^^^^^^</span><span class=\"w\">  </span><span class=\"o\">^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">FrameUnwindSink</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">binemit</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\">                </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">FrameUnwindOffset</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">binemit</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">FrameUnwindKind</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">binemit</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"></span>\n</code></pre></div>\n<p>[Edit: removed assumptions]</p>\n</blockquote>",
        "id": 231161934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616263966
    }
]