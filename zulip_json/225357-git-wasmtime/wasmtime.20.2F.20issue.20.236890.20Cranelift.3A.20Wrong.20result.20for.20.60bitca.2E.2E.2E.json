[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">issue #6890</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">has_sse41</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bitselect_vconst_f64x2</span><span class=\"p\">(</span><span class=\"n\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v1</span>: <span class=\"nc\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">f64x2</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"mh\">0xFF00000000000000FF00000000000000</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitselect_vconst_f64x2</span><span class=\"p\">(</span><span class=\"mh\">0x11111111111111111111111111111111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x11000000000000001100000000000000</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">afonso</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao2</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span>\n<span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">cranelift_filetests</span>::<span class=\"n\">concurrent</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FAIL</span>: <span class=\"nc\">run</span>\n<span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao2</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">run</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">test</span>: <span class=\"nc\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitselect_vconst_f64x2</span><span class=\"p\">(</span><span class=\"mh\">0x11111111111111111111111111111111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x11000000000000001100000000000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actual</span>: <span class=\"mh\">0x11111111111111111111111111111111</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>This issue is caused by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/14b39bc234b1c8f9d5212e481a93a91e72b22807/cranelift/codegen/src/isa/x64/lower.isle#L1381-L1384\">this optimization to <code>bitselect</code></a>. It checks if every byte in the <code>vconst</code> is <code>0xFF</code> or <code>0x00</code>, which it is in this case, but then emits a <code>blend</code> instruction of whatever type the original bitselect was issued. </p>\n<p>This is correct for <code>i8x16</code>, but not for any type with a larger lane size.</p>\n<p>This does not affect wasmtime since wasmtime always bitcasts the inputs to bitselect into a <code>i8x16</code> before the operation which is the only type for which this works.</p>\n<p>We also currently don't remove bitcasts in the midend, so this won't get accidentally converted into a <code>bitselect.f64x2</code>.<br>\n</p>\n</blockquote>",
        "id": 386861467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692795208
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">Issue #6890</a>.</p>",
        "id": 386861468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692795208
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">Issue #6890</a>.</p>",
        "id": 386861471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692795208
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:area:x64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">Issue #6890</a>.</p>",
        "id": 386861529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692795219
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890#issuecomment-1690502456\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">issue #6890</a>:</p>\n<blockquote>\n<p>I think <code>bitcast</code> isn't the cause of this problem, right? Should the issue title say <code>bitselect.f64x2</code> instead?</p>\n<p>If I understand this correctly, we can fix this by using <code>x64_pblendvb</code> instead of <code>x64_blend</code> in this optimized lowering, right?<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/14b39bc234b1c8f9d5212e481a93a91e72b22807/cranelift/codegen/src/isa/x64/lower.isle#L1372-L1376\">https://github.com/bytecodealliance/wasmtime/blob/14b39bc234b1c8f9d5212e481a93a91e72b22807/cranelift/codegen/src/isa/x64/lower.isle#L1372-L1376</a></p>\n<p>The <code>x64_blend</code> term is a helper that tries to use a type-appropriate variant of blend, and is only used from the above rule. Similarly <code>vconst_all_ones_or_all_zeros</code> is only used from this rule, and checks each byte of the constant. So I think it's appropriate to use a byte-oriented version of blend whenever that pattern matches.<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/14b39bc234b1c8f9d5212e481a93a91e72b22807/cranelift/codegen/src/isa/x64/inst.isle#L3330-L3334\">https://github.com/bytecodealliance/wasmtime/blob/14b39bc234b1c8f9d5212e481a93a91e72b22807/cranelift/codegen/src/isa/x64/inst.isle#L3330-L3334</a></p>\n</blockquote>",
        "id": 386935752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692817941
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890#issuecomment-1690540489\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">issue #6890</a>:</p>\n<blockquote>\n<p>Good find @afonso360, thanks! Thinking about what @jameysharp said though plus a little more, I think that this optimization on x64 is even buggier (but still not reachable from wasm)</p>\n<p>Then <code>blend</code>-style instructions use lane selection so are only valid if the entire lane has the same bit pattern (as a substitute for <code>bitselect</code>), but the type of the vector and comparison isn't being factored in here. This means that a f64x2 bitselect based on an i8x16 {i,f}cmp is not valid, in addition to the issues with constants that identified. </p>\n<p>I think essentially <code>all_ones_or_all_zeros</code> needs to take the type of the <code>bitselect</code> as input and test whether the comparison has the same type lane-width-wise and additionally the <code>vconst_all_ones_or_all_zeros</code> helper needs to take the type as input to test the full lane width is all ones or all zeros, not just each byte is all ones or all zeros.</p>\n<p>Also, for constants, I think the entire rule should be removed. Instead I think it would be better to transform a <code>bitselect</code>-with-constant-mask into a <code>shuffle</code> which then enables a whole different set of pattern-matching which is much more optimal than loading a constant into a register and performing a blend.</p>\n</blockquote>",
        "id": 386939807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692819906
    }
]