[
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">https://github.com/bytecodealliance/wasmtime/pull/3545</a>, we added this internal constructor:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span> <span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"p\">)</span> <span class=\"nv\">VectorSize</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">8</span> <span class=\"mi\">16</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size8x16</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">16</span> <span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size16x8</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">32</span> <span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size32x4</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">64</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size64x2</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>it generates this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Generated as internal constructor for term vector_size.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">constructor_vector_size</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ctx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg0</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">VectorSize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pattern0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">pattern1_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span>::<span class=\"n\">multi_lane</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pattern0_0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 952.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size8x16</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 953.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size16x8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 954.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size32x4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 955.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size64x2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It handles all cases, but neither the Rust compiler nor the ISLE compiler can really tell that. So it would be nice if we could mark it infallible in the ISLE source somehow, and then have an <code>unreachable!()</code> at the end of the generated function, instead of <code>return None</code>.</p>\n<p>Please commence with syntax bike shedding suggestions :)</p>\n</blockquote>",
        "id": 261964070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637257853
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">https://github.com/bytecodealliance/wasmtime/pull/3545</a>, we added this internal constructor:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span> <span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"p\">)</span> <span class=\"nv\">VectorSize</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">8</span> <span class=\"mi\">16</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size8x16</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">16</span> <span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size16x8</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">32</span> <span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size32x4</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">64</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size64x2</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>it generates this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Generated as internal constructor for term vector_size.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">constructor_vector_size</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ctx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg0</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">VectorSize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pattern0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">pattern1_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span>::<span class=\"n\">multi_lane</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pattern0_0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 952.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size8x16</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 953.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size16x8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 954.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size32x4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 955.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size64x2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It handles all cases, but neither the Rust compiler nor the ISLE compiler can really tell that. So it would be nice if we could mark it infallible in the ISLE source somehow, and then have an <code>unreachable!()</code> at the end of the generated function, instead of <code>return None</code>.</p>\n<p>Please commence with syntax bike shedding suggestions :)</p>\n</blockquote>",
        "id": 261964071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637257853
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-973122575\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>Possible alternative idea:</p>\n<ul>\n<li>First add the ability for ISLE to automatically infer that constructors are infallible (e.g. if the function would end with <code>return Some(...)</code> then remove the <code>Option</code>)</li>\n<li>Second add the ability to define a rule that yields an error.</li>\n</ul>\n<p>aka we'd do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">vector_size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vector_size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">multi_lane</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">VectorSize</span><span class=\"p\">.</span><span class=\"n\">Size8x16</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vector_size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">multi_lane</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">VectorSize</span><span class=\"p\">.</span><span class=\"n\">Size16x8</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vector_size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">multi_lane</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">VectorSize</span><span class=\"p\">.</span><span class=\"n\">Size32x4</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vector_size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">multi_lane</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">VectorSize</span><span class=\"p\">.</span><span class=\"n\">Size64x2</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vector_size</span><span class=\"w\"> </span><span class=\"n\">_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">compile_error</span><span class=\"w\"> </span><span class=\"s\">\"unknown vector size\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and this would infer that the <code>vector_size</code> constructor is infallible due to the last case, and the last case would be a manually injected panic with a nice message.</p>\n</blockquote>",
        "id": 261966018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637258583
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-973126151\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 261966631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637258856
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-973127221\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>I'd like to <em>lightly</em> veto the \"add the ability to automatically infer infallible\" direction: in the limit this implies SAT-solving, and significantly complexifies things if we want to be able to see through invoked internal constructors as well. (Basically, inline all the way down, then flatten all conditions, then encode to SAT, then see if \"fallthrough\" condition is UNSAT.)</p>\n<p>I like the <code>unreachable!()</code>-at-the-end approach in contrast: very lightweight change, and our fuzzers should hit it if we get it wrong...</p>\n</blockquote>",
        "id": 261966822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637258943
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-973136218\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>To clarify though I wouldn't propose any sort of sat-solving or \"did you check all the cases\" checking, instead just simply \"are there no constraints on any arguments in one <code>rule</code>\" as a \"is this exhaustive\" check, which I think would be easy to implement and only \"surprising\" if you had a <code>rule</code>-per-case and expected it otherwise to be exhaustive</p>\n</blockquote>",
        "id": 261968112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637259607
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-973141105\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<blockquote>\n<p>First add the ability for ISLE to automatically infer that constructors are infallible (e.g. if the function would end with <code>return Some(...)</code> then remove the <code>Option</code>)</p>\n</blockquote>\n<p>I view this as orthogonal from this issue which focuses on cases where even if we had that exhaustive-match checking the ISLE compiler wouldn't be able to tell this is infallible.</p>\n</blockquote>",
        "id": 261968888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637259976
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-973141748\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<blockquote>\n<p>So it would be nice if we could mark it infallible in the ISLE source somehow, and then have an <code>unreachable!()</code> at the end of the generated function, instead of <code>return None</code>.</p>\n</blockquote>\n<p>(Also, in case it isn't obvious, the generated function would return <code>T</code> instead of <code>Option&lt;T&gt;</code> as well)</p>\n</blockquote>",
        "id": 261968997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637260028
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-973143844\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<blockquote>\n<p>Second add the ability to define a rule that yields an error.</p>\n</blockquote>\n<p>Are you imagining a compile time error? This would make the exhaustive-match checking part of the semantics of the language, rather than an internal optimization detail, FWIW.</p>\n<p>Alternatively, we can do this with <em>runtime</em> errors right now, by having an extern constructor that just panics (although we can't pass a string argument through, I'd like to add that ability tho).</p>\n</blockquote>",
        "id": 261969399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637260205
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-974134452\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>Hm sorry so let me try to clarify. Right now ISLE generates constructors always returning <code>Option&lt;T&gt;</code>. I think that's somewhat of a minor bug because there are functions where it ends with <code>return Some(val)</code> and nothing actually returns <code>None</code>. For compile-time-performance-reasons primarily I think that ISLE, independent of any other changes, should be able to infer this situation. When the function never returns <code>None</code> then it should return <code>T</code>, not <code>Option&lt;T&gt;</code>.</p>\n<p>Assuming that that world exists, then there's no need to manually mark anything as infallible, it's simply already infallible by construction (nothing returns <code>None</code>). There are still esoteric cases where if you do something like match half the state space in one rule and the other half in another rule then ISLE doesn't know about that, and ISLE still thinks that the function is fallible (because there's a fall-through that returns <code>None</code> and ISLE doesn't realize the previous two <code>rule</code>s cover the whole state space, only we as humans understand that).</p>\n<p>So what I would imagine is a second addition to ISLE, after auto-inference of infallibility, which is to have some sort of <code>(compile_error \"foo\")</code>. This means that in the situation that I'd like to assert that the whole state space is covered by my two <code>rule</code> annotations I'd add a third catch-all with the compile error explaining why this shouldn't happen.</p>\n<blockquote>\n<p>I view this as orthogonal from this issue which focuses on cases where even if we had that exhaustive-match checking the ISLE compiler wouldn't be able to tell this is infallible.</p>\n</blockquote>\n<p>The reason I don't believe that these are orthogonal is that if we assume that ISLE, for performance reasons, will infer infallibilty for other normal rules then there's no need for a new \"panic here\" feature to ISLE to <em>also</em> reason about fallibility. For example instead of being able to say \"this constructor is infallible and here's the panic message if I'm wrong\" I think it'd be better to say \"if you hit this rule then panic with this message\".</p>\n<blockquote>\n<p>Are you imagining a compile time error? </p>\n</blockquote>\n<p>No, I'm not imagining a Rust-like exhaustiveness check. Plain-and-simple \"does the function end with <code>return Some(..)</code>? If so the function is infallible, if not the function is fallible, nothing fancier.</p>\n</blockquote>",
        "id": 262075161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637333271
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-974301377\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<blockquote>\n<p>Assuming that that world exists, then there's no need to manually mark anything as infallible,</p>\n</blockquote>\n<p>But the original example is something that <em>cannot</em> be caught by simple exhaustiveness checking.</p>\n<blockquote>\n<p>For compile-time-performance-reasons primarily I think that ISLE, independent of any other changes, should be able to infer this situation. When the function never returns <code>None</code> then it should return <code>T</code>, not <code>Option&lt;T&gt;</code>.</p>\n</blockquote>\n<p>I agree that we should do this, and this is what I was saying was an orthogonal compilation that the ISLE compiler can perform.</p>\n<blockquote>\n<p>So what I would imagine is a second addition to ISLE, after auto-inference of infallibility, which is to have some sort of <code>(compile_error \"foo\")</code>. This means that in the situation that I'd like to assert that the whole state space is covered by my two <code>rule</code> annotations I'd add a third catch-all with the compile error explaining why this shouldn't happen.</p>\n</blockquote>\n<p>I think <code>compile_error</code> is misleading because the ISLE compiler won't bail out with an error if it can't prove exhaustiveness here, it will just insert <code>_ =&gt; unreachable!(\"foo\")</code>.</p>\n<p>This is equivalent to what I was suggesting in the OP. We can either do</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nv\">A</span> <span class=\"nv\">B</span><span class=\"p\">)</span> <span class=\"nv\">C</span><span class=\"p\">)</span>\n<span class=\"c1\">;; ...</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">foo</span> <span class=\"nv\">_a</span> <span class=\"nv\">_b</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">unreachable</span> <span class=\"s\">\"I covered the whole state space\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span> <span class=\"nv\">foo</span> <span class=\"nv\">infallible</span> <span class=\"p\">(</span><span class=\"nv\">A</span> <span class=\"nv\">B</span><span class=\"p\">)</span> <span class=\"nv\">C</span><span class=\"p\">)</span>\n<span class=\"c1\">;; ...</span>\n</code></pre></div>\n<p>but they should both mean that we get <code>unreachable!()</code> at the end instead of <code>return None</code>.</p>\n<p>And then separately from that, the other do-we-ever-return-<code>None</code>? optimization can turn the signature from <code>Option&lt;T&gt;</code> to <code>T</code>.</p>\n</blockquote>",
        "id": 262106868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637345960
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-974321376\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>So I thought a bit about this just now:</p>\n<blockquote>\n<p>should be able to infer this situation. When the function never returns None then it should return T, not Option&lt;T&gt;.</p>\n</blockquote>\n<p>and I have to say that I think it implies a level of compiler complexity that we probably don't want to take on, for the basic reason that it implies a global (all-rules) inference with magic action-at-a-distance behavior, and a significant ISLE compiler rearchitecting to make that possible.</p>\n<p>The basic issue is that this implies (i) we change the signature of a ctor based on its content (all cases covered --&gt; <code>T</code> rather than <code>Option&lt;T&gt;</code>), and so (ii) we change the way we call one ctor from another ctor based on the other ctor's content, and so (iii) the body of ctor X depends on the body of ctor Y.</p>\n<p>(Said another way, one rule can invoke another, and so one rule's infallibility depends on all invoked rules' infallibility.)</p>\n<p>This is tractable if we disallow cycles; topo-sort and compile bottom-up, pinning down signatures as we go. But while we've discussed stratification / disallowing cycles, we currently don't, and IMHO the ability to (co)recurse might actually be useful at some point. But if we allow cycles then we have a global fixpoint analysis for infallibility!</p>\n<p>This feels very similar to analogous global-type-inference issues in other languages; I'd prefer not to reinvent half of Hindley-Milner here :-)</p>\n<p>I think probably the right approach is what @fitzgen suggests above, with an explicit <code>infallible</code> keyword in the decl; this is the moral equivalent of requiring explicit type signatures at the top level to allow separate function compilation.</p>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 262111239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637347754
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-974321376\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>So I thought a bit about this just now:</p>\n<blockquote>\n<p>should be able to infer this situation. When the function never returns None then it should return T, not Option&lt;T&gt;.</p>\n</blockquote>\n<p>and I have to say that I think it implies a level of compiler complexity that we probably don't want to take on, for the basic reason that it implies a global (all-rules) inference with magic action-at-a-distance behavior, and a significant ISLE compiler rearchitecting to make that possible.</p>\n<p>The basic issue is that this implies (i) we change the signature of a ctor based on its content (all cases covered --&gt; <code>T</code> rather than <code>Option&lt;T&gt;</code>), and so (ii) we change the way we call one ctor from another ctor based on the other ctor's content, and so (iii) the body of ctor X depends on the body of ctor Y.</p>\n<p>(Said another way, one rule can invoke another, and so one rule's infallibility depends on all invoked rules' infallibility.)</p>\n<p>This is tractable if we disallow cycles; topo-sort and compile bottom-up, pinning down signatures as we go. But while we've discussed stratification / disallowing cycles, we currently don't, and IMHO the ability to (co)recurse might actually be useful at some point. But if we allow cycles then we have a global fixpoint analysis for infallibility!</p>\n<p>This feels very similar to analogous global-type-inference issues in other languages; I'd prefer not to reinvent half of Hindley-Milner here :-)</p>\n<p>I think probably the right approach is what @fitzgen suggests above, with an explicit <code>infallible</code> keyword in the decl; this is <del>the moral equivalent of</del> (edit: actually just literally) requiring explicit type signatures at the top level to allow separate function compilation.</p>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 262111430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637347821
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-974344872\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>We could bail out on cycles. That should still catch the vast majority of the cases.</p>\n</blockquote>",
        "id": 262116530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637349831
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-974369917\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>@bjorn3 that seems to me not to solve the fundamental issue, which is the complexity and action-at-a-distance, and adds a hybrid sometimes-available-but-there's-a-perf-cliff-to-avoid flavor of problem as well. I'd prefer to have signatures nailed down explicitly by the decls, with something like Nick's proposed syntax.</p>\n</blockquote>",
        "id": 262119513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637351085
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-974393263\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>I'm happy to defer to y'all and I don't feel too strongly about this. I don't get the impression my idea is fully understood, but it's not really that important anyway.</p>\n</blockquote>",
        "id": 262122293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637352243
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546#issuecomment-974411454\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>@alexcrichton if there's a way to do it that we're missing, I'm still all-ears! I definitely understand the \"if the function body never returns <code>None</code> then we can return <code>T</code>\" idea, locally to codegen for the function; the issue as I understand it is just at callsites to this function, where we have to know whether it returns <code>Option&lt;T&gt;</code> or <code>T</code> without examining its body. Anyway, sorry if we're missing a solution here and happy to discuss more if desired :-)</p>\n</blockquote>",
        "id": 262124318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637353178
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3546\">issue #3546</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">https://github.com/bytecodealliance/wasmtime/pull/3545</a>, we added this internal constructor:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span> <span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"p\">)</span> <span class=\"nv\">VectorSize</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">8</span> <span class=\"mi\">16</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size8x16</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">16</span> <span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size16x8</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">32</span> <span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size32x4</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">vector_size</span> <span class=\"p\">(</span><span class=\"nv\">multi_lane</span> <span class=\"mi\">64</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nv\">VectorSize.Size64x2</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>it generates this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Generated as internal constructor for term vector_size.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">constructor_vector_size</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ctx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg0</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">VectorSize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pattern0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">pattern1_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span>::<span class=\"n\">multi_lane</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pattern0_0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 952.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size8x16</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 953.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size16x8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 954.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size32x4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pattern1_1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 955.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr0_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VectorSize</span>::<span class=\"n\">Size64x2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr0_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It handles all cases, but neither the Rust compiler nor the ISLE compiler can really tell that. So it would be nice if we could mark it infallible in the ISLE source somehow, and then have an <code>unreachable!()</code> at the end of the generated function, instead of <code>return None</code>.</p>\n<p>Please commence with syntax bike shedding suggestions :)</p>\n</blockquote>",
        "id": 281212115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651694563
    }
]