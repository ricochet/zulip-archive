[
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8004\">Issue #8004</a>.</p>",
        "id": 423729701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709083318
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8004\">Issue #8004</a>.</p>",
        "id": 423729702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709083318
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8004\">issue #8004</a>:</p>\n<blockquote>\n<p>In <code>cranelift/codegen/src/egraph.rs</code>, <code>OptimizeCtx::subsume_values</code> is shared among all the recursive invocations of <code>optimize_pure_enode</code> and the <code>simplify</code> constructor. That means using <code>subsume</code> in one rule can cause a rule applied to a different instruction to behave as if it used <code>subsume</code> as well, if the latter happens to return the same value as the former.</p>\n<p>This is not a correctness bug: it does not cause rules to apply when they shouldn't. It just means we're pruning the e-graph more aggressively than I think we intended to, which means we may be missing optimizations.</p>\n<p>I noticed this while investigating #7999 but that is an overly complicated reproducer for this issue.</p>\n<p>A too-simple test case is <code>imul v0, (iconst 1)</code>.</p>\n<ul>\n<li>This should get rewritten to <code>ishl v0, (iconst 0)</code> because 1 is a power of two (though that's another thing we might want to change).</li>\n<li>When that new <code>ishl</code> is recursively optimized, it should be subsumed to <code>v0</code> because a shift by 0 is a no-op.</li>\n<li>Then we return to optimizing the <code>imul</code> and see that the result of the <code>ishl</code> rule has been returned as <code>v0</code>, which is already subsumed because of this bug, and we ignore any other <code>imul</code> optimization rules as a result.</li>\n</ul>\n<p>That isn't a great test case because frankly that's a desirable outcome in that case. But I think we should discuss this more generally because I don't think this is how <code>subsume</code> was intended to work.</p>\n<p>cc: @elliottt @cfallin @lpereira</p>\n</blockquote>",
        "id": 423729703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709083319
    }
]