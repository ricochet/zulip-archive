[
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888#issuecomment-925652589\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton, is this still the current TODO list for threading support? This there a more detailed roadmap to look at?</p>\n</blockquote>",
        "id": 254507506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632389837
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888#issuecomment-925682632\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>Cranelift has support for atomics, so that checkbox should be checked.</p>\n</blockquote>",
        "id": 254511967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632392361
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888#issuecomment-925927037\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>AFAIK it's basically still relevant, yeah. I don't believe that much work has been done to implement this in Wasmtime. I believe that most atomic operations are supported in Cranelift now as-mentioned but that's just the tip of the iceberg. I'm not sure how thoroughly tested they are or whether there's some missing instructions needing an implementation. I also don't know if normal loads/stores with memory need to be updated and/or change codegen in a shared-memory world. Overall I don't think we're in the position where we can simply say Cranelift is \"done\" and the work is elsewhere, but I could be wrong!</p>\n<p>There's still quite a lot to do with Wasmtime itself. Designing shared memories and how that will work has not yet been done.</p>\n</blockquote>",
        "id": 254555783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632411330
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>I've noticed that there's a few issues related to threads lying around, so I figure it's a good idea to go ahead and open a dedicated tracking issue for various work items. The work here that needs to happen I believe is:</p>\n<ul>\n<li>[x] Cranelift needs atomics support - <a href=\"https://github.com/bytecodealliance/cranelift/issues/582\">bytecodealliance/cranelift#582</a></li>\n<li>[ ] Ensure <code>wasmtime</code> internal data structures are threadsafe<ul>\n<li><code>wasmtime_runtime::LinearMemory</code></li>\n<li><code>wasmtime::{Store, Module, Memory}</code> (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\">https://github.com/bytecodealliance/wasmtime/issues/777</a>)</li>\n<li>...</li>\n</ul>\n</li>\n<li>[ ] Design a WASI (or other) API to spawn a thread</li>\n<li>[ ] Port an existing library to this infrastructure and prove it out.</li>\n</ul>\n</blockquote>",
        "id": 255794661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633116094
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>I've noticed that there's a few issues related to threads lying around, so I figure it's a good idea to go ahead and open a dedicated tracking issue for various work items. The work here that needs to happen I believe is:</p>\n<ul>\n<li>[ ] Cranelift needs atomics support - <a href=\"https://github.com/bytecodealliance/cranelift/issues/582\">bytecodealliance/cranelift#582</a></li>\n<li>[ ] Ensure <code>wasmtime</code> internal data structures are threadsafe<ul>\n<li><code>wasmtime_runtime::LinearMemory</code></li>\n<li><code>wasmtime::{Store, Module, Memory}</code> (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\">https://github.com/bytecodealliance/wasmtime/issues/777</a>)</li>\n<li>...</li>\n</ul>\n</li>\n<li>[ ] Design a WASI (or other) API to spawn a thread</li>\n<li>[ ] Port an existing library to this infrastructure and prove it out.</li>\n</ul>\n</blockquote>",
        "id": 255794765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633116127
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>I've noticed that there's a few issues related to threads lying around, so I figure it's a good idea to go ahead and open a dedicated tracking issue for various work items. The work here that needs to happen I believe is:</p>\n<ul>\n<li>[ ] Cranelift needs atomics support - <a href=\"https://github.com/bytecodealliance/cranelift/issues/582\">bytecodealliance/cranelift#582</a></li>\n<li>[ ] Ensure <code>wasmtime</code> internal data structures are threadsafe<ul>\n<li><code>wasmtime_runtime::LinearMemory</code></li>\n<li><code>wasmtime::{Store, Module, Memory}</code> (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\">https://github.com/bytecodealliance/wasmtime/issues/777</a>)</li>\n<li>...</li>\n</ul>\n</li>\n<li>[ ] Design a WASI (or other) API to spawn a thread</li>\n<li>[ ] Port an existing library to this infrastructure and prove it out.</li>\n</ul>\n</blockquote>",
        "id": 285424584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654708580
    },
    {
        "content": "<p>muayyad-alsadi <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888#issuecomment-1462005054\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>I have a question when we say threading support do we mean the ability to</p>\n<ul>\n<li>to start a thread from a wasm function</li>\n<li>to be safely called from two different threads (that are started outside wasm ex. by the WASI env, eg. python)</li>\n</ul>\n<p>I'm more interested in the second<br>\n</p>\n</blockquote>",
        "id": 340596563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678366156
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888#issuecomment-1462239764\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>We already support running entirely independent wasm instances on multiple threads. As for wasm instances sharing resources, that is a prerequisite of being able to spawn threads from within wasm.</p>\n</blockquote>",
        "id": 340639481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678376050
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888#issuecomment-1462445462\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>@muayyad-alsadi, for the \"spawning a thread\" question, you might be interested in wasi-threads, which you could read about in this <a href=\"https://bytecodealliance.org/articles/wasi-threads\">blog post</a>. For the second question, I think @bjorn3 is right; I would just add that care has been taken to ensure that the API is thread-safe, mainly by using Rust's thread-safety restrictions. E.g., if you try to do something unsafe using Wasmtime's API, the Rust compiler should complain.</p>\n<p>@alexcrichton, I think we can close this issue?</p>\n</blockquote>",
        "id": 340666114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678382166
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888#issuecomment-1462582383\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>Agreed!</p>\n</blockquote>",
        "id": 340685194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678387265
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/888\">issue #888</a>:</p>\n<blockquote>\n<p>I've noticed that there's a few issues related to threads lying around, so I figure it's a good idea to go ahead and open a dedicated tracking issue for various work items. The work here that needs to happen I believe is:</p>\n<ul>\n<li>[ ] Cranelift needs atomics support - <a href=\"https://github.com/bytecodealliance/cranelift/issues/582\">bytecodealliance/cranelift#582</a></li>\n<li>[ ] Ensure <code>wasmtime</code> internal data structures are threadsafe<ul>\n<li><code>wasmtime_runtime::LinearMemory</code></li>\n<li><code>wasmtime::{Store, Module, Memory}</code> (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\">https://github.com/bytecodealliance/wasmtime/issues/777</a>)</li>\n<li>...</li>\n</ul>\n</li>\n<li>[ ] Design a WASI (or other) API to spawn a thread</li>\n<li>[ ] Port an existing library to this infrastructure and prove it out.</li>\n</ul>\n</blockquote>",
        "id": 340685197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678387265
    }
]