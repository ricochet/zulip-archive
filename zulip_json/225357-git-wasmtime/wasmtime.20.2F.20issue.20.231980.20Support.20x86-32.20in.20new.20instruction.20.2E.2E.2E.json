[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>We don't currently have fully working x86 support, but we have a backend in-tree that's largely completely. However, it uses the old instructions selection framework, and as described in #1936, Cranelift is in the process of switching to a new one. While the old framework won't be removed until quite a bit later, that means that not much work will go into it anymore, and that any investments into backends based on it will become obsolete.</p>\n<p>We should investigate the best approach to supporting x86 in the new framework.</p>\n<p>There's active work going on to implement x64 support in the new framework, but no current effort around x86. In #1789 @whitequark mentions that she'd be happy to contribute to x86 support in the new framework, but only if the general support for targeting x86 exists.</p>\n<p>@bnjbvr @julian-seward1, can you comment on what the best approach to take here would be? I understand that this isn't something that's high on your priority list, so as a first step we should just get a clearer picture of what this could look like, and the effort required.</p>\n</blockquote>",
        "id": 281211404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651694284
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>We don't currently have fully working x86 support, but we have a backend in-tree that's largely completely. However, it uses the old instructions selection framework, and as described in #1936, Cranelift is in the process of switching to a new one. While the old framework won't be removed until quite a bit later, that means that not much work will go into it anymore, and that any investments into backends based on it will become obsolete.</p>\n<p>We should investigate the best approach to supporting x86 in the new framework.</p>\n<p>There's active work going on to implement x64 support in the new framework, but no current effort around x86. In #1789 @whitequark mentions that she'd be happy to contribute to x86 support in the new framework, but only if the general support for targeting x86 exists.</p>\n<p>@bnjbvr @julian-seward1, can you comment on what the best approach to take here would be? I understand that this isn't something that's high on your priority list, so as a first step we should just get a clearer picture of what this could look like, and the effort required.</p>\n</blockquote>",
        "id": 281211418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651694289
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>We don't currently have fully working x86 support, but we have a backend in-tree that's largely completely. However, it uses the old instructions selection framework, and as described in #1936, Cranelift is in the process of switching to a new one. While the old framework won't be removed until quite a bit later, that means that not much work will go into it anymore, and that any investments into backends based on it will become obsolete.</p>\n<p>We should investigate the best approach to supporting x86 in the new framework.</p>\n<p>There's active work going on to implement x64 support in the new framework, but no current effort around x86. In #1789 @whitequark mentions that she'd be happy to contribute to x86 support in the new framework, but only if the general support for targeting x86 exists.</p>\n<p>@bnjbvr @julian-seward1, can you comment on what the best approach to take here would be? I understand that this isn't something that's high on your priority list, so as a first step we should just get a clearer picture of what this could look like, and the effort required.</p>\n</blockquote>",
        "id": 289333756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657636708
    },
    {
        "content": "<p>jain98 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980#issuecomment-1383107380\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>@tschneidereit @whitequark @cfallin @bjorn3 I would be interested in picking this up. I still need to dive deeper to come up with a concrete plan, but would one of you (or someone you could connect me to) be willing to mentor me?</p>\n</blockquote>",
        "id": 321462006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673776691
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980#issuecomment-1385969388\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>Hi @jain98! We're always happy to answer questions and help however we can. I'd encourage you to join the <code>#cranelift</code> stream at <a href=\"https://bytecodealliance.zulipchat.com/\">https://bytecodealliance.zulipchat.com/</a> as a good place to ask questions.</p>\n<p>Since all our current backends are 64-bit, we haven't necessarily designed everything to support 32-bit targets well. We'd like to fix that, but in the meantime just be aware that you may find some things are harder than they should be. There's been recent discussion about that in #5572, and the advice there applies here too.</p>\n</blockquote>",
        "id": 321914112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673985286
    },
    {
        "content": "<p>jain98 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980#issuecomment-1399381269\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>Hi @jameysharp, thanks for replying and a link to a recent discussion. I've already joined the cranelift zulip chat, but figured I'd start here as it seemed more intentional. </p>\n<p>It at least looks like there's already an existing backend for x86-32, no? If yes, could you could point me to it? That might be a good starting point for me.</p>\n</blockquote>",
        "id": 322799117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674351690
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980#issuecomment-1400885232\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>There used to be an x86-32 backend, but it was unmaintained and eventually got in the way of working on the rest of Cranelift, so it was deleted. If I'm reading the history correctly there have been at least two complete rewrites of how Cranelift backends are written since the last time that backend worked, so digging it up out of the git history probably won't help you much. Instead I'd suggest looking at the current x86-64 backend, which is mostly in <code>cranelift/codegen/src/isa/x64/</code>.</p>\n</blockquote>",
        "id": 323104017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674503131
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> removed the wasmtime:platform-support label from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">Issue #1980</a>.</p>",
        "id": 490219228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734723104
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980#issuecomment-2557607967\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>For those following this issue Wasmtime now supports 32-bit x86 via the <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/pulley.md\">Pulley interpreter</a> which should now be able to run most wasm programs. Pulley is not 100% finished yet in that we still have some polish to do, but it should be suitable for testing at this time. </p>\n<p>General support for Wasmtime on 32-bit x86 architectures should be \"solved\" now and if there are any issues please feel free to open a new issue, and this issue specifically will continue to track the addition of a 32-bit x86 backend for Cranelift.</p>\n</blockquote>",
        "id": 490219359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734723157
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980#issuecomment-2557615804\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>Oh, fantastic! From my perspective Pulley is probably good enough, since the failure case I'm trying to avoid is \"YoWASP does not work\"; if it works but is slow, I can print a message recommending to upgrade to a 64-bit Python.</p>\n<p>(Is there a way to detect that Pulley is being used?)</p>\n</blockquote>",
        "id": 490220101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734723491
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980#issuecomment-2557626373\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>Not currently, but it'd be reasonable to add one for sure</p>\n</blockquote>",
        "id": 490221175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734724030
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980#issuecomment-2557631784\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1980\">issue #1980</a>:</p>\n<blockquote>\n<p>I'd really like to have that, since as I understand there is a ~10x perf degradation, which is fine in that it enables the capability, but this being someone's only impression without understanding that it's unusually slow wouldn't be good.</p>\n</blockquote>",
        "id": 490221674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734724296
    }
]