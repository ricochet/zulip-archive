[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10010\">issue #10010</a>:</p>\n<blockquote>\n<p>I was profiling some SIMD-using code today and noticed that the WebAssembly simd instruction <code>v128.load32_splat</code> wasn't generating the x64 instruction I thought it was supposed to do. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/75f7b2bed7b2c4360a1a01fdfdb2cfaac9b0b6ae/cranelift/filetests/filetests/isa/x64/simd-splat-avx2.clif#L214-L238\">This is what I'd expect</a> but this is what I got:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i32x4</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span>\n\n<span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i32x4</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">clif</span><span class=\"o\">/</span><span class=\"n\">wasm_func_0</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">has_avx2</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span>\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\">             </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x64</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\">                   </span><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edx</span>\n<span class=\"w\">   </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"w\">             </span><span class=\"n\">vmovd</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">   </span><span class=\"n\">e</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"w\"> </span><span class=\"n\">f4</span><span class=\"w\">          </span><span class=\"n\">vpbroadcastd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm6</span>\n<span class=\"w\">  </span><span class=\"mi\">13</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"n\">fe</span><span class=\"w\"> </span><span class=\"n\">c6</span><span class=\"w\">             </span><span class=\"n\">vpaddd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c7</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\">             </span><span class=\"n\">addq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">39</span><span class=\"w\"> </span><span class=\"n\">cf</span><span class=\"w\">                </span><span class=\"n\">cmpq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">84</span><span class=\"w\"> </span><span class=\"n\">e4</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">       </span><span class=\"n\">je</span><span class=\"w\">      </span><span class=\"mi\">8</span>\n<span class=\"w\">  </span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">27</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>Notably at offset <code>e</code> the it's not using <code>vbroadcastss</code>, but instead a combo of <code>movl</code>, <code>vmovd</code>, and <code>vpbroadcastd</code>. I don't have a great way of measuring the relative performance of one vs the other as my hope was to convince Cranelift to generate one or the other to measure.</p>\n<p>The reason that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/75f7b2bed7b2c4360a1a01fdfdb2cfaac9b0b6ae/cranelift/codegen/src/isa/x64/lower.isle#L4793-L4795\">this lowering rule</a> isn't firing is due to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">Unused</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Once</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">Once</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Multiple</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">DFS</span><span class=\"w\"> </span><span class=\"n\">reaches</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">became</span><span class=\"w\"> </span><span class=\"n\">Multiple</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lowering</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"n\">inst3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">get_input_for_val</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">val</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cur_inst</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">inst3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">cur_scan_entry_color</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">InstColor</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">src</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">inst2</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">has</span><span class=\"w\"> </span><span class=\"n\">lowering</span><span class=\"w\"> </span><span class=\"n\">side</span><span class=\"w\"> </span><span class=\"n\">effect</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">side</span><span class=\"o\">-</span><span class=\"n\">effecting</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">inst2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">use</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">Multiple</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">put_value_in_regs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">val</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n</code></pre></div>\n<p>(or at least I think this is why <code>sinkable_load</code> isn't firing)</p>\n<p>I know I've run up against <code>compute_use_states</code> in the past and it's subtle enough that I can't ever seem to keep it in my head. I can't seem to wrap my head around this time either...</p>\n</blockquote>",
        "id": 493636883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736876498
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10010#issuecomment-2590778380\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10010\">issue #10010</a>:</p>\n<blockquote>\n<p>So the issue here is that <code>v8</code> is indeed used multiple times, and multiplicity is necessarily transitive, because we can't know how deep the rule-matching will go; so we can't allow the load to sink.</p>\n<p>Imagine the following (very smart, but possible) instruction selection rules:</p>\n<ul>\n<li>A branch argument (<code>v8</code> in the args to <code>block2</code> at the <code>brif</code>) has a special mega-CISC instruction that merges an add, a splat, and a load all together with the branch. We thus do the load side-effect here at the branch, if we permit the load to sink.</li>\n<li>A return-value sequence has a special mega-CISC instruction that merges an add, a splat and a load all together, puts the result in the return-value register, and returns. We thus do the load side-effect here at the <code>return</code> op, if we permit the load to sink.</li>\n</ul>\n<p>This particular example is a bit far-fetched, but it's important that we don't encode even more subtle knowledge about the possible instruction selection combinations into the core algorithms; they have to assume that rule-matching can go arbitrarily deep. We cannot allow the load to sink twice to two different locations, so the multiplicity analysis (correctly) propagates this multiple-use status backward to the load and prevents it from sinking.</p>\n<blockquote>\n<p>I know I've run up against compute_use_states in the past and it's subtle enough that I can't ever seem to keep it in my head. I can't seem to wrap my head around this time either...</p>\n</blockquote>\n<p>Believe it or not this was the simplest abstraction I could come up with at the time (I know, I'm not totally happy either...) It certainly errs on the side of safety but it did prevent real bugs we had / kept creating at the time. I know this last came up <a href=\"#narrow/stream/217117-cranelift/topic/ValueUseState.3A.3AMultiple.20and.20multi-result.20instructions/near/462833578\">here</a> and the explanation I gave there is as from-first-principles as I could make it; suggestions welcome for ways to explain it better and/or better algorithms that preserve all the safety properties we want!</p>\n</blockquote>",
        "id": 493642885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736878793
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10010#issuecomment-2590788410\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10010\">issue #10010</a>:</p>\n<blockquote>\n<p>I'll note as well that we could relax multiplicity if we \"cut\" it at certain points by pinning values into registers -- e.g., constrain that <code>v8</code> must be computed into a register, then allow it to be computed once (and avoid multiplicity flowing backward). However placing those cut-points is a provably NP-hard combinatorial optimization problem, which doesn't play nicely with our general ethos of single-pass algorithms (or at worst fast fixpoint analyses before our main lowering pass), so we haven't really pursued it further...</p>\n</blockquote>",
        "id": 493643385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736878994
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10010\">issue #10010</a>:</p>\n<blockquote>\n<p>I was profiling some SIMD-using code today and noticed that the WebAssembly simd instruction <code>v128.load32_splat</code> wasn't generating the x64 instruction I thought it was supposed to do. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/75f7b2bed7b2c4360a1a01fdfdb2cfaac9b0b6ae/cranelift/filetests/filetests/isa/x64/simd-splat-avx2.clif#L214-L238\">This is what I'd expect</a> but this is what I got:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i32x4</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span>\n\n<span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i32x4</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">clif</span><span class=\"o\">/</span><span class=\"n\">wasm_func_0</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">has_avx2</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span>\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\">             </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x64</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\">                   </span><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edx</span>\n<span class=\"w\">   </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"w\">             </span><span class=\"n\">vmovd</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">   </span><span class=\"n\">e</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"w\"> </span><span class=\"n\">f4</span><span class=\"w\">          </span><span class=\"n\">vpbroadcastd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm6</span>\n<span class=\"w\">  </span><span class=\"mi\">13</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"n\">fe</span><span class=\"w\"> </span><span class=\"n\">c6</span><span class=\"w\">             </span><span class=\"n\">vpaddd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c7</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\">             </span><span class=\"n\">addq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">39</span><span class=\"w\"> </span><span class=\"n\">cf</span><span class=\"w\">                </span><span class=\"n\">cmpq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">84</span><span class=\"w\"> </span><span class=\"n\">e4</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">       </span><span class=\"n\">je</span><span class=\"w\">      </span><span class=\"mi\">8</span>\n<span class=\"w\">  </span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">27</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>Notably at offset <code>e</code> the it's not using <code>vbroadcastss</code>, but instead a combo of <code>movl</code>, <code>vmovd</code>, and <code>vpbroadcastd</code>. I don't have a great way of measuring the relative performance of one vs the other as my hope was to convince Cranelift to generate one or the other to measure.</p>\n<p>The reason that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/75f7b2bed7b2c4360a1a01fdfdb2cfaac9b0b6ae/cranelift/codegen/src/isa/x64/lower.isle#L4793-L4795\">this lowering rule</a> isn't firing is due to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">Unused</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Once</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">Once</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Multiple</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">DFS</span><span class=\"w\"> </span><span class=\"n\">reaches</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">became</span><span class=\"w\"> </span><span class=\"n\">Multiple</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lowering</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"n\">inst3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">get_input_for_val</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">val</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cur_inst</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">inst3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">cur_scan_entry_color</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">InstColor</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">src</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">inst2</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">has</span><span class=\"w\"> </span><span class=\"n\">lowering</span><span class=\"w\"> </span><span class=\"n\">side</span><span class=\"w\"> </span><span class=\"n\">effect</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">side</span><span class=\"o\">-</span><span class=\"n\">effecting</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">inst2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">use</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">Multiple</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">put_value_in_regs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">val</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n</code></pre></div>\n<p>(or at least I think this is why <code>sinkable_load</code> isn't firing)</p>\n<p>I know I've run up against <code>compute_use_states</code> in the past and it's subtle enough that I can't ever seem to keep it in my head. I can't seem to wrap my head around this time either...</p>\n</blockquote>",
        "id": 494237559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737063569
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10010#issuecomment-2596945675\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10010\">issue #10010</a>:</p>\n<blockquote>\n<p>Oh dear I had a comment mostly typed up in a tab somewhere but seem to have lost it...</p>\n<p>In any case this makes more sense now! I was too narrowly focused on the loop that I completely missed the use of <code>v8</code> in the later <code>return</code>. This has helped me form a better mental model of what's going on here as well with your examples of hypothetical mega-CISC instructions too, thanks!</p>\n<p>Regardless I'd agree that it sounds like we probably just can't fix this for now in Cranelift at this time. I'm still not sure how much of a problem that really is. Visually \"less code better yay\" but I haven't done the legwork to measure one or the other. This is a downside to wasm instructions that fuse a load-and-thing (or thing-then-store) but there aren't all that many of those at this time (and they already have to be exploded on arm64 for example).</p>\n<p>Also sorry I didn't mean to say that this was overly complicated or at fault or anything. I was halfway through writing up something initially tracing through what I thought was going on but ended up abandoning it because I was getting lost (and missing the use of <code>v8</code> later on)</p>\n<p>For now I'm going to close this as I don't think there's anything we can do in the near-term and whether or not solving this problem long-term is unclear at this time if it's worth it. I'll defer such a future conclusion to later.</p>\n</blockquote>",
        "id": 494237564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737063570
    }
]