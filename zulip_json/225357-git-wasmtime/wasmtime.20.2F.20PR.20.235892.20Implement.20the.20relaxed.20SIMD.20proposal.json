[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is an implementation of the [relaxed SIMD proposal][proposal] which is expected to soon move to phase 4. This is a relatively small proposal which adds 20 new instructions operating over the preexisting <code>v128</code> type. The purpose of this proposal is to expose instructions that are not guaranteed to be deterministic across host platforms. For example the instructions added have different behavior for some inputs on x86_64 and aarch64. I believe the intention is that many real-world use cases for these instructions have inputs which \"avoid the edge cases\" to have the same behavior across platforms.</p>\n<p>Additionally as part of the specification of the relaxed SIMD proposal, however, there are annotated deterministic semantics for each instruction. In other words while each instruction is allowed to have different semantics across platforms there is still one listed canonical set of semantics. This commit implements this knobs as a <code>Config</code> option in Wasmtime. By default all relaxed simd instructions use their host-defined semantics (the most efficient ones) but a new <code>Config::relaxed_simd_deterministic</code> knob can be used to alter the codegen and force deterministic semantics.</p>\n<p>An example of this is that the <code>f32x4.relaxed_madd</code> instruction, a fused multiply and add instruction, can either be a fused operation or separate operations. By default Wasmtime will select the most efficient one, namely using two operations on x86_64 when the <code>fma</code> feature isn't available. If the <code>relaxed_simd_deterministic</code> option is enabled, however, then regardless of whether <code>fma</code> is available the fused semantics will be implemented as they're the deterministic semantics for this instruction.</p>\n<p>This commit includes an implementation of these instructions for the x64 and the aarch64 backend. The aarch64 implementation ended up being trivial since all of its instructions match the deterministic semantics of the proposal. Only support for encoding the <code>fmls</code> instruction was added since it wasn't already implemented. On x86_64 the implementation is much more subtle and exploits various edge cases in the proposal (leading me to the conclusion that the relaxed simd proposal is basically the \"let's acknowledge the nonstandard, but dominant, semantics of x86_64 proposal\").</p>\n<p>Implementation-wise this commit adds a number of new instructions to Cranelift all prefixed with <code>arch_*</code>. I've tried to document that the intended equivalence to a deterministic instruction and additionally document the edge cases (currently they've all got edge cases for x86_64 and none for aarch64, which I believe represents the current state of things). There may be better methods to do this, however, since this strategy does not seems scalable into the future if dozens-to-hundreds more instructions get proposed and implemented.</p>\n<p>There are a number of more optimal AVX512-based lowerings for the x86_64 backend for these instructions, but I haven't implemented any of them in this PR. All the support for x86_64 is based on AVX and below.</p>\n<p>Procedurally the spec tests were copied from the upstream proposal into the Wasmtime repository here since the WebAssembly/testsuite repo is somewhat inactive right now and it was the easiest way to integrate them. When the upstream repository is updated the local copies here can be deleted in favor of the upstream implementations.</p>\n<p>Finally I have not done rigorous testing of this PR yet. I've tried to be meticulous with rationalizing the spec-defined semantics of these wasm instructions against the architecture-specific behavior of each instruction. This has resulted in a number of PRs to the upstream specification to align with the intended instructions or clarify some certain lowerings. For example x86_64's lowering of <code>i16x8.relaxed_laneselect</code> is not correct with respect to the current specification but there is an issue open for this upstream. There is unfortunately no great way to fuzz these instructions inherently due to their nondeterministic semantics. Without a <code>differential</code> fuzzer all we can really do is verify that they compile which doesn't really provide much of a guarantee. My hope is that this can be considered more carefully before any decision to enable this proposal by default.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 338468894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677539506
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>.</p>",
        "id": 338713539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677627082
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>.</p>",
        "id": 338718368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677629704
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>.</p>",
        "id": 338869863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677683708
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>.</p>",
        "id": 338947640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677702199
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>.</p>",
        "id": 338947739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677702236
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1320858227\">PR review</a>.</p>",
        "id": 338983380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677717694
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1320858227\">PR review</a>.</p>",
        "id": 338983381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677717694
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1122473458\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a good note; can you create an issue to track this or let me know and I will create one? To me this comment boils down to \"a better lowering is possible\" and that seems like a good thing to remember to do.</p>\n</blockquote>",
        "id": 338983382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677717694
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1122470554\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe this English version helps?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        This instruction will permute the 8-bit lanes of `x` with the indices\n        specified in `y`. Each lane in the mask, `y`, uses the bottom four\n        bits for selecting the lane from `x` unless the most significant bit\n        is set, in which case the lane is zeroed. The output vector will have\n        the following contents when the element of `y` is in these ranges:\n\n        * `[0, 127]` -&gt; `x[y[i] % 16]`\n        * `[128, 255]` -&gt; 0\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 338983383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677717694
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1122475414\">PR review comment</a>:</p>\n<blockquote>\n<p>Should this instead be an <code>AND</code> condition (same below)?</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                if environ.relaxed_simd_deterministic() &amp;&amp; environ.has_native_fma() {\n</code></pre></div>\n<p>If someone turned off the relaxed SIMD feature but then their system had FMA available, they might get unexpectedly-rounded results? By turning off the relaxed SIMD feature, aren't they explicitly saying they want the double rounding?</p>\n</blockquote>",
        "id": 338983384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677717694
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1122476420\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe? (same below):</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                if !environ.relaxed_simd_deterministic() || !environ.is_x86() {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 338983385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677717694
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1122479427\">PR review comment</a>:</p>\n<blockquote>\n<p>I now see the copied-in WAST files down below and it might be good to track this task in an issue so someone else can pick it up once the testsuite is updated. Have you created a PR to upstreamed the changes that were necessary here to the relaxed SIMD testsuite?</p>\n</blockquote>",
        "id": 338983386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677717694
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>.</p>",
        "id": 339184435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677784028
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1322463970\">PR review</a>.</p>",
        "id": 339185575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677784368
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1123593484\">PR review comment</a>:</p>\n<blockquote>\n<p>This is currently intentional because I believe the \"deterministic\" sematnics for fma are the fused semantics, which the <code>fma</code> CLIF instruction guarantees. It's only the case where determinism isn't required and fma isn't available that the otherwise fastest lowering of two operations is used.</p>\n</blockquote>",
        "id": 339185576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677784368
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1322468270\">PR review</a>.</p>",
        "id": 339186151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677784564
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1123596304\">PR review comment</a>:</p>\n<blockquote>\n<p>Good idea, I opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5914\">https://github.com/bytecodealliance/wasmtime/issues/5914</a> for this. I created <a href=\"https://github.com/WebAssembly/testsuite/pull/65\">https://github.com/WebAssembly/testsuite/pull/65</a> but it sat for awhile with no response and is now outdated due to upstream changes, and I'm not sure who, if anyone, is watching that repository.</p>\n</blockquote>",
        "id": 339186172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677784565
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1123597500\">PR review comment</a>:</p>\n<blockquote>\n<p>This is currently intentional where if determinism is required it takes the first branch which has the deterministic lowering in terms of CLIF instruction semantics. The branch isn't taken though for x86 when speed is desired b/c x86 has a faster lowering.</p>\n<p>If you have a suggestion though to restructure this to more obviously communicate this intent it's probably good to implement though since the current <code>if</code> is pretty subtle and I think easy to lose track of.</p>\n</blockquote>",
        "id": 339186353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677784646
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1322470090\">PR review</a>.</p>",
        "id": 339186356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677784646
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>.</p>",
        "id": 339186373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677784657
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1324333518\">PR review</a>.</p>",
        "id": 339403015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677864219
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1124785093\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, ok... yeah, these conditions are tricky to think through.</p>\n</blockquote>",
        "id": 339403018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677864219
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1324342095\">PR review</a>.</p>",
        "id": 339404123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677864504
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1124791320\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok, makes sense. In terms of communication, I guess the missing piece of information for me was that I couldn't remember off the top of my head which lowering had the deterministic semantics. Now, obviously, I should have trusted that the <code>if environ.relaxed_simd_deterministic()</code> side of the branch was the deterministic lowering but in this review I was starting to wonder which lowering was which. This may just be a review issue, but if you wanted to make it extra clear the deterministic lowering could get a comment like: <code>// This is the deterministic lowering for ..., see https://github.com/WebAssembly/relaxed-simd/...</code>.</p>\n</blockquote>",
        "id": 339404125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677864505
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>.</p>",
        "id": 339895877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678115837
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1326540459\">PR review</a>.</p>",
        "id": 339896179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678115902
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1126581564\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the spec isn't quite in the state where there's a URL to link to unfortunately. I don't think that the deterministic semantics are actually written down anywhere other than the spec draft currently. I'll try to remember to update things here though once that's update.</p>\n<p>Otherwise though I went ahead and added comments to all the deterministic cases at least english-explaining what the intention was.</p>\n</blockquote>",
        "id": 339896182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678115902
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1327290305\">PR review</a>.</p>",
        "id": 339979027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678141417
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1327277682\">PR review</a>.</p>",
        "id": 339980326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678141956
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1327277682\">PR review</a>.</p>",
        "id": 339980327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678141957
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1127091672\">PR review comment</a>:</p>\n<blockquote>\n<p>I think I'd prefer not to have a default implementation of <code>has_native_fma</code>, or it should default to <code>false</code>. That seems to me like something that a backend needs to opt in to, not opt out of.</p>\n</blockquote>",
        "id": 339980328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678141957
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1127106093\">PR review comment</a>:</p>\n<blockquote>\n<p>This comment seems wrong since only one possible outcome is asserted.</p>\n</blockquote>",
        "id": 339980329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678141957
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1127099677\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure what this sentence was supposed to say. Maybe delete \"the fastest\", or replace \"this difference in\" with something else?</p>\n</blockquote>",
        "id": 339980330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678141957
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a> from <code>relaxed-simd-maybe</code> to <code>main</code>.</p>",
        "id": 340136764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678202398
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a>.</p>",
        "id": 340136871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678202417
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#discussion_r1128038714\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah this is just copied <a href=\"https://github.com/WebAssembly/relaxed-simd/blob/4afd146464237d411e7d1ff587bf1194c3c2eea1/test/core/relaxed-simd/i16x8_relaxed_q15mulr_s.wast#L24\">from the upstream spec</a> which I think is just a copy/paste artifact, but if you'd like I think they're pretty accepting of PRs.</p>\n</blockquote>",
        "id": 340136992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678202445
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892#pullrequestreview-1328785888\">PR review</a>.</p>",
        "id": 340136993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678202445
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5892\">PR #5892</a>.</p>",
        "id": 340155836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678206798
    }
]