[
    {
        "content": "<p>mchesser opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979\">PR #6979</a> from <code>mchesser:x64-store-imm</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Improve code generation of store_imm on x64 by adding a new rule that directly handles stores of small immediates.</p>\n<p>Currently storing to constant to memory is achieved by first copying the constant into a temporary register, then performing a store of the register value to memory. For example:</p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>    v1 = load.i64 v0\n    v2 = iconst.i8 1\n    store v2, v1\n</code></pre></div>\n<p>Is currently compiled to:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nf\">MOV</span><span class=\"w\"> </span><span class=\"no\">RCX</span><span class=\"p\">,</span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">RDI</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nf\">MOV</span><span class=\"w\"> </span><span class=\"no\">EDX</span><span class=\"p\">,</span><span class=\"mi\">0x1</span>\n<span class=\"w\">    </span><span class=\"nf\">MOV</span><span class=\"w\"> </span><span class=\"no\">byte</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">RCX</span><span class=\"p\">],</span><span class=\"no\">DL</span>\n</code></pre></div>\n<p>On x86 constants can be stored directly to memory, e.g., after this patch, the constant is inlined into the store instruction removing the extra temporary register.</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nf\">MOV</span><span class=\"w\"> </span><span class=\"no\">RCX</span><span class=\"p\">,</span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">RDI</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nf\">MOV</span><span class=\"w\"> </span><span class=\"no\">byte</span><span class=\"w\"> </span><span class=\"no\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">RCX</span><span class=\"p\">],</span><span class=\"mi\">0x1</span>\n</code></pre></div>\n<p>The overall performance impact is probably very minimal, but it could help with frontend/decoder pressure in cases where this pattern is common.</p>\n<p>(Draft PR since this was partially an exercise in understanding ISLE so I could be missing something here).<br>\n</p>\n</blockquote>",
        "id": 389811443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694150351
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979#pullrequestreview-1618675464\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for this! </p>\n<p>There's a few tests which need to be updated which can be done with <code>CRANELIFT_TEST_BLESS=1 cargo run test filetests</code> from the <code>cranelift</code> directory. Otherwise though could you additionally add some <code>*.clif</code> tests in the <code>cranelift/filetests/filetests/isa/x64/</code> directory specifically for these lowering rules? I think it'd be good to showcase a range of constants being stored to ensure that they call get codegen'd correctly.</p>\n</blockquote>",
        "id": 390052436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694280844
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979#pullrequestreview-1618675464\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for this! </p>\n<p>There's a few tests which need to be updated which can be done with <code>CRANELIFT_TEST_BLESS=1 cargo run test filetests</code> from the <code>cranelift</code> directory. Otherwise though could you additionally add some <code>*.clif</code> tests in the <code>cranelift/filetests/filetests/isa/x64/</code> directory specifically for these lowering rules? I think it'd be good to showcase a range of constants being stored to ensure that they call get codegen'd correctly.</p>\n</blockquote>",
        "id": 390052437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694280844
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979#discussion_r1320614653\">PR review comment</a>:</p>\n<blockquote>\n<p>If you're up for it I think it might be good to update the <code>MovImmM</code> variant itself. Looking at <code>emit.rs</code> it will panic if the low 32-bits of the <code>value</code> here don't sign-extend into the full 64-bits, so the <code>MovImmM</code> should I think store <code>i32</code> instead of <code>i64</code>. With that you could add extra matching here that <code>value</code> fits within a 32-bit signed integer.</p>\n</blockquote>",
        "id": 390052438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694280845
    },
    {
        "content": "<p>mchesser updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979\">PR #6979</a>.</p>",
        "id": 390091680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694315500
    },
    {
        "content": "<p>mchesser updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979\">PR #6979</a>.</p>",
        "id": 390093394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694316768
    },
    {
        "content": "<p><strong>mchesser</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979\">PR #6979</a> as ready for review.</p>",
        "id": 390095521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694318441
    },
    {
        "content": "<p><strong>mchesser</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979\">PR #6979</a>.</p>",
        "id": 390095525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694318442
    },
    {
        "content": "<p><strong>mchesser</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979\">PR #6979</a>.</p>",
        "id": 390095526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694318442
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979#pullrequestreview-1620064360\">PR review</a>:</p>\n<blockquote>\n<p>Thanks again for this!</p>\n</blockquote>",
        "id": 390315283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694440395
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979#pullrequestreview-1620064360\">PR review</a>:</p>\n<blockquote>\n<p>Thanks again for this!</p>\n</blockquote>",
        "id": 390315287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694440396
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979#discussion_r1321590013\">PR review comment</a>:</p>\n<blockquote>\n<p>cc @saulecabrera, this is making the preexisting panic more explicit but it's one where I think the <code>Err</code> case will want to be handled via a move-to-register then store instruction.</p>\n<p>(in a future PR, no need to do anything here @mchesser)</p>\n</blockquote>",
        "id": 390315288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694440396
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6979\">PR #6979</a>.</p>",
        "id": 390326540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694443338
    }
]