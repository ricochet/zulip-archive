[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423#issuecomment-1347652826\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423\">issue #5423</a>:</p>\n<blockquote>\n<p>The current codegen suppresses some useful Rust compiler diagnostics by emitting expressions like <code>18446744073709551615i128 as u64</code>. Is that constant being silently truncated to 64 bits? If it were written as just <code>18446744073709551615</code> and used in a context where its type is inferred to be <code>u64</code>, then Rust would tell us if the constant was nonsense. For anyone reading the generated code, emitting <code>0xffffffffffffffff</code> instead would help answer that question. But we don't generally expect people to do that, so getting the Rust compiler to check for us is better.</p>\n<p>I can confirm we don't have any constants that are getting silently truncated right now. As you guessed, I didn't implement the extra type-casting in my new codegen, and even then Rust didn't complain about the magnitude of constants in current backends. It wouldn't be hard to emit the same kind of casts that ISLE currently uses, but I think it's worth having a compile-time check for this kind of mistake.</p>\n<p>This PR is because in addition to checking for too-big constants, Rust also rejects negation on unsigned constants. I don't think that's so useful to check at compile time, but it doesn't look like it's a feature that's been used much at all in backends, so I figured it wouldn't be a big deal to lose it.</p>\n<p>I did initially write this patch with <code>0xFFFF_FFFF_FFFF_FFFF</code> and <code>0xFFFF_FF80</code> and so on. I liked that writing <code>u64_sub(0, 128)</code> instead makes explicit that the result is supposed to be a <code>u64</code>. But there are other ways to fix this.</p>\n<p><code>signed_min</code> and <code>signed_max</code> are used exactly once each, like <code>(imm $I32 (ImmExtend.Sign) (signed_max out_ty))</code>. How would you feel about pushing the call to <code>imm</code> inside <code>signed_min</code>, so the sign-extension becomes part of constructing the immediate?</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">signed_min</span><span class=\"w\"> </span><span class=\"nv\">$I8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">imm</span><span class=\"w\"> </span><span class=\"nv\">$I8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ImmExtend.Sign</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">0x80</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">signed_min</span><span class=\"w\"> </span><span class=\"nv\">$I16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">imm</span><span class=\"w\"> </span><span class=\"nv\">$I16</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ImmExtend.Sign</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">0x8000</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Similarly, the immediate constructed from -1 could be something like:</p>\n<p><div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">imm</span><span class=\"w\"> </span><span class=\"nv\">$I8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ImmExtend.Sign</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">0xFF</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 315499805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670897844
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423#issuecomment-1347694804\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423\">issue #5423</a>:</p>\n<blockquote>\n<p>That all makes sense, thanks -- I agree that finding a way to get compile-time checks on constant magnitudes would be ideal. re: this:</p>\n<blockquote>\n<p>This PR is because in addition to checking for too-big constants, Rust also rejects negation on unsigned constants. I don't think that's so useful to check at compile time, but it doesn't look like it's a feature that's been used much at all in backends, so I figured it wouldn't be a big deal to lose it.</p>\n</blockquote>\n<p>I actually do think that allowing negative constants is important, and papering over their lack by defining certain external constructors is not ideal -- do we do that each time we need another negative value? The fact that we do use negative constants in a few places now is evidence to me that they're useful, and they may come up in other situations later as well...</p>\n<p>I wonder whether another approach might not be better: why not give ISLE types a notion of bit-width, and check for out-of-bounds literals at the ISLE level? That seems strictly better in another way: it lifts the check to an explicitly-defined one in our DSL, rather than a side-effect of our target language. So something like</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then when lowering a <code>ConstInt</code> to sema (at which point we know the type), we can check that (i) the expected type is actually an integer primitive, and not some other primitive; and (ii) it's within range. Then we can decide what the acceptable range is: e.g., we could say that we accept -2^(bits-1) .. 2^bits, or the union of the range of signed and unsigned values of the given width. Thoughts?</p>\n</blockquote>",
        "id": 315504587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670902090
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423#issuecomment-1347701158\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423\">issue #5423</a>:</p>\n<blockquote>\n<blockquote>\n<p>e.g., we could say that we accept -2^(bits-1) .. 2^bits, or the union of the range of signed and unsigned values of the given width.</p>\n</blockquote>\n<p>although now that I've written this out, I'm starting to dislike it more; the asymmetry just feels weird and wrong.</p>\n<p>Alternative: lift a bit more of the integer type system into ISLE. Namely</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">unsigned</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">signed</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>such that in a <code>u64</code> context we accept literals in 0..2^64 and in an <code>i64</code> context we accept -2^63..2^63. Then we also add a builtin</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">imm</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nv\">-1:i64</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"c1\">;; sketching some syntax, please bikeshed something better</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>u64</code> used in term position is a cast (compiles to <code>as u64</code>, but also works with typechecking at ISLE level) and <code>:i64</code> on a constant sets the type of the constant.</p>\n<p>This is all a bit uncertain but I feel there's a better system for constants, and for integer types, buried in here somewhere...</p>\n</blockquote>",
        "id": 315505408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670902903
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423#issuecomment-1347701158\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423\">issue #5423</a>:</p>\n<blockquote>\n<blockquote>\n<p>e.g., we could say that we accept -2^(bits-1) .. 2^bits, or the union of the range of signed and unsigned values of the given width.</p>\n</blockquote>\n<p>although now that I've written this out, I'm starting to dislike it more; the asymmetry just feels weird and wrong.</p>\n<p>Alternative: lift a bit more of the integer type system into ISLE. Namely</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">unsigned</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">signed</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>such that in a <code>u64</code> context we accept literals in 0..2^64 and in an <code>i64</code> context we accept -2^63..2^63. Then we also add some syntax</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">imm</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nv\">-1:i64</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"c1\">;; sketching some syntax, please bikeshed something better</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>u64</code> used in term position is a cast (compiles to <code>as u64</code>, but also works with typechecking at ISLE level) and <code>:i64</code> on a constant sets the type of the constant.</p>\n<p>This is all a bit uncertain but I feel there's a better system for constants, and for integer types, buried in here somewhere...</p>\n</blockquote>",
        "id": 315505475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670902946
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423#issuecomment-1349740925\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5423\">issue #5423</a>:</p>\n<blockquote>\n<p>I think it'd be great to give ISLE a little more knowledge about primitive numeric types. My codegen prototype is currently checking whether the name of an integer constant's type starts with \"i\" to decide how to treat negative constants, which certainly isn't ideal.</p>\n<p>But also, I don't want to build that out right now. What do you think of the alternative patch I've just pushed here?</p>\n</blockquote>",
        "id": 315689132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670966753
    }
]