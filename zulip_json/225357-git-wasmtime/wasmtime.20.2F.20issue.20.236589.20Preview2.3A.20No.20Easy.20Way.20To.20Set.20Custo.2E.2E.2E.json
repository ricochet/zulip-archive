[
    {
        "content": "<p>adamgfraser opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6589\">issue #6589</a>:</p>\n<blockquote>\n<p>Currently all monotonic clock times are based on the time since the clock was created. See <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9a67597cae9199864ae17b4f3bf18a84863de2b0/crates/wasi/src/preview2/clocks/host.rs#L43\">here</a>. It would be nice to have an easy way to set this initial time to some other arbitrary value.</p>\n</blockquote>",
        "id": 366820834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686920237
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6589#issuecomment-1595494484\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6589\">issue #6589</a>:</p>\n<blockquote>\n<p>I'd love to hear more about the use case for this. At least in POSIX, the monotonic clock \"represents the amount of time since an unspecified point in the past\", so a consumer of such a clock is not allowed to care about when that base time was. Under what circumstance are you finding that it's important to be able to control this?</p>\n</blockquote>",
        "id": 367024656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686959888
    },
    {
        "content": "<p>adamgfraser <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6589#issuecomment-1595571015\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6589\">issue #6589</a>:</p>\n<blockquote>\n<p>If we have different instances we would like the monotonic time to represent the length of time since the same unspecified point in time.</p>\n</blockquote>",
        "id": 367036688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686966067
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6589#issuecomment-1599083967\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6589\">issue #6589</a>:</p>\n<blockquote>\n<p>Are your instances running inside the same store, or are they in different stores?</p>\n<p>Also, are you relying on the clocks being in sync for correctness, or is it just for performance measurements or some other perhaps non-critical activity?</p>\n<p>At a high level, this is an interesting question. If two independent components can assume that they're seeing the same monotonic clock without any explicit coordination, that's an implicit contract which breaks virtualization. In practical terms, this would prevent them from running on different machines connected via a network, without some kind of prearranged side channel to coordinate the clocks, for example.</p>\n<p>One possible direction to explore here would be APIs for <a href=\"https://github.com/WebAssembly/wasi-clocks/issues/39\">TAI time</a>, which would add monotonic clocks that have a physical-world correspondence, that instances could share just by virtue of occupying the same physical world. Strictly speaking, virtualization doesn't guarantee that two instances have the same physical-world correspondence, but we may be able to find some way to rationalize this.</p>\n</blockquote>",
        "id": 367980022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687276944
    }
]