[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5062#issuecomment-1280974579\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5062\">issue #5062</a>:</p>\n<blockquote>\n<p>Personally I've found that historically the spec test suite isn't really all that great at exercising compiler internals, so I'd expect to get a lot more bang-for-our-buck by updating fuzzing. Thinking again on this we should probably drop the <code>*_pooling</code> tests given the existence of the <code>spectests</code> fuzzer we have to simplify the testing setup (but not here in this PR of course).</p>\n<p>Is the egraph implementation ready for overall enabling when fuzzing? If not perhaps this option could be added to fuzzing but only enabled for the <code>spectests</code> fuzzer?</p>\n</blockquote>",
        "id": 304477913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666017718
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5062#issuecomment-1281394154\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5062\">issue #5062</a>:</p>\n<blockquote>\n<p>Yeah, actually, that's totally fine with me too. Once #5020 lands we'll fuzz with-egraphs against no-egraphs so we'll have full coverage; I was thinking it might be nice to have a stopgap but that's close enough and the spectests are small enough that it's probably not worth it.</p>\n</blockquote>",
        "id": 304545199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036171
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5062#issuecomment-1281398692\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5062\">issue #5062</a>:</p>\n<blockquote>\n<p>It looks like #5020 is only changing the <code>cranelift-fuzzgen</code> target, but would it also make sense to add this for Wasmtime's fuzzing?</p>\n</blockquote>",
        "id": 304546021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036401
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5062#issuecomment-1281400566\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5062\">issue #5062</a>:</p>\n<blockquote>\n<p>Yes, actually, we should do that too; I'll follow up with a PR.</p>\n</blockquote>",
        "id": 304546303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036505
    }
]