[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>:</p>\n<blockquote>\n<p>During instance initialization, we build two sorts of arrays eagerly:</p>\n<ul>\n<li>\n<p>We create an \"anyfunc\" (a <code>VMCallerCheckedAnyfunc</code>) for every function<br>\n  in an instance.</p>\n</li>\n<li>\n<p>We initialize every element of a funcref table with an initializer to<br>\n  a pointer to one of these anyfuncs.</p>\n</li>\n</ul>\n<p>Most instances will not touch (via call_indirect or table.get) all<br>\nfuncref table elements. And most anyfuncs will never be referenced,<br>\nbecause most functions are never placed in tables or used with<br>\n<code>ref.func</code>. Thus, both of these initialization tasks are quite wasteful.<br>\nProfiling shows that a significant fraction of the remaining<br>\ninstance-initialization time after our other recent optimizations is<br>\ngoing into these two tasks.</p>\n<p>This PR implements two basic ideas:</p>\n<ul>\n<li>\n<p>The anyfunc array can be lazily initialized as long as we retain the<br>\n  information needed to do so. A zero in the func-ptr part of the tuple<br>\n  means \"uninitalized\"; a null-check and slowpath does the<br>\n  initialization whenever we take a pointer to an anyfunc.</p>\n</li>\n<li>\n<p>A funcref table can be lazily initialized as long as we retain a link<br>\n  to its corresponding instance and function index for each element. A<br>\n  zero in a table element means \"uninitialized\", and a slowpath does the<br>\n  initialization.</p>\n</li>\n</ul>\n<p>The use of all-zeroes to mean \"uninitialized\" means that we can use fast<br>\nmemory clearing techniques, like madvise(DONTNEED) on Linux or just<br>\nfreshly-mmap'd anonymous memory, to get to the initial state without<br>\na lot of memory writes.</p>\n<p>Funcref tables are a little tricky because funcrefs can be null. We need<br>\nto distinguish \"element was initially non-null, but user stored explicit<br>\nnull later\" from \"element never touched\" (ie the lazy init should not<br>\nblow away an explicitly stored null). We solve this by stealing the LSB<br>\nfrom every funcref (anyfunc pointer): when the LSB is set, the funcref<br>\nis initialized and we don't hit the lazy-init slowpath. We insert the<br>\nbit on storing to the table and mask it off after loading.</p>\n<p>Performance effect on instantiation in the on-demand allocator (pooling<br>\nallocator effect should be similar as the table-init path is the same):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sequential</span><span class=\"o\">/</span><span class=\"n\">default</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">71.886</span><span class=\"w\"> </span><span class=\"n\">us</span><span class=\"w\"> </span><span class=\"mf\">72.012</span><span class=\"w\"> </span><span class=\"n\">us</span><span class=\"w\"> </span><span class=\"mf\">72.133</span><span class=\"w\"> </span><span class=\"n\">us</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"n\">sequential</span><span class=\"o\">/</span><span class=\"n\">default</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">22.243</span><span class=\"w\"> </span><span class=\"n\">us</span><span class=\"w\"> </span><span class=\"mf\">22.256</span><span class=\"w\"> </span><span class=\"n\">us</span><span class=\"w\"> </span><span class=\"mf\">22.270</span><span class=\"w\"> </span><span class=\"n\">us</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">69.117</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">69.060</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">69.000</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">Performance</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">improved</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So, 72µs to 22µs, or a 69% reduction.</p>\n</blockquote>",
        "id": 270511496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643874984
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-872017480\">PR review</a>.</p>",
        "id": 270574683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905006
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-872017480\">PR review</a>.</p>",
        "id": 270574684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905006
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798701049\">PR review comment</a>:</p>\n<blockquote>\n<p>Running across this I'm a bit confused because I thought that this would be handled elsewhere. Poking around I'm also surprised to not see any modifications to <code>initialize_tables</code>. Running this PR as well shows that this is still quite hot on instantiation.</p>\n<p>Overall it looks like <code>Table::get</code>, the API, is lazy, but element initialization isn't lazy yet?</p>\n</blockquote>",
        "id": 270574685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905006
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798688541\">PR review comment</a>:</p>\n<blockquote>\n<p>I was personally hoping we could get away from this entirely and avoid needing this, but I don't think that's going to be the case. If instead we lean into this, I've got two concerns about this approach:</p>\n<ul>\n<li>Performance wise <code>SharedSignatures::Table(val.clone())</code> happens to create this <code>SharedSignatures</code> which is a vec clone/allocation that otherwise doesn't really need to happen. That's something I think we should avoid.</li>\n<li>Otherwise conceptually <code>InstanceAllocationRequest</code> I feel is getting pretty confusing where it's basically just <code>&amp;wasmtime_jit::CompiledModule</code> but sort-of-not because we don't want to talk about all the types in one crate. This has performance costs because everything is stored in its own separate <code>Arc</code> which means allocation/deallocation is lots of little <code>Arc</code> adjustments instead of simply one. It also has maintainability issues because so much of this has to change every time we add a new field here (lots to plumb through here as you see).</li>\n</ul>\n<p>I feel that the changes made in this PR are somewhat past the breaking point that this is in need of a refactoring before landing. If you'd prefer I think it's ok to land the refactoring ahead of time but doing it as part of this PR is also fine by me.</p>\n<p>What I'm thinking though is that we'd create a trait like this in <code>wasmtime_runtime</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">env_module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime_environ</span>::<span class=\"n\">Module</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">unique_id</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">CompiledModuleId</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">memfds</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">ModuleMemFds</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">functions</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">PrimaryMap</span><span class=\"o\">&lt;</span><span class=\"n\">DefinedFuncIndex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FunctionInfo</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">shared_signatures</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SharedSignatures</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">wasm_data</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">image_base</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and then <code>InstanceAllocationRequest</code> would contain:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">InstanceAllocationRequest</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">Module</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ... anything else not related to modules</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I believe this will remove the need for management of <code>Arc</code> for each individual field all over the place and allow us to move towards having just one <code>Arc</code> inside of <code>wasmtime::Module</code>. I don't know whether <code>wasmtime_runtime::Module</code> would be implemented for <code>wasmtime::Module</code> or <code>wasmtime_jit::CompiledModule</code>. I think ideally <code>CompiledModule</code> would be used but I don't know if it has all the pieces internally necessary, it may be either <code>wasmtime::Module</code> or <code>wasmtime::ModuleInner</code> that implements this (or something like that).    </p>\n</blockquote>",
        "id": 270574686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905006
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798697220\">PR review comment</a>:</p>\n<blockquote>\n<p>Since this is the slow path this function might be a good candidate for <code>#[cold]</code> (not that I think it will have any effect other than preventing inlining and making asm a bit more readable should we happen to come across it)</p>\n</blockquote>",
        "id": 270574687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905006
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798708844\">PR review comment</a>:</p>\n<blockquote>\n<p>Instead of using <code>memset</code> here could the <code>alloc</code> above instead be <code>alloc_zeroed</code>?</p>\n</blockquote>",
        "id": 270574688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905006
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798723418\">PR review comment</a>:</p>\n<blockquote>\n<p>In general <code>InstanceHandle</code> is intended to roughly represent an owned instance, so I don't think that it's the best choice for this type parameter.</p>\n<p>I think that at the <code>Table</code> layer here it's best for <code>get</code> to return <code>enum { None, NotInitialized, Some(element) }</code> and for an upper layer to handle the lazy initialization. Notably I think that <code>Instance</code> would be a good place to handle the \"do the get, if that fails, do a set\" since that's where the data for the lazily initialized slot will be stored anyway.</p>\n</blockquote>",
        "id": 270574689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905006
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798709536\">PR review comment</a>:</p>\n<blockquote>\n<p>AFAIK this statement has no effect, it's still possible to use <code>vmctx_data</code> after this since rustc will automatically reborrow for this call.</p>\n</blockquote>",
        "id": 270574690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905006
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798689827\">PR review comment</a>:</p>\n<blockquote>\n<p>It's worth pointing out as well that this has ramifications on other parts of the system because currently every <code>Store</code> has a <code>ModuleRegistry</code> which keeps all instantiated modules alive for their backing data (e.g. keeping the <code>wasm_data: *mut [u8]</code> alive. With this <code>dyn Module</code> concept that would no longer be necessary really and we might be able to simplify <code>ModuleRegistry</code> in the future as well, but that's probably best left to a future PR.</p>\n</blockquote>",
        "id": 270574691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905007
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798731238\">PR review comment</a>:</p>\n<blockquote>\n<p>Right now I think that this may be detrimental to the on-demand allocator because it either does a too-large <code>memset</code> right now for the entire <code>VMContext</code> or it will need to call <code>calloc</code>, which also does a too-large <code>memset</code>.</p>\n<p>An alternative design, though, would be to pass a flag into this function whether the memory is known to be zero'd. That way we could conditionally zero out the array of <code>VMCallerCheckedAnyfunc</code> contents based on whether it was pre-zeroed already, making the pooling allocator efficiently use <code>madvise</code> while the on-demand allocator still initializes as little memory as possible.</p>\n<p>After saying this, though, I think it may actually be best to take this incrementally? What do you think about using <code>memset</code> here to zero memory and benchmarking later how much faster using <code>madvise</code> is for the pooling allocator? I'm a little worried about the <code>madvise</code> traffic being increased for the pooling allocator since we already know it's a source of slow tlb-shootdowns, and I'm afraid that any cost of that will be hidden by the other performance gains in this PR so we can't accurately measure the strategy of <code>memset</code>-on-initialize vs <code>madvise</code>-to-zero.</p>\n</blockquote>",
        "id": 270574692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905007
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798701493\">PR review comment</a>:</p>\n<blockquote>\n<p>This seems like it could be a footgun waiting to happen in the sense that it promotes a shared reference, <code>&amp;Instance</code>, to an <code>InstanceHandle</code> which can be trivially used to get <code>&amp;mut Instance</code>. Ideally, though, this function wouldn't need to be added at all. I'm hoping that my suggestion below about moving the <code>Instance</code> arguments out of <code>Table</code> itself will help avoid the need for this function.</p>\n</blockquote>",
        "id": 270574693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905007
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r798702701\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this use a <code>debug_assert!</code> that everything is zero'd?</p>\n</blockquote>",
        "id": 270574694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643905007
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270588631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643910086
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270590424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643910797
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270660824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643942789
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-872621015\">PR review</a>.</p>",
        "id": 270661050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643943064
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r799126623\">PR review comment</a>:</p>\n<blockquote>\n<p>(resolving, as I didn't actually push the latest changes that did the lazy init when you did this review; sorry!)</p>\n</blockquote>",
        "id": 270661051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643943064
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270661292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643943351
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270795297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644024357
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-873743161\">PR review</a>.</p>",
        "id": 270795637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644024616
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r799920435\">PR review comment</a>:</p>\n<blockquote>\n<p>Adjusted to <code>from_instance_mut</code> and take the <code>&amp;mut Instance</code>. Still needed at the moment as the lazy-table-init API needs to be accessible both from the runtime/libcall and from the upper <code>wasmtime</code> crate layer -- so I create an <code>InstanceHandle</code> temporarily inside the libcall. This seems reasonably safe but if there is a better way to encapsulate/reconfigure I'm all ears!</p>\n</blockquote>",
        "id": 270795638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644024616
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-873743258\">PR review</a>.</p>",
        "id": 270795677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644024659
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r799920548\">PR review comment</a>:</p>\n<blockquote>\n<p>I've refactored basically along these lines -- it cleaned a lot of things up. Thanks for the idea!</p>\n</blockquote>",
        "id": 270795679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644024660
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-873743839\">PR review</a>.</p>",
        "id": 270795817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644024794
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r799920959\">PR review comment</a>:</p>\n<blockquote>\n<p>Reworked this bit along the lines you suggest:</p>\n<ul>\n<li>the <code>TableElement</code> has an <code>UninitFunc</code> arm;</li>\n<li>There is a separate <code>TableAndOwningInstance</code> handle-like struct that encapsulates a <code>Table</code> and an <code>Instance</code> and knows how to do lazy init (and can hand out projected borrows to the underlying table);</li>\n<li>We get this <code>TableAndOwningInstance</code> in the various spots where a table is looked up on an instance.</li>\n</ul>\n<p>The design is still ever so slightly awkward (see comment on <code>InstanceHandle::from_instance_mut</code>) because it needs to be available both at the libcall layer and in the <code>wasmtime::Table</code> implementation, but this is a lot cleaner for sure.</p>\n</blockquote>",
        "id": 270795818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644024794
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270796419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644025331
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270799718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644029314
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270800425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030132
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270800950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030809
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-873767619\">PR review</a>.</p>",
        "id": 270800952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030812
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r799932555\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 270800953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030812
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-873767881\">PR review</a>.</p>",
        "id": 270800957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030820
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r799932563\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yes, added.</p>\n</blockquote>",
        "id": 270800958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030820
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-873768718\">PR review</a>.</p>",
        "id": 270801009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030846
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r799932580\">PR review comment</a>:</p>\n<blockquote>\n<p>Switched instead to pass in a \"not prezeroed\" flag as suggested below, so we can zero just the anyfunc area.</p>\n</blockquote>",
        "id": 270801010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030846
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-873770621\">PR review</a>.</p>",
        "id": 270801036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030904
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r799932649\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, ok; I was trying to be as lifetime-correct with the aliasing as possible but I suppose it was just paranoia. Removed this zeroing in any case.</p>\n</blockquote>",
        "id": 270801037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644030904
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-873780299\">PR review</a>.</p>",
        "id": 270801210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644031187
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r799933097\">PR review comment</a>:</p>\n<blockquote>\n<p>Modified to take a <code>prezeroed</code> flag as suggested -- good idea!</p>\n<p>I'm a little hesitant to settle on a <code>memset</code>-only design even for the pooling allocator, as my earlier measurements with a large module (spidermonkey.wasm) showed that that became really quite hot; that's why I had gone to the initialized-bitmap instead (1 bit vs 24 bytes to zero --&gt; 192x less). But I will benchmark this to be sure on Monday.</p>\n<p>Alternatively, I think that if we move to a single-slot-per-instance design for the pooling allocator, such that we have one <code>madvise</code> for everything (memories, tables), stretching that range to include a few extra pages for the Instance and VMContext should be no big deal (it will share one mmap-lock acquire and one set of IPIs), so I suspect that madvise-cost may not have to be a huge consideration in the future. Of course getting there implies removing uffd first, since it depends on the separate-pools design, so we would have to make that decision first.</p>\n</blockquote>",
        "id": 270801211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644031187
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270801495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644031542
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270802611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644033286
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270809741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644042830
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 270811371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644045378
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-874941320\">PR review</a>.</p>",
        "id": 271023286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-874941320\">PR review</a>.</p>",
        "id": 271023287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800837878\">PR review comment</a>:</p>\n<blockquote>\n<p>Can this <code>Arc&lt;Module&gt;</code> get folded into the <code>runtime_info</code> as well? (returned as <code>&amp;Module</code> since there shouldn't be a need to wrap this in an <code>Arc</code> any more)</p>\n</blockquote>",
        "id": 271023288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800837300\">PR review comment</a>:</p>\n<blockquote>\n<p>With recent refactorings does this still need to be in a separate <code>Arc</code>?</p>\n</blockquote>",
        "id": 271023289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800840076\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that this <code>map</code> iteration can probably be entirely replaced with <code>self.get_caller_checked_anyfunc().unwrap_or(ptr::null_mut())</code> now perhaps? (no need to comment that we're specifically forcing a lazy init ideally)</p>\n</blockquote>",
        "id": 271023290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800840878\">PR review comment</a>:</p>\n<blockquote>\n<p>The ownership here feels pretty weird to me and I'm not sure works out well. For example <code>TableAndOwningInstance</code> isn't connected to <code>&amp;mut</code> self so it's pretty easy to violate borrowing rules here.</p>\n<p>Overall though I think it'd ideally be best to remove the need for this. Could the <code>lazy_init</code> methods on <code>TableAndOwningInstance</code> be moved to methods on <code>Instance</code> here?</p>\n</blockquote>",
        "id": 271023291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800838511\">PR review comment</a>:</p>\n<blockquote>\n<p>If you're feeling extra-ambitious this would also be a good item to move into <code>ModuleRuntimeInfo</code> since it's the same for all modules. (this of course is fine to leave for later though)</p>\n</blockquote>",
        "id": 271023292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800843861\">PR review comment</a>:</p>\n<blockquote>\n<p>Were you able to test/benchmark to see the affect of <code>madvise</code>-vs-<code>memset</code> and see which is faster?</p>\n<p>Given our recent measurements about ipis and <code>madvise</code> I would actually imagine that always-<code>memset</code> may be the approach we want here</p>\n</blockquote>",
        "id": 271023293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800841950\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this can probably go back to the way it was, right? e.g. the trait would be:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ModuleRuntimeInfo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">shared_signatures</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SharedSignatures</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 271023294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800846039\">PR review comment</a>:</p>\n<blockquote>\n<p>This might be something worth benchmarking as well perhaps. Now that I see this I see that this is an indirect function call in a loop (and with this current PR is actually creating-and-destroying an <code>Arc</code> each iteration of the loop here). </p>\n<p>I think this can probably be fixed by moving the <code>shared_signatures</code> call above the loop (but it's still good to remove the <code>Arc</code> traffic). Otherwise though in the future the table built here is static-per-module so we could probably also store a long-lived table in the module itself and have a level of indirection here like we do for the builtin functions (although that's of course all better left for a future PR)</p>\n</blockquote>",
        "id": 271023295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800842544\">PR review comment</a>:</p>\n<blockquote>\n<p>If possible I think it'd be best to avoid adding this impl, and if the signature of the trait is changed like I mentioned above I think this can be avoided.</p>\n</blockquote>",
        "id": 271023296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800847164\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this use a method on <code>VMOffsets</code> or some other similar helper. I still really want to implement the change where we shrink this table, and hardcoding that the size of the table is the size of <code>instance.module.functions.len()</code> is somewhat non-obvious here and perhaps disconnected from other calculations about the size of this table.</p>\n</blockquote>",
        "id": 271023297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800847992\">PR review comment</a>:</p>\n<blockquote>\n<p>To avoid the <code>clone()</code> here can the module be provided as an argument? I think that's done for tables/memories since we have a copy of the module already in the <code>InstanceAllocationRequest</code> which can be separately borrowed</p>\n</blockquote>",
        "id": 271023298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800849252\">PR review comment</a>:</p>\n<blockquote>\n<p>If this sticks around (maybe-pre-zeroed, which I still think should be measured first before we commit to it) then I think it should be a named enum parameter instead of a comment-on-each-callsite-with-bool parameter.</p>\n</blockquote>",
        "id": 271023299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800852850\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm only this far in reviewing and haven't gotten to the table module yet, but I don't think that the <code>REF_MASK</code> or w/e encoding is done internally should be open-coded here, instead this seems like something that the method on <code>elem.into_raw()</code> would handle</p>\n</blockquote>",
        "id": 271023300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800851847\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this have <code>.expect</code> or a comment indicating why the <code>.unwrap()</code> is ok?</p>\n</blockquote>",
        "id": 271023301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800854333\">PR review comment</a>:</p>\n<blockquote>\n<p>If it works out I think it'd be best to return this as <code>&amp;Arc&lt;MemoryMemFd&gt;</code> instead of returning the <code>Arc</code>-by-value, since that's generally more flexible and delays the reference counting until it really needs to happen.</p>\n</blockquote>",
        "id": 271023302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800857809\">PR review comment</a>:</p>\n<blockquote>\n<p>Does this need to be a separate allocation? I was expecting this could do <code>impl ModuleRuntimeInfo for ModuleInner</code> or similar.</p>\n</blockquote>",
        "id": 271023303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800860871\">PR review comment</a>:</p>\n<blockquote>\n<p>Having <code>ModuleRuntimeInfo for ModuleInner</code> would remove the need for the unsafety here entirely I think since we'd never need <code>&amp;'static [u8]</code> for the data.</p>\n</blockquote>",
        "id": 271023304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259206
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800855085\">PR review comment</a>:</p>\n<blockquote>\n<p>I commented above, but ideally I think this would not be <code>pub(crate)</code> and would instead be local to this module.</p>\n<p>Additionally I think the definition here could be <code>!REF_INIT_BIT</code>?</p>\n</blockquote>",
        "id": 271023305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259207
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800859943\">PR review comment</a>:</p>\n<blockquote>\n<p>The <code>Module</code>-entry-points I already always find a bit confusing since there's so many, but if setting the name is really so onerous that we need a differently-delegated entry point for each one that feels like overkill for such a minor feature. I'm not sure if a named module is really used all that much, if ever, to the point that if it's necessary to have brand new entry points all over the place here to juggle the <code>Arc</code> and such it seems like we should just remove the ability to customize the name.</p>\n</blockquote>",
        "id": 271023306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259207
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800861966\">PR review comment</a>:</p>\n<blockquote>\n<p>This is one reason I think that this should do <code>ModuleRuntimeInfo for ModuleInner</code>, I don't think there's any reaosn to duplicate the information within a module, instead it should all reside in one location and it's always referenced from there.</p>\n</blockquote>",
        "id": 271023307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259207
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800865446\">PR review comment</a>:</p>\n<blockquote>\n<p>In the same manner that we have <code>enum MemoryInitialization</code> with one variant being paged, I think it would be a better design to have <code>enum TableInitialization</code> with one variant being <code>Vec&lt;Option&lt;FuncIndex&gt;&gt;</code> for tables where we statically know how the initialization happens. That would also shift more of this work to compile time where I think it probably better fits as well.</p>\n</blockquote>",
        "id": 271023308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644259207
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-875147432\">PR review</a>.</p>",
        "id": 271029359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644261882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800985755\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, the intent was to try not to force too much turning-inside-out in calling code, but I can invert this if needed; the <code>Instance</code> is available everywhere this is used I think.</p>\n<p>The intent here was to try to bundle all of the relevant bits together for extra safety: otherwise, you specify the index once when getting the <code>Table</code> but then again when accessing bits of the <code>Instance</code> as it locates the correct info in its lazy-init structures. </p>\n<p>The ownership concern I think should be addressed if we hold a <code>&amp;'a mut Instance</code> with the usual <code>'a</code>-tied-to-<code>self</code> pattern yeah? This was originally written this way because I had to use <code>InstanceHandle</code>s to expose to the <code>wasmtime</code> crate but now it's all wrapped up again so that's no longer an issue.</p>\n<p>Anyway I'll play with this a bit more...</p>\n</blockquote>",
        "id": 271029360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644261883
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800985755\">PR review comment</a>.</p>",
        "id": 271029380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644261896
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-875153828\">PR review</a>.</p>",
        "id": 271029910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644262201
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r800990115\">PR review comment</a>:</p>\n<blockquote>\n<p>In some sense <code>Instance</code> is \"the package\" in this case so I'd prefer to avoid adding more package types than necessary. The ownership in all of <code>wasmtime-runtime</code> is pretty murky to be honest and probably isn't 100% safe from something like a miri perspective, but if we can I'd prefer to stick to similar idioms used elsewhere, so something that needs table and module information would stick to <code>Instance</code> whereas only-needs-table things would stick to <code>Table</code></p>\n</blockquote>",
        "id": 271029911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644262201
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271061442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644278200
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271061495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644278240
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-875413200\">PR review</a>.</p>",
        "id": 271066927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282075
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r801184222\">PR review comment</a>:</p>\n<blockquote>\n<p>The reason for this is that it's mirroring the logic that occurs in the generated code. <code>TableElement::into_raw()</code> produces the form that is stored in the table, which includes the tag-bits; while the return value from the libcall produces the form that we load out of the table, which is normally masked by a discrete <code>and</code> instruction in the generated code.</p>\n<p>I'll add a comment describing this so it's clear why it's here though!</p>\n</blockquote>",
        "id": 271066928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282075
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271067718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282656
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-875418869\">PR review</a>.</p>",
        "id": 271067757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282713
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r801188601\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271067758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282713
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271067977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282887
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-875420436\">PR review</a>.</p>",
        "id": 271067979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282888
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r801189727\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271067980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282888
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-875420538\">PR review</a>.</p>",
        "id": 271067990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282899
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r801189791\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271067991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644282900
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271091348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644306550
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-875629430\">PR review</a>.</p>",
        "id": 271091692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644306829
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r801347464\">PR review comment</a>:</p>\n<blockquote>\n<p>Done, refactored away from this design.</p>\n</blockquote>",
        "id": 271091694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644306829
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271091935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644307049
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-875633106\">PR review</a>.</p>",
        "id": 271091944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644307062
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r801350272\">PR review comment</a>:</p>\n<blockquote>\n<p>Removed!</p>\n</blockquote>",
        "id": 271091945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644307062
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876223278\">PR review</a>.</p>",
        "id": 271145602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644334604
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r801767518\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW I don't think we should remove this just because we can, I was pointing this out to show that I think it's fine to remove this if it's onerous for us to maintain. I suspect that if the <code>ModuleRuntimeInfo</code> doesn't live as a separate structure then the internal refactoring which led to this being not possible or more complicated is probably no longer there, in which case I don't think there's as much of a reason to remove this and I think we should probably keep it.</p>\n</blockquote>",
        "id": 271145604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644334604
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271162838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644341629
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271163305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644341828
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271206289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362194
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271206410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362276
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876759596\">PR review</a>.</p>",
        "id": 271206554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362329
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802140191\">PR review comment</a>:</p>\n<blockquote>\n<p>Done, this refactor makes things much cleaner -- thanks!</p>\n</blockquote>",
        "id": 271206555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362329
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876759768\">PR review</a>.</p>",
        "id": 271206583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362344
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802140307\">PR review comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 271206584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362344
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876759866\">PR review</a>.</p>",
        "id": 271206602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362354
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802140383\">PR review comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 271206603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362354
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876759929\">PR review</a>.</p>",
        "id": 271206616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362360
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802140443\">PR review comment</a>:</p>\n<blockquote>\n<p>Removed!</p>\n</blockquote>",
        "id": 271206617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362360
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876760406\">PR review</a>.</p>",
        "id": 271206694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362403
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802140905\">PR review comment</a>:</p>\n<blockquote>\n<p>I actually managed to remove <code>SharedSignatures</code> altogether; the runtime-info trait just provides a lookup function and the implementation used by special-purpose modules (default callee, etc) can do its own \"return one signature\" thing.</p>\n</blockquote>",
        "id": 271206703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362403
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876760696\">PR review</a>.</p>",
        "id": 271206743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362426
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802141107\">PR review comment</a>:</p>\n<blockquote>\n<p>Removed this Arc clone altogether!</p>\n</blockquote>",
        "id": 271206744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362426
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271206968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362560
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876762161\">PR review</a>.</p>",
        "id": 271206974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362562
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802142268\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271206975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362562
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876762858\">PR review</a>.</p>",
        "id": 271207067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362630
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802142809\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271207068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362630
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876763597\">PR review</a>.</p>",
        "id": 271207210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362701
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802143396\">PR review comment</a>:</p>\n<blockquote>\n<p>I think I might save this one for later as it involves a bit more cross-crate work (the wasmtime crate needs to see the VMOffsets and own it in the <code>wasmtime::Module</code>); but it's a good idea.</p>\n</blockquote>",
        "id": 271207211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362701
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271217599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644369046
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-876820933\">PR review</a>.</p>",
        "id": 271217609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644369061
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802188978\">PR review comment</a>:</p>\n<blockquote>\n<p>Done! This is also a nice cleanup, thanks.</p>\n</blockquote>",
        "id": 271217610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644369061
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271228988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644380226
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271232266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644384031
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271234248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644386115
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-877688702\">PR review</a>.</p>",
        "id": 271305757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-877688702\">PR review</a>.</p>",
        "id": 271305758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802824507\">PR review comment</a>:</p>\n<blockquote>\n<p>Something I've sort of forgotten until now, it might be good to confirm that this doesn't have too much of a performance hit. My main worry here would be around <code>call_indirect</code>. I suspect that <code>call_indirect</code> itself is indeed getting slower here, but I'm less interested in that than an overall performance profile of a module. Could you run some tests with like a JS markdown renderer to see if there's a meaningful decrease in performance or whether it's in the noise? My hunch is that any slowdown here is in the noise for any module, but it's probably good to confirm that before landing.</p>\n</blockquote>",
        "id": 271305759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802822816\">PR review comment</a>:</p>\n<blockquote>\n<p>Reading this again, could the constants here be extracted to something in the <code>wasmtime_environ</code> crate to be shared between compile-time and runtime?</p>\n</blockquote>",
        "id": 271305761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802828324\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this use a style more similar to <code>MemoryInitialization</code> to make sure that we're consistent between the two? Where one variant of <code>TableInitialization</code> is \"list of initializers\" and the second variant is \"precomputed per-table lists\"</p>\n</blockquote>",
        "id": 271305762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802830336\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I try to avoid methods like this for not-so-commonly-used types since specifically asking for one variant almost defeats the purpose of exhaustive matching in Rust. In other words we'd lose any benefit where if a variant is added to this <code>enum</code> we can't rely on the compiler to tell us to go update all the various places, instead we have to audit all callers of these methods to determine if they need to handle the new case.</p>\n<p>If possible can these helpers get removed in favor of a <code>match</code> on call-sites with comments for why one or the other case is ignored?</p>\n</blockquote>",
        "id": 271305763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802832536\">PR review comment</a>:</p>\n<blockquote>\n<p>It might be worth double-checking but I think that <code>Option&lt;FuncIndex&gt;</code> is actually a 64-bit value whereas <code>FuncIndex</code> is a 32-bit value. To make this more compact I think we could represent <code>None</code> with <code>FuncIndex::reserved_value()</code>.</p>\n<p>Personally I'm not a fan of one value of <code>FuncIndex</code> meaning \"none\" but it's the design we already have and changing that is beyond the scope of this PR. Despite my personal thoughts, though, it does lend itself well to this use case.</p>\n</blockquote>",
        "id": 271305764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802825793\">PR review comment</a>:</p>\n<blockquote>\n<p>I think most other places we check this by using <code>module.defined_table_index(index)</code>, so coul that be used here instead?</p>\n</blockquote>",
        "id": 271305765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802833828\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually now that I think about this in relation to my above comment I don't think that this is quite right in that element segments can have <code>ref.null</code> as a particular element which is represented with <code>FuncIndex::reserved_value()</code> which gets set to <code>Some</code> here as well. That's probably handled gracefully elsewhere but in any case I think it'd be good to avoid the <code>Option&lt;FuncIndex&gt;</code> here</p>\n</blockquote>",
        "id": 271305766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802841337\">PR review comment</a>:</p>\n<blockquote>\n<p>This seems to use a fallible <code>get</code> in combination with <code>take_while</code> which ends up doing two rounds of bounds-checks? Could this instead always do <code>get</code> and <code>break</code> on out-of-bounds?</p>\n</blockquote>",
        "id": 271305767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802849508\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this may be able to drop the <code>pub(crate)</code> now?</p>\n<p>At least for me I find it useful to have as few implementation details as possible as <code>pub</code> or <code>pub(crate)</code> because it means you don't have to worry about anyone outside this module using this and you only have to audit this one module.</p>\n</blockquote>",
        "id": 271305768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802835297\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW here I think instead of inserting something into <code>self.result.module.table_initialization</code> it might be more ergonomic to build a local list of initializers (sort of like how this built it previously into <code>self.result.module</code>) and then after the loop is finished it simply overwrites what was previously located at <code>self.result.module.table_initialization</code>, which because we only deal with valid modules at this point is guaranteed  to be an empty list.</p>\n</blockquote>",
        "id": 271305769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802836743\">PR review comment</a>:</p>\n<blockquote>\n<p>This is probably less cold now to the point that now it's better to remove this.</p>\n</blockquote>",
        "id": 271305770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802857421\">PR review comment</a>:</p>\n<blockquote>\n<p>Idiomatically I think this'd be better named <code>into_traitobj</code></p>\n</blockquote>",
        "id": 271305771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802842908\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW the <code>+ 'static</code> can be removed here (and in other locations probably) since if you don't mention anything that's the default.</p>\n</blockquote>",
        "id": 271305772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802856143\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this comment may be missing leading <code>&amp;</code> on the types because otherwise this is saying that the cast happening here is the one that's not possible.</p>\n</blockquote>",
        "id": 271305773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r802837512\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this use <code>*into = VMCallerCheckedAnyfunc { ... }</code> to statically assert that we initialize all fields?</p>\n</blockquote>",
        "id": 271305774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644424478
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-877958872\">PR review</a>.</p>",
        "id": 271334380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435099
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803018881\">PR review comment</a>:</p>\n<blockquote>\n<p>I tried that at first the but issue is that the mode decision is per-table; so the \"FuncTable\" mode would then need an inner enum for each table to give the list of indices or the original list of initializers, which just reinvents this enum.</p>\n<p>It looks like the <code>MemoryInitialization</code> mechanism gets around this by only converting to paged mode if <em>all</em> memories are compatible? I'm not sure if we want to do that for tables: it would create a perf cliff where adding one initializer for one imported table slows the whole instantiation down. Open to other ideas though -- thoughts?</p>\n</blockquote>",
        "id": 271334386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435099
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-877965936\">PR review</a>.</p>",
        "id": 271335378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435500
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803024046\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the same argument applies to multi-memory where one out-of-bounds-initializer shouldn't necessarily create a cliff for the other memories. In that sense I'd prefer that we're consistent and fix this later if necessary (either by going the route you've done here or something similar). None of this is really that much of an issue today since modules generally have at most only one funcref table.</p>\n</blockquote>",
        "id": 271335379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435500
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271335966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435752
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-877970222\">PR review</a>.</p>",
        "id": 271335974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435753
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803027311\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, it's a borrowing thing (we take a <code>&amp;mut self.module.table_initialization</code> via the iterator); but I've moved this to a <code>.skip</code> on the iter, which is I think a pattern used elsewhere.</p>\n</blockquote>",
        "id": 271335975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435754
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-877970376\">PR review</a>.</p>",
        "id": 271336004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435763
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803027424\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271336005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435763
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-877970535\">PR review</a>.</p>",
        "id": 271336031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435771
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803027567\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271336032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435772
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-877970793\">PR review</a>.</p>",
        "id": 271336073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435786
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803027775\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271336075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644435786
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271344204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439299
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878029486\">PR review</a>.</p>",
        "id": 271344298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439326
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803070874\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually now with refactor this went away and we can use <code>defined_table_index</code> as you suggest.</p>\n</blockquote>",
        "id": 271344299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439327
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878029730\">PR review</a>.</p>",
        "id": 271344333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439343
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803071041\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271344334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439343
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878029766\">PR review</a>.</p>",
        "id": 271344338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439345
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803071065\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271344340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439345
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803071298\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yes, better!</p>\n</blockquote>",
        "id": 271344395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439366
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878030115\">PR review</a>.</p>",
        "id": 271344396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439366
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271345061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439699
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878035367\">PR review</a>.</p>",
        "id": 271345072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439702
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803075167\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271345074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439702
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878035435\">PR review</a>.</p>",
        "id": 271345080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439706
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803075211\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271345081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439706
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878035522\">PR review</a>.</p>",
        "id": 271345091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439711
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803075281\">PR review comment</a>:</p>\n<blockquote>\n<p>Right, good catch, fixed!</p>\n</blockquote>",
        "id": 271345092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439711
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878035597\">PR review</a>.</p>",
        "id": 271345100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439716
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803075330\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271345101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644439716
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271345659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644440003
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878040214\">PR review</a>.</p>",
        "id": 271345660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644440003
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803078574\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271345661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644440003
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878040260\">PR review</a>.</p>",
        "id": 271345664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644440004
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803078607\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 271345665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644440004
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a> from <code>lazy-anyfuncs</code> to <code>main</code>.</p>",
        "id": 271347006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644440613
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#pullrequestreview-878058588\">PR review</a>.</p>",
        "id": 271348110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644441130
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733#discussion_r803091615\">PR review comment</a>:</p>\n<blockquote>\n<p>Just tested with a local Viceroy build running a markdown render service that takes 1.2s to run; delta is in the noise (+/- 1% either way, varies by run).</p>\n</blockquote>",
        "id": 271348111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644441130
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3733\">PR #3733</a>.</p>",
        "id": 271353159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644443814
    }
]