[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-601961330\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-601961330\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>This issue or pull request has been labeled: \"wasi\", \"wasmtime:c-api\"</p>\n<p>&lt;details&gt; &lt;summary&gt;Users Subscribed to \"wasmtime:c-api\"&lt;/summary&gt;</p>\n<ul>\n<li>@peterhuene</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" target=\"_blank\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a></p>\n</blockquote>",
        "id": 191317951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584749416
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-601966130\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-601966130\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>Sigh.  To get the shared (between the multiple WASI context builders) file handles working on Windows, we'd need to open with sharing options specifically on Windows.</p>\n<p>I'm not really a big fan of this impl (i.e. having the multiple WASI instances).  I may take another stab at this to fix #1220.</p>\n</blockquote>",
        "id": 191319374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584750955
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-601966130\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-601966130\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>Sigh.  To get the shared stdio (between the multiple WASI context builders) file handles working on Windows, we'd need to open with sharing options.</p>\n<p>I'm not really a big fan of this impl (i.e. having the multiple WASI instances).  I may take another stab at this to fix #1220.</p>\n</blockquote>",
        "id": 191319425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584750982
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602614054\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602614054\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>I'm actually a little confused myself as to this error, what's the sycall that's failing due to sharing?</p>\n</blockquote>",
        "id": 191477078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584972349
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602683974\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602683974\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>Right now I'm doing a <code>try_clone</code> on the <code>File</code> we open/create for the file path specified in <code>wasi_config_std[in|out|err]_path</code> as well as <code>wasi_config_preopen</code> since it needs to be shared between the two underlying context builders.  By default, it's not being opened with Windows sharing flags, so the try_clone is failing when trying to use those functions.</p>\n</blockquote>",
        "id": 191492417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584978268
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>I have a solution in mind that's going to change the WASI C API functions so that users can request a particular WASI \"module\" and it'll be represented as a <code>wasm_module_t</code> and thus can be instantiated normally, rather than this special instance type.  That should allow people to use the snapshot of WASI they want, provided the engine supports it.</p>\n<p>The C# API would then change so that when you want to instantiate a module with WASI, you get an <code>Instance</code> like any other module and <code>Module.Instantiate</code> will take an enumeration of modules to link against, one of which can be an instantiated WASI module.</p>\n</blockquote>",
        "id": 191493160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584978575
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>I have a solution in mind that's going to change the WASI C API functions so that users can request a particular WASI \"module\" and it'll be represented as a <code>wasm_module_t</code> and thus can be instantiated normally, rather than this special <code>wasi_instance_t</code> type.  That should allow people to use the snapshot of WASI they want, provided the engine supports it.</p>\n<p>The C# API would then change so that when you want to instantiate a module with WASI, you get an <code>Instance</code> like any other module and <code>Module.Instantiate</code> will take an enumeration of modules to link against, one of which can be an instantiated WASI module.</p>\n</blockquote>",
        "id": 191493213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584978601
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>I have a solution in mind that's going to change the WASI C API functions so that users can request a particular WASI \"module\" and it'll be represented as a <code>wasm_module_t</code> and thus can be instantiated normally, rather than this special <code>wasi_instance_t</code> type.  That should allow people to use the snapshot of WASI they want, provided the engine supports it.</p>\n<p>The C# API would then change so that when you want to instantiate a module with WASI, you get an <code>Instance</code> like any other module and <code>Module.Instantiate</code> will take an enumeration of instances to link against, one of which can be an instantiated WASI module.</p>\n</blockquote>",
        "id": 191493335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584978637
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>I have a solution in mind that's going to change the WASI C API functions so that users can request a particular WASI \"module\" and it'll be represented as a <code>wasm_module_t</code> and thus can be instantiated normally, rather than this special <code>wasi_instance_t</code> type.  That should allow people to use the snapshot of WASI they want, provided the engine supports it.</p>\n<p>The C# API would then change so that when you want to instantiate a module with WASI, you get an <code>Instance</code> like any other module and <code>Module.Instantiate</code> will take an enumeration of instances to link against, one of which can be an instantiated WASI module.</p>\n<p>This solution would forego this particular PR.  I'm leaving this one open for now until I get that work finished.</p>\n</blockquote>",
        "id": 191493818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584978828
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602687197\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>I have a solution in mind that's going to change the WASI C API functions so that users can request a particular WASI \"module\" and it'll be represented as a <code>wasm_module_t</code> and thus can be instantiated normally, rather than this special <code>wasi_instance_t</code> type.  That should allow people to use the snapshot of WASI they want, provided the engine supports it.</p>\n<p>The C# API would then change so that when you want to instantiate a module with WASI, you get an <code>Instance</code> like any other module and <code>Module.Instantiate</code> will take an enumeration of instances to link against, one of which can be an instantiated WASI module.</p>\n<p>That solution would forego this particular PR.  I'm leaving this one open for now until I get that work finished.</p>\n</blockquote>",
        "id": 191493835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584978837
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602710788\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602710788\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>Hm ok I think I'm not familiar enough with windows sharing things to know what's going on. I would naively think that we should open files with sharing rights and/or this is a bug in libstd if <code>try_clone</code> never works.</p>\n<p>I'm slightly hesitant to get a <code>wasm_module_t</code> or a <code>wasm_instance_t</code> from wasi items since they're not actually compiled object code but rather more of a \"everyone's gotta have a <code>enum Instance</code> with one variant as jit code and one as wasi modules. I also see though how it'd be quite nice to not have to deal with wasi instances at all and you've only got normal instances/modules. In that sense I think it definitely seems worthwhile to explore! I'll wait until I have some code to peek at :)</p>\n</blockquote>",
        "id": 191499224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584980953
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602743903\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602743903\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>We definitely can use the Windows stdlib extensions for opening with sharing to get this green, which is simple to do.</p>\n<p>I'm just not a fan of this approach after (even) more consideration.  This doesn't scale well as more and more snapshots get released and we have to support them, assuming we don't solve the problem with a single WASI instance that knows how to polyfill previous snapshots itself.</p>\n<p>I'll take a stab at the alternative approach today and put it up for your review.</p>\n</blockquote>",
        "id": 191507816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584984412
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602743903\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-602743903\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>We definitely can use the Windows stdlib extensions for opening with sharing to get this green, which is simple to do.</p>\n<p>I'm just not a fan of this approach after (even) more consideration.  This doesn't scale well as more and more snapshots get released and we have to support them, assuming we don't solve the problem with a single WASI instance that knows how to polyfill previous snapshots itself.</p>\n<p>Regarding the enum problem, it should be at least limited to the C API to answer the \"what kind of module is this?\" question.  At least it wouldn't complicate the Rust API unnecessarily.</p>\n<p>I'll take a stab at the alternative approach today and put it up for your review.</p>\n</blockquote>",
        "id": 191508045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584984501
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-604182458\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376#issuecomment-604182458\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1376\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1376\">Issue #1376</a>:</p>\n<blockquote>\n<p>I'm closing this in favor of the commit that adds support for WASI snapshot0 in #1411.</p>\n</blockquote>",
        "id": 191832592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585187629
    }
]