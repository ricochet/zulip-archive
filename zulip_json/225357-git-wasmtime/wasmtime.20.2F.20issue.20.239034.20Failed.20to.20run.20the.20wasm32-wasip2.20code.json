[
    {
        "content": "<p>hungryzzz opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034\">issue #9034</a>:</p>\n<blockquote>\n<p>Hi, I have a C program which would send a HTTP request to a server, and use <code>wasi-sdk-23</code> to compile it to wasm code, but fail to run it on Wasmtime, the error message is <code>connect: Permission denied</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># wasi-sdk command</span>\n~/wasi-sdk-23.0-x86_64-linux/bin/clang-18<span class=\"w\"> </span>--sysroot<span class=\"o\">=</span>~/wasi-sdk-23.0-x86_64-linux/share/wasi-sysroot<span class=\"w\"> </span>--target<span class=\"o\">=</span>wasm32-wasip2<span class=\"w\"> </span>client.c<span class=\"w\"> </span>-o<span class=\"w\"> </span>client.wasm\n\n<span class=\"c1\"># run on wasmtime-cli</span>\n➜<span class=\"w\"> </span>~<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>client.wasm\nconnect:<span class=\"w\"> </span>Permission<span class=\"w\"> </span>denied\n\n➜<span class=\"w\">  </span>~<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>--version\nwasmtime-cli<span class=\"w\"> </span><span class=\"m\">23</span>.0.0<span class=\"w\"> </span><span class=\"o\">(</span>6b892131d<span class=\"w\"> </span><span class=\"m\">2024</span>-06-20<span class=\"o\">)</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;unistd.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;fcntl.h&gt;</span>\n\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;netinet/tcp.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/socket.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/types.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;netinet/in.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;arpa/inet.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">socket_connect</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">in_port_t</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"p\">){</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">sockaddr_in</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sock</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"inet_pton\"</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">sock</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">PF_INET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IPPROTO_TCP</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IPPROTO_TCP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TCP_NODELAY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">on</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"setsockopt\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">sockaddr</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">sockaddr_in</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"connect\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">sock</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#define BUFFER_SIZE 1024</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"n\">BUFFER_SIZE</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"GET / HTTP/1.1</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">hostname</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"127.0.0.1\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"6000\"</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">socket_connect</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BUFFER_SIZE</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BUFFER_SIZE</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"%s\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BUFFER_SIZE</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">shutdown</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SHUT_RDWR</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 454838014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722260557
    },
    {
        "content": "<p>hungryzzz edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034\">issue #9034</a>:</p>\n<blockquote>\n<p>Hi, I have a C program which would send a HTTP request to a server, and use <code>wasi-sdk-23</code> to compile it to wasm code, but fail to run it on Wasmtime, the error message is <code>connect: Permission denied</code>. Does Wasmtime support <code>wasi-socket</code> now? Or the error is caused by other reasons?</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># wasi-sdk command</span>\n~/wasi-sdk-23.0-x86_64-linux/bin/clang-18<span class=\"w\"> </span>--sysroot<span class=\"o\">=</span>~/wasi-sdk-23.0-x86_64-linux/share/wasi-sysroot<span class=\"w\"> </span>--target<span class=\"o\">=</span>wasm32-wasip2<span class=\"w\"> </span>client.c<span class=\"w\"> </span>-o<span class=\"w\"> </span>client.wasm\n\n<span class=\"c1\"># run on wasmtime-cli</span>\n➜<span class=\"w\"> </span>~<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>client.wasm\nconnect:<span class=\"w\"> </span>Permission<span class=\"w\"> </span>denied\n\n➜<span class=\"w\">  </span>~<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>--version\nwasmtime-cli<span class=\"w\"> </span><span class=\"m\">23</span>.0.0<span class=\"w\"> </span><span class=\"o\">(</span>6b892131d<span class=\"w\"> </span><span class=\"m\">2024</span>-06-20<span class=\"o\">)</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;unistd.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;fcntl.h&gt;</span>\n\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;netinet/tcp.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/socket.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/types.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;netinet/in.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;arpa/inet.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">socket_connect</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">in_port_t</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"p\">){</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">sockaddr_in</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sock</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"inet_pton\"</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">sock</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">PF_INET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IPPROTO_TCP</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IPPROTO_TCP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TCP_NODELAY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">on</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"setsockopt\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">sockaddr</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">sockaddr_in</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"connect\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">sock</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#define BUFFER_SIZE 1024</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"n\">BUFFER_SIZE</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"GET / HTTP/1.1</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">hostname</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"127.0.0.1\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"6000\"</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">socket_connect</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BUFFER_SIZE</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BUFFER_SIZE</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"%s\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BUFFER_SIZE</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">shutdown</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SHUT_RDWR</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 454838596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722260709
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034\">issue #9034</a>:</p>\n<blockquote>\n<p>Hi, I have a C program which would send a HTTP request to a server, and use <code>wasi-sdk-23</code> to compile it to wasm code, but fail to run it on Wasmtime, the error message is <code>connect: Permission denied</code>. Does Wasmtime support <code>wasi-socket</code> now? Or the error is caused by other reasons?</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># wasi-sdk command</span>\n~/wasi-sdk-23.0-x86_64-linux/bin/clang-18<span class=\"w\"> </span>--sysroot<span class=\"o\">=</span>~/wasi-sdk-23.0-x86_64-linux/share/wasi-sysroot<span class=\"w\"> </span>--target<span class=\"o\">=</span>wasm32-wasip2<span class=\"w\"> </span>client.c<span class=\"w\"> </span>-o<span class=\"w\"> </span>client.wasm\n\n<span class=\"c1\"># run on wasmtime-cli</span>\n➜<span class=\"w\"> </span>~<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>client.wasm\nconnect:<span class=\"w\"> </span>Permission<span class=\"w\"> </span>denied\n\n➜<span class=\"w\">  </span>~<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>--version\nwasmtime-cli<span class=\"w\"> </span><span class=\"m\">23</span>.0.0<span class=\"w\"> </span><span class=\"o\">(</span>6b892131d<span class=\"w\"> </span><span class=\"m\">2024</span>-06-20<span class=\"o\">)</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;unistd.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;fcntl.h&gt;</span>\n\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;netinet/tcp.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/socket.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/types.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;netinet/in.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;arpa/inet.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">socket_connect</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">in_port_t</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"p\">){</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">sockaddr_in</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sock</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">sin_port</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">sin_family</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inet_pton</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">sin_addr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"inet_pton\"</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">sock</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">PF_INET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IPPROTO_TCP</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IPPROTO_TCP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TCP_NODELAY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">on</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"setsockopt\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">sockaddr</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">sockaddr_in</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"s\">\"connect\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">sock</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#define BUFFER_SIZE 1024</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"n\">BUFFER_SIZE</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"GET / HTTP/1.1</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">hostname</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"127.0.0.1\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"6000\"</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">socket_connect</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BUFFER_SIZE</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BUFFER_SIZE</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"%s\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bzero</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BUFFER_SIZE</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">shutdown</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SHUT_RDWR</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 454847609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722262372
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034#issuecomment-2256059312\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034\">issue #9034</a>:</p>\n<blockquote>\n<p>Wasmtime by default doesn't allow access to the network, but on the CLI you can pass <code>-S inherit-network</code> to give the program access to the network. When doing that though the <code>write</code> call is returning -1 which I think is also a bug, but I believe that's perhaps a bug for wasi-libc rather than Wasmtime.</p>\n</blockquote>",
        "id": 454847621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722262373
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034#issuecomment-2256104862\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034\">issue #9034</a>:</p>\n<blockquote>\n<p>Hi, I run Wasmtime with <code>-S inherit-network</code> option, but it hangs and I got no response in several minutes.</p>\n</blockquote>",
        "id": 454852928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722263456
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034#issuecomment-2256183446\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034\">issue #9034</a>:</p>\n<blockquote>\n<p>Yes, as I mentioned above as well, I saw that the <code>write</code> function call was returning -1. I think that's probably a bug in wasi-libc, not for here.</p>\n</blockquote>",
        "id": 454860674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722265304
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034#issuecomment-2256226624\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034\">issue #9034</a>:</p>\n<blockquote>\n<p>Yeah, looks like I forgot to update <a href=\"https://github.com/WebAssembly/wasi-libc/blob/b9ef79d7dbd47c6c5bafdae760823467c2f60b70/libc-bottom-half/cloudlibc/src/libc/unistd/write.c\">write.c</a> to check if the file descriptor is a socket and use <code>wasi-sockets</code> in that case, analogous to what I did <a href=\"https://github.com/WebAssembly/wasi-libc/blob/b9ef79d7dbd47c6c5bafdae760823467c2f60b70/libc-bottom-half/sources/__wasilibc_fd_renumber.c#L78-L95\">here</a> for <code>close</code>.  <code>send</code> should work, though.</p>\n<p>Looks like <a href=\"https://github.com/WebAssembly/wasi-libc/blob/b9ef79d7dbd47c6c5bafdae760823467c2f60b70/libc-bottom-half/cloudlibc/src/libc/unistd/read.c\">read.c</a> needs an update, also.</p>\n</blockquote>",
        "id": 454865855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722266463
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034#issuecomment-2256480196\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9034\">issue #9034</a>:</p>\n<blockquote>\n<p>I've opened an issue on the <code>wasi-libc</code> repo: <a href=\"https://github.com/WebAssembly/wasi-libc/issues/521\">https://github.com/WebAssembly/wasi-libc/issues/521</a></p>\n</blockquote>",
        "id": 454893727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722273393
    }
]