[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873#issuecomment-844185206\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873\">issue #2873</a>:</p>\n<blockquote>\n<p>Sorry for the delay in responding here, but thanks for the report!</p>\n<p>While <code>wasmtime</code> doesn't currently yet expose an API for this, you can pretty easily build one with the <code>wasmparser</code> crate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmparser</span>::<span class=\"p\">{</span><span class=\"n\">Parser</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Payload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">custom_sections</span><span class=\"p\">(</span><span class=\"n\">bytes</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Parser</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">parse_all</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">).</span><span class=\"n\">filter_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">payload</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">CustomSection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">))),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Would that work for your purposes? Or is there a reason you need an API added to <code>wasmtime</code> itself?</p>\n</blockquote>",
        "id": 239438673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621436132
    },
    {
        "content": "<p>FGasper <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873#issuecomment-845325438\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873\">issue #2873</a>:</p>\n<blockquote>\n<p>Is <code>wasmparser</code> available from C? I’m using this from Perl so would need something I can call from C.</p>\n<p>Thank you!</p>\n<p>FYI, there’s also discussion of adding such an interface to the standard C API:<br>\n<a href=\"https://github.com/WebAssembly/wasm-c-api/issues/168#issuecomment-833713577\">https://github.com/WebAssembly/wasm-c-api/issues/168#issuecomment-833713577</a></p>\n</blockquote>",
        "id": 239631324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621532429
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873#issuecomment-845466660\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873\">issue #2873</a>:</p>\n<blockquote>\n<p>There is not currently a C API for <code>wasmparser</code>, so if you don't want to write Rust code then this will need to wait until there's a C API binding for this in Wasmtime's C API.</p>\n</blockquote>",
        "id": 239657066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621543726
    },
    {
        "content": "<p>ajihyf <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873#issuecomment-1311184640\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873\">issue #2873</a>:</p>\n<blockquote>\n<blockquote>\n<p>Sorry for the delay in responding here, but thanks for the report!</p>\n<p>While <code>wasmtime</code> doesn't currently yet expose an API for this, you can pretty easily build one with the <code>wasmparser</code> crate:</p>\n<p>```rust<br>\nuse wasmparser::{Parser, Payload, Result};</p>\n<p>fn custom_sections(bytes: &amp;[u8]) -&gt; impl Iterator&lt;Item = Result&lt;(&amp;str, &amp;[u8])&gt;&gt; {<br>\n    Parser::new(0).parse_all(bytes).filter_map(|payload| {<br>\n        let payload = match payload {<br>\n            Ok(s) =&gt; s,<br>\n            Err(e) =&gt; return Some(Err(e)),<br>\n        };<br>\n        match payload {<br>\n            Payload::CustomSection { name, data, .. } =&gt; Some(Ok((name, data))),<br>\n            _ =&gt; None,<br>\n        }<br>\n    })<br>\n}<br>\n```</p>\n<p>Would that work for your purposes? Or is there a reason you need an API added to <code>wasmtime</code> itself?</p>\n</blockquote>\n<p>Hi, this approach only accepts raw wasm input. Is it possible to get custom sections from a module which may be deserialized from compiled artifact?</p>\n</blockquote>",
        "id": 309123232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668137162
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873#issuecomment-1311462370\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873\">issue #2873</a>:</p>\n<blockquote>\n<p>I don't think we preserve custom sections in precompiled modules.</p>\n</blockquote>",
        "id": 309157654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668159675
    },
    {
        "content": "<p>ajihyf <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873#issuecomment-1313184693\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873\">issue #2873</a>:</p>\n<blockquote>\n<p>I'm using <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md#the-dylink0-section\">dynamic linking</a> to run multiple module instances with the same linear memory. The custom section naming \"dylink.0\" is required to provide proper imports to instantiate the modules. It seems that wasmer supports custom section query API like JavaScript, which works both in <a href=\"https://github.com/WebAssembly/wasm-c-api/issues/168#issuecomment-833713577\">raw and compiled modules</a>. Maybe wasmtime should preserve the custom sections, too?</p>\n</blockquote>",
        "id": 309541130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668409407
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873#issuecomment-1313930640\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873\">issue #2873</a>:</p>\n<blockquote>\n<p>To confirm, precompiled artifacts don't store custom sections so this API would not be possible. I'd recommend extracting the custom section and saving it adjacent or next to wasmtime's compiled artifact.</p>\n</blockquote>",
        "id": 309627850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668439574
    },
    {
        "content": "<p>stevefan1999-personal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873#issuecomment-1723781994\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2873\">issue #2873</a>:</p>\n<blockquote>\n<p>This is needed for <a href=\"https://github.com/stevefan1999-personal/den\">Den</a> now. For now I have to mask it with not implemented...pity</p>\n</blockquote>",
        "id": 391729365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695052181
    }
]