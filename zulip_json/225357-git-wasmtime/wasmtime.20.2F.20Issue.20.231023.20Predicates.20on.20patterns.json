[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1023#issuecomment-772780450\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1023\">Issue #1023</a>:</p>\n<blockquote>\n<p>The new backend framework doesn't use legalizations as much as the old backend.</p>\n</blockquote>",
        "id": 225072104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612382137
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1023\">Issue #1023</a>:</p>\n<blockquote>\n<p>Suppose we want to compare 8-bit ints on a 32-bit RISC:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">widen32</span><span class=\"o\">.</span><span class=\"n\">legalize</span><span class=\"p\">(</span>\n    <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">icmp</span><span class=\"p\">(</span><span class=\"s1\">'ult'</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span>\n    <span class=\"n\">Rtl</span><span class=\"p\">(</span>\n        <span class=\"n\">wx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">uextend</span><span class=\"o\">.</span><span class=\"n\">i32</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n        <span class=\"n\">wy</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">uextend</span><span class=\"o\">.</span><span class=\"n\">i32</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span>\n        <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">icmp</span><span class=\"p\">(</span><span class=\"s1\">'ult'</span><span class=\"p\">,</span> <span class=\"n\">wx</span><span class=\"p\">,</span> <span class=\"n\">wy</span><span class=\"p\">),</span>\n    <span class=\"p\">))</span>\n</code></pre></div>\n<p>We want to generalize this pattern, but this transformation is only valid for the unsigned or sign-neutral condition codes, so this is wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">widen32</span><span class=\"o\">.</span><span class=\"n\">legalize</span><span class=\"p\">(</span>\n    <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">icmp</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span>\n    <span class=\"n\">Rtl</span><span class=\"p\">(</span>\n        <span class=\"n\">wx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">uextend</span><span class=\"o\">.</span><span class=\"n\">i32</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n        <span class=\"n\">wy</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">uextend</span><span class=\"o\">.</span><span class=\"n\">i32</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span>\n        <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">icmp</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">wx</span><span class=\"p\">,</span> <span class=\"n\">wy</span><span class=\"p\">),</span>\n    <span class=\"p\">))</span>\n</code></pre></div>\n<p>We need a way of specifying a predicate on the immediate <code>cc</code>. Ideally, this mechanism should share representation with the instruction predicates already supported by instruction encodings.</p>\n<p>(Also note that the first example doesn't work eitherâ€”we can't even require a fixed immediate value in the input pattern.)</p>\n</blockquote>",
        "id": 225073503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612382712
    }
]