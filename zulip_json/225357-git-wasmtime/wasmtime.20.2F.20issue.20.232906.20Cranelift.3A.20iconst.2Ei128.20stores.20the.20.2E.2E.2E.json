[
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>When implmenting i128 support for aarch64 I found that <code>iconst</code> is not correctly storing i128 values on x86_64.</p>\n<p>It looks like the issue is that we store constants as u64's in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/machinst/lower.rs#L1192\"><code>machineinst/lower.rs</code></a>, which then get wrongly lowered to i128's.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isplit</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>clif-util test ./the_above.clif</code></p>\n<h3>Expected Results</h3>\n<p>Returns <code>[-1, -1]</code></p>\n<h3>Actual Results</h3>\n<p>Returns <code>[-1, 0]</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: e676589b0c6e8228c421e18249d4635eb6c4bbe4 (main as of writing this)</p>\n<p>Operating system: Windows 10 19042.928</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 238763187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620997580
    },
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>When implmenting i128 support for aarch64 I found that <code>iconst</code> is not correctly storing i128 values on x86_64.</p>\n<p>It looks like the issue is that we store constants as u64's in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/machinst/lower.rs#L1192\"><code>machineinst/lower.rs</code></a>, which then get wrongly lowered to i128's.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isplit</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>clif-util test ./the_above.clif</code></p>\n<h3>Expected Results</h3>\n<p>Returns <code>[-1, -1]</code></p>\n<h3>Actual Results</h3>\n<p>Returns <code>[-1, 0]</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: e676589b0c6e8228c421e18249d4635eb6c4bbe4 (main as of writing this)</p>\n<p>Operating system: Windows 10 19042.928</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 238763188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620997580
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>When implmenting i128 support for aarch64 I found that <code>iconst</code> is not correctly storing i128 values on x86_64.</p>\n<p>It looks like the issue is that we store constants as u64's in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/machinst/lower.rs#L1192\"><code>machineinst/lower.rs</code></a>, which then get wrongly lowered to i128's.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isplit</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>clif-util test ./the_above.clif</code></p>\n<h3>Expected Results</h3>\n<p>Returns <code>[-1, -1]</code></p>\n<h3>Actual Results</h3>\n<p>Returns <code>[-1, 0]</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: e676589b0c6e8228c421e18249d4635eb6c4bbe4 (main as of writing this)</p>\n<p>Operating system: Windows 10 19042.928</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 238763189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620997580
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>When implmenting i128 support for aarch64 I found that <code>iconst</code> is not correctly storing i128 values on x86_64.</p>\n<p>It looks like the issue is that we store constants as u64's in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/machinst/lower.rs#L1192\"><code>machineinst/lower.rs</code></a>, which then get wrongly <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/isa/x64/lower.rs#L1500\">lowered</a> to i128's.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isplit</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>clif-util test ./the_above.clif</code></p>\n<h3>Expected Results</h3>\n<p>Returns <code>[-1, -1]</code></p>\n<h3>Actual Results</h3>\n<p>Returns <code>[-1, 0]</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: e676589b0c6e8228c421e18249d4635eb6c4bbe4 (main as of writing this)</p>\n<p>Operating system: Windows 10 19042.928</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 238764671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620998246
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>When implmenting i128 support for aarch64 I found that <code>iconst</code> is not correctly storing i128 values on x86_64.</p>\n<p>It looks like the issue is that we store constants as u64's in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/machinst/lower.rs#L1192\"><code>machineinst/lower.rs</code></a>, which then gets wrongly <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/isa/x64/lower.rs#L1500\">lowered</a> to i128's.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isplit</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>clif-util test ./the_above.clif</code></p>\n<h3>Expected Results</h3>\n<p>Returns <code>[-1, -1]</code></p>\n<h3>Actual Results</h3>\n<p>Returns <code>[-1, 0]</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: e676589b0c6e8228c421e18249d4635eb6c4bbe4 (main as of writing this)</p>\n<p>Operating system: Windows 10 19042.928</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 238764685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620998257
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906#issuecomment-841248566\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>I am suprised that the new backend supports <code>iconst.i128</code> at all. I use <code>iconst.i64</code>+<code>iconcat</code> for constructing i128 values in cg_clif.</p>\n</blockquote>",
        "id": 238767285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620999322
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906#issuecomment-841331207\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>I was trying to refactor the handling of immediates over in #2468, mainly from the vector perspective, but I think this could be fixed there as well. Unfortunately, I let that PR languish for a few months so I will have to revive it to fix this, unless someone here wants to pick it up. </p>\n</blockquote>",
        "id": 238787770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621007558
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906#issuecomment-841388447\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>Let me try to pick that up. Lets see how it goes</p>\n</blockquote>",
        "id": 238799926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621012730
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906#issuecomment-1290744580\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>Fixed in #5075</p>\n</blockquote>",
        "id": 306052889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666711500
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2906\">issue #2906</a>:</p>\n<blockquote>\n<p>When implmenting i128 support for aarch64 I found that <code>iconst</code> is not correctly storing i128 values on x86_64.</p>\n<p>It looks like the issue is that we store constants as u64's in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/machinst/lower.rs#L1192\"><code>machineinst/lower.rs</code></a>, which then gets wrongly <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e676589b0c6e8228c421e18249d4635eb6c4bbe4/cranelift/codegen/src/isa/x64/lower.rs#L1500\">lowered</a> to i128's.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isplit</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">i128_const_neg_1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffffffff_ffffffff</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>clif-util test ./the_above.clif</code></p>\n<h3>Expected Results</h3>\n<p>Returns <code>[-1, -1]</code></p>\n<h3>Actual Results</h3>\n<p>Returns <code>[-1, 0]</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: e676589b0c6e8228c421e18249d4635eb6c4bbe4 (main as of writing this)</p>\n<p>Operating system: Windows 10 19042.928</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 306052891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666711500
    }
]