[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2223#issuecomment-698029547\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2223\">Issue #2223</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:meta\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 211075503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600904950
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2223#issuecomment-698496338\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2223\">Issue #2223</a>:</p>\n<blockquote>\n<p>Updated for x64, thanks! I see a few failures on SpiderMonkey-x64 with e.g. <code>jit-test/tests/wasm/bigint/bigint.js</code> (and I have to test with <code>--no-wasm-simd</code> to get Cranelift now on x64); I'm not sure if this is pre-existing, since we don't run the new x64 backend on CI there; but all of the basic functionality seems to work, so the basic stack-slot setup in this PR should be correct, I think.</p>\n</blockquote>",
        "id": 211167469,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600970174
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2223#issuecomment-700985368\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2223\">Issue #2223</a>:</p>\n<blockquote>\n<p>Updated -- that was a fun one to track down! (Ten points to <del>Gryffindor</del> <code>rr</code>...).</p>\n<p>The problem is that we weren't restoring the TLS register in the epilogue -- unlike IonMonkey, we do not treat the TLS register as an unallocatable fixed register, but rather we just copy its value to an ordinary SSA value on function entry. Apparently we were free to clobber it previously, but now we are not. Easy enough to handle in the clobber-restore sequences.</p>\n<p>When vendored in, this passes SpiderMonkey's jit-tests on both x64 (<code>--wasm-compiler=cranelift --no-wasm-simd</code>) and aarch64 (<code>--wasm-compiler=cranelift</code>).</p>\n</blockquote>",
        "id": 211683835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601413407
    }
]