[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2068#issuecomment-663057414\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2068\">Issue #2068</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"cranelift:meta\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 204808866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595516443
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2068#issuecomment-663520906\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2068\">Issue #2068</a>:</p>\n<blockquote>\n<p>One more general comment, in response to Chris' general comment:</p>\n<blockquote>\n<p>It also strikes me (as a driveby thought) that we really should try to unify the sequence-of-instruction-lowerings between lowering time and emission time; the way in which we do a late expansion at emission time when there is local control flow involved is kind of bothersome. </p>\n</blockquote>\n<p>I actually like the ability to hide a bunch of real insns inside a single <code>X64::Inst</code>.  I think it gives us a lot of flexibility without adding global complexity.  I've use this facility quite extensively in the aarch64 atomics work, too.  My only concern (and it is a big one) is that of correctness with respect to register allocation, when there are tmp regs used inside the sequence, or earlyclobber inputs.  As I commented several times above, I think we should step back, get our story about them straightened out, and audit.</p>\n<p>I suspect that at least some part of the reason that Ion compiles so much faster than us is that it processes fewer, larger \"units\", and I wonder if that's a trick we can adopt, without sacrificing generated code quality.  For example, a single <code>Insn</code> that does an compare and (one-way? two-way?) conditional branch; similar for conditional moves; trap if reg nonzero, or trap if (reg &amp; imm) nonzero.</p>\n</blockquote>",
        "id": 204910484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595594783
    }
]