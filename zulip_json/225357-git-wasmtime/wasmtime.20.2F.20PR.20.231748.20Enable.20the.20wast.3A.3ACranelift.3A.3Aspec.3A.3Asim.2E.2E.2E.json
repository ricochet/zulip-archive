[
    {
        "content": "<p>akirilov-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748\">PR #1748</a> from <code>simd_store</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR is the first step in implementing SIMD support for AArch64. Since it is also my first Cranelift patch, there are a couple of things that are not clear to me, and I think that it is best to discuss them here:</p>\n<ul>\n<li>I noticed that the AArch64 backend used to support constant pools, but that functionality was removed. It was used only for integer constants, which can be materialized efficiently with arithmetic instructions. However, that's not really the case with vector constants; furthermore, if the same vector values are used frequently, the code size penalty with my current implementation is much worse than the one for smaller data types. Does it make sense to restore the constant pool functionality for vectors?</li>\n<li>I couldn't figure out another way to get the ir::Function that was being compiled from the lowering context, so I added a method, but I am definitely open to better suggestions.</li>\n<li>The intent behind the <code>InstSize</code> enum is not clear to me (and the name should probably be changed as well) - it looks like it is meant for integer operands, but is already used by floating-point operations. Does it make sense to refactor that code? For now I made the minimal changes to pass the test, but I added a <code>TODO</code> to highlight the issue.</li>\n<li>All SIMD tests are ignored for AArch64, which means that actual testing of this patch requires manual changes to <code>build.rs</code>. I could add the necessary one line change, but since we (Arm) plan on enabling more SIMD tests, that would become a bit awkward. Any opinions?</li>\n</ul>\n</blockquote>",
        "id": 198483107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590174973
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748\">PR #1748</a> from <code>simd_store</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR is the first step in implementing SIMD support for AArch64. Since it is also my first Cranelift patch, there are a couple of things that are not clear to me, and I think that it is best to discuss them here:</p>\n<ul>\n<li>I noticed that the AArch64 backend used to support constant pools, but that functionality was removed. It was used only for integer constants, which can be materialized efficiently with arithmetic instructions. However, that's not really the case with vector constants; furthermore, if the same vector values are used frequently, the code size penalty with my current implementation is much worse than the one for smaller data types. Does it make sense to restore the constant pool functionality for vectors?</li>\n<li>I couldn't figure out another way to get the <code>ir::Function</code> that was being compiled from the lowering context, so I added a method, but I am definitely open to better suggestions.</li>\n<li>The intent behind the <code>InstSize</code> enum is not clear to me (and the name should probably be changed as well) - it looks like it is meant for integer operands, but is already used by floating-point operations. Does it make sense to refactor that code? For now I made the minimal changes to pass the test, but I added a <code>TODO</code> to highlight the issue.</li>\n<li>All SIMD tests are ignored for AArch64, which means that actual testing of this patch requires manual changes to <code>build.rs</code>. I could add the necessary one line change, but since we (Arm) plan on enabling more SIMD tests, that would become a bit awkward. Any opinions?</li>\n</ul>\n</blockquote>",
        "id": 198483191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590175028
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748\">PR #1748</a> from <code>simd_store</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR is the first step in implementing SIMD support for AArch64. Since it is also my first Cranelift patch, there are a couple of things that are not clear to me, and I think that it is best to discuss them here:</p>\n<ul>\n<li>I noticed that the AArch64 backend used to support constant pools, but that functionality was removed. It was used only for integer constants, which can be materialized efficiently with arithmetic instructions. However, that's not really the case with vector constants; furthermore, if the same vector values are used frequently, the code size penalty with my current implementation is much worse than the one for smaller data types. Does it make sense to restore the constant pool functionality for vectors?</li>\n<li>I couldn't figure out another way to get the <code>ir::Function</code> that was being compiled from the lowering context, so I added a method, but I am definitely open to better suggestions.</li>\n<li>The intent behind the <code>InstSize</code> enum is not clear to me (and the name should probably be changed as well) - it looks like it is meant for integer operands, but is already used by floating-point operations. Does it make sense to refactor that code? For now I made the minimal changes to pass the test, but I added a <code>TODO</code> to highlight the issue.</li>\n<li>All SIMD tests are ignored for AArch64, which means that actual testing of this patch requires manual changes to <code>build.rs</code>. I could add the necessary one line change, but since we (Arm) plan on enabling more SIMD tests, that would become a bit awkward. Any opinions?</li>\n</ul>\n</blockquote>",
        "id": 198483649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590175239
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#pullrequestreview-417150177\">PR Review</a>.</p>",
        "id": 198486254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590176586
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#discussion_r429425929\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe only expose <code>func.dfg.constants</code> from <code>ctx</code>?</p>\n</blockquote>",
        "id": 198486255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590176586
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#pullrequestreview-417215168\">PR Review</a>.</p>",
        "id": 198503693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590187837
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#discussion_r429481106\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Sure, that would make sense. The type is currently used in places where 32-bit and 64-bit variants of an instruction exist; so a separate 64/128-bit (or 32/64/128-bit?) version for FP/SIMD instructions that take on those sizes would make sense. (In other words, avoid allowing options that don't make sense for the particular instruction.)</p>\n</blockquote>",
        "id": 198503694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590187837
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#pullrequestreview-417215168\">PR Review</a>.</p>",
        "id": 198503695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590187837
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#discussion_r429481453\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, agreed; there's a (possibly not adequately documented) goal of insulating the lowering code from the raw CLIF input as much as possible, to give us flexibility in the future. (E.g., we might someday use a VCode container of <code>InstructionData</code>s to carry non-SSA code directly from the wasm lowering; we'd need a little plumbing, but the trait abstraction gets us most of the way there.) Something like <code>ctx.get_constant_data(constant_handle)</code> would make sense, IMHO.</p>\n</blockquote>",
        "id": 198503696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590187837
    },
    {
        "content": "<p>cfallin assigned <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748\">PR #1748</a> to cfallin.</p>",
        "id": 198503736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590187895
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#pullrequestreview-417395454\">PR Review</a>.</p>",
        "id": 198602321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590357707
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#discussion_r429679325\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Do you mind if that happens in a separate patch as well?</p>\n</blockquote>",
        "id": 198602322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590357707
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748\">PR #1748</a> (assigned to cfallin) from <code>simd_store</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR is the first step in implementing SIMD support for AArch64. Since it is also my first Cranelift patch, there are a couple of things that are not clear to me, and I think that it is best to discuss them here:</p>\n<ul>\n<li>I noticed that the AArch64 backend used to support constant pools, but that functionality was removed. It was used only for integer constants, which can be materialized efficiently with arithmetic instructions. However, that's not really the case with vector constants; furthermore, if the same vector values are used frequently, the code size penalty with my current implementation is much worse than the one for smaller data types. Does it make sense to restore the constant pool functionality for vectors?</li>\n<li>I couldn't figure out another way to get the <code>ir::Function</code> that was being compiled from the lowering context, so I added a method, but I am definitely open to better suggestions.</li>\n<li>The intent behind the <code>InstSize</code> enum is not clear to me (and the name should probably be changed as well) - it looks like it is meant for integer operands, but is already used by floating-point operations. Does it make sense to refactor that code? For now I made the minimal changes to pass the test, but I added a <code>TODO</code> to highlight the issue.</li>\n<li>All SIMD tests are ignored for AArch64, which means that actual testing of this patch requires manual changes to <code>build.rs</code>. I could add the necessary one line change, but since we (Arm) plan on enabling more SIMD tests, that would become a bit awkward. Any opinions?</li>\n</ul>\n</blockquote>",
        "id": 198755355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590496844
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#pullrequestreview-418464740\">PR Review</a>.</p>",
        "id": 198786634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590509999
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748#discussion_r430540525\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yep, that's fine!</p>\n</blockquote>",
        "id": 198786636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590509999
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1748\">PR #1748</a>.</p>",
        "id": 198786829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590510097
    }
]