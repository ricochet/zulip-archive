[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a>.</p>",
        "id": 282864958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652918291
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a> from <code>alias-analysis</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a basic <em>alias analysis</em>, and optimizations that use it.<br>\nThis is a \"mid-end optimization\": it operates on CLIF, the<br>\nmachine-independent IR, before lowering occurs.</p>\n<p>The alias analysis (or maybe more properly, a sort of memory-value<br>\nanalysis) determines when it can prove a particular memory<br>\nlocation is equal to a given SSA value, and when it can, it replaces any<br>\nloads of that location.</p>\n<p>This subsumes two common optimizations:</p>\n<ul>\n<li>\n<p>Redundant load elimination: when the same memory address is loaded two<br>\n  times, and it can be proven that no intervening operations will write<br>\n  to that memory, then the second load is <em>redundant</em> and its result<br>\n  must be the same as the first. We can use the first load's result and<br>\n  remove the second load.</p>\n</li>\n<li>\n<p>Store-to-load forwarding: when a load can be proven to access exactly<br>\n  the memory written by a preceding store, we can replace the load's<br>\n  result with the store's data operand, and remove the load.</p>\n</li>\n</ul>\n<p>Both of these optimizations rely on a \"last store\" analysis that is a<br>\nsort of coloring mechanism, split across disjoint categories of abstract<br>\nstate. The basic idea is that every memory-accessing operation is put<br>\ninto one of N disjoint categories; it is disallowed for memory to ever<br>\nbe accessed by an op in one category and later accessed by an op in<br>\nanother category. (The frontend must ensure this.)</p>\n<p>Then, given this, we scan the code and determine, for each<br>\nmemory-accessing op, when a single prior instruction is a store to the<br>\nsame category. This \"colors\" the instruction: it is, in a sense, a<br>\nstatic name for that version of memory.</p>\n<p>This analysis provides an important invariant: if two operations access<br>\nmemory with the same last-store, then <em>no other store can alias</em> in the<br>\ntime between that last store and these operations. This must-not-alias<br>\nproperty, together with a check that the accessed address is *exactly<br>\nthe same* (same SSA value and offset), and other attributes of the<br>\naccess (type, extension mode) are the same, let us prove that the<br>\nresults are the same.</p>\n<p>Given last-store info, we scan the instructions and build a table from<br>\n\"memory location\" key (last store, address, offset, type, extension) to<br>\nknown SSA value stored in that location. A store inserts a new mapping.<br>\nA load may also insert a new mapping, if we didn't already have one.<br>\nThen when a load occurs and an entry already exists for its \"location\",<br>\nwe can reuse the value. This will be either RLE or St-to-Ld depending on<br>\nwhere the value came from.</p>\n<p>Note that this <em>does</em> work across basic blocks: the last-store analysis<br>\nis a full iterative dataflow pass, and we are careful to check dominance<br>\nof a previously-defined value before aliasing to it at a potentially<br>\nredundant load. So we will do the right thing if we only have a<br>\n\"partially redundant\" load (loaded already but only in one predecessor<br>\nblock), but we will also correctly reuse a value if there is a store or<br>\nload above a loop and a redundant load of that value within the loop, as<br>\nlong as no potentially-aliasing stores happen within the loop.</p>\n<p>Fixes #4131.</p>\n<p>Passes tests and runs SpiderMonkey correctly locally; benchmarks TBD.</p>\n<p>Creating this as a draft for early feedback; will likely refine the comments<br>\nand explanations a bit more, and benchmark this.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 282864959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652918291
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a> from <code>alias-analysis</code> to <code>main</code>.</p>",
        "id": 282865013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652918335
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-977980978\">PR review</a>.</p>",
        "id": 282884575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652939785
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r876629579\">PR review comment</a>:</p>\n<blockquote>\n<p>It would be nice if all stack slots would be their own category until their address is leaked using stack_addr.</p>\n</blockquote>",
        "id": 282884576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652939785
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-978003232\">PR review</a>.</p>",
        "id": 282885860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652940997
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r876644508\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, that would be nice, but entails an escape analysis, which is outside the scope of this PR. Happy to discuss further (and review PRs!) once this is in, of course.</p>\n</blockquote>",
        "id": 282885861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652940997
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-978222588\">PR review</a>.</p>",
        "id": 282900599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652950963
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r876805710\">PR review comment</a>:</p>\n<blockquote>\n<p>Even stopping optimization entirely if stack_addr is used on a stack slot would likely help cg_clif a lot. Having each stack slot whose address is never leaked be optimized independently is the most important for cg_clif. I'm fine with leaving that for a later PR.</p>\n</blockquote>",
        "id": 282900601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652950963
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a> from <code>alias-analysis</code> to <code>main</code>.</p>",
        "id": 282957815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652978761
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a> from <code>alias-analysis</code> to <code>main</code>.</p>",
        "id": 282974327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652985880
    },
    {
        "content": "<p><strong>cfallin</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a> as ready for review.</p>",
        "id": 282974336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652985884
    },
    {
        "content": "<p>lqd submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979136536\">PR review</a>.</p>",
        "id": 282978483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652987724
    },
    {
        "content": "<p>lqd created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877450883\">PR review comment</a>:</p>\n<blockquote>\n<p>Tiny typo</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>//! to the abstract state category occurred, *and* no other trapping\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 282978484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652987725
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979089671\">PR review</a>.</p>",
        "id": 282979870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988447
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979089671\">PR review</a>.</p>",
        "id": 282979871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988447
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877424864\">PR review comment</a>:</p>\n<blockquote>\n<p>For clarity:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Accesses only the \"heap\" part of abstract state. Used for alias\n</code></pre></div>\n<p>Same for the other abstract state parts.</p>\n</blockquote>",
        "id": 282979872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988447
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877428093\">PR review comment</a>:</p>\n<blockquote>\n<p>Slightly unfortunate that we can't easily differentiate between two different memories or two different tables. I don't think it will matter too much in practice, but unfortunate none the less.</p>\n<p>File a follow up issue for having an alias analysis bit for each memory/table instead of lumping all memories and all tables together?</p>\n</blockquote>",
        "id": 282979873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988447
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877420973\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this already exists as <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/instructions/enum.InstructionData.html#method.memflags\">https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/instructions/enum.InstructionData.html#method.memflags</a> no?</p>\n</blockquote>",
        "id": 282979874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988447
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877431046\">PR review comment</a>:</p>\n<blockquote>\n<p>Could you add some comments about what cases this is testing and what is expected? That will be really helpful for folks updating tests for unrelated reasons and trying to determine whether the new precise output is valid or not. Also useful for reviewers trying to figure out which cases do or don't have tests ;)</p>\n</blockquote>",
        "id": 282979875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988447
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877443585\">PR review comment</a>:</p>\n<blockquote>\n<p>These are becoming very verbose. Can we make <code>set_table</code> et al take and return <code>Self</code> so that we can chain the methods like</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ir</span>::<span class=\"n\">MemFlags</span>::<span class=\"n\">trusted</span><span class=\"p\">().</span><span class=\"n\">set_table</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 282979876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988447
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877434952\">PR review comment</a>:</p>\n<blockquote>\n<p>I think these tests would be a lot easier to read as CLIF to CLIF tests. That way we don't have to figure out what changes are from unrelated passes or just related to aarch64-specific lowering, or even have to know aarch64 to understand these tests that are logically portable and architecture-independent.</p>\n<p>Adding <code>test alias_analysis</code> that just does alias analysis followed by GVN by calling <code>Context::remove_redundant_loads</code> should be really straightforward. Should be able to pretty much copy+paste the <code>test simple_gvn</code> implementation:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0a0c232a14e651f1457ced0ad0c950771de2f3c3/cranelift/filetests/src/test_simple_gvn.rs\">https://github.com/bytecodealliance/wasmtime/blob/0a0c232a14e651f1457ced0ad0c950771de2f3c3/cranelift/filetests/src/test_simple_gvn.rs</a></p>\n</blockquote>",
        "id": 282979877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988447
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877455350\">PR review comment</a>:</p>\n<blockquote>\n<p>File a follow up issue to track/discuss dead-store elimination?</p>\n</blockquote>",
        "id": 282979878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988447
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a> from <code>alias-analysis</code> to <code>main</code>.</p>",
        "id": 282979916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988469
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979149292\">PR review</a>.</p>",
        "id": 282979935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988475
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877460766\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 282979937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652988476
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a> from <code>alias-analysis</code> to <code>main</code>.</p>",
        "id": 283003316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653001392
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979351703\">PR review</a>.</p>",
        "id": 283003353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653001420
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877603253\">PR review comment</a>:</p>\n<blockquote>\n<p>That's a great idea, thanks -- done!</p>\n</blockquote>",
        "id": 283003354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653001420
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979351786\">PR review</a>.</p>",
        "id": 283003365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653001432
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877603341\">PR review comment</a>:</p>\n<blockquote>\n<p>Done (here and in other new tests)!</p>\n</blockquote>",
        "id": 283003366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653001432
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a> from <code>alias-analysis</code> to <code>main</code>.</p>",
        "id": 283004206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653001985
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979356488\">PR review</a>.</p>",
        "id": 283004233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002006
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877607038\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yes, I had missed that; using that one now, thanks.</p>\n</blockquote>",
        "id": 283004234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002006
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877607073\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 283004241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002012
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979356534\">PR review</a>.</p>",
        "id": 283004242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002012
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979356817\">PR review</a>.</p>",
        "id": 283004329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002046
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877607349\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, good idea; I added <code>with_&lt;flag&gt;</code> methods to <code>MemFlags</code>.</p>\n</blockquote>",
        "id": 283004330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002047
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979359149\">PR review</a>.</p>",
        "id": 283004809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002348
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877609293\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure! There are efficiency reasons why this is not trivial -- bits in a bitset (<code>MemFlags</code> is a <code>u8</code>, but even with a <code>u32</code> or <code>u64</code> that's still a small fixed number of heaps/tables), and the vector of last-stores (does it scale arbitrarily?). But maybe there's a hybrid approach (small number of privileged heaps/tables) or maybe we can find a way to scale it well enough.</p>\n<p>Filed #4166.</p>\n</blockquote>",
        "id": 283004810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002349
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-979360855\">PR review</a>.</p>",
        "id": 283005110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002581
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r877610596\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, #4167.</p>\n</blockquote>",
        "id": 283005111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002581
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-980513131\">PR review</a>.</p>",
        "id": 283108443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653070933
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-980513131\">PR review</a>.</p>",
        "id": 283108445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653070934
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r878423680\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add a test for loads of the same address but of different types? I.e. something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">eliminated</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Probably would be good to test signed vs unsigned extensions and 8-to-32 vs 16-to-32 extensions as well.</p>\n</blockquote>",
        "id": 283108446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653070934
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r878415770\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we also have tests for the other fence-semantics instructions too? Just tiny functions for each of them like</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"o\">&lt;</span><span class=\"n\">fence</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 283108447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653070934
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r878427270\">PR review comment</a>:</p>\n<blockquote>\n<p>It might make sense to reduce indentation here, since this is basically the rest of the function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">inst_addr_offset_type</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">continue</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"c1\">// ...</span>\n</code></pre></div>\n<p>Totally up to you.</p>\n</blockquote>",
        "id": 283108449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653070934
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r878431213\">PR review comment</a>:</p>\n<blockquote>\n<p>Just to double check ourselves</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>fn get_ext_opcode(op: Opcode) -&gt; Option&lt;Opcode&gt; {\n    debug_assert!(op.can_load() || op.can_store());\n    match op {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 283108450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653070934
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a> from <code>alias-analysis</code> to <code>main</code>.</p>",
        "id": 283116912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653075521
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-980595966\">PR review</a>.</p>",
        "id": 283116931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653075533
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r878492434\">PR review comment</a>:</p>\n<blockquote>\n<p>Done! Added <code>filetests/alias/fence.clif</code>.</p>\n</blockquote>",
        "id": 283116932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653075533
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-980596163\">PR review</a>.</p>",
        "id": 283116940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653075541
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r878492539\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 283116942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653075541
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-980596605\">PR review</a>.</p>",
        "id": 283116972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653075559
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r878492729\">PR review comment</a>:</p>\n<blockquote>\n<p>Done! Added <code>filetests/alias/extends.clif</code>.</p>\n</blockquote>",
        "id": 283116975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653075559
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#pullrequestreview-980597710\">PR review</a>.</p>",
        "id": 283117063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653075604
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163#discussion_r878493208\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, there's actually a final call to <code>update_state</code> below the long if-let, which this would skip, and factoring the body out is a bit complex because of mutable borrows of self. Left it as-is for now, but thanks in any case!</p>\n</blockquote>",
        "id": 283117064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653075605
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4163\">PR #4163</a>.</p>",
        "id": 283121089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653077974
    }
]