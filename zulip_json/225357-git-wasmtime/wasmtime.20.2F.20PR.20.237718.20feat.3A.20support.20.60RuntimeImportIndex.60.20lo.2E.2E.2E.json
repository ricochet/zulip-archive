[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a> from <code>rvolosatovs:feat/dynamic-resources-by-path</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Follow-up on #7688<br>\nCloses #7714 </p>\n</blockquote>",
        "id": 409424037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703176345
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>.</p>",
        "id": 409427037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703177320
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718#issuecomment-1866839848\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 409454446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703187886
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>.</p>",
        "id": 409586609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703253448
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<p>Follow-up on #7688<br>\nCloses #7714 </p>\n<p>Just <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718/commits/3680ff4c32d06fba7c43e27ab2030bf32927b116\">https://github.com/bytecodealliance/wasmtime/pull/7718/commits/3680ff4c32d06fba7c43e27ab2030bf32927b116</a> relevant here</p>\n</blockquote>",
        "id": 409586853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703253560
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718#issuecomment-1874550607\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<p>I personally fall on the conservative side of API design, so my knee-jerk reaction is to not include something like this. Could you expand a bit more on the motivation, however?</p>\n</blockquote>",
        "id": 410904766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704229113
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718#issuecomment-1880933285\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<blockquote>\n<p>I personally fall on the conservative side of API design, so my knee-jerk reaction is to not include something like this. Could you expand a bit more on the motivation, however?</p>\n</blockquote>\n<p>Sure, this is primarily to address <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">https://github.com/bytecodealliance/wasmtime/issues/7714</a> and potentially help with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">https://github.com/bytecodealliance/wasmtime/issues/7726</a>.<br>\nMost important reason for this to exist is that the embedder may not necessarily be directly calling e.g. <code>Linker::resource</code> and therefore may not have the <code>ResourceImportIndex</code> associated with it - this is the case today, for example, for any resources added to the linker via generated <code>add_to_linker</code> from bindgen. To address this <code>add_to_linker</code> would need to return a mapping of resource type import paths (expressed as strings, generated statically-typed structs or otherwise) to their respective import indexes. The intention of this change is therefore to:</p>\n<ul>\n<li>Serve as a opt-in simple solution for use cases where initial linking performance is not a bottleneck/not critical and/or implementation simplicity and readability are more important - this is also relevant for prototyping.</li>\n<li>While a more performant solution (hooking into the bindgen, I suppose) is built, unblock WASI resource <code>ResourceAny</code> conversion.</li>\n<li>(in the general case) Provide for use cases where the <code>Linker::resource</code> calls are wrapped in an external API. (in case that Wasmtime WASI implementation is updated to expose the mapping somehow, third parties may still provide APIs wrapping <code>Linker::resource</code> without exposing the indexes and lack of path-based lookups, even if less performant than they could otherwise be, would block users from benefiting from those said APIs)</li>\n</ul>\n</blockquote>",
        "id": 411730859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704717656
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>.</p>",
        "id": 411730895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704717671
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718#issuecomment-1880933285\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<blockquote>\n<p>I personally fall on the conservative side of API design, so my knee-jerk reaction is to not include something like this. Could you expand a bit more on the motivation, however?</p>\n</blockquote>\n<p>Sure, this is primarily to address <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">https://github.com/bytecodealliance/wasmtime/issues/7714</a> and potentially help with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">https://github.com/bytecodealliance/wasmtime/issues/7726</a>.<br>\nMost important reason for this to exist is that the embedder may not necessarily be directly calling e.g. <code>Linker::resource</code> and therefore may not have the <code>ResourceImportIndex</code> associated with it - this is the case today, for example, for any resources added to the linker via generated <code>add_to_linker</code> from bindgen. To address this <code>add_to_linker</code> would need to return a mapping of resource type import paths (expressed as strings, generated statically-typed structs or otherwise) to their respective import indexes. The intention of this change is therefore to:</p>\n<ul>\n<li>Serve as a opt-in simple solution for use cases where initial linking performance is not a bottleneck/not critical and/or implementation simplicity and readability are more important - for example, it's very relevant for rapid prototyping.</li>\n<li>While a more performant solution (hooking into the bindgen, I suppose) is built, unblock WASI resource <code>ResourceAny</code> conversion.</li>\n<li>(in the general case) Provide for use cases where the <code>Linker::resource</code> calls are wrapped in an external API. (in case that Wasmtime WASI implementation is updated to expose the mapping somehow, third parties may still provide APIs wrapping <code>Linker::resource</code> without exposing the indexes and lack of path-based lookups, even if less performant than they could otherwise be, would block users from benefiting from those said APIs)</li>\n</ul>\n</blockquote>",
        "id": 411731060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704717745
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718#issuecomment-1880933285\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<blockquote>\n<p>I personally fall on the conservative side of API design, so my knee-jerk reaction is to not include something like this. Could you expand a bit more on the motivation, however?</p>\n</blockquote>\n<p>Sure, this is primarily to address <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">https://github.com/bytecodealliance/wasmtime/issues/7714</a> and potentially help with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">https://github.com/bytecodealliance/wasmtime/issues/7726</a>.<br>\nMost important reason for this to exist is that the embedder may not necessarily be directly calling e.g. <code>Linker::resource</code> and therefore may not have the <code>ResourceImportIndex</code> associated with it - this is the case today, for example, for any resources added to the linker via generated <code>add_to_linker</code> from bindgen. To address this <code>add_to_linker</code> would need to return a mapping of resource type import paths (expressed as strings, generated statically-typed structs or otherwise) to their respective import indexes. The intention of this change is therefore to:</p>\n<ul>\n<li>Serve as a opt-in simple solution for use cases where initial linking performance is not a bottleneck/not critical and/or implementation simplicity and readability are more important - for example, it's very relevant for rapid prototyping.</li>\n<li>While a more performant solution (hooking into the bindgen, I suppose) is built, unblock WASI resource <code>ResourceAny</code> conversion.</li>\n<li>(in the general case) Provide for use cases where the <code>Linker::resource</code> calls are wrapped in an external API. (in case that Wasmtime WASI implementation is updated to expose the mapping somehow, third parties may still provide APIs wrapping <code>Linker::resource</code> without exposing the indexes and lack of path-based lookups, even if less performant than they could otherwise be, would block users from benefiting from those said APIs)</li>\n</ul>\n<p>Short term, by far the most important aspect of this for me is unblocking the \"WASI resource -&gt; <code>ResourceAny</code>\"conversion (#7714) without the need for manual reimplementation of <code>add_to_linker</code> for all interfaces containing resources. Perhaps you have another idea how this can be solved?</p>\n<p>Note that one potential compromise here, which could assist with the string lookup performance penalty, could be introducing a \"cell\" type, which could store the initial lookup result (originally proposed by @fitzgen in a very brief chat about this topic)</p>\n</blockquote>",
        "id": 411731705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704718010
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718#issuecomment-1880933285\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<blockquote>\n<p>I personally fall on the conservative side of API design, so my knee-jerk reaction is to not include something like this. Could you expand a bit more on the motivation, however?</p>\n</blockquote>\n<p>Sure, this is primarily to address <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">https://github.com/bytecodealliance/wasmtime/issues/7714</a> and potentially help with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">https://github.com/bytecodealliance/wasmtime/issues/7726</a>.<br>\nMost important reason for this to exist is that the embedder may not necessarily be directly calling e.g. <code>Linker::resource</code> and therefore may not have the <code>ResourceImportIndex</code> associated with it - this is the case today, for example, for any resources added to the linker via generated <code>add_to_linker</code> from bindgen. To address this <code>add_to_linker</code> would need to return a mapping of resource type import paths (expressed as strings, generated statically-typed structs or otherwise) to their respective import indexes. The intention of this change is therefore to:</p>\n<ul>\n<li>Serve as a opt-in simple solution for use cases where initial linking performance is not a bottleneck/not critical and/or implementation simplicity and readability are more important - for example, it's very relevant for rapid prototyping.</li>\n<li>While a more performant solution (hooking into the bindgen, I suppose) is built, unblock WASI resource <code>ResourceAny</code> conversion.</li>\n<li>(in the general case) Provide for use cases where the <code>Linker::resource</code> calls are wrapped in an external API. (in case that Wasmtime WASI implementation is updated to expose the mapping somehow, third parties may still provide APIs wrapping <code>Linker::resource</code> without exposing the indexes and lack of path-based lookups, even if less performant than they could otherwise be, would block users from benefiting from those said APIs)</li>\n</ul>\n<p>Short term, by far the most important aspect of this for me is unblocking the \"WASI resource -&gt; <code>ResourceAny</code>\"conversion (#7714) without the need for manual reimplementation of <code>add_to_linker</code> for all interfaces containing resources. Perhaps you have another idea how this can be solved?</p>\n<p>Note that one potential compromise here, which could assist with the string lookup performance penalty, could be introducing a \"cell\" type, which could store the initial lookup result (originally proposed by @fitzgen in a very brief chat about this topic)</p>\n<p>I suspect this we will end up in a very similar situation here working on #7726</p>\n</blockquote>",
        "id": 411731932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704718090
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718#issuecomment-1880933285\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<blockquote>\n<p>I personally fall on the conservative side of API design, so my knee-jerk reaction is to not include something like this. Could you expand a bit more on the motivation, however?</p>\n</blockquote>\n<p>Sure, this is primarily to address <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">https://github.com/bytecodealliance/wasmtime/issues/7714</a> and potentially help with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">https://github.com/bytecodealliance/wasmtime/issues/7726</a>.<br>\nMost important reason for this to exist is that the embedder may not necessarily be directly calling e.g. <code>Linker::resource</code> and therefore may not have the <code>ResourceImportIndex</code> associated with it - this is the case today, for example, for any resources added to the linker via generated <code>add_to_linker</code> from bindgen. To address this <code>add_to_linker</code> would need to return a mapping of resource type import paths (expressed as strings, generated statically-typed structs or otherwise) to their respective import indexes. The intention of this change is therefore to:</p>\n<ul>\n<li>Serve as a opt-in simple solution for use cases where initial linking performance is not a bottleneck/not critical and/or implementation simplicity and readability are more important - for example, it's very relevant for rapid prototyping.</li>\n<li>While a more performant solution (hooking into the bindgen, I suppose) is built, unblock WASI resource <code>ResourceAny</code> conversion. (#7714)</li>\n<li>(in the general case) Provide for use cases where the <code>Linker::resource</code> calls are wrapped in an external API. (in case that Wasmtime WASI implementation is updated to expose the mapping somehow, third parties may still provide APIs wrapping <code>Linker::resource</code> without exposing the indexes and lack of path-based lookups, even if less performant than they could otherwise be, would block users from benefiting from those said APIs)</li>\n</ul>\n<p>Short term, by far the most important aspect of this for me is unblocking the \"WASI resource -&gt; <code>ResourceAny</code>\"conversion (#7714) without the need for manual reimplementation of <code>add_to_linker</code> for all interfaces containing resources. Perhaps you have another idea how this can be solved?</p>\n<p>Note that one potential compromise here, which could assist with the string lookup performance penalty, could be introducing a \"cell\" type, which could store the initial lookup result (originally proposed by @fitzgen in a very brief chat about this topic)</p>\n<p>I suspect this we will end up in a very similar situation here working on #7726</p>\n</blockquote>",
        "id": 411732074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704718147
    },
    {
        "content": "<p><strong>rvolosatovs</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a> as ready for review.</p>",
        "id": 411732350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704718245
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>.</p>",
        "id": 411732352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704718246
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>.</p>",
        "id": 411732355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704718246
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<p>Follow-up on #7688<br>\nCloses #7714 </p>\n</blockquote>",
        "id": 411732676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704718360
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<p>Follow-up on #7688<br>\nCloses #7714 (a more performant solution should probably exist, but this addressed the immediate issue)</p>\n</blockquote>",
        "id": 411732744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704718381
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<p>Follow-up on #7688<br>\nCloses #7714 (a more performant solution should probably exist, but this addresses the immediate issue)</p>\n</blockquote>",
        "id": 411732785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704718396
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718#issuecomment-1881403344\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7718\">PR #7718</a>:</p>\n<blockquote>\n<p>Thanks for expanding! What you're saying makes sense and give me a better understanding as to the pieces here.</p>\n<p>I'd be inclined to go the route of #7714 first, however. This PR is exposing yet-more-details about the internal representation of components which otherwise needs documentation (e.g. the doc blocks here don't really explain anything about the deeper meaning of the constructs here). For example:</p>\n<ul>\n<li>Currently <code>RuntimeImportIndex</code> is a \"private\" type which is just an implementation detail of Wasmtime. This is exporting it to the public interface without explaining what it means or represents. Under the hood it's sort of an irrelevant implementation detail to embedders where it happens to be the specific order of arguments being passed to the component and it can be used to lookup the runtime type used for a particular import.</li>\n<li>Additionally the concept of a \"path\" for an import is introduced here in the public API. The <code>Linker</code> for example does not operate on this and instead works with instances.</li>\n</ul>\n<p>I understand that this is an \"easy\" PR but that's typically how these things go. Wasmtime doesn't implement the real feature here (#7714) so it's easier to basically make more things <code>pub</code> than to implement the real feature. The cost of this though is maintenance over time. These APIs will need to be documented and maintained and kept in sync with all other component-related APIs. Additionally the runtime functionality would need to be preserved here across refactorings of Wasmtime's internals and all that.</p>\n<p>More-or-less I understand that this is an easy PR and gets the job done, but if you're ok I'd prefer to go down the route of #7714 first to avoid adding two more concepts to the component embedding API (runtime import indices and import paths). If it's necessary to add them then it's necessary but if possible I'd prefer to avoid adding them since the embedding API is already quite complicated.</p>\n</blockquote>",
        "id": 411771670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704730962
    }
]