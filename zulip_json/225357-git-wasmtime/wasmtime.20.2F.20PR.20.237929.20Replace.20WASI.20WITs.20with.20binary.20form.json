[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a> from <code>alexcrichton:remove-in-tree-wit</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit replaces the textual <code>*.wit</code> files in the Wasmtime tree with the binary form of a WIT package. Currently there's still duplication in the <code>crates/wasi/wit</code> and <code>crates/wasi-http/wit</code> folder which I think we can remove with some extra work but for now I wanted to at least take the step forward of using a binary distribution instead of textual WIT files.</p>\n<p>The new WIT structure now looks like:</p>\n<ul>\n<li>\n<p><code>wit/test.wit</code> - miscellaneous things Wasmtime uses for tests such as a proxy world and a command that has http. Eventually I'd like to remove this.</p>\n</li>\n<li>\n<p><code>wit/deps/wasi-cli@0.2.0.wasm</code> - serialized version of the <code>wasi-cli</code> proposal at the v0.2.0 tag. Created with <code>wasm-tools component wit --wasm</code></p>\n</li>\n<li>\n<p><code>wit/deps/wasi-http@0.2.0.wasm</code> - Same as the <code>wasi-cli</code> proposal, but for HTTP instead.</p>\n</li>\n</ul>\n<p>Supporting this new format for dependencies required updating the <code>wit-bindgen</code> dependency as well which ensures that everyone's agreeing on <code>wit-parser</code> being up-to-date with this new feature support.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 421304409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707849987
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>.</p>",
        "id": 421304413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707849987
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>.</p>",
        "id": 421304414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707849988
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>.</p>",
        "id": 421304415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707849988
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#pullrequestreview-1878707975\">PR review</a>:</p>\n<blockquote>\n<p>Awesome!</p>\n</blockquote>",
        "id": 421305620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707850392
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>.</p>",
        "id": 421306676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707850760
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1942195684\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>What is the advantage of this? It would make it harder to review changes (as git will refuse to show any diff) Also I believe distros generally require the original source for binary blobs to be included anyway and recompiled as part of the build process. <a href=\"https://www.debian.org/doc/debian-policy/ch-source.html#missing-sources-debian-missing-sources\">https://www.debian.org/doc/debian-policy/ch-source.html#missing-sources-debian-missing-sources</a> and <a href=\"https://docs.fedoraproject.org/en-US/packaging-guidelines/what-can-be-packaged/#prebuilt-binaries-or-libraries\">https://docs.fedoraproject.org/en-US/packaging-guidelines/what-can-be-packaged/#prebuilt-binaries-or-libraries</a></p>\n</blockquote>",
        "id": 421306717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707850771
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1942242922\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>Just thought of this - this will eliminate the rust docs generated from the wit comments on the generated code, right? Those are pretty useful and so losing them is a significant regression...</p>\n</blockquote>",
        "id": 421311668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707852637
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1942697544\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>Good questions! The main benefit of this to me is that it more heavily discourages local modifications to WIT files and reaffirms that the source of truth of the WIT files is upstream in the WASI proposals themeslves, not here in Wasmtime (as has sort of historically ad-hoc-wise been the case but we're trying to shift now). In the limit with <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/837\">https://github.com/bytecodealliance/wit-bindgen/pull/837</a> I hope to have <code>crates/wasi/wasi-cli@0.2.0.wasm</code> and <code>crates/wasi-http/wasi-http@0.2.0.wasm</code> as the only artifacts in-tree and nothing else, too, to further reduce the need to have CI checks that the two directories are the same.</p>\n<p>You're right, however, that reviewing diffs won't be easy and if sources require non-binary artifacts won't work. One possible solution to that would be to check in the wasm text format instead of the wasm binary format as that would still pretty heavily discourage modifications but it would be more easily diff-able and wouldn't be a binary. Still a bit of a \"generated wad of text\", however, so I'm not sure how distros would feel about that. On the diff side it's also a property that any modifications will almost surely require changes on the Wasmtime side of things, but those are definitely more difficult to review than a change in the WIT itself. I think in general I'm not sure how best we can manage depending on the WASI spec here at this time, but this felt better to me than copying all the WITs in all the places. We're also somewhat \"setting the trend\" as well where if other projects or embeddings want to reference WASI this is an example of how they don't have to copy WITs but can instead copy artifacts at this time (ideally a package-manager-style-solution would work but that isn't fully mature yet AFAIK).</p>\n<p>As for documentation, that should actually be solved where the WASI proposals have a custom section with documentation inside of it so when <code>wit-parser</code> parses everything it has enough info to attach the documentation back to the original item.</p>\n</blockquote>",
        "id": 421331805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707861280
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>.</p>",
        "id": 421339602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707865246
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>This commit replaces the textual <code>*.wit</code> files in the Wasmtime tree with<br>\nthe binary form of a WIT package. The new WIT structure now looks like:</p>\n<ul>\n<li>\n<p><code>crates/wasi/wasi-cli@0.2.0.wasm</code> - serialized version of the <code>wasi-cli</code><br>\n  proposal at the v0.2.0 tag. Created with <code>wasm-tools component wit\n  --wasm</code></p>\n</li>\n<li>\n<p><code>crates/wasi-http/wasi-http@0.2.0.wasm</code> - same as the above, but for<br>\n<code>wasi-http</code>.</p>\n</li>\n<li>\n<p><code>crates/test-programs/wit</code> - WIT files used for tests such as a custom<br>\n  reactor.</p>\n</li>\n<li>\n<p><code>crates/test-programs/wit/deps/*.wasm</code> - WIT bindings to generate<br>\n  tests with. This is a duplicate of the <code>wasi-{cli,http}@0.2.0.wasm</code><br>\n  files from above but additionally enables testing multiple versions in<br>\n  the future.</p>\n</li>\n</ul>\n<p>The end state of this PR is that whenever WASI APIs are updated we'll<br>\nneed a tagged release to pull into Wasmtime to officially support.</p>\n</blockquote>",
        "id": 421339642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707865267
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1942782916\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>I've pushed up an update which is now what I think the longer-term vision for WITs-in-Wasmtime should look like. CI will fail until I publish <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/838\">https://github.com/bytecodealliance/wit-bindgen/pull/838</a> but the idea is that theres a single wasm for <code>wasmtime-wasi</code> and a single wasm for <code>wasmtime-wasi-http</code>, and then we have \"stuff\" for tests.</p>\n<p>(this doesn't move the needle on the binary-vs-not problem, just wanted to point out I made an orthogonal update to that)</p>\n</blockquote>",
        "id": 421339795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707865336
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>.</p>",
        "id": 421345054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707868306
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1942919452\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>OK. I'm ok with the docs regression as long as we work on it soon :)</p>\n</blockquote>",
        "id": 421350698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707871856
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1944396718\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>Oh to clarify, the docs problem I believe is solved. Docs are encoded in the wasm binaries in a custom section, so the only issue I think with this is the binary-vs-not problem</p>\n</blockquote>",
        "id": 421509237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707936210
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>.</p>",
        "id": 421756576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708038629
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>.</p>",
        "id": 421757951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708039089
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1947514947\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>I've added this <a href=\"https://github.com/bytecodealliance/meetings/pull/230\">to the next Wasmtime meeting agenda</a> in case a resolution is not met before then.</p>\n</blockquote>",
        "id": 421760395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708040404
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#pullrequestreview-1891218700\">PR review</a>:</p>\n<blockquote>\n<p>Sorry, this fell off my queue. This change looks good to me, are we waiting to resolve the concerns @bjorn3 brought up?</p>\n</blockquote>",
        "id": 422478598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708454225
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1954855829\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>Yeah, @bjorn3 do you have thoughts on <code>*.wasm</code> vs <code>*.wat</code> perhaps? Or thoughts on the problem this is solving of discouraging edits and avoiding duplication?</p>\n</blockquote>",
        "id": 422480239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708454855
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1954874649\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>If you want to discourage edits, one option would be to store hashes of them separately and check that they match in a build script. That way you have to modify the source and then separately recompute the hash (or patch out the hash check, but you can leave a big comment near the hash check about why it exists). Or maybe you could gzip the wat files? That would also still allow extracting the original sources, but would still look like a binary blob if you open it in a text editor without extracting them first.</p>\n</blockquote>",
        "id": 422482434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708455632
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1954879841\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>had some thoughts I was saving for the Wasmtime agenda item you had scheduled on Feb 29 (are we still discussing it then?) but to add some here:</p>\n<ul>\n<li>\n<p>My main thought here is discoverability and beginner-friendliness: wits seem sort of like header files in the sense that it can be useful to refer to them as specifications. If they exist locally only in binary form, that benefit is mostly lost; it can still be dumped via a tool, but it's not as immediately apparent how to do that to a newcomer. That seems more important to me than the \"control\" aspects you mentioned (the latter which can still be enforced other ways), though admittedly that's a value judgment.</p>\n</li>\n<li>\n<p>Solving the \"single source of truth\" problem by including only a derived artifact feels a little artificial to me: it's still a copy, data that came from elsewhere. One way I've seen this managed elsewhere (e.g. in large company monorepos) is to have a <code>third_party/</code> directory with exact copies of external source, and optionally scripts to do updates, and maybe CI rules or at least social conventions to prevent checkin of anything but updates from upstream.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 422483039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708455837
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1954879841\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>I had some thoughts I was saving for the Wasmtime agenda item you had scheduled on Feb 29 (are we still discussing it then?) but to add some here:</p>\n<ul>\n<li>\n<p>My main thought here is discoverability and beginner-friendliness: wits seem sort of like header files in the sense that it can be useful to refer to them as specifications. If they exist locally only in binary form, that benefit is mostly lost; it can still be dumped via a tool, but it's not as immediately apparent how to do that to a newcomer. That seems more important to me than the \"control\" aspects you mentioned (the latter which can still be enforced other ways), though admittedly that's a value judgment.</p>\n</li>\n<li>\n<p>Solving the \"single source of truth\" problem by including only a derived artifact feels a little artificial to me: it's still a copy, data that came from elsewhere. One way I've seen this managed elsewhere (e.g. in large company monorepos) is to have a <code>third_party/</code> directory with exact copies of external source, and optionally scripts to do updates, and maybe CI rules or at least social conventions to prevent checkin of anything but updates from upstream.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 422483081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708455844
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1960071357\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>Ah I put this on the agenda for Feb 29 to make sure it's not forgotten about, but I figure that if it's merged sooner I can take it off the agenda.</p>\n<p>I'm not sure how best to thread this needle myself. I don't know how to balance the conerns y'all have with how these WIT files are developed. For example I understand distros don't like binary blobs but a packager can always check out a versioned tag of a WASI proposal/repo and generate the exact same wasm binary. We could check in <code>*.wat</code> or text files but at least personally as a reviewer I'd always skip the files anyway since any changes are going to have larger changes on the bindings/implementation which is what I'd be interested in. I agree that the contents aren't discoverable here in this repo when there's a binary form but to me that's not necessarily a bad thing because this isn't where these WIT files are developed, that's intended for the upstream repos themselves.</p>\n<p>To me I feel that the binary distribution of WIT packages is a perfect use case here for integrating with downstream repos using WIT packages. Ideally we wouldn't even check in binary files and we'd simply have <code>Wit.toml</code> which would say <code>[dependencies] 'wasi:cli' = \"0.2.0\"</code> and nothing else, meaning literally nothing would be checked in to this repository. In that sense the binary files are to me another step towards this future.</p>\n<p>As I think more about this one other thing I like about the binary solution is that it makes it much easier to write down and execute instructions about updating these files. Currently it's copying a bunch of WIT files but you have to get that from multiple upstream WASI repositories and make sure you copy them all to the right places with the right names. You also need to make sure all the repos are checked out at the right version. As a reviewer I'd have to theoretically redo all that work to confirm it's all matching. With a binary file there's a single file in a single location under GitHub Releases for a single repo to go pick out. As a reviewer I could verify it's the expected file and move on from there.</p>\n<hr>\n<p>Well, in any case, I'm happy to discuss further on this PR, but I'm also ok deferring to next week's meeting too.</p>\n</blockquote>",
        "id": 422885080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708628442
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>.</p>",
        "id": 424925986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709661145
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929#issuecomment-1979322972\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7929\">PR #7929</a>:</p>\n<blockquote>\n<p>Discussion from last week's Wasmtime meeting concluded that this isn't the way we'd like to go, and instead pursing <a href=\"https://github.com/WebAssembly/component-model/issues/313\">https://github.com/WebAssembly/component-model/issues/313</a> to have a single <code>*.wit</code> file would be better. Additionally we'll want a script to run to update the proposals from a particular tag to ensure no local changes.</p>\n</blockquote>",
        "id": 424925988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709661145
    }
]