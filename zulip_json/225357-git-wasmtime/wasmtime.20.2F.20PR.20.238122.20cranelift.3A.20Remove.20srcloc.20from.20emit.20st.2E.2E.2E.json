[
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8122\">PR #8122</a>.</p>",
        "id": 426417872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710360298
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8122\">PR #8122</a> from <code>jameysharp:no-trap-srcloc</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>In #2426, @cfallin wrote:</p>\n<blockquote>\n<p>[â€¦] don't emit trap info unless an op can trap.</p>\n<p>This end result was previously enacted by carrying a SourceLoc on<br>\nevery load/store, which was somewhat cumbersome, and only indirectly<br>\nencoded metadata about a memory reference (can it trap) by its<br>\npresence or absence.</p>\n</blockquote>\n<p>That PR changed both backends that existed at the time to check both the source location and the memory flags to determine whether a memory access could trap.</p>\n<p>Then in #2685, @cfallin wrote:</p>\n<blockquote>\n<p>Finally, while working out why trap records were not appearing, I had<br>\nnoticed that isa::x64::emit_std_enc_mem() was only emitting heap-OOB<br>\ntrap metadata for loads/stores when it had a srcloc. This PR ensures<br>\nthat the metadata is emitted even when the srcloc is empty.</p>\n</blockquote>\n<p>However that PR did not apply the same change to other backends. Since then, the pattern from #2426 has been copied to new backends.</p>\n<p>I believe checking the source location has been unnecessary since #2426 and is now just a source of confusion at best, and possibly bugs at worst. So this PR makes all targets match the behavior of the x64 backend.</p>\n<p>In addition, this pattern was the only reason why source locations were provided to any backend's emit state, so I'm removing that entirely. The <code>cur_srcloc</code> field has been unused on x64 since #2685.</p>\n<p>This change is mostly straightforward, but there are two questionable changes in the riscv64 backend:</p>\n<ul>\n<li>\n<p>The riscv64 backend had one use of this pattern for a BadConversionToInteger trap. All other uses on all backends were for HeapOutOfBounds traps. I suspect that was a copy-paste bug so I've removed it just like all the others.</p>\n</li>\n<li>\n<p>The riscv64 <code>Inst::Atomic</code> does not have a MemFlags field, so this means the HeapOutOfBounds trap metadata is added unconditionally for such instructions.</p>\n</li>\n</ul>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 426417873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710360298
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8122\">PR #8122</a>.</p>",
        "id": 426417874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710360298
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8122#pullrequestreview-1935119635\">PR review</a>:</p>\n<blockquote>\n<p>LGTM -- thanks for finding this cleanup!</p>\n<p>FWIW it should always be safe to emit extra trap records -- the \"record exists and wasn't supposed to case\" would matter only in that it could mask a separate bug, wherein the lowering generated a trap it wasn't supposed to, and turn it into a Wasm-level trap rather than a process crash. And that itself only if we use the instruction for internal logic separately from accesses that correspond to Wasm-level operators. So I think this is fine re: riscv64's <code>Atomic</code> MachInst.</p>\n</blockquote>",
        "id": 426418964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710360786
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8122\">PR #8122</a>.</p>",
        "id": 426420459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710361412
    },
    {
        "content": "<p>jameysharp has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8122\">PR #8122</a>.</p>",
        "id": 426420626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710361461
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8122\">PR #8122</a>.</p>",
        "id": 426427880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710364559
    }
]