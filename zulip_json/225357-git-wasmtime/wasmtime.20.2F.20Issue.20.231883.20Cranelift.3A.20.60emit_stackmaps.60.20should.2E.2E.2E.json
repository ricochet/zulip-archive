[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1883\">Issue #1883</a>:</p>\n<blockquote>\n<p>Enabling stack maps and GC safepoints adds another pass over the IR (<code>emit_stackmaps</code>) regardless whether the function in question actually uses reference types at all. One could imagine (especially with wasm-bindgen's \"switch reference types into table indices at the boundaries\" approach, that seems likely to be copied by C/C++) that many functions in a module don't use reference types. For these functions, that extra pass over the IR is a waste of time.</p>\n<p>We could have a flag on functions that gets set if it uses reference types in any way (and then never gets unset when a particular reference type-using instruction is removed, so we don't have to precisely count them) and in <code>emit_stackmaps</code>, only walk the IR if the flag is set (and probably <code>debug_assert!</code> that it doesn't have any uses of reference types if the flag is not set).</p>\n<p>This came up in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1832#discussion_r440456291\">https://github.com/bytecodealliance/wasmtime/pull/1832#discussion_r440456291</a> for Wasmtime.</p>\n</blockquote>",
        "id": 200948961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592256894
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1883\">Issue #1883</a>:</p>\n<blockquote>\n<p>Enabling stack maps and GC safepoints adds another pass over the IR (<code>emit_stackmaps</code>) regardless whether the function in question actually uses reference types at all. One could imagine (especially with wasm-bindgen's \"switch reference types into table indices at the boundaries\" approach, that seems likely to be copied by C/C++) that many functions in a module don't use reference types. For these functions, that extra pass over the IR is a waste of time.</p>\n<p>We could have a flag on functions that gets set if it uses reference types in any way (and then never gets unset when a particular reference type-using instruction is removed, so we don't have to precisely count them) and in <code>emit_stackmaps</code>, only walk the IR if the flag is set (and probably <code>debug_assert!</code> that it doesn't have any uses of reference types if the flag is not set).</p>\n<p>This came up in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1832#discussion_r440456291\">https://github.com/bytecodealliance/wasmtime/pull/1832#discussion_r440456291</a> for Wasmtime.</p>\n</blockquote>",
        "id": 200948962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592256894
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1883#issuecomment-644403041\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1883\">Issue #1883</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 200949026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592256937
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1883#issuecomment-645397393\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1883\">Issue #1883</a>:</p>\n<blockquote>\n<p>Thanks for opening an issue! Do you have any numbers on how much relative time is spent going over the IR, for a large module? This would help quantifying how urgent an issue it is. In any case, agreed that not doing wasteful work is generally good, of course.</p>\n<p>The idea of using a flag on the function sounds good. Not sure where to put it, since as far as i can tell it's the first usage of a flag in a Function; could be directly there, or DataFlowGraph, etc.</p>\n</blockquote>",
        "id": 201145808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592402969
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1883#issuecomment-645460598\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1883\">Issue #1883</a>:</p>\n<blockquote>\n<p>Not sure how much time is spent doing the pass when there aren't any reference types used, it just came up during review.</p>\n</blockquote>",
        "id": 201161607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592409241
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1883\">Issue #1883</a>:</p>\n<blockquote>\n<p>Enabling stack maps and GC safepoints adds another pass over the IR (<code>emit_stackmaps</code>) regardless whether the function in question actually uses reference types at all. One could imagine (especially with wasm-bindgen's \"switch reference types into table indices at the boundaries\" approach, that seems likely to be copied by C/C++) that many functions in a module don't use reference types. For these functions, that extra pass over the IR is a waste of time.</p>\n<p>We could have a flag on functions that gets set if it uses reference types in any way (and then never gets unset when a particular reference type-using instruction is removed, so we don't have to precisely count them) and in <code>emit_stackmaps</code>, only walk the IR if the flag is set (and probably <code>debug_assert!</code> that it doesn't have any uses of reference types if the flag is not set).</p>\n<p>This came up in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1832#discussion_r440456291\">https://github.com/bytecodealliance/wasmtime/pull/1832#discussion_r440456291</a> for Wasmtime.</p>\n</blockquote>",
        "id": 206323436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596847268
    }
]