[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087\">PR #6087</a> from <code>riscv-zba</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR adds the instructions present in the <a href=\"https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#zba\">Zba extension</a> to the RISC-V 64 backend. The Zba extension contains instructions for address generation.</p>\n<p>Here's a quick summary:<br>\n| Mnemonic | Description |<br>\n| ------------ | ------------ |<br>\n| <code>add.uw rd, rs1, rs2</code> | <a href=\"https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#insns-add_uw\">Add unsigned word</a> |<br>\n| <code>sh1add rd, rs1, rs2</code> | <a href=\"https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#insns-sh1add\">Shift left by 1 and add</a> |<br>\n| <code>sh1add.uw rd, rs1, rs2</code> | <a href=\"https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#insns-sh1add_uw\">Shift unsigned word left by 1 and add</a> |<br>\n| <code>sh2add rd, rs1, rs2</code> | <a href=\"https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#insns-sh2add\">Shift left by 2 and add</a> |<br>\n| <code>sh2add.uw rd, rs1, rs2</code> | <a href=\"https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#insns-sh2add_uw\">Shift unsigned word left by 2 and add</a> |<br>\n| <code>sh3add rd, rs1, rs2</code> | <a href=\"https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#insns-sh3add\">Shift left by 3 and add</a> |<br>\n| <code>sh3add.uw rd, rs1, rs2</code> | <a href=\"https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#insns-sh3add_uw\">Shift unsigned word left by 3 and add</a> |<br>\n| <code>slli.uw rd, rs1, imm</code> | <a href=\"https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#insns-slli_uw\">Shift-left unsigned word (Immediate)</a> |</p>\n<p>Besides directly matching the above, we also add the <code>zext.w</code> mnemnoic which is essentially <code>add.uw rd, rs, zero</code>.</p>\n<p>I've left this fuzzing overnight on a riscv64 machine and all seems ok so far.</p>\n</blockquote>",
        "id": 343654391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679486364
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087\">PR #6087</a> from <code>riscv-zba</code> to <code>main</code>.</p>",
        "id": 343665799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679489186
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#pullrequestreview-1353082471\">PR review</a>.</p>",
        "id": 343795749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523376
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#pullrequestreview-1353082471\">PR review</a>.</p>",
        "id": 343795750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523376
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1145414144\">PR review comment</a>:</p>\n<blockquote>\n<p>A <code>uextend</code> can't have a result type of the same width as its operand, so <code>(ty_32_or_64 ty)</code> can be replaced with <code>$I64</code> in these rules.</p>\n</blockquote>",
        "id": 343795752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523376
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1145142029\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe this can be at priority 2 without overlapping with the <code>zext.h</code> rule above, since this rule only extends from I32 and that rule only extends from I16.</p>\n<p>Then I think you can undo all the priority changes in the remaining <code>extend</code> rules below.</p>\n<p>That said, I like the idea of putting both the I128 rules at the same priority, so it's clear that the only difference between them is the <code>ExtendOp</code>. (That may improve the ISLE compiler's output by making it clear that the other pattern matches can all be shared.) So I'd be in favor of still bumping the sign-extend-to-128 case up to priority 3.</p>\n</blockquote>",
        "id": 343795753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523376
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1145397578\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice catch, noticing that this rule could never fire because the <code>fits_in_64</code> case would always match first. I had extended the overlap checker to catch that sort of bug, but since it doesn't know how extractors like <code>fits_in_64</code> and <code>fits_in_32</code> are related, it couldn't find this particular issue.</p>\n<p>That said, is there any benefit to treating 32-bit <code>iadd</code> differently than 64-bit <code>iadd</code>? The upper bits shouldn't matter on either input or output.</p>\n<p>I see that <code>addw</code> sign-extends the 32-bit result to 64-bits, so using it would make sense in a rule matching <code>(has_type $I64 (sextend (has_type $I32 (iadd x y))))</code>.</p>\n</blockquote>",
        "id": 343795754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523376
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1145433635\">PR review comment</a>:</p>\n<blockquote>\n<p>This is another case where you can replace <code>(fits_in_64 ty)</code> with <code>$I64</code>, because there are no other types which satisfy both that pattern and the constraints on <code>uextend</code> from <code>$I32</code>.</p>\n<p>Possible future work: remove all uses of <code>maybe_uextend</code> from <code>ishl</code> lowering rules, and add egraph rules to remove any <code>uextend</code>/<code>sextend</code>/<code>ireduce</code> from the second operand to <code>ishl</code>/<code>ushr</code>/<code>sshr</code>. Since Cranelift's shifts all accept any integer type as the second operand, no matter what the controlling type is, and because shift amounts are always masked to at most 7 bits, it's always safe to remove both widening and narrowing conversions.</p>\n</blockquote>",
        "id": 343795755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523376
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1145420017\">PR review comment</a>:</p>\n<blockquote>\n<p>ISLE will generate slightly better Rust if you use the infallible <code>u64_from_imm64</code> extractor instead of the fallible <code>uimm8</code> extractor. In both cases the patterns will match the same inputs, but with <code>uimm8</code> it'll test that the input is in the range 0..256 before checking against the specific constant values.</p>\n</blockquote>",
        "id": 343795756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523376
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1145430668\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that, like <code>add.uw</code>, the <code>shnadd.uw</code> instructions will only give the correct result if we're zero-extending from exactly <code>$I32</code> to exactly <code>$I64</code>.</p>\n<p>I'd also request a VERY LOUD comment here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> that these instructions can only implement <code>(ishl (uextend _) _)</code>, _not_ <code>(uextend (ishl _ _))</code>. Getting that wrong on x86 was basically the cause of our last CVE. I believe you've gotten them right here, if I read the instruction-set manual correctly, but I was worried for a moment.</p>\n</blockquote>",
        "id": 343795757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523376
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1145454112\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's add more runtests which are like <code>sh1add_uext</code> but with the <code>uextend</code> on the result of the <code>ishl</code> instead of on its first operand. These additional tests should verify that when <code>v1</code> has its most significant N bits set, those bits aren't added into the upper half of <code>v0</code>.</p>\n</blockquote>",
        "id": 343795758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523376
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1145458007\">PR review comment</a>:</p>\n<blockquote>\n<p>What would you think of this replacement, and similarly in <code>sh3add_uext</code> doing the same but with 8 instead of 4? It's slightly easier for me to do the math in my head that way.</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>; run: %sh2add_uext(4, 0xFFFFFFFF) == 0x400000000\n</code></pre></div>\n<p>I'm also thinking something like these tests would be good:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">sh1add_uext</span><span class=\"p\">(</span><span class=\"mh\">0x100000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x80000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x200000000</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">sh2add_uext</span><span class=\"p\">(</span><span class=\"mh\">0x100000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x80000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x300000000</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">sh3add_uext</span><span class=\"p\">(</span><span class=\"mh\">0x100000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x80000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x500000000</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 343795759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679523377
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#pullrequestreview-1354782369\">PR review</a>.</p>",
        "id": 343999162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679582213
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1146298930\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>That said, is there any benefit to treating 32-bit iadd differently than 64-bit iadd? The upper bits shouldn't matter on either input or output.</p>\n</blockquote>\n<p>Not really other than perhaps it being a hint that we only care about the 32bits for whoever is reading the ASM? Not sure that warrants a different rule.</p>\n<blockquote>\n<p>I see that addw sign-extends the 32-bit result to 64-bits, so using it would make sense in a rule matching (has_type $I64 (sextend (has_type $I32 (iadd x y)))).</p>\n</blockquote>\n<p>Yeah that's a good suggestion, I'll add that!</p>\n</blockquote>",
        "id": 343999163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679582213
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1146298930\">PR review comment</a>.</p>",
        "id": 343999707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679582302
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#pullrequestreview-1354906593\">PR review</a>.</p>",
        "id": 344016829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679585532
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1146381219\">PR review comment</a>:</p>\n<blockquote>\n<p>That seems correct, and I think since we don't force <code>uextend</code> here to be i32, it's wrong for i8/i16.</p>\n<p>I also double checked against LLVM, and they also <a href=\"https://godbolt.org/z/qbjj4ETsd\">manually sign extend i16/i8 before using <code>shnadd</code></a>.</p>\n</blockquote>",
        "id": 344016831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679585532
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#pullrequestreview-1354915341\">PR review</a>.</p>",
        "id": 344018027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679585776
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1146387053\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>This is another case where you can replace (fits_in_64 ty) with $I64, because there are no other types which satisfy both that pattern and the constraints on uextend from $I32.</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<blockquote>\n<p>Possible future work: remove all uses of maybe_uextend from ishl lowering rules, and add egraph rules to remove any uextend/sextend/ireduce from the second operand to ishl/ushr/sshr. Since Cranelift's shifts all accept any integer type as the second operand, no matter what the controlling type is, and because shift amounts are always masked to at most 7 bits, it's always safe to remove both widening and narrowing conversions.</p>\n</blockquote>\n<p>That seems like a good idea!</p>\n</blockquote>",
        "id": 344018031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679585777
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#pullrequestreview-1354920001\">PR review</a>.</p>",
        "id": 344018666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679585909
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1146390240\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that's showing zero-extend rather than sign-extend, but yeah, it looks like LLVM doesn't try to do anything special for this pattern for u8 or u16.</p>\n</blockquote>",
        "id": 344018667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679585909
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087\">PR #6087</a> from <code>riscv-zba</code> to <code>main</code>.</p>",
        "id": 344068469,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679596237
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#pullrequestreview-1355341278\">PR review</a>.</p>",
        "id": 344072452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679597252
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#pullrequestreview-1355341278\">PR review</a>.</p>",
        "id": 344072455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679597252
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087#discussion_r1146673715\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's just sneak a little space in here:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>(rule 3 (lower (has_type $I64 (ishl (uextend x @ (value_type $I32)) (maybe_uextend (imm12_from_value y)))))\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 344072457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679597252
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087\">PR #6087</a> from <code>riscv-zba</code> to <code>main</code>.</p>",
        "id": 344073856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679597572
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087\">PR #6087</a> from <code>riscv-zba</code> to <code>main</code>.</p>",
        "id": 344078765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679598729
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6087\">PR #6087</a>.</p>",
        "id": 344095874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679603766
    }
]