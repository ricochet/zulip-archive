[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120\">issue #3120</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a Wasm program traps due to an out-of-bounds memory access, report the address that the Wasm attempted to access and the memory size.</p>\n<h4>Benefit</h4>\n<p>This will make debugging such bugs much easier.</p>\n<h4>Implementation</h4>\n<p>We can get the faulting address via <code>si_addr</code> which I <em>thiiiink</em> is all we need. Wasm can't access two different memories with the same native address (or else what should have been a trap for one memory might accidentally succeed in accessing a different memory) so guard pages should always be associated with one particular memory. We just have to grab the current instance, iterate over its memories and find which one this guard page is associated with. Once we have that, we do a little arithmetic to translate the native address to a Wasm address.</p>\n<p>Hopefully mach ports give us similar info. Completely unsure about windows. This seems like the kind of thing where it isn't the end of the world if we only get this info on some platforms, since it is just a debugging helper.</p>\n<p>When we are using explicit bounds checks, it seems like we can just emit code to embed this data into the trap directly.</p>\n<h4>Alternatives</h4>\n<p>Build valgrind-esque tooling into Wasmtime? Add a mode to trace all heap accesses before we actually do the access and potentially trap?</p>\n</blockquote>",
        "id": 247364693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627407058
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120\">issue #3120</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a Wasm program traps due to an out-of-bounds memory access, report the address that the Wasm attempted to access and the memory size.</p>\n<h4>Benefit</h4>\n<p>This will make debugging such bugs much easier.</p>\n<h4>Implementation</h4>\n<p>We can get the faulting address via <code>si_addr</code> which I <em>thiiiink</em> is all we need. Wasm can't access two different memories with the same native address (or else what should have been a trap for one memory might accidentally succeed in accessing a different memory) so guard pages should always be associated with one particular memory. We just have to grab the current instance, iterate over its memories and find which one this guard page is associated with. Once we have that, we do a little arithmetic to translate the native address to a Wasm address.</p>\n<p>Hopefully mach ports give us similar info. Completely unsure about windows. This seems like the kind of thing where it isn't the end of the world if we only get this info on some platforms, since it is just a debugging helper.</p>\n<p>When we are using explicit bounds checks, it seems like we can just emit code to embed this data into the trap directly.</p>\n<h4>Alternatives</h4>\n<p>Build valgrind-esque tooling into Wasmtime? Add a mode to trace all heap accesses before we actually do the access and potentially trap?</p>\n</blockquote>",
        "id": 247364694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627407058
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120\">issue #3120</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a Wasm program traps due to an out-of-bounds memory access, report the address that the Wasm attempted to access and the memory size.</p>\n<h4>Benefit</h4>\n<p>This will make debugging such bugs much easier.</p>\n<h4>Implementation</h4>\n<p>We can get the faulting address via <code>si_addr</code> which I <em>thiiiink</em> is all we need. Wasm can't access two different memories with the same native address (or else what should have been a trap for one memory might accidentally succeed in accessing a different memory) so guard pages should always be associated with one particular memory. We just have to grab the current instance, iterate over its memories and find which one this guard page is associated with. Once we have that, we do a little arithmetic to translate the native address to a Wasm address.</p>\n<p>Hopefully mach ports give us similar info. Completely unsure about windows. This seems like the kind of thing where it isn't the end of the world if we only get this info on some platforms, since it is just a debugging helper.</p>\n<p>When we are using explicit bounds checks, it seems like we can just emit code to embed this data into the trap directly.</p>\n<h4>Alternatives</h4>\n<p>Build valgrind-esque tooling into Wasmtime? Add a mode to trace all heap accesses before we actually do the access and potentially trap?</p>\n</blockquote>",
        "id": 247364695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627407058
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120\">issue #3120</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a Wasm program traps due to an out-of-bounds memory access, report the address that the Wasm attempted to access and the memory size, eg:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">999999</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>This will make debugging such bugs much easier.</p>\n<h4>Implementation</h4>\n<p>We can get the faulting address via <code>si_addr</code> which I <em>thiiiink</em> is all we need. Wasm can't access two different memories with the same native address (or else what should have been a trap for one memory might accidentally succeed in accessing a different memory) so guard pages should always be associated with one particular memory. We just have to grab the current instance, iterate over its memories and find which one this guard page is associated with. Once we have that, we do a little arithmetic to translate the native address to a Wasm address.</p>\n<p>Hopefully mach ports give us similar info. Completely unsure about windows. This seems like the kind of thing where it isn't the end of the world if we only get this info on some platforms, since it is just a debugging helper.</p>\n<p>When we are using explicit bounds checks, it seems like we can just emit code to embed this data into the trap directly.</p>\n<h4>Alternatives</h4>\n<p>Build valgrind-esque tooling into Wasmtime? Add a mode to trace all heap accesses before we actually do the access and potentially trap?</p>\n</blockquote>",
        "id": 247364999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627407212
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120#issuecomment-887700224\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120\">issue #3120</a>:</p>\n<blockquote>\n<blockquote>\n<p>trap address = 999999</p>\n</blockquote>\n<p>I think it should be a hex address. That is how pointers are often shown.</p>\n</blockquote>",
        "id": 247365172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627407292
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120#issuecomment-887706816\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120\">issue #3120</a>:</p>\n<blockquote>\n<p>We should also be able to report if the access was a read vs. a write.</p>\n</blockquote>",
        "id": 247366389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627407908
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120#issuecomment-887706977\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120\">issue #3120</a>:</p>\n<blockquote>\n<p>This is a great idea!</p>\n<p>One possible complication is what to do about memories with explicit bounds-checks (and no or minimal guard regions); in such a case, the generated code contains a compare/branch and an explicit trap instruction in the failing case. It should be reasonable to add a register argument to the trap instruction to provide the faulting address (Wasm or native) in a fixed register, though; then we could grab this from the signal machine context in the same way we get PC, etc.</p>\n</blockquote>",
        "id": 247366416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627407921
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120#issuecomment-887707736\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120\">issue #3120</a>:</p>\n<blockquote>\n<p>I <em>thiiink</em> with mach ports we want the <code>faultvaddr</code> field of the <code>&lt;arch&gt;_exception_state_t</code> struct, which can be grabbed via <code>thread_get_state</code>.</p>\n</blockquote>",
        "id": 247366583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627407989
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120#issuecomment-888522791\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3120\">issue #3120</a>:</p>\n<blockquote>\n<p>Oh, we should also report the memory index.</p>\n<p>The root cause of the bug that I was debugging and was annoyed with how little info I had, prompting me to open this issue, was that I was accessing the wrong memory.</p>\n</blockquote>",
        "id": 247497054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627496503
    }
]