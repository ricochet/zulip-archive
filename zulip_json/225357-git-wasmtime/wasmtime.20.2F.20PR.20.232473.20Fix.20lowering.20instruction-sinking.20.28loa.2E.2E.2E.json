[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2473\">PR #2473</a> from <code>fix-lowering</code> to <code>main</code>:</p>\n<blockquote>\n<p>This fixes a subtle corner case exposed during fuzzing. If we have a bit<br>\nof CLIF like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">do_other_thing</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and if this is lowered using a machine backend that can merge loads into<br>\nALU ops, <em>and</em> that has an addressing mode that can look through add<br>\nops, then the following can happen:</p>\n<ol>\n<li>\n<p>We lower the load at <code>v3</code>. This looks backward at the address<br>\n   operand tree and finds that <code>v1</code> is <code>v0</code> plus other things; it has an<br>\n   addressing mode that can add <code>v0</code>'s register and the other things<br>\n   directly; so it calls <code>put_value_in_reg(v0)</code> and uses its register in<br>\n   the amode. At this point, the add producing <code>v1</code> has no references,<br>\n   so it will not (yet) be codegen'd.</p>\n</li>\n<li>\n<p>We lower <code>do_other_thing</code>, which puts <code>v1</code> in a register and uses it.<br>\n   the <code>iadd</code> now has a reference.</p>\n</li>\n<li>\n<p>We reach the <code>iadd</code> and, because it has a reference, lower it. Our<br>\n   machine has the ability to merge a load into an ALU operation.<br>\n   Crucially, <em>we think the load at <code>v0</code> is mergeable</em> because it has<br>\n   only one user, the add at <code>v1</code> (!). So we merge it.</p>\n</li>\n<li>\n<p>We reach the <code>load</code> at <code>v0</code> and because it has been merged into the<br>\n<code>iadd</code>, we do not separately codegen it. The register that holds <code>v0</code><br>\n   is thus never written, and the use of this register by the final load<br>\n   (Step 1) will see an undefined value.</p>\n</li>\n</ol>\n<p>The logic error here is that in the presence of pattern matching that<br>\nlooks through pure ops, we can end up with multiple uses of a value that<br>\noriginally had a single use (because we allow lookthrough of pure ops in<br>\nall cases). In other words, the multiple-use-ness of <code>v1</code> \"passes<br>\nthrough\" in some sense to <code>v0</code>. However, the load sinking logic is not<br>\naware of this.</p>\n<p>The fix, I think, is pretty simple: we disallow an effectful instruction<br>\nfrom sinking/merging if it already has some other use when we look back<br>\nat it.</p>\n<p>If we disallowed lookthrough of <em>any</em> op that had multiple uses, even<br>\npure ones, then we would avoid this scenario; but earlier experiments<br>\nshowed that to have a non-negligible performance impact, so (given that<br>\nwe've worked out the logic above) I think this complexity is worth it.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 218766175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607035900
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2473\">PR #2473</a>.</p>",
        "id": 218766176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607035900
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2473\">PR #2473</a>.</p>",
        "id": 218766177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607035900
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2473\">PR #2473</a>.</p>",
        "id": 218766178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607035900
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2473\">PR #2473</a> from <code>fix-lowering</code> to <code>main</code>:</p>\n<blockquote>\n<p>This fixes a subtle corner case exposed during fuzzing. If we have a bit<br>\nof CLIF like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">do_other_thing</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and if this is lowered using a machine backend that can merge loads into<br>\nALU ops, <em>and</em> that has an addressing mode that can look through add<br>\nops, then the following can happen:</p>\n<ol>\n<li>\n<p>We lower the load at <code>v3</code>. This looks backward at the address<br>\n   operand tree and finds that <code>v1</code> is <code>v0</code> plus other things; it has an<br>\n   addressing mode that can add <code>v0</code>'s register and the other things<br>\n   directly; so it calls <code>put_value_in_reg(v0)</code> and uses its register in<br>\n   the amode. At this point, the add producing <code>v1</code> has no references,<br>\n   so it will not (yet) be codegen'd.</p>\n</li>\n<li>\n<p>We lower <code>do_other_thing</code>, which puts <code>v1</code> in a register and uses it.<br>\n   the <code>iadd</code> now has a reference.</p>\n</li>\n<li>\n<p>We reach the <code>iadd</code> and, because it has a reference, lower it. Our<br>\n   machine has the ability to merge a load into an ALU operation.<br>\n   Crucially, <em>we think the load at <code>v0</code> is mergeable</em> because it has<br>\n   only one user, the add at <code>v1</code> (!). So we merge it.</p>\n</li>\n<li>\n<p>We reach the <code>load</code> at <code>v0</code> and because it has been merged into the<br>\n<code>iadd</code>, we do not separately codegen it. The register that holds <code>v0</code><br>\n   is thus never written, and the use of this register by the final load<br>\n   (Step 1) will see an undefined value.</p>\n</li>\n</ol>\n<p>The logic error here is that in the presence of pattern matching that<br>\nlooks through pure ops, we can end up with multiple uses of a value that<br>\noriginally had a single use (because we allow lookthrough of pure ops in<br>\nall cases). In other words, the multiple-use-ness of <code>v1</code> \"passes<br>\nthrough\" in some sense to <code>v0</code>. However, the load sinking logic is not<br>\naware of this.</p>\n<p>The fix, I think, is pretty simple: we disallow an effectful instruction<br>\nfrom sinking/merging if it already has some other use when we look back<br>\nat it.</p>\n<p>If we disallowed lookthrough of <em>any</em> op that had multiple uses, even<br>\npure ones, then we would avoid this scenario; but earlier experiments<br>\nshowed that to have a non-negligible performance impact, so (given that<br>\nwe've worked out the logic above) I think this complexity is worth it.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 218766874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607036361
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2473#pullrequestreview-544535449\">PR Review</a>.</p>",
        "id": 218767480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607036705
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2473\">PR #2473</a>.</p>",
        "id": 218771954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607039812
    }
]