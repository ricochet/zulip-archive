[
    {
        "content": "<p>michaeleisel opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9923\">issue #9923</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Since Cranelift is already experimentally working for rustc, I'd like to discuss if it could work for clang, and if so what would be involved. For instance, does <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift\">rustc_codegen_cranelift</a> turn miri into Cranelift IR, or does it turn LLVM IR into Cranelift IR? From benchmarking my own clang builds, I can see that the backend is a bottleneck and I'd love to see it get faster.</p>\n<p>@bjorn3 </p>\n</blockquote>",
        "id": 492014398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736125924
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9923#issuecomment-2571843016\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9923\">issue #9923</a>:</p>\n<blockquote>\n<p><code>rustc_codegen_cranelift</code> turns miri into CLIF, so unfortunately it wouldn't offer any useful reusable pieces for this quest. In theory it should be possible-ish(*) to translate LLVM IR to CLIF -- it's just a very large project, is all.</p>\n<p>(*) there are some bits of functionality we would have to implement that we don't support today, like: inline assembly (or reject), variadic signatures (or reject), probably other things. Note also that CLIF is at a lower semantic level than LLVM IR specifically wrt aggregate types -- we don't handle structs natively, we expect the producer to lower into primitives and pointers. How much each of these things matters depends on whether you need 100% coverage (e.g. compiling the world or a large project with Clang) or less (compiling your own small code tailor-written with restrictions in mind).</p>\n</blockquote>",
        "id": 492014722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736126178
    },
    {
        "content": "<p>michaeleisel <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9923#issuecomment-2571845999\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9923\">issue #9923</a>:</p>\n<blockquote>\n<p>I wonder how hard it'd be to \"reject\" everything that's not currently supported, such as inline assembly, but in those cases just gracefully fall back to the LLVM backend. If, say, it works for 95% of the files of a large project (assuming all the stuff that's rejected, like inline assembly, is typically rare), and it just falls back to LLVM for the other 5%, then it's providing roughly 95% of the possible value without new additions to CLIF.</p>\n</blockquote>",
        "id": 492015062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736126485
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9923#issuecomment-2571892778\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9923\">issue #9923</a>:</p>\n<blockquote>\n<p><code>rustc_codegen_cranelift</code> has a fairly elegant solution to inline assembly -- as far as I understand, it builds the snippets as separate functions with LLVM then performs ordinary calls. In theory one could do the same for calls to variadic signatures, too (with a custom anonymous helper function generated per callsite or per argument count).</p>\n</blockquote>",
        "id": 492016145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736127295
    },
    {
        "content": "<p>michaeleisel edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9923\">issue #9923</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Since Cranelift is already experimentally working for rustc, I'd like to discuss if it could work for clang, and if so what would be involved. For instance, does <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift\">rustc_codegen_cranelift</a> turn miri into Cranelift IR, or does it turn LLVM IR into Cranelift IR? From benchmarking my own clang builds, I can see that the backend is a bottleneck and I'd love to see it get faster.</p>\n<p>@bjorn3 <br>\n```[tasklist]</p>\n<h3>Tasks</h3>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 492528340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736350163
    },
    {
        "content": "<p>michaeleisel edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9923\">issue #9923</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Since Cranelift is already experimentally working for rustc, I'd like to discuss if it could work for clang, and if so what would be involved. For instance, does <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift\">rustc_codegen_cranelift</a> turn miri into Cranelift IR, or does it turn LLVM IR into Cranelift IR? From benchmarking my own clang builds, I can see that the backend is a bottleneck and I'd love to see it get faster.</p>\n<p>@bjorn3</p>\n</blockquote>",
        "id": 492528382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736350171
    }
]