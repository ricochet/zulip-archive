[
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the enhancement label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">Issue #7665</a>.</p>",
        "id": 406846757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702073761
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the good first issue label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">Issue #7665</a>.</p>",
        "id": 406846759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702073762
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the wasmtime label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">Issue #7665</a>.</p>",
        "id": 406846760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702073762
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>GuestProfiler</code>, as invoked by its Rust API or with the Wasmtime CLI's <code>--profile=guest</code> flag, should try to demangle C++ and Rust function names before emitting them in the generated profile.</p>\n<h4>Benefit</h4>\n<p>It'd be nicer to see names like <code>std::rt::lang_start::{{closure}}::ha2ad3bd729827662</code> than like <code>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17ha2ad3bd729827662E.llvm.16041094552022133104</code>.</p>\n<h4>Implementation</h4>\n<p>There's existing code in Wasmtime for demangling names in stack traces, in <code>crates/wasmtime/src/trap.rs</code>. But that's bypassed by the low-level way that the guest profiler collects stack traces. Instead, the guest profiler gets all the function names up front, in the <code>module_symbols</code> function in <code>crates/wasmtime/src/profiling.rs</code>, and it should demangle the names there.</p>\n<h4>Alternatives</h4>\n<p>There might be support in the <a href=\"https://profiler.firefox.com/\">https://profiler.firefox.com/</a> frontend for demangling names.</p>\n</blockquote>",
        "id": 406846767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702073763
    },
    {
        "content": "<p>high-cloud <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665#issuecomment-1900661568\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<p>Hi @jameysharp, I'd like to pick this up.</p>\n</blockquote>",
        "id": 416805572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705679293
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665#issuecomment-1900849372\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<p>Awesome!</p>\n<p>After I wrote this I've noticed that some people are already getting demangled names in guest-profiler output, which is confusing me. That makes me think that there may have been a Rust toolchain change to how symbol names are emitted in WebAssembly target builds. So it might not be necessary to do this if toolchain developers are doing it for us. But I haven't looked into that yet to find out if this is a trend or something.</p>\n<p>So there are two ways you could help here:</p>\n<ul>\n<li>One is to go ahead and implement the change I described. At worst, it's convenient when dealing with wasm modules built by older toolchains, even if new ones make it unnecessary.</li>\n<li>The other is to look into what Rust, Clang, LLVM, etc are doing and see whether they're changing how they emit symbol names. It would be nice to know how important this change is for usability.</li>\n</ul>\n<p>I'd appreciate your help with either or both of these things!</p>\n</blockquote>",
        "id": 416836154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705687022
    },
    {
        "content": "<p>high-cloud <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665#issuecomment-1908375582\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<p>Hi @jameysharp , I have finished the first thing you memtioned. Can you help review the pr?</p>\n</blockquote>",
        "id": 417670368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706110491
    },
    {
        "content": "<p>casimiro <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665#issuecomment-1952242059\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm seeing an unexpected behaviour that seems related to this issue.</p>\n<p>After upgrading from <code>14.0.3</code> to <code>15.0.0</code> I've noticed that <code>wasm_trap_message</code> returns the backtrace with mangled symbols:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>: <span class=\"mh\">0x2dbfa</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"mh\">0x2d9e5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">rust_panic</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"mh\">0x2d918</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN3std9panicking20rust_panic_with_hook17h9c783872fdb901ccE</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"mh\">0x13149</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN3std9panicking11begin_panic28_</span><span class=\"cp\">$u7b$$u7b$closure$u7d$$u7d$</span><span class=\"mi\">17</span><span class=\"n\">h4ffa6a1c8cae16aaE</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span>: <span class=\"mh\">0x1310c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17ha3be793022377ab5E</span>\n<span class=\"w\">    </span><span class=\"mi\">5</span>: <span class=\"mh\">0x13180</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN3std9panicking11begin_panic17hc5e246abf4e1b013E</span>\n<span class=\"w\">    </span><span class=\"mi\">6</span>: <span class=\"mh\">0xd47b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN9hostcalls5types9test_http8TestHttp10exec_tests17he514b18df9efbbb3E</span>\n<span class=\"w\">    </span><span class=\"mi\">7</span>: <span class=\"mh\">0xc7db</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN9hostcalls6filter99_</span><span class=\"cp\">$LT$impl$u20$proxy_wasm</span><span class=\"o\">..</span><span class=\"n\">traits</span><span class=\"o\">..</span><span class=\"n\">HttpContext</span><span class=\"cp\">$u20$for$u20$hostcalls</span><span class=\"o\">..</span><span class=\"n\">types</span><span class=\"o\">..</span><span class=\"n\">test_http</span><span class=\"o\">..</span><span class=\"n\">TestHttp</span><span class=\"cp\">$GT$</span><span class=\"mi\">23</span><span class=\"n\">on_http_request_headers17h457bb152f4d611a0E</span>\n<span class=\"w\">    </span><span class=\"mi\">8</span>: <span class=\"mh\">0x1f3d5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN10proxy_wasm10dispatcher10Dispatcher23on_http_request_headers17hcfdb13beb69bb128E</span>\n<span class=\"w\">    </span><span class=\"mi\">9</span>: <span class=\"mh\">0x25775</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">proxy_on_request_headers</span>\n<span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span>\n</code></pre></div>\n<p>Before the upgrade <code>wasm_trap_message</code> returned the stack trace like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>: <span class=\"mh\">0x2dbfa</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"mh\">0x2d9e5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">rust_panic</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"mh\">0x2d918</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">rust_panic_with_hook</span>::<span class=\"n\">h9c783872fdb901cc</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"mh\">0x13149</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">begin_panic</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h4ffa6a1c8cae16aa</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span>: <span class=\"mh\">0x1310c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_end_short_backtrace</span>::<span class=\"n\">ha3be793022377ab5</span>\n<span class=\"w\">    </span><span class=\"mi\">5</span>: <span class=\"mh\">0x13180</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">begin_panic</span>::<span class=\"n\">hc5e246abf4e1b013</span>\n<span class=\"w\">    </span><span class=\"mi\">6</span>: <span class=\"mh\">0xd47b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">hostcalls</span>::<span class=\"n\">types</span>::<span class=\"n\">test_http</span>::<span class=\"n\">TestHttp</span>::<span class=\"n\">exec_tests</span>::<span class=\"n\">he514b18df9efbbb3</span>\n<span class=\"w\">    </span><span class=\"mi\">7</span>: <span class=\"mh\">0xc7db</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">hostcalls</span>::<span class=\"n\">filter</span>::<span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">proxy_wasm</span>::<span class=\"n\">traits</span>::<span class=\"n\">HttpContext</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">hostcalls</span>::<span class=\"n\">types</span>::<span class=\"n\">test_http</span>::<span class=\"n\">TestHttp</span><span class=\"o\">&gt;</span>::<span class=\"n\">on_http_request_headers</span>::<span class=\"n\">h457bb152f4d611a0</span>\n<span class=\"w\">    </span><span class=\"mi\">8</span>: <span class=\"mh\">0x1f3d5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">proxy_wasm</span>::<span class=\"n\">dispatcher</span>::<span class=\"n\">Dispatcher</span>::<span class=\"n\">on_http_request_headers</span>::<span class=\"n\">hcfdb13beb69bb128</span>\n<span class=\"w\">    </span><span class=\"mi\">9</span>: <span class=\"mh\">0x25775</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">proxy_on_request_headers</span>\n<span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span>\n</code></pre></div>\n<p>Should I open a new issue for this case?<br>\n</p>\n</blockquote>",
        "id": 422212657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708341760
    },
    {
        "content": "<p>casimiro edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665#issuecomment-1952242059\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm seeing an unexpected behaviour that seems related to this issue.</p>\n<p>After upgrading from <code>14.0.3</code> to <code>15.0.0</code> I've noticed that <code>wasm_trap_message</code>, part of Wasmtime C API, returns the backtrace with mangled symbols:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>: <span class=\"mh\">0x2dbfa</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"mh\">0x2d9e5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">rust_panic</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"mh\">0x2d918</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN3std9panicking20rust_panic_with_hook17h9c783872fdb901ccE</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"mh\">0x13149</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN3std9panicking11begin_panic28_</span><span class=\"cp\">$u7b$$u7b$closure$u7d$$u7d$</span><span class=\"mi\">17</span><span class=\"n\">h4ffa6a1c8cae16aaE</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span>: <span class=\"mh\">0x1310c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17ha3be793022377ab5E</span>\n<span class=\"w\">    </span><span class=\"mi\">5</span>: <span class=\"mh\">0x13180</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN3std9panicking11begin_panic17hc5e246abf4e1b013E</span>\n<span class=\"w\">    </span><span class=\"mi\">6</span>: <span class=\"mh\">0xd47b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN9hostcalls5types9test_http8TestHttp10exec_tests17he514b18df9efbbb3E</span>\n<span class=\"w\">    </span><span class=\"mi\">7</span>: <span class=\"mh\">0xc7db</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN9hostcalls6filter99_</span><span class=\"cp\">$LT$impl$u20$proxy_wasm</span><span class=\"o\">..</span><span class=\"n\">traits</span><span class=\"o\">..</span><span class=\"n\">HttpContext</span><span class=\"cp\">$u20$for$u20$hostcalls</span><span class=\"o\">..</span><span class=\"n\">types</span><span class=\"o\">..</span><span class=\"n\">test_http</span><span class=\"o\">..</span><span class=\"n\">TestHttp</span><span class=\"cp\">$GT$</span><span class=\"mi\">23</span><span class=\"n\">on_http_request_headers17h457bb152f4d611a0E</span>\n<span class=\"w\">    </span><span class=\"mi\">8</span>: <span class=\"mh\">0x1f3d5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_ZN10proxy_wasm10dispatcher10Dispatcher23on_http_request_headers17hcfdb13beb69bb128E</span>\n<span class=\"w\">    </span><span class=\"mi\">9</span>: <span class=\"mh\">0x25775</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">proxy_on_request_headers</span>\n<span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span>\n</code></pre></div>\n<p>Before the upgrade <code>wasm_trap_message</code> returned the stack trace like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>: <span class=\"mh\">0x2dbfa</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"mh\">0x2d9e5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">rust_panic</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"mh\">0x2d918</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">rust_panic_with_hook</span>::<span class=\"n\">h9c783872fdb901cc</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"mh\">0x13149</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">begin_panic</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h4ffa6a1c8cae16aa</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span>: <span class=\"mh\">0x1310c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_end_short_backtrace</span>::<span class=\"n\">ha3be793022377ab5</span>\n<span class=\"w\">    </span><span class=\"mi\">5</span>: <span class=\"mh\">0x13180</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">begin_panic</span>::<span class=\"n\">hc5e246abf4e1b013</span>\n<span class=\"w\">    </span><span class=\"mi\">6</span>: <span class=\"mh\">0xd47b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">hostcalls</span>::<span class=\"n\">types</span>::<span class=\"n\">test_http</span>::<span class=\"n\">TestHttp</span>::<span class=\"n\">exec_tests</span>::<span class=\"n\">he514b18df9efbbb3</span>\n<span class=\"w\">    </span><span class=\"mi\">7</span>: <span class=\"mh\">0xc7db</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">hostcalls</span>::<span class=\"n\">filter</span>::<span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">proxy_wasm</span>::<span class=\"n\">traits</span>::<span class=\"n\">HttpContext</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">hostcalls</span>::<span class=\"n\">types</span>::<span class=\"n\">test_http</span>::<span class=\"n\">TestHttp</span><span class=\"o\">&gt;</span>::<span class=\"n\">on_http_request_headers</span>::<span class=\"n\">h457bb152f4d611a0</span>\n<span class=\"w\">    </span><span class=\"mi\">8</span>: <span class=\"mh\">0x1f3d5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">proxy_wasm</span>::<span class=\"n\">dispatcher</span>::<span class=\"n\">Dispatcher</span>::<span class=\"n\">on_http_request_headers</span>::<span class=\"n\">hcfdb13beb69bb128</span>\n<span class=\"w\">    </span><span class=\"mi\">9</span>: <span class=\"mh\">0x25775</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">proxy_on_request_headers</span>\n<span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span>\n</code></pre></div>\n<p>Should I open a new issue for this case?<br>\n</p>\n</blockquote>",
        "id": 422231052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708348701
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665#issuecomment-1954493906\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<p>@casimiro yes if you can open a new issue for that, that'd be appreciated!  (this one's about the guest profiler not the C API).</p>\n<p>That being said around that time we moved the demangling bits behind a Cargo feature and I suspect we forgot to turn that on for the C API, so I proposed <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7962\">https://github.com/bytecodealliance/wasmtime/pull/7962</a> to enable it by default again. </p>\n</blockquote>",
        "id": 422445188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708443728
    },
    {
        "content": "<p>sudoHackIn <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665#issuecomment-2342051417\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<p>Hi, i am currently reviewing easy issues and found this one. Seems like, that this issue is already implemented? Should it be closed in that case?</p>\n</blockquote>",
        "id": 469218698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726004143
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>GuestProfiler</code>, as invoked by its Rust API or with the Wasmtime CLI's <code>--profile=guest</code> flag, should try to demangle C++ and Rust function names before emitting them in the generated profile.</p>\n<h4>Benefit</h4>\n<p>It'd be nicer to see names like <code>std::rt::lang_start::{{closure}}::ha2ad3bd729827662</code> than like <code>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17ha2ad3bd729827662E.llvm.16041094552022133104</code>.</p>\n<h4>Implementation</h4>\n<p>There's existing code in Wasmtime for demangling names in stack traces, in <code>crates/wasmtime/src/trap.rs</code>. But that's bypassed by the low-level way that the guest profiler collects stack traces. Instead, the guest profiler gets all the function names up front, in the <code>module_symbols</code> function in <code>crates/wasmtime/src/profiling.rs</code>, and it should demangle the names there.</p>\n<h4>Alternatives</h4>\n<p>There might be support in the <a href=\"https://profiler.firefox.com/\">https://profiler.firefox.com/</a> frontend for demangling names.</p>\n</blockquote>",
        "id": 469430920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726066929
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665#issuecomment-2343930811\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7665\">issue #7665</a>:</p>\n<blockquote>\n<p>I believe so yeah, thanks for the ping!</p>\n</blockquote>",
        "id": 469430923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726066930
    }
]