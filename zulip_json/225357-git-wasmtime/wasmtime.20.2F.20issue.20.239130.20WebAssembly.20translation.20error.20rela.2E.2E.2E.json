[
    {
        "content": "<p><a href=\"https://github.com/CryZe\">CryZe</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">Issue #9130</a>.</p>",
        "id": 462387531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723655611
    },
    {
        "content": "<p>CryZe opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">issue #9130</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/user-attachments/files/16616175/furious_fish_auto_splitter.zip\">furious_fish_auto_splitter.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"fm\">include_bytes!</span><span class=\"p\">(</span><span class=\"s\">\"furious_fish_auto_splitter.wasm\"</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"23.0.2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default-features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"cranelift\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"runtime\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>I'm expecting the wasm module to be parsed.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">translation</span><span class=\"w\"> </span><span class=\"n\">error</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mi\">44300</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">zero</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"n\">expected</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 23.0.2</p>\n<p>Operating system: Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>I did by now debug this issue far enough and it turns out that the <code>gc</code> feature needs to be active, for the module to be parsed correctly.</p>\n<p>This to me seems surprising and wasn't ever needed for a wasm module that got compiled by Rust, which does not make use of any GC related feature. I'm guessing vtable pointers use function references, and the parsing infrastructure for those accidentally got gated with the GC proposal because of the \"typed function references\" proposal. If this is fully intended, this can be closed right away.<br>\n</p>\n</blockquote>",
        "id": 462387532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723655612
    },
    {
        "content": "<p>CryZe edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">issue #9130</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/user-attachments/files/16616175/furious_fish_auto_splitter.zip\">furious_fish_auto_splitter.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"fm\">include_bytes!</span><span class=\"p\">(</span><span class=\"s\">\"furious_fish_auto_splitter.wasm\"</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"23.0.2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default-features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"cranelift\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"runtime\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>I'm expecting the wasm module to be parsed.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">translation</span><span class=\"w\"> </span><span class=\"n\">error</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mi\">44300</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">zero</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"n\">expected</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 23.0.2</p>\n<p>Operating system: Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>I did by now debug this issue far enough and it turns out that the <code>gc</code> feature needs to be active for the module to be parsed correctly.</p>\n<p>This to me seems surprising and wasn't ever needed for a wasm module that got compiled by Rust, which does not make use of any GC related feature. I'm guessing vtable pointers use function references, and the parsing infrastructure for those accidentally got gated with the GC proposal because of the \"typed function references\" proposal. If this is fully intended, this can be closed right away.<br>\n</p>\n</blockquote>",
        "id": 462387675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723655671
    },
    {
        "content": "<p>CryZe edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">issue #9130</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/user-attachments/files/16616175/furious_fish_auto_splitter.zip\">furious_fish_auto_splitter.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"fm\">include_bytes!</span><span class=\"p\">(</span><span class=\"s\">\"furious_fish_auto_splitter.wasm\"</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"23.0.2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default-features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"cranelift\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"runtime\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>I'm expecting the wasm module to be parsed.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">translation</span><span class=\"w\"> </span><span class=\"n\">error</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mi\">44300</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">zero</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"n\">expected</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 23.0.2</p>\n<p>Operating system: Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>I did by now debug this issue far enough and it turns out that the <code>gc</code> feature needs to be active for the module to be parsed correctly.</p>\n<p>This to me seems surprising and wasn't ever needed for a wasm module that got compiled by Rust, which does not make use of any GC related feature. I'm guessing vtables make use of function references, and the parsing infrastructure for those accidentally got gated with the GC proposal because of the \"typed function references\" proposal. If this is fully intended, this can be closed right away.<br>\n</p>\n</blockquote>",
        "id": 462387741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723655703
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130#issuecomment-2289516086\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">issue #9130</a>:</p>\n<blockquote>\n<p>Ah yes as you've discovered this is due to the fact that the way you're depending on the <code>wasmtime</code> crate disables the <code>gc</code> feature. That in turn auto-disables the <code>reference-types</code> WebAssembly proposal which is what's needed here. The module itself isn't using GC or anything like that, but it has:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"mh\">0xad06</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">call_indirect</span><span class=\"w\"> </span><span class=\"n\">type_index</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">table_index</span><span class=\"p\">:</span><span class=\"mi\">0</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">00</span>\n</code></pre></div>\n<p>that encoding of <code>call_indirect</code> was not valid before the <code>reference_types</code> proposal, notably the overlong encoding of <code>table_index: 0</code> as <code>80 80 80 80 00</code>. With the <code>reference-types</code> feature disabled the instruction cannot be parsed. With <code>reference-types</code> enabled, which enabling the <code>gc</code> crate feature does automatically, then the module can be parsed.</p>\n</blockquote>",
        "id": 462396188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723659340
    },
    {
        "content": "<p>CryZe closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">issue #9130</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/user-attachments/files/16616175/furious_fish_auto_splitter.zip\">furious_fish_auto_splitter.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"fm\">include_bytes!</span><span class=\"p\">(</span><span class=\"s\">\"furious_fish_auto_splitter.wasm\"</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"23.0.2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default-features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"cranelift\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"runtime\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>I'm expecting the wasm module to be parsed.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">translation</span><span class=\"w\"> </span><span class=\"n\">error</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mi\">44300</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">zero</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"n\">expected</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 23.0.2</p>\n<p>Operating system: Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>I did by now debug this issue far enough and it turns out that the <code>gc</code> feature needs to be active for the module to be parsed correctly.</p>\n<p>This to me seems surprising and wasn't ever needed for a wasm module that got compiled by Rust, which does not make use of any GC related feature. I'm guessing vtables make use of function references, and the parsing infrastructure for those accidentally got gated with the GC proposal because of the \"typed function references\" proposal. If this is fully intended, this can be closed right away.<br>\n</p>\n</blockquote>",
        "id": 462397201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723659822
    },
    {
        "content": "<p>CryZe <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130#issuecomment-2289547391\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">issue #9130</a>:</p>\n<blockquote>\n<p>Ah and that's because I use the nightly Rust compiler with the update to LLVM 19, which enables <code>reference-types</code> by default. Though I was not aware that it actually had some sort of impact. Good to know. Thank you for looking into it.</p>\n</blockquote>",
        "id": 462397203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723659822
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130#issuecomment-2307318840\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">issue #9130</a>:</p>\n<blockquote>\n<p>In case anyone comes across this in the future, Wasmtime 25 will include <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9162\">https://github.com/bytecodealliance/wasmtime/pull/9162</a> which means that this issue should no longer come up or be relevant. Disabling the <code>gc</code> feature of Wasmtime will preserve the ability of Wasmtime to read LLVM 19+ modules, and only use of <code>externref</code> in wasm modules (and other gc types) will be gated when the Wasmtime compile-time-feature of <code>gc</code> is disabled.</p>\n</blockquote>",
        "id": 464672369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724426762
    },
    {
        "content": "<p>brooksmtownsend <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130#issuecomment-2307335484\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">issue #9130</a>:</p>\n<blockquote>\n<p>@alexcrichton perfect timing! I just came across this issue this AM looking to enable running wasm32-wasip2 components built via <code>cargo +nightly</code> and I was looking to enable the <code>gc</code> feature to enable it <a href=\"https://github.com/wasmCloud/wasmCloud/pull/2848\">https://github.com/wasmCloud/wasmCloud/pull/2848</a>.</p>\n<p>So in wasmtime 25 I won't need the <code>gc</code> feature?</p>\n</blockquote>",
        "id": 464675280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724427349
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130#issuecomment-2307348947\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9130\">issue #9130</a>:</p>\n<blockquote>\n<p>Correct!</p>\n</blockquote>",
        "id": 464676623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724427832
    }
]