[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734\">issue #4734</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Compile the examples with <code>clif-util compile --target=x86_64</code>.</p>\n<h3>Expected Results</h3>\n<p>The examples should generate code.</p>\n<h3>Actual Results</h3>\n<p>There's a panic in the x64 code generator, as these case for <code>i64x2</code> input is not implemented for <code>snarrow</code> and <code>unarrow</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">33</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 7d9a359f51fca167dce488a1039dded7096c7ac5</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 294138927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660845195
    },
    {
        "content": "<p>elliottt labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734\">issue #4734</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Compile the examples with <code>clif-util compile --target=x86_64</code>.</p>\n<h3>Expected Results</h3>\n<p>The examples should generate code.</p>\n<h3>Actual Results</h3>\n<p>There's a panic in the x64 code generator, as these case for <code>i64x2</code> input is not implemented for <code>snarrow</code> and <code>unarrow</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">33</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 7d9a359f51fca167dce488a1039dded7096c7ac5</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 294138928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660845195
    },
    {
        "content": "<p>elliottt labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734\">issue #4734</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Compile the examples with <code>clif-util compile --target=x86_64</code>.</p>\n<h3>Expected Results</h3>\n<p>The examples should generate code.</p>\n<h3>Actual Results</h3>\n<p>There's a panic in the x64 code generator, as these case for <code>i64x2</code> input is not implemented for <code>snarrow</code> and <code>unarrow</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">33</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 7d9a359f51fca167dce488a1039dded7096c7ac5</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 294138929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660845195
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734#issuecomment-1220164379\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734\">issue #4734</a>:</p>\n<blockquote>\n<p>Is this because those types are not used by the WebAssembly SIMD instructions for narrowing?</p>\n</blockquote>",
        "id": 294194718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660875365
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734#issuecomment-1220169324\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734\">issue #4734</a>:</p>\n<blockquote>\n<p>Yep, it appears the ops are only used in particular combinations by <code>cranelift-wasm</code> and those are the combinations the x64 backend supports. That's OK for now (we're keeping status quo as we migrate lowerings) but we definitely want to support the general case in due time, I think.</p>\n</blockquote>",
        "id": 294195083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660875803
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734\">issue #4734</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Compile the examples with <code>clif-util compile --target=x86_64</code>.</p>\n<h3>Expected Results</h3>\n<p>The examples should generate code.</p>\n<h3>Actual Results</h3>\n<p>There's a panic in the x64 code generator, as these case for <code>i64x2</code> input is not implemented for <code>snarrow</code> and <code>unarrow</code>.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1/cranelift/codegen/src/isa/x64/lower.rs#L619\">https://github.com/bytecodealliance/wasmtime/blob/ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1/cranelift/codegen/src/isa/x64/lower.rs#L619</a></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 7d9a359f51fca167dce488a1039dded7096c7ac5</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 295509752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661546740
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734\">issue #4734</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Compile the examples with <code>clif-util compile --target=x86_64</code>.</p>\n<h3>Expected Results</h3>\n<p>The examples should generate code.</p>\n<h3>Actual Results</h3>\n<p>There's a panic in the x64 code generator, as these case for <code>i64x2</code> input is not implemented for <code>snarrow</code> and <code>unarrow</code>.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1/cranelift/codegen/src/isa/x64/lower.rs#L619\">https://github.com/bytecodealliance/wasmtime/blob/ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1/cranelift/codegen/src/isa/x64/lower.rs#L619</a></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 295509891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661546787
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734\">issue #4734</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Compile the examples with <code>clif-util compile --target=x86_64</code>.</p>\n<h3>Expected Results</h3>\n<p>The examples should generate code.</p>\n<h3>Actual Results</h3>\n<p>There's a panic in the x64 code generator, as these case for <code>i64x2</code> input is not implemented for <code>snarrow</code> and <code>unarrow</code>. The following program will compile successfully, as there's a special case for the combination of <code>snarrow</code> and <code>fcvt_to_sint_sat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">f64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_to_sint_sat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"mh\">0x00</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1/cranelift/codegen/src/isa/x64/lower.isle#L3275-L3299\">https://github.com/bytecodealliance/wasmtime/blob/ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1/cranelift/codegen/src/isa/x64/lower.isle#L3275-L3299</a></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 295510492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661547057
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4734\">issue #4734</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unarrow</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Compile the examples with <code>clif-util compile --target=x86_64</code>.</p>\n<h3>Expected Results</h3>\n<p>The examples should generate code.</p>\n<h3>Actual Results</h3>\n<p>There's a panic in the x64 code generator, as these case for <code>i64x2</code> input is not implemented for <code>snarrow</code> and <code>unarrow</code>. The following program will compile successfully, as there's a special case for the combination of <code>snarrow</code> and <code>fcvt_to_sint_sat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f3</span><span class=\"p\">(</span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">f64x2</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_to_sint_sat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"mh\">0x00</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1/cranelift/codegen/src/isa/x64/lower.isle#L3275-L3299\">https://github.com/bytecodealliance/wasmtime/blob/ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1/cranelift/codegen/src/isa/x64/lower.isle#L3275-L3299</a></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: ca6d648e37c80cb13e5027cc746ec0d2e4bd64d1</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 300809669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664197465
    }
]