[
    {
        "content": "<p>eduardomourar <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1513413631\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>@pchickey and @brendandburns , could you review this PR, please? Ideally, we should merge this prior to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6091\">https://github.com/bytecodealliance/wasmtime/pull/6091</a>.</p>\n</blockquote>",
        "id": 350821922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681833323
    },
    {
        "content": "<p>brendandburns <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1513511736\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>I think it is probably worth splitting this into two PRs, one containing all of the common implementations and one with the refactors to the HTTP implementation.</p>\n<p>Using the common code for things like streams seems reasonable.</p>\n<p>I don't really see the point of the HTTP refactors, they seem to add a bunch of complexity without really reducing the amount of code that is required.</p>\n</blockquote>",
        "id": 350839902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681837465
    },
    {
        "content": "<p>eduardomourar <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1513576430\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't really see the point of the HTTP refactors, they seem to add a bunch of complexity without really reducing the amount of code that is required.</p>\n</blockquote>\n<p>This is important to integrate with preview2, but also to have less code change whenever the resources will be auto-generated by wit-bindgen. We will be a step further in that direction instead of diverging more and more from the expected pattern.</p>\n</blockquote>",
        "id": 350849709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681840309
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1513581110\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>This looks to me like a reasonable path to align with some of the changes coming down the pipe from preview2-prototyping. It doesn't make those changes totally drop-in, but using the streams and table abstraction does take us part of the way there.</p>\n<p>I agree that, without that context, it looks like added complexity without reducing the amount of code required.</p>\n<p>So really the question is whether adding this now is appropriate, or if we try to land Brendan's other patches first. Unfortunately I am still deep in the preview 2 filesystem work over in p2-p and I haven't context switched back to HTTP to review Brendan's PRs yet. <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6228\">https://github.com/bytecodealliance/wasmtime/pull/6228</a> is pretty straightforward but <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6091\">https://github.com/bytecodealliance/wasmtime/pull/6091</a> has been sitting for longer and I haven't dug into it yet.</p>\n</blockquote>",
        "id": 350850701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681840573
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1513619984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>I'm going to list @pchickey as the reviewer for this since I think he's got this in his wheelhouse</p>\n</blockquote>",
        "id": 350857378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681842469
    },
    {
        "content": "<p>eduardomourar <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1513708997\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>@pchickey , I can understand if we want to first merge the other PRs. After they are, I will integrate the changes back here then. </p>\n</blockquote>",
        "id": 350872199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681847182
    },
    {
        "content": "<p>brendandburns <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1515283475\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>Just for my own understanding, I don't think that anything in <code>http_impl.rs</code> changes with the move to preview 2 does it? That struct already implements the <code>Host</code> trait that is defined by the <code>wasi-http</code> with bindings. Why does switching to Table make it more compatible? I think I'm missing something.</p>\n</blockquote>",
        "id": 351139817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681933443
    },
    {
        "content": "<p>eduardomourar <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1515347473\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>If you look into this example <a href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/a2aa73bcc3bd2bfff9921060449807816d9f64af/host/src/network.rs\">here</a> and other parts of the host implementation, you will see that the table abstraction is being assumed to be available and it is the default place to store the id for each handle and associated resource instance. By doing the same for the HTTP module in this PR, we would only hold specific data in its context (right now there is none) and rely on the common context instead. This simplification is not that evident here because I copied the shared code to avoid creating a dependency to the preview2-prototyping repo. </p>\n</blockquote>",
        "id": 351148340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681936632
    },
    {
        "content": "<p>eduardomourar edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1515347473\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>I would expect the <a href=\"http://http_impl.rs\">http_impl.rs</a> to be modified, yes. If you look into this example <a href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/a2aa73bcc3bd2bfff9921060449807816d9f64af/host/src/network.rs\">here</a> and other parts of the host implementation, you will see that the table abstraction is being assumed to be available and it is the default place to store the id for each handle and associated resource instance. By doing the same for the HTTP module in this PR, we would only hold specific data in its context (right now there is none) and rely on the common context instead. This simplification is not that evident here because I copied the shared code to avoid creating a dependency to the preview2-prototyping repo. </p>\n</blockquote>",
        "id": 351149340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681937018
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1515393070\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>Another wrinkle is that we'll be spreading this implementation across multiple crates. <code>wasi-common</code> will define the <code>Table</code>, a <code>trait WasiInputStream</code> , and then hook up all the <code>input-stream</code> methods in the <code>io.streams</code> wit to lookup in the table and downcast it to a <code>Box&lt;dyn WasiInputStream&gt;</code>, and then invoke the method.</p>\n<p><code>wasmtime-wasi-http</code>'s role will be to define <code>struct HttpBodyInputStream( {whatever the right tokio/hyper primitives here} )</code>, <code>impl wasi_common::WasiInputStream for HttpBodyInputStream</code>, and then creation of a new stream will be to cast it to a Box&lt;dyn WasiInputStream&gt; and stick it into a table, which is shared with the <code>wasi_common::WasiCtx</code>.</p>\n<p>We may end up needing to pull some additional tricks to get wasi-common and wasmtime-wasi-http to each access the table via &amp;mut Table instead of using an Arc&lt;Mutex&lt;Table&gt;&gt; to handle sharing, but that is just an optimization we can do once the basics work.</p>\n</blockquote>",
        "id": 351154485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681939037
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1515393070\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>Another wrinkle is that we'll be spreading this implementation across multiple crates. <code>wasi-common</code> will define the <code>Table</code>, a <code>trait WasiInputStream</code> , and then hook up all the <code>input-stream</code> methods in the <code>io.streams</code> wit to lookup in the table and downcast it to a <code>Box&lt;dyn WasiInputStream&gt;</code>, and then invoke the method.</p>\n<p><code>wasmtime-wasi-http</code>'s role will be to define <code>struct HttpBodyInputStream( {whatever the right tokio/hyper primitives here} )</code>, <code>impl wasi_common::WasiInputStream for HttpBodyInputStream</code>, and then creation of a new stream will be to cast it to a Box&lt;dyn WasiInputStream&gt; and stick it into a table, which is shared with the <code>wasi_common::WasiCtx</code>.</p>\n<p>We may end up needing to pull some additional tricks to get wasi-common and wasmtime-wasi-http to each access the table via <code>&amp;mut Table</code> instead of using an <code>Arc&lt;Mutex&lt;Table&gt;&gt;</code> to handle sharing, but that is just an optimization we can do once the basics work.</p>\n</blockquote>",
        "id": 351154536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681939056
    },
    {
        "content": "<p>brendandburns <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1515466614\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>It seems like much of the refactor is unrelated to streams, I get that consistent stream handling makes sense, but doesn't seem like using a <code>Table</code> to store the request/response objects is inherently better than having a struct with multiple hashtables inside of it. Indeed it seems to complicate the implementation instead.</p>\n<p>Moreover, given that there are multiple other wasi-modules in wasmtime that are even further from being component-linker compatible, I'd rather we focused energy on getting the HTTP implementation correct in terms of user-facing surface area and wait for preview2 to arrive in wasmtime before we worry about these kind of changes.</p>\n</blockquote>",
        "id": 351164102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681943620
    },
    {
        "content": "<p>eduardomourar <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1515530259\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>The problem is that currently we cannot use a Wasm component (+ preview2) in different runtimes (in my case wasmtime, Node.js and browser). I guess other people/companies are facing the same issue.</p>\n</blockquote>",
        "id": 351172339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681949107
    },
    {
        "content": "<p>eduardomourar edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1515530259\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>The problem is that currently we cannot use a Wasm component (+ preview2) in different runtimes (in my case wasmtime, Node.js and browser). I guess other people/companies are facing the same issue.</p>\n<p>The way I see, we have two options:</p>\n<ul>\n<li>we go forward with this PR (after the pending PRs are merged, obviously) by bringing preview2 partially here;</li>\n<li>or we move all this logic to the preview2-prototyping repo;</li>\n</ul>\n<p>I actually preferred the second option, which was the one decided originally. Although, you can take this PR as a compromise where we will temporarily maintain those in two places in order to bring the learnings upstream.</p>\n</blockquote>",
        "id": 351172355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681949123
    },
    {
        "content": "<p>eduardomourar edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1515530259\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>The problem is that currently we cannot use a Wasm component (+ preview2) in different runtimes (in my case wasmtime, Node.js and browser). I guess other people/companies are facing the same issue.</p>\n<p>The way I see, we have two options:</p>\n<ul>\n<li>we go forward with this PR (after the pending PRs are merged, obviously) by bringing preview2 partially here;</li>\n<li>or we move all this logic to the preview2-prototyping repo;</li>\n</ul>\n<p>I actually preferred the second option, which was the one decided originally. Although, you can take this PR as a compromise where we will temporarily maintain those in two places in order to bring the learnings upstream and they will eventually converge.</p>\n</blockquote>",
        "id": 351406157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682016850
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1678146983\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>@eduardomourar We're eager to get this landed and then start working on the next steps incrementally. Can you please get this passing based on <code>main</code>, i.e. ignoring <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6836\">https://github.com/bytecodealliance/wasmtime/pull/6836</a> for now? Alex has limited availability this week, and we don't know precisely when he'll be able to get that fixed up and landed,</p>\n</blockquote>",
        "id": 384919214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692051026
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1678146983\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>@eduardomourar We're eager to get this landed and then start working on the next steps incrementally. Can you please get this passing based on <code>main</code>, i.e. ignoring <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6836\">https://github.com/bytecodealliance/wasmtime/pull/6836</a> for now? Alex has limited availability this week, and we don't know precisely when he'll be able to get that fixed up and landed, so we don't want to wait for it.</p>\n</blockquote>",
        "id": 384919269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692051052
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195#issuecomment-1681469783\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6195\">issue #6195</a>:</p>\n<blockquote>\n<p>Sorry to hijack your git history @eduardomourar but I want to get this landed while you are asleep!</p>\n</blockquote>",
        "id": 385573608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692235367
    }
]