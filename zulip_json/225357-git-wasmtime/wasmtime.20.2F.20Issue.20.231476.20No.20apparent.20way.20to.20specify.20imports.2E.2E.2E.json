[
    {
        "content": "<p>autodidaddict opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1476\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1476\">Issue #1476</a>:</p>\n<blockquote>\n<p>Looking at the <code>create_wasi_instance</code>  function, it doesn't accept a list of imports. While the main use case for WASI might be to access the low-level syscalls supported by the interface, we should still be able to build WASI modules that import from the runtime host. The ability to specify imports for a WASI module is a feature that's available on other runtimes.</p>\n<p>Is there a way using existing public functions to configure imports for a WASI module?</p>\n</blockquote>",
        "id": 193117278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586217313
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1476#issuecomment-610097242\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1476#issuecomment-610097242\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1476\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1476\">Issue #1476</a>:</p>\n<blockquote>\n<p>Accidental transfer of this issue, sorry about that.</p>\n<p>I'm going to close this as fixed with the latest API.  It is now quite simple to define a WASI implementation with the <code>Linker</code> and have host functions that either provide non-WASI imports or override WASI imports with customized implementation.</p>\n</blockquote>",
        "id": 193117472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586217512
    },
    {
        "content": "<p>peterhuene closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1476\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1476\">Issue #1476</a>:</p>\n<blockquote>\n<p>Looking at the <code>create_wasi_instance</code>  function, it doesn't accept a list of imports. While the main use case for WASI might be to access the low-level syscalls supported by the interface, we should still be able to build WASI modules that import from the runtime host. The ability to specify imports for a WASI module is a feature that's available on other runtimes.</p>\n<p>Is there a way using existing public functions to configure imports for a WASI module?</p>\n</blockquote>",
        "id": 193117473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586217513
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1476#issuecomment-610097242\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1476#issuecomment-610097242\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1476\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1476\">Issue #1476</a>:</p>\n<blockquote>\n<p>Accidental transfer of this issue, sorry about that.</p>\n<p>I'm going to close this as fixed with the latest API.  It is now quite simple to define a WASI implementation with the <code>Linker</code> and have host functions that either provide non-WASI imports or override WASI imports with customized implementation.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs\">linking example</a> for an idea of how that might work.  You would link in the WASI instance or define additional host functions with <code>Linker::define</code>.</p>\n<p>Please reopen if you feel this issue was closed in error.</p>\n</blockquote>",
        "id": 193117568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586217611
    }
]