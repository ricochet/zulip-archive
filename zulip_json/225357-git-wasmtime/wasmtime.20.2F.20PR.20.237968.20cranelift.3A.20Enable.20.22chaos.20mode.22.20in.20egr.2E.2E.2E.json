[
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968\">PR #7968</a>.</p>",
        "id": 422506366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708465411
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968\">PR #7968</a> from <code>jameysharp:egraph-chaos</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>First of all, thread a \"chaos mode\" control-plane into Context::optimize and from there into EgraphPass, OptimizeCtx, and Elaborator.</p>\n<p>In this commit we use the control-plane to change the following behaviors in ways which shouldn't cause incorrect results:</p>\n<ul>\n<li>Dominator-tree block traversal order for both the rule application and elaboration passes</li>\n<li>Order of evaluating optimization alternatives from <code>simplify</code></li>\n<li>Choose worst values instead of best in each eclass</li>\n</ul>\n<p>@lpereira and I wrote this together.</p>\n</blockquote>",
        "id": 422506367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708465412
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968\">PR #7968</a>.</p>",
        "id": 422506368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708465412
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968\">PR #7968</a>.</p>",
        "id": 422506369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708465412
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968\">PR #7968</a>.</p>",
        "id": 422506370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708465412
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968#issuecomment-1955181166\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968\">PR #7968</a>:</p>\n<blockquote>\n<p>I don't think I'm qualified to review this (deferring to @cfallin tagged here as well), but nevertheless I wanted to ask a question about this as well:</p>\n<blockquote>\n<p>Choose worst values instead of best in each eclass</p>\n</blockquote>\n<p>From the discussion <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">in the recent egraph issue</a> I thought we settled on the opposite conclusion, that the minimum value must be chosen. I suspect though you've already considered that and it's already accounted for here, leading me to my question. I suspect my understanding of the outcome of that discussion is probably no longer accurate, so is there a tl;dr; or why that issue won't resurface if we choose any value within an eclass? (if there's not a tl;dr; that's also totally ok, happy to go hunting elsewhere too!)<br>\n</p>\n</blockquote>",
        "id": 422507514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708465973
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968#pullrequestreview-1891661231\">PR review</a>:</p>\n<blockquote>\n<p>Thanks a bunch for tackling this; hopefully it helps us validate things!</p>\n</blockquote>",
        "id": 422507605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708466020
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968#pullrequestreview-1891661231\">PR review</a>:</p>\n<blockquote>\n<p>Thanks a bunch for tackling this; hopefully it helps us validate things!</p>\n</blockquote>",
        "id": 422507606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708466020
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968#discussion_r1496574641\">PR review comment</a>:</p>\n<blockquote>\n<p>I wonder if there' a way to encapsulte this? I realize it's a bit tricky because the order relation actually changes based on <code>use_worst</code> (reserved values come \"last\" when picking mins, and \"first\" when picking maxes). Maybe something like <code>pick_non_reserved_with_cmp(|x, y| x &lt;= y)</code> or something like that, then <code>picked_non_reserved_with_cmp</code> takes two <code>(Cost, Value)</code> tuples and has the if-ladder?</p>\n<p>Maybe that's just the same complexity as before, I dunno; just code-golfing a bit to see if we can make it prettier :-)</p>\n</blockquote>",
        "id": 422507608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708466020
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968#discussion_r1496574641\">PR review comment</a>.</p>",
        "id": 422507631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708466035
    },
    {
        "content": "<p>lpereira submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968#pullrequestreview-1891663351\">PR review</a>.</p>",
        "id": 422507770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708466095
    },
    {
        "content": "<p>lpereira created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968#discussion_r1496576646\">PR review comment</a>:</p>\n<blockquote>\n<p>We discussed this briefly while writing, and decided on this as it's more explicit and it's used only here.</p>\n</blockquote>",
        "id": 422507772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708466095
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968#issuecomment-1955203880\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968\">PR #7968</a>:</p>\n<blockquote>\n<p>Yeah, that's absolutely a fair question, @alexcrichton. In <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7891#issuecomment-1947685813\">ongoing discussion</a> we're currently thinking that we need to establish an invariant that it is always correct to choose any value from an eclass. We should only use the cost function to indicate a preference for some values over others, not to encode correctness constraints.</p>\n<p>So this PR is part of checking that we've done that correctly. I believe that with #7879 we currently have this invariant, but it's currently fragile because it relies on rewrite-rule authors strictly following new guidelines about using <code>subsume</code>. In #7891, we've been discussing how to better enforce the invariant.</p>\n</blockquote>",
        "id": 422509950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708467027
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968#issuecomment-1955237083\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968\">PR #7968</a>:</p>\n<blockquote>\n<p>I've been running the cranelift-fuzzgen on this branch locally for over an hour without finding any failures, so that's a good start.</p>\n<p>Also I forced <code>use_worst</code> to <code>true</code> in the cost function and ran the filetests. Several egraph tests and precise-output compile tests failed due to selecting longer sequences of instructions, which is what I would hope would happen. Other than that, everything passed, which is also reassuring.</p>\n</blockquote>",
        "id": 422513111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708468704
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7968\">PR #7968</a>.</p>",
        "id": 422514831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708469611
    }
]