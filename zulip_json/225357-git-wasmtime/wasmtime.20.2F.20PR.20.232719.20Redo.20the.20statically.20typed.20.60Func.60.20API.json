[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit reimplements the <code>Func</code> API with respect to statically typed<br>\ndispatch. Previously <code>Func</code> had a <code>getN</code> and <code>getN_async</code> family of<br>\nmethods which were implemented for 0 to 16 parameters. The return value<br>\nof these functions was an <code>impl Fn(..)</code> closure with the appropriate<br>\nparameters and return values.</p>\n<p>There are a number of downsides with this approach that have become<br>\napparent over time:</p>\n<ul>\n<li>\n<p>The addition of <code>*_async</code> doubled the API surface area (which is quite<br>\n  large here due to one-method-per-number-of-parameters).</p>\n</li>\n<li>\n<p>The [documentation of <code>Func</code>][old-docs] are quite verbose and feel<br>\n  \"polluted\" with all these getters, making it harder to understand the<br>\n  other methods that can be used to interact with a <code>Func</code>.</p>\n</li>\n<li>\n<p>These methods unconditionally pay the cost of returning an owned <code>impl\n  Fn</code> with a <code>'static</code> lifetime. While cheap, this is still paying the<br>\n  cost for cloning the <code>Store</code> effectively and moving data into the<br>\n  closed-over environment.</p>\n</li>\n<li>\n<p>Storage of the return value into a struct, for example, always<br>\n  requires <code>Box</code>-ing the returned closure since it otherwise cannot be<br>\n  named.</p>\n</li>\n<li>\n<p>Recently I had the desire to implement an \"unchecked\" path for<br>\n  invoking wasm where you unsafely assert the type signature of a wasm<br>\n  function. Doing this with today's scheme would require doubling<br>\n  (again) the API surface area for both async and synchronous calls,<br>\n  further polluting the documentation.</p>\n</li>\n</ul>\n<p>The main benefit of the previous scheme is that by returning a <code>impl Fn</code><br>\nit was quite easy and ergonomic to actually invoke the function. In<br>\npractice, though, examples would often have something akin to<br>\n<code>.get0::&lt;()&gt;()?()?</code> which is a lot of things to interpret all at once.<br>\nNote that <code>get0</code> means \"0 parameters\" yet a type parameter is passed.<br>\nThere's also a double function invocation which looks like a lot of<br>\ncharacters all lined up in a row.</p>\n<p>Overall, I think that the previous design is starting to show too many<br>\ncracks and deserves a rewrite. This commit is that rewrite.</p>\n<p>The new design in this commit is to delete the <code>getN{,_async}</code> family of<br>\nfunctions and instead have a new API:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl Func {\n    fn typed&lt;P, R&gt;(&amp;self) -&gt; Result&lt;&amp;Typed&lt;P, R&gt;&gt;;\n}\n\nimpl Typed&lt;P, R&gt; {\n    fn call(&amp;self, params: P) -&gt; Result&lt;R, Trap&gt;;\n    async fn call_async(&amp;self, params: P) -&gt; Result&lt;R, Trap&gt;;\n}\n</code></pre></div>\n\n<p>This should entirely replace the current scheme, albeit by slightly<br>\nlosing ergonomics use cases. The idea behind the API is that the<br>\nexistence of <code>Typed&lt;P, R&gt;</code> is a \"proof\" that the underlying function<br>\ntakes <code>P</code> and returns <code>R</code>. The <code>Func::typed</code> method peforms a runtime<br>\ntype-check to ensure that types all match up, and if successful you get<br>\na <code>Typed</code> value. Otherwise an error is returned.</p>\n<p>Once you have a <code>Typed</code> then, like <code>Func</code>, you can either <code>call</code> or<br>\n<code>call_async</code>. The difference with a <code>Typed</code>, however, is that the<br>\nparams/results are statically known and hence these calls can be much<br>\nmore efficient.</p>\n<p>This is a much smaller API surface area from before and should greatly<br>\nsimplify the <code>Func</code> documentation. There's still a problem where<br>\n<code>Func::wrapN_async</code> produces a lot of functions to document, but that's<br>\nnow the sole offender. It's a nice benefit that the<br>\nstatically-typed-async verisons are now expressed with an <code>async</code><br>\nfunction rather than a function-returning-a-future which makes it both<br>\nmore efficient and easier to understand.</p>\n<p>The type <code>P</code> and <code>R</code> are intended to either be bare types (e.g. <code>i32</code>)<br>\nor tuples of any length (including 0). At this time <code>R</code> is only allowed<br>\nto be <code>()</code> or a bare <code>i32</code>-style type because multi-value is not<br>\nsupported with a native ABI (yet). The <code>P</code>, however, can be any size of<br>\ntuples of parameters. This is also where some ergonomics are lost<br>\nbecause instead of <code>f(1, 2)</code> you now have to write <code>f.call((1, 2))</code><br>\n(note the double-parens). Similarly <code>f()</code> becomes <code>f.call(())</code>.</p>\n<p>Overall I feel that this is a better tradeoff than before. While not<br>\nuniversally better due to the loss in ergonomics I feel that this design<br>\nis much more flexible in terms of what you can do with the return value<br>\nand also understanding the API surface area (just less to take in).</p>\n<p>[old-docs]: <a href=\"https://docs.rs/wasmtime/0.24.0/wasmtime/struct.Func.html#method.get0\">https://docs.rs/wasmtime/0.24.0/wasmtime/struct.Func.html#method.get0</a></p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 229731935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615406164
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229732091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615406232
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit reimplements the <code>Func</code> API with respect to statically typed<br>\ndispatch. Previously <code>Func</code> had a <code>getN</code> and <code>getN_async</code> family of<br>\nmethods which were implemented for 0 to 16 parameters. The return value<br>\nof these functions was an <code>impl Fn(..)</code> closure with the appropriate<br>\nparameters and return values.</p>\n<p>There are a number of downsides with this approach that have become<br>\napparent over time:</p>\n<ul>\n<li>\n<p>The addition of <code>*_async</code> doubled the API surface area (which is quite<br>\n  large here due to one-method-per-number-of-parameters).</p>\n</li>\n<li>\n<p>The [documentation of <code>Func</code>][old-docs] are quite verbose and feel<br>\n  \"polluted\" with all these getters, making it harder to understand the<br>\n  other methods that can be used to interact with a <code>Func</code>.</p>\n</li>\n<li>\n<p>These methods unconditionally pay the cost of returning an owned <code>impl\n  Fn</code> with a <code>'static</code> lifetime. While cheap, this is still paying the<br>\n  cost for cloning the <code>Store</code> effectively and moving data into the<br>\n  closed-over environment.</p>\n</li>\n<li>\n<p>Storage of the return value into a struct, for example, always<br>\n  requires <code>Box</code>-ing the returned closure since it otherwise cannot be<br>\n  named.</p>\n</li>\n<li>\n<p>Recently I had the desire to implement an \"unchecked\" path for<br>\n  invoking wasm where you unsafely assert the type signature of a wasm<br>\n  function. Doing this with today's scheme would require doubling<br>\n  (again) the API surface area for both async and synchronous calls,<br>\n  further polluting the documentation.</p>\n</li>\n</ul>\n<p>The main benefit of the previous scheme is that by returning a <code>impl Fn</code><br>\nit was quite easy and ergonomic to actually invoke the function. In<br>\npractice, though, examples would often have something akin to<br>\n<code>.get0::&lt;()&gt;()?()?</code> which is a lot of things to interpret all at once.<br>\nNote that <code>get0</code> means \"0 parameters\" yet a type parameter is passed.<br>\nThere's also a double function invocation which looks like a lot of<br>\ncharacters all lined up in a row.</p>\n<p>Overall, I think that the previous design is starting to show too many<br>\ncracks and deserves a rewrite. This commit is that rewrite.</p>\n<p>The new design in this commit is to delete the <code>getN{,_async}</code> family of<br>\nfunctions and instead have a new API:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl Func {\n    fn typed&lt;P, R&gt;(&amp;self) -&gt; Result&lt;&amp;TypedFunc&lt;P, R&gt;&gt;;\n}\n\nimpl TypedFunc&lt;P, R&gt; {\n    fn call(&amp;self, params: P) -&gt; Result&lt;R, Trap&gt;;\n    async fn call_async(&amp;self, params: P) -&gt; Result&lt;R, Trap&gt;;\n}\n</code></pre></div>\n\n<p>This should entirely replace the current scheme, albeit by slightly<br>\nlosing ergonomics use cases. The idea behind the API is that the<br>\nexistence of <code>TypedFunc&lt;P, R&gt;</code> is a \"proof\" that the underlying function<br>\ntakes <code>P</code> and returns <code>R</code>. The <code>Func::typed</code> method peforms a runtime<br>\ntype-check to ensure that types all match up, and if successful you get<br>\na <code>TypedFunc</code> value. Otherwise an error is returned.</p>\n<p>Once you have a <code>TypedFunc</code> then, like <code>Func</code>, you can either <code>call</code> or<br>\n<code>call_async</code>. The difference with a <code>Typed</code>, however, is that the<br>\nparams/results are statically known and hence these calls can be much<br>\nmore efficient.</p>\n<p>This is a much smaller API surface area from before and should greatly<br>\nsimplify the <code>Func</code> documentation. There's still a problem where<br>\n<code>Func::wrapN_async</code> produces a lot of functions to document, but that's<br>\nnow the sole offender. It's a nice benefit that the<br>\nstatically-typed-async verisons are now expressed with an <code>async</code><br>\nfunction rather than a function-returning-a-future which makes it both<br>\nmore efficient and easier to understand.</p>\n<p>The type <code>P</code> and <code>R</code> are intended to either be bare types (e.g. <code>i32</code>)<br>\nor tuples of any length (including 0). At this time <code>R</code> is only allowed<br>\nto be <code>()</code> or a bare <code>i32</code>-style type because multi-value is not<br>\nsupported with a native ABI (yet). The <code>P</code>, however, can be any size of<br>\ntuples of parameters. This is also where some ergonomics are lost<br>\nbecause instead of <code>f(1, 2)</code> you now have to write <code>f.call((1, 2))</code><br>\n(note the double-parens). Similarly <code>f()</code> becomes <code>f.call(())</code>.</p>\n<p>Overall I feel that this is a better tradeoff than before. While not<br>\nuniversally better due to the loss in ergonomics I feel that this design<br>\nis much more flexible in terms of what you can do with the return value<br>\nand also understanding the API surface area (just less to take in).</p>\n<p>[old-docs]: <a href=\"https://docs.rs/wasmtime/0.24.0/wasmtime/struct.Func.html#method.get0\">https://docs.rs/wasmtime/0.24.0/wasmtime/struct.Func.html#method.get0</a></p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 229732143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615406264
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229742908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615409845
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229744741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615410439
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229749700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615412377
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229752399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615413408
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719#pullrequestreview-609315077\">PR Review</a>.</p>",
        "id": 229779075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615427152
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719#discussion_r592003370\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Given this seems to be common (<code>get_func</code> followed by <code>typed</code> which then needs to be cloned), perhaps we should have <code>Instance::get_typed_func</code> to shorthand this?</p>\n</blockquote>",
        "id": 229779076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615427152
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719#pullrequestreview-609315077\">PR Review</a>.</p>",
        "id": 229779078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615427152
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719#discussion_r591994955\">PR Review Comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// used instead of [`Func::call`] (which is more general, hence its\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 229779079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615427152
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719#pullrequestreview-609977627\">PR Review</a>.</p>",
        "id": 229882417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615481077
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719#discussion_r592523194\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Seems reasonable to me!</p>\n</blockquote>",
        "id": 229882419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615481077
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229891649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615483953
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229891731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615483984
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229892094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615484081
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229892483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615484181
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a>.</p>",
        "id": 229892686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615484205
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719#pullrequestreview-610134416\">PR Review</a>.</p>",
        "id": 229908272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615489995
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a> from <code>typed-func</code> to <code>main</code>.</p>",
        "id": 229909932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615490631
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2719\">PR #2719</a>.</p>",
        "id": 229922513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615495415
    }
]