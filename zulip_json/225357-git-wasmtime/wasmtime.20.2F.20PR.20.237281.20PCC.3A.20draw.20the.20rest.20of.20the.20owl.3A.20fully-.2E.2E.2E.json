[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a>.</p>",
        "id": 397261847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697618585
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a> from <code>cfallin:pcc-owl</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This needed a bit more inference / magic than I was hoping for at first,<br>\nspecifically around constants and adds. Some instructions can now<br>\ngenerate facts on their output registers, even if not stated. This<br>\nbreaks away from the \"breadcrumbs\" idea, but seems to be the most<br>\npractical solution to a general problem that we have mini-lowering steps<br>\nin various places without careful preservation of PCC facts. Two<br>\nparticular aspects:</p>\n<ul>\n<li>\n<p>Constants: amodes on aarch64 can decompose into new<br>\n  constant-generation instructions, and we need precise ranges on those<br>\n  to properly check them. To avoid making the ISLE rules nightmarish,<br>\n  it's best to reuse the existing semantics definitions of the Add* ALU<br>\n  insts, and add a few rules for MovK/MovZ/MovN.</p>\n</li>\n<li>\n<p>Adds: similarly, amodes decompose into de-novo add instructions with<br>\n  no facts. To handle this, there's now a notion of \"propagating\" facts<br>\n  that cause an instruction with a propagating fact on the input to<br>\n  generate a fact on the output.</p>\n</li>\n</ul>\n<p>Together, these heuristics mean that we'll eagerly generate a fact for<br>\n<code>mem(mt0, 0, 0) + 8 -&gt; mem(mt0, 8, 8)</code>, but we won't, for example,<br>\ngenerate ranges on every single integer operation.</p>\n<p>With these changes and a few other misc fixes, this PR can now check a<br>\nnontrivial \"hello world\" Wasm on aarch64 down to the machine-code level:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">helloworld</span><span class=\"o\">-</span><span class=\"n\">rs</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>(This builds on #7280, and I also intend to clean it up a bit, so creating as a draft for now)</p>\n</blockquote>",
        "id": 397261849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697618586
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a>:</p>\n<blockquote>\n<p>This needed a bit more inference / magic than I was hoping for at first,<br>\nspecifically around constants and adds. Some instructions can now<br>\ngenerate facts on their output registers, even if not stated. This<br>\nbreaks away from the \"breadcrumbs\" idea, but seems to be the most<br>\npractical solution to a general problem that we have mini-lowering steps<br>\nin various places without careful preservation of PCC facts. Two<br>\nparticular aspects:</p>\n<ul>\n<li>\n<p>Constants: amodes on aarch64 can decompose into new<br>\n  constant-generation instructions, and we need precise ranges on those<br>\n  to properly check them. To avoid making the ISLE rules nightmarish,<br>\n  it's best to reuse the existing semantics definitions of the Add* ALU<br>\n  insts, and add a few rules for MovK/MovZ/MovN.</p>\n</li>\n<li>\n<p>Adds: similarly, amodes decompose into de-novo add instructions with<br>\n  no facts. To handle this, there's now a notion of \"propagating\" facts<br>\n  that cause an instruction with a propagating fact on the input to<br>\n  generate a fact on the output.</p>\n</li>\n</ul>\n<p>Together, these heuristics mean that we'll eagerly generate a fact for<br>\n<code>mem(mt0, 0, 0) + 8 -&gt; mem(mt0, 8, 8)</code>, but we won't, for example,<br>\ngenerate ranges on every single integer operation.</p>\n<p>With these changes and a few other misc fixes, this PR can now check a<br>\nnontrivial \"hello world\" Wasm on aarch64 down to the machine-code level:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">helloworld</span><span class=\"o\">-</span><span class=\"n\">rs</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n#<span class=\"w\"> </span><span class=\"n\">completes</span><span class=\"w\"> </span><span class=\"n\">successfully</span>\n</code></pre></div>\n<p>(This builds on #7280, and I also intend to clean it up a bit, so creating as a draft for now)</p>\n</blockquote>",
        "id": 397261919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697618611
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1685498573\">PR review</a>.</p>",
        "id": 397354885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649185
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1685498573\">PR review</a>.</p>",
        "id": 397354886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649185
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364139207\">PR review comment</a>:</p>\n<blockquote>\n<p>Reminder to undo this.</p>\n</blockquote>",
        "id": 397354887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649185
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364150677\">PR review comment</a>:</p>\n<blockquote>\n<p>I thought join was usually union and meet was usually intersection? Eg when you have a powerset lattice, usually you join and union. So in that case, this <em>is</em> the usual lattice meet operation.</p>\n<p>I guess what is unusual is that we are <em>able</em> to meet rather than join because we know both facts must be true, rather than the typical situation in a static analysis where one is generalizing over assumptions.</p>\n</blockquote>",
        "id": 397354888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649186
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364143217\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: kinda expect a <code>bool</code> result from an <code>is_foo</code> method. Maybe we can name this <code>as_const</code>?</p>\n</blockquote>",
        "id": 397354889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649186
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364182913\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe debug assert that the value fits in the bit width?</p>\n</blockquote>",
        "id": 397354890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649186
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364160040\">PR review comment</a>:</p>\n<blockquote>\n<p>Should we infer facts even when our merged facts conflict? That seems like papering over fact-producer bugs.</p>\n<p>I guess I'd expect merging to handle the <code>(None, None)</code> case explicitly to return an inferred fact, and then here we would always return <code>Conflict</code>.</p>\n</blockquote>",
        "id": 397354891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649186
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364236851\">PR review comment</a>:</p>\n<blockquote>\n<p>Probably don't want to land these logs I'm assuming.</p>\n</blockquote>",
        "id": 397354892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649186
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364230814\">PR review comment</a>:</p>\n<blockquote>\n<p>Seems like we are getting pretty wordy here and the <code>check_output</code> helper isn't helping as much as it could.</p>\n<p>We already have to pass in the operands to check if they need propagation, so can we have the helper automatically get their facts and pass them to the closure? This would mean the closure doesn't need to close over <code>r{n,m}</code> which means we don't need separate bindings where we eagerly copy just to avoid borrow issues.</p>\n<p>We could pass the operands by slice or have unop and binop helpers to make things a little nicer.</p>\n<p>So ultimately, this would end up looking something like this (closure types annotated just for clarity of the idea):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">size</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">extendop</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">extendop</span><span class=\"p\">;</span>\n<span class=\"n\">check_binop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vcode</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rd</span><span class=\"p\">.</span><span class=\"n\">to_reg</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">rn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">vcode</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rn</span>: <span class=\"nc\">Fact</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rm</span>: <span class=\"nc\">Fact</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rm_extended</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fail_if_missing</span><span class=\"p\">(</span><span class=\"n\">extend_fact</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">extendop</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">fail_if_missing</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">rm_extended</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">bits</span><span class=\"p\">().</span><span class=\"n\">into</span><span class=\"p\">()))</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n<p>which is a lot less verbose</p>\n</blockquote>",
        "id": 397354893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649186
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364236367\">PR review comment</a>:</p>\n<blockquote>\n<p>This should be an actual error, not a panic.</p>\n</blockquote>",
        "id": 397354895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649186
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364200908\">PR review comment</a>:</p>\n<blockquote>\n<p>Seems like we could make a <code>Fact::constant(bit_width, value)</code> method and then use that in <code>check_constant</code> as well and it would be a good place to deduplicate and provide a single place to debug assert that the value fits in the bits and all that.</p>\n</blockquote>",
        "id": 397354896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649186
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1364247820\">PR review comment</a>:</p>\n<blockquote>\n<p>All this <code>if pcc { attach_fact() }</code> stuff is starting to feel like it could use a helper as well:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add_fact</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">pos</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">pos</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">facts</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>which should clean up the attachment sites a bit and lessen cognitive overhead associated with the extra control flow of <code>if pcc</code> everywhere.</p>\n</blockquote>",
        "id": 397354897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697649186
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a>.</p>",
        "id": 397562161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742376
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466040\">PR review</a>.</p>",
        "id": 397562169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742384
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994236\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 397562170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742384
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466111\">PR review</a>.</p>",
        "id": 397562175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742387
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994278\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 397562176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742387
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466166\">PR review</a>.</p>",
        "id": 397562182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742389
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994317\">PR review comment</a>:</p>\n<blockquote>\n<p>Discussed during live review just now; we landed on <code>intersect</code> instead to avoid convention issues :-)</p>\n</blockquote>",
        "id": 397562183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742389
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466223\">PR review</a>.</p>",
        "id": 397562186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742391
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994345\">PR review comment</a>:</p>\n<blockquote>\n<p>It turns out we can remove this, empirically, so I did!</p>\n</blockquote>",
        "id": 397562187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742392
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466282\">PR review</a>.</p>",
        "id": 397562195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742394
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994384\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 397562196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742394
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466414\">PR review</a>.</p>",
        "id": 397562203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742399
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994446\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 397562204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742399
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466480\">PR review</a>.</p>",
        "id": 397562212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742402
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994495\">PR review comment</a>:</p>\n<blockquote>\n<p>Refactored, thanks, that's a really nice cleanup!</p>\n</blockquote>",
        "id": 397562213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742402
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466522\">PR review</a>.</p>",
        "id": 397562216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742404
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994526\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 397562217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742404
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466593\">PR review</a>.</p>",
        "id": 397562223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742407
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994560\">PR review comment</a>:</p>\n<blockquote>\n<p>Removed!</p>\n</blockquote>",
        "id": 397562225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742407
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688466673\">PR review</a>.</p>",
        "id": 397562231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742409
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#discussion_r1365994603\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 397562232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742409
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a>.</p>",
        "id": 397562435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742494
    },
    {
        "content": "<p><strong>cfallin</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a> as ready for review.</p>",
        "id": 397562463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742510
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a>.</p>",
        "id": 397562465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742511
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a>.</p>",
        "id": 397562478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742517
    },
    {
        "content": "<p>cfallin has disabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a>.</p>",
        "id": 397562490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697742524
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281#pullrequestreview-1688538979\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 397568392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697745278
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7281\">PR #7281</a>.</p>",
        "id": 397574256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697748042
    }
]