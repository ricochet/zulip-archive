[
    {
        "content": "<p><a href=\"https://github.com/bkolobara\">bkolobara</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716\">Issue #9716</a>.</p>",
        "id": 485899676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733243914
    },
    {
        "content": "<p>bkolobara opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716\">issue #9716</a>:</p>\n<blockquote>\n<p>I'm trying to get the following example working inside of a debugger: <a href=\"https://docs.wasmtime.dev/examples-rust-debugging.html\">https://docs.wasmtime.dev/examples-rust-debugging.html</a>, but lldb can't read any of the local variables when a break point is triggered.</p>\n<h3>Test Case</h3>\n<p>The wasm file and executable are compiled directly from wasmtime examples.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"o\">-</span><span class=\"n\">fib</span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">unknown</span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"o\">-</span><span class=\"n\">debug</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Run the <code>fib-debug</code> executable inside lldb with the jit plugin enabled.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lldb</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"o\">-</span><span class=\"n\">debug</span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"s\">\"./target/debug/examples/fib-debug\"</span>\n<span class=\"n\">Current</span><span class=\"w\"> </span><span class=\"n\">executable</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">'/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">bkolobara</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arm64</span><span class=\"p\">).</span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"o\">-</span><span class=\"n\">loader</span><span class=\"p\">.</span><span class=\"n\">gdb</span><span class=\"p\">.</span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">on</span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">6</span>\n<span class=\"n\">Breakpoint</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">no</span><span class=\"w\"> </span><span class=\"n\">locations</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pending</span><span class=\"p\">).</span>\n<span class=\"n\">WARNING</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">Unable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"w\"> </span><span class=\"n\">breakpoint</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"n\">locations</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"n\">Process</span><span class=\"w\"> </span><span class=\"mi\">87206</span><span class=\"w\"> </span><span class=\"n\">launched</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">bkolobara</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arm64</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"n\">added</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">breakpoint</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">Process</span><span class=\"w\"> </span><span class=\"mi\">87206</span><span class=\"w\"> </span><span class=\"n\">stopped</span>\n\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">queue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">com</span><span class=\"p\">.</span><span class=\"n\">apple</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">thread</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stop</span><span class=\"w\"> </span><span class=\"n\">reason</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">breakpoint</span><span class=\"w\"> </span><span class=\"mf\">1.1</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x00000001041381c4</span><span class=\"w\"> </span><span class=\"n\">JIT</span><span class=\"p\">(</span><span class=\"mh\">0x1381c8000</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=&lt;</span><span class=\"n\">unavailable</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">17</span>\n<span class=\"w\">   </span><span class=\"mi\">3</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"mi\">7</span><span class=\"w\">            </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"w\">            </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"mi\">9</span><span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fib</span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">stopped</span><span class=\"p\">.</span>\n<span class=\"n\">warning</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">This</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">LLDB</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">language</span><span class=\"w\"> </span><span class=\"s\">\"rust\"</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">Inspection</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">limited</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">fr</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"p\">(</span><span class=\"n\">WasmtimeVMContext</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">__vmctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">available</span><span class=\"o\">&gt;</span>\n\n<span class=\"p\">(</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mh\">0xffff8</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n\n<span class=\"p\">(</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">&gt;</span>\n\n<span class=\"p\">(</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">&gt;</span>\n\n<span class=\"p\">(</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">ops</span><span class=\"p\">::</span><span class=\"n\">range</span><span class=\"p\">::</span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>Running <code>fr v</code> in lldb in this context should display the values of the variables:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"p\">(</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">&gt;</span>\n\n<span class=\"p\">(</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 27.0</p>\n<p>Operating system: macOs Sequoia 15.1.1</p>\n<p>Architecture: Apple M1 Pro</p>\n<h3>Extra Info</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lldb</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span>\n<span class=\"n\">lldb</span><span class=\"o\">-</span><span class=\"mf\">1600.0.39.3</span>\n<span class=\"n\">Apple</span><span class=\"w\"> </span><span class=\"n\">Swift</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"mf\">6.0.2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">swiftlang</span><span class=\"o\">-</span><span class=\"mf\">6.0.2.1.2</span><span class=\"w\"> </span><span class=\"n\">clang</span><span class=\"o\">-</span><span class=\"mf\">1600.0.26.4</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>There was a similar issue #3884, but it was closed as fixed 2 years ago.</p>\n<p>I'm also aware that there is some work being done on improving the debug info translation in #5537.</p>\n</blockquote>",
        "id": 485899683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733243915
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716#issuecomment-2517797910\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716\">issue #9716</a>:</p>\n<blockquote>\n<p>cc @SingleAccretion since you've been looking at the DWARF stuff recently would you happen to recognize this?</p>\n</blockquote>",
        "id": 486120642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733326489
    },
    {
        "content": "<p>SingleAccretion <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716#issuecomment-2517830965\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716\">issue #9716</a>:</p>\n<blockquote>\n<blockquote>\n<p>would you happen to recognize this?</p>\n</blockquote>\n<p>Hmm, not immediately, considering this is trivial code at <code>-Oopt-level=0</code>. What is the Rust-&gt;WASM optimization level here?</p>\n<p>Generically, non-trivial examples do fall apart very easily because SSA+RA do not preserve everything, and Cranelift preservation of variable ranges is quite poor.</p>\n<p>The way to self-diagnose this is to look at the DWARF produced for WASM, check if <code>a</code> and <code>b</code> in it have reasonable ranges, then in LLDB do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"w\"> </span><span class=\"n\">lookup</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">verbose</span>\n</code></pre></div>\n<p>And check the coverage of the ranges that will be dumped.</p>\n</blockquote>",
        "id": 486123618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733327239
    },
    {
        "content": "<p>SingleAccretion edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716#issuecomment-2517830965\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716\">issue #9716</a>:</p>\n<blockquote>\n<blockquote>\n<p>would you happen to recognize this?</p>\n</blockquote>\n<p>Hmm, not immediately, considering this is trivial code at <code>-Oopt-level=0</code>. What is the Rust-&gt;WASM optimization level here?</p>\n<p>Generically, non-trivial examples do fall apart very easily because SSA+RA do not preserve everything, and Cranelift preservation of variable ranges is quite poor.</p>\n<p>The way to self-diagnose this is to look at the DWARF produced for WASM, check if <code>a</code> and <code>b</code> in it have reasonable ranges, then in LLDB do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"w\"> </span><span class=\"n\">lookup</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">verbose</span>\n</code></pre></div>\n<p>And check the coverage for ranges that will be dumped.</p>\n</blockquote>",
        "id": 486123755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733327283
    },
    {
        "content": "<p>SingleAccretion edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716#issuecomment-2517830965\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716\">issue #9716</a>:</p>\n<blockquote>\n<blockquote>\n<p>would you happen to recognize this?</p>\n</blockquote>\n<p>Hmm, not immediately, considering this is trivial code at <code>-Oopt-level=0</code>. What is the Rust-&gt;WASM optimization level here?</p>\n<p>Generically, non-trivial examples do fall apart very easily because SSA+RA do not preserve everything, and so Cranelift's preservation of variable ranges is quite poor.</p>\n<p>The way to self-diagnose this is to look at the DWARF produced for WASM, check if <code>a</code> and <code>b</code> in it have reasonable ranges, then in LLDB do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"w\"> </span><span class=\"n\">lookup</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">verbose</span>\n</code></pre></div>\n<p>And check the coverage for ranges that will be dumped.</p>\n</blockquote>",
        "id": 486125089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733327658
    },
    {
        "content": "<p>bkolobara <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716#issuecomment-2518554631\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9716\">issue #9716</a>:</p>\n<blockquote>\n<blockquote>\n<p>What is the Rust-&gt;WASM optimization level here?</p>\n</blockquote>\n<p>This uses a debug build of the <code>fib.rs</code> file, so <code>opt-level = 0</code>, with debug info included.</p>\n</blockquote>",
        "id": 486178464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733346173
    }
]