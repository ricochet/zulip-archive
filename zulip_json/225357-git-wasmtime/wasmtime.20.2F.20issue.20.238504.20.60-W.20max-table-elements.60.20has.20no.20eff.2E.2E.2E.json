[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8504\">issue #8504</a>:</p>\n<blockquote>\n<p>While working on resource support for the C# <code>wit-bindgen</code> generator, I created <a href=\"https://github.com/dicej/dotnet9-wasi-http-example\">an example app</a> targeting <code>wasi:http/incoming-handler@0.2.0</code>.  However, <code>wasmtime serve</code> couldn't run it due to one of the tables containing more than 10000 entries:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">stripped</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">table</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">minimum</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">10511</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">exceeds</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">limit</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">10000</span>\n</code></pre></div>\n<p>Next, I tried <code>wasmtime serve -W max-table-elements=20000 target/stripped.wasm</code> instead, but got the same error.  Looking at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3aa3206484f6242a2b1d34decce2e4558e69aebc/src/commands/serve.rs#L251-L266\">the code</a>, it seems that the pooling allocator is enabled by default for <code>wasmtime serve</code>, and since it has its own configuration knobs which are not controlled by e.g. <code>-W max-table-elements</code>, there's no way to change the limit from its default.  There's also no way I can see to disable the pooling allocator, given that the only reference to the <code>--pooling-allocator</code> option is in <code>old_cli.rs</code>, which is disabled in the default build.</p>\n<p>I'd suggest that <code>-W</code> options such as <code>max-table-elements</code> should be applied to the pooling allocator when it is enabled.  We might also consider raising the default considering that even simple C# apps tend to exceed it (although we could instead consider that a bug in the C# Native AOT compiler).</p>\n</blockquote>",
        "id": 436129298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714421093
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8504\">issue #8504</a>:</p>\n<blockquote>\n<p>While working on resource support for the C# <code>wit-bindgen</code> generator, I created <a href=\"https://github.com/dicej/dotnet9-wasi-http-example\">an example app</a> targeting <code>wasi:http/incoming-handler@0.2.0</code>.  However, <code>wasmtime serve</code> couldn't run it due to one of the tables containing more than 10000 entries:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">stripped</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">table</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">minimum</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">10511</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">exceeds</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">limit</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">10000</span>\n</code></pre></div>\n<p>Next, I tried <code>wasmtime serve -W max-table-elements=20000 target/stripped.wasm</code> instead, but got the same error.  Looking at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3aa3206484f6242a2b1d34decce2e4558e69aebc/src/commands/serve.rs#L251-L266\">the code</a>, it seems that the pooling allocator is enabled by default for <code>wasmtime serve</code>, and since it has its own configuration knobs which are not controlled by e.g. <code>-W max-table-elements</code>, there's no way to change the limit from its default.  There's also no way I can see to disable the pooling allocator, given that the only reference to the <code>--pooling-allocator</code> option is in <code>old_cli.rs</code>, which is disabled in the default build.</p>\n<p>I'd suggest that <code>-W</code> options such as <code>max-table-elements</code> should be applied to the pooling allocator when it is enabled.  We might also consider raising the default considering that even simple C# apps tend to exceed it (although we could instead consider that a bug in the C# Native AOT compiler, e.g. insufficient dead code elimination?).</p>\n</blockquote>",
        "id": 436129372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714421121
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8504\">issue #8504</a>:</p>\n<blockquote>\n<p>While working on resource support for the C# <code>wit-bindgen</code> generator, I created <a href=\"https://github.com/dicej/dotnet9-wasi-http-example\">an example app</a> targeting <code>wasi:http/incoming-handler@0.2.0</code>.  However, <code>wasmtime serve</code> couldn't run it due to one of the tables containing more than 10000 entries:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">stripped</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">table</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">minimum</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">10511</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">exceeds</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">limit</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">10000</span>\n</code></pre></div>\n<p>Next, I tried <code>wasmtime serve -W max-table-elements=20000 target/stripped.wasm</code> instead, but got the same error.  Looking at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3aa3206484f6242a2b1d34decce2e4558e69aebc/src/commands/serve.rs#L251-L266\">the code</a>, it seems that the pooling allocator is enabled by default for <code>wasmtime serve</code>, and since it has its own configuration knobs which are not controlled by e.g. <code>-W max-table-elements</code>, there's no way to change the limit from its default.  There's also no way I can see to disable the pooling allocator, given that the only reference to the <code>--pooling-allocator</code> option is in <code>old_cli.rs</code>, which is disabled in the default build.</p>\n<p>I'd suggest that <code>-W</code> options such as <code>max-table-elements</code> should be applied to the pooling allocator when it is enabled.  <del>We might also consider raising the default considering that even simple C# apps tend to exceed it (although we could instead consider that a bug in the C# Native AOT compiler, e.g. insufficient dead code elimination?).</del> EDIT: I was building with <code>-c Debug</code>; the release build results in a table about half the size, which is well under the current default limit.</p>\n</blockquote>",
        "id": 436133398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714422591
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8504#issuecomment-2083666503\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8504\">issue #8504</a>:</p>\n<blockquote>\n<p>As I noted in my edit above, building the C# app using <code>-c Release</code> ensured that the max table size in the component was well under the default limit, but then I ran into what appears to be an allocation failure during .NET runtime initialization, possibly due to the default <a href=\"https://docs.rs/wasmtime/20.0.0/wasmtime/struct.PoolingAllocationConfig.html#method.memory_pages\">memory pages limit</a> being lower than what the .NET runtime needs.  I'm going to test that theory using a custom build and report back here.</p>\n</blockquote>",
        "id": 436139865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714424937
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8504#issuecomment-2084255287\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8504\">issue #8504</a>:</p>\n<blockquote>\n<p>Indeed, setting the memory pages limit to 1600 (i.e. 100MiB) allows the app the run without trapping.</p>\n</blockquote>",
        "id": 436178836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714444401
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8504\">issue #8504</a>:</p>\n<blockquote>\n<p>While working on resource support for the C# <code>wit-bindgen</code> generator, I created <a href=\"https://github.com/dicej/dotnet9-wasi-http-example\">an example app</a> targeting <code>wasi:http/incoming-handler@0.2.0</code>.  However, <code>wasmtime serve</code> couldn't run it due to one of the tables containing more than 10000 entries:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">stripped</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">table</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">minimum</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">10511</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">exceeds</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">limit</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">10000</span>\n</code></pre></div>\n<p>Next, I tried <code>wasmtime serve -W max-table-elements=20000 target/stripped.wasm</code> instead, but got the same error.  Looking at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3aa3206484f6242a2b1d34decce2e4558e69aebc/src/commands/serve.rs#L251-L266\">the code</a>, it seems that the pooling allocator is enabled by default for <code>wasmtime serve</code>, and since it has its own configuration knobs which are not controlled by e.g. <code>-W max-table-elements</code>, there's no way to change the limit from its default.  There's also no way I can see to disable the pooling allocator, given that the only reference to the <code>--pooling-allocator</code> option is in <code>old_cli.rs</code>, which is disabled in the default build.</p>\n<p>I'd suggest that <code>-W</code> options such as <code>max-table-elements</code> should be applied to the pooling allocator when it is enabled.  <del>We might also consider raising the default considering that even simple C# apps tend to exceed it (although we could instead consider that a bug in the C# Native AOT compiler, e.g. insufficient dead code elimination?).</del> EDIT: I was building with <code>-c Debug</code>; the release build results in a table about half the size, which is well under the current default limit.</p>\n</blockquote>",
        "id": 436952112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714767052
    }
]