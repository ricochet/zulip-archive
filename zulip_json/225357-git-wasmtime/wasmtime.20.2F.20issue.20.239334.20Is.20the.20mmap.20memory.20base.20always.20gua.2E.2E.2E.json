[
    {
        "content": "<p>stevefan1999-personal opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334\">issue #9334</a>:</p>\n<blockquote>\n<p>I wonder during memory grow reallocation case, would <code>wasmtime::Memory::data_ptr()</code> be invalidated? Right now I'm trying to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[qjs(get, enumerable)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">buffer</span><span class=\"o\">&lt;'</span><span class=\"na\">js</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Ctx</span><span class=\"o\">&lt;'</span><span class=\"na\">js</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ArrayBuffer</span><span class=\"o\">&lt;'</span><span class=\"na\">js</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// let _data = self.inner.data_mut(self.store.lock().unwrap().as_context_mut());</span>\n<span class=\"w\">        </span><span class=\"c1\">// Err(ctx.throw(\"TODO\".into_js(&amp;ctx)?))</span>\n\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">qjs</span><span class=\"p\">::</span><span class=\"n\">JS_NewArrayBuffer</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">as_raw</span><span class=\"p\">().</span><span class=\"n\">as_mut</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">().</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// No need for deallocation</span>\n<span class=\"w\">                </span><span class=\"n\">ptr</span><span class=\"p\">::</span><span class=\"n\">null_mut</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"c1\">// No opaque</span>\n<span class=\"w\">                </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// True = Shared</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">qjs</span><span class=\"p\">::</span><span class=\"n\">JS_VALUE_GET_NORM_TAG</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">qjs</span><span class=\"p\">::</span><span class=\"n\">JS_TAG_EXCEPTION</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">rquickjs</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"p\">::</span><span class=\"n\">Exception</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n\n<span class=\"w\">            </span><span class=\"n\">Value</span><span class=\"p\">::</span><span class=\"n\">from_js_value</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ArrayBuffer</span><span class=\"p\">::</span><span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"n\">Object</span><span class=\"p\">::</span><span class=\"n\">from_value</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>But if the user called <code>grow(delta)</code> subsequently, would that invalidate the <code>data.as_mut_ptr()</code> address and render the whole ArrayBuffer invalid?</p>\n</blockquote>",
        "id": 473760727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727708245
    },
    {
        "content": "<p>stevefan1999-personal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334#issuecomment-2383481790\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334\">issue #9334</a>:</p>\n<blockquote>\n<p>I'm afraid it is a yes.</p>\n<blockquote>\n<p>Grows this WebAssembly memory by delta pages.</p>\n<p>This will attempt to add delta more pages of memory on to the end of this Memory instance. If successful this may relocate the memory and cause <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#method.data_ptr\">Memory::data_ptr</a> to return a new value. Additionally any unsafely constructed slices into this memory may no longer be valid.</p>\n<p>On success returns the number of pages this memory previously had before the growth succeeded.</p>\n<p>Note that, by default, a WebAssembly memory’s page size is 64KiB (aka 65536 or 216). The <a href=\"https://github.com/WebAssembly/custom-page-sizes\">custom-page-sizes proposal</a> allows Wasm memories to opt into a page size of one byte (and this may be further relaxed to any power of two in a future extension).</p>\n</blockquote>\n<p>Thus maybe I have to set it as a memory view in the ArrayBuffer property of rquickjs to make it read-only first: <a href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer.isview\">ArrayBuffers</a>, while this can still cause access violation if the buffer is detached. I'm not sure what is the best way to implement this interface though.</p>\n</blockquote>",
        "id": 473765940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727708999
    },
    {
        "content": "<p>stevefan1999-personal edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334#issuecomment-2383481790\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334\">issue #9334</a>:</p>\n<blockquote>\n<p>I'm afraid it is a yes.</p>\n<blockquote>\n<p>Grows this WebAssembly memory by delta pages.</p>\n<p>This will attempt to add delta more pages of memory on to the end of this Memory instance. If successful this may relocate the memory and cause <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#method.data_ptr\">Memory::data_ptr</a> to return a new value. Additionally any unsafely constructed slices into this memory may no longer be valid.</p>\n<p>On success returns the number of pages this memory previously had before the growth succeeded.</p>\n<p>Note that, by default, a WebAssembly memory’s page size is 64KiB (aka 65536 or 216). The <a href=\"https://github.com/WebAssembly/custom-page-sizes\">custom-page-sizes proposal</a> allows Wasm memories to opt into a page size of one byte (and this may be further relaxed to any power of two in a future extension).</p>\n</blockquote>\n<p>Thus maybe I have to set it as a memory view in the ArrayBuffer property of rquickjs to make it read-only first: <a href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer.isview\">ArrayBuffers</a>, while this can still cause access violation if the buffer is detached. I'm not sure what is the best way to implement this interface though. I guess this would be platform specific?</p>\n</blockquote>",
        "id": 473766704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727709146
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334#issuecomment-2383506216\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334\">issue #9334</a>:</p>\n<blockquote>\n<p>Yes memory can move under certain configurations of Wasmtime or for certain input modules. It looks like you're hooking up Wasmtime as the wasm implementation for a JS engine (quickjs I think?), and if that's the case it's likely going to be relatively tricky to do so. You're already afield of Wasmtime's/Rust's safety guarantees by allowing access of underlying memory outside of the lock of a <code>Store&lt;T&gt;</code>, so you'll have to be careful to juggle that to make sure an <code>ArrayBuffer</code> never aliases an operation on a memory, for example. </p>\n<p>I might recommend implementing your own <a href=\"https://docs.rs/wasmtime/latest/wasmtime/trait.MemoryCreator.html\"><code>MemoryCreator</code></a> where the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/trait.LinearMemory.html\"><code>LinearMemory</code></a> trait can provide you the hook you need to know when growth happens so you know when to invalidate the <code>ArrayBuffer</code>.</p>\n</blockquote>",
        "id": 473768637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727709607
    },
    {
        "content": "<p>stevefan1999-personal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334#issuecomment-2383508902\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334\">issue #9334</a>:</p>\n<blockquote>\n<p>Oh yes, I see at least in Windows and *nix, for <code>data_ptr</code> to change is only possible when the requested grow is beyond the existing preallocated max (if supplied), which means it apparently has a bigger size than the VirtualAlloc in the initial memory creation, for example, because it uses VirtualAlloc so if the grow size is within range, we can just use VirtualProtect and add RWX bit back on it to get a congruent memory. </p>\n</blockquote>",
        "id": 473768885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727709670
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334#issuecomment-2383552693\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9334\">issue #9334</a>:</p>\n<blockquote>\n<p>Regardless of underlying implementation details, what Alex is getting at (and what I would re-emphasize) is the difference between incidental details and API-contractual details. We don't <em>guarantee</em> anything about when the base pointer might change; and we might change those details in the future, if there is a good reason to do so. The only way one should use the public Wasmtime API is by assuming it could change after any memory-grow event (thus any Wasm execution), or as Alex notes, using the other interface we have for this purpose, which lets you control the details of the memory implementation by owning the memory.</p>\n<p>Said more succinctly: please don't bake in dependencies on our internal implementation details, because they may change!</p>\n</blockquote>",
        "id": 473774993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727710802
    }
]