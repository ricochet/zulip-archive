[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a> from <code>bytecodealliance:pch/release-9-wasi-rights-read-write</code> to <code>bytecodealliance:release-9.0.0</code>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6265\">https://github.com/bytecodealliance/wasmtime/pull/6265</a> introduced a regression with programs using wasi-libc, reported at <a href=\"https://github.com/WebAssembly/wasi-libc/issues/415\">https://github.com/WebAssembly/wasi-libc/issues/415</a>.</p>\n<p>Wasi-libc read the rights of the base directory (using <code>fd_fdstat_get</code>) and used those to mask the rights requested to <code>path_open</code>. In 6265, I changed the behavior of fdstat_get to always report and empty set of rights. This means that Wasi-libc will always pass an empty set of rights to <code>path_open</code>, which is a problem because the <code>FD_READ</code> and <code>FD_WRITE</code> rights are how path_open determines if a descriptor is to be opened for reading, writing, or both.</p>\n<p>The fix is as follows:</p>\n<ul>\n<li>directories always return the full set of rights in <code>fd_fdstat_get</code>.</li>\n<li>we record the access mode that a file is opened with, and use that to set the <code>FD_READ</code> and <code>FD_WRITE</code> bits in <code>fs_rights_base</code> for a file's <code>fd_fdstat_get</code>.</li>\n<li>A test demonstrates the behavior of the fdstat rights bits, and that opening for reading, writing, or reading and writing behaves correctly when calling <code>fd_read</code> and <code>fd_write</code></li>\n</ul>\n</blockquote>",
        "id": 361173640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685051979
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>.</p>",
        "id": 361173643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685051980
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>.</p>",
        "id": 361173644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685051980
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6265\">https://github.com/bytecodealliance/wasmtime/pull/6265</a> introduced a regression with programs using wasi-libc, reported at <a href=\"https://github.com/WebAssembly/wasi-libc/issues/415\">https://github.com/WebAssembly/wasi-libc/issues/415</a>.</p>\n<p>Wasi-libc read the rights of the base directory (using <code>fd_fdstat_get</code>) and used those to mask the rights requested to <code>path_open</code>. In 6265, I changed the behavior of fdstat_get to always report and empty set of rights. This means that Wasi-libc will always pass an empty set of rights to <code>path_open</code>, which is a problem because the <code>FD_READ</code> and <code>FD_WRITE</code> rights are how path_open determines if a descriptor is to be opened for reading, writing, or both.</p>\n<p>The fix is as follows:</p>\n<ul>\n<li>directories always return the full set of rights in <code>fd_fdstat_get</code>.</li>\n<li>we record the access mode that a file is opened with, and use that to set the <code>FD_READ</code> and <code>FD_WRITE</code> bits in <code>fs_rights_base</code> for a file's <code>fd_fdstat_get</code>.</li>\n<li>A test demonstrates the behavior of the fdstat rights bits, and that opening for reading, writing, or reading and writing behaves correctly when calling <code>fd_read</code> and <code>fd_write</code></li>\n</ul>\n<p>This PR is just for the <code>release-9.0.0</code> branch, I will work on upstreaming it to <code>main</code> but the situation there is slightly more complex because the test also needs to pass under the preview 2 implementation.</p>\n</blockquote>",
        "id": 361175717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685052853
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>.</p>",
        "id": 361179408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685054737
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>.</p>",
        "id": 361181411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685055887
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>.</p>",
        "id": 361188180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685060608
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462#pullrequestreview-1446331927\">PR review</a>.</p>",
        "id": 361341269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685110410
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462#pullrequestreview-1446466508\">PR review</a>.</p>",
        "id": 361361031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685114459
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>.</p>",
        "id": 361385621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685119802
    },
    {
        "content": "<p>squeek502 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462#issuecomment-2244157377\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>:</p>\n<blockquote>\n<p>The bug that this fixed seems to have been reintroduced. With <code>wasmtime 23.0.1</code> and <code>wasi-sdk 23.0</code>:</p>\n<p><code>open-rw.c</code>:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Note: using an `openat` call directly here with O_WRONLY or O_RDWR would have the same result</span>\n<span class=\"w\">    </span><span class=\"kt\">FILE</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fopen</span><span class=\"p\">(</span><span class=\"s\">\"testfile\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"w\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">fclose</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"shellsession\"><pre><span></span><code>$ ls testfile\ntestfile\n$ $WASI_SDK/bin/clang --sysroot=$WASI_SDK/share/wasi-sysroot open-rw.c -o open-rw-sdk.wasm\n$ strace -e trace=openat2 wasmtime --dir=. open-rw-sdk.wasm\nopenat2(3, \"testfile\", {flags=O_RDONLY|O_CLOEXEC, resolve=RESOLVE_NO_MAGICLINKS|RESOLVE_BENEATH}, 24) = 5\n+++ exited with 0 +++\n</code></pre></div>\n<p><code>wasmtime</code> is calling <code>openat2</code> with <code>RDONLY</code>, but <code>\"w\"</code> was passed as the access mode.</p>\n</blockquote>",
        "id": 453312696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721703604
    },
    {
        "content": "<p>squeek502 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462#issuecomment-2244157377\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>:</p>\n<blockquote>\n<p>The bug that this fixed seems to have been reintroduced. With <code>wasmtime 23.0.1</code> and <code>wasi-sdk 23.0</code>:</p>\n<p><code>open-w.c</code>:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">FILE</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fopen</span><span class=\"p\">(</span><span class=\"s\">\"testfile\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"w\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">fclose</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"shellsession\"><pre><span></span><code>$ ls testfile\ntestfile\n$ $WASI_SDK/bin/clang --sysroot=$WASI_SDK/share/wasi-sysroot open-w.c -o open-w-sdk.wasm\n$ strace -e trace=openat2 wasmtime --dir=. open-w-sdk.wasm\nopenat2(3, \"testfile\", {flags=O_RDONLY|O_LARGEFILE|O_CLOEXEC, resolve=RESOLVE_NO_MAGICLINKS|RESOLVE_BENEATH}, 24) = 11\n+++ exited with 0 +++\n</code></pre></div>\n<p><code>wasmtime</code> is calling <code>openat2</code> with <code>RDONLY</code>, but <code>\"w\"</code> was passed as the access mode.</p>\n</blockquote>",
        "id": 453314296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721704616
    },
    {
        "content": "<p>squeek502 deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462#issuecomment-2244157377\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6462\">PR #6462</a>:</p>\n<blockquote>\n<p>The bug that this fixed seems to have been reintroduced. With <code>wasmtime 23.0.1</code> and <code>wasi-sdk 23.0</code>:</p>\n<p><code>open-w.c</code>:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">FILE</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fopen</span><span class=\"p\">(</span><span class=\"s\">\"testfile\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"w\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">fclose</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"shellsession\"><pre><span></span><code>$ ls testfile\ntestfile\n$ $WASI_SDK/bin/clang --sysroot=$WASI_SDK/share/wasi-sysroot open-w.c -o open-w-sdk.wasm\n$ strace -e trace=openat2 wasmtime --dir=. open-w-sdk.wasm\nopenat2(3, \"testfile\", {flags=O_RDONLY|O_LARGEFILE|O_CLOEXEC, resolve=RESOLVE_NO_MAGICLINKS|RESOLVE_BENEATH}, 24) = 11\n+++ exited with 0 +++\n</code></pre></div>\n<p><code>wasmtime</code> is calling <code>openat2</code> with <code>RDONLY</code>, but <code>\"w\"</code> was passed as the access mode.</p>\n</blockquote>",
        "id": 453315200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721705165
    }
]