[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2254\">Issue #2254</a>:</p>\n<blockquote>\n<p>It arose in #2228 that our current implementation of the standard (SysV / AAPCS) calling convention on AArch64 is not quite right. In the real calling convention, the lower 64-bit halves of some vector registers are callee-save, while the upper 64-bit halves are caller-save. We currently treat them as fully callee-save. This is correct (if conservative) w.r.t. clobber-saves in prologue/epilogue code, but is incorrect w.r.t. callsites.</p>\n<p>The most correct fix is to support overlapping register classes in <a href=\"http://regalloc.rs\">regalloc.rs</a> (see bytecodealliance/regalloc.rs#98). However, in #2228, a simpler stopgap fix was proposed. This fix also requires a small modification to <a href=\"http://regalloc.rs\">regalloc.rs</a>, but simply to omit call instructions' defs/mods from the clobbered-register-set computation. If the caller and callee have the same ABI, then this is safe.</p>\n<p>If the full fix in <a href=\"http://regalloc.rs\">regalloc.rs</a> is not an easy change (it appears it will not be, as aliasing registers will interact in a fundamental way with the core allocation data structures) then IMHO we should implement the stopgap fix for now, so that when we call into library or other code, we don't have subtle correctness issues with half-clobbered vector values.</p>\n<p>cc @julian-seward1, @bnjbvr, @akirilov-arm </p>\n</blockquote>",
        "id": 211991547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601597680
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2254\">Issue #2254</a>:</p>\n<blockquote>\n<p>It arose in #2228 that our current implementation of the standard (SysV / AAPCS) calling convention on AArch64 is not quite right. In the real calling convention, the lower 64-bit halves of some vector registers are callee-save, while the upper 64-bit halves are caller-save. We currently treat them as fully callee-save. This is correct (if conservative) w.r.t. clobber-saves in prologue/epilogue code, but is incorrect w.r.t. callsites.</p>\n<p>The most correct fix is to support overlapping register classes in <a href=\"http://regalloc.rs\">regalloc.rs</a> (see bytecodealliance/regalloc.rs#98). However, in #2228, a simpler stopgap fix was proposed. This fix also requires a small modification to <a href=\"http://regalloc.rs\">regalloc.rs</a>, but simply to omit call instructions' defs/mods from the clobbered-register-set computation. If the caller and callee have the same ABI, then this is safe.</p>\n<p>If the full fix in <a href=\"http://regalloc.rs\">regalloc.rs</a> is not an easy change (it appears it will not be, as aliasing registers will interact in a fundamental way with the core allocation data structures) then IMHO we should implement the stopgap fix for now, so that when we call into library or other code, we don't have subtle correctness issues with half-clobbered vector values.</p>\n<p>cc @julian-seward1, @bnjbvr, @akirilov-arm </p>\n</blockquote>",
        "id": 211991548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601597680
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2254\">Issue #2254</a>:</p>\n<blockquote>\n<p>It arose in #2228 that our current implementation of the standard (SysV / AAPCS) calling convention on AArch64 is not quite right. In the real calling convention, the lower 64-bit halves of some vector registers are callee-save, while the upper 64-bit halves are caller-save. We currently treat them as fully callee-save. This is correct (if conservative) w.r.t. clobber-saves in prologue/epilogue code, but is incorrect w.r.t. callsites.</p>\n<p>The most correct fix is to support overlapping register classes in <a href=\"http://regalloc.rs\">regalloc.rs</a> (see bytecodealliance/regalloc.rs#98). However, in #2228, a simpler stopgap fix was proposed. This fix also requires a small modification to <a href=\"http://regalloc.rs\">regalloc.rs</a>, but simply to omit call instructions' defs/mods from the clobbered-register-set computation. If the caller and callee have the same ABI, then this is safe.</p>\n<p>If the full fix in <a href=\"http://regalloc.rs\">regalloc.rs</a> is not an easy change (it appears it will not be, as aliasing registers will interact in a fundamental way with the core allocation data structures) then IMHO we should implement the stopgap fix for now, so that when we call into library or other code, we don't have subtle correctness issues with half-clobbered vector values.</p>\n<p>cc @julian-seward1, @bnjbvr, @akirilov-arm </p>\n</blockquote>",
        "id": 212495155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602024173
    }
]