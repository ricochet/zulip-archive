[
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#issuecomment-741745521\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488\">Issue #2488</a>:</p>\n<blockquote>\n<blockquote>\n<p>By defining the endianness in a ternary way (with <code>native</code> as an option) I think we can keep the text format and builder interface backward-compatible; we can accept the new <code>big</code>/<code>little</code> options in the text format, and we can accept <code>MemFlags</code> with explicit endianness if the client desires. But current code doesn't break or regress in performance. @uweigand has done the hard part of plumbing flags through, so we shouldn't drop them once they reach the backend; and in <code>cranelift-wasm</code> we can carefully audit codegen to ensure we specify little-endianness.</p>\n</blockquote>\n<p>Well, I'd be happy to implement that option as well.   Just one question to clarify: when adding a <code>native</code> option, should that have to be specified explicitly, i.e. something like <code>MemFlags::new(Endianness::Native)</code>  or should we go back to allowing plain <code>MemFlags::new()</code> which would implicitly mean native endianness?<br>\n</p>\n</blockquote>",
        "id": 219330415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607517625
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#issuecomment-741760839\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488\">Issue #2488</a>:</p>\n<blockquote>\n<p><code>MemFlags::new()</code> would look nicer, but <code>MemFlags::new(Endianness::Native)</code> would make it harder for optimizations to use the wrong endianness.</p>\n</blockquote>",
        "id": 219333594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607519517
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#issuecomment-741855276\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488\">Issue #2488</a>:</p>\n<blockquote>\n<p>I've created a new PR #2492 that implements optional endianness markers in MemFlags.  This is the <code>MemFlags::new()</code> approach for now -- obviously that results in a drastically smaller patch.</p>\n<p>Let me know if you'd prefer the <code>MemFlags::new(Endianness::Native)</code> version instead.</p>\n</blockquote>",
        "id": 219353345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607528436
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#issuecomment-741900345\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488\">Issue #2488</a>:</p>\n<blockquote>\n<p>Thanks @uweigand -- I do like the alternative (with-native-option) approach better, I think; anyone else. have thoughts on this  (@sunfishcode has thought about determinism I know; @julian-seward1 and maybe others in the last CL call)?</p>\n</blockquote>",
        "id": 219364075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607532607
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#issuecomment-744737081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488\">Issue #2488</a>:</p>\n<blockquote>\n<p>Closed after merging the alternative #2492 (thanks for doing the work on both options and the patience during review!).</p>\n</blockquote>",
        "id": 219908035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607983204
    }
]