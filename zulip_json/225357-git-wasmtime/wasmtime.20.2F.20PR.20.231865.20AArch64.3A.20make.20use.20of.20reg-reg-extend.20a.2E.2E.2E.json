[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865\">PR #1865</a> from <code>aarch64-amode-reg-reg-extend</code> to <code>master</code>:</p>\n<blockquote>\n<p>When a load/store instruction needs an address of the form <code>v0 +\nuextend(v1)</code> or <code>v0 + sextend(v1)</code> (or the commuted forms thereof), we<br>\ncurrently generate a separate zero/sign-extend operation and then use a<br>\nplain <code>[rA, rB]</code> addressing mode. This patch extends <code>lower_address()</code><br>\nto look at both addends of an address if it has two addends and a zero<br>\noffset, recognize extension operations, and incorporate them directly<br>\ninto a <code>[rA, rB, UXTW]</code> or <code>[rA, rB, SXTW]</code> form. This should improve<br>\nour performence on WebAssembly workloads, at least, because we often see<br>\na 64-bit linear memory base indexed by a 32-bit (Wasm) pointer value.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 200593823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591903844
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865\">PR #1865</a>.</p>",
        "id": 200593824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591903844
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865#pullrequestreview-429703309\">PR Review</a>.</p>",
        "id": 200664295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591965401
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865#pullrequestreview-429703309\">PR Review</a>.</p>",
        "id": 200664296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591965401
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865#discussion_r439391180\">PR Review Comment</a>:</p>\n<blockquote>\n<p>These 4 clauses computing <code>parts</code> are a bit duplication-ful.  If the logic gets extended at some point to deal with 16- or 8-bit indices, it'll be even worse.  Hence: is there some way to reduce the level duplication, without making it harder to follow?</p>\n</blockquote>",
        "id": 200664297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591965401
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865\">PR #1865</a> from <code>aarch64-amode-reg-reg-extend</code> to <code>master</code>:</p>\n<blockquote>\n<p>When a load/store instruction needs an address of the form <code>v0 +\nuextend(v1)</code> or <code>v0 + sextend(v1)</code> (or the commuted forms thereof), we<br>\ncurrently generate a separate zero/sign-extend operation and then use a<br>\nplain <code>[rA, rB]</code> addressing mode. This patch extends <code>lower_address()</code><br>\nto look at both addends of an address if it has two addends and a zero<br>\noffset, recognize extension operations, and incorporate them directly<br>\ninto a <code>[rA, rB, UXTW]</code> or <code>[rA, rB, SXTW]</code> form. This should improve<br>\nour performence on WebAssembly workloads, at least, because we often see<br>\na 64-bit linear memory base indexed by a 32-bit (Wasm) pointer value.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 200695842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591981060
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865#pullrequestreview-429899263\">PR Review</a>.</p>",
        "id": 200695936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591981094
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865#discussion_r439537028\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Sure, factored out (i) the signed/unsigned duality, with a new helper <code>maybe_input_insn_multi</code>; and (ii) the two commutative cases, with a for-loop. Thanks!</p>\n</blockquote>",
        "id": 200695937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591981094
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865\">PR #1865</a> from <code>aarch64-amode-reg-reg-extend</code> to <code>master</code>:</p>\n<blockquote>\n<p>When a load/store instruction needs an address of the form <code>v0 +\nuextend(v1)</code> or <code>v0 + sextend(v1)</code> (or the commuted forms thereof), we<br>\ncurrently generate a separate zero/sign-extend operation and then use a<br>\nplain <code>[rA, rB]</code> addressing mode. This patch extends <code>lower_address()</code><br>\nto look at both addends of an address if it has two addends and a zero<br>\noffset, recognize extension operations, and incorporate them directly<br>\ninto a <code>[rA, rB, UXTW]</code> or <code>[rA, rB, SXTW]</code> form. This should improve<br>\nour performence on WebAssembly workloads, at least, because we often see<br>\na 64-bit linear memory base indexed by a 32-bit (Wasm) pointer value.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 200700952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591983670
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1865\">PR #1865</a>.</p>",
        "id": 200710702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591988318
    }
]