[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6055\">issue #6055</a>:</p>\n<blockquote>\n<p>Right now we legalize them into a conditional jump to a cold block with a trap intruction early on in the pipeline.</p>\n<p>But every backend already has some variant of <code>MInst.TrapIf</code>, which is the same as <code>trapnz</code>, so it would be easy to support in lowering if we wanted to move it there.</p>\n<p>Benefits:</p>\n<ul>\n<li>\n<p>Not introducing a bunch of extra blocks makes compilation faster for everyone.</p>\n</li>\n<li>\n<p>It is also the only legalization that currently introduces new blocks, which is something ISLE can't do right now, and therefore is preventing us from porting legalization to ISLE.</p>\n</li>\n<li>\n<p>Finally it makes it so we could mark <code>trapnz</code> as having idempotent side effects which would allow us to GVN them. This would further improve bounds checks on multiple loads of the same dynamic index with differing static offsets for the non-Spectre case (e.g. what is talked about as next steps in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6031\">https://github.com/bytecodealliance/wasmtime/pull/6031</a>)</p>\n</li>\n</ul>\n</blockquote>",
        "id": 342650967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679081609
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6055\">issue #6055</a>:</p>\n<blockquote>\n<p>Right now we legalize them into a conditional jump to a cold block with a trap intruction early on in the pipeline.</p>\n<p>But every backend already has some variant of <code>MInst.TrapIf</code>, which is the same as <code>trapnz</code>, so it would be easy to support in lowering if we wanted to move it there.</p>\n<p>Benefits:</p>\n<ul>\n<li>\n<p>Not introducing a bunch of extra blocks makes compilation faster for everyone.</p>\n</li>\n<li>\n<p>It is also the only legalization that currently introduces new blocks, which is something ISLE can't do right now, and therefore is preventing us from porting legalization to ISLE.</p>\n</li>\n<li>\n<p>Finally it makes it so we could mark <code>trapnz</code> as having idempotent side effects which would allow us to GVN them. This would further improve bounds checks on multiple loads of the same dynamic index with differing static offsets for the non-Spectre case (e.g. what is talked about as next steps in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6031\">https://github.com/bytecodealliance/wasmtime/pull/6031</a>)</p>\n</li>\n</ul>\n</blockquote>",
        "id": 342650969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679081609
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6055\">issue #6055</a>:</p>\n<blockquote>\n<p>Right now we legalize them into a conditional jump to a cold block with a trap intruction early on in the pipeline.</p>\n<p>But every backend already has some variant of <code>MInst.TrapIf</code>, which is the same as <code>trapnz</code>, so it would be easy to support in lowering if we wanted to move it there.</p>\n<p>Benefits:</p>\n<ul>\n<li>\n<p>Not introducing a bunch of extra blocks makes compilation faster for everyone.</p>\n</li>\n<li>\n<p>It is also the only legalization that currently introduces new blocks, which is something ISLE can't do right now, and therefore is preventing us from porting legalization to ISLE.</p>\n</li>\n<li>\n<p>Finally it makes it so we could mark <code>trapnz</code> as having idempotent side effects which would allow us to GVN them. This would further improve bounds checks on multiple loads of the same dynamic index with differing static offsets for the non-Spectre case (e.g. what is talked about as next steps in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6031\">https://github.com/bytecodealliance/wasmtime/pull/6031</a>)</p>\n</li>\n</ul>\n</blockquote>",
        "id": 342650970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679081610
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6055#issuecomment-1474314327\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6055\">issue #6055</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 342651102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679081662
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6055\">issue #6055</a>:</p>\n<blockquote>\n<p>Right now we legalize them into a conditional jump to a cold block with a trap intruction early on in the pipeline.</p>\n<p>But every backend already has some variant of <code>MInst.TrapIf</code>, which is the same as <code>trapnz</code>, so it would be easy to support in lowering if we wanted to move it there.</p>\n<p>Benefits:</p>\n<ul>\n<li>\n<p>Not introducing a bunch of extra blocks makes compilation faster for everyone.</p>\n</li>\n<li>\n<p>It is also the only legalization that currently introduces new blocks, which is something ISLE can't do right now, and therefore is preventing us from porting legalization to ISLE.</p>\n</li>\n<li>\n<p>Finally it makes it so we could mark <code>trapnz</code> as having idempotent side effects which would allow us to GVN them. This would further improve bounds checks on multiple loads of the same dynamic index with differing static offsets for the non-Spectre case (e.g. what is talked about as next steps in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6031\">https://github.com/bytecodealliance/wasmtime/pull/6031</a>)</p>\n</li>\n</ul>\n</blockquote>",
        "id": 473388506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727560624
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6055#issuecomment-2381004782\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6055\">issue #6055</a>:</p>\n<blockquote>\n<p>Fixed in #0972</p>\n</blockquote>",
        "id": 473388507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727560625
    }
]