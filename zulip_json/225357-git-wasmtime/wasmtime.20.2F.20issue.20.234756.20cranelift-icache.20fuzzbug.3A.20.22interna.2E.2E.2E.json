[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">OperandSize</span>: <span class=\"mi\">16</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">inst</span><span class=\"o\">/</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1802</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/blob/d620705a323e3da59bd90473b4e627c8502b1255/cranelift/codegen/src/isa/x64/inst/args.rs#L1802):18</span>\n</code></pre></div>\n<p>Discovered on oss-fuzz (<a href=\"https://oss-fuzz.com/testcase-detail/6676165556830208\">https://oss-fuzz.com/testcase-detail/6676165556830208</a>)</p>\n<p><code>base64 -d</code> to decode input:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"n\">g</span><span class=\"c1\">////AAD/ARQE</span>\n</code></pre></div>\n<p>cc @bnjbvr </p>\n</blockquote>",
        "id": 294895906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661269697
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756#issuecomment-1224299058\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<p>According to <code>cargo fuzz fmt cranelift-icache</code>, this is the function being tested:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">SingleFunction</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">udiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 294902229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661271535
    },
    {
        "content": "<p>jameysharp edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756#issuecomment-1224299058\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<p>According to <code>cargo fuzz fmt cranelift-icache</code>, this is the function being tested:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">SingleFunction</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">udiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So the x64 backend is just refusing to compile an i128 udiv.</p>\n</blockquote>",
        "id": 294902610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661271651
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756#issuecomment-1225293906\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<p>Yep, this is an internal panic (not even an error propagated up to callers), and I'm afraid that the icache fuzz target, as it directly generates CLIF code (as opposed to other fuzz targets which generate wasm code translated to CLIF) will keep on hitting those things that haven't been implemented because they weren't useful for wasm. (I guess that's the same situation cg_clif would be facing if it was being fuzzed.)</p>\n<p>The overall solution I can think of is to make all those <code>Result</code> and propagate up errors, but that might add lots of error checking in many places in the code base, so I wonder if it's worth doing. Do other people have other ideas that come to mind?</p>\n</blockquote>",
        "id": 294991318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661325173
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756#issuecomment-1225311274\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<blockquote>\n<p>I guess that's the same situation cg_clif would be facing if it was being fuzzed.</p>\n</blockquote>\n<p>Yeah, I think so too.</p>\n<blockquote>\n<p>Do other people have other ideas that come to mind?</p>\n</blockquote>\n<p>What first came to mind was implementing the i128 div/rem ops, but another solution is to prevent the function generator from building i128 ops. We've disabled ops in the past where the x64 backend isn't ready to deal with them yet.</p>\n<p>Although if we do disable those ops, we shouldn't commit that PR just yet, for the same reasons as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4752#issuecomment-1224326672\">https://github.com/bytecodealliance/wasmtime/pull/4752#issuecomment-1224326672</a> It will mark all issues as fixed in OSS Fuzz and then probably create dups in the future.</p>\n<p>This would solve this immediate issue, but not the overall solution of not panicking during compilation (which I think is a great idea, but probably not for now!)</p>\n</blockquote>",
        "id": 294993350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661326295
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756#issuecomment-1225311274\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<blockquote>\n<p>I guess that's the same situation cg_clif would be facing if it was being fuzzed.</p>\n</blockquote>\n<p>Yeah, I think so too.</p>\n<blockquote>\n<p>Do other people have other ideas that come to mind?</p>\n</blockquote>\n<p>What first came to mind was implementing the i128 div/rem ops, but another solution is to prevent the function generator from building i128 div/rem ops. We've disabled ops in the past where the x64 backend isn't ready to deal with them yet.</p>\n<p>Although if we do disable those ops, we shouldn't commit that PR just yet, for the same reasons as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4752#issuecomment-1224326672\">https://github.com/bytecodealliance/wasmtime/pull/4752#issuecomment-1224326672</a> It will mark all issues as fixed in OSS Fuzz and then probably create dups in the future.</p>\n<p>This would solve this immediate issue, but not the overall solution of not panicking during compilation (which I think is a great idea, but probably not for now!)</p>\n</blockquote>",
        "id": 294993758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661326503
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756#issuecomment-1225311274\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<blockquote>\n<p>I guess that's the same situation cg_clif would be facing if it was being fuzzed.</p>\n</blockquote>\n<p>cg_clif specifically lowers these ops directly into a libcall, so it never hits this path. But this probably could have also been reported in the fuzzgen differential fuzzer since they share pretty much the same code paths.</p>\n<blockquote>\n<p>Do other people have other ideas that come to mind?</p>\n</blockquote>\n<p>What first came to mind was implementing the i128 div/rem ops, but another solution is to prevent the function generator from building i128 div/rem ops. We've disabled ops in the past where the x64 backend isn't ready to deal with them yet.</p>\n<p>Although if we do disable those ops, we shouldn't commit that PR just yet, for the same reasons as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4752#issuecomment-1224326672\">https://github.com/bytecodealliance/wasmtime/pull/4752#issuecomment-1224326672</a> It will mark all issues as fixed in OSS Fuzz and then probably create dups in the future.</p>\n<p>This would solve this immediate issue, but not the overall solution of not panicking during compilation (which I think is a great idea, but probably not for now!)</p>\n</blockquote>",
        "id": 294997978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661328502
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756#issuecomment-1226298353\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<p>Yes, the ideal answer here is that the verifier is the one gate that determines/defines what is valid CLIF; and if valid, then a correct backend can compile it. Anything less than that is <em>in theory</em> a temporary situation, a place where we either want to eventually fill out the backend or reduce the scope of valid CLIF at the verifier level (by changing the definitions in the meta crate).</p>\n<p>I don't necessarily think introducing <code>Result</code>s all the way up is the right answer here if the semantics we eventually want are that the verifier is the single source of acceptability; but what we can and should do probably soon is to try to close the gap between the verifier and backends' ideas of \"acceptable\".</p>\n<p>If we don't expect to actually use <code>i128.div</code> or <code>i128.rem</code> anywhere, I'm ok with deleting this case by modifying the instruction definitions accordingly. It feels a little non-orthogonal, but then, maintaining actually-unused code is not a great feeling (or good use of time) either.</p>\n</blockquote>",
        "id": 295123513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661373773
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756#issuecomment-1226446522\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<p>Based on the discussion in #4771, I think it's better to keep the 128-bit versions of division operators: cg_clif needs them and is currently working around their absence by generating function calls to compiler-builtins implementations. I like Afonso's suggestion of having Cranelift implement these instructions as libcalls, although it sounds like there are some potential issues there.</p>\n</blockquote>",
        "id": 295132800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661377988
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4756\">issue #4756</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">OperandSize</span>: <span class=\"mi\">16</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">inst</span><span class=\"o\">/</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1802</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/blob/d620705a323e3da59bd90473b4e627c8502b1255/cranelift/codegen/src/isa/x64/inst/args.rs#L1802):18</span>\n</code></pre></div>\n<p>Discovered on oss-fuzz (<a href=\"https://oss-fuzz.com/testcase-detail/6676165556830208\">https://oss-fuzz.com/testcase-detail/6676165556830208</a>)</p>\n<p><code>base64 -d</code> to decode input:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"n\">g</span><span class=\"c1\">////AAD/ARQE</span>\n</code></pre></div>\n<p>cc @bnjbvr </p>\n</blockquote>",
        "id": 296003856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661808593
    }
]