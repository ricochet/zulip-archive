[
    {
        "content": "<p>whitequark opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>The implementation uses the value of <code>metadataHash</code> as <code>st_ino</code>:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/225d20efe387bc3f4052ec3115125380f9c59774/crates/wasi-preview1-component-adapter/src/lib.rs#L950-L951\">https://github.com/bytecodealliance/wasmtime/blob/225d20efe387bc3f4052ec3115125380f9c59774/crates/wasi-preview1-component-adapter/src/lib.rs#L950-L951</a></p>\n<p>This is unsound. To quote the documentation for <code>metadataHash</code>:</p>\n<blockquote>\n<p>Return a hash of the metadata associated with a filesystem object referred to by a descriptor.</p>\n<p>This returns a hash of the last-modification timestamp and file size, and may also include the inode number, device number, birth timestamp, and other metadata fields that may change when the file is modified or replaced. It may also include a secret value chosen by the implementation and not otherwise exposed.</p>\n<p>Implementations are encourated to provide the following properties:</p>\n<p>If the file is not modified or replaced, the computed hash value should usually not change.<br>\nIf the object is modified or replaced, the computed hash value should usually change.<br>\nThe inputs to the hash should not be easily computable from the computed hash.<br>\nHowever, none of these is required.</p>\n</blockquote>\n<p>Applications will commonly use <code>st1.st_ino == st2.st_ino</code> in order to determine if two files are the same (for example, Clang does it). My implementation of <code>metadataHash</code>, which always returns 0 and is compliant with the definition above, caused the combination of Clang and the wasip1 component adapter, to always treat all read files as the same file (which in practice meant the first <code>#include</code> caused an infinite loop).</p>\n</blockquote>",
        "id": 451379602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720988649
    },
    {
        "content": "<p>whitequark edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>The implementation uses the value of <code>metadataHash</code> as <code>st_ino</code>:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/225d20efe387bc3f4052ec3115125380f9c59774/crates/wasi-preview1-component-adapter/src/lib.rs#L950-L951\">https://github.com/bytecodealliance/wasmtime/blob/225d20efe387bc3f4052ec3115125380f9c59774/crates/wasi-preview1-component-adapter/src/lib.rs#L950-L951</a></p>\n<p>This is unsound. To quote the documentation for <code>metadataHash</code>:</p>\n<blockquote>\n<p>Return a hash of the metadata associated with a filesystem object referred to by a descriptor.</p>\n<p>This returns a hash of the last-modification timestamp and file size, and may also include the inode number, device number, birth timestamp, and other metadata fields that may change when the file is modified or replaced. It may also include a secret value chosen by the implementation and not otherwise exposed.</p>\n<p>Implementations are encourated to provide the following properties:</p>\n<ul>\n<li>If the file is not modified or replaced, the computed hash value should usually not change.</li>\n<li>If the object is modified or replaced, the computed hash value should usually change.</li>\n<li>The inputs to the hash should not be easily computable from the computed hash.</li>\n</ul>\n<p>However, none of these is required.</p>\n</blockquote>\n<p>Applications will commonly use <code>st1.st_ino == st2.st_ino</code> in order to determine if two files are the same (for example, Clang does it). My implementation of <code>metadataHash</code>, which always returns 0 and is compliant with the definition above, caused the combination of Clang and the wasip1 component adapter, to always treat all read files as the same file (which in practice meant the first <code>#include</code> caused an infinite loop).</p>\n</blockquote>",
        "id": 451379614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720988674
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2227474590\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>It's unclear to me how to provide the desired semantics (<code>st1.st_ino == st2.st_ino</code> iff <code>isSameObject(f1, f2)</code>), or, in fact, any reasonable semantics that doesn't make private assumptions about the exact value of <code>metadataHash</code> (i.e. any sound semantics). It's pretty late though so I may be missing something obvious.</p>\n</blockquote>",
        "id": 451379861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720988924
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2227476903\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>On reflection, I think the intended behavior here is to maintain a mapping from <code>metadataHash</code> to \"potential files\" (i.e. both files corresponding to file descriptors, and files that could be opened from a directory descriptor) that have previously been stat'd or opened, and to assign each \"potential file\" a fresh inode value.</p>\n</blockquote>",
        "id": 451380471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720989566
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2227476903\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>On reflection, I think the intended behavior here is to maintain a mapping from <code>metadataHash</code> to \"potential files\" (i.e. both files corresponding to file descriptors, and files that could be opened from a directory descriptor) that have previously been stat'd or opened, and to assign each \"potential file\" a fresh inode value.</p>\n<p>This would still be problematic, in a subtler way: nothing in the documentation for <code>metadataHash</code> implies that always returning 0 may lead to undesirable performance implications down the line. Normally, we treat quadratic behavior arising in hash tables as a security issue in cases like this! So clearly either this implementation also doesn't work, or the contract for <code>metadataHash</code> must be amended.</p>\n</blockquote>",
        "id": 451380905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720990015
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2227484048\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>On more reflection, since <code>metadataHash</code> changes if the file is modified, it can't be used to index into such a table, so we're back to <code>fd_filestat_get</code> can't be sound.</p>\n<p>How was this supposed to be implemented?</p>\n</blockquote>",
        "id": 451382246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720991551
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2228869417\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>I can link <a href=\"https://github.com/WebAssembly/wasi-filesystem/pull/81\">https://github.com/WebAssembly/wasi-filesystem/pull/81</a> as more possible background on this, but I don't have any extra info beyond that.</p>\n</blockquote>",
        "id": 451535595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721059671
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2229053903\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Like Alex, the only understanding I have of this topic is from PR 81 on the spec. It is quite possible that both the spec and our implementation are questionable, and that you are the first person to encounter problems with it in the wild. I don't have the expertise or time to devote to really digging into what the best path forward here is right now. Dan is out on leave right now, so I'm standing in as a wasi-filesystem champion in his absence, and I will defer to your judgement for changes to the spec and/or implementation.</p>\n</blockquote>",
        "id": 451569528,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721065452
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2229065788\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Thank you. I've been feeling not the best lately, and this has directly impacted my ability to reason on really intricate topics like this one. I'll keep this issue on my radar and try to work out a way forward that works for everyone involved. I do not yet have any firm conclusions and I'll need a deeper understanding of the topic and more consultation with others before I'll have them.</p>\n<p>Something that I noticed seems to have been an omission is the question of polyfilling the APIs. In one direction it's straightforward: wasip2 can be done on top of wasip1 easily. But it seems like nobody has drilled in detail into how to emulate wasip1 on top of wasip2, and given the state of the ecosystem (LLVM only directly knowing how to emit wasip1 binaries with wasip2 requiring a post-processing step) I think that's actually the more important direction?</p>\n<p>@pchickey Do you think there is possibility or appetite for a sort of \"sidecar\" specification that builds on top of wasip2 in order to provide a sound polyfill for <code>fd_filestat_get</code> where if it's not available then <code>st_dev</code>/<code>st_ino</code> end up having zeroes in them? Or should I not consider that as a possible direction?</p>\n</blockquote>",
        "id": 451572174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721065868
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2229380098\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Oh that's actually the most important direction for us, too, implementing p1 on top of p2. The crate you linked in the OP is the current canonical source for implementing p1 on top of p2 within wasm. There's a host-side implementation at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/preview1.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/preview1.rs</a> as well where the p1 APIs are all defined primarily in terms of their p2 counterparts.</p>\n<p>Modifying the adapter (<code>wasi_snapshot_preview1.wasm</code>) is quite difficult, however, as it's written in \"Rust\" but that's in quotes because you can't do a lot you can do in normal Rust (e.g. use a hash map). Allocations are very carefully managed and such, so doing something fancy with <code>std_{dev,ino}</code> when <code>metadata_hash</code> is zero is probably going to be difficult.</p>\n</blockquote>",
        "id": 451626441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721076008
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2229402453\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Agreed with Alex: implementing p1 on top of p2 is an important direction. There are some places we are choosing to do that with low fidelity (the whole rights system in p1 is a mess and we want to leave it behind as much as possible, but it ends up mattering for corner cases where wasi-libc ended up depending on it) but I think this case matters a whole lot more.</p>\n<p>As for the incompleteness of the wasip2 support in wasi-libc, so that LLVM could emit a purely wasip2 binary, thats something thats \"just\" gated on someone who can work on wasi-libc having the time to do so, which is why it has stalled the last few months. We do consider that important to get done at some point, Alex has been filling in some related missing pieces recently, mostly focusing on the parts the Rust toolchain will need.</p>\n</blockquote>",
        "id": 451627560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721076410
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2229628318\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<blockquote>\n<p>Allocations are very carefully managed and such, so doing something fancy with <code>std_{dev,ino}</code> when <code>metadata_hash</code> is zero is probably going to be difficult.</p>\n</blockquote>\n<p>In this case, given how p1 and p2 are defined, there must be a spec change to maintain soundness.</p>\n</blockquote>",
        "id": 451650934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721087065
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2229628318\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<blockquote>\n<p>Allocations are very carefully managed and such, so doing something fancy with <code>std_{dev,ino}</code> when <code>metadata_hash</code> is zero is probably going to be difficult.</p>\n</blockquote>\n<p>In this case, given how p1 and p2 are defined, there must be a spec change to maintain soundness. For example there could be an additional wit interface that returns an arbitrary 128-bit unique identifier for a descriptor or a descriptor based path that is then stuffed into <code>st_dev</code>/<code>st_ino</code>.</p>\n</blockquote>",
        "id": 451651046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721087148
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2230724282\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>I think a backstop solution that prevents the most egregious misbehavior (e.g. Clang considering every input file as the same) is to use a monotonically increasing global counter for filling in <code>st_dev</code>/<code>st_ino</code>. I can't think of any application where this would fail as badly, though of course this is still not a reasonable behavior for <code>stat</code> to exhibit. It's possible though that the reason I can't think of them is because my experience is limited still.</p>\n</blockquote>",
        "id": 451744263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721131573
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2230724282\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>I think a backstop solution that prevents the most egregious consequences (e.g. Clang considering every input file as the same) is to use a monotonically increasing global counter for filling in <code>st_dev</code>/<code>st_ino</code>. I can't think of any application where this would fail as badly, though of course this is still not a reasonable behavior for <code>stat</code> to exhibit. It's possible though that the reason I can't think of them is because my experience is limited still.</p>\n</blockquote>",
        "id": 451744285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721131584
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231092611\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Could you perhaps hash the filename in the meantime? And pretend that each filename is its own unique dev/ino?</p>\n</blockquote>",
        "id": 451773899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721140779
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231103801\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>What about <code>fstat</code>?</p>\n</blockquote>",
        "id": 451775095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721141080
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231103801\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>What about <code>fstat</code>?</p>\n<p>I guess <code>st_dev</code> would be the fd and <code>st_ino</code> would be the hash of a filename, if any, opened off that fd.</p>\n</blockquote>",
        "id": 451775224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721141117
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231110041\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Ah sorry I'm assuming that the structure you're maintaining on the host corresponding to the file would contain the hashed filename or the full filename or something like that. If all you have is the fd and nothing else I don't know what would be done.</p>\n</blockquote>",
        "id": 451775591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721141244
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231121253\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Oh there is a misunderstanding. What I was considering is the ability to solve this issue in the preview1 component adapter for an arbitrary host. In my particular host I have basically added fake but consistent inodes to everything and my code works fine now; it's not a blocker for me personally, I'm raising this because it is an ecosystem health issue.</p>\n</blockquote>",
        "id": 451776664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721141548
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231121253\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Oh there is a misunderstanding. What I was considering is the ability to solve this issue in the preview1 component adapter for an arbitrary host. In my particular host I have basically added fake but consistent inodes to everything, I return them as the metadata hash lower (in accordance with what the adapter currently does) and my code works fine now; it's not a blocker for me personally, I'm raising this because it is an ecosystem health issue.</p>\n</blockquote>",
        "id": 451776754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721141572
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231132059\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Ah makes sense. I would personally come to the same conclusion as you then that there's no way to actually \"fix\" things without changing the standard and/or docs there. Given the weak guarantees of <code>metadata-hash</code> and the strong guarantees of <code>st_{dev,ino}</code> I don't know how the adapter can work.</p>\n<p>One possibility would be to add something which indicates whether <code>metadata-hash</code> is \"strong\", e.g. is suitable as-is for <code>st_{dev,ino}</code>. In such a situation the adapter could set dev/ino based on <code>metadata-hash</code>. If the \"strong\" bit is false then the hash of the filename plus whatever metadata-hash is could perhaps be used for dev/ino. That's just a guess though and is still sort of situation solving this. In any case this is probably best left for discussion on wasi-filesystem itself at this point.</p>\n</blockquote>",
        "id": 451777749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721141836
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231138943\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>I agree, which one of us should kick off that discussion?</p>\n</blockquote>",
        "id": 451778590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721142025
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231471911\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>If you wouldn't mind I'd defer to you as I fear I wouldn't have enough context on this</p>\n</blockquote>",
        "id": 451819311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721151652
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231503491\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>Potentially bad idea, but I'm curious if it spawns other thinking: what if the inode were synthesized from an actual hash of file contents?</p>\n<p>Basically, imagine the filesystem like a content-addressed store (e.g. git). The inode is then just the hash that addresses some content.</p>\n<p>This certainly satisfies the \"check the inode and timestamp first to see if it's the same file contents\" use-case; it's no worse than what one would have to do manually to verify same file contents in the absence of an inode/timestamp, i.e., actually read the data.</p>\n<p>It's also conceptually \"minimal\" in the sense that it doesn't require any properties or guarantees from the p2 API.</p>\n<p>The main downside is that it's slow: it does not satisfy what the user expects to be an O(1)-ish metadata check. This is especially an issue since the inode number must be provided as the result of a stat operation (i.e., is not requested separately). Maybe that alone is enough to throw out this idea. But maybe not?</p>\n</blockquote>",
        "id": 451823421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721152879
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231507137\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<blockquote>\n<p>what if the inode were synthesized from an actual hash of file contents?</p>\n</blockquote>\n<p>That could confuse tar into thinking two files are hardlinks to each other and thus turn them into actual hard links when unpacking.</p>\n</blockquote>",
        "id": 451824061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721153010
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956#issuecomment-2231755029\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8956\">issue #8956</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/WebAssembly/wasi-filesystem/issues/153\">https://github.com/WebAssembly/wasi-filesystem/issues/153</a>.</p>\n</blockquote>",
        "id": 451852243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721161007
    }
]