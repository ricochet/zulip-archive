[
    {
        "content": "<p><a href=\"https://github.com/narpfel\">narpfel</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">Issue #7454</a>.</p>",
        "id": 399979478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698942332
    },
    {
        "content": "<p><a href=\"https://github.com/narpfel\">narpfel</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">Issue #7454</a>.</p>",
        "id": 399979479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698942332
    },
    {
        "content": "<p>narpfel opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">issue #7454</a>:</p>\n<blockquote>\n<p>I tried <code>rustc_codegen_cranelift</code> on some of my projects, and found that even though the binaries appeared to run normally, they produced errors and segfaults in <code>valgrind</code>. Looking at the disassembly, it appeared that valgrind doesn’t like the way Cranelift performs stack probing.</p>\n<h3><code>.clif</code> Test Case</h3>\n<p>This is the most minimal Rust code that I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_xs</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">5_000</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which generates the following <code>.clif</code> file:</p>\n<p>&lt;details&gt;</p>\n<p>&lt;summary&gt;<br>\noutput file </p>\n<p><code>main.clif/_ZN4main4main17hf30ba8656d3abcbbE.unopt.clif</code></p>\n<p>&lt;/summary&gt;</p>\n<p>generated by <code>rustc -Z codegen-backend=cranelift src/main.rs --emit=llvm-ir</code></p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>set opt_level=none\nset tls_model=elf_gd\nset libcall_call_conv=isa_default\nset probestack_size_log2=12\nset probestack_strategy=inline\nset bb_padding_log2_minus_one=0\nset regalloc_checker=0\nset regalloc_verbose_logs=0\nset enable_alias_analysis=1\nset enable_verifier=0\nset is_pic=1\nset use_colocated_libcalls=0\nset enable_float=1\nset enable_nan_canonicalization=0\nset enable_pinned_reg=0\nset enable_atomics=1\nset enable_safepoints=0\nset enable_llvm_abi_extensions=1\nset unwind_info=1\nset preserve_frame_pointers=0\nset machine_code_cfg_info=0\nset enable_probestack=1\nset probestack_func_adjusts_sp=0\nset enable_jump_tables=1\nset enable_heap_access_spectre_mitigation=1\nset enable_table_access_spectre_mitigation=1\nset enable_incremental_compilation_cache_checks=0\ntarget x86_64 has_sse3=1 has_ssse3=1 has_sse41=1 has_sse42=1 has_avx=0 has_avx2=0 has_fma=0 has_avx512bitalg=0 has_avx512dq=0 has_avx512vl=0 has_avx512vbmi=0 has_avx512f=0 has_popcnt=1 has_bmi1=0 has_bmi2=0 has_lzcnt=0\n\n\nfunction u0:8() system_v {\n; symbol _ZN4main4main17hf30ba8656d3abcbbE\n; instance Instance { def: Item(DefId(0:3 ~ main[b61b]::main)), args: [] }\n; abi FnAbi { args: [], ret: ArgAbi { layout: TyAndLayout { ty: (), layout: Layout { size: Size(0 bytes), align: AbiAndPrefAlign { abi: Align(1 bytes), pref: Align(8 bytes) }, abi: Aggregate { sized: true }, fields: Arbitrary { offsets: [], memory_index: [] }, largest_niche: None, variants: Single { index: 0 }, max_repr_align: None, unadjusted_abi_align: Align(1 bytes) } }, mode: Ignore }, c_variadic: false, fixed_count: 0, conv: Rust, can_unwind: true }\n\n; kind  loc.idx   param    pass mode                            ty\n; zst   _0    ()                                0b 1, 8              align=8,offset=\n; ret   _0      -          Ignore                               ()\n\n; kind  local ty                              size align (abi,pref)\n; stack _1    [u32; 5000_usize]              20000b 4, 4              storage=ss0\n\n    ss0 = explicit_slot 20000\n\nblock0:\n    nop\n    jump block1\n\nblock1:\n    nop\n;\n; return\n    return\n}\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>rustc<span class=\"w\"> </span>-Z<span class=\"w\"> </span>codegen-backend<span class=\"o\">=</span>cranelift<span class=\"w\"> </span>src/main.rs\n<span class=\"gp\">$ </span>valgrind<span class=\"w\"> </span>./main\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>When run in valgrind, this program should not produce any errors.</p>\n<h3>Actual Results</h3>\n<p>valgrind complains about out-of-bounds stack writes and then lets the program segfault on a write to an unmapped address:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;valgrind output&lt;/summary&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span><span class=\"nv\">RUSTFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-Z codegen-backend=cranelift\"</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>build\n<span class=\"go\">   Compiling project v0.1.0 (/tmp/project)</span>\n<span class=\"go\">    Finished dev [unoptimized + debuginfo] target(s) in 0.23s</span>\n<span class=\"gp\">$ </span>./target/debug/project\n<span class=\"gp\">$ </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"nv\">$?</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">$ </span>valgrind<span class=\"w\"> </span>./target/debug/project\n<span class=\"go\">==9258== Memcheck, a memory error detector</span>\n<span class=\"go\">==9258== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.</span>\n<span class=\"go\">==9258== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info</span>\n<span class=\"go\">==9258== Command: ./target/debug/project</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258== Invalid write of size 4</span>\n<span class=\"go\">==9258==    at 0x10F5FF: project::main (main.rs:1)</span>\n<span class=\"go\">==9258==    by 0x10F68F: core::ops::function::FnOnce::call_once (function.rs:250)</span>\n<span class=\"go\">==9258==    by 0x10F673: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:154)</span>\n<span class=\"go\">==9258==    by 0x10F720: std::rt::lang_start::{{closure}} (rt.rs:167)</span>\n<span class=\"go\">==9258==    by 0x1260A6: call_once&lt;(), (dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (function.rs:284)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;i32, &amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: {closure#2} (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;isize, std::rt::lang_start_internal::{closure_env#2}&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: std::rt::lang_start_internal (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x10F6F5: std::rt::lang_start (rt.rs:166)</span>\n<span class=\"go\">==9258==    by 0x10F5F5: main (in /tmp/project/target/debug/project)</span>\n<span class=\"go\">==9258==  Address 0x1ffeffe5d0 is on thread 1's stack</span>\n<span class=\"go\">==9258==  4096 bytes below stack pointer</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258== Invalid write of size 4</span>\n<span class=\"go\">==9258==    at 0x10F606: project::main (main.rs:1)</span>\n<span class=\"go\">==9258==    by 0x10F68F: core::ops::function::FnOnce::call_once (function.rs:250)</span>\n<span class=\"go\">==9258==    by 0x10F673: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:154)</span>\n<span class=\"go\">==9258==    by 0x10F720: std::rt::lang_start::{{closure}} (rt.rs:167)</span>\n<span class=\"go\">==9258==    by 0x1260A6: call_once&lt;(), (dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (function.rs:284)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;i32, &amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: {closure#2} (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;isize, std::rt::lang_start_internal::{closure_env#2}&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: std::rt::lang_start_internal (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x10F6F5: std::rt::lang_start (rt.rs:166)</span>\n<span class=\"go\">==9258==    by 0x10F5F5: main (in /tmp/project/target/debug/project)</span>\n<span class=\"go\">==9258==  Address 0x1ffeffd5d0 is on thread 1's stack</span>\n<span class=\"go\">==9258==  8192 bytes below stack pointer</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258== Invalid write of size 4</span>\n<span class=\"go\">==9258==    at 0x10F60D: project::main (main.rs:1)</span>\n<span class=\"go\">==9258==    by 0x10F68F: core::ops::function::FnOnce::call_once (function.rs:250)</span>\n<span class=\"go\">==9258==    by 0x10F673: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:154)</span>\n<span class=\"go\">==9258==    by 0x10F720: std::rt::lang_start::{{closure}} (rt.rs:167)</span>\n<span class=\"go\">==9258==    by 0x1260A6: call_once&lt;(), (dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (function.rs:284)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;i32, &amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: {closure#2} (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;isize, std::rt::lang_start_internal::{closure_env#2}&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: std::rt::lang_start_internal (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x10F6F5: std::rt::lang_start (rt.rs:166)</span>\n<span class=\"go\">==9258==    by 0x10F5F5: main (in /tmp/project/target/debug/project)</span>\n<span class=\"go\">==9258==  Address 0x1ffeffc5d0 is not stack'd, malloc'd or (recently) free'd</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258== Process terminating with default action of signal 11 (SIGSEGV): dumping core</span>\n<span class=\"go\">==9258==  Access not within mapped region at address 0x1FFEFFC5D0</span>\n<span class=\"go\">==9258==    at 0x10F60D: project::main (main.rs:1)</span>\n<span class=\"go\">==9258==    by 0x10F68F: core::ops::function::FnOnce::call_once (function.rs:250)</span>\n<span class=\"go\">==9258==    by 0x10F673: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:154)</span>\n<span class=\"go\">==9258==    by 0x10F720: std::rt::lang_start::{{closure}} (rt.rs:167)</span>\n<span class=\"go\">==9258==    by 0x1260A6: call_once&lt;(), (dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (function.rs:284)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;i32, &amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (pani</span>\n<span class=\"go\">[message truncated]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 399979482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698942332
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454#issuecomment-1791093081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">issue #7454</a>:</p>\n<blockquote>\n<p>cc @bjorn3</p>\n<p>I suspect the sequence may be technically in violation of the redzone constraints of the ABI and we may need to move <code>rsp</code> downward in steps... if we move <code>rsp</code> downward all at once, before the probes, we risk putting it in other valid (unrelated) memory and then an async interruption (signal handler or whatnot) clobbers things. So perhaps the spec-compliant sequence is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1000</span>\n<span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">dword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">rsp</span>\n<span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1000</span>\n<span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">dword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">rsp</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xe20</span>\n<span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">dword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">rsp</span>\n</code></pre></div>\n<p>which is the literal unroll of the probe-loop. What do you think @bjorn3 / @afonso360 ?</p>\n</blockquote>",
        "id": 399982474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698943307
    },
    {
        "content": "<p>narpfel <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454#issuecomment-1791098757\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">issue #7454</a>:</p>\n<blockquote>\n<blockquote>\n<p>we may need to move <code>rsp</code> downward in steps... </p>\n</blockquote>\n<p>This is basically how LLVM does it:</p>\n<p><div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">00000000000075</span><span class=\"nf\">e0</span><span class=\"w\"> </span><span class=\"err\">&lt;</span><span class=\"no\">_ZN7project4main17ha1977755d345ddbbE</span><span class=\"err\">&gt;</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"err\">75</span><span class=\"nl\">e0:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">81</span><span class=\"w\"> </span><span class=\"nf\">ec</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">sub</span><span class=\"w\">    </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"mi\">0x1000</span>\n<span class=\"w\">    </span><span class=\"err\">75</span><span class=\"nl\">e7:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"nf\">c7</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"no\">QWORD</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"mi\">0x0</span>\n<span class=\"w\">    </span><span class=\"err\">75</span><span class=\"nl\">ee:</span><span class=\"w\">   </span><span class=\"err\">00</span>\n<span class=\"w\">    </span><span class=\"err\">75</span><span class=\"nl\">ef:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">81</span><span class=\"w\"> </span><span class=\"nf\">ec</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">sub</span><span class=\"w\">    </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"mi\">0x1000</span>\n<span class=\"w\">    </span><span class=\"err\">75</span><span class=\"nl\">f6:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"nf\">c7</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"no\">QWORD</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"mi\">0x0</span>\n<span class=\"w\">    </span><span class=\"err\">75</span><span class=\"nl\">fd:</span><span class=\"w\">   </span><span class=\"err\">00</span>\n<span class=\"w\">    </span><span class=\"err\">75</span><span class=\"nl\">fe:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">81</span><span class=\"w\"> </span><span class=\"nf\">ec</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">sub</span><span class=\"w\">    </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"mi\">0x1000</span>\n<span class=\"w\">    </span><span class=\"err\">7605:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"nf\">c7</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"no\">QWORD</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"mi\">0x0</span>\n<span class=\"w\">    </span><span class=\"err\">760</span><span class=\"nl\">c:</span><span class=\"w\">   </span><span class=\"err\">00</span>\n<span class=\"w\">    </span><span class=\"err\">760</span><span class=\"nl\">d:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">81</span><span class=\"w\"> </span><span class=\"nf\">ec</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">sub</span><span class=\"w\">    </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"mi\">0x1000</span>\n<span class=\"w\">    </span><span class=\"err\">7614:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"nf\">c7</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"no\">QWORD</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"mi\">0x0</span>\n<span class=\"w\">    </span><span class=\"err\">761</span><span class=\"nl\">b:</span><span class=\"w\">   </span><span class=\"err\">00</span>\n<span class=\"w\">    </span><span class=\"err\">761</span><span class=\"nl\">c:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">81</span><span class=\"w\"> </span><span class=\"nf\">ec</span><span class=\"w\"> </span><span class=\"no\">a0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"no\">d</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">sub</span><span class=\"w\">    </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"mi\">0xda0</span>\n<span class=\"w\">    </span><span class=\"err\">7623:</span><span class=\"w\">   </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">81</span><span class=\"w\"> </span><span class=\"nf\">c4</span><span class=\"w\"> </span><span class=\"no\">a0</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"no\">d</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">add</span><span class=\"w\">    </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"mi\">0x4da0</span>\n<span class=\"w\">    </span><span class=\"err\">762</span><span class=\"nl\">a:</span><span class=\"w\">   </span><span class=\"nf\">c3</span><span class=\"w\">                      </span><span class=\"no\">ret</span>\n<span class=\"w\">    </span><span class=\"err\">762</span><span class=\"nl\">b:</span><span class=\"w\">   </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"no\">nop</span><span class=\"w\">    </span><span class=\"no\">DWORD</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rax</span><span class=\"err\">+</span><span class=\"no\">rax</span><span class=\"p\">*</span><span class=\"mi\">1</span><span class=\"err\">+</span><span class=\"mi\">0x0</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 399983140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698943514
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454#issuecomment-1791140121\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">issue #7454</a>:</p>\n<blockquote>\n<blockquote>\n<p>which is the literal unroll of the probe-loop. What do you think @bjorn3 / @afonso360 ?</p>\n</blockquote>\n<p>Yeah, I think this makes sense. I also checked what clang generates for AArch64 / RISC-V, and it does the same thing, so we might also have to update those backends.</p>\n</blockquote>",
        "id": 399987430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698944884
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454#issuecomment-1791191278\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">issue #7454</a>:</p>\n<blockquote>\n<blockquote>\n<p>I suspect the sequence may be technically in violation of the redzone constraints of the ABI and we may need to move rsp downward in steps</p>\n</blockquote>\n<p>The current instruction sequence should be fine with respect to the redzone constraints, right? When the mov runs there is no signal handler running, so no clobbering of the signal handler stack. And the signal handler clobbering the written data is fine as don't never read it again without a write in between.</p>\n</blockquote>",
        "id": 399990223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698945909
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454#issuecomment-1791301440\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">issue #7454</a>:</p>\n<blockquote>\n<p>In practice things should play out as you say, yes (so there isn't a \"real\" correctness bug or possibility of corruption here, AFAICT). But the <a href=\"https://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf\">ABI doc</a> explicitly defines the redzone and Valgrind here is interpreting the stores as ordinary stack-frame stores (that would presumably contain data we want to preserve), I guess. The spec doesn't explicitly say anywhere that code must not write below <code>rsp - 128</code>, as far as I have found, but I guess it could be inferred from the description of stack frame locations together with a conservative \"any store to the stack is to a stack frame\" interpretation. IMHO it's best to be a bit conservative here and LLVM apparently thought the same...</p>\n</blockquote>",
        "id": 399998788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698949372
    },
    {
        "content": "<p>narpfel <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454#issuecomment-1791416869\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">issue #7454</a>:</p>\n<blockquote>\n<p>LLVM’s stack probing was apparently implemented in <a href=\"https://reviews.llvm.org/D68720\">D68720</a>, derived from the implementation in GCC (as per <a href=\"https://blog.llvm.org/posts/2021-01-05-stack-clash-protection/\">this article</a>), and the discussion there links to the GCC mailing list, which has some insights why that specific strategy was chosen:</p>\n<p><a href=\"https://gcc.gnu.org/pipermail/gcc-patches/2017-June/477152.html\">https://gcc.gnu.org/pipermail/gcc-patches/2017-June/477152.html</a>:</p>\n<blockquote>\n<p>Most ports first probe by pages for whatever space is requested, then<br>\nafter all probing is done, they actually allocate space.  This runs<br>\nafoul of valgrind in various unpleasant ways (including crashing<br>\nvalgrind on two targets).</p>\n<p>Only x86-linux currently uses a \"moving sp\" allocation and probing<br>\nstrategy.  ie, it actually allocates space, then probes the space.</p>\n<p>--</p>\n<p>After much poking around I concluded that we really need to implement<br>\nallocation and probing via a \"moving sp\" strategy.   Probing into<br>\nunallocated areas runs afoul of valgrind, so that's a non-starter.</p>\n</blockquote>\n<p>So <a href=\"https://reviews.llvm.org/D68720#1702311\">both LLVM</a> and GCC explicitly cite “we want to please valgrind” as a reason for their implementation strategy.</p>\n</blockquote>",
        "id": 400006830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698953000
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7454\">issue #7454</a>:</p>\n<blockquote>\n<p>I tried <code>rustc_codegen_cranelift</code> on some of my projects, and found that even though the binaries appeared to run normally, they produced errors and segfaults in <code>valgrind</code>. Looking at the disassembly, it appeared that valgrind doesn’t like the way Cranelift performs stack probing.</p>\n<h3><code>.clif</code> Test Case</h3>\n<p>This is the most minimal Rust code that I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_xs</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">5_000</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which generates the following <code>.clif</code> file:</p>\n<p>&lt;details&gt;</p>\n<p>&lt;summary&gt;<br>\noutput file </p>\n<p><code>main.clif/_ZN4main4main17hf30ba8656d3abcbbE.unopt.clif</code></p>\n<p>&lt;/summary&gt;</p>\n<p>generated by <code>rustc -Z codegen-backend=cranelift src/main.rs --emit=llvm-ir</code></p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>set opt_level=none\nset tls_model=elf_gd\nset libcall_call_conv=isa_default\nset probestack_size_log2=12\nset probestack_strategy=inline\nset bb_padding_log2_minus_one=0\nset regalloc_checker=0\nset regalloc_verbose_logs=0\nset enable_alias_analysis=1\nset enable_verifier=0\nset is_pic=1\nset use_colocated_libcalls=0\nset enable_float=1\nset enable_nan_canonicalization=0\nset enable_pinned_reg=0\nset enable_atomics=1\nset enable_safepoints=0\nset enable_llvm_abi_extensions=1\nset unwind_info=1\nset preserve_frame_pointers=0\nset machine_code_cfg_info=0\nset enable_probestack=1\nset probestack_func_adjusts_sp=0\nset enable_jump_tables=1\nset enable_heap_access_spectre_mitigation=1\nset enable_table_access_spectre_mitigation=1\nset enable_incremental_compilation_cache_checks=0\ntarget x86_64 has_sse3=1 has_ssse3=1 has_sse41=1 has_sse42=1 has_avx=0 has_avx2=0 has_fma=0 has_avx512bitalg=0 has_avx512dq=0 has_avx512vl=0 has_avx512vbmi=0 has_avx512f=0 has_popcnt=1 has_bmi1=0 has_bmi2=0 has_lzcnt=0\n\n\nfunction u0:8() system_v {\n; symbol _ZN4main4main17hf30ba8656d3abcbbE\n; instance Instance { def: Item(DefId(0:3 ~ main[b61b]::main)), args: [] }\n; abi FnAbi { args: [], ret: ArgAbi { layout: TyAndLayout { ty: (), layout: Layout { size: Size(0 bytes), align: AbiAndPrefAlign { abi: Align(1 bytes), pref: Align(8 bytes) }, abi: Aggregate { sized: true }, fields: Arbitrary { offsets: [], memory_index: [] }, largest_niche: None, variants: Single { index: 0 }, max_repr_align: None, unadjusted_abi_align: Align(1 bytes) } }, mode: Ignore }, c_variadic: false, fixed_count: 0, conv: Rust, can_unwind: true }\n\n; kind  loc.idx   param    pass mode                            ty\n; zst   _0    ()                                0b 1, 8              align=8,offset=\n; ret   _0      -          Ignore                               ()\n\n; kind  local ty                              size align (abi,pref)\n; stack _1    [u32; 5000_usize]              20000b 4, 4              storage=ss0\n\n    ss0 = explicit_slot 20000\n\nblock0:\n    nop\n    jump block1\n\nblock1:\n    nop\n;\n; return\n    return\n}\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>rustc<span class=\"w\"> </span>-Z<span class=\"w\"> </span>codegen-backend<span class=\"o\">=</span>cranelift<span class=\"w\"> </span>src/main.rs\n<span class=\"gp\">$ </span>valgrind<span class=\"w\"> </span>./main\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>When run in valgrind, this program should not produce any errors.</p>\n<h3>Actual Results</h3>\n<p>valgrind complains about out-of-bounds stack writes and then lets the program segfault on a write to an unmapped address:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;valgrind output&lt;/summary&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span><span class=\"nv\">RUSTFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-Z codegen-backend=cranelift\"</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>build\n<span class=\"go\">   Compiling project v0.1.0 (/tmp/project)</span>\n<span class=\"go\">    Finished dev [unoptimized + debuginfo] target(s) in 0.23s</span>\n<span class=\"gp\">$ </span>./target/debug/project\n<span class=\"gp\">$ </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"nv\">$?</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">$ </span>valgrind<span class=\"w\"> </span>./target/debug/project\n<span class=\"go\">==9258== Memcheck, a memory error detector</span>\n<span class=\"go\">==9258== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.</span>\n<span class=\"go\">==9258== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info</span>\n<span class=\"go\">==9258== Command: ./target/debug/project</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258== Invalid write of size 4</span>\n<span class=\"go\">==9258==    at 0x10F5FF: project::main (main.rs:1)</span>\n<span class=\"go\">==9258==    by 0x10F68F: core::ops::function::FnOnce::call_once (function.rs:250)</span>\n<span class=\"go\">==9258==    by 0x10F673: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:154)</span>\n<span class=\"go\">==9258==    by 0x10F720: std::rt::lang_start::{{closure}} (rt.rs:167)</span>\n<span class=\"go\">==9258==    by 0x1260A6: call_once&lt;(), (dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (function.rs:284)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;i32, &amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: {closure#2} (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;isize, std::rt::lang_start_internal::{closure_env#2}&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: std::rt::lang_start_internal (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x10F6F5: std::rt::lang_start (rt.rs:166)</span>\n<span class=\"go\">==9258==    by 0x10F5F5: main (in /tmp/project/target/debug/project)</span>\n<span class=\"go\">==9258==  Address 0x1ffeffe5d0 is on thread 1's stack</span>\n<span class=\"go\">==9258==  4096 bytes below stack pointer</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258== Invalid write of size 4</span>\n<span class=\"go\">==9258==    at 0x10F606: project::main (main.rs:1)</span>\n<span class=\"go\">==9258==    by 0x10F68F: core::ops::function::FnOnce::call_once (function.rs:250)</span>\n<span class=\"go\">==9258==    by 0x10F673: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:154)</span>\n<span class=\"go\">==9258==    by 0x10F720: std::rt::lang_start::{{closure}} (rt.rs:167)</span>\n<span class=\"go\">==9258==    by 0x1260A6: call_once&lt;(), (dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (function.rs:284)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;i32, &amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: {closure#2} (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;isize, std::rt::lang_start_internal::{closure_env#2}&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: std::rt::lang_start_internal (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x10F6F5: std::rt::lang_start (rt.rs:166)</span>\n<span class=\"go\">==9258==    by 0x10F5F5: main (in /tmp/project/target/debug/project)</span>\n<span class=\"go\">==9258==  Address 0x1ffeffd5d0 is on thread 1's stack</span>\n<span class=\"go\">==9258==  8192 bytes below stack pointer</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258== Invalid write of size 4</span>\n<span class=\"go\">==9258==    at 0x10F60D: project::main (main.rs:1)</span>\n<span class=\"go\">==9258==    by 0x10F68F: core::ops::function::FnOnce::call_once (function.rs:250)</span>\n<span class=\"go\">==9258==    by 0x10F673: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:154)</span>\n<span class=\"go\">==9258==    by 0x10F720: std::rt::lang_start::{{closure}} (rt.rs:167)</span>\n<span class=\"go\">==9258==    by 0x1260A6: call_once&lt;(), (dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (function.rs:284)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;i32, &amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: {closure#2} (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;isize, std::rt::lang_start_internal::{closure_env#2}&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;std::rt::lang_start_internal::{closure_env#2}, isize&gt; (panic.rs:142)</span>\n<span class=\"go\">==9258==    by 0x1260A6: std::rt::lang_start_internal (rt.rs:148)</span>\n<span class=\"go\">==9258==    by 0x10F6F5: std::rt::lang_start (rt.rs:166)</span>\n<span class=\"go\">==9258==    by 0x10F5F5: main (in /tmp/project/target/debug/project)</span>\n<span class=\"go\">==9258==  Address 0x1ffeffc5d0 is not stack'd, malloc'd or (recently) free'd</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258==</span>\n<span class=\"go\">==9258== Process terminating with default action of signal 11 (SIGSEGV): dumping core</span>\n<span class=\"go\">==9258==  Access not within mapped region at address 0x1FFEFFC5D0</span>\n<span class=\"go\">==9258==    at 0x10F60D: project::main (main.rs:1)</span>\n<span class=\"go\">==9258==    by 0x10F68F: core::ops::function::FnOnce::call_once (function.rs:250)</span>\n<span class=\"go\">==9258==    by 0x10F673: std::sys_common::backtrace::__rust_begin_short_backtrace (backtrace.rs:154)</span>\n<span class=\"go\">==9258==    by 0x10F720: std::rt::lang_start::{{closure}} (rt.rs:167)</span>\n<span class=\"go\">==9258==    by 0x1260A6: call_once&lt;(), (dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (function.rs:284)</span>\n<span class=\"go\">==9258==    by 0x1260A6: do_call&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (panicking.rs:552)</span>\n<span class=\"go\">==9258==    by 0x1260A6: try&lt;i32, &amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)&gt; (panicking.rs:516)</span>\n<span class=\"go\">==9258==    by 0x1260A6: catch_unwind&lt;&amp;(dyn core::ops::function::Fn&lt;(), Output=i32&gt; + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32&gt; (pa</span>\n<span class=\"go\">[message truncated]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 400204305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699045163
    }
]