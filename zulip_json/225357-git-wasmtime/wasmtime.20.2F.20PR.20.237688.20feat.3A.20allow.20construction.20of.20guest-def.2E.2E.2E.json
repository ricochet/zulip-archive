[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a> from <code>rvolosatovs:feat/dynamic-resources</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7676\">https://github.com/bytecodealliance/wasmtime/issues/7676</a><br>\nFollow-up on #7680 </p>\n<p>This feature requires changes in the resource table to allow specifying the <code>ResourceType</code> associated with the resource stored (since assumption that it's always equal to <code>ResourceType::host::&lt;T&gt;()</code> is no longer valid</p>\n</blockquote>",
        "id": 407965362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702562341
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a>.</p>",
        "id": 407965820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702562476
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a>:</p>\n<blockquote>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7676\">https://github.com/bytecodealliance/wasmtime/issues/7676</a><br>\nFollow-up on #7680 </p>\n<p>This feature requires changes in the resource table to allow specifying the <code>ResourceType</code> associated with the resource stored (since assumption that it's always equal to <code>ResourceType::host::&lt;T&gt;()</code> is no longer valid)</p>\n</blockquote>",
        "id": 407966334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702562606
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688#issuecomment-1856125344\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a>:</p>\n<blockquote>\n<p>I think I might have missed something in this by accident perhaps. I don't think that this is the direction things should go in, for example <code>Resource&lt;T&gt;</code> is designed to have a statically known type as <code>ResourceType::host::&lt;T&gt;()</code> as opposed to a runtime-defined type. Having a runtime-defined type sort of defeats the purpose of the type parameter which at that point require a redesign of the resource-related APIs.</p>\n<p>The title of this PR though, allowing host creation of guest resources, is not something Wasmtime can enable. Just as guests can't create host-defined resources without asking the host to do so the other way around is the same. The host can't conjure a guest resource out of thin air, it must originate in the guest. </p>\n<p>Given that I fear I might have missed some motivation/use case when talking about this, could you perhaps clarify?</p>\n</blockquote>",
        "id": 407993004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702569998
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688#issuecomment-1856141551\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a>:</p>\n<blockquote>\n<blockquote>\n<p>Given that I fear I might have missed some motivation/use case when talking about this, could you perhaps clarify?</p>\n</blockquote>\n<p>Here's a more concrete example of the use case:</p>\n<p>Assume the following WIT:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">poll</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"o\">-</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"o\">-</span><span class=\"mf\">10.</span><span class=\"p\">{</span><span class=\"n\">pollable</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">subscribe</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">pollable</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">get</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.{</span><span class=\"n\">future</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">foo</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">example</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And a component exporting the <code>example</code> interface.</p>\n<p>The intention is to call <code>example.foo</code> on the component without having the WIT at compilation time, i.e. parsing the WIT from the Wasm itself at runtime (which works already) and then invoking <code>example.foo</code> within the component.<br>\nThe only blocker for this now is the fact that the host cannot construct <code>future-string</code> at runtime if it does not have the <code>future-string</code> WIT definition available at compilation time (and associated bindings)</p>\n<p>The host, however, can already push a <code>Resource</code> to the table and link the associated methods on the linker, the only bit left is being able to turn the <code>Resource</code> constructed at runtime into a <code>ResourceAny</code> to be able to invoke the function via <code>call</code> or <code>call_async</code></p>\n</blockquote>",
        "id": 407995107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702570582
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688#issuecomment-1856141551\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a>:</p>\n<blockquote>\n<blockquote>\n<p>Given that I fear I might have missed some motivation/use case when talking about this, could you perhaps clarify?</p>\n</blockquote>\n<p>Here's a more concrete example of the use case:</p>\n<p>Assume the following WIT:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">poll</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"o\">-</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"o\">-</span><span class=\"mf\">10.</span><span class=\"p\">{</span><span class=\"n\">pollable</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">subscribe</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">pollable</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">get</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.{</span><span class=\"n\">future</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">foo</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">opaque</span>: <span class=\"nc\">future</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And a component exporting the <code>example</code> interface.</p>\n<p>The intention is to call <code>example.foo</code> on the component without having the WIT at compilation time, i.e. parsing the WIT from the Wasm itself at runtime (which works already) and then invoking <code>example.foo</code> within the component.<br>\nThe only blocker for this now is the fact that the host cannot construct <code>future-string</code> at runtime if it does not have the <code>future-string</code> WIT definition available at compilation time (and associated bindings)</p>\n<p>The host, however, can already push a <code>Resource</code> to the table and link the associated methods on the linker, the only bit left is being able to turn the <code>Resource</code> constructed at runtime into a <code>ResourceAny</code> to be able to invoke the function via <code>call</code> or <code>call_async</code></p>\n</blockquote>",
        "id": 407996082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702570849
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688#issuecomment-1856170615\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a>:</p>\n<blockquote>\n<p>Another way to look at this would be the following:</p>\n<ul>\n<li>If one could pass a <code>wasmtime::component::Val::U32</code>, which stores the <code>Resource::rep</code> value as a function parameter directly where a resource is expected, that would cover the use case.</li>\n</ul>\n<p>Perhaps a an even more generic view on this could be allowing arbitrary <code>impl Lower</code> values to be passed as arguments to <code>call</code>/<code>call_async</code> (or yet another alternative)</p>\n<p>This all really boils down to being able to pass the resource index to a component in cases where the resource type is not known at compilation time</p>\n</blockquote>",
        "id": 407999095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702571637
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688#issuecomment-1856170615\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a>:</p>\n<blockquote>\n<p>Another way to look at this would be the following:</p>\n<ul>\n<li>If one could pass a <code>wasmtime::component::Val::U32</code>, which stores the <code>Resource::rep</code> value as a function parameter directly where a resource is expected, that would cover the use case.</li>\n</ul>\n<p>Perhaps an even more generic view on this could be allowing arbitrary <code>impl Lower</code> values to be passed as arguments to <code>call</code>/<code>call_async</code> (or yet another alternative)</p>\n<p>This all really boils down to being able to pass the resource index to a component in cases where the resource type is not known at compilation time</p>\n</blockquote>",
        "id": 408004844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702573368
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688#issuecomment-1856396770\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasi\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 408022006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702579479
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">PR #7688</a>.</p>",
        "id": 408202663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702652554
    }
]