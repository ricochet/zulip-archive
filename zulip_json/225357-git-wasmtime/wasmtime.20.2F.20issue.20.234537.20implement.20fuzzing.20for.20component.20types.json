[
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#issuecomment-1199739477\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">issue #4537</a>:</p>\n<blockquote>\n<p>This is ready for another review.  Per <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4307#issuecomment-1199624852\">https://github.com/bytecodealliance/wasmtime/issues/4307#issuecomment-1199624852</a>, CI will be broken until we've enabled the <code>component-model</code> feature unconditionally when testing.</p>\n</blockquote>",
        "id": 291351420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659113633
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#issuecomment-1199821447\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">issue #4537</a>:</p>\n<blockquote>\n<p>Also it looks like you may have had to deal with a lot of Cargo features and conditional compilation in this PR to get fiddly bits to work. I think it's fine to say that during testing we can assume that the component model is unconditionally enabled and hopefully avoid too much of a maze of optional dependencies and such.</p>\n</blockquote>",
        "id": 291361685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659118461
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#issuecomment-1199963932\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">issue #4537</a>:</p>\n<blockquote>\n<p>I've addressed a few of the issues above.  Planning to work on the rest on Monday.</p>\n</blockquote>",
        "id": 291384212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659130894
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#issuecomment-1201415925\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">issue #4537</a>:</p>\n<blockquote>\n<p>Also to get a head start on deduplicating internally within the codebase, could you update the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/893fadb485717db6afaa9e2571221d4cb4a9bfc6/crates/environ/fuzz/fuzz_targets/fact-valid-module.rs#L41-L66\"><code>fact-valid-module</code> fuzzer</a> to using this new <code>enum Type</code> in the component-fuzz-util crate? </p>\n<p>During the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/893fadb485717db6afaa9e2571221d4cb4a9bfc6/crates/environ/fuzz/fuzz_targets/fact-valid-module.rs#L219-L293\">intern phase</a> of that fuzzer not all types are supported yet so I think it would be fine to return a <code>Result</code> from interning and \"throw out\" test cases with unsupported types (e.g. lists/strings at the time of this writing)</p>\n</blockquote>",
        "id": 291598251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659370606
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#issuecomment-1202984827\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">issue #4537</a>:</p>\n<blockquote>\n<p>@alexcrichton I believe I've addressed all your latest feedback (deferring <code>func_new</code> API changes for later).  And yes, I've run the fuzz tests for an hour or so without issue.</p>\n</blockquote>",
        "id": 291736951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659459226
    }
]