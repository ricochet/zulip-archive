[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2426\">PR #2426</a>.</p>",
        "id": 217048154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605640186
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2426\">PR #2426</a> from <code>machinst-trap-info</code> to <code>main</code>:</p>\n<blockquote>\n<p>x64 and aarch64: carry MemFlags on loads/stores; don't emit trap info unless an op can trap.</p>\n<div class=\"codehilite\"><pre><span></span><code>This end result was previously enacted by carrying a `SourceLoc` on\nevery load/store, which was somewhat cumbersome, and only indirectly\nencoded metadata about a memory reference (can it trap) by its presence\nor absence. We have a type for this -- `MemFlags` -- that tells us\neverything we might want to know about a load or store, and we should\nplumb it through to code emission instead.\n\nThis PR attaches a `MemFlags` to an `Amode` on x64, and puts it on load\nand store `Inst` variants on aarch64. These two choices seem to factor\nthings out in the nicest way: there are relatively few load/store insts\non aarch64 but many addressing modes, while the opposite is true on x64.\n</code></pre></div>\n\n<p>Includes #2389 as prerequisite; will rebase out that commit once #2389 lands.</p>\n</blockquote>",
        "id": 217048155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605640186
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2426\">PR #2426</a> from <code>machinst-trap-info</code> to <code>main</code>:</p>\n<blockquote>\n<p>x64 and aarch64: carry MemFlags on loads/stores; don't emit trap info unless an op can trap.</p>\n<p>This end result was previously enacted by carrying a <code>SourceLoc</code> on<br>\nevery load/store, which was somewhat cumbersome, and only indirectly<br>\nencoded metadata about a memory reference (can it trap) by its presence<br>\nor absence. We have a type for this -- <code>MemFlags</code> -- that tells us<br>\neverything we might want to know about a load or store, and we should<br>\nplumb it through to code emission instead.</p>\n<p>This PR attaches a <code>MemFlags</code> to an <code>Amode</code> on x64, and puts it on load<br>\nand store <code>Inst</code> variants on aarch64. These two choices seem to factor<br>\nthings out in the nicest way: there are relatively few load/store insts<br>\non aarch64 but many addressing modes, while the opposite is true on x64.</p>\n<p>Includes #2389 as prerequisite; will rebase out that commit once #2389 lands.</p>\n</blockquote>",
        "id": 217048225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605640207
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2426\">PR #2426</a> from <code>machinst-trap-info</code> to <code>main</code>:</p>\n<blockquote>\n<p>x64 and aarch64: carry MemFlags on loads/stores; don't emit trap info unless an op can trap.</p>\n<p>This end result was previously enacted by carrying a <code>SourceLoc</code> on<br>\nevery load/store, which was somewhat cumbersome, and only indirectly<br>\nencoded metadata about a memory reference (can it trap) by its presence<br>\nor absence. We have a type for this -- <code>MemFlags</code> -- that tells us<br>\neverything we might want to know about a load or store, and we should<br>\nplumb it through to code emission instead.</p>\n<p>This PR attaches a <code>MemFlags</code> to an <code>Amode</code> on x64, and puts it on load<br>\nand store <code>Inst</code> variants on aarch64. These two choices seem to factor<br>\nthings out in the nicest way: there are relatively few load/store insts<br>\non aarch64 but many addressing modes, while the opposite is true on x64.</p>\n<p>Includes #2389 as prerequisite; will rebase out that commit once #2389 lands.</p>\n</blockquote>",
        "id": 217048369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605640309
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2426\">PR #2426</a> from <code>machinst-trap-info</code> to <code>main</code>:</p>\n<blockquote>\n<p>x64 and aarch64: carry MemFlags on loads/stores; don't emit trap info unless an op can trap.</p>\n<p>This end result was previously enacted by carrying a <code>SourceLoc</code> on<br>\nevery load/store, which was somewhat cumbersome, and only indirectly<br>\nencoded metadata about a memory reference (can it trap) by its presence<br>\nor absence. We have a type for this -- <code>MemFlags</code> -- that tells us<br>\neverything we might want to know about a load or store, and we should<br>\nplumb it through to code emission instead.</p>\n<p>This PR attaches a <code>MemFlags</code> to an <code>Amode</code> on x64, and puts it on load<br>\nand store <code>Inst</code> variants on aarch64. These two choices seem to factor<br>\nthings out in the nicest way: there are relatively few load/store insts<br>\non aarch64 but many addressing modes, while the opposite is true on x64.</p>\n<p>Includes #2389 as prerequisite; will rebase out that commit once #2389 lands.</p>\n</blockquote>",
        "id": 217052135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605642198
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2426#pullrequestreview-533269729\">PR Review</a>.</p>",
        "id": 217113831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605692929
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2426\">PR #2426</a>.</p>",
        "id": 217158870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605716624
    }
]