[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534\">PR #4534</a> from <code>translate-variant</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit implements the most general case of variants for fused<br>\nadapter trampolines. Additionally a number of other primitive types are<br>\nfilled out here to assist with testing variants. The implementation<br>\ninternally was relatively straightforward given the shape of variants,<br>\nbut there's room for future optimization as necessary especially around<br>\nconverting locals to various types.</p>\n<p>This commit also introduces a \"one off\" fuzzer for adapters to ensure<br>\nthat the generated adapter is valid. I hope to extend this fuzz<br>\ngenerator as more types are implemented to assist in various corner<br>\ncases that might arise. For now the fuzzer simply tests that the output<br>\nwasm module is valid, not that it actually executes correctly. I hope to<br>\nintegrate with a fuzzer along the lines of #4307 one day to test the<br>\nrun-time-correctness of the generated adapters as well, at which point<br>\nthis fuzzer would become obsolete.</p>\n<p>Finally this commit also fixes an issue with <code>u8</code> translation where<br>\nupper bits weren't zero'd out and were passed raw across modules.<br>\nInstead smaller-than-32 types now all mask out their upper bits and do<br>\nsign-extension as appropriate for unsigned/signed variants.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 290937918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658860748
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534\">PR #4534</a>.</p>",
        "id": 290937920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658860748
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534\">PR #4534</a> as ready for review.</p>",
        "id": 290937928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658860752
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534\">PR #4534</a> from <code>translate-variant</code> to <code>main</code>.</p>",
        "id": 290946311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658864702
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534\">PR #4534</a> from <code>translate-variant</code> to <code>main</code>.</p>",
        "id": 290947471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658865329
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#pullrequestreview-1051490685\">PR review</a>.</p>",
        "id": 290955610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658869255
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#pullrequestreview-1051490685\">PR review</a>.</p>",
        "id": 290955611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658869255
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#discussion_r930329451\">PR review comment</a>:</p>\n<blockquote>\n<p>Might not want to <code>derive(Arbitary)</code> for <code>FuncType</code> as the <code>params</code> are potentially unbounded in length here, and I assume we have an implementation limit we want to stay below, right?</p>\n</blockquote>",
        "id": 290955612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658869255
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#discussion_r930330393\">PR review comment</a>:</p>\n<blockquote>\n<p>Alternatively, you could add a wrapper type for bounding <code>Vec</code> lengths similar to what you did for <code>NonZeroLenVec</code>.</p>\n</blockquote>",
        "id": 290955613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658869255
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#discussion_r930406603\">PR review comment</a>:</p>\n<blockquote>\n<p>Huh. I didn't realize there wasn't an <code>i32.extend8_u</code> instruction. Strange there are signed extension instructions where there aren't corresponding unsigned variants. Yeah you can just do the masking, but also you can do the signed version via signed shifting back and forth. So why not omit or include both?</p>\n<p>@sunfishcode do you happen to know the answer to the above, out of curiosity?</p>\n</blockquote>",
        "id": 290955614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658869255
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#discussion_r930324146\">PR review comment</a>:</p>\n<blockquote>\n<p>Why not add this to the top level <code>wasmtime/fuzz/*</code> fuzz targets? You don't think it is worth spending oss-fuzz time on until we get the full blown value round tripping stuff working?</p>\n</blockquote>",
        "id": 290955615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658869255
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#discussion_r931113595\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I don't think this really all that high value of a fuzz target since it's purely \"is it a valid wasm module\" which is a much weaker claim than \"hey it actually works\". Eventually when we're actually running these I think it makes sense to run on oss-fuzz but for now this is mostly just a development aide which is intended to help suss out corner cases (worked really well for a memory64 patch I'll post after this)</p>\n</blockquote>",
        "id": 291039817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658931043
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#pullrequestreview-1052580625\">PR review</a>.</p>",
        "id": 291039820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658931044
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#pullrequestreview-1052582349\">PR review</a>.</p>",
        "id": 291039952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658931102
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#discussion_r931114773\">PR review comment</a>:</p>\n<blockquote>\n<p>While we do have limits in the system they're generally elsewhere at the wasmparser validation layer or the runtime implementation layer. Here in this specific compiler there are few limits imposed and at least so far nothing has blown up. If I run into issues locally with this though running the fuzzer I'll probably do the newtype trick.</p>\n</blockquote>",
        "id": 291039954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658931102
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#pullrequestreview-1052586218\">PR review</a>.</p>",
        "id": 291040248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658931235
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534#discussion_r931117504\">PR review comment</a>:</p>\n<blockquote>\n<p>Double-checking again to make sure I didn't miss something, apparently there's <code>i64.extend32_u</code> but that's the only one.</p>\n</blockquote>",
        "id": 291040249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658931235
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4534\">PR #4534</a>.</p>",
        "id": 291040398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658931284
    }
]