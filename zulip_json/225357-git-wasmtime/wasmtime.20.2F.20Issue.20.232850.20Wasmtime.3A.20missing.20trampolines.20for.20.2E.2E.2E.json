[
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2850\">Issue #2850</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Repro to run with <code>main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"(module</span>\n<span class=\"s\">        (import \"\" \"</span><span class=\"n\">callback</span><span class=\"s\">\" (func $callback (param funcref)))</span>\n<span class=\"s\">        (elem declare func $f)</span>\n<span class=\"s\">        (func $f (param externref))</span>\n<span class=\"s\">        (func (export \"</span><span class=\"n\">g</span><span class=\"s\">\")</span>\n<span class=\"s\">          (call $callback (ref.func $f))</span>\n<span class=\"s\">        )</span>\n<span class=\"s\">      )\"</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">funcref</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Func</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">funcref</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">ExternRef</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ExternRef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"some data\"</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">callback</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"g\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"success!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is a paired down test case that is currently causing the <code>wasmtime-dotnet</code> CI to fail.</p>\n<h3>Steps to Reproduce</h3>\n<p>On Windows:</p>\n<ul>\n<li><code>cargo new --bin repro</code></li>\n<li><code>cargo add wasmtime</code> (change path to local wasmtime repo)</li>\n<li><code>cargo run</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p><code>success!</code> should be printed.</p>\n<h3>Actual Results</h3>\n<p>Panic due to failure to find trampoline (for signature <code>(externref) -&gt; ()</code>, i.e. the funcref passed to <code>callback</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'main' panicked at 'trampoline missing', C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\store.rs:272:14\nstack backtrace:\n   0: std::panicking::begin_panic_handler\n             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0\\/library\\std\\src\\panicking.rs:493\n   1: core::panicking::panic_fmt\n             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0\\/library\\core\\src\\panicking.rs:92\n   2: core::option::expect_failed\n             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0\\/library\\core\\src\\option.rs:1292\n   3: core::option::Option&lt;unsafe extern \"C\" fn(mut wasmtime_runtime::vmcontext::VMContext*, mut wasmtime_runtime::vmcontext::VMContext*, const wasmtime_runtime::vmcontext::VMFunctionBody*, mut u128*)&gt;::expect&lt;unsafe extern \"C\" fn(mut wasmtime_runtime::vmcontex\n             at C:\\Users\\Peter\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\option.rs:349\n   4: wasmtime::store::Store::lookup_trampoline\n             at C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\store.rs:268\n   5: wasmtime::func::Func::from_wasmtime_function\n             at C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\func.rs:919\n   6: wasmtime::func::Func::from_caller_checked_anyfunc\n             at C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\func.rs:551\n   7: wasmtime::func::typed::{{impl}}::from_abi\n...\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>main</code></p>\n<p>Operating system: Windows 10</p>\n<p>Architecture: x86-64</p>\n<h3>Extra Info</h3>\n<p>I believe this is caused by #2806.</p>\n<p>I think the problem here is that we're failing to determine that <code>$f</code> may be possibly exported from the module as the element segment is declarative and not active or passive.  Right now the section translator does nothing for declarative element segments; with the changes from #2806 we should consider all declarative elements as potentially exported functions as the reference might escape the module.</p>\n<p>_Note: by changing <code>$f</code> to have a signature of <code>() -&gt; ()</code>, it runs to completion because it uses the trampoline of <code>g</code>._</p>\n</blockquote>",
        "id": 235404653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618948340
    },
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2850\">Issue #2850</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Repro to run with <code>main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"(module</span>\n<span class=\"s\">        (import \"\" \"</span><span class=\"n\">callback</span><span class=\"s\">\" (func $callback (param funcref)))</span>\n<span class=\"s\">        (elem declare func $f)</span>\n<span class=\"s\">        (func $f (param externref))</span>\n<span class=\"s\">        (func (export \"</span><span class=\"n\">g</span><span class=\"s\">\")</span>\n<span class=\"s\">          (call $callback (ref.func $f))</span>\n<span class=\"s\">        )</span>\n<span class=\"s\">      )\"</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">funcref</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Func</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">funcref</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">ExternRef</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ExternRef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"some data\"</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">callback</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"g\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"success!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is a paired down test case that is currently causing the <code>wasmtime-dotnet</code> CI to fail.</p>\n<h3>Steps to Reproduce</h3>\n<p>On Windows:</p>\n<ul>\n<li><code>cargo new --bin repro</code></li>\n<li><code>cargo add wasmtime</code> (change path to local wasmtime repo)</li>\n<li><code>cargo run</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p><code>success!</code> should be printed.</p>\n<h3>Actual Results</h3>\n<p>Panic due to failure to find trampoline (for signature <code>(externref) -&gt; ()</code>, i.e. the funcref passed to <code>callback</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'main' panicked at 'trampoline missing', C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\store.rs:272:14\nstack backtrace:\n   0: std::panicking::begin_panic_handler\n             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0\\/library\\std\\src\\panicking.rs:493\n   1: core::panicking::panic_fmt\n             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0\\/library\\core\\src\\panicking.rs:92\n   2: core::option::expect_failed\n             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0\\/library\\core\\src\\option.rs:1292\n   3: core::option::Option&lt;unsafe extern \"C\" fn(mut wasmtime_runtime::vmcontext::VMContext*, mut wasmtime_runtime::vmcontext::VMContext*, const wasmtime_runtime::vmcontext::VMFunctionBody*, mut u128*)&gt;::expect&lt;unsafe extern \"C\" fn(mut wasmtime_runtime::vmcontex\n             at C:\\Users\\Peter\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\option.rs:349\n   4: wasmtime::store::Store::lookup_trampoline\n             at C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\store.rs:268\n   5: wasmtime::func::Func::from_wasmtime_function\n             at C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\func.rs:919\n   6: wasmtime::func::Func::from_caller_checked_anyfunc\n             at C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\func.rs:551\n   7: wasmtime::func::typed::{{impl}}::from_abi\n...\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>main</code></p>\n<p>Operating system: Windows 10</p>\n<p>Architecture: x86-64</p>\n<h3>Extra Info</h3>\n<p>I believe this is caused by #2806.</p>\n<p>I think the problem here is that we're failing to determine that <code>$f</code> may be possibly exported from the module as the element segment is declarative and not active or passive.  Right now the section translator does nothing for declarative element segments; with the changes from #2806 we should consider all declarative elements as potentially exported functions as the reference might escape the module.</p>\n<p>_Note: by changing <code>$f</code> to have a signature of <code>() -&gt; ()</code>, it runs to completion because it uses the trampoline of <code>g</code>._</p>\n</blockquote>",
        "id": 235404654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618948340
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2850#issuecomment-823557838\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2850\">Issue #2850</a>:</p>\n<blockquote>\n<p>cc: @alexcrichton </p>\n</blockquote>",
        "id": 235404667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618948345
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2850#issuecomment-823561607\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2850\">Issue #2850</a>:</p>\n<blockquote>\n<p>Also, this failure was first observed in <code>wasmtime-dotnet</code>'s CI 13 days ago when #2806 was merged but was masked with other failures (just tests that needed updating so I put off resolving them until last night).</p>\n</blockquote>",
        "id": 235405481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618948716
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2850#issuecomment-823565850\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2850\">Issue #2850</a>:</p>\n<blockquote>\n<p>Whoops I completely missed that declarative element segments were skipped entirely in the translation phase, that's definitely a bug! I'll look to fix.</p>\n</blockquote>",
        "id": 235406518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618949148
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2850\">Issue #2850</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Repro to run with <code>main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"(module</span>\n<span class=\"s\">        (import \"\" \"</span><span class=\"n\">callback</span><span class=\"s\">\" (func $callback (param funcref)))</span>\n<span class=\"s\">        (elem declare func $f)</span>\n<span class=\"s\">        (func $f (param externref))</span>\n<span class=\"s\">        (func (export \"</span><span class=\"n\">g</span><span class=\"s\">\")</span>\n<span class=\"s\">          (call $callback (ref.func $f))</span>\n<span class=\"s\">        )</span>\n<span class=\"s\">      )\"</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">funcref</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Func</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">funcref</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">ExternRef</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ExternRef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"some data\"</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">callback</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"g\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"success!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is a paired down test case that is currently causing the <code>wasmtime-dotnet</code> CI to fail.</p>\n<h3>Steps to Reproduce</h3>\n<p>On Windows:</p>\n<ul>\n<li><code>cargo new --bin repro</code></li>\n<li><code>cargo add wasmtime</code> (change path to local wasmtime repo)</li>\n<li><code>cargo run</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p><code>success!</code> should be printed.</p>\n<h3>Actual Results</h3>\n<p>Panic due to failure to find trampoline (for signature <code>(externref) -&gt; ()</code>, i.e. the funcref passed to <code>callback</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'main' panicked at 'trampoline missing', C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\store.rs:272:14\nstack backtrace:\n   0: std::panicking::begin_panic_handler\n             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0\\/library\\std\\src\\panicking.rs:493\n   1: core::panicking::panic_fmt\n             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0\\/library\\core\\src\\panicking.rs:92\n   2: core::option::expect_failed\n             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0\\/library\\core\\src\\option.rs:1292\n   3: core::option::Option&lt;unsafe extern \"C\" fn(mut wasmtime_runtime::vmcontext::VMContext*, mut wasmtime_runtime::vmcontext::VMContext*, const wasmtime_runtime::vmcontext::VMFunctionBody*, mut u128*)&gt;::expect&lt;unsafe extern \"C\" fn(mut wasmtime_runtime::vmcontex\n             at C:\\Users\\Peter\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\option.rs:349\n   4: wasmtime::store::Store::lookup_trampoline\n             at C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\store.rs:268\n   5: wasmtime::func::Func::from_wasmtime_function\n             at C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\func.rs:919\n   6: wasmtime::func::Func::from_caller_checked_anyfunc\n             at C:\\Users\\Peter\\src\\wasmtime\\crates\\wasmtime\\src\\func.rs:551\n   7: wasmtime::func::typed::{{impl}}::from_abi\n...\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>main</code></p>\n<p>Operating system: Windows 10</p>\n<p>Architecture: x86-64</p>\n<h3>Extra Info</h3>\n<p>I believe this is caused by #2806.</p>\n<p>I think the problem here is that we're failing to determine that <code>$f</code> may be possibly exported from the module as the element segment is declarative and not active or passive.  Right now the section translator does nothing for declarative element segments; with the changes from #2806 we should consider all declarative elements as potentially exported functions as the reference might escape the module.</p>\n<p>_Note: by changing <code>$f</code> to have a signature of <code>() -&gt; ()</code>, it runs to completion because it uses the trampoline of <code>g</code>._</p>\n</blockquote>",
        "id": 235422370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618955572
    }
]