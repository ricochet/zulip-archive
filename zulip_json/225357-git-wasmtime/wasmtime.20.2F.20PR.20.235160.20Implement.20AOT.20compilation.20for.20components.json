[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160\">PR #5160</a> from <code>refactor-compilation</code> to <code>main</code>:</p>\n<blockquote>\n<p>This series of commits is an implementation of AOT-compiling components, namely creating a byte-based artifact from a <code>Component</code> which can, at a later date, be fed back into Wasmtime. The intention of this support is to match the AOT support for <code>Module</code>, only with components instead.</p>\n<p>At a high level the serialized artifact is the same for modules. The artifact is an ELF object file with standard <code>.text</code>/data sections as well as Wasmtime-specific sections with bincode-encoded data or otherwise binary-encoded data. The difference with normal modules is that a component squashes together all of its component modules, so the <code>.text</code> section contains all executable code for all modules contained within. Additionally the <code>.rodata</code> section contains the concatenation of all module data segments. This enables having one mmap for the entire component, including all modules contained within.</p>\n<p>Lots of refactoring internally was necessary for this, namely around the end-part of compilation where an object is emitted and loaded into modules/components. The general shape of the <code>Module</code> compilation pipeline is now quite similar to the <code>Component</code> compilation pipeline. There were two caveats from this implementation, however:</p>\n<ul>\n<li>Modules within a component sharing the same mmap means that the module registration system within stores must now account for modules with overlapping text sections. The <code>.text()</code> accessor returns the same slice for multiple modules, meaning there's now a second-level of indirection for maps where we might want frame information from them.</li>\n<li>Components can export modules, and in the embedding API this returns an actual <code>Module</code>. This module, however, shares the exact same serialized artifact as the component itself, meaning that if the <code>Module</code> itself were serialized it couldn't be deserialized back into a module. For that reason I've at least for now disabled <code>Module::serialize</code> dynamically for modules acquired from a component. This should be fixable but it didn't seem worth it at this time.</li>\n</ul>\n<p>Otherwise this is quite a large change so I've tried to break apart the commits as best I could. Each individual one should pass at least <code>cargo test</code> and represents an incremental step towards AOT-compiling components. If desired I can further split out commits into separate PRs as well.</p>\n<p>As a final note, the route I've chosen here of squashing everything into one object file is notably distinct from previously intended strategies. For example with module linking modules were serialized by concatenating all of their objects together. This was not easily introspectable so my other idea was to use an <code>ar</code> archive for storing a concatenation of objects. In the end I settled on the \"one object file\" approach for a few reasons:</p>\n<ul>\n<li>Using an <code>ar</code> format with the alignment requirements for our object files from mmap'ing the original file to an executable mmap was not going to be easy and I never bottomed out this idea.</li>\n<li>Each object would have its own alignment requirements which was going to add up to a lot of padding. I was afraid of excessive padding in a component with multiple small modules internally.</li>\n<li>Conceptually to me at least a component encompassing modules felt better represented as one large mmap with one shared allocation between all the types. This commit for example cuts down on the individul number of <code>Arc</code>s required and additionally fixes longstanding issues such as only creating one <code>SignatureCollection</code> for a component.</li>\n<li>Overall it felt easier at the time to implement shared systems for loading all of this and felt like the more reasonable course of action.</li>\n</ul>\n<p>Of course the serialization format is just an internal detail of Wasmtime and if necessitated we can change it in the future as well.</p>\n</blockquote>",
        "id": 307124316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667227111
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160\">PR #5160</a> from <code>refactor-compilation</code> to <code>main</code>:</p>\n<blockquote>\n<p>This series of commits is an implementation of AOT-compiling components, namely creating a byte-based artifact from a <code>Component</code> which can, at a later date, be fed back into Wasmtime. The intention of this support is to match the AOT support for <code>Module</code>, only with components instead.</p>\n<p>At a high level the serialized artifact is the same for modules. The artifact is an ELF object file with standard <code>.text</code>/data sections as well as Wasmtime-specific sections with bincode-encoded data or otherwise binary-encoded data. The difference with normal modules is that a component squashes together all of its component modules, so the <code>.text</code> section contains all executable code for all modules contained within. Additionally the <code>.rodata</code> section contains the concatenation of all module data segments. This enables having one mmap for the entire component, including all modules contained within.</p>\n<p>Lots of refactoring internally was necessary for this, namely around the end-part of compilation where an object is emitted and loaded into modules/components. The general shape of the <code>Module</code> compilation pipeline is now quite similar to the <code>Component</code> compilation pipeline. There were two caveats from this implementation, however:</p>\n<ul>\n<li>Modules within a component sharing the same mmap means that the module registration system within stores must now account for modules with overlapping text sections. The <code>.text()</code> accessor returns the same slice for multiple modules, meaning there's now a second-level of indirection for maps where we might want frame information from them.</li>\n<li>Components can export modules, and in the embedding API this returns an actual <code>Module</code>. This module, however, shares the exact same serialized artifact as the component itself, meaning that if the <code>Module</code> itself were serialized it couldn't be deserialized back into a module. For that reason I've at least for now disabled <code>Module::serialize</code> dynamically for modules acquired from a component. This should be fixable but it didn't seem worth it at this time.</li>\n</ul>\n<p>Otherwise this is quite a large change so I've tried to break apart the commits as best I could. Each individual one should pass at least <code>cargo test</code> and represents an incremental step towards AOT-compiling components. If desired I can further split out commits into separate PRs as well.</p>\n<p>As a final note, the route I've chosen here of squashing everything into one object file is notably distinct from previously intended strategies. For example with module linking modules were serialized by concatenating all of their objects together. This was not easily introspectable so my other idea was to use an <code>ar</code> archive for storing a concatenation of objects. In the end I settled on the \"one object file\" approach for a few reasons:</p>\n<ul>\n<li>Using an <code>ar</code> format with the alignment requirements for our object files from mmap'ing the original file to an executable mmap was not going to be easy and I never bottomed out this idea.</li>\n<li>Each object would have its own alignment requirements which was going to add up to a lot of padding. I was afraid of excessive padding in a component with multiple small modules internally.</li>\n<li>Conceptually to me at least a component encompassing modules felt better represented as one large mmap with one shared allocation between all the types. This commit for example cuts down on the individul number of <code>Arc</code>s required and additionally fixes longstanding issues such as only creating one <code>SignatureCollection</code> for a component.</li>\n<li>Overall it felt easier at the time to implement shared systems for loading all of this and felt like the more reasonable course of action.</li>\n</ul>\n<p>Of course the serialization format is just an internal detail of Wasmtime and if necessitated we can change it in the future as well.</p>\n<p>Closes #5119</p>\n</blockquote>",
        "id": 307124391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667227130
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160\">PR #5160</a> from <code>refactor-compilation</code> to <code>main</code>.</p>",
        "id": 307132308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667229328
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160\">PR #5160</a> from <code>refactor-compilation</code> to <code>main</code>.</p>",
        "id": 307148464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667233815
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160\">PR #5160</a>.</p>",
        "id": 307154535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667235467
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160#discussion_r1010841451\">PR review comment</a>:</p>\n<blockquote>\n<p>Not totally clear to me what the motivation for changing this was. Not saying its necessarily wrong or anything but I'm just curious.</p>\n</blockquote>",
        "id": 307422629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667345878
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160#discussion_r1010952346\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Appends a list of compiled functions to an in-memory object.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 307422630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667345878
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160#discussion_r1010852721\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess its just because we are passing in <code>.len()</code>-ish things as input? And isn't necessarily tied to a single <code>u32</code>-sized index space anymore?</p>\n</blockquote>",
        "id": 307422631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667345878
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160#pullrequestreview-1163958722\">PR review</a>.</p>",
        "id": 307422633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667345879
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160#pullrequestreview-1163958722\">PR review</a>.</p>",
        "id": 307422635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667345879
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160#discussion_r1011851225\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah there ended up being a lot of casts around this and having everything be <code>usize</code> removed all the casts, so I went ahead and updated this to <code>usize</code>.</p>\n</blockquote>",
        "id": 307537478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667399423
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160#pullrequestreview-1165363464\">PR review</a>.</p>",
        "id": 307537479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667399423
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160\">PR #5160</a> from <code>refactor-compilation</code> to <code>main</code>.</p>",
        "id": 307537505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667399430
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160\">PR #5160</a>.</p>",
        "id": 307537537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667399440
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5160\">PR #5160</a>.</p>",
        "id": 307551225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667402788
    }
]