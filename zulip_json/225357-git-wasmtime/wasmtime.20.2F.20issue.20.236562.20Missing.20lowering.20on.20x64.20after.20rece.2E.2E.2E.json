[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6562\">issue #6562</a>:</p>\n<blockquote>\n<p>The fuzz bug <a href=\"https://oss-fuzz.com/testcase-detail/5128605622206464\">here</a> shows that on <code>main</code> this program:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    i32.const 0\n    v128.load32_splat align=1\n    f64x2.convert_low_i32x4_u\n  )\n  (memory 0 1)\n)\n</code></pre></div>\n<p>will crash when compiled for x86_64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_from_uint</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64X2</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">21</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>Bisection shows that this was introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6533\">https://github.com/bytecodealliance/wasmtime/pull/6533</a> and this is because the x64 backend only has <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9f3bf5c53b6def14b0ece27b97d410a7778e6267/cranelift/codegen/src/isa/x64/lower.isle#L3272-L3280\">one lowering</a> for <code>fcvt_from_uint</code> matching the exact shape of the lowering of <code>f64x2.convert_low_i32x4_u</code>. This lowering is transformed via the optimization passes added in #6533, meaning that the lowering isn't triggered which leads to the panic.</p>\n</blockquote>",
        "id": 365656824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686597213
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6562\">issue #6562</a>:</p>\n<blockquote>\n<p>The fuzz bug <a href=\"https://oss-fuzz.com/testcase-detail/5128605622206464\">here</a> shows that on <code>main</code> this program:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    i32.const 0\n    v128.load32_splat align=1\n    f64x2.convert_low_i32x4_u\n  )\n  (memory 0 1)\n)\n</code></pre></div>\n<p>will crash when compiled for x86_64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_from_uint</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64X2</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">21</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>Bisection shows that this was introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6533\">https://github.com/bytecodealliance/wasmtime/pull/6533</a> and this is because the x64 backend only has <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9f3bf5c53b6def14b0ece27b97d410a7778e6267/cranelift/codegen/src/isa/x64/lower.isle#L3272-L3280\">one lowering</a> for <code>fcvt_from_uint</code> matching the exact shape of the lowering of <code>f64x2.convert_low_i32x4_u</code>. This lowering is transformed via the optimization passes added in #6533, meaning that the lowering isn't triggered which leads to the panic.</p>\n</blockquote>",
        "id": 365656825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686597213
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6562\">issue #6562</a>:</p>\n<blockquote>\n<p>The fuzz bug <a href=\"https://oss-fuzz.com/testcase-detail/5128605622206464\">here</a> shows that on <code>main</code> this program:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    i32.const 0\n    v128.load32_splat align=1\n    f64x2.convert_low_i32x4_u\n  )\n  (memory 0 1)\n)\n</code></pre></div>\n<p>will crash when compiled for x86_64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_from_uint</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64X2</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">21</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>Bisection shows that this was introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6533\">https://github.com/bytecodealliance/wasmtime/pull/6533</a> and this is because the x64 backend only has <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9f3bf5c53b6def14b0ece27b97d410a7778e6267/cranelift/codegen/src/isa/x64/lower.isle#L3272-L3280\">one lowering</a> for <code>fcvt_from_uint</code> matching the exact shape of the lowering of <code>f64x2.convert_low_i32x4_u</code>. This lowering is transformed via the optimization passes added in #6533, meaning that the lowering isn't triggered which leads to the panic.</p>\n</blockquote>",
        "id": 365656826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686597214
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6562#issuecomment-1587942041\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6562\">issue #6562</a>:</p>\n<blockquote>\n<p>Some possible solutions I can think of to this, none of which are great I think, are:</p>\n<h4>Add a lowering for <code>fcvt_from_uint.f64x2</code> for all inputs</h4>\n<p>This \"feels\" like the right solution but the generated code on x64 is pretty heinous. Looking at LLVM's translation of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">u64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">simd_cast</span>::<span class=\"o\">&lt;</span><span class=\"n\">u64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>it disassembles as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_foo</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>: <span class=\"mi\">55</span><span class=\"w\">                            </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                      </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>: <span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">ef</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                   </span><span class=\"n\">vpxor</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span>\n<span class=\"w\">       </span><span class=\"mi\">8</span>: <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"n\">e3</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">a</span><span class=\"w\">             </span><span class=\"n\">vpblendd</span><span class=\"w\">        </span><span class=\"cp\">$</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"> </span>##<span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">xmm1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">xmm0</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">xmm1</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"w\">       </span><span class=\"n\">e</span>: <span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">eb</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">vpor</span><span class=\"w\">    </span><span class=\"mi\">42</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\">  </span>##<span class=\"w\"> </span><span class=\"mh\">0x40</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_foo</span><span class=\"o\">+</span><span class=\"mh\">0x40</span><span class=\"o\">&gt;</span>\n<span class=\"w\">      </span><span class=\"mi\">16</span>: <span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"mi\">73</span><span class=\"w\"> </span><span class=\"n\">d0</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\">                </span><span class=\"n\">vpsrlq</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">b</span>: <span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"n\">eb</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">vpor</span><span class=\"w\">    </span><span class=\"mi\">45</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\">  </span>##<span class=\"w\"> </span><span class=\"mh\">0x50</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_foo</span><span class=\"o\">+</span><span class=\"mh\">0x50</span><span class=\"o\">&gt;</span>\n<span class=\"w\">      </span><span class=\"mi\">23</span>: <span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">35</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">vsubpd</span><span class=\"w\">  </span><span class=\"mi\">53</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\">  </span>##<span class=\"w\"> </span><span class=\"mh\">0x60</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_foo</span><span class=\"o\">+</span><span class=\"mh\">0x60</span><span class=\"o\">&gt;</span>\n<span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"n\">b</span>: <span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\">                   </span><span class=\"n\">vaddpd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"n\">f</span>: <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                            </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">      </span><span class=\"mi\">30</span>: <span class=\"nc\">c3</span><span class=\"w\">                            </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>so not exactly a trivial or small lowering.</p>\n<h4>Add a lowering for this new pattern</h4>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"cp\">$F64X2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fcvt_from_uint</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uextend</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">))))</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span>\n</code></pre></div>\n<p>This arguably could be a simpler rule than the previous lowering too by doing the conversion then the splat, for example <code>cvtsi2sd</code> + <code>pshufd</code> (or something like that). This feels pretty specific to the problem at hand, though.</p>\n<h4>Add more egraph optimization rules</h4>\n<p>Sort of like the previous pattern, egraph optimizations could transform <code>(fcvt_from_uint (splat (uextend val)))</code> into <code>(splat (fcvt_from_uint (uextend val)))</code> which would then lower correctly. This still feels very specific, though and still brittle.</p>\n<h4>Revert the original commit</h4>\n<p>Only added here for completeness, I don't think this should be done. The original egraph rules added seem good to have and I don't think there's a strong reason to remove them.</p>\n</blockquote>",
        "id": 365658775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686597795
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6562#issuecomment-1587952864\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6562\">issue #6562</a>:</p>\n<blockquote>\n<p>Transforming <code>(fcvt_from_uint (splat (uextend val)))</code> into <code>(splat (fcvt_from_uint (uextend val)))</code> strikes me as a good idea regardless. I think moving operations inside <code>splat</code> increases the odds that we'll find more optimization opportunities since we're much more likely to have good ideas for scalar optimizations.</p>\n<p>I'd _also_ like to have a non-fragile lowering for vector fcvt, and I think that will be necessary as we expand the set of instructions that we cover with cranelift-fuzzgen.</p>\n<p>But in terms of fixing the immediate fuzz bug I like the idea of just adding the additional egraph rules for now.</p>\n</blockquote>",
        "id": 365664401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686598313
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6562\">issue #6562</a>:</p>\n<blockquote>\n<p>The fuzz bug <a href=\"https://oss-fuzz.com/testcase-detail/5128605622206464\">here</a> shows that on <code>main</code> this program:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    i32.const 0\n    v128.load32_splat align=1\n    f64x2.convert_low_i32x4_u\n  )\n  (memory 0 1)\n)\n</code></pre></div>\n<p>will crash when compiled for x86_64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_from_uint</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64X2</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">21</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>Bisection shows that this was introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6533\">https://github.com/bytecodealliance/wasmtime/pull/6533</a> and this is because the x64 backend only has <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9f3bf5c53b6def14b0ece27b97d410a7778e6267/cranelift/codegen/src/isa/x64/lower.isle#L3272-L3280\">one lowering</a> for <code>fcvt_from_uint</code> matching the exact shape of the lowering of <code>f64x2.convert_low_i32x4_u</code>. This lowering is transformed via the optimization passes added in #6533, meaning that the lowering isn't triggered which leads to the panic.</p>\n</blockquote>",
        "id": 365679539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686603038
    }
]