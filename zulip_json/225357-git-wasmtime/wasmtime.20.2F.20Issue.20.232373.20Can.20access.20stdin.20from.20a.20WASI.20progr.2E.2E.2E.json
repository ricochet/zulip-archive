[
    {
        "content": "<p>flavio opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>I hope I'm opening this bug on the right GitHub repo, if not please forgive me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I've written a simple \"echo\" program using <a href=\"https://www.assemblyscript.org\">AssemblyScript</a> and <a href=\"https://github.com/jedisct1/as-wasi\">as-wasi</a>. The program reads the user input from STDIN and writes it back to STDOUT.</p>\n<p>Unfortunately it looks like I can never get back the input I enter.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>This the source code of the AssemblyScript program I'm running:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"s2\">\"wasi\"</span>\n\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">Console</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">\"as-wasi\"</span>\n\n<span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"type something\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">input</span>: <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">msg</span> : <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"nothing\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">readAll</span><span class=\"p\">();</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">input</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"nx\">input</span><span class=\"o\">!</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'I got: '</span> <span class=\"o\">+</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The program can be compiled to a WASM binary by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ asc echo.ts -b echo.wasm\n</code></pre></div>\n<p>And it can be run in this way:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ wasmtime run echo.wasm\n</code></pre></div>\n<p>The program will start and I'll be able to enter my text. The program will keep reading from STDIN until I send the <code>EOF</code> symbol (I'm on Linux -&gt; <code>CTRL-D</code>).</p>\n<p>Unfortunately the <code>input</code> variable is always <code>null</code>.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>I would expect the WASM program to be able to read data from stdin. The <code>input</code> object should hold the text I entered on my terminal.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>This is my stack:</p>\n<p>* wasmtime: 0.21.0<br>\n  * AssemblyScript: 0.17.1<br>\n  * <code>as-wasi</code>: 0.4.0</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>I'm running on a x86_64 Linux box that has openSUSE Tumbleweed</p>\n<p>More information...</p>\n<p>The <code>as-wasi</code> handles STDIN/STDOUT/STDERR by using instances of the <a href=\"https://github.com/jedisct1/as-wasi/blob/master/REFERENCE_API_DOCS.md#class-descriptor\">Descriptor</a> class. The library simply opens the file descriptor <code>0</code> for STDIN, <code>1</code> for STDOUT and <code>2</code> for STDERR. In my tests it looks like opening the file descriptor <code>0</code> always returns a <code>null</code> instance of <code>Descriptor</code>; this doesn't happen with STDOUT and STDERR.</p>\n<p>The same issue happens also when running the program through a custom made Go program I wrote leveraging <code>wasmtime-go</code>. <br>\nIn that case I even tried to start the WASM binary not by inheriting the parent STDIN, but instead by using a text file I previously created. Also in this case the WASM binary got a <code>null</code> object when reading from the STDIN.</p>\n<p><strong>Relevant:</strong> a similar WASM binary, generated by translating Rust -&gt; WASM, just works as expected.</p>\n<p>Thanks for any kind of help you can give me. I gotta say, WebAssembly and wasmtime are really cool :)</p>\n</blockquote>",
        "id": 215886730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604687886
    },
    {
        "content": "<p>flavio labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>I hope I'm opening this bug on the right GitHub repo, if not please forgive me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I've written a simple \"echo\" program using <a href=\"https://www.assemblyscript.org\">AssemblyScript</a> and <a href=\"https://github.com/jedisct1/as-wasi\">as-wasi</a>. The program reads the user input from STDIN and writes it back to STDOUT.</p>\n<p>Unfortunately it looks like I can never get back the input I enter.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>This the source code of the AssemblyScript program I'm running:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"s2\">\"wasi\"</span>\n\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">Console</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">\"as-wasi\"</span>\n\n<span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"type something\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">input</span>: <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">msg</span> : <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"nothing\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">readAll</span><span class=\"p\">();</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">input</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"nx\">input</span><span class=\"o\">!</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'I got: '</span> <span class=\"o\">+</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The program can be compiled to a WASM binary by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ asc echo.ts -b echo.wasm\n</code></pre></div>\n<p>And it can be run in this way:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ wasmtime run echo.wasm\n</code></pre></div>\n<p>The program will start and I'll be able to enter my text. The program will keep reading from STDIN until I send the <code>EOF</code> symbol (I'm on Linux -&gt; <code>CTRL-D</code>).</p>\n<p>Unfortunately the <code>input</code> variable is always <code>null</code>.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>I would expect the WASM program to be able to read data from stdin. The <code>input</code> object should hold the text I entered on my terminal.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>This is my stack:</p>\n<p>* wasmtime: 0.21.0<br>\n  * AssemblyScript: 0.17.1<br>\n  * <code>as-wasi</code>: 0.4.0</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>I'm running on a x86_64 Linux box that has openSUSE Tumbleweed</p>\n<p>More information...</p>\n<p>The <code>as-wasi</code> handles STDIN/STDOUT/STDERR by using instances of the <a href=\"https://github.com/jedisct1/as-wasi/blob/master/REFERENCE_API_DOCS.md#class-descriptor\">Descriptor</a> class. The library simply opens the file descriptor <code>0</code> for STDIN, <code>1</code> for STDOUT and <code>2</code> for STDERR. In my tests it looks like opening the file descriptor <code>0</code> always returns a <code>null</code> instance of <code>Descriptor</code>; this doesn't happen with STDOUT and STDERR.</p>\n<p>The same issue happens also when running the program through a custom made Go program I wrote leveraging <code>wasmtime-go</code>. <br>\nIn that case I even tried to start the WASM binary not by inheriting the parent STDIN, but instead by using a text file I previously created. Also in this case the WASM binary got a <code>null</code> object when reading from the STDIN.</p>\n<p><strong>Relevant:</strong> a similar WASM binary, generated by translating Rust -&gt; WASM, just works as expected.</p>\n<p>Thanks for any kind of help you can give me. I gotta say, WebAssembly and wasmtime are really cool :)</p>\n</blockquote>",
        "id": 215886731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604687886
    }
]