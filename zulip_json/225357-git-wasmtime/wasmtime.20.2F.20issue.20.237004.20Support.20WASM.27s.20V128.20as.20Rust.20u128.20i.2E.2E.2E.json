[
    {
        "content": "<p>cylewitruk opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004\">issue #7004</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>Wondering why V128 isn't supported in Func::wrap()? Both Walrus and Wasmer seem to allow V128's to be used in host functions mapped as u128's. I know this wasn't the \"intended\" use for V128's, but it would sure be nice for host functions :)</p>\n<h4>Benefit</h4>\n<p>Would allow passing of 128-bit numbers to/from host-functions without the need to split them into two parameters including lower and upper bits.</p>\n<h4>Implementation</h4>\n<p>Haven't looked into the Wasmtime internals, so no comment.</p>\n<h4>Alternatives</h4>\n<ul>\n<li>Passing two i64's low+high bits and bitwising them apart/together (fast, but boilerplate needed).</li>\n<li>Using ExternRef's to pass u/i128's (slow)</li>\n<li>Open to other suggestions...?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 390533175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694529269
    },
    {
        "content": "<p>cylewitruk edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004\">issue #7004</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>Wondering why V128 isn't supported in Func::wrap()? Both Walrus and Wasmer seem to allow V128's to be used in host functions mapped as u128's. I know this wasn't the \"intended\" use for V128's, but it would sure be nice for host functions, at least in Rust :)</p>\n<h4>Benefit</h4>\n<p>Would allow passing of 128-bit numbers to/from host-functions without the need to split them into two parameters including lower and upper bits.</p>\n<h4>Implementation</h4>\n<p>Haven't looked into the Wasmtime internals, so no comment.</p>\n<h4>Alternatives</h4>\n<ul>\n<li>Passing two i64's low+high bits and bitwising them apart/together (fast, but boilerplate needed).</li>\n<li>Using ExternRef's to pass u/i128's (slow)</li>\n<li>Open to other suggestions...?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 390534352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694529630
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004#issuecomment-1716437250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004\">issue #7004</a>:</p>\n<blockquote>\n<p>I've been meaning to dust off <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7010\">this branch</a> for some time now!</p>\n</blockquote>",
        "id": 390596620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694552709
    },
    {
        "content": "<p>cylewitruk <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004#issuecomment-1717362427\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004\">issue #7004</a>:</p>\n<blockquote>\n<p>Well look at that! I searched issues and PR's before opening this and didn't find anything, but looks like it was hiding in a branch :) That would be really awesome, actually.  We're currently evaluating Wasmtime as the runtime for <a href=\"http://stacks.co\">stacks.co</a> VM runtime for its Clarity language. As all numbers are currently treated as 128-bits, this would definitely save us some headaches! :D </p>\n</blockquote>",
        "id": 390691907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694600756
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004#issuecomment-1717827631\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004\">issue #7004</a>:</p>\n<blockquote>\n<p>One thing to keep in mind perhaps is that <code>v128</code> is generally intended for vector/simd operations right now so it may not be totally suitable for 128-bit numbers since there's nothing like <code>v128.add</code> which performs a 128-bit addition. You may get more mileage out of pairs of <code>u64</code> depending on your use case. </p>\n<p>Additionally most engines may not be that optimal at this time passing around <code>v128</code> as parameters and results. The <code>v128</code> type is generally thought of \"you use this in your hot inner loop and that's it\". One example is that Cranelift/Wasmtime follow System-V which means that on RISC-V for example all arguments/results are passed through memory rather than in registers. </p>\n<p>Not to say that this isn't a good use case, just figured it might be worth giving a heads up! I personally think it'd be reasonable to improve these sorts of issues if they arise. If you're interested in running on other engines though it might be worth testing there too</p>\n</blockquote>",
        "id": 390745157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694617799
    },
    {
        "content": "<p>cylewitruk <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004#issuecomment-1721917437\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004\">issue #7004</a>:</p>\n<blockquote>\n<p>Very informed input, and good information for anyone else who might be wondering the same thing!</p>\n<p>In our case we're aware of the limitations and that v128 was meant primarily for simd operations - we're currently passing low/high u64 pairs back-and-forth, but this does incur a slight overhead in host functions instead of simply being able to, for example, <code>u128:.from_le_bytes(...)</code>.</p>\n</blockquote>",
        "id": 391271112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694815606
    },
    {
        "content": "<p>cylewitruk edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004#issuecomment-1721917437\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004\">issue #7004</a>:</p>\n<blockquote>\n<p>Very informed input, and good information for anyone else who might be wondering the same thing!</p>\n<p>In our case we're aware of the limitations and that v128 was meant primarily for simd operations - we're currently passing low/high u64 pairs back-and-forth, but this does incur a slight overhead in host functions instead of simply being able to, for example, <code>u128::from_le_bytes(...)</code>.</p>\n</blockquote>",
        "id": 391271144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694815623
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004#issuecomment-1721969301\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004\">issue #7004</a>:</p>\n<blockquote>\n<p>Ok sounds good! I forgot to close this earlier but this was solved by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7010\">https://github.com/bytecodealliance/wasmtime/pull/7010</a>.</p>\n<p>If you notice any performance issues though in this area (or others) please let us know!</p>\n</blockquote>",
        "id": 391275874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694817726
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7004\">issue #7004</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>Wondering why V128 isn't supported in Func::wrap()? Both Walrus and Wasmer seem to allow V128's to be used in host functions mapped as u128's. I know this wasn't the \"intended\" use for V128's, but it would sure be nice for host functions, at least in Rust :)</p>\n<h4>Benefit</h4>\n<p>Would allow passing of 128-bit numbers to/from host-functions without the need to split them into two parameters including lower and upper bits.</p>\n<h4>Implementation</h4>\n<p>Haven't looked into the Wasmtime internals, so no comment.</p>\n<h4>Alternatives</h4>\n<ul>\n<li>Passing two i64's low+high bits and bitwising them apart/together (fast, but boilerplate needed).</li>\n<li>Using ExternRef's to pass u/i128's (slow)</li>\n<li>Open to other suggestions...?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 391275876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694817726
    }
]