[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4494\">issue #4494</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>This is a tracking issue filed during the implementation of #4488.</p>\n<p>The component model specifies that types can be imported and exported in components.</p>\n<p>Previously, a component that imported or exported a type would hit an <code>unimplemented!()</code> panic.</p>\n<p>With #4488, type exports are now explicitly ignored while type imports continue to hit the <code>unimplemented!()</code> panic.</p>\n<p>The reason for this is that exports are useful with the current component model proposal as a way of giving a type a name, which is one way the component tooling can keep a faithful representation of the component's interface directly in the binary encoding.</p>\n<p>The component model tooling does not make use of type imports yet, as those will be useful once the component model proposal includes support for resource types.</p>\n<h4>Benefit</h4>\n<p>Eventually type imports and exports will be used from components and Wasmtime will need to be able to instantiate such components.</p>\n<h4>Implementation</h4>\n<p>If type imports and exports remain in the component model proposal, Wasmtime will need to represent them both in the <code>Component</code> and <code>Instance</code> representations for components.</p>\n<p>It will also need to properly implement resolving type imports and exports in a way that allows imports to be satisfied for component instantiation.<br>\n</p>\n</blockquote>",
        "id": 290305814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658354759
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4494\">issue #4494</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>This is a tracking issue filed during the implementation of #4488.</p>\n<p>The component model specifies that types can be imported and exported in components.</p>\n<p>Previously, a component that imported or exported a type would hit an <code>unimplemented!()</code> panic.</p>\n<p>With #4488, type exports are now explicitly ignored while type imports continue to hit the <code>unimplemented!()</code> panic. This tracking issue exists so that we remove the code that skips type exports while translating the component.</p>\n<p>The reason for this is that exports are useful with the current component model proposal as a way of giving a type a name, which is one way the component tooling can keep a faithful representation of the component's interface directly in the binary encoding.</p>\n<p>The component model tooling does not make use of type imports yet, as those will be useful once the component model proposal includes support for resource types.</p>\n<h4>Benefit</h4>\n<p>Eventually type imports and exports will be used from components and Wasmtime will need to be able to instantiate such components.</p>\n<h4>Implementation</h4>\n<p>If type imports and exports remain in the component model proposal, Wasmtime will need to represent them both in the <code>Component</code> and <code>Instance</code> representations for components.</p>\n<p>It will also need to properly implement resolving type imports and exports in a way that allows imports to be satisfied for component instantiation.<br>\n</p>\n</blockquote>",
        "id": 290306006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658354858
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4494\">issue #4494</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>This is a tracking issue filed during the implementation of #4488.</p>\n<p>The component model specifies that types can be imported and exported in components.</p>\n<p>Previously, a component that imported or exported a type would hit an <code>unimplemented!()</code> panic.</p>\n<p>With #4488, type exports are now explicitly ignored while type imports continue to hit the <code>unimplemented!()</code> panic. This tracking issue exists so that we remove the code that skips type exports while translating the component.</p>\n<p>The reason for this is that exports are useful with the current component model proposal as a way of giving a type a name, which is one way the component tooling can keep a faithful representation of the component's interface directly in the binary encoding.</p>\n<p>The component model tooling does not make use of type imports yet, as those will be useful once the component model proposal includes support for resource types.</p>\n<h4>Benefit</h4>\n<p>Eventually type imports and exports will be used from components and Wasmtime will need to be able to instantiate such components.</p>\n<h4>Implementation</h4>\n<p>If type imports and exports remain in the component model proposal, Wasmtime will need to represent them both in the <code>Component</code> and <code>Instance</code> representations for components.</p>\n<p>It will also need to properly implement resolving type imports and exports in a way that allows types imports to be satisfied for component instantiation.<br>\n</p>\n</blockquote>",
        "id": 290306781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658355308
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4494\">issue #4494</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>This is a tracking issue filed during the implementation of #4488.</p>\n<p>The component model specifies that types can be imported and exported in components.</p>\n<p>Previously, a component that imported or exported a type would hit an <code>unimplemented!()</code> panic.</p>\n<p>With #4488, type exports are now explicitly ignored while type imports continue to hit the <code>unimplemented!()</code> panic. This tracking issue exists so that we remove the code that skips type exports while translating the component.</p>\n<p>The reason for this is that exports are useful with the current component model proposal as a way of giving a type a name, which is one way the component tooling can keep a faithful representation of the component's interface directly in the binary encoding.</p>\n<p>The component model tooling does not make use of type imports yet, as those will be useful once the component model proposal includes support for resource types.</p>\n<h4>Benefit</h4>\n<p>Eventually type imports and exports will be used from components and Wasmtime will need to be able to instantiate such components.</p>\n<h4>Implementation</h4>\n<p>If type imports and exports remain in the component model proposal, Wasmtime will need to represent them both in the <code>Component</code> and <code>Instance</code> representations for components.</p>\n<p>It will also need to properly implement resolving type imports and exports in a way that allows types imports to be satisfied for component instantiation.<br>\n</p>\n</blockquote>",
        "id": 290394335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418798
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4494#issuecomment-1650285119\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4494\">issue #4494</a>:</p>\n<blockquote>\n<p>I think that this has settled nowadays so I'm going to close this as \"done\"</p>\n</blockquote>",
        "id": 378561222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690307515
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4494\">issue #4494</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>This is a tracking issue filed during the implementation of #4488.</p>\n<p>The component model specifies that types can be imported and exported in components.</p>\n<p>Previously, a component that imported or exported a type would hit an <code>unimplemented!()</code> panic.</p>\n<p>With #4488, type exports are now explicitly ignored while type imports continue to hit the <code>unimplemented!()</code> panic. This tracking issue exists so that we remove the code that skips type exports while translating the component.</p>\n<p>The reason for this is that exports are useful with the current component model proposal as a way of giving a type a name, which is one way the component tooling can keep a faithful representation of the component's interface directly in the binary encoding.</p>\n<p>The component model tooling does not make use of type imports yet, as those will be useful once the component model proposal includes support for resource types.</p>\n<h4>Benefit</h4>\n<p>Eventually type imports and exports will be used from components and Wasmtime will need to be able to instantiate such components.</p>\n<h4>Implementation</h4>\n<p>If type imports and exports remain in the component model proposal, Wasmtime will need to represent them both in the <code>Component</code> and <code>Instance</code> representations for components.</p>\n<p>It will also need to properly implement resolving type imports and exports in a way that allows types imports to be satisfied for component instantiation.<br>\n</p>\n</blockquote>",
        "id": 378561223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690307516
    }
]