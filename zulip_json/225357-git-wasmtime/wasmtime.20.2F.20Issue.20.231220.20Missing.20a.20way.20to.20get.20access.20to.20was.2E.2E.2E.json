[
    {
        "content": "<p>rene-fonseca <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220#issuecomment-594429907\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1220#issuecomment-594429907\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1220\">Issue #1220</a>:</p>\n<blockquote>\n<p>Yes, <code>wasi_instance_exports</code> would be fine for now.</p>\n</blockquote>",
        "id": 189676084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583316167
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1220\">Issue #1220</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>For the new wasi.h we can create <code>own wasi_instance_t* wasi_instance_new</code>. But there is no away to access the wasm API using the wasi_instance_t handle. E.g. for getting the export table with <code>wasm_instance_exports</code>.</p>\n<p>Seems like we need an API to get the wasi_instance_t from the wasi_instance_t. To avoid having to replicate all wasm APIs as wasi APIs.</p>\n</blockquote>",
        "id": 190308386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583947411
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220#issuecomment-597763152\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1220#issuecomment-597763152\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1220\">Issue #1220</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>This issue or pull request has been labeled \"wasmtime:c-api\".</p>\n<p>&lt;details&gt; &lt;summary&gt;Users Subscribed to \"wasmtime:c-api\"&lt;/summary&gt;</p>\n<ul>\n<li>@peterhuene</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" target=\"_blank\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a></p>\n</blockquote>",
        "id": 190308406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583947425
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220#issuecomment-601960601\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1220#issuecomment-601960601\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1220\">Issue #1220</a>:</p>\n<blockquote>\n<p>As I mentioned in #1221, the problem with adding a <code>wasi_instance_exports</code> is that <code>wasm_extern_t</code> won't give any names, so you'd only get a set of functions and their types, without knowing which function is which.</p>\n<p>If we were to properly model this, we would need to represent a WASI module with <code>wasm_module_t</code> so you could call <code>wasm_module_exports</code> to get the symbolic information.</p>\n<p>So maybe have <code>wasm_module_t* wasi_module_new(wasm_store_t*, const char* name)</code> where name must be a supported WASI version.  From there the usual functions would work.</p>\n<p>This is a bunch of work, but it would unify the two APIs (Wasm C API and the WASI extensions) more.</p>\n</blockquote>",
        "id": 191317703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584749239
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220#issuecomment-601960601\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1220#issuecomment-601960601\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1220\">Issue #1220</a>:</p>\n<blockquote>\n<p>As I mentioned in #1221, the problem with adding a <code>wasi_instance_exports</code> is that <code>wasm_extern_t</code> won't give any names, so you'd only get a set of functions and their types, without knowing which function is which.</p>\n<p>If we were to properly model this, we would need to represent a WASI module with <code>wasm_module_t</code> so you could call <code>wasm_module_exports</code> to get the symbolic information.</p>\n<p>So maybe have <code>wasm_module_t* wasi_module_new(wasm_store_t*, const char* name)</code> where name must be a supported WASI version.  From there the <code>wasm_instance_*</code> functions would work.</p>\n<p>This is a bunch of work, but it would unify the two APIs (Wasm C API and the WASI extensions) more.</p>\n</blockquote>",
        "id": 191317745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584749275
    },
    {
        "content": "<p>plicease <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220#issuecomment-629640439\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1220\">Issue #1220</a>:</p>\n<blockquote>\n<blockquote>\n<p>So maybe have <code>wasm_module_t* wasi_module_new(wasm_store_t*, const char* name)</code> where name must be a supported WASI version. From there the <code>wasm_instance_*</code> functions would work.</p>\n</blockquote>\n<p>It would be great from my perspective to be able to treat wasi as regular module and not have to special case it.</p>\n</blockquote>",
        "id": 197794103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589633160
    }
]