[
    {
        "content": "<p>oskgo opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617\">issue #5617</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add support for doing cryptographic constant-time in cranelift.</p>\n<p>A great introductory guide to cryptographic constant-time can be found at: <a href=\"https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html\">https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html</a></p>\n<p>Citing the main idea: </p>\n<blockquote>\n<p>Secret information may only be used in an input to an instruction if that input has no impact on what resources will be used and for how long</p>\n</blockquote>\n<h4>Benefit</h4>\n<p>Enables giving higher assurances for cryptographic implementations by allowing them to be secured against or at least resistant to timing attacks.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Adding support for annotating \"secret\" values/identifiers</li>\n<li>Restricting optimizations and codegen involving these secrets</li>\n</ul>\n<h4>Caveats</h4>\n<ul>\n<li>Performance is very important for cryptography, so the level of interest depends on whether it is possible to get comparable performance with Cranelift. This is not about how good Cranelift optimizes, but how well hand-optimized code that ends up in Cranelift can run in the best case.</li>\n<li>It is unlikely for cryptography to be written in cranelift IR itself, so the benefits of this proposal are unlikely to bear fruit until WASM or Rust get support.</li>\n</ul>\n</blockquote>",
        "id": 322772527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674330140
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617#issuecomment-1399328551\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617\">issue #5617</a>:</p>\n<blockquote>\n<blockquote>\n<p>It is unlikely for cryptography to be written in cranelift IR itself, so the benefits of this proposal are unlikely to bear fruit until WASM or Rust get support.</p>\n</blockquote>\n<p>I guess <a href=\"https://github.com/mit-plv/fiat-crypto/\">fiat-crypto</a> could get a Cranelift backend. That would give you a lot of elliptic curve implementations without too much effort. Still leaves other kinds of crypto primitives though.</p>\n</blockquote>",
        "id": 322777255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674333598
    },
    {
        "content": "<p>oskgo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617#issuecomment-1399330026\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617\">issue #5617</a>:</p>\n<blockquote>\n<p>Yes, and there are others that could get Cranelift back-ends that would then immediately benefit as well.</p>\n<p>I guess my point is more that this proposal won't do much by itself and has to rely on what other projects do to get benefits.</p>\n<p>Sadly this argument can be made by both sides. Someone has to take the first step. </p>\n</blockquote>",
        "id": 322778049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674334209
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617#issuecomment-1400928012\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617\">issue #5617</a>:</p>\n<blockquote>\n<p>I wonder if adding this infrastructure might allow us to remove the <code>select_spectre_guard</code> variant of the <code>select</code> instruction? I'm imagining something like tagging the result of a bounds-check as \"secret\" before passing it to <code>select</code>.</p>\n<p>If constant-time operations can be a special case of the kind of optimization barrier we already need for Spectre mitigations, I think that would make it easier to justify maintaining this infrastructure before anybody else starts using it.</p>\n</blockquote>",
        "id": 323110486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674505245
    },
    {
        "content": "<p>oskgo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617#issuecomment-1401208293\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617\">issue #5617</a>:</p>\n<blockquote>\n<p>You couldn't remove the variant by making the select condition a secret without changing the abstract semantics. <code>select_spectre_guard</code> has sideffects, while <code>select</code> doesn't, so IIUC the optimizer is free to remove calls to <code>select</code> very freely, while calls to <code>select_spectre_guard</code> can only be removed when an entire branch is removed.</p>\n<p>If <code>select_spectre_guard</code> having sideeffects is just a hack to prevent it being replaced with branches, then using a secret condition on <code>select</code> instead would actually be an improvement since it would allow deleting the instruction when it isn't needed. This also makes more sense, since conditional moves don't really have side effects, it's just the alternatives that might have them.</p>\n</blockquote>",
        "id": 323144506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674520653
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617#issuecomment-1401239894\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5617\">issue #5617</a>:</p>\n<blockquote>\n<blockquote>\n<p>If select_spectre_guard having sideeffects is just a hack to prevent it being replaced with branches</p>\n</blockquote>\n<p>Indeed it is a hack; the only restriction that's necessary is that it remains a cmove and is neither converted to a branchy form, nor is constant-propagated. (Well, I suppose cprop based on a statically constant value would preserve the speculation safety, but cprop from a path-sensitive constant past a branch would not.)</p>\n<p>I very much like @jameysharp 's idea of subsuming this with a more general taintedness notion that ensures no branch depends on it!</p>\n</blockquote>",
        "id": 323148725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674523037
    }
]