[
    {
        "content": "<p>julian-seward1 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a> from <code>atomics-x64-CL</code> to <code>main</code>:</p>\n<blockquote>\n<p>… on newBE/x64.  It does</p>\n<p>this by providing an implementation of the CLIF instructions <code>AtomicRmw</code>, <code>AtomicCas</code>,<br>\n<code>AtomicLoad</code>, <code>AtomicStore</code> and <code>Fence</code>.</p>\n<p>The translation is straightforward.  <code>AtomicCas</code> is translated into x64 <code>cmpxchg</code>, <code>AtomicLoad</code><br>\nbecomes a normal load because x64-TSO provides adequate sequencing, <code>AtomicStore</code> becomes a<br>\nnormal store followed by <code>mfence</code>, and <code>Fence</code> becomes <code>mfence</code>.  <code>AtomicRmw</code> is the only<br>\ncomplex case: it becomes a normal load, followed by a loop which computes an updated value,<br>\ntries to <code>cmpxchg</code> it back to memory, and repeats if necessary.</p>\n<p>This is a minimum-effort initial implementation.  <code>AtomicRmw</code> could be implemented more<br>\nefficiently using LOCK-prefixed integer read-modify-write instructions in the case where the old<br>\nvalue in memory is not required.  Subsequent work could add that, if required.</p>\n<p>The x64 emitter has been updated to emit the new instructions, obviously.  The <code>LegacyPrefix</code><br>\nmechanism has been revised to handle multiple prefix bytes, not just one, since it is now<br>\nsometimes necessary to emit both 0x66 (Operand Size Override) and F0 (Lock).</p>\n<p>In the aarch64 implementation of atomics, there has been some minor renaming for the sake of<br>\nclarity, and for consistency with this x64 implementation.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207490541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597902040
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a> from <code>atomics-x64-CL</code> to <code>main</code>:</p>\n<blockquote>\n<p>… on newBE/x64.  It does</p>\n<p>this by providing an implementation of the CLIF instructions <code>AtomicRmw</code>, <code>AtomicCas</code>,<br>\n<code>AtomicLoad</code>, <code>AtomicStore</code> and <code>Fence</code>.</p>\n<p>The translation is straightforward.  <code>AtomicCas</code> is translated into x64 <code>cmpxchg</code>, <code>AtomicLoad</code><br>\nbecomes a normal load because x64-TSO provides adequate sequencing, <code>AtomicStore</code> becomes a<br>\nnormal store followed by <code>mfence</code>, and <code>Fence</code> becomes <code>mfence</code>.  <code>AtomicRmw</code> is the only<br>\ncomplex case: it becomes a normal load, followed by a loop which computes an updated value,<br>\ntries to <code>cmpxchg</code> it back to memory, and repeats if necessary.</p>\n<p>This is a minimum-effort initial implementation.  <code>AtomicRmw</code> could be implemented more<br>\nefficiently using LOCK-prefixed integer read-modify-write instructions in the case where the old<br>\nvalue in memory is not required.  Subsequent work could add that, if required.</p>\n<p>The x64 emitter has been updated to emit the new instructions, obviously.  The <code>LegacyPrefix</code><br>\nmechanism has been revised to handle multiple prefix bytes, not just one, since it is now<br>\nsometimes necessary to emit both 0x66 (Operand Size Override) and F0 (Lock).</p>\n<p>In the aarch64 implementation of atomics, there has been some minor renaming for the sake of<br>\nclarity, and for consistency with this x64 implementation.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207508827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597919809
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a> from <code>atomics-x64-CL</code> to <code>main</code>:</p>\n<blockquote>\n<p>… on newBE/x64.  It does</p>\n<p>this by providing an implementation of the CLIF instructions <code>AtomicRmw</code>, <code>AtomicCas</code>,<br>\n<code>AtomicLoad</code>, <code>AtomicStore</code> and <code>Fence</code>.</p>\n<p>The translation is straightforward.  <code>AtomicCas</code> is translated into x64 <code>cmpxchg</code>, <code>AtomicLoad</code><br>\nbecomes a normal load because x64-TSO provides adequate sequencing, <code>AtomicStore</code> becomes a<br>\nnormal store followed by <code>mfence</code>, and <code>Fence</code> becomes <code>mfence</code>.  <code>AtomicRmw</code> is the only<br>\ncomplex case: it becomes a normal load, followed by a loop which computes an updated value,<br>\ntries to <code>cmpxchg</code> it back to memory, and repeats if necessary.</p>\n<p>This is a minimum-effort initial implementation.  <code>AtomicRmw</code> could be implemented more<br>\nefficiently using LOCK-prefixed integer read-modify-write instructions in the case where the old<br>\nvalue in memory is not required.  Subsequent work could add that, if required.</p>\n<p>The x64 emitter has been updated to emit the new instructions, obviously.  The <code>LegacyPrefix</code><br>\nmechanism has been revised to handle multiple prefix bytes, not just one, since it is now<br>\nsometimes necessary to emit both 0x66 (Operand Size Override) and F0 (Lock).</p>\n<p>In the aarch64 implementation of atomics, there has been some minor renaming for the sake of<br>\nclarity, and for consistency with this x64 implementation.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207510953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597921725
    },
    {
        "content": "<p><strong>julian-seward1</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a>.</p>",
        "id": 207511890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597922587
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-471714803\">PR Review</a>.</p>",
        "id": 207536389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937634
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-471714803\">PR Review</a>.</p>",
        "id": 207536390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937634
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474059044\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you expand the names here, or at least add comments? I have no clues what M/L/S mean.</p>\n</blockquote>",
        "id": 207536391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474061577\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe hoist the aarch64 version then, and hoist it in the <code>machinst</code> code or a new <code>isa/common</code> directory?</p>\n</blockquote>",
        "id": 207536392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474062124\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: here and below, can you use doc comments instead, so they show up in LSP hovers/docs.rs, etc?</p>\n</blockquote>",
        "id": 207536394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474063233\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: we do not use <code>/*</code> comments in general, can you use <code>//</code> instead?</p>\n</blockquote>",
        "id": 207536395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474064139\">PR Review Comment</a>:</p>\n<blockquote>\n<p>With the new <code>load</code> helper introduced in the SIMD PR (that should land soonish, probably), you might be able to just use <code>Inst::load</code> here.</p>\n</blockquote>",
        "id": 207536396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474065662\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: can you expand <code>insn</code> + precise that the second really means second in the loop?</p>\n</blockquote>",
        "id": 207536397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474066133\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you commonize all these match arms together? <code>=&gt; Inst::alu_rmi_r(true, AluRmiROpcode::from(op), r10_rmi, r11_w)</code> to avoid code duplication</p>\n</blockquote>",
        "id": 207536398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474068910\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: here too, please don't use shorthands for read/write</p>\n</blockquote>",
        "id": 207536399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474067295\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit (twice): what does <code>rd</code> mean?</p>\n</blockquote>",
        "id": 207536400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474068348\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: please expand <code>CAS</code> at least once, with acronym in parenthesis.</p>\n</blockquote>",
        "id": 207536401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474070939\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you open an issue for the improvements, please, and refer to it with a <code>TODO</code> comment mentioning the issue number?</p>\n</blockquote>",
        "id": 207536402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474071388\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ditto insn</p>\n</blockquote>",
        "id": 207536403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474073987\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could we remove this comment? It's a bit weird to read this here, since there's a sequence of vcode insts, and the vcode inst actually trashing this register already mentions it does that by the code in <code>get_regs</code>.</p>\n</blockquote>",
        "id": 207536404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474072814\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you remove the <code>r_</code> prefixes, for consistency with the rest of this file?</p>\n</blockquote>",
        "id": 207536405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474067947\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've tried to keep \"Seq\" in the name for synthetic sequences of instruction, can you put it as a suffix here please?</p>\n</blockquote>",
        "id": 207536406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474069280\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: here and below, <code>\"mfence\".to_string()</code></p>\n</blockquote>",
        "id": 207536409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474070634\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: expand insn</p>\n</blockquote>",
        "id": 207536410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937635
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474067477\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: can you expand <code>mod</code> too?</p>\n</blockquote>",
        "id": 207536412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937636
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474068782\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: expand instruction</p>\n</blockquote>",
        "id": 207536413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597937637
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-471746361\">PR Review</a>.</p>",
        "id": 207537372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597938083
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474082991\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Well those names are what Intel calls them: <code>mfence</code>, <code>sfence</code> and <code>lfence</code>.  I could expand them to what Intel describes them as: Memory Fence, Store Fence and Load Fence respectively.  Or maybe I should just add comments on the enum?</p>\n</blockquote>",
        "id": 207537373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597938083
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-471746948\">PR Review</a>.</p>",
        "id": 207537470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597938123
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474083444\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah, I just spotted that.</p>\n</blockquote>",
        "id": 207537471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597938123
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-472037979\">PR Review</a>.</p>",
        "id": 207583906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597964063
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474315303\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should be in <code>main</code> now.</p>\n</blockquote>",
        "id": 207583907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597964063
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-472315539\">PR Review</a>.</p>",
        "id": 207611738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597999737
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474537969\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.  Although the result is actually longer:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\">  </span><span class=\"n\">AtomicRMWOp</span>::<span class=\"n\">Xchg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AtomicRMWOp</span>::<span class=\"n\">Xchg</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Inst</span>::<span class=\"n\">mov_r_r</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r11_w</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alu_op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">AtomicRMWOp</span>::<span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">AluRmiROpcode</span>::<span class=\"n\">Add</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">AtomicRMWOp</span>::<span class=\"n\">Sub</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">AluRmiROpcode</span>::<span class=\"n\">Sub</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">AtomicRMWOp</span>::<span class=\"n\">And</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">AluRmiROpcode</span>::<span class=\"n\">And</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">AtomicRMWOp</span>::<span class=\"n\">Or</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">AluRmiROpcode</span>::<span class=\"n\">Or</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">AtomicRMWOp</span>::<span class=\"n\">Xor</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">AluRmiROpcode</span>::<span class=\"n\">Xor</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">AtomicRMWOp</span>::<span class=\"n\">Xchg</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"o\">!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">Inst</span>::<span class=\"n\">alu_rmi_r</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alu_op</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r10_rmi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r11_w</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I tend to assume that rustc/LLVM will do tail-merging and hence cause all the duplication to disappear in the final machine code.  I don't know that that's true, though.</p>\n</blockquote>",
        "id": 207611739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597999737
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474540442\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Read; I fixed all of these, and the wr and mod too.</p>\n</blockquote>",
        "id": 207611886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597999876
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-472317772\">PR Review</a>.</p>",
        "id": 207611887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597999876
    },
    {
        "content": "<p>julian-seward1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474537969\">PR Review Comment</a>.</p>",
        "id": 207613107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598000812
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-472341962\">PR Review</a>.</p>",
        "id": 207614513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598002037
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474573321\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Filed as PR #2153.</p>\n</blockquote>",
        "id": 207614514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598002037
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-472368832\">PR Review</a>.</p>",
        "id": 207618207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598004468
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474603941\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I moved it into a new file <code>src/machinst/inst_common.rs</code>.</p>\n</blockquote>",
        "id": 207618208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598004468
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a> from <code>atomics-x64-CL</code> to <code>main</code>:</p>\n<blockquote>\n<p>… on newBE/x64.  It does</p>\n<p>this by providing an implementation of the CLIF instructions <code>AtomicRmw</code>, <code>AtomicCas</code>,<br>\n<code>AtomicLoad</code>, <code>AtomicStore</code> and <code>Fence</code>.</p>\n<p>The translation is straightforward.  <code>AtomicCas</code> is translated into x64 <code>cmpxchg</code>, <code>AtomicLoad</code><br>\nbecomes a normal load because x64-TSO provides adequate sequencing, <code>AtomicStore</code> becomes a<br>\nnormal store followed by <code>mfence</code>, and <code>Fence</code> becomes <code>mfence</code>.  <code>AtomicRmw</code> is the only<br>\ncomplex case: it becomes a normal load, followed by a loop which computes an updated value,<br>\ntries to <code>cmpxchg</code> it back to memory, and repeats if necessary.</p>\n<p>This is a minimum-effort initial implementation.  <code>AtomicRmw</code> could be implemented more<br>\nefficiently using LOCK-prefixed integer read-modify-write instructions in the case where the old<br>\nvalue in memory is not required.  Subsequent work could add that, if required.</p>\n<p>The x64 emitter has been updated to emit the new instructions, obviously.  The <code>LegacyPrefix</code><br>\nmechanism has been revised to handle multiple prefix bytes, not just one, since it is now<br>\nsometimes necessary to emit both 0x66 (Operand Size Override) and F0 (Lock).</p>\n<p>In the aarch64 implementation of atomics, there has been some minor renaming for the sake of<br>\nclarity, and for consistency with this x64 implementation.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207619196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598005255
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a> from <code>atomics-x64-CL</code> to <code>main</code>:</p>\n<blockquote>\n<p>… on newBE/x64.  It does</p>\n<p>this by providing an implementation of the CLIF instructions <code>AtomicRmw</code>, <code>AtomicCas</code>,<br>\n<code>AtomicLoad</code>, <code>AtomicStore</code> and <code>Fence</code>.</p>\n<p>The translation is straightforward.  <code>AtomicCas</code> is translated into x64 <code>cmpxchg</code>, <code>AtomicLoad</code><br>\nbecomes a normal load because x64-TSO provides adequate sequencing, <code>AtomicStore</code> becomes a<br>\nnormal store followed by <code>mfence</code>, and <code>Fence</code> becomes <code>mfence</code>.  <code>AtomicRmw</code> is the only<br>\ncomplex case: it becomes a normal load, followed by a loop which computes an updated value,<br>\ntries to <code>cmpxchg</code> it back to memory, and repeats if necessary.</p>\n<p>This is a minimum-effort initial implementation.  <code>AtomicRmw</code> could be implemented more<br>\nefficiently using LOCK-prefixed integer read-modify-write instructions in the case where the old<br>\nvalue in memory is not required.  Subsequent work could add that, if required.</p>\n<p>The x64 emitter has been updated to emit the new instructions, obviously.  The <code>LegacyPrefix</code><br>\nmechanism has been revised to handle multiple prefix bytes, not just one, since it is now<br>\nsometimes necessary to emit both 0x66 (Operand Size Override) and F0 (Lock).</p>\n<p>In the aarch64 implementation of atomics, there has been some minor renaming for the sake of<br>\nclarity, and for consistency with this x64 implementation.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207619347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598005404
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-472392362\">PR Review</a>.</p>",
        "id": 207621022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006934
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474622411\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 207621023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006934
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a> from <code>atomics-x64-CL</code> to <code>main</code>:</p>\n<blockquote>\n<p>… on newBE/x64.  It does</p>\n<p>this by providing an implementation of the CLIF instructions <code>AtomicRmw</code>, <code>AtomicCas</code>,<br>\n<code>AtomicLoad</code>, <code>AtomicStore</code> and <code>Fence</code>.</p>\n<p>The translation is straightforward.  <code>AtomicCas</code> is translated into x64 <code>cmpxchg</code>, <code>AtomicLoad</code><br>\nbecomes a normal load because x64-TSO provides adequate sequencing, <code>AtomicStore</code> becomes a<br>\nnormal store followed by <code>mfence</code>, and <code>Fence</code> becomes <code>mfence</code>.  <code>AtomicRmw</code> is the only<br>\ncomplex case: it becomes a normal load, followed by a loop which computes an updated value,<br>\ntries to <code>cmpxchg</code> it back to memory, and repeats if necessary.</p>\n<p>This is a minimum-effort initial implementation.  <code>AtomicRmw</code> could be implemented more<br>\nefficiently using LOCK-prefixed integer read-modify-write instructions in the case where the old<br>\nvalue in memory is not required.  Subsequent work could add that, if required.</p>\n<p>The x64 emitter has been updated to emit the new instructions, obviously.  The <code>LegacyPrefix</code><br>\nmechanism has been revised to handle multiple prefix bytes, not just one, since it is now<br>\nsometimes necessary to emit both 0x66 (Operand Size Override) and F0 (Lock).</p>\n<p>In the aarch64 implementation of atomics, there has been some minor renaming for the sake of<br>\nclarity, and for consistency with this x64 implementation.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207621154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598007011
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a> from <code>atomics-x64-CL</code> to <code>main</code>:</p>\n<blockquote>\n<p>… on newBE/x64.  It does</p>\n<p>this by providing an implementation of the CLIF instructions <code>AtomicRmw</code>, <code>AtomicCas</code>,<br>\n<code>AtomicLoad</code>, <code>AtomicStore</code> and <code>Fence</code>.</p>\n<p>The translation is straightforward.  <code>AtomicCas</code> is translated into x64 <code>cmpxchg</code>, <code>AtomicLoad</code><br>\nbecomes a normal load because x64-TSO provides adequate sequencing, <code>AtomicStore</code> becomes a<br>\nnormal store followed by <code>mfence</code>, and <code>Fence</code> becomes <code>mfence</code>.  <code>AtomicRmw</code> is the only<br>\ncomplex case: it becomes a normal load, followed by a loop which computes an updated value,<br>\ntries to <code>cmpxchg</code> it back to memory, and repeats if necessary.</p>\n<p>This is a minimum-effort initial implementation.  <code>AtomicRmw</code> could be implemented more<br>\nefficiently using LOCK-prefixed integer read-modify-write instructions in the case where the old<br>\nvalue in memory is not required.  Subsequent work could add that, if required.</p>\n<p>The x64 emitter has been updated to emit the new instructions, obviously.  The <code>LegacyPrefix</code><br>\nmechanism has been revised to handle multiple prefix bytes, not just one, since it is now<br>\nsometimes necessary to emit both 0x66 (Operand Size Override) and F0 (Lock).</p>\n<p>In the aarch64 implementation of atomics, there has been some minor renaming for the sake of<br>\nclarity, and for consistency with this x64 implementation.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207621857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598007649
    },
    {
        "content": "<p><strong>julian-seward1</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a>.</p>",
        "id": 207625830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598011215
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-472528857\">PR Review</a>.</p>",
        "id": 207642595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-472528857\">PR Review</a>.</p>",
        "id": 207642596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474736622\">PR Review Comment</a>:</p>\n<blockquote>\n<p>With the approach suggested above for Xchg, we could spare the r10 register here, alleviating register pressure.</p>\n</blockquote>",
        "id": 207642597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474727147\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: please make this a doc comment <code>///</code></p>\n</blockquote>",
        "id": 207642598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474731961\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could we not emit it when the opcode is Xchg? (That is, push it down within the <code>else</code> branch below)<br>\nOr even better, it seems all the moves could be avoided in the case of Xchg, since <code>r10</code> could be passed as the read-only input of the <code>cmpxchg</code> instruction? (I know x86 chips eats moves for dinner, but seems better to not do any useless decoding work if we can avoid it!)</p>\n</blockquote>",
        "id": 207642599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474740493\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Just an idea: if it's generating the same thing as a load, could the lowering be commonized with the rest of the <code>Load</code>-related instructions?</p>\n</blockquote>",
        "id": 207642600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474737453\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I sympathize with the need to fix this comment, but I think this one is a bit imprecise too: can you write <code>any virtual regs</code> instead of just <code>any regs</code>?</p>\n</blockquote>",
        "id": 207642601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474740927\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Here, you can use <code>let rm = input_to_reg_mem(ctx, inputs[0]);</code> here, and remove the comment about using 0(addr).</p>\n</blockquote>",
        "id": 207642602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474741304\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think you'll be able to use <code>lower_to_amode</code> once #2146 lands; if you happen to land before this, can you add a TODO in my PR please?</p>\n</blockquote>",
        "id": 207642603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474742003\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ditto for <code>lower_to_amode</code></p>\n</blockquote>",
        "id": 207642604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r474744328\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: can you use the usual rust camelCasing: <code>AtomicRmwOp</code> please?</p>\n</blockquote>",
        "id": 207642605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021186
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-473190230\">PR Review</a>.</p>",
        "id": 207814892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598254902
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r475400244\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Well, probably yes; but I'd prefer to keep it separate as it logically belongs to the atomics group.  Also there is an atomics-specific assertion and atomics-specific comments there.</p>\n</blockquote>",
        "id": 207814893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598254902
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-473191616\">PR Review</a>.</p>",
        "id": 207815031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598255031
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r475401312\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We could do that.  I'd prefer to leave such improvements to the followup PR #2153 though.  Also, it could be possibly fixed even better, by using <code>lock xchg ..</code> in this case.  That's definitely PR #2153 territory, though.</p>\n</blockquote>",
        "id": 207815032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598255031
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r475406679\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That doesn't work.  It produces <code>movzbq  %v5Jb, %v6J</code>, but the original was <code>movzbq 0(%v5J), %v6J</code>.</p>\n</blockquote>",
        "id": 207815653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598255621
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-473198177\">PR Review</a>.</p>",
        "id": 207815654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598255621
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#pullrequestreview-473201715\">PR Review</a>.</p>",
        "id": 207816006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598255937
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149#discussion_r475409627\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>lock xchg</code> is equivalent to <code>xchg</code>: <a href=\"https://stackoverflow.com/questions/3144335/on-a-multicore-x86-is-a-lock-necessary-as-a-prefix-to-xchg\">https://stackoverflow.com/questions/3144335/on-a-multicore-x86-is-a-lock-necessary-as-a-prefix-to-xchg</a></p>\n</blockquote>",
        "id": 207816007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598255938
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a> from <code>atomics-x64-CL</code> to <code>main</code>:</p>\n<blockquote>\n<p>… on newBE/x64.  It does</p>\n<p>this by providing an implementation of the CLIF instructions <code>AtomicRmw</code>, <code>AtomicCas</code>,<br>\n<code>AtomicLoad</code>, <code>AtomicStore</code> and <code>Fence</code>.</p>\n<p>The translation is straightforward.  <code>AtomicCas</code> is translated into x64 <code>cmpxchg</code>, <code>AtomicLoad</code><br>\nbecomes a normal load because x64-TSO provides adequate sequencing, <code>AtomicStore</code> becomes a<br>\nnormal store followed by <code>mfence</code>, and <code>Fence</code> becomes <code>mfence</code>.  <code>AtomicRmw</code> is the only<br>\ncomplex case: it becomes a normal load, followed by a loop which computes an updated value,<br>\ntries to <code>cmpxchg</code> it back to memory, and repeats if necessary.</p>\n<p>This is a minimum-effort initial implementation.  <code>AtomicRmw</code> could be implemented more<br>\nefficiently using LOCK-prefixed integer read-modify-write instructions in the case where the old<br>\nvalue in memory is not required.  Subsequent work could add that, if required.</p>\n<p>The x64 emitter has been updated to emit the new instructions, obviously.  The <code>LegacyPrefix</code><br>\nmechanism has been revised to handle multiple prefix bytes, not just one, since it is now<br>\nsometimes necessary to emit both 0x66 (Operand Size Override) and F0 (Lock).</p>\n<p>In the aarch64 implementation of atomics, there has been some minor renaming for the sake of<br>\nclarity, and for consistency with this x64 implementation.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207821137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598259774
    },
    {
        "content": "<p>julian-seward1 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2149\">PR #2149</a>.</p>",
        "id": 207825019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598262608
    }
]