[
    {
        "content": "<p>gggrafff opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7594\">issue #7594</a>:</p>\n<blockquote>\n<p>Hello!</p>\n<p>Question:<br>\nI know how much memory will be needed when executing wasm code, can I somehow allocate the necessary amount of memory in advance to avoid allocations during execution?</p>\n<p>I write wasm in golang and compile with tinygo</p>\n<p>What I tried:</p>\n<ul>\n<li>I'm compiling code with <code>--initial-memory</code> option but I want to set this in runtime before execution</li>\n<li>I tried calling <code>memory.Grow()</code> manually, but it doesn't seem to have worked. GC seems to continue to think that the amount of memory is the same and makes an allocation. Did I understand correctly that <code>memory.Grow()</code> is intended to be called only from wasm?</li>\n<li>Compiling with the <code>--import-memory</code> parameter can help? How to properly run code compiled in this way? I didn't find any examples in the documentation.</li>\n</ul>\n<p>Thanks</p>\n</blockquote>",
        "id": 404635635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701178093
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7594#issuecomment-1830016000\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7594\">issue #7594</a>:</p>\n<blockquote>\n<p>This I think would typically be done through the WebAssembly module itself rather than the embedding API. For example WebAssembly memories list their minimum size and in this situation you'd ensure that the minimum size of memory was configured at the size you need. Wasmtime's allocation of linear memory then would reserve virtual memory for that and let it get lazily committed (at least on Linux, depends a bit on each OS).</p>\n<p>Are you seeing behavior different though?</p>\n</blockquote>",
        "id": 404653204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701183465
    }
]