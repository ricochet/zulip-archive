[
    {
        "content": "<p>jan-justin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893\">PR #5893</a> from <code>cranelift-big-little-endian-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR aims to add specific big-endian and little-endian memory accesses to the interpreter when performing a load or store operation, as discussed over at #5881.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 338612935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677597227
    },
    {
        "content": "<p>jan-justin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1317851434\">PR review</a>.</p>",
        "id": 338613806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677597412
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1120235953\">PR review comment</a>:</p>\n<blockquote>\n<p>As far as I can see, this function is only ever used for testing purposes so I assumed that specific endianness is not an issue here, but do let me know.</p>\n</blockquote>",
        "id": 338613807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677597412
    },
    {
        "content": "<p>jan-justin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1317857322\">PR review</a>.</p>",
        "id": 338614594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677597584
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1120240795\">PR review comment</a>:</p>\n<blockquote>\n<p>@afonso360 you posited theses functions more as a question, so let me know if you don't think it will suffice.</p>\n<p>Also, this could probably be DRY'd up with a macro, but my macrofu is not there yet. Let me know if I should go and do it though.</p>\n</blockquote>",
        "id": 338614595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677597584
    },
    {
        "content": "<p>jan-justin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893\">PR #5893</a> from <code>cranelift-big-little-endian-access</code> to <code>main</code>.</p>",
        "id": 338618177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677598347
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1318241887\">PR review</a>.</p>",
        "id": 338657104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677607964
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1120560068\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, mostly because they match what we have in the rust standard library so it seemed natural to keep that naming convention.</p>\n<p>This does involve a lot of repetitive code, and I also don't see a way out of this without creating a macro. @jameysharp any ideas here?</p>\n</blockquote>",
        "id": 338657106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677607964
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1318242841\">PR review</a>.</p>",
        "id": 338657205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677607992
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1120560619\">PR review comment</a>:</p>\n<blockquote>\n<p>That seems to be used by our trampolines, so _ne should be the correct choice!</p>\n</blockquote>",
        "id": 338657209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677607992
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1120560619\">PR review comment</a>.</p>",
        "id": 338657247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677608001
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1318261516\">PR review</a>.</p>",
        "id": 338658981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677608471
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1318261516\">PR review</a>.</p>",
        "id": 338660530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677608873
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1318732376\">PR review</a>.</p>",
        "id": 338700927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677621835
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1120844997\">PR review comment</a>:</p>\n<blockquote>\n<p>Huh, yeah, this is tricky! As much as I dislike the duplication, I suspect a macro won't make the code more clear.</p>\n<p>One question first: why aren't vectors byte-swapped in this implementation? Is there something I'm missing that makes them special?</p>\n<p>Here's an alternative way to split this up. I'm not claiming it's the right choice, but it's an alternative we can discuss.</p>\n<p>First, write a function that takes a <code>DataValue</code> and returns a <code>DataValue</code>, but with its contents unconditionally byte-swapped. In other words, if you have a <code>DataValue::I32(i)</code>, return <code>DataValue::I32(i.swap_bytes())</code>. For vectors, maybe we should be calling <code>reverse</code> on the arrays?</p>\n<p>Next, write a pair of functions on <code>DataValue</code>, where one calls the above byte-swap function when run on a big-endian system, and the other calls it when run on a little-endian system. See the example code in <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.to_be\"><code>u32::to_be</code></a> and <code>to_le</code> for the pattern to follow. Note that <code>to_be</code> and <code>from_be</code> are functionally identical (both functions only byte-swap on little-endian systems), and similarly for <code>to_le</code> and <code>from_le</code>. So we don't actually need <code>to</code> and <code>from</code> variants for each endianness; just one will do.</p>\n<p>Finally, keep <code>write_to_slice_ne</code> and <code>read_from_slice_ne</code> as they are here. The <code>_le</code> variants should call the <code>_ne</code> variants, but pass the <code>DataValue</code> through the method that only byte-swaps on big-endian systems. Similarly, the <code>_be</code> variants call the method that byte-swaps on little-endian systems. When reading, the swap happens after the native-endian read; when writing, the swap happens before the native-endian write.</p>\n<p>That reduces this from six copies of this match on all of <code>DataValue</code>'s variants, to three. That's still two more than I'd prefer, but I think it's pretty reasonable.</p>\n</blockquote>",
        "id": 338700928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677621835
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1318776129\">PR review</a>.</p>",
        "id": 338706020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677623959
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1120881860\">PR review comment</a>:</p>\n<blockquote>\n<p>For future work, not part of this PR: @afonso360, can/should <code>checked_load</code> validate mem-flags like <code>aligned</code>, now that they're passed in here anyway? And same question for <code>checked_store</code>.</p>\n</blockquote>",
        "id": 338706021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677623959
    },
    {
        "content": "<p>jan-justin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1319478069\">PR review</a>.</p>",
        "id": 338788161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677664615
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1121440914\">PR review comment</a>:</p>\n<blockquote>\n<p>Thank you for the input!</p>\n<p>No, vectors are not special. It seems I just slipped up. Thanks for pointing it out.</p>\n<p>As for your proposal, I would be inclined to agree with you. I am in favour of cutting it down so as to make it more manageable and catch errors like the one above.</p>\n</blockquote>",
        "id": 338788163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677664616
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1121519962\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh yeah it absolutely should! I've opened #5899 for this</p>\n</blockquote>",
        "id": 338801513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677668089
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1319587644\">PR review</a>.</p>",
        "id": 338801514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677668089
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1121519962\">PR review comment</a>.</p>",
        "id": 338801713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677668129
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1121519962\">PR review comment</a>.</p>",
        "id": 338804291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677668775
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1121519962\">PR review comment</a>.</p>",
        "id": 338804364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677668796
    },
    {
        "content": "<p>jan-justin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893\">PR #5893</a> from <code>cranelift-big-little-endian-access</code> to <code>main</code>.</p>",
        "id": 338932287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677697851
    },
    {
        "content": "<p>jan-justin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1320480009\">PR review</a>.</p>",
        "id": 338934693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677698525
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1122203254\">PR review comment</a>:</p>\n<blockquote>\n<p>I used the Rust core lib as inspiration, and modelled it quite closely. However, I am unsure about whether to change the <code>write_to_slice_*</code> and <code>read_from_slice_*</code> methods to move instead of borrow. The result is having to copy data in the write calls. Let me know if this is not desirable.</p>\n</blockquote>",
        "id": 338934695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677698525
    },
    {
        "content": "<p>jan-justin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1122203254\">PR review comment</a>.</p>",
        "id": 338936767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677699103
    },
    {
        "content": "<p>jan-justin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1122203254\">PR review comment</a>.</p>",
        "id": 338937684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677699346
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1320937836\">PR review</a>.</p>",
        "id": 338991701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677723750
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1320937836\">PR review</a>.</p>",
        "id": 338991702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677723750
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1122528988\">PR review comment</a>:</p>\n<blockquote>\n<p>I have a slight preference for writing this in the <code>if cfg!(...) { ... } else { ... }</code> style because that way the compiler will check that both branches are valid before constant-folding one of them away. Also it's shorter that way.</p>\n</blockquote>",
        "id": 338991703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677723751
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1122530463\">PR review comment</a>:</p>\n<blockquote>\n<p>I didn't think about needing to clone! But I think the way you've done it is fine. For one thing, this is only 32 bytes if I counted correctly, so it's not that much to copy. LLVM might even optimize away the copies. But more importantly, this is primarily used in the interpreter, which is already not expected to be super fast.</p>\n</blockquote>",
        "id": 338991704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677723751
    },
    {
        "content": "<p>jan-justin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1321194421\">PR review</a>.</p>",
        "id": 339024608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677743477
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1122709806\">PR review comment</a>:</p>\n<blockquote>\n<p>No problem. Consider it done.</p>\n</blockquote>",
        "id": 339024609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677743477
    },
    {
        "content": "<p>jan-justin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#pullrequestreview-1321197611\">PR review</a>.</p>",
        "id": 339024894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677743599
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893#discussion_r1122711991\">PR review comment</a>:</p>\n<blockquote>\n<p>Great, thanks again!</p>\n<p>I figured it may not be that big a deal, but I drew attention to it just in case. I will keep this in mind going forward though.</p>\n</blockquote>",
        "id": 339024896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677743599
    },
    {
        "content": "<p>jan-justin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893\">PR #5893</a> from <code>cranelift-big-little-endian-access</code> to <code>main</code>.</p>",
        "id": 339025616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677743840
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5893\">PR #5893</a>.</p>",
        "id": 339085416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677760298
    }
]