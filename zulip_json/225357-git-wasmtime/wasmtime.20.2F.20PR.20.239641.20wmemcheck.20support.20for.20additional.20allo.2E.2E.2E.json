[
    {
        "content": "<p>cobbal opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641\">PR #9641</a> from <code>cobbal:cobbal/wmemcheck-updates</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>I was recently tracking down a memory corruption bug in swift and found the wmemcheck tool to be very helpful. Since the runtime of swift is fairly large, it required some extra features to remove false positives. I was able to modify wmemcheck to be useful enough for the job.</p>\n<p>I'd like to contribute the changes, many of which overlap with parts of issue <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7037\">https://github.com/bytecodealliance/wasmtime/issues/7037</a> . In particular, I needed to add the following:</p>\n<ul>\n<li>support for the other memory functions exported by wasi-libc (calloc, realloc, posix_memalign, aligned_alloc, malloc_usable_size) from <a href=\"https://github.com/WebAssembly/wasi-libc/blob/c47daaf6c69f82835fc92d9e14361803dfa794fa/dlmalloc/src/dlmalloc.c#L67\">https://github.com/WebAssembly/wasi-libc/blob/c47daaf6c69f82835fc92d9e14361803dfa794fa/dlmalloc/src/dlmalloc.c#L67</a></li>\n<li>tracking memory in 4-byte chunks instead of 1-byte. e.g. wasi-libc's strlen loads strings 4 bytes at a time, and possibly beyond the end of the string for efficiency.</li>\n<li>disabling the check for reading uninitialized memory.</li>\n</ul>\n<p>The last 2 possibly should be hidden behind options, but I'm not familiar enough with the code base or how others use this tool to know what the right approach would be.</p>\n</blockquote>",
        "id": 483591710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732146765
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641\">PR #9641</a>.</p>",
        "id": 483592432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732147235
    },
    {
        "content": "<p>cobbal updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641\">PR #9641</a>.</p>",
        "id": 483609367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732158619
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#pullrequestreview-2452947127\">PR review</a>:</p>\n<blockquote>\n<p>Thanks very much for this! Some initial thoughts below.</p>\n<p>I'm really happy <code>wmemcheck</code> was actually useful for you, and I think most of this can be upstreamed with no problem. Just a few thoughts below.</p>\n</blockquote>",
        "id": 483803379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229493
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#discussion_r1853042424\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add a comment here noting where the <code>__wrap_*</code> variants come from? That's useful both for its own sake (readers' understanding) but also so that if things change in the future with the external thing causing this need, we can re-evaluate.</p>\n</blockquote>",
        "id": 483803380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#discussion_r1853045491\">PR review comment</a>:</p>\n<blockquote>\n<p>can we be more specific than \"stuff\" here?</p>\n</blockquote>",
        "id": 483803383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#discussion_r1853047407\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this a correct implementation of <code>malloc_usable_size</code>'s semantics? The man page on my system says that it returns the size of a memory block; unclear to me whether we need a hook for that, even, to track alloc'd/free state?</p>\n</blockquote>",
        "id": 483803384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#discussion_r1853050908\">PR review comment</a>:</p>\n<blockquote>\n<p>This looks like code that could be useful for debugging, but as above with the <code>posix_memalign</code> out-pointer fetch, the memory accesses are unsafe, and also dumping the contents of previously allocated blocks might be too verbose. I think I'd prefer to omit this code for now; ultimately the right answer for any problem that needs examination of memory state like this is probably using a debugger (we have better support planned!) possibly with breakpoints on allocation events or trap-to-debugger on wmemcheck errors.</p>\n</blockquote>",
        "id": 483803385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#discussion_r1853051351\">PR review comment</a>:</p>\n<blockquote>\n<p>Good find! Can we add a comment here noting the implemented semantics (<code>free</code> of a null pointer is a no-op)?</p>\n</blockquote>",
        "id": 483803387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#discussion_r1853046409\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add a note here that since we aren't tracking undefined-ness, we don't have to care about the other semantic difference between <code>calloc</code> and <code>malloc</code>, namely that memory is zeroed?</p>\n</blockquote>",
        "id": 483803388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#discussion_r1853048830\">PR review comment</a>:</p>\n<blockquote>\n<p>We definitely need to do a bounds-check here -- could you use the safe APIs for the memory to access the out-pointer?</p>\n<p>This is also little-endian-specific code; we'll want to get a <code>[u8; 4]</code> and do an explicit conversion with <code>u32::from_le_bytes</code>. (Wasmtime supports one big-endian architecture, s390x!)</p>\n</blockquote>",
        "id": 483803389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#discussion_r1853052069\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we put this under an option? Perhaps \"wmemcheck granularity\" or similar?</p>\n</blockquote>",
        "id": 483803391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9641#discussion_r1853051679\">PR review comment</a>:</p>\n<blockquote>\n<p>Why is this commented out? (If the checks were causing issues, could we put the exclusion under an appropriately named and documented option?)</p>\n</blockquote>",
        "id": 483803393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732229494
    }
]