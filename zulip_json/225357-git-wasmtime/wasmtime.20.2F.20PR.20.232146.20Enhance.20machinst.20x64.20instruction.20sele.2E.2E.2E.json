[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146\">PR #2146</a> from <code>x64-isel</code> to <code>main</code>:</p>\n<blockquote>\n<p>This implements a few instruction selection optimizations for x64:</p>\n<ul>\n<li>optimize select/brz/brnz when the input is a comparison, to avoid the materialization of the flag register. Float comparisons are a bit tricky because of Equal/NotEqual (and other float CC that don't convert to a single int CC), but the rest is pretty simple.</li>\n<li>commuting operands of integer arithmetic commutative operations when one operand is an immediate, to avoid materializing the immediate</li>\n<li>use more addressing modes for loads/stores. Unfortunately, impact is limited because of the way heap_addr is legalized (an uext64 of the 32-bit operator), preventing the use of e.g. the shift bits in the SIB amode, or folding integer immediates into the offset altogether. Range analysis could help with this...</li>\n<li>fix the pinned register hack, which was not effectful; see commit message and patch. I'm not married to the longer name I've used for catching side-effectful instructions.</li>\n</ul>\n<p>On embenchen in Spidermonkey, this is between a 3 to 7% speedup in compilation time, and i see generated code runtime speedups up to 25%.</p>\n</blockquote>",
        "id": 207411645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597845745
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146\">PR #2146</a>.</p>",
        "id": 207411646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597845745
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-471024998\">PR Review</a>.</p>",
        "id": 207476648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882490
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-471024998\">PR Review</a>.</p>",
        "id": 207476650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882490
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473422443\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Idle thought (not necessary for this PR): we should consolidate these tree-matching helpers among the backends (i.e. with aarch64) as we're doing for the ABI support; there's nothing machine-specific in the function below.</p>\n</blockquote>",
        "id": 207476651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473420205\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think I'd prefer to lift the <code>op != Opcode::GetPinnedReg</code> condition out of this helper and to its callsite; otherwise it's an oddly specific predicate to have as a general-purpose helper, IMHO.</p>\n</blockquote>",
        "id": 207476652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473443242\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>small_cst</code> =&gt; <code>small_constant</code> for clarity?</p>\n</blockquote>",
        "id": 207476653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473442829\">PR Review Comment</a>:</p>\n<blockquote>\n<p>code-style nit, but <code>match swap_operands { FcmpOperands::Swap =&gt; ..., FcmpOperands::DontSwap =&gt; ... }</code> would be a bit more idiomatic I think.</p>\n</blockquote>",
        "id": 207476654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473424635\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This helper works but will call <code>ctx.get_input()</code> multiple times; could we factor this a bit more so that we pass one <code>LowerInput</code> around? Maybe <code>lowerinput_to_*()</code> and then wrap these with <code>input_to_*()</code>?</p>\n</blockquote>",
        "id": 207476655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473444063\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>match input_to_imm(...) { Some(shift_amt) if shift_amt &lt;= 3 =&gt; Some(...), _ =&gt; None }</code></p>\n</blockquote>",
        "id": 207476656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473460155\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm not sure exactly what the right factoring is, but there seems to be a lot of duplication across all the points at which an fcmp / icmp is lowered. I think it'd be much better to centralize the common bits (e.g. the match on <code>FloatCC</code> below) into a helper.</p>\n<p>At a high level, it seems what you want is, for any input that's a bool, \"lower this somehow to the machine's condition flags and give me one or more conditions that indicate true\". This would allow you to factor the input side (icmp or fcmp) and output side (csel for int or float, cond branch) into separate pieces.</p>\n</blockquote>",
        "id": 207476657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473457099\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We should clarify an important rule/invariant here: hte target of the branch <em>must also be</em> a successor of the actual terminator (otherwise the CFG is incorrect, which would confuse the RA). Also perhaps we should note when this instruction might be used (sequence of multiple cond branches deriving form one comparison) and pointing to an example (fcmp lowering).</p>\n</blockquote>",
        "id": 207476658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473462835\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Comment here for why the reg may not be virtual: we may directly return a machine register when we know that register holds the result of an opcode (by definition).</p>\n</blockquote>",
        "id": 207476659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r473461351\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Why only <code>size == 1</code>? Actually, I'm not sure I understand the need for any sort of extension: surely the output of a select, having the same type as the inputs, has the same property of \"upper bits don't matter\"? So we can always do a full-register cmove, no matter the type of value held by the register.</p>\n</blockquote>",
        "id": 207476660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882491
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-471752941\">PR Review</a>.</p>",
        "id": 207538301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597938539
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474088039\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm ok to do this, but since the helper is unused in other contexts that don't want to check for get_pinned_reg, this would be over-generalizing the helper without any clear benefits. Should we instead move this helper to the <code>machinst</code> directory, and rename it <code>has_lowering_side_effect</code> or something like this instead?</p>\n</blockquote>",
        "id": 207538302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597938540
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-471758890\">PR Review</a>.</p>",
        "id": 207539130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597938924
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474092510\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah, I've thought about this and realized that such an helper would have to return a condition code, or a conjunction (AND, for Equal), or disjunction (OR, for NotEqual) of those. And then, if you look at select, we can't handle properly the result for <code>Equal</code>, so we'd have to use something else. This is one of these cases where the code duplication seemed better than having overly complicated helpers that would have to shoehorn many edge cases. I'll try something...</p>\n</blockquote>",
        "id": 207539131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597938924
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-471760502\">PR Review</a>.</p>",
        "id": 207539374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597939036
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474093715\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Because cmove can handle 16, 32 and 64-bits operands, but no 8-bits operands. But you're probably right about upper bits not mattering here.</p>\n</blockquote>",
        "id": 207539375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597939036
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-471887531\">PR Review</a>.</p>",
        "id": 207558899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597949037
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474196345\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, yeah, that sounds fine. I think the thing that stuck out the most to me was the the function name essentially had the same complexity as its body :-) \"Lowering side effect\" is much better.</p>\n</blockquote>",
        "id": 207558900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597949038
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-471889243\">PR Review</a>.</p>",
        "id": 207559205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597949190
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474197730\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, you would definitely have a better handle on this than I would -- it just seemed to want some factoring somewhere. I'm OK with landing this bit as-is, for what it's worth, if nothing easy occurs to us; we can always come back and refactor later.</p>\n</blockquote>",
        "id": 207559206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597949190
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-471890114\">PR Review</a>.</p>",
        "id": 207559348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597949269
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474198406\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You can pretend that it is a 32bit int, as all bits above the size of the value are undefined, right? Also doing 32bit cmov for 16bit ints would safe a prefix byte.</p>\n</blockquote>",
        "id": 207559349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597949270
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472153296\">PR Review</a>.</p>",
        "id": 207601659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597987712
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474416297\">PR Review Comment</a>:</p>\n<blockquote>\n<p>+1 for Chris' initial comment (produce a sequence of insns, the last one of which sets the condition codes somehow, and return the required test (Z, NZ, C, NB, etc) as the result of the lowering.  However you refactor this, it might be helpful to have a design that makes it easy to take advantage of the fact that most integer insns set the condition codes, at least the Z and S flags, in some useful way.  So for example then you could do the transformations</p>\n<ul>\n<li><code>(x ^ y) == 0</code>   --&gt;   <code>xor %x, %y ; jz ..</code></li>\n<li><code>(x &lt;&lt; 1) != 0</code>  --&gt;  <code>shl $1, %x ; jnz ..</code></li>\n<li><code>(x + y) &lt; 0</code>  --&gt;  <code>add %x, %y ; js ..</code> [because S is the top bit of the result]</li>\n<li><code>(x &amp; $0b1001) != 0</code>  --&gt;  <code>tst $9, %x ; jnz ..</code> [important for efficient bitfield tests]</li>\n</ul>\n<p>GCC and LLVM both do this kind of trickery, nowadays quite extensively.</p>\n<p>That would seem to be easy(er) if the only thing the helper returns is the final condition code -- in particular, that the helper doesn't assume that the next instruction will be a <code>cmp</code>.  Also [maybe obvious] once you have such a helper, you can use it also to generate the insns + test for a CLIF conditional move (select?) and simply emit a <code>cmov&lt;test&gt;</code> rather than <code>j&lt;test&gt;</code>.</p>\n<p>Maybe having different helpers for conditions derived from FP and non-FP inputs might be clearer?  The set of tricks you can do in the integer-input case seems quite different from the FP-input case.</p>\n</blockquote>",
        "id": 207601660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597987712
    },
    {
        "content": "<p>julian-seward1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474416297\">PR Review Comment</a>.</p>",
        "id": 207601666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597987764
    },
    {
        "content": "<p>julian-seward1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474416297\">PR Review Comment</a>.</p>",
        "id": 207601711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597987823
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472158740\">PR Review</a>.</p>",
        "id": 207602240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597988773
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474421054\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Not to mention it would avoid a potential partial register use stall.  Basically 16-bit integer insns of any kind are bad.  +1 for @bjorn3's proposal of doing the cmov at 32 bits even for the 8- and 16-bit sizes.</p>\n</blockquote>",
        "id": 207602241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597988774
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472160389\">PR Review</a>.</p>",
        "id": 207602391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597989065
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474422485\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Clearer might be <code>lower_to_amode</code> ?</p>\n</blockquote>",
        "id": 207602392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597989066
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472163092\">PR Review</a>.</p>",
        "id": 207602701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597989549
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474424710\">PR Review Comment</a>:</p>\n<blockquote>\n<p>All of the above assuming of course that neither operand is in memory.  If that is the case then we'd have to do it at the specified size else risk having unexpected traps at page boundaries.</p>\n</blockquote>",
        "id": 207602702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597989549
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472194342\">PR Review</a>.</p>",
        "id": 207603687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597991184
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472194342\">PR Review</a>.</p>",
        "id": 207603688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597991184
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474432320\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe also add the expected index of the return param used for <code>input</code>?</p>\n</blockquote>",
        "id": 207603689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597991185
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472341841\">PR Review</a>.</p>",
        "id": 207614499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598002025
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474573165\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good idea, added to todo list.</p>\n</blockquote>",
        "id": 207614500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598002025
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472357995\">PR Review</a>.</p>",
        "id": 207616381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598003469
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474595004\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good point, added a note!</p>\n</blockquote>",
        "id": 207616382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598003469
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472359020\">PR Review</a>.</p>",
        "id": 207616507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598003570
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474596421\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm not sure what do you mean by this?</p>\n</blockquote>",
        "id": 207616508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598003570
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472382713\">PR Review</a>.</p>",
        "id": 207619802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598005828
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474614865\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You are currently ignoring the return param index part of <code>inputs.inst</code>. It would be better to check it against a value given by the caller and return <code>None</code> if they don't match.</p>\n</blockquote>",
        "id": 207619803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598005828
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472387733\">PR Review</a>.</p>",
        "id": 207620438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006404
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474618828\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, great point; the aarch64 backend suffers from the same issue. I'll fix it when refactoring helpers.</p>\n</blockquote>",
        "id": 207620439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006404
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472387925\">PR Review</a>.</p>",
        "id": 207620452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006424
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474618989\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Nice, it reduces the amount of code even for regular select.</p>\n</blockquote>",
        "id": 207620453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006424
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472498471\">PR Review</a>.</p>",
        "id": 207635010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598017281
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474704920\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Actually, there might be a bug somewhere else, because i'm seeing a <code>Icmpif</code> with two results, and this seems to cause failures. I wonder if sometimes a result is replaced and the result index isn't getting updated correctly. Saving this for another yak shaving episode.</p>\n</blockquote>",
        "id": 207635012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598017281
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472512877\">PR Review</a>.</p>",
        "id": 207637020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598018341
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#discussion_r474715674\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Found a way to factor this out that's not too terrible, and also implemented it correctly for <code>Trapff</code> lowering (probably not tested through Spidermonkey). Thanks for insisting on this!</p>\n</blockquote>",
        "id": 207637022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598018342
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146\">PR #2146</a> from <code>x64-isel</code> to <code>main</code>:</p>\n<blockquote>\n<p>This implements a few instruction selection optimizations for x64:</p>\n<ul>\n<li>optimize select/brz/brnz when the input is a comparison, to avoid the materialization of the flag register. Float comparisons are a bit tricky because of Equal/NotEqual (and other float CC that don't convert to a single int CC), but the rest is pretty simple.</li>\n<li>commuting operands of integer arithmetic commutative operations when one operand is an immediate, to avoid materializing the immediate</li>\n<li>use more addressing modes for loads/stores. Unfortunately, impact is limited because of the way heap_addr is legalized (an uext64 of the 32-bit operator), preventing the use of e.g. the shift bits in the SIB amode, or folding integer immediates into the offset altogether. Range analysis could help with this...</li>\n<li>fix the pinned register hack, which was not effectful; see commit message and patch. I'm not married to the longer name I've used for catching side-effectful instructions.</li>\n</ul>\n<p>On embenchen in Spidermonkey, this is between a 3 to 7% speedup in compilation time, and i see generated code runtime speedups up to 25%.</p>\n</blockquote>",
        "id": 207637037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598018353
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146\">PR #2146</a>.</p>",
        "id": 207637463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598018571
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146#pullrequestreview-472621769\">PR Review</a>.</p>",
        "id": 207653633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598026675
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146\">PR #2146</a> from <code>x64-isel</code> to <code>main</code>:</p>\n<blockquote>\n<p>This implements a few instruction selection optimizations for x64:</p>\n<ul>\n<li>optimize select/brz/brnz when the input is a comparison, to avoid the materialization of the flag register. Float comparisons are a bit tricky because of Equal/NotEqual (and other float CC that don't convert to a single int CC), but the rest is pretty simple.</li>\n<li>commuting operands of integer arithmetic commutative operations when one operand is an immediate, to avoid materializing the immediate</li>\n<li>use more addressing modes for loads/stores. Unfortunately, impact is limited because of the way heap_addr is legalized (an uext64 of the 32-bit operator), preventing the use of e.g. the shift bits in the SIB amode, or folding integer immediates into the offset altogether. Range analysis could help with this...</li>\n<li>fix the pinned register hack, which was not effectful; see commit message and patch. I'm not married to the longer name I've used for catching side-effectful instructions.</li>\n</ul>\n<p>On embenchen in Spidermonkey, this is between a 3 to 7% speedup in compilation time, and i see generated code runtime speedups up to 25%.</p>\n</blockquote>",
        "id": 207848789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598278900
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146\">PR #2146</a> from <code>x64-isel</code> to <code>main</code>:</p>\n<blockquote>\n<p>This implements a few instruction selection optimizations for x64:</p>\n<ul>\n<li>optimize select/brz/brnz when the input is a comparison, to avoid the materialization of the flag register. Float comparisons are a bit tricky because of Equal/NotEqual (and other float CC that don't convert to a single int CC), but the rest is pretty simple.</li>\n<li>commuting operands of integer arithmetic commutative operations when one operand is an immediate, to avoid materializing the immediate</li>\n<li>use more addressing modes for loads/stores. Unfortunately, impact is limited because of the way heap_addr is legalized (an uext64 of the 32-bit operator), preventing the use of e.g. the shift bits in the SIB amode, or folding integer immediates into the offset altogether. Range analysis could help with this...</li>\n<li>fix the pinned register hack, which was not effectful; see commit message and patch. I'm not married to the longer name I've used for catching side-effectful instructions.</li>\n</ul>\n<p>On embenchen in Spidermonkey, this is between a 3 to 7% speedup in compilation time, and i see generated code runtime speedups up to 25%.</p>\n</blockquote>",
        "id": 207848817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598278918
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2146\">PR #2146</a>.</p>",
        "id": 207853829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598281232
    }
]