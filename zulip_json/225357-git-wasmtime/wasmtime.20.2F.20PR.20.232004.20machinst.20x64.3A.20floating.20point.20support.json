[
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004\">PR #2004</a> from <code>x64-fp</code> to <code>main</code>:</p>\n<blockquote>\n<p>Opening this PR as a WIP, to coordinate better with @jlb6740; this lacks proper testing right now. Only the last commit is relevant, the rest comes from #1995.</p>\n<p>This implements the following:</p>\n<ul>\n<li>load/store for floating point values</li>\n<li>more binary and unary opcodes</li>\n<li>constant generation</li>\n</ul>\n</blockquote>",
        "id": 204103281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594914725
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004\">PR #2004</a> from <code>x64-fp</code> to <code>main</code>:</p>\n<blockquote>\n<p>Opening this PR as a WIP, to coordinate better with @jlb6740; this lacks proper testing right now. Only the last commit is relevant, the rest comes from #1995.</p>\n<p>This implements the following:</p>\n<ul>\n<li>load/store for floating point values</li>\n<li>more binary and unary opcodes</li>\n<li>constant generation</li>\n</ul>\n</blockquote>",
        "id": 204106773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594916232
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004\">PR #2004</a> from <code>x64-fp</code> to <code>main</code>:</p>\n<blockquote>\n<p>Opening this PR as a WIP, to coordinate better with @jlb6740; this lacks proper testing right now. Only the last commit is relevant, the rest comes from #1995.</p>\n<p>This implements the following:</p>\n<ul>\n<li>load/store for floating point values</li>\n<li>more binary and unary opcodes</li>\n<li>constant generation</li>\n</ul>\n</blockquote>",
        "id": 204107852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594916702
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#pullrequestreview-450476634\">PR Review</a>.</p>",
        "id": 204186706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977966
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#pullrequestreview-450476634\">PR Review</a>.</p>",
        "id": 204186707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456304242\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What does this function do / how does it help?  I can't guess from the name, and reading the code doesn't help much.  Can you add a comment?  Maybe rename it?</p>\n</blockquote>",
        "id": 204186708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456303307\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I look at this (the introduction of <code>is_int</code>) and imagine the day when this needs to be extended again to handle 128-bit vector registers.  That day can't be far off.  In that case even <code>is_int</code> will be inadequate, I guess.  Would it be more future-proof to return a <code>RegClass</code> instead of the <code>bool</code> here?  </p>\n</blockquote>",
        "id": 204186709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456308305\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, this comment isn't really right.  Is <code>XMM_RM_R</code> only used for scalar floating point?  I would have thought it could be (and, eventually, will be) used for any SSE operation of the form <code>R := OP(R, RM)</code>.</p>\n</blockquote>",
        "id": 204186710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456308760\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: <code>XmmUnary</code> --&gt; <code>XmmUnaryRmR</code></p>\n</blockquote>",
        "id": 204186711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456309930\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: \"from float to reg/mem\" isn't right.  These are stores (they can't be anything else), and AFAIK they could also be stores of the entire vector register, not just the lowest F32 or F64 lane.</p>\n</blockquote>",
        "id": 204186712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456314729\">PR Review Comment</a>:</p>\n<blockquote>\n<p>As a suggestion, would you consider renaming <code>xmm_to_int</code> to <code>xmm_to_gpr</code> (and the associated data structures?)  The reason is that \"xmm\" is unambiguously an XMM register.  But \"int\" isn't so clear; it could mean \"integer register\" (as you mean here) but it could also be interpreted as \"integer value stored in some lane(s) of an XMM register\".  <code>_to_gpr</code> removes that ambiguity.</p>\n</blockquote>",
        "id": 204186713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456311042\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What happens to the upper 96/64 bits of the destination?  I don't think it is important for code generation, but it would be nice if what happens was stated here.</p>\n</blockquote>",
        "id": 204186714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456316382\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Just as a comment .. these assertions are good (I like assertions), but .. won't the <code>emit</code> function eventually assert/panic if the wrong class register is in an instruction field?  I <em>think</em> that's true but I don't remember exactly.  So I think you're safe even without the assert.  (and if the <code>emit</code> fns don't assert/panic in such circumstances, we should fix them so they do; that's the last line of defense against mistakes in register classes).</p>\n</blockquote>",
        "id": 204186715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456312604\">PR Review Comment</a>:</p>\n<blockquote>\n<p>On reading further down, I see this appears to be used to assert the register class.  Would you consider renaming this to <code>assert_regclass_is</code>?  I'd prefer to avoid the term \"register type\" since that's not really a concept we have; what we have are the concepts \"register class\" and \"type of the value stored in the register\", which may not be the same.  Eg a F32 value in a V128-class register.</p>\n</blockquote>",
        "id": 204186716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456317506\">PR Review Comment</a>:</p>\n<blockquote>\n<p>isn't it the inverse-of-cc that needs to be printed here?</p>\n</blockquote>",
        "id": 204186717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456318809\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We can probably special-case <code>0.0</code> using <code>xorpd</code> or whatever the official dependency-breaking generate-vector-zero insn is.  But not now; we can come back to this.</p>\n</blockquote>",
        "id": 204186718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456319289\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Whatever is chosen, make sure it's an officially-recognised dependency-breaking insn.</p>\n</blockquote>",
        "id": 204186719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456321738\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can this ever fail for valid input?</p>\n</blockquote>",
        "id": 204186720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456319058\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh, you comment that just below :-)</p>\n</blockquote>",
        "id": 204186721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594977967
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#pullrequestreview-450510270\">PR Review</a>.</p>",
        "id": 204186794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594978079
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456329418\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh, maybe that's a stupid idea, because F64 and F32s live in V128 class registers, and we need a way to distinguish between these three cases.  So ignore this.</p>\n</blockquote>",
        "id": 204186795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594978079
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#pullrequestreview-450625898\">PR Review</a>.</p>",
        "id": 204201258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594989985
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456419218\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed, done! I've also removed the use of a match to just use <code>if let ...</code> direct pattern matching, which reduces code indent by one tab.</p>\n</blockquote>",
        "id": 204201260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594989985
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#pullrequestreview-450634582\">PR Review</a>.</p>",
        "id": 204202352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594990692
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456425251\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I renamed it XmmCmove for consistency, and precised that it applied only to scalars at this point; or we can just generalize it right now and use <code>movapd</code> consistently here, not sure...</p>\n</blockquote>",
        "id": 204202353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594990692
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#pullrequestreview-450636819\">PR Review</a>.</p>",
        "id": 204202656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594990885
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456426890\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The emit functions don't protect much against this, at this point. You're right it'd be better if they did, i'll make this in a subsequent PR!</p>\n</blockquote>",
        "id": 204202658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594990885
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#pullrequestreview-450637581\">PR Review</a>.</p>",
        "id": 204202792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594990946
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456427449\">PR Review Comment</a>:</p>\n<blockquote>\n<p>good catch, thx</p>\n</blockquote>",
        "id": 204202793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594990946
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#pullrequestreview-450639678\">PR Review</a>.</p>",
        "id": 204203077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594991120
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004#discussion_r456429032\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In theory, yes: the complex variants can take as many inputs as the user wants, and the documentation says it'll add all the inputs together to form the effective address. In practice, <code>postopt</code> I think is the only creator of these instruction variants, and will only use up to 3 inputs together, to map to what the x86 architecture can do.</p>\n</blockquote>",
        "id": 204203079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594991121
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004\">PR #2004</a> from <code>x64-fp</code> to <code>main</code>:</p>\n<blockquote>\n<p>Opening this PR as a WIP, to coordinate better with @jlb6740; this lacks proper testing right now. Only the last commit is relevant, the rest comes from #1995.</p>\n<p>This implements the following:</p>\n<ul>\n<li>load/store for floating point values</li>\n<li>more binary and unary opcodes</li>\n<li>constant generation</li>\n</ul>\n</blockquote>",
        "id": 204203843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594991575
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2004\">PR #2004</a>.</p>",
        "id": 204208587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594994207
    }
]