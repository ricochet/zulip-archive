[
    {
        "content": "<p>YjyJeff opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422\">issue #6422</a>:</p>\n<blockquote>\n<p>Hi, I want to use SIMD in cranelift to accelerate computation. I compiled the following function(logged by cranelift's tracing info)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_cmp</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now, I want to call it in rust side. Therefore, I have set the <code>enable_simd</code> in <code>settings</code> and cast the compiled function pointer to <code>fn(std::simd::i32x4, std::simd::i32x4) -&gt; fn(std::simd::i32x4)</code>.  However, when I invoke this function in Rust it produces an incorrect result: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">compiled_ptr</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Output: [2, 3, 32, 0]. Totally wrong here....</span>\n</code></pre></div>\n<p>To test whether the compiled function is correct, I have written a <code>.clif</code> file with the following content and tested it with <code>clif-util test</code>, it passes the test. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"n\">has_avx2</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_cmp</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">simd_cmp</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Above all, I think the problem happens in <code>transmute</code>, calling the compiled function with this signature is incorrect. How can I call this compiled function correctly? </p>\n<p>Thanks in advance<br>\n</p>\n</blockquote>",
        "id": 360144874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684722543
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422#issuecomment-1556432406\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422\">issue #6422</a>:</p>\n<blockquote>\n<p>First, a small thing -- the signature</p>\n<blockquote>\n<p><code>fn(std::simd::i32x4, std::simd::i32x4) -&gt; fn(std::simd::i32x4)</code></p>\n</blockquote>\n<p>is I think wrong in a subtle way; the return type should not be <code>fn(i32x4)</code> but just <code>i32x4</code>.</p>\n<p>I took a guess that this is perhaps a calling convenion mismatch, and this seems to be the case indeed. Using Compiler Explorer I built the function <code>fn add(a: i32x4, b: i32x4) -&gt; i32x4 { a + b }</code> with both Rust's native ABI and the <code>extern \"C\"</code> ABI:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(portable_simd)]</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add2</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And I get</p>\n<div class=\"codehilite\" data-code-language=\"assembly\"><pre><span></span><code>example::add:\n        mov     rax, rdi\n        movdqa  xmm0, xmmword ptr [rdx]\n        paddd   xmm0, xmmword ptr [rsi]\n        movdqa  xmmword ptr [rdi], xmm0\n        ret\n\nexample::add2:\n        paddd   xmm0, xmm1\n        ret\n</code></pre></div>\n<p>so it appears that the native Rust convention is to pass SIMD values by pointer, whereas the C ABI follows the SysV spec and passes 128-bit vectors in XMM registers.</p>\n<p>Cranelift follows SysV for vector types as well, so if you call the function from Rust as an <code>extern \"C\" fn(i32x4, i32x4) -&gt; i32x4</code>, it should work. I haven't put together a full repro of your case with Wasmtime, but let us know if this doesn't work. Best of luck!</p>\n</blockquote>",
        "id": 360145599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684723099
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422#issuecomment-1556432406\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422\">issue #6422</a>:</p>\n<blockquote>\n<p>First, a small thing -- the signature</p>\n<blockquote>\n<p><code>fn(std::simd::i32x4, std::simd::i32x4) -&gt; fn(std::simd::i32x4)</code></p>\n</blockquote>\n<p>is I think wrong in a subtle way; the return type should not be <code>fn(i32x4)</code> but just <code>i32x4</code>.</p>\n<p>Overall though: I took a guess that this is perhaps a calling convenion mismatch, and this seems to be the case indeed. Using Compiler Explorer (<a href=\"https://godbolt.org/z/WsbYb3GTM\">link</a>) I built the function <code>fn add(a: i32x4, b: i32x4) -&gt; i32x4 { a + b }</code> with both Rust's native ABI and the <code>extern \"C\"</code> ABI:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(portable_simd)]</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add2</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And I get</p>\n<div class=\"codehilite\" data-code-language=\"assembly\"><pre><span></span><code>example::add:\n        mov     rax, rdi\n        movdqa  xmm0, xmmword ptr [rdx]\n        paddd   xmm0, xmmword ptr [rsi]\n        movdqa  xmmword ptr [rdi], xmm0\n        ret\n\nexample::add2:\n        paddd   xmm0, xmm1\n        ret\n</code></pre></div>\n<p>so it appears that the native Rust convention is to pass SIMD values by pointer, whereas the C ABI follows the SysV spec and passes 128-bit vectors in XMM registers.</p>\n<p>Cranelift follows SysV for vector types as well, so if you call the function from Rust as an <code>extern \"C\" fn(i32x4, i32x4) -&gt; i32x4</code>, it should work. I haven't put together a full repro of your case with Wasmtime, but let us know if this doesn't work. Best of luck!</p>\n</blockquote>",
        "id": 360145635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684723143
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422#issuecomment-1556432406\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422\">issue #6422</a>:</p>\n<blockquote>\n<p>First, a small thing -- the signature</p>\n<blockquote>\n<p><code>fn(std::simd::i32x4, std::simd::i32x4) -&gt; fn(std::simd::i32x4)</code></p>\n</blockquote>\n<p>is I think wrong in a subtle way; the return type should not be <code>fn(i32x4)</code> but just <code>i32x4</code>.</p>\n<p>Overall though: I took a guess that this is perhaps a calling convention mismatch, and this seems to be the case indeed. Using Compiler Explorer (<a href=\"https://godbolt.org/z/WsbYb3GTM\">link</a>) I built the function <code>fn add(a: i32x4, b: i32x4) -&gt; i32x4 { a + b }</code> with both Rust's native ABI and the <code>extern \"C\"</code> ABI:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(portable_simd)]</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add2</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And I get</p>\n<div class=\"codehilite\" data-code-language=\"assembly\"><pre><span></span><code>example::add:\n        mov     rax, rdi\n        movdqa  xmm0, xmmword ptr [rdx]\n        paddd   xmm0, xmmword ptr [rsi]\n        movdqa  xmmword ptr [rdi], xmm0\n        ret\n\nexample::add2:\n        paddd   xmm0, xmm1\n        ret\n</code></pre></div>\n<p>so it appears that the native Rust convention is to pass SIMD values by pointer, whereas the C ABI follows the SysV spec and passes 128-bit vectors in XMM registers.</p>\n<p>Cranelift follows SysV for vector types as well, so if you call the function from Rust as an <code>extern \"C\" fn(i32x4, i32x4) -&gt; i32x4</code>, it should work. I haven't put together a full repro of your case with Wasmtime, but let us know if this doesn't work. Best of luck!</p>\n</blockquote>",
        "id": 360145672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684723159
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422#issuecomment-1556432406\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422\">issue #6422</a>:</p>\n<blockquote>\n<p>First, a small thing -- the signature</p>\n<blockquote>\n<p><code>fn(std::simd::i32x4, std::simd::i32x4) -&gt; fn(std::simd::i32x4)</code></p>\n</blockquote>\n<p>is I think wrong in a subtle way; the return type should not be <code>fn(i32x4)</code> but just <code>i32x4</code>.</p>\n<p>Overall though: I took a guess that this is perhaps a calling convention mismatch, and this seems to be the case indeed. Using Compiler Explorer (<a href=\"https://godbolt.org/z/WsbYb3GTM\">link</a>) I built the function <code>fn add(a: i32x4, b: i32x4) -&gt; i32x4 { a + b }</code> with both Rust's native ABI and the <code>extern \"C\"</code> ABI:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(portable_simd)]</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add2</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And I get</p>\n<div class=\"codehilite\" data-code-language=\"assembly\"><pre><span></span><code>example::add:\n        mov     rax, rdi\n        movdqa  xmm0, xmmword ptr [rdx]\n        paddd   xmm0, xmmword ptr [rsi]\n        movdqa  xmmword ptr [rdi], xmm0\n        ret\n\nexample::add2:\n        paddd   xmm0, xmm1\n        ret\n</code></pre></div>\n<p>so it appears that the native Rust convention is to pass SIMD values by pointer, whereas the C ABI follows the SysV spec and passes 128-bit vectors in XMM registers.</p>\n<p>Cranelift follows SysV for vector types as well, so if you call the function from Rust as an <code>extern \"C\" fn(i32x4, i32x4) -&gt; i32x4</code>, it should work. I haven't put together a full repro of your case with Cranelift, but let us know if this doesn't work. Best of luck!</p>\n</blockquote>",
        "id": 360145806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684723212
    },
    {
        "content": "<p>YjyJeff edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422\">issue #6422</a>:</p>\n<blockquote>\n<p>Hi, I want to use SIMD in cranelift to accelerate computation. I compiled the following function(logged by cranelift's tracing info)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_cmp</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now, I want to call it in rust side. Therefore, I have set the <code>enable_simd</code> in <code>settings</code> and cast the compiled function pointer to <code>fn(std::simd::i32x4, std::simd::i32x4) -&gt; fn(std::simd::i32x4)</code>.  However, when I invoke this function in Rust it produces an incorrect result: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">compiled_ptr</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Output: [2, 3, 32, 0]. Totally wrong here....</span>\n</code></pre></div>\n<p>To test whether the compiled function is correct, I have written a <code>.clif</code> file with the following content and tested it with <code>clif-util test</code>, it passes the test. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"n\">has_avx2</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_cmp</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">simd_cmp</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Above all, I think the problem happens in <code>transmute</code>, calling the compiled function with this signature is incorrect. How can I call this compiled function correctly? </p>\n<p>Thanks in advance<br>\n</p>\n</blockquote>",
        "id": 360146056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684723354
    },
    {
        "content": "<p>YjyJeff <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422#issuecomment-1556436896\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422\">issue #6422</a>:</p>\n<blockquote>\n<blockquote>\n<p>First, a small thing -- the signature</p>\n<blockquote>\n<p><code>fn(std::simd::i32x4, std::simd::i32x4) -&gt; fn(std::simd::i32x4)</code></p>\n</blockquote>\n<p>is I think wrong in a subtle way; the return type should not be <code>fn(i32x4)</code> but just <code>i32x4</code>.</p>\n<p>Overall though: I took a guess that this is perhaps a calling convention mismatch, and this seems to be the case indeed. Using Compiler Explorer (<a href=\"https://godbolt.org/z/WsbYb3GTM\">link</a>) I built the function <code>fn add(a: i32x4, b: i32x4) -&gt; i32x4 { a + b }</code> with both Rust's native ABI and the <code>extern \"C\"</code> ABI:</p>\n<p>```rust<br>\n#![feature(portable_simd)]</p>\n<p>pub fn add(a: std::simd::i32x4, b: std::simd::i32x4) -&gt; std::simd::i32x4 {<br>\n    a + b<br>\n}</p>\n<p>pub extern \"C\" fn add2(a: std::simd::i32x4, b: std::simd::i32x4) -&gt; std::simd::i32x4 {<br>\n    a + b<br>\n}<br>\n```</p>\n<p>And I get</p>\n<p>```assembly<br>\nexample:<span aria-label=\"add\" class=\"emoji emoji-2795\" role=\"img\" title=\"add\">:add:</span><br>\n        mov     rax, rdi<br>\n        movdqa  xmm0, xmmword ptr [rdx]<br>\n        paddd   xmm0, xmmword ptr [rsi]<br>\n        movdqa  xmmword ptr [rdi], xmm0<br>\n        ret</p>\n<p>example::add2:<br>\n        paddd   xmm0, xmm1<br>\n        ret<br>\n```</p>\n<p>so it appears that the native Rust convention is to pass SIMD values by pointer, whereas the C ABI follows the SysV spec and passes 128-bit vectors in XMM registers.</p>\n<p>Cranelift follows SysV for vector types as well, so if you call the function from Rust as an <code>extern \"C\" fn(i32x4, i32x4) -&gt; i32x4</code>, it should work. I haven't put together a full repro of your case with Cranelift, but let us know if this doesn't work. Best of luck!</p>\n</blockquote>\n<p>After changing the signature to <code>extern \"C\" fn(i32x4, i32x4) -&gt; i32x4</code>, it works now. It is caused by the mismatch of the calling conversion.  Thanks a lot!</p>\n</blockquote>",
        "id": 360146295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684723520
    },
    {
        "content": "<p>YjyJeff closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6422\">issue #6422</a>:</p>\n<blockquote>\n<p>Hi, I want to use SIMD in cranelift to accelerate computation. I compiled the following function(logged by cranelift's tracing info)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_cmp</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now, I want to call it in rust side. Therefore, I have set the <code>enable_simd</code> in <code>settings</code> and cast the compiled function pointer to <code>fn(std::simd::i32x4, std::simd::i32x4) -&gt; fn(std::simd::i32x4)</code>.  However, when I invoke this function in Rust it produces an incorrect result: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">compiled_ptr</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">i32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Output: [2, 3, 32, 0]. Totally wrong here....</span>\n</code></pre></div>\n<p>To test whether the compiled function is correct, I have written a <code>.clif</code> file with the following content and tested it with <code>clif-util test</code>, it passes the test. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"n\">has_avx2</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_cmp</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">simd_cmp</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Above all, I think the problem happens in <code>transmute</code>, calling the compiled function with this signature is incorrect. How can I call this compiled function correctly? </p>\n<p>Thanks in advance<br>\n</p>\n</blockquote>",
        "id": 360146303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684723524
    }
]