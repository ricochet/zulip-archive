[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399#issuecomment-1233624877\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399\">issue #2399</a>:</p>\n<blockquote>\n<p>How much of this PR is still applicable today? I see that <code>XmmLoadConst</code> still exists in the x64 backend, so if removing that simplifies the backend then it'd be nice to pick that up. On the other hand I see the \"implement packed shifts\" commit merged ages ago and subsequently got ported to ISLE. cc: @elliottt</p>\n</blockquote>",
        "id": 296503267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661995434
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399#issuecomment-1235016953\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399\">issue #2399</a>:</p>\n<blockquote>\n<p>(Wow, have I been working on Cranelift this long?!?). Thanks for asking the question; it took took me down memory lane, though I will say some things are now hazy. I was probably stacking commits so all that really matters here are the last two:</p>\n<ul>\n<li>2d46637 shows how we could get rid of <code>Inst::LoadXmmConst</code>. I did not like <code>Inst::LoadXmmConst</code>, though I probably wrote it, because I considered it a bit of a hack; I have felt (like I mentioned in the last meeting) that the best abstraction to work at in the backend is to use actual ISA instructions (clearer, more stable, easier for newcomers to the project, etc.). I think this change is still a good refactoring and can probably be applied as-is? It also makes the CLIF prettier.</li>\n<li>5df1490 shows how to implement <code>const_addr</code>--I guess that's not as necessary anymore since that instruction was removed. Maybe we file this away for later reference: I remember now that my thought for <code>const_addr</code> was to use it to index into constant tables. I can't remember for what lowering I though this was helpful, but if it is ever cheaper to dynamically load a constant from a table, that's what <code>const_addr</code> would be good for.</li>\n</ul>\n<p>One other thought that came back to me while looking at this was that I really wanted to implement <code>vconst</code> (and all other constant accesses for vectors) with the aligned version (<code>MOVDQA</code>, <code>MOVAPS</code>, <code>MOVAPD</code>) instead of the unaligned version we currently use. At the time, it was impossible to ensure that the vector constants were actually aligned so these aligned loads would have trapped--that's why I abandoned that thought, IIRC. But now that may be more possible (?). Now, I'm not sure if this will result in any great latency improvement on most CPUs we use today, but I did wonder if it might improve the cache line story. Just a thought...</p>\n</blockquote>",
        "id": 296744740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662087894
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399#issuecomment-1235756845\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399\">issue #2399</a>:</p>\n<blockquote>\n<p>As I understand it, since #4826 merged, all constants should be aligned now. If there are any instructions that require aligned loads for floats or integers I think those should be safe too. I'm not sure if our current tests or fuzzers would detect if constants are always sufficiently aligned, but I think it's worth an experiment.</p>\n<p>Also, do you want to open a new PR for cherry-picking 2d466370db3585f0ed78131c48cd672817d3b47a to remove <code>LoadXmmConst</code>?</p>\n<p>@elliottt tells me that he's working on something else but would be interested in tackling these later if you don't get to them first.</p>\n</blockquote>",
        "id": 296866864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662140437
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399#issuecomment-1238489190\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399\">issue #2399</a>:</p>\n<blockquote>\n<blockquote>\n<p>Also, do you want to open a new PR for cherry-picking <a href=\"https://github.com/bytecodealliance/wasmtime/commit/2d466370db3585f0ed78131c48cd672817d3b47a\">https://github.com/bytecodealliance/wasmtime/commit/2d466370db3585f0ed78131c48cd672817d3b47a</a> to remove LoadXmmConst?</p>\n</blockquote>\n<p>Sure, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4876\">https://github.com/bytecodealliance/wasmtime/pull/4876</a>.</p>\n</blockquote>",
        "id": 297459436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662487647
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399#issuecomment-1256459381\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2399\">issue #2399</a>:</p>\n<blockquote>\n<p>I've opened #4948 for the idea of using aligned loads for vector constants. With that, and since #4876 is merged, I think we've covered everything from this PR, so I'm closing it.</p>\n</blockquote>",
        "id": 300413585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663953243
    }
]