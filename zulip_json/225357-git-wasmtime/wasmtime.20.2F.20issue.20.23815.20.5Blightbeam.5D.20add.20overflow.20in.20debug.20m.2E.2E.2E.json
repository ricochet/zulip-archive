[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/815#issuecomment-928096477\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/815\">issue #815</a>:</p>\n<blockquote>\n<p>Lightbeam was removed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3390\">https://github.com/bytecodealliance/wasmtime/pull/3390</a> as explained in <a href=\"https://github.com/bytecodealliance/rfcs/pull/14\">RFC 14</a>, so I'm going to close this.</p>\n</blockquote>",
        "id": 255087286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632763805
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/815\">issue #815</a>:</p>\n<blockquote>\n<h1>Issue description</h1>\n<p>An addition with overflow make lightbeam to panic when compiled in debug mode.</p>\n<p>Note: This issue is similar to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/738\">https://github.com/bytecodealliance/wasmtime/issues/738</a>. I suspect other overflows like those ones to be in the code. </p>\n<p>Overflowed values are then provided to dynasm, meaning that in release mode, Lightbeam will generate Assembly code that will try to access invalid memory address (like 0x0, kernel address,  etc.) leading to different errors/panics.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ ./target/debug/debug_lightbeam load_add_overflow_lightbeam.wasm\nthread <span class=\"s1\">'main'</span> panicked at <span class=\"s1\">'attempt to add with overflow'</span>, XXX/wasmtime/crates/lightbeam/src/backend.rs:1934:106\nnote: run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span> environment variable to display a backtrace.\n</code></pre></div>\n<p>This issue is related to the macro <code>load!</code> when dealing with the <code>i32.load16_s</code> opcode:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/420dcd76fd0d684291901c7a6afeb481481dea7e/crates/lightbeam/src/backend.rs#L1932-L1935\">https://github.com/bytecodealliance/wasmtime/blob/420dcd76fd0d684291901c7a6afeb481481dea7e/crates/lightbeam/src/backend.rs#L1932-L1935</a></p>\n<h1>Reproduction</h1>\n<p>Download: <br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4058251/load_add_overflow_lightbeam.zip\">load_add_overflow_lightbeam.zip</a></p>\n<p>or <code>wasm2wat load_add_overflow_lightbeam.wasm\n</code>:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i32.load16_s</span> <span class=\"k\">offset</span><span class=\"o\">=</span><span class=\"mi\">2147483647</span> <span class=\"k\">align</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n    <span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Testing program (need to be compiled in debug mode i.e. <code>RUSTFLAGS=-g cargo build</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"p\">{</span><span class=\"n\">File</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Read</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"n\">PathBuf</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_fuzzing</span>::<span class=\"n\">oracles</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_jit</span>::<span class=\"n\">CompilationStrategy</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Read the contents of a file</span>\n<span class=\"k\">fn</span> <span class=\"nf\">read_contents</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">PathBuf</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"n\">PathBuf</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_binary</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">read_contents</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_path</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_res_compile</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">oracles</span>::<span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_binary</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">CompilationStrategy</span>::<span class=\"n\">Lightbeam</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>wasmtime commit: 420dcd76fd0d684291901c7a6afeb481481dea7e<br>\n</p>\n</blockquote>",
        "id": 255087287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632763805
    }
]