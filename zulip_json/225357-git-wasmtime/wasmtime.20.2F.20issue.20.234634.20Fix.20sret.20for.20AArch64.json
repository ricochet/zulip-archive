[
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4634#issuecomment-1207492363\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4634\">issue #4634</a>:</p>\n<blockquote>\n<p>I did some investigation into this, and i think this is being broken by the <code>ensure_struct_return_ptr_is_returned</code> legalization pass.</p>\n<p>If I understand this correctly it inserts a second return arg, which is causing some trouble in the regalloc (still don't fully understand why though).</p>\n<p>However, by adding that return arg I think it is breaking the AArch64 ABI anyway, so we should probably restrict that to x86. (probably by moving it to the x86 backend as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618#issuecomment-1207227038\">https://github.com/bytecodealliance/wasmtime/pull/4618#issuecomment-1207227038</a>).</p>\n</blockquote>",
        "id": 292341813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659909402
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4634#issuecomment-1210614265\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4634\">issue #4634</a>:</p>\n<blockquote>\n<p>I think I found the problem. <code>(i64 sret) -&gt; i64</code> is legalized to <code>(i64 sret) -&gt; i64 sret, i64</code>, but the return instruction doesn't account for this. This is a pre-existing problem with all backends. It isn't required to work either. In other words I wrote a bad test on which Cranelift failed correctly, but with a confusing error. I will fix the test if at a later point sret legalization is removed in favor of direct integration with the backends, that should fix this issue.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f17</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">sret</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 292746570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660135014
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4634#issuecomment-1210614265\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4634\">issue #4634</a>:</p>\n<blockquote>\n<p>I think I found the problem. <code>(i64 sret) -&gt; i64</code> is legalized to <code>(i64 sret) -&gt; i64 sret, i64</code>, but the return instruction doesn't account for this. This is a pre-existing problem with all backends. It isn't required to work either. In other words I wrote a bad test on which Cranelift failed correctly, but with a confusing error. I will fix the test. If at a later point sret legalization is removed in favor of direct integration with the backends, that should fix this issue.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f17</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">sret</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 292748514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660135797
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4634#issuecomment-1210649224\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4634\">issue #4634</a>:</p>\n<blockquote>\n<p>Apart from i128, all abi-checker tests now pass with this PR.</p>\n</blockquote>",
        "id": 292751359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660136827
    }
]