[
    {
        "content": "<p>iawia002 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939\">PR #8939</a>.</p>",
        "id": 450848567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720748111
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939#issuecomment-2225785028\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939\">PR #8939</a>:</p>\n<blockquote>\n<p>Could the WIT folder not be duplicated here? Since test-programs isn't published to <a href=\"http://crates.io\">crates.io</a> it should be able to refer to the folder defined in the wasmtime-wasi or wasmtime-wasi-http crate</p>\n</blockquote>",
        "id": 451002501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720796626
    },
    {
        "content": "<p>iawia002 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939#issuecomment-2225839869\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939\">PR #8939</a>:</p>\n<blockquote>\n<p>Nope, it has to, as I mentioned before, this change is mainly for the upcoming addition of APIs like <code>wasi-runtime-config</code>. These APIs are not dependent on other APIs and are not depended on by other APIs, so their WIT files will not be included in the <code>wasi</code> or <code>wasi-http</code> crates. We will need the <code>test-programs</code> to include the WIT files of all APIs.</p>\n</blockquote>",
        "id": 451011496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720798456
    },
    {
        "content": "<p>iawia002 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939#issuecomment-2225849437\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939\">PR #8939</a>:</p>\n<blockquote>\n<p>And I plan to make some improvements to the <code>vendor-wit</code> script (pure bash script, no additional dependencies). Ultimately, each wasi API crate will only include the necessary WIT files. For example, <code>wasi-runtime-config</code> will only include one WIT dependency, and the implementation of <code>wasi-cli</code> will no longer include the WIT files for <code>wasi-http</code>.</p>\n</blockquote>",
        "id": 451012506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720798787
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939#issuecomment-2225909824\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939\">PR #8939</a>:</p>\n<blockquote>\n<p>It's a bit difficult to review this as it's setting up for future changes I at least personally have not yet seen or reviewed. In that sense it's difficult to review changes when only half the motivation is apparent, so I'd ask you bear with me in my questions and review feedback here.</p>\n<p>Ideally we only have one copy of all WIT files in-tree. Even today it's a bummer we have one copy in wasmtime-wasi and one copy in wasmtime-wasi-http. How we manage WIT has changed over time but we've never settled on something everyone's happy with. The current status quo is the sort of \"local maximum\" where it's low-overhead to maintain and the management in CI is relatively simple.</p>\n<p>In-tree there's also two main \"styles\" of sorts (not many data points to draw from) of managing WIT. One is wasmtime-wasi/wasmtime-wasi-http which are somewhat \"tied at the hip\". They're managed similarly and have the same WIT files. Another is wasi-nn which, like wasi-runtime-config, has no other WIT dependencies and is managed differently. Everything has a <code>wit_bindgen::generate!</code> call in the <code>test-programs</code> crate. </p>\n<p>With the eventual goal of adding wasi-runtime-config, I would recommend one of two routes:</p>\n<ol>\n<li>Follow the example of wasi-nn. This means that you'd add a few lines to the bash script to vendor wasi-runtime-config WIT files in a new directory. There'd be a new <code>wit_bindgen::generate!</code> call in test-programs as well. I don't think that it would require reorganizing things too much.</li>\n<li>Refactor things before landing wasi-runtime-config to have a single <code>generate!</code> call in test-programs. That's sort of what this PR is doing but it's compromising on some of the initial design goals of our WIT management. I'll reiterate our WIT management is not great but we're also hoping to not make it worse (e.g. another copy of WIT in-tree).</li>\n</ol>\n<p>With the (1) route it should be possible to add everything today without changes. With (2) I would recommend first refactoring the <code>wit-bindgen</code> crate itself, for example it would probably be best to enable something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"../wasmtime-wasi/wit\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"../wasmtime-wasi-http/wit\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"../wasi-nn/wit\"</span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">        include wasi:cli/imports;</span>\n<span class=\"s\">        include wasi:http/imports;</span>\n<span class=\"s\">        include wasi:nn/imports;</span>\n<span class=\"s\">    \"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>I don't think that's fully supported in <code>wit-bindgen</code> today but it shouldn't be too too hard to add. That would enable not needing to copy around WIT files while still enabling a single <code>generate!</code> call. There's need to be a separate <code>generate!</code> call for <code>wasi:http/proxy</code> and other worlds used by the test suite as well.</p>\n</blockquote>",
        "id": 451021012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720800989
    },
    {
        "content": "<p>iawia002 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939#issuecomment-2225985907\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939\">PR #8939</a>:</p>\n<blockquote>\n<p>Thanks for getting back to me, let's hold this for now.</p>\n<p>My original intention for making these changes before implementing the <code>wasi-runtime-config</code> was to simplify the future PR and focus more on implementing the <code>wasi-runtime-config</code> API itself.</p>\n<p>I was too fixated on getting these future tasks done beforehand. It seems I got the sequence of everything wrong. Let's go back to the beginning, after I have implemented the <code>wasi-runtime-config</code>, we can go back to those subsequent works.</p>\n</blockquote>",
        "id": 451030676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720804085
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8939\">PR #8939</a>.</p>",
        "id": 452106004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721229466
    }
]