[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>:</p>\n<blockquote>\n<p>This addresses #4310, introducing a new <code>component::values::Val</code> type for<br>\nrepresenting component values dynamically.  It also adds a <code>call</code> method to<br>\n<code>component::func::Func</code>, which takes a slice of <code>Val</code>s as parameters and returns<br>\na <code>Result&lt;Val&gt;</code> representing the result.</p>\n<p>As an implementation detail, I've also added a <code>component::values::Type</code> type,<br>\nwhich is an owned, despecialized version of<br>\n<code>wasmtime_environ::component::InterfaceType</code>.  That serves two purposes:</p>\n<ul>\n<li>It allows us to despecialize as the first step, which reduces the number of cases to consider when typechecking and lowering.</li>\n<li>It avoids needing to borrow the store both mutably and immutably when lowering, as we would if we used <code>InterfaceType</code>s.</li>\n</ul>\n<p>Finally, I happened to notice that the <code>ComponentType::SIZE32</code> calculation in<br>\n<code>expand_record_for_component_type</code> needed a correction, so I did that.</p>\n<p>Signed-off-by: Joel Dice &lt;<a href=\"mailto:joel.dice@fermyon.com\">joel.dice@fermyon.com</a>&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 289491369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657732395
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 289500435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657736579
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 289526897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657749665
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 289529213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657751278
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r920576895\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't love making a function named <code>_to_str</code> visible outside the current module. But I see all you have at the call site is a <code>&amp;StoreOpaque</code> so you can't call <code>to_str</code> instead. Unless @alexcrichton has a better idea I guess this is fine.</p>\n</blockquote>",
        "id": 289539190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657759692
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1038062159\">PR review</a>.</p>",
        "id": 289539191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657759692
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r920573671\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be reasonable to use <code>FlagsSize::from_count</code> everywhere instead of using <code>ceiling_divide</code> directly?</p>\n</blockquote>",
        "id": 289539192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657759692
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1038062159\">PR review</a>.</p>",
        "id": 289539193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657759692
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r920593852\">PR review comment</a>:</p>\n<blockquote>\n<p>If you got <code>count</code> from <code>Type::Flags</code> here instead of from <code>Val::Flags</code>, I don't see that you'd need to store a count in <code>Val::Flags</code> at all. It looks like everywhere that you need the count, you have the type available.</p>\n<p>I guess you did it this way to force the host application to specify how many flags they expect to be passing in as parameters, so you can verify in <code>typecheck</code> that their expectation was correctâ€”and so you can inform the host application about how many flags they received.</p>\n<p>I go back and forth on whether that kind of checking is worth doing in this sort of dynamic call situation. @alexcrichton, what's your take?</p>\n</blockquote>",
        "id": 289539194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657759692
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r920590680\">PR review comment</a>:</p>\n<blockquote>\n<p>This is totally a nitpick but would you mind putting these cases in the same order as the enums they correspond to? I see <code>Type</code> and <code>InterfaceType</code> have the primitive types in the same order, so this list is the only one that doesn't match.</p>\n</blockquote>",
        "id": 289539195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657759692
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r920605872\">PR review comment</a>:</p>\n<blockquote>\n<p>I think you can use <code>Iterator::try_for_each</code> here for a little more clarity.</p>\n</blockquote>",
        "id": 289539196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657759692
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1038943628\">PR review</a>.</p>",
        "id": 289597258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657808025
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r921205234\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, that felt awkward to me, too.  Perhaps we could rename it to something like <code>to_str_with_store_opaque</code>?  I haven't yet wrapped my head around all the different flavors of store, so perhaps there's a better option.</p>\n</blockquote>",
        "id": 289597259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657808026
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 289600242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657809388
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1038990800\">PR review</a>.</p>",
        "id": 289600801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657809661
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 290330752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658376048
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 290382125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658413506
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 290387527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658415797
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1046722244\">PR review</a>.</p>",
        "id": 290393642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926804560\">PR review comment</a>:</p>\n<blockquote>\n<p>While you're here and doing this could this also add variants for lifting <code>Vec&lt;T&gt;</code> from <code>WasmSlice&lt;T&gt;</code> and such?</p>\n<p>The macro could possibly look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">forward_lifts</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">WasmStr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Rc</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">WasmList</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(or similar)</p>\n</blockquote>",
        "id": 290393643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926818878\">PR review comment</a>:</p>\n<blockquote>\n<p>Idiomatically we try to avoid <code>as</code> casts where possible since in isolation they could indicate that a lossy conversion is happening. Could the casts here be replaced with <code>i32::from(*value)</code>? That should signify that no data is lost.</p>\n</blockquote>",
        "id": 290393644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926820922\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this <code>+ index</code> may not be right since each of the <code>values</code> may take up more than one <code>ValRaw</code> slot.</p>\n<p>It might make more sense for this function to take <code>&amp;mut std::slice::Iter&lt;'_, MaybeUninit&lt;ValRaw&gt;&gt;</code> instead of the slice/offset it currently has perhaps?</p>\n</blockquote>",
        "id": 290393645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926815101\">PR review comment</a>:</p>\n<blockquote>\n<p>I worry with <code>impl Iterator</code> that this will excessively monomorphize into callers, so could this use something concrete like <code>&amp;mut &amp;[ValRaw]</code> or <code>&amp;mut std::slice::Iter&lt;'_, ValRaw&gt;</code>?</p>\n</blockquote>",
        "id": 290393646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926827395\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this have a preceding <code>debug_assert!</code> about alignment?</p>\n</blockquote>",
        "id": 290393647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1046722244\">PR review</a>.</p>",
        "id": 290393648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926809386\">PR review comment</a>:</p>\n<blockquote>\n<p>This seems like it may not be right for multiple arguments since the offset may always be zero?</p>\n</blockquote>",
        "id": 290393649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926827612\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this could delegate to <code>&lt;str as Lower&gt;::store</code>?</p>\n</blockquote>",
        "id": 290393651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926824287\">PR review comment</a>:</p>\n<blockquote>\n<p>This is another case that I think is not quite right for subtle reasons. The main one is that unused <code>ValRaw</code> entries (and upper bits which are unused here) need to all be set to zero. Otherwise this runs the risk of leaking undefined values into wasm modules.</p>\n<p>Additionally this is another location that needs to inform the caller that a nonzero amount of <code>ValRaw</code> slots are consumed. Given <code>value</code> here you may also consume more slots than <code>value</code> takes up because of how variants are \"flattened\"</p>\n</blockquote>",
        "id": 290393652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926830424\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this is actually subtly incorrect because it would get the alignment incorrect for the call to <code>realloc</code>. The type of the list element may need to get passed in here.</p>\n</blockquote>",
        "id": 290393653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926832655\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that this may lead to unfortunately surprising results in that a string type is only considered equivalent if it comes from the same <code>types</code> origin but it's actually unique across all components. I think that this is sufficient for a \"succeed fast\" test but this may need to be expanded for deep equality checking as well.</p>\n</blockquote>",
        "id": 290393654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926833674\">PR review comment</a>:</p>\n<blockquote>\n<p>GIven how many types are in this module and how <code>Type</code> isn't the only export I think it may actually make sense to have this be a <code>pub mod types</code> and don't reexport <code>Type</code> from inside. Otherwise external users can't name types like <code>Field</code> and such.</p>\n</blockquote>",
        "id": 290393655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418483
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926839198\">PR review comment</a>:</p>\n<blockquote>\n<p>I think these methods may make more sense on <code>List</code> (in the values module) along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">elements</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">types</span>::<span class=\"n\">List</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(using the different structure of types I mentioned above).</p>\n<p>Then there could be <code>impl From&lt;List&gt; for Val</code> to convert to a <code>Val</code> as necessary.</p>\n</blockquote>",
        "id": 290393656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418484
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926842092\">PR review comment</a>:</p>\n<blockquote>\n<p>This doesn't necessarily have to be handled here, but I think this typecheck will eventually want to be more recursive for better error mesages. Right now I think you could get <code>expected record, got record</code> which doesn't describe which record fields mismatch or similar.</p>\n</blockquote>",
        "id": 290393657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418484
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926836614\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a bit bike-sheddy, but instead of </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Handle</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">TupleIndex</span><span class=\"p\">(</span><span class=\"n\">TypeTupleIndex</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">Handle</span><span class=\"o\">&lt;</span><span class=\"n\">TupleIndex</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>could this instead be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Handle</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Tuple</span><span class=\"p\">(</span><span class=\"n\">Handle</span><span class=\"o\">&lt;</span><span class=\"n\">TypeTupleIndex</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">Tuple</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That I think will allow us to be a bit more flexible in the future with internal representations ideally.</p>\n</blockquote>",
        "id": 290393658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418484
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926844181\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it would still be worth filling this in for other reasons though. For example all of the parameters to a host function are lifted which is where these could show up inline.</p>\n<p>Eventually we'll want an equivalent to <code>crate::Linker::func_new</code> within <code>component::Linker</code> although it doesn't have to be added as part of that PR. When that's added this'll get exercised I believe.</p>\n</blockquote>",
        "id": 290393659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418484
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926825567\">PR review comment</a>:</p>\n<blockquote>\n<p>One nice part of perhaps using <code>MaybeUninit&lt;ValRaw&gt;</code> is that you could delegate to the <code>Lower for T</code> implementations? Or otherwise I think it would be worthwhile figuring out how to delegate to that for primitives and strings/lists perhaps (may require an unsafe method or two to extract <code>MaybeUninit&lt;[ValRaw; 2]&gt;</code> from <code>&amp;mut std::slice::Iter&lt;'_, MaybeUninit&lt;ValRaw&gt;&gt;</code> though.</p>\n</blockquote>",
        "id": 290393660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418484
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926845868\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that this is going to need special logic to skip extra fields within <code>src</code> to ensure that <code>flatten_count</code> entries are always popped off that iterator.</p>\n</blockquote>",
        "id": 290393661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418484
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926841083\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this still necessary? This seems like a bit of an odd query that I'm not sure what it would be used for</p>\n</blockquote>",
        "id": 290393662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418484
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926837562\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this organization also helps method discovery since today there's lots of impls for <code>Handle&lt;T&gt;</code> for different <code>T</code> but for <code>Tuple</code> there will be just the methods related to tuples.</p>\n</blockquote>",
        "id": 290393663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658418484
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926962273\">PR review comment</a>:</p>\n<blockquote>\n<p>@alexcrichton Is there a convenient way to make a <code>&amp;mut std::slice::Iter&lt;'_, &amp;mut MaybeUninit&lt;ValRaw&gt;&gt;</code> from a <code>&amp;mut MaybeUninit&lt;[ValRaw; N]</code>?  I could do something like <code>(0..N).map(|i| map_maybe_uninit!(dst[i])</code>, but I don't think that's what you meant.</p>\n</blockquote>",
        "id": 290411013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658426236
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1046937931\">PR review</a>.</p>",
        "id": 290411015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658426236
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1046947159\">PR review</a>.</p>",
        "id": 290412048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658426730
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926968984\">PR review comment</a>:</p>\n<blockquote>\n<p>Not easily, but you can transmute <code>&amp;mut MaybeUninit&lt;[ValRaw; N]&gt;</code> to <code>&amp;mut [MaybeUninit&lt;ValRaw&gt;; N]</code> \"safely\" and then <code>.iter()</code> from there</p>\n</blockquote>",
        "id": 290412049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658426730
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1046963799\">PR review</a>.</p>",
        "id": 290413784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658427574
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r926981421\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure I understand this.  <code>Type::String</code> doesn't have a <code>Handle&lt;T&gt;</code>, so this code wouldn't be reached in that case.  Am I misunderstanding what you meant by \"string type\"?</p>\n</blockquote>",
        "id": 290413785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658427574
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927012899\">PR review comment</a>:</p>\n<blockquote>\n<p>That's what I originally considered, but I ended up using these methods on <code>Type</code> instead in the interest of ergonomics.  You can see them used in the <a href=\"http://dynamic.rs\">dynamic.rs</a> tests, along with <code>Type::nested</code>.  This avoids forcing the programmer to write a bunch of <code>if let Type::List(ty) = ty { List::new(elements, ty) } else { unreachable!() }</code>.</p>\n<p>This is the ergonomic challenge I was referring to earlier in the discussion about whether <code>Val</code>s need to be associated with a specific <code>Type</code>.  I'm certainly willing to reconsider; I just want to understand how you expect this API to be used vs how I'm using it in the <a href=\"http://dynamic.rs\">dynamic.rs</a> tests.  Do you not expect real-world code to need a bunch of <code>if let ... { ... } else { unreachable!() }</code> when building <code>Val</code>s from <code>Type</code>s in the scheme you outlined?</p>\n</blockquote>",
        "id": 290419379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658430004
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1047009004\">PR review</a>.</p>",
        "id": 290419380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658430004
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1047009881\">PR review</a>.</p>",
        "id": 290419474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658430051
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927013522\">PR review comment</a>:</p>\n<blockquote>\n<p>Please see my comment above about ergonomics and how it is used in the <a href=\"http://dynamic.rs\">dynamic.rs</a> tests.</p>\n</blockquote>",
        "id": 290419475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658430051
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1047018636\">PR review</a>.</p>",
        "id": 290420521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658430556
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927019656\">PR review comment</a>:</p>\n<blockquote>\n<p>Any e.g. record field mismatch would have been caught already in <code>Type::new_record</code> before we got this far.  The only time you'd see <code>expected record, got record</code> would be if you used <code>Val</code>s from one component in another, or if your component had two identical <code>record</code>s (i.e. same field names and types) and you mixed up which one you created the <code>Val</code> for.  Either way, more recursion wouldn't necessarily help.  This is somewhat analogous to when <code>rustc</code> reports a type mismatch between <code>foo::Bar</code> and <code>foo::Bar</code> because you're using two different versions of the <code>foo</code> crate.  It's even worse here since types don't really have names in the component model.</p>\n<p>But yes, I agree we should give a friendlier diagnostic here, e.g. hinting based on whether <code>Handle::index</code> or <code>Handle::types</code> are different, or both.</p>\n</blockquote>",
        "id": 290420522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658430556
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1047108417\">PR review</a>.</p>",
        "id": 290430592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658435708
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927080589\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah sorry bad example, but instead I think this would consider <code>(u32, u32)</code> not an equivalent type if it comes from two different components.</p>\n</blockquote>",
        "id": 290430593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658435708
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1047117182\">PR review</a>.</p>",
        "id": 290431599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658436221
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927086803\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah ok thanks for pointing that out! I think this may be a case where I'm used to slightly more verbose Rust-based idioms perhaps? For example the <code>Type::new_list</code> API as-is can return two kinds of errors (not a list type or element of the wrong type) where what I would otherwise expect is to split those two error cases across two functions. Instead of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">new_list</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Val</span>::<span class=\"n\">U32</span><span class=\"p\">(</span><span class=\"mi\">32343</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Val</span>::<span class=\"n\">U32</span><span class=\"p\">(</span><span class=\"mi\">79023439</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Val</span>::<span class=\"n\">U32</span><span class=\"p\">(</span><span class=\"mi\">2084037802</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'd expect:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">unwrap_list</span><span class=\"p\">().</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Val</span>::<span class=\"n\">U32</span><span class=\"p\">(</span><span class=\"mi\">32343</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Val</span>::<span class=\"n\">U32</span><span class=\"p\">(</span><span class=\"mi\">79023439</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Val</span>::<span class=\"n\">U32</span><span class=\"p\">(</span><span class=\"mi\">2084037802</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(or similar)</p>\n<p>I don't mean to say we should go all the way to writing a bunch of wordy <code>if let</code> but I think helper methods can help scope precisely what errors are coming out of each function. In this case <code>unwrap_list</code> would be a clear indication of \"I expect this type to be a list\" and the <code>new</code> error would be clearly \"I expect each element to be of this type\".</p>\n</blockquote>",
        "id": 290431600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658436221
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 290445773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658445013
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927693555\">PR review comment</a>:</p>\n<blockquote>\n<p>@alexcrichton any further concerns about this method?  I'm going to mark this \"resolved\" for now, but feel free to unresolve it.</p>\n</blockquote>",
        "id": 290510797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658499127
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1047966192\">PR review</a>.</p>",
        "id": 290510798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658499127
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 290511206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658499320
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1048101297\">PR review</a>.</p>",
        "id": 290531048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658505860
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927788847\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be replaced with a <code>debug_assert!</code> that the <code>memory</code> is the same as the store that this slice originally came from?</p>\n</blockquote>",
        "id": 290531049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658505860
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1048101297\">PR review</a>.</p>",
        "id": 290531050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658505860
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927790583\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a minor nit, but idiomatically I'd expect that <code>values::List::new</code> would also exist as a function and this function would simply be <code>values::List::new(values, self)</code> (or something like that). This is just random API additions though so happy to defer to future PRs.</p>\n</blockquote>",
        "id": 290531051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658505861
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927788423\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to avoid this and only have the version that takes <code>StoreOpaque</code>? I'm otherwise worried about making this method too general because the indexes are only guaranteed to be valid for the original memory slice and if one day we remove the bounds checks in release mode (which we should be able to do now I'm just being conservative) it would be memory unsafe to pass in an arbitrary slice here.</p>\n</blockquote>",
        "id": 290531052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658505861
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927787004\">PR review comment</a>:</p>\n<blockquote>\n<p>Is <code>Lift + Lower</code> needed here? Ideally I think just <code>Lift</code> would suffice for a trait bound</p>\n</blockquote>",
        "id": 290531053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658505861
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927791847\">PR review comment</a>:</p>\n<blockquote>\n<p>Unfortunately we can't rely on the <code>.len()</code> reported from an <code>ExactSizeIterator</code> with unsafe Rust. Given that we have an unsafe guarantee that a <code>Val</code> is always valid with respect to its type I think that the length will need to be checked after the fields are collected rather than before.</p>\n</blockquote>",
        "id": 290531056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658505861
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1048177609\">PR review</a>.</p>",
        "id": 290538566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658509224
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927840428\">PR review comment</a>:</p>\n<blockquote>\n<p>This is what I get when I remove the <code>+ Lower</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">T</span>: <span class=\"nc\">component</span>::<span class=\"n\">func</span>::<span class=\"n\">typed</span>::<span class=\"n\">Lower</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">func</span><span class=\"o\">/</span><span class=\"n\">typed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">536</span>:<span class=\"mi\">31</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">536</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Lift</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                 </span><span class=\"o\">^^^^</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">component</span>::<span class=\"n\">func</span>::<span class=\"n\">typed</span>::<span class=\"n\">Lower</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">T</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">550</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">forward_list_lifts</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">551</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">552</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">std</span>::<span class=\"n\">rc</span>::<span class=\"n\">Rc</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">553</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">554</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">555</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">invocation</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requirements</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">component</span>::<span class=\"n\">func</span>::<span class=\"n\">typed</span>::<span class=\"n\">Lower</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">func</span><span class=\"o\">/</span><span class=\"n\">typed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1006</span>:<span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1006</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                </span><span class=\"o\">^^^^^</span><span class=\"w\">     </span><span class=\"o\">^^^</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requirements</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">component</span>::<span class=\"n\">func</span>::<span class=\"n\">typed</span>::<span class=\"n\">ComponentType</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">func</span><span class=\"o\">/</span><span class=\"n\">typed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">475</span>:<span class=\"mi\">37</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">475</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"cp\">$($generics</span><span class=\"p\">)</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"n\">ComponentType</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                       </span><span class=\"o\">^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">504</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">forward_impls</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">505</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nc\">Lower</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">506</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nc\">Lower</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                         </span><span class=\"o\">^^^^^^</span><span class=\"w\"></span>\n<span class=\"mi\">507</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nc\">Lower</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rc</span>::<span class=\"n\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">510</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nc\">Lower</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"mi\">511</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">invocation</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">component</span>::<span class=\"n\">func</span>::<span class=\"n\">typed</span>::<span class=\"n\">Lift</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">func</span><span class=\"o\">/</span><span class=\"n\">typed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">444</span>:<span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">444</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Lift</span>: <span class=\"nb\">Sized</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">ComponentType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                </span><span class=\"o\">^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">component</span>::<span class=\"n\">func</span>::<span class=\"n\">typed</span>::<span class=\"n\">Lift</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">originates</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">forward_list_lifts</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Nightly</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"o\">-</span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">help</span>: <span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">restricting</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">parameter</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">T</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">536</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">component</span>::<span class=\"n\">func</span>::<span class=\"n\">typed</span>::<span class=\"n\">Lower</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                         </span><span class=\"o\">+++++++++++++++++++++++++++++</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 290538567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658509224
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927875726\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh that bug is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d89c262657e98caf0195c07ac3fd72126e1f8ec3/crates/wasmtime/src/component/func/typed.rs#L695\">here</a> where right now there's <code>&lt;T: Lower&gt; ComponentType for Box&lt;T&gt;</code> where that should be <code>T: ComponentType</code>. I was trying to be \"too clever\" by shoving it all into one macro but I think it can be split by refactoring the forward macro into multiple macros</p>\n</blockquote>",
        "id": 290545454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658512346
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1048228224\">PR review</a>.</p>",
        "id": 290545455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658512346
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 290549868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658514483
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1048266767\">PR review</a>.</p>",
        "id": 290550477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658514785
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927901796\">PR review comment</a>:</p>\n<blockquote>\n<p>I've improved the error message so you'll never get <code>expected record, got record</code>.  I attempted to go much further than that and recursively compare the types, but reusing <code>typed::typecheck_tuple</code> etc. turned out to be difficult in a dynamic context, and I didn't want to duplicate them either.</p>\n<p>Also, I'm having trouble finding guidance in <a href=\"https://github.com/WebAssembly/component-model\">https://github.com/WebAssembly/component-model</a> about when interface types are to be considered equal and when not, so I'm not sure what the correct logic is anyway.  Are types considered equal if they are structurally identical?</p>\n</blockquote>",
        "id": 290550478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658514785
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1048268404\">PR review</a>.</p>",
        "id": 290550697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658514894
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r927902877\">PR review comment</a>:</p>\n<blockquote>\n<p>I've address this for tuple, option, and expected.  Not sure if I should do the same for e.g. record, though.  See my comment in the other conversation about type equality.</p>\n</blockquote>",
        "id": 290550698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658514894
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1049621496\">PR review</a>.</p>",
        "id": 290771273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658761587
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r928990119\">PR review comment</a>:</p>\n<blockquote>\n<p>Idiomatically I think it's fine to call these constructors <code>new</code> rather than <code>try_new</code> since <code>try_*</code> is typically only used if the base name is already a method elsewhere (and otherwise there's no <code>Option::new</code>)</p>\n</blockquote>",
        "id": 290771274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658761587
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#pullrequestreview-1049621496\">PR review</a>.</p>",
        "id": 290771275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658761587
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r928991048\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to move <code>lift</code>/<code>load</code> to the <code>Val</code> module and keep all the internals of all the <code>Val</code> private (e.g. not <code>pub(crate)</code>)?</p>\n</blockquote>",
        "id": 290771277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658761587
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r928993328\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that the tuple/option/expected bits are probably not going to be necessary in the long-term if the original issue here is fixed. I think this is fine to leave as a FIXME with a follow-up issue for now though.</p>\n<p>Otherwise though the current logic in tuple/option/expected I would expect to be baked in here or otherwise into some trait impl on <code>T</code> perhaps. I don't think we'd want to duplicate things and have some using <code>PartialEq</code> and some using manual impls.</p>\n</blockquote>",
        "id": 290771278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658761587
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442#discussion_r928991943\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think we'll get a ton of guidance from the component model itself, but for now from Wasmtime's perspective given how trampolines and lifting/lowering/etc are all implemented we require exact structural equality for the embedder API. I think the intention is that subtyping would eventually be used but we don't have a great means of implementing that right now.</p>\n</blockquote>",
        "id": 290771279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658761587
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a> from <code>component-dynamic-type</code> to <code>main</code>.</p>",
        "id": 290794077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658771094
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">PR #4442</a>.</p>",
        "id": 290800974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658774329
    }
]