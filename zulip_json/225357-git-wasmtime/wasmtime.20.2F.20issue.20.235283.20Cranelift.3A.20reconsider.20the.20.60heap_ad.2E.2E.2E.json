[
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283\">issue #5283</a>:</p>\n<blockquote>\n<p>On error condition, does this instruction itself trap or return an address that will trap when accessed? Currently that depends on arbitrary bits of the heap configuration and memory being accessed, and is different for <code>index + offset</code> overflow vs out of bounds. I've been improving the situation a little by making it more consistent, but it is worth backing up a bit and gaining context.</p>\n<p>The <em>actual</em> problem we are solving is that of wasm loads and stores, which must trap when out of bounds. At some point long ago, we decomposed wasm memory accesses into smaller parts, one of which is <code>heap_addr</code>. Whether we trap in <code>heap_addr</code> itself or in another clif instruction after <code>heap_addr</code> is irrelevant to the fact that the wasm memory access our instruction sequence is implementing must trap when out of bounds. So I think trying to pin down and clean up <code>heap_addr</code>'s semantics in the face of error conditions is accidental complexity; a problem of our own making.</p>\n<p>That is not an argument against being precise with <code>heap_addr</code> semantics, however. If we have <code>heap_addr</code>, we should have precise semantics for it. The same way that we should aspire to giving precise (formal!) semantics to all CLIF instructions.</p>\n<p>But... what if we didn't have a <code>heap_addr</code> instruction at all? I see a few possibilities:</p>\n<ol>\n<li>\n<p>CLIF already has everything needed to emit what <code>heap_addr</code> gets legalized to today, so <code>cranelift-wasm</code> could just emit those already-legalized instructions. And now there is no interface barrier between <code>heap_addr</code> and the other CLIF instructions surrounding it where we have to define semantics and decide which side of the interface is responsible for actually doing the trap when we encounter an error condition.</p>\n</li>\n<li>\n<p>We introduce <code>bounds_checked_load</code> and <code>bounds_checked_store</code> instructions that match wasm semantics. They would take a static heap immediate, a dynamic index operand, a static offset immediate, and have a static type parameter that is being loaded/stored. We would carry these instructions all the way through Cranelift to the backends, where they would get lowered into precise machine instruction sequences. Again, there is no artificial interface barrier where we have to decide which side of the interface is responsible for trapping; the <code>bounds_checked_*</code> instructions implement the whole of the Wasm semantics and will trap on OOB/overflow.</p>\n</li>\n<li>\n<p>We introduce <code>bounds_checked_{load,store}</code> instructions as above, but we legalize them early in Cranelift's pipeline to more primitive CLIF instructions (equivalent of what <code>cranelift-wasm</code> would otherwise produce directly in option 1).</p>\n</li>\n</ol>\n<p>The primary benefits of 1 and 3 are that by decomposing the memory accesses into smaller parts, we can GVN/LICM/etc those smaller parts.</p>\n<p>The primary benefits of 2 are that we have fewer CLIF instructions to process and so compilation times should be a little better, and that we have very precise control over the machine instructions emitted. However, we can't easily GVN/LICM/etc subcomponents of a wasm load like loading the memory base and length out of the vmctx.</p>\n<p>The trade off between 1 and 3 is whether we want complexity in the <code>cranelift-wasm</code> frontend or in <code>cranelift-codegen</code> legalization.</p>\n<hr>\n<p>Personally, I would rank the options in the order of 3, 1, 2.</p>\n<p>I think we can make up for 1/3's lack of precise machine instruction control with filetests.</p>\n<p>The compilation time benefits of a macro instruction are tempting, but I think trading that away for code quality is the correct move in this scenario, since we stille have many other avenues for improving compilation times (as we have been doing a lot recently!) that don't sacrifice code quality at all.</p>\n<p>As for why 3 over 1? Keeping <code>cranelift-wasm</code> relatively simple seems like the way to go for me, and legalization seems like the natural home for this kind of thing.</p>\n</blockquote>",
        "id": 310480767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668626075
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283\">issue #5283</a>:</p>\n<blockquote>\n<p>On error condition, does this instruction itself trap or return an address that will trap when accessed? Currently that depends on arbitrary bits of the heap configuration and memory being accessed, and is different for <code>index + offset</code> overflow vs out of bounds. I've been improving the situation a little by making it more consistent, but it is worth backing up a bit and gaining context.</p>\n<p>The <em>actual</em> problem we are solving is that of wasm loads and stores, which must trap when out of bounds. At some point long ago, we decomposed wasm memory accesses into smaller parts, one of which is <code>heap_addr</code>. Whether we trap in <code>heap_addr</code> itself or in another clif instruction after <code>heap_addr</code> is irrelevant to the fact that the wasm memory access our instruction sequence is implementing must trap when out of bounds. So I think trying to pin down and clean up <code>heap_addr</code>'s semantics in the face of error conditions is accidental complexity; a problem of our own making.</p>\n<p>That is not an argument against being precise with <code>heap_addr</code> semantics, however. If we have <code>heap_addr</code>, we should have precise semantics for it. The same way that we should aspire to giving precise (formal!) semantics to all CLIF instructions.</p>\n<p>But... what if we didn't have a <code>heap_addr</code> instruction at all? I see a few possibilities:</p>\n<ol>\n<li>\n<p>CLIF already has everything needed to emit what <code>heap_addr</code> gets legalized to today, so <code>cranelift-wasm</code> could just emit those already-legalized instructions. And now there is no interface barrier between <code>heap_addr</code> and the other CLIF instructions surrounding it where we have to define semantics and decide which side of the interface is responsible for actually doing the trap when we encounter an error condition.</p>\n</li>\n<li>\n<p>We introduce <code>bounds_checked_load</code> and <code>bounds_checked_store</code> instructions that match wasm semantics. They would take a static heap immediate, a dynamic index operand, a static offset immediate, and have a static type parameter that is being loaded/stored. We would carry these instructions all the way through Cranelift to the backends, where they would get lowered into precise machine instruction sequences. Again, there is no artificial interface barrier where we have to decide which side of the interface is responsible for trapping; the <code>bounds_checked_*</code> instructions implement the whole of the Wasm semantics and will trap on OOB/overflow.</p>\n</li>\n<li>\n<p>We introduce <code>bounds_checked_{load,store}</code> instructions as above, but we legalize them early in Cranelift's pipeline to more primitive CLIF instructions (equivalent of what <code>cranelift-wasm</code> would otherwise produce directly in option 1).</p>\n</li>\n</ol>\n<p>The primary benefits of 1 and 3 are that by decomposing the memory accesses into smaller parts, we can GVN/LICM/etc those smaller parts.</p>\n<p>The primary benefits of 2 are that we have fewer CLIF instructions to process and so compilation times should be a little better, and that we have very precise control over the machine instructions emitted. However, we can't easily GVN/LICM/etc subcomponents of a wasm load like loading the memory base and length out of the vmctx.</p>\n<p>The trade off between 1 and 3 is whether we want complexity in the <code>cranelift-wasm</code> frontend or in <code>cranelift-codegen</code> legalization.</p>\n<hr>\n<p>Personally, I would rank the options in the order of 3, 1, 2.</p>\n<p>I think we can make up for 1/3's lack of precise machine instruction control with filetests.</p>\n<p>The compilation time benefits of a macro instruction are tempting, but I think trading that away for code quality is the correct move in this scenario, since we stille have many other avenues for improving compilation times (as we have been doing a lot recently!) that don't sacrifice code quality at all.</p>\n<p>As for why 3 over 1? Keeping <code>cranelift-wasm</code> relatively simple seems like the way to go for me, and legalization seems like the natural home for this kind of thing.</p>\n</blockquote>",
        "id": 310480768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668626075
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283\">issue #5283</a>:</p>\n<blockquote>\n<p>On error condition, does this instruction itself trap or return an address that will trap when accessed? Currently that depends on arbitrary bits of the heap configuration and memory being accessed, and is different for <code>index + offset</code> overflow vs out of bounds. I've been improving the situation a little by making it more consistent, but it is worth backing up a bit and gaining context.</p>\n<p>The <em>actual</em> problem we are solving is that of wasm loads and stores, which must trap when out of bounds. At some point long ago, we decomposed wasm memory accesses into smaller parts, one of which is <code>heap_addr</code>. Whether we trap in <code>heap_addr</code> itself or in another clif instruction after <code>heap_addr</code> is irrelevant to the fact that the wasm memory access our instruction sequence is implementing must trap when out of bounds. So I think trying to pin down and clean up <code>heap_addr</code>'s semantics in the face of error conditions is accidental complexity; a problem of our own making.</p>\n<p>That is not an argument against being precise with <code>heap_addr</code> semantics, however. If we have <code>heap_addr</code>, we should have precise semantics for it. The same way that we should aspire to giving precise (formal!) semantics to all CLIF instructions.</p>\n<p>But... what if we didn't have a <code>heap_addr</code> instruction at all? I see a few possibilities:</p>\n<ol>\n<li>\n<p>CLIF already has everything needed to emit what <code>heap_addr</code> gets legalized to today, so <code>cranelift-wasm</code> could just emit those already-legalized instructions. And now there is no interface barrier between <code>heap_addr</code> and the other CLIF instructions surrounding it where we have to define semantics and decide which side of the interface is responsible for actually doing the trap when we encounter an error condition.</p>\n</li>\n<li>\n<p>We introduce <code>bounds_checked_load</code> and <code>bounds_checked_store</code> instructions that match wasm semantics. They would take a static heap immediate, a dynamic index operand, a static offset immediate, and have a static type parameter that is being loaded/stored. We would carry these instructions all the way through Cranelift to the backends, where they would get lowered into precise machine instruction sequences. Again, there is no artificial interface barrier where we have to decide which side of the interface is responsible for trapping; the <code>bounds_checked_*</code> instructions implement the whole of the Wasm semantics and will trap on OOB/overflow.</p>\n</li>\n<li>\n<p>We introduce <code>bounds_checked_{load,store}</code> instructions as above, but we legalize them early in Cranelift's pipeline to more primitive CLIF instructions (equivalent of what <code>cranelift-wasm</code> would otherwise produce directly in option 1).</p>\n</li>\n</ol>\n<p>The primary benefits of 1 and 3 are that by decomposing the memory accesses into smaller parts, we can GVN/LICM/etc those smaller parts.</p>\n<p>The primary benefits of 2 are that we have fewer CLIF instructions to process and so compilation times should be a little better, and that we have very precise control over the machine instructions emitted. However, we can't easily GVN/LICM/etc subcomponents of a wasm load like loading the memory base and length out of the vmctx.</p>\n<p>The trade off between 1 and 3 is whether we want complexity in the <code>cranelift-wasm</code> frontend or in <code>cranelift-codegen</code> legalization.</p>\n<hr>\n<p>Personally, I would rank the options in the order of 3, 1, 2.</p>\n<p>I think we can make up for 1/3's lack of precise machine instruction control with filetests.</p>\n<p>The compilation time benefits of a macro instruction are tempting, but I think trading that away for code quality is the correct move in this scenario, since we stille have many other avenues for improving compilation times (as we have been doing a lot recently!) that don't sacrifice code quality at all.</p>\n<p>As for why 3 over 1? Keeping <code>cranelift-wasm</code> relatively simple seems like the way to go for me, and legalization seems like the natural home for this kind of thing.</p>\n</blockquote>",
        "id": 310480770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668626075
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283#issuecomment-1317542586\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283\">issue #5283</a>:</p>\n<blockquote>\n<p>cc'ing folks who seemed interested in this topic in today's cranelift meeting: @cfallin @elliottt </p>\n</blockquote>",
        "id": 310481076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668626164
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283#issuecomment-1317583205\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283\">issue #5283</a>:</p>\n<blockquote>\n<p>Thanks for writing this up! I think you're right here, and I agree with your ordering. 3 seems like a good approach to me, though I would mildly prefer 1 as it's not adding additional instructions. As we discussed in a DM, adding a mechanism to mark instructions as expected to be legalized would address my concerns.</p>\n</blockquote>",
        "id": 310487412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668628152
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283#issuecomment-1317806428\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283\">issue #5283</a>:</p>\n<blockquote>\n<p>@fitzgen and I just talked about this at some length and I also agree that rewriting from the \"wasm load\" semantic unit-of-work directly to lower-level instructions is a good approach.</p>\n<p>We also talked about the handling of the index+offset computation (what is currently handled by <code>uadd_overflow_trap</code> in the legalization from <code>heap_addr</code>) and came the conclusion that it probably makes sense to stick with <code>uadd_overflow_trap</code>, rather than <code>iadd_cout</code> with the carry-out feeding into a select. This is for a few reasons: (i) we'd need to feed the condition into the final select (after the addition of the heap base), not an intermediate select, and this implies reifying the carry out of the add and greater-than-or-equal condition out of the bounds check as bools and or'ing them together, which is worse codegen then we have today; and (ii) we don't actually need a Spectre-guard-style select on the result of the add-overflow check, because an overflow of index+offset (that nevertheless stays within the sandbox bounds) will not see another heap, even speculatively; it'll just see part of the current heap.</p>\n<p>So basically, (i) keep what we ultimately legalize into today, but (ii) do it without <code>heap_addr</code> in the middle, by either legalizing from <code>heap_load</code> or de-facto legalizing in <code>cranelift-wasm</code>. I sort of prefer the former as long as we have a concept of <code>heap</code> entities, and removing those and moving the complexity to <code>cranelift-wasm</code> seems like a lot of unnecessary work (and we get useful checking of its implementation by having it at the CLIF level, because of the interpreter's implementation of it).</p>\n</blockquote>",
        "id": 310519395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668640764
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283#issuecomment-1332961894\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283\">issue #5283</a>:</p>\n<blockquote>\n<p>After implementing (the easy) half of (3) and talking it over with @cfallin I am now leaning towards pivoting to (1), that is removing the concept of heaps from CLIF altogether and doing the legalization immediately inside <code>cranelift-wasm</code>.</p>\n<p>The reasons are that (3) involves making heap versions of a bunch of instructions we already have in CLIF: the extending loads and stores like <code>uload8</code> et al, the SIMD versions of those like <code>uload8x8</code> et al, and various atomic instructions. <code>uload8</code> et al could be replaced with backend rules for matching <code>(uextend.i64 (load.i8 ...))</code> patterns but this is a bunch of churn for little gain and also requires answering questions like \"how do we generalize <code>SinkableLoad</code> to all of our backends?\". It is a little bit of a rabbit hole in its own right.</p>\n<p>(1) would not require removing, replacing, or duplicating any CLIF instructions other than the <code>heap_*</code> instructions which are directly related to CLIF heaps. That's nice. Furthermore, we avoid having additional \"temporary\" CLIF instructions that exist only momentarily at the start of compilation before being legalized away, never to be seen by a backend. Also aesthetically pleasing.</p>\n<p>Will dig into this a bit and report back.</p>\n</blockquote>",
        "id": 313184984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669855300
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5283\">issue #5283</a>:</p>\n<blockquote>\n<p>On error condition, does this instruction itself trap or return an address that will trap when accessed? Currently that depends on arbitrary bits of the heap configuration and memory being accessed, and is different for <code>index + offset</code> overflow vs out of bounds. I've been improving the situation a little by making it more consistent, but it is worth backing up a bit and gaining context.</p>\n<p>The <em>actual</em> problem we are solving is that of wasm loads and stores, which must trap when out of bounds. At some point long ago, we decomposed wasm memory accesses into smaller parts, one of which is <code>heap_addr</code>. Whether we trap in <code>heap_addr</code> itself or in another clif instruction after <code>heap_addr</code> is irrelevant to the fact that the wasm memory access our instruction sequence is implementing must trap when out of bounds. So I think trying to pin down and clean up <code>heap_addr</code>'s semantics in the face of error conditions is accidental complexity; a problem of our own making.</p>\n<p>That is not an argument against being precise with <code>heap_addr</code> semantics, however. If we have <code>heap_addr</code>, we should have precise semantics for it. The same way that we should aspire to giving precise (formal!) semantics to all CLIF instructions.</p>\n<p>But... what if we didn't have a <code>heap_addr</code> instruction at all? I see a few possibilities:</p>\n<ol>\n<li>\n<p>CLIF already has everything needed to emit what <code>heap_addr</code> gets legalized to today, so <code>cranelift-wasm</code> could just emit those already-legalized instructions. And now there is no interface barrier between <code>heap_addr</code> and the other CLIF instructions surrounding it where we have to define semantics and decide which side of the interface is responsible for actually doing the trap when we encounter an error condition.</p>\n</li>\n<li>\n<p>We introduce <code>bounds_checked_load</code> and <code>bounds_checked_store</code> instructions that match wasm semantics. They would take a static heap immediate, a dynamic index operand, a static offset immediate, and have a static type parameter that is being loaded/stored. We would carry these instructions all the way through Cranelift to the backends, where they would get lowered into precise machine instruction sequences. Again, there is no artificial interface barrier where we have to decide which side of the interface is responsible for trapping; the <code>bounds_checked_*</code> instructions implement the whole of the Wasm semantics and will trap on OOB/overflow.</p>\n</li>\n<li>\n<p>We introduce <code>bounds_checked_{load,store}</code> instructions as above, but we legalize them early in Cranelift's pipeline to more primitive CLIF instructions (equivalent of what <code>cranelift-wasm</code> would otherwise produce directly in option 1).</p>\n</li>\n</ol>\n<p>The primary benefits of 1 and 3 are that by decomposing the memory accesses into smaller parts, we can GVN/LICM/etc those smaller parts.</p>\n<p>The primary benefits of 2 are that we have fewer CLIF instructions to process and so compilation times should be a little better, and that we have very precise control over the machine instructions emitted. However, we can't easily GVN/LICM/etc subcomponents of a wasm load like loading the memory base and length out of the vmctx.</p>\n<p>The trade off between 1 and 3 is whether we want complexity in the <code>cranelift-wasm</code> frontend or in <code>cranelift-codegen</code> legalization.</p>\n<hr>\n<p>Personally, I would rank the options in the order of 3, 1, 2.</p>\n<p>I think we can make up for 1/3's lack of precise machine instruction control with filetests.</p>\n<p>The compilation time benefits of a macro instruction are tempting, but I think trading that away for code quality is the correct move in this scenario, since we stille have many other avenues for improving compilation times (as we have been doing a lot recently!) that don't sacrifice code quality at all.</p>\n<p>As for why 3 over 1? Keeping <code>cranelift-wasm</code> relatively simple seems like the way to go for me, and legalization seems like the natural home for this kind of thing.</p>\n</blockquote>",
        "id": 315940296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064011
    }
]