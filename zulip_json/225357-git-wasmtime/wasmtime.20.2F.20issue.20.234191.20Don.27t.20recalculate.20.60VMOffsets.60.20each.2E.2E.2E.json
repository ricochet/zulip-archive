[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4191\">issue #4191</a>:</p>\n<blockquote>\n<p>Currently whenever an instance is created <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/runtime/src/instance/allocator.rs#L524\">Wasmtime will calculate the <code>VMOffsets</code> structure</a> (also for the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/runtime/src/instance/allocator/pooling.rs#L580\">pooling allocator</a>). This <code>VMOffsets</code> structure which is actually <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/environ/src/vmoffsets.rs#L50-L92\">quite large</a> is also stored within the <code>Instance</code> allocation for each instance. This means that every instantiation is redoing this work and additionally \"wasting\" space by storing this in each <code>Instance</code>. While the cost of computation here and the cost of initializing this storage is pretty small I think this would still be good to fix.</p>\n<p>I think a better solution would be to perhaps store the <code>VMOffsets</code> in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/runtime/src/instance.rs#L63\"><code>runtime_info</code> field</a> since this information is statically known when the module is created and it can live in one location in the module and be referenced indirectly by each instance. The reason I hesitate to do this though is that accessing the vmoffsets would then become a dynamic function call (since <code>ModuleRuntimeInfo</code> is a trait). as opposed to today where information is at a static offset within <code>Instance</code>. I'm worried about the runtime impact of naively moving this information behind <code>ModuleRuntimeInfo</code> (since <code>VMOffsets</code> is pretty hot).</p>\n<p>I'm not sure how best to solve this immediately, but some possibilities include:</p>\n<ul>\n<li>We could store a raw pointer, returned by <code>ModuleRuntimeInfo</code>, into <code>Instance</code> so we call the indirect function once at construction and then never again.</li>\n<li>The <code>ModuleRuntimeInfo</code> could perhaps return an <code>Arc</code> \"package\" of various other bits and pieces of information that don't need to go through a virtual lookup. Or otherwise we could do away with the <code>ModuleRuntimeInfo</code> trait and instead have some sort of structure there which is precomputed for each <code>Module</code> (this would be a large-ish refactoring).</li>\n</ul>\n<p>And possibly other strategies as well. Given the relatively low impact of having this stored in each instance though this isn't the most pressing issue.</p>\n</blockquote>",
        "id": 284167486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653675740
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4191\">issue #4191</a>:</p>\n<blockquote>\n<p>Currently whenever an instance is created <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/runtime/src/instance/allocator.rs#L524\">Wasmtime will calculate the <code>VMOffsets</code> structure</a> (also for the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/runtime/src/instance/allocator/pooling.rs#L580\">pooling allocator</a>). This <code>VMOffsets</code> structure which is actually <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/environ/src/vmoffsets.rs#L50-L92\">quite large</a> is also stored within the <code>Instance</code> allocation for each instance. This means that every instantiation is redoing this work and additionally \"wasting\" space by storing this in each <code>Instance</code>. While the cost of computation here and the cost of initializing this storage is pretty small I think this would still be good to fix.</p>\n<p>I think a better solution would be to perhaps store the <code>VMOffsets</code> in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/runtime/src/instance.rs#L63\"><code>runtime_info</code> field</a> since this information is statically known when the module is created and it can live in one location in the module and be referenced indirectly by each instance. The reason I hesitate to do this though is that accessing the vmoffsets would then become a dynamic function call (since <code>ModuleRuntimeInfo</code> is a trait). as opposed to today where information is at a static offset within <code>Instance</code>. I'm worried about the runtime impact of naively moving this information behind <code>ModuleRuntimeInfo</code> (since <code>VMOffsets</code> is pretty hot).</p>\n<p>I'm not sure how best to solve this immediately, but some possibilities include:</p>\n<ul>\n<li>We could store a raw pointer, returned by <code>ModuleRuntimeInfo</code>, into <code>Instance</code> so we call the indirect function once at construction and then never again.</li>\n<li>The <code>ModuleRuntimeInfo</code> could perhaps return an <code>Arc</code> \"package\" of various other bits and pieces of information that don't need to go through a virtual lookup. Or otherwise we could do away with the <code>ModuleRuntimeInfo</code> trait and instead have some sort of structure there which is precomputed for each <code>Module</code> (this would be a large-ish refactoring).</li>\n</ul>\n<p>And possibly other strategies as well. Given the relatively low impact of having this stored in each instance though this isn't the most pressing issue.</p>\n</blockquote>",
        "id": 284167487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653675740
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4191#issuecomment-1334603086\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4191\">issue #4191</a>:</p>\n<blockquote>\n<p>Done in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5346\">https://github.com/bytecodealliance/wasmtime/pull/5346</a></p>\n</blockquote>",
        "id": 313403460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669939835
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4191\">issue #4191</a>:</p>\n<blockquote>\n<p>Currently whenever an instance is created <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/runtime/src/instance/allocator.rs#L524\">Wasmtime will calculate the <code>VMOffsets</code> structure</a> (also for the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/runtime/src/instance/allocator/pooling.rs#L580\">pooling allocator</a>). This <code>VMOffsets</code> structure which is actually <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/environ/src/vmoffsets.rs#L50-L92\">quite large</a> is also stored within the <code>Instance</code> allocation for each instance. This means that every instantiation is redoing this work and additionally \"wasting\" space by storing this in each <code>Instance</code>. While the cost of computation here and the cost of initializing this storage is pretty small I think this would still be good to fix.</p>\n<p>I think a better solution would be to perhaps store the <code>VMOffsets</code> in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bffce37050abb22e3f07583a9a695ac790236f91/crates/runtime/src/instance.rs#L63\"><code>runtime_info</code> field</a> since this information is statically known when the module is created and it can live in one location in the module and be referenced indirectly by each instance. The reason I hesitate to do this though is that accessing the vmoffsets would then become a dynamic function call (since <code>ModuleRuntimeInfo</code> is a trait). as opposed to today where information is at a static offset within <code>Instance</code>. I'm worried about the runtime impact of naively moving this information behind <code>ModuleRuntimeInfo</code> (since <code>VMOffsets</code> is pretty hot).</p>\n<p>I'm not sure how best to solve this immediately, but some possibilities include:</p>\n<ul>\n<li>We could store a raw pointer, returned by <code>ModuleRuntimeInfo</code>, into <code>Instance</code> so we call the indirect function once at construction and then never again.</li>\n<li>The <code>ModuleRuntimeInfo</code> could perhaps return an <code>Arc</code> \"package\" of various other bits and pieces of information that don't need to go through a virtual lookup. Or otherwise we could do away with the <code>ModuleRuntimeInfo</code> trait and instead have some sort of structure there which is precomputed for each <code>Module</code> (this would be a large-ish refactoring).</li>\n</ul>\n<p>And possibly other strategies as well. Given the relatively low impact of having this stored in each instance though this isn't the most pressing issue.</p>\n</blockquote>",
        "id": 313403461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669939835
    }
]