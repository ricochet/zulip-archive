[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>It appears that #1561 regressed <code>WasiCtxBuilder::stdin</code>, <code>WasiCtxBuilder::stdout</code>, and <code>WasiCtxBuilder::stderr</code> because it is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/ctx.rs#L372\">using <code>OsOther</code></a> which will error with <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/sys/unix/osother.rs#L17\">invalid argument</a>.</p>\n<p>cc @kubkon.</p>\n<p>This caused a <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/runs/694789903?check_suite_focus=true\">CI failure in the .NET implementation</a> that I hadn't had time to look into the last few days.</p>\n<p>Unfortunately, there's a test coverage hole in Wasmtime CI where only a pipe handle was used for these functions, which is why the regression wasn't caught (<code>OsOther</code> works fine for pipes).</p>\n<p>The fix should probably try an <code>OsFile</code> first and then a <code>OsOther</code>.  We should also close the test hole.</p>\n</blockquote>",
        "id": 198277101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590024286
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>It appears that #1561 regressed <code>WasiCtxBuilder::stdin</code>, <code>WasiCtxBuilder::stdout</code>, and <code>WasiCtxBuilder::stderr</code> because it is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/ctx.rs#L372\">using <code>OsOther</code></a> which will error with <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/sys/unix/osother.rs#L17\">invalid argument</a>.</p>\n<p>cc @kubkon.</p>\n<p>This caused a <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/runs/694789903?check_suite_focus=true\">CI failure in the .NET implementation</a> that I hadn't had time to look into the last few days.</p>\n<p>Unfortunately, there's a test coverage hole in Wasmtime CI where only a pipe handle was used for these functions, which is why the regression wasn't caught (<code>OsOther</code> works fine for pipes).</p>\n<p>The fix should probably try an <code>OsFile</code> first and then a <code>OsOther</code>.  We should also close the test hole.</p>\n</blockquote>",
        "id": 198277102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590024286
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>It appears that #1561 regressed <code>WasiCtxBuilder::stdin</code>, <code>WasiCtxBuilder::stdout</code>, and <code>WasiCtxBuilder::stderr</code> because it is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/ctx.rs#L372\">using <code>OsOther</code></a> which will error with <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/sys/unix/osother.rs#L17\">invalid argument</a> when given a file handle.</p>\n<p>cc @kubkon.</p>\n<p>This caused a <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/runs/694789903?check_suite_focus=true\">CI failure in the .NET implementation</a> that I hadn't had time to look into the last few days.</p>\n<p>Unfortunately, there's a test coverage hole in Wasmtime CI where only a pipe handle was used for these functions, which is why the regression wasn't caught (<code>OsOther</code> works fine for pipes).</p>\n<p>The fix should probably try an <code>OsFile</code> first and then a <code>OsOther</code>.  We should also close the test hole.</p>\n</blockquote>",
        "id": 198277120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590024311
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>It appears that #1561 regressed <code>WasiCtxBuilder::stdin</code>, <code>WasiCtxBuilder::stdout</code>, and <code>WasiCtxBuilder::stderr</code> because it is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/ctx.rs#L372\">using <code>OsOther</code></a> which will error with <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/sys/unix/osother.rs#L17\">invalid argument</a> when given a file handle.</p>\n<p>cc @kubkon.</p>\n<p>This caused a <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/runs/694789903?check_suite_focus=true\">CI failure in the .NET implementation</a> that I hadn't had time to look into the last few days.</p>\n<p>Unfortunately, there's a test coverage hole in Wasmtime CI where only a pipe handle was used for these functions, which is why the regression wasn't caught (<code>OsOther</code> works fine for pipes).</p>\n</blockquote>",
        "id": 198277815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590025204
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735#issuecomment-631895170\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>Oh shoot, it seems that my refactoring regressed a lot more than expected, sorry about that! I’ll have a look ASAP and also will try figure out an additional test. Thanks for the report @peterhuene!</p>\n</blockquote>",
        "id": 198288888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590040196
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735#issuecomment-632272687\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>Just out of curiosity, would #1600 fix this issue for you?</p>\n</blockquote>",
        "id": 198358806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086149
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735#issuecomment-632312724\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>From a quick glance, I don't think it would, as the .NET API goes through the WASI C API, which <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600/files#diff-f031dfa47983d0510bdad12a13d636e9R253-R267\">remains using <code>OsOther</code></a>.</p>\n<p>I was thinking of a more specific fix to where we currently handle <code>PendingEntry::OsHandle</code> to support either a file handle or an other handle, ala <a href=\"https://github.com/peterhuene/wasmtime/commit/21b0d6e27ccf5d19eee43f921f7898e960f005a0\">https://github.com/peterhuene/wasmtime/commit/21b0d6e27ccf5d19eee43f921f7898e960f005a0</a>.  It does incur an extra stat to see what type of handle it is, though.</p>\n</blockquote>",
        "id": 198368867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590091166
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735#issuecomment-632314563\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>Breaking change to the Rust API aside, I think if we changed those to <code>OsFile</code>, your approach would work.  Th C API is only accepting paths to files.</p>\n</blockquote>",
        "id": 198369512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590091419
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735#issuecomment-632314563\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>Breaking change to the Rust API aside, I think if we changed those to <code>OsFile</code>, your approach would work.  The C API is only accepting paths to files.</p>\n</blockquote>",
        "id": 198369533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590091427
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735#issuecomment-641489227\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>Since #1600 landed, I’m closing this one. Feel free to reopen it though if you feel it’s not been fully fixed @peterhuene!</p>\n</blockquote>",
        "id": 200269887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591726846
    },
    {
        "content": "<p>kubkon closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1735\">Issue #1735</a>:</p>\n<blockquote>\n<p>It appears that #1561 regressed <code>WasiCtxBuilder::stdin</code>, <code>WasiCtxBuilder::stdout</code>, and <code>WasiCtxBuilder::stderr</code> because it is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/ctx.rs#L372\">using <code>OsOther</code></a> which will error with <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/sys/unix/osother.rs#L17\">invalid argument</a> when given a file handle.</p>\n<p>cc @kubkon.</p>\n<p>This caused a <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/runs/694789903?check_suite_focus=true\">CI failure in the .NET implementation</a> that I hadn't had time to look into the last few days.</p>\n<p>Unfortunately, there's a test coverage hole in Wasmtime CI where only a pipe handle was used for these functions, which is why the regression wasn't caught (<code>OsOther</code> works fine for pipes).</p>\n</blockquote>",
        "id": 200269888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591726846
    }
]