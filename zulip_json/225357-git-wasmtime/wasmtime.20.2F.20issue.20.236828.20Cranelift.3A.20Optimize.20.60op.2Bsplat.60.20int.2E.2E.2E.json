[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>This was pointed out by @jameysharp  in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6815#pullrequestreview-1570118805\">https://github.com/bytecodealliance/wasmtime/pull/6815#pullrequestreview-1570118805</a>!</p>\n<p>We should try to transform <code>(op (splat x) (splat y) ...)</code> into <code>(splat (op x y ...))</code> for operations that support this.</p>\n<h4>Benefit</h4>\n<p>This transforms SIMD operations into their scalar counterpart which should be beneficial. We also have better constant propagation on scalars, so this is also an opportunity to do that further.</p>\n<p>RISC-V specifically really benefits from this optimization since we have opcodes that can eat the splat on the transformed version.</p>\n<h4>Implementation</h4>\n<p>The e-graphs mid end is <em>awesome</em> for stuff like this! Here's one rule:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lane_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>Pasting this into <code>cranelift/codegen/src/opts/vector.isle</code> makes this tranform work on <code>imul</code>!</p>\n<p>You can try running this test to verify that it works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">imul_splat_into_splat_imul</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>(Run this with <code>cargo run -- test ./the-above.clif</code> from the <code>/cranelift</code> directory)</p>\n<p>This is also a good test to add to our testsuite in <code>cranelift/filetests/filetests/egraph/...</code>.</p>\n<p>There are so many opcodes that this optimization works for that I actually can't list them all. Here's a few: <code>iadd</code>,<code>isub</code>,<code>imul</code>,<code>ineg</code>,<code>iabs</code>,<code>umulhi</code>,<code>smulhi</code>,... Just look at our <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html\">opcode list</a> and a lot of them will work out.</p>\n<p>Where it <em>wont</em> work:</p>\n<ul>\n<li>Trapping operations (i.e. <code>idiv</code> / <code>urem</code> / <code>srem</code>). This doesn't work because we currently don't perform optimizations on these operations (see #5908)</li>\n</ul>\n<p>Where it may not work:</p>\n<ul>\n<li>Floating point operations. I'm not 100% sure about this one, it logically makes sense that it wouldn't change the result, but I'm just afraid of doing transforms on floats.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>There are so many opcodes for which this rule can be implemented that it may be worth considering auto-generating it. However I doubt it would be worth the effort + maintenance complexity of that. Copy pasting a bunch of times is sometimes better!<br>\n</p>\n</blockquote>",
        "id": 383424545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691618174
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the good first issue label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">Issue #6828</a>.</p>",
        "id": 383424546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691618175
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">Issue #6828</a>.</p>",
        "id": 383424547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691618175
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:E-compiler label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">Issue #6828</a>.</p>",
        "id": 383424548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691618175
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift<span aria-label=\"goal\" class=\"emoji emoji-1f945\" role=\"img\" title=\"goal\">:goal:</span>optimize-speed label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">Issue #6828</a>.</p>",
        "id": 383424551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691618175
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:E-easy label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">Issue #6828</a>.</p>",
        "id": 383424552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691618175
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828#issuecomment-1677144122\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<p>@afonso360 I'd like to pick this one up. Will be doing some reading on ISLE first.</p>\n</blockquote>",
        "id": 384740425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692012280
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828#issuecomment-1680377713\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<p>@afonso360 How do I see the optimized CLIF code for a given func after all the mid-end opts are applied to it? In the case of some operators my test cases are failing. For example for <code>band_not</code> if I use this simplify rule:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lane_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>the following test is failing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">band_not_splat_into_splat_band_not</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>with the following message:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"err\">\\</span><span class=\"n\">filetests</span><span class=\"err\">\\</span><span class=\"n\">egraph</span><span class=\"err\">\\</span><span class=\"n\">simd</span><span class=\"o\">-</span><span class=\"n\">splat</span><span class=\"o\">-</span><span class=\"n\">simplify</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">optimize</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">filecheck</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">38</span>:\n    #<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span>#<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">    </span>#<span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">band_not_splat_into_splat_band_not</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Missed</span><span class=\"w\"> </span>#<span class=\"mi\">0</span>: <span class=\"err\">\\</span><span class=\"n\">bv5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"err\">\\</span><span class=\"n\">b</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bnot</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"mi\">1356</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n<span class=\"n\">error</span>: <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>So I just wanted to debug and see how the generated code differs from the the expectation in the test.</p>\n</blockquote>",
        "id": 385435480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692182829
    },
    {
        "content": "<p>gurry deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828#issuecomment-1680377713\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<p>@afonso360 How do I see the optimized CLIF code for a given func after all the mid-end opts are applied to it? In the case of some operators my test cases are failing. For example for <code>band_not</code> if I use this simplify rule:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lane_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>the following test is failing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">band_not_splat_into_splat_band_not</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>with the following message:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"err\">\\</span><span class=\"n\">filetests</span><span class=\"err\">\\</span><span class=\"n\">egraph</span><span class=\"err\">\\</span><span class=\"n\">simd</span><span class=\"o\">-</span><span class=\"n\">splat</span><span class=\"o\">-</span><span class=\"n\">simplify</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">optimize</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">filecheck</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">38</span>:\n    #<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span>#<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">    </span>#<span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">band_not_splat_into_splat_band_not</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Missed</span><span class=\"w\"> </span>#<span class=\"mi\">0</span>: <span class=\"err\">\\</span><span class=\"n\">bv5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"err\">\\</span><span class=\"n\">b</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bnot</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"mi\">1356</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n<span class=\"n\">error</span>: <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>So I just wanted to debug and see how the generated code differs from the the expectation in the test.</p>\n</blockquote>",
        "id": 385435550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692182872
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828#issuecomment-1680385520\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<p>@afonso360 How do I see the generated code after all the mid-end opts are applied to a func? Some of my tests are failing for some operators. For example for <code>band_not</code>  for this simplify rule:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lane_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>the following test fails:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">band_not_splat_into_splat_band_not</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>with the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"err\">\\</span><span class=\"n\">filetests</span><span class=\"err\">\\</span><span class=\"n\">egraph</span><span class=\"err\">\\</span><span class=\"n\">simd</span><span class=\"o\">-</span><span class=\"n\">splat</span><span class=\"o\">-</span><span class=\"n\">simplify</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">optimize</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">filecheck</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">38</span>:\n    #<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span>#<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">    </span>#<span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">band_not_splat_into_splat_band_not</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Missed</span><span class=\"w\"> </span>#<span class=\"mi\">0</span>: <span class=\"err\">\\</span><span class=\"n\">bv5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_not</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"err\">\\</span><span class=\"n\">b</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bnot</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"mi\">1356</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n<span class=\"n\">error</span>: <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>So I just wanted to debug and see how the generated code differs from the test expectation.</p>\n</blockquote>",
        "id": 385436313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692183196
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828#issuecomment-1680394998\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<p>Oh! Right I forgot that we have a few special opcodes like <code>band_not</code> that are transformed into multiple ops.</p>\n<p>We should be able to ignore those since the mid-end will never see them (I think!) before they are expanded into multiple operations. With everything that you have on that PR, I think you are just missing the transform for <code>bnot</code> and that test should start passing.</p>\n<hr>\n<p>But to check the optimized code you can use the slightly complicated command:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<p>This runs the whole compile pipeline, and <code>-p</code> prints the clif file before being sent to the backends for converting into machine code.</p>\n</blockquote>",
        "id": 385437510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692183662
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828#issuecomment-1680394998\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<p>Oh! Right I forgot that we have a few special opcodes like <code>band_not</code> that are transformed into multiple ops.</p>\n<p>We should be able to ignore those since the mid-end will never see them (I think!) before they are expanded into multiple operations. With everything that you have on that PR, I think you are just missing the transform for <code>bnot</code> and we should be able to transform those two ops.</p>\n<hr>\n<p>But to check the optimized code you can use the slightly complicated command:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<p>This runs the whole compile pipeline, and <code>-p</code> prints the clif file before being sent to the backends for converting into machine code.</p>\n</blockquote>",
        "id": 385437718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692183735
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828#issuecomment-1680449389\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<p>Thanks for the info @afonso360 .</p>\n<p>The test for <code>bnot</code> was failing for me for some reason. I'll investigate it now with the help of the command you shared.</p>\n<p>What about the family of shift and rotate ops such as <code>ishl</code> and <code>rotl</code>? Will this optimization be applicable to them?</p>\n</blockquote>",
        "id": 385443730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692186153
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828#issuecomment-1680463791\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<blockquote>\n<p>What about the family of shift and rotate ops such as ishl and rotl? Will this optimization be applicable to them?</p>\n</blockquote>\n<p>Yeah, they should be! However note that <code>ishl</code> and friends only support a scalar rhs (the number of bits to shift) and reject vectors in that position.</p>\n<p>So the optimization is slightly different. We only need to ensure that the lhs is splatted. So it would look something like this<br>\n<code>(ishl (splat lhs) rhs) -&gt; (splat (ishl lhs rhs))</code></p>\n<p>The verifier shouldn't even let you build a <code>ishl</code> with a vector rhs. A good way to check what kinds of values are supported by each operation is to read the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.ishl\">documentation</a> for it. We'll usually have a remark stating: \"this supports scalar or vectors\", or this is scalar only. Something along those lines.</p>\n</blockquote>",
        "id": 385445276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692186830
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828#issuecomment-1680463791\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<blockquote>\n<p>What about the family of shift and rotate ops such as ishl and rotl? Will this optimization be applicable to them?</p>\n</blockquote>\n<p>Yeah, they should be! However note that <code>ishl</code> and friends only support a scalar rhs (the number of bits to shift) and reject vectors in that position.</p>\n<p>So the optimization is slightly different. We only need to ensure that the lhs is splatted. So it would look something like this<br>\n<code>(ishl (splat lhs) rhs) -&gt; (splat (ishl lhs rhs))</code>.</p>\n<p>It's also probably worth adding a comment with that reasoning in the code! I didn't remember it myself until I tried it.</p>\n<p>The verifier shouldn't even let you build a <code>ishl</code> with a vector rhs. A good way to check what kinds of values are supported by each operation is to read the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.ishl\">documentation</a> for it. We'll usually have a remark stating: \"this supports scalar or vectors\", or this is scalar only. Something along those lines.</p>\n</blockquote>",
        "id": 385445425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692186892
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6828\">issue #6828</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>This was pointed out by @jameysharp  in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6815#pullrequestreview-1570118805\">https://github.com/bytecodealliance/wasmtime/pull/6815#pullrequestreview-1570118805</a>!</p>\n<p>We should try to transform <code>(op (splat x) (splat y) ...)</code> into <code>(splat (op x y ...))</code> for operations that support this.</p>\n<h4>Benefit</h4>\n<p>This transforms SIMD operations into their scalar counterpart which should be beneficial. We also have better constant propagation on scalars, so this is also an opportunity to do that further.</p>\n<p>RISC-V specifically really benefits from this optimization since we have opcodes that can eat the splat on the transformed version.</p>\n<h4>Implementation</h4>\n<p>The e-graphs mid end is <em>awesome</em> for stuff like this! Here's one rule:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lane_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>Pasting this into <code>cranelift/codegen/src/opts/vector.isle</code> makes this tranform work on <code>imul</code>!</p>\n<p>You can try running this test to verify that it works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">imul_splat_into_splat_imul</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>(Run this with <code>cargo run -- test ./the-above.clif</code> from the <code>/cranelift</code> directory)</p>\n<p>This is also a good test to add to our testsuite in <code>cranelift/filetests/filetests/egraph/...</code>.</p>\n<p>There are so many opcodes that this optimization works for that I actually can't list them all. Here's a few: <code>iadd</code>,<code>isub</code>,<code>imul</code>,<code>ineg</code>,<code>iabs</code>,<code>umulhi</code>,<code>smulhi</code>,... Just look at our <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html\">opcode list</a> and a lot of them will work out.</p>\n<p>Where it <em>wont</em> work:</p>\n<ul>\n<li>Trapping operations (i.e. <code>idiv</code> / <code>urem</code> / <code>srem</code>). This doesn't work because we currently don't perform optimizations on these operations (see #5908)</li>\n</ul>\n<p>Where it may not work:</p>\n<ul>\n<li>Floating point operations. I'm not 100% sure about this one, it logically makes sense that it wouldn't change the result, but I'm just afraid of doing transforms on floats.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>There are so many opcodes for which this rule can be implemented that it may be worth considering auto-generating it. However I doubt it would be worth the effort + maintenance complexity of that. Copy pasting a bunch of times is sometimes better!<br>\n</p>\n</blockquote>",
        "id": 385865539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692349343
    }
]