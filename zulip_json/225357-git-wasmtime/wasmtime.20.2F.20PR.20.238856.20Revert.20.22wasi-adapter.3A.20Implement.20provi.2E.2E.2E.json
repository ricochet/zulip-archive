[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a> from <code>alexcrichton:revert-adapter-binaries-in-tree</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This reverts <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8792\">https://github.com/bytecodealliance/wasmtime/pull/8792</a> after I've discovered a few extra consequences of having this in-repository:</p>\n<ul>\n<li>Checked-in binaries block updates to <code>wasm-tools</code> crates such as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8838\">https://github.com/bytecodealliance/wasmtime/pull/8838</a></li>\n<li>Checked in binaries aren't reproducible across platforms at the moment, meaning that macOS binaries are different than Linux binaries for example (symbols and function ordering)</li>\n<li>Checked in binaries change when the wasmtime version bumps which I tested with <code>./scripts/publish.rs bump</code> (unsure why, but I'm assuming some hashed thing gets in there somehow)</li>\n</ul>\n<p>Overall this is much more brittle than I originally thought so in the end I don't think it's going to be viable to check in binaries here. I think we should instead explore strategies such as generating the crate-to-publish on-the-fly as part of the publication step or similar to that.</p>\n<p>cc @juntyr since this'll affect your work, would you be up for helping to explore an alternative solution that publishes the binaries we generate rather than checking in the generated binaries?</p>\n</blockquote>",
        "id": 445967155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718923877
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>.</p>",
        "id": 445967157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718923877
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>.</p>",
        "id": 445967158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718923877
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>.</p>",
        "id": 445967159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718923877
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#pullrequestreview-2131506256\">PR review</a>.</p>",
        "id": 445969519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718924994
    },
    {
        "content": "<p>juntyr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#issuecomment-2181992131\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>:</p>\n<blockquote>\n<blockquote>\n<p>This reverts #8792 after I've discovered a few extra consequences of having this in-repository:</p>\n<div class=\"codehilite\"><pre><span></span><code>* Checked-in binaries block updates to `wasm-tools` crates such as [upgrade to wasm-tools 0.211.1 #8838](https://github.com/bytecodealliance/wasmtime/pull/8838)\n</code></pre></div>\n\n</blockquote>\n<p>Does the adapter have an indirect dependency on some of the tools crates ... oh yes it depends on wasm-encoder at least. So it makes sense and is correct that bumping wasm-tools can change the compiled adapter output but that's not what we want to show up in everybody's CI failure.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* Checked in binaries aren&#39;t reproducible across platforms at the moment, meaning that macOS binaries are different than Linux binaries for example (symbols and function ordering)\n</code></pre></div>\n\n</blockquote>\n<p>I see that you're already whacking that mole <a href=\"https://github.com/rust-lang/cargo/pull/14107\">https://github.com/rust-lang/cargo/pull/14107</a> :) but this will take a while to hit stable.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* Checked in binaries change when the wasmtime version bumps which I tested with `./scripts/publish.rs bump` (unsure why, but I&#39;m assuming some hashed thing gets in there somehow)\n</code></pre></div>\n\n</blockquote>\n<p>This goes back to the adapter using the repo crate version, which is included in the metadata hash.</p>\n<blockquote>\n<p>Overall this is much more brittle than I originally thought so in the end I don't think it's going to be viable to check in binaries here. I think we should instead explore strategies such as generating the crate-to-publish on-the-fly as part of the publication step or similar to that.</p>\n</blockquote>\n<p>Do we need to fully remove the WASM binaries from the repo? If so, what do we do with the adapter provider crate? To avoid magically creating it during publication, it could point at zero-sized dummy files in the repo, and the <a href=\"http://publish-to-crates.io\">publish-to-crates.io</a> script could recompile the adapter and replace those files just in time. However, this means that this crate would be very magical and not be used as a git dependency.</p>\n<p>If we can keep the binaries, my idea would be to not check for matching builds in CI, to manually rebuild the adapter in the artifact action as before, and to rebuild as part of the publish script that creates the branch for the next release (what should happen if changes that would update the binary are made to this branch after splitting off?). This would also allow people to use the adapter provider crate in a git dependency.</p>\n<p>In any case, this means we can add the git commit hash to the version info again :D</p>\n<blockquote>\n<p>cc @juntyr since this'll affect your work, would you be up for helping to explore an alternative solution that publishes the binaries we generate rather than checking in the generated binaries?</p>\n</blockquote>\n<p>Yes of course, I'm sorry for not fully anticipating the breakage caused by the adapter provider</p>\n</blockquote>",
        "id": 446003458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718945237
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#issuecomment-2182383750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>:</p>\n<blockquote>\n<p>At wasmCloud we maintain <code>wasmcloud-component-adapters</code> crate (<a href=\"https://docs.rs/wasmcloud-component-adapters/latest/wasmcloud_component_adapters/\">https://docs.rs/wasmcloud-component-adapters/latest/wasmcloud_component_adapters/</a>), which we generally update after each Wasmtime release and have a simple <a href=\"https://github.com/wasmCloud/wasmcloud-component-adapters/blob/351b02445c2d44cdc0dab31aae698b8f3bac28bf/build.rs\"><code>build.rs</code></a>, which fetches the adapter binaries from Wasmtime release page.<br>\nWould it be viable for Wasmtime to adopt a similar approach, where essentially the adapter URLs and hashes would simply be updated after each Wasmtime release?</p>\n</blockquote>",
        "id": 446044172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718962297
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#issuecomment-2182409634\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would it be viable for Wasmtime to adopt a similar approach, where essentially the adapter URLs and hashes would simply be updated after each Wasmtime release?</p>\n</blockquote>\n<p>That is incompatible with offline/network-isolated builds.</p>\n</blockquote>",
        "id": 446046773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718963261
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#issuecomment-2182518927\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Would it be viable for Wasmtime to adopt a similar approach, where essentially the adapter URLs and hashes would simply be updated after each Wasmtime release?</p>\n</blockquote>\n<p>That is incompatible with offline/network-isolated builds.</p>\n</blockquote>\n<p>We do actually build in an isolated (Nix) sandbox. The crate I mentioned manages the adapters using Nix and <code>build.rs</code> parses the resulting lockfile for hashes and URL. For building within Nix sandbox the paths to adapters are passed as env vars.</p>\n<p>This way in regular day-to-day dev environments the adapters are fetched once and cached in cargo cache. For isolated/offline builds they can be passed as env vars.</p>\n<p>I'm quite sure the crate release process could involve bundling the actual binary and uploading that to <a href=\"http://crates.io\">crates.io</a> as part of the crate, which would enable out-of-the-box offline builds at the cost of crate size. We did not have a need for it and did not do it</p>\n</blockquote>",
        "id": 446058015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718967311
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#issuecomment-2182518927\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Would it be viable for Wasmtime to adopt a similar approach, where essentially the adapter URLs and hashes would simply be updated after each Wasmtime release?</p>\n</blockquote>\n<p>That is incompatible with offline/network-isolated builds.</p>\n</blockquote>\n<p>We do actually build in an isolated (Nix) sandbox. The crate I mentioned manages the adapters using Nix and <code>build.rs</code> parses the resulting lockfile for hashes and URL. For building within Nix sandbox the paths to adapters are passed as env vars.</p>\n<p>This way in regular day-to-day dev environments the adapters are fetched once and cached in cargo cache. For isolated/offline builds they can be passed as env vars. Hashes of the binaries can then be verified at build time, regardless of whether they were fetched at build time or passed via env var</p>\n<p>I'm quite sure the crate release process could involve bundling the actual binary and uploading that to <a href=\"http://crates.io\">crates.io</a> as part of the crate, which would enable out-of-the-box offline builds at the cost of crate size. We did not have a need for it and did not do it</p>\n</blockquote>",
        "id": 446059094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718967728
    },
    {
        "content": "<p>juntyr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#issuecomment-2182658475\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>:</p>\n<blockquote>\n<p>I initially also just fetched the adapters from the release page using reqwest. However, having to compile reqwest as a build dependency, especially its HTTPS support, has made this approach non-workable in some of the build environments I need to support, to the point where I used <code>Command::new(\"wget\")</code> in my build script.</p>\n<p>The adapters are not large binary files and since they are cross-platform, I think baking them into a crate as const byte strings can be argued for (ideally, at some future point, the crate could just depend on the adapter directly with an artefact dependency).</p>\n<p>In any case, I hope that we can find an approach that keeps the provider crate as Rusty as possible and without heavy build dependencies.</p>\n</blockquote>",
        "id": 446072920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718972885
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#issuecomment-2182678777\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>:</p>\n<blockquote>\n<blockquote>\n<p>ideally, at some future point, the crate could just depend on the adapter directly with an artefact dependency</p>\n</blockquote>\n<p>As I understand it the adapter needs to be built with very specific compiler options as it may not contain a data segment. There is no way to guarantee this across rustc versions. As such the only way to guarantee a correct build of the adapter is by using the exact same rustc version and compiler flags as is done by wasmtime's CI. Artifact dependencies don't allow controlling the rustc version (it always matches the host compiler) and I'm not sure artifact dependencies allow controlling all flags we need (disabling incr comp, disabling all assertions and using opt-level=s)</p>\n</blockquote>",
        "id": 446075171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718973628
    },
    {
        "content": "<p>juntyr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#issuecomment-2182741623\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>ideally, at some future point, the crate could just depend on the adapter directly with an artefact dependency</p>\n</blockquote>\n<p>As I understand it the adapter needs to be built with very specific compiler options as it may not contain a data segment. There is no way to guarantee this across rustc versions. As such the only way to guarantee a correct build of the adapter is by using the exact same rustc version and compiler flags as is done by wasmtime's CI. Artifact dependencies don't allow controlling the rustc version (it always matches the host compiler) and I'm not sure artifact dependencies allow controlling all flags we need (disabling incr comp, disabling all assertions and using opt-level=s)</p>\n</blockquote>\n<p>Those are unfortunately the current limitations of artifact dependencies. What I wanted to express is that in an ideal future, the customised adapter compilation could be entirely expressed within cargo. At the moment, I agree that publishing a prebuilt adapter binary that is compiled and checked with these specific flags is needed and better.</p>\n</blockquote>",
        "id": 446082128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718975986
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856#issuecomment-2182798604\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do we need to fully remove the WASM binaries from the repo? If so, what do we do with the adapter provider crate? </p>\n</blockquote>\n<p>I haven't thought through this too too much but my thinking is we should remove binaries yeah. If we can't check on CI that they're what you'd get building locally then we don't want checked-in artifacts to the repo as it's too easy for things to get out of sync and cause headaches. I also agree that no matter what we do here it's going to render git dependencies inoperable and this would only really be suitable for crates.io-based dependencies.</p>\n<p>My rough idea is that we'd have something like <code>Cargo.toml.in</code> somewhere in the repo which is checked on CI that it can produce a workable crate at any time and part of the publication step is to do that and then run <code>cargo publish</code>, probably outside of the <code>publish.rs</code> build script. The tricky part here is going to be orchestrating this in a way that's unlikely to fail since no one's going to touch this for a long time and it's not going to be trivial to reproduce locally. That being said I think it's possible because it's a crate that has zero dependencies and doesn't need to be part of the workspace, so for example having an extra step in CI that downloads the adapter artifacts and runs <code>cargo package</code> without <code>cargo publish</code> should be good enough (and then the publish-on-tag would run the actual <code>cargo publish</code>)</p>\n<blockquote>\n<p>Yes of course, I'm sorry for not fully anticipating the breakage caused by the adapter provider</p>\n</blockquote>\n<p>Not your fault at all! I tried to predict issues like this too and I wasn't able to see this coming, so this is just a natural development cycle as we figure out the true consequences of our actions heh.</p>\n</blockquote>",
        "id": 446087781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718977921
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>.</p>",
        "id": 446092371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718979399
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>.</p>",
        "id": 446092373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718979399
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>.</p>",
        "id": 446092374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718979399
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>.</p>",
        "id": 446092397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718979406
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8856\">PR #8856</a>.</p>",
        "id": 446096664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718980791
    }
]