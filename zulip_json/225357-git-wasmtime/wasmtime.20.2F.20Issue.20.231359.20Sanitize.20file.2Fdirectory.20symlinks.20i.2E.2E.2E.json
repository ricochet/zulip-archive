[
    {
        "content": "<p>marmistrz <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-601052486\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-601052486\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<p>Do you have any idea if we can add any regression test here?</p>\n</blockquote>",
        "id": 191082343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584606817
    },
    {
        "content": "<p>marmistrz edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-601052486\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-601052486\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<p>Do you have any idea if we can add any regression test here? We'd probably need to invoke some low-level Windows API, I think.</p>\n</blockquote>",
        "id": 191082365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584606838
    },
    {
        "content": "<p>marmistrz <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603221223\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603221223\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<p>@sunfishcode @kubkon ping, can you please review the change?</p>\n</blockquote>",
        "id": 191604418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585054444
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603507729\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603507729\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<p>The patch looks reasonable within the current WASI API.</p>\n<p>What should we do in WASI itself here? One option I'm thinking about is to replace WASI's <code>symlink</code> function with <code>symlink_file</code> and <code>symlink_directory</code>, and moving the logic for deciding which one to use into WASI libc. That way, POSIX applications would get the same behavior, but it would allow other users to avoid \"automatically pick which one or guess\" if they wanted to. Thoughts?</p>\n</blockquote>",
        "id": 191673103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585084395
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603826364\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603826364\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<blockquote>\n<p>The patch looks reasonable within the current WASI API.</p>\n<p>What should we do in WASI itself here? One option I'm thinking about is to replace WASI's <code>symlink</code> function with <code>symlink_file</code> and <code>symlink_directory</code>, and moving the logic for deciding which one to use into WASI libc. That way, POSIX applications would get the same behavior, but it would allow other users to avoid \"automatically pick which one or guess\" if they wanted to. Thoughts?</p>\n</blockquote>\n<p>FWIW, I think that this is the best way to go <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n</blockquote>",
        "id": 191740359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585141408
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603837981\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603837981\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>This issue or pull request has been labeled: \"wasi\"</p>\n<p>&lt;details&gt; &lt;summary&gt;Users Subscribed to \"wasi\"&lt;/summary&gt;</p>\n<ul>\n<li>@kubkon</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a></p>\n</blockquote>",
        "id": 191743372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585142772
    },
    {
        "content": "<p>marmistrz <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603858303\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603858303\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<p>I'm not quite sure if it's a good idea.</p>\n<p>Such API change will make it non-trivial to compile POSIX programs to WASM and run them on Windows. Suppose with have a program written for Linux using <code>symlink(2)</code>. Should such call be translated to <code>symlink_dir</code> or <code>symlink_file</code>? I think that a WASM counterpart of this shell script should continue to work under WASM on Windows:</p>\n<div class=\"codehilite\"><pre><span></span>touch foo\nmkdir bar\nln -s bar baz # directory symlink should be inferred\nln -s foo fuz # file symlink should be inferred\n</pre></div>\n\n\n<p>Instead, we could allow an optional hint argument to <code>path_symlink</code>, for instance a: 0x0 - no hint, 0x1 - file, 0x2 - directory. <br>\nIt's not clear what we should do if a dangling symlink without a hint is requested. We could either (a) fall back to file symlinks (b) check if the target exists and return <code>EINVAL</code> if it doesn't.</p>\n</blockquote>",
        "id": 191749422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585145133
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603862475\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603862475\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm not quite sure if it's a good idea.</p>\n<p>Such API change will make it non-trivial to compile POSIX programs to WASM and run them on Windows. Suppose with have a program written for Linux using <code>symlink(2)</code>. Should such call be translated to <code>symlink_dir</code> or <code>symlink_file</code>? I think that a WASM counterpart of this shell script should continue to work under WASM on Windows:</p>\n<p><code>\ntouch foo\nmkdir bar\nln -s bar baz # directory symlink should be inferred\nln -s foo fuz # file symlink should be inferred\n</code><br>\n</p>\n</blockquote>\n<p>Hmm, I don't think that's what @sunfishcode meant. While WASI embedder would have to provide two syscalls namely <code>symlink_file</code> and <code>symlink_dir</code>, WASI libc would offer <code>symlink(2)</code> which would at the libc level work out which syscall to use.</p>\n</blockquote>",
        "id": 191750652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585145603
    },
    {
        "content": "<p>marmistrz <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603876511\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603876511\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<blockquote>\n<p>Hmm, I don't think that's what @sunfishcode meant. While WASI embedder would have to provide two syscalls namely <code>symlink_file</code> and <code>symlink_dir</code>, WASI libc would offer <code>symlink(2)</code> which would at the libc level work out which syscall to use.</p>\n</blockquote>\n<p>Isn't wasi-libc eventually compiled to WebAssembly and doesn't it eventually become a part of the resulting wasm binary? With this solution we'd need different syscall selection logic depending on the OS used by the host executing the wasm binary.</p>\n</blockquote>",
        "id": 191754295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585147118
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603878615\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603878615\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Hmm, I don't think that's what @sunfishcode meant. While WASI embedder would have to provide two syscalls namely <code>symlink_file</code> and <code>symlink_dir</code>, WASI libc would offer <code>symlink(2)</code> which would at the libc level work out which syscall to use.</p>\n</blockquote>\n<p>Isn't wasi-libc eventually compiled to WebAssembly and doesn't it eventually become a part of the resulting wasm binary? With this solution we'd need different syscall selection logic depending on the OS used by the host executing the wasm binary.</p>\n</blockquote>\n<p>It is, but why would you need different logic at the WASI libc level? I assumed that the libc <code>symlink(2)</code> would first try delegating to <code>symlink_file</code> syscall implemented by the embedder, and if that fails, try <code>symlink_dir</code>, and if that fails, error out. Then, the host-dependent logic would be entirely encapsulated within the syscalls themselves. libc would then only rely on the return values to work out whether the call succeeded or not.</p>\n</blockquote>",
        "id": 191754870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585147335
    },
    {
        "content": "<p>marmistrz <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603909914\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603909914\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<blockquote>\n<p>It is, but why would you need different logic at the WASI libc level? I assumed that the libc <code>symlink(2)</code> would first try delegating to <code>symlink_file</code> syscall implemented by the embedder, and if that fails, try <code>symlink_dir</code>, and if that fails, error out. </p>\n</blockquote>\n<p>Why should <code>symlink_file</code> fail if the target is a directory? I have never managed to reproduce such behavior on Windows. I assume that the libc implementation will need to check the file type on Windows, as implemented in this patch.</p>\n</blockquote>",
        "id": 191764358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585150482
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603932838\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-603932838\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>It is, but why would you need different logic at the WASI libc level? I assumed that the libc <code>symlink(2)</code> would first try delegating to <code>symlink_file</code> syscall implemented by the embedder, and if that fails, try <code>symlink_dir</code>, and if that fails, error out.</p>\n</blockquote>\n<p>Why should <code>symlink_file</code> fail if the target is a directory? I have never managed to reproduce such behavior on Windows. I assume that the libc implementation will need to check the file type on Windows, as implemented in this patch.</p>\n</blockquote>\n<p>Oh sorry, what I meant is that both <code>symlink_file</code> and <code>symlink_dir</code> would perform whatever checks are required to determine if creating this type of symlink on the host is valid or not for the given entities. In essence, the logic of <code>path_symlink</code> in this PR would be preserved but split into two separate calls. This way, libc's <code>symlink</code> would simpy check the return values to work out if it succeeded or not, and would be host-independent.</p>\n</blockquote>",
        "id": 191771215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585152751
    },
    {
        "content": "<p>marmistrz <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-604019670\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-604019670\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<p>Hmmm, but then, shouldn't we require the implementation of <code>symlink_file</code> on Linux to check if we actually have a file, so that the use of <code>symlink_file</code> is what intuition suggests?</p>\n</blockquote>",
        "id": 191793808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585162046
    },
    {
        "content": "<p>marmistrz <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-605602644\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-605602644\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<p>My suggestion is that we:</p>\n<ul>\n<li>remove the possibly unnecessary checks (as done in 0d3a173), since we don't see any cases which they account for</li>\n<li>merge the change as-is and create a separate issue in WebAssembly/WASI to discuss possible API changes (unless there are some changes in the code to be addressed)</li>\n</ul>\n</blockquote>",
        "id": 192162910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585470250
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-607070034\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#issuecomment-607070034\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">Issue #1359</a>:</p>\n<blockquote>\n<blockquote>\n<p>My suggestion is that we:</p>\n<div class=\"codehilite\"><pre><span></span>* remove the possibly unnecessary checks (as done in [0d3a173](https://github.com/bytecodealliance/wasmtime/commit/0d3a17331f8b98c026805003a4973ccbf3b89696)), since we don&#39;t see any cases which they account for\n\n* merge the change as-is and create a separate issue in WebAssembly/WASI to discuss possible API changes (unless there are some changes in the code to be addressed)\n</pre></div>\n\n\n</blockquote>\n<p>Sounds good!</p>\n</blockquote>",
        "id": 192489229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585724137
    }
]