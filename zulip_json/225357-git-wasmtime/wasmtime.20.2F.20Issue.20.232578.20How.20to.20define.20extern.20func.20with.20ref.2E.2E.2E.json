[
    {
        "content": "<p>clearloop opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<h2>Desc</h2>\n<p>Here I'm trying to define the <code>HostFuncType&lt;T&gt;</code> below as extern functions in <code>wasmtime</code>, but I don't know how to handle the <code>&amp;mut T</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">HostFuncType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ReturnValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HostError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It might be possible using <code>ExternRef&lt;Arc&lt;RefCell&lt;T&gt;&gt;&gt;</code> instead to do something like this, but if there is any solution can pass the <code>&amp;mut T</code> without get/set memory directly?</p>\n</blockquote>",
        "id": 222585073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610547446
    },
    {
        "content": "<p>clearloop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<h2>Desc</h2>\n<p>Here I'm trying to define the <code>HostFuncType&lt;T&gt;</code> below as extern functions in <code>wasmtime</code>, but I don't know how to handle the <code>&amp;mut T</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">HostFuncType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ReturnValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HostError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It might be possible using <code>ExternRef&lt;Arc&lt;RefCell&lt;T&gt;&gt;&gt;</code> instead to do something like this, but if there is any solution can pass the <code>&amp;mut T</code> without get/set memory directly?</p>\n</blockquote>",
        "id": 222585250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610547506
    },
    {
        "content": "<p>clearloop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<h2>Desc</h2>\n<p>Here I'm trying to define the <code>HostFuncType&lt;T&gt;</code> below as extern functions in <code>wasmtime</code>, but I don't know how to handle the <code>&amp;mut T</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">HostFuncType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ReturnValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HostError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It might be possible using <code>ExternRef&lt;Arc&lt;RefCell&lt;T&gt;&gt;&gt;</code> instead to do something like this, but if there is any solution can pass the <code>&amp;mut T</code> without breaking the arguments of the <code>HostFuncType&lt;T&gt;</code> or get/set memory directly?</p>\n</blockquote>",
        "id": 222585360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610547554
    },
    {
        "content": "<p>clearloop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<h2>Desc</h2>\n<p>Here I'm trying to define the <code>HostFuncType&lt;T&gt;</code> below as extern functions in <code>wasmtime</code>, but I don't know how to handle the <code>&amp;mut T</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">HostFuncType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ReturnValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HostError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It might be possible using <code>ExternRef&lt;Arc&lt;RefCell&lt;T&gt;&gt;&gt;</code> instead of doing something like this, but if there is any solution can pass the <code>&amp;mut T</code> without breaking the arguments of the <code>HostFuncType&lt;T&gt;</code> or get/set memory directly?</p>\n</blockquote>",
        "id": 222585410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610547578
    },
    {
        "content": "<p>clearloop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<h2>Desc</h2>\n<p>Here I'm trying to define the <code>HostFuncType&lt;T&gt;</code> below as extern functions in <code>wasmtime</code>, but I don't know how to handle the <code>&amp;mut T</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">HostFuncType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ReturnValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HostError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It might be possible using <code>ExternRef&lt;Arc&lt;RefCell&lt;T&gt;&gt;&gt;</code> instead of doing something like this, but if there is any solution can pass the <code>&amp;mut T</code> without breaking the arguments of the <code>HostFuncType&lt;T&gt;</code>?</p>\n</blockquote>",
        "id": 222587375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610548334
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759516126\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Thanks for the report! Can you clarify what you're trying to do, however? Host functions are generally defined with the <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Func.html\"><code>Func</code></a> type, which should have a number of examples on it as well. Are you unsure on how to create a <code>Func</code>, though?</p>\n</blockquote>",
        "id": 222595504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610551091
    },
    {
        "content": "<p>clearloop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759522072\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Thanks for your relying @alexcrichton ~</p>\n<blockquote>\n<p>Thanks for the report! Can you clarify what you're trying to do, however? Host functions are generally defined with the <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Func.html\"><code>Func</code></a> type, which should have a number of examples on it as well. Are you unsure on how to create a <code>Func</code>, though?</p>\n</blockquote>\n<p>Yep,  I'm trying to implement a <code>Func</code> like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">my_host_func</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_extern_host_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">]</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">my_host_func</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">my_extern_host_func</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">//...</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 222596975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610551638
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759524830\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>When using <code>&amp;[Val]</code> you'll want to use <code>Func::new</code>, and <code>state: &amp;mut T</code> can't be given to you from wasm, so it can't be a parameter in the closure passed to <code>Func::wrap</code>. What you can do, however, is close over the <code>state</code> in the closure you provide to <code>Func::wrap</code>. If you need mutable access you'll need to use something like <code>RefCell</code> to account for the possibility that your closure is invoked recursively.</p>\n</blockquote>",
        "id": 222597722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610551879
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759522072\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Thanks for your relying @alexcrichton ~</p>\n<blockquote>\n<p>Thanks for the report! Can you clarify what you're trying to do, however? Host functions are generally defined with the <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Func.html\"><code>Func</code></a> type, which should have a number of examples on it as well. Are you unsure on how to create a <code>Func</code>, though?</p>\n</blockquote>\n<p>Yep,  I'm trying to implement a <code>Func</code> like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">my_host_func</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_extern_host_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">]</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">my_host_func</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">my_extern_host_func</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">//...</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I can handle this in <code>wasmi</code> easily because the <code>invoke</code> methods of functions in <code>wasmi</code> always comes with <code>external: &amp;mut T</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">invoke</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Externals</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">func</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">FuncRef</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">RuntimeValue</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">externals</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">RuntimeValue</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Trap</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_function_args</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">signature</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">as_internal</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">FuncInstanceInternal</span>::<span class=\"n\">Internal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">interpreter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Interpreter</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">interpreter</span><span class=\"p\">.</span><span class=\"n\">start_execution</span><span class=\"p\">(</span><span class=\"n\">externals</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">FuncInstanceInternal</span>::<span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">host_func_index</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">..</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">externals</span><span class=\"p\">.</span><span class=\"n\">invoke_index</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">host_func_index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 222597795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610551908
    },
    {
        "content": "<p>clearloop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759533170\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<blockquote>\n<p>When using <code>&amp;[Val]</code> you'll want to use <code>Func::new</code>, and <code>state: &amp;mut T</code> can't be given to you from wasm, so it can't be a parameter in the closure passed to <code>Func::wrap</code>. What you can do, however, is close over the <code>state</code> in the closure you provide to <code>Func::wrap</code>. If you need mutable access you'll need to use something like <code>RefCell</code> to account for the possibility that your closure is invoked recursively.</p>\n</blockquote>\n<p>Thanks! </p>\n<p>At least I'm certain about I can't pass <code>state</code> as a parameter now, I'll try to move <code>state</code> into the closure, afraid of not using <code>state</code> as a parameter, functions implemented in wasm could not recognize the signature of the host functions.</p>\n<p>I'll do more practice and close this issue as I implement it.</p>\n<p>Ref to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1678\">https://github.com/bytecodealliance/wasmtime/issues/1678</a></p>\n</blockquote>",
        "id": 222599903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610552634
    },
    {
        "content": "<p>clearloop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of making a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>?</p>\n</blockquote>",
        "id": 222676961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610595584
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p><del>Is there any example of making a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>?</del></p>\n</blockquote>",
        "id": 222678377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610597481
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of making a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>?</p>\n</blockquote>",
        "id": 222679921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610599831
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>?</p>\n</blockquote>",
        "id": 222679926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610599840
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code> without using <code>Func::new</code>?</p>\n</blockquote>",
        "id": 222692787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610614971
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code> without using <code>Func::new</code>? Just find that <code>Func::new</code> requires <code>Fn</code> which can not use variables from the environment.</p>\n</blockquote>",
        "id": 222694273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610616084
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>? Just find that both <code>Func::new</code> and <code>Func::wrap</code> require <code>Fn</code> which can not use variables from the environment. How could I move the <code>RefCell&lt;T&gt;</code> into closure?</p>\n</blockquote>",
        "id": 222694425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610616236
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>? Just find that both <code>Func::new</code> and <code>Func::wrap</code> require <code>'static</code> which can not move variables from the environment easily.</p>\n</blockquote>",
        "id": 222694887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610616459
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>? Just find that both <code>Func::new</code> and <code>Func::wrap</code> require <code>'static</code> which can not move variables from the environment easily.</p>\n<p>Could <code>Store</code> offer a generic type filed for holding the state of host functions?</p>\n</blockquote>",
        "id": 222695341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610616819
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>? Just find that both <code>Func::new</code> and <code>Func::wrap</code> require <code>'static</code> which can not move variables from the environment easily.</p>\n<p>Could <code>Store</code> offer a generic type field for holding the state of host functions?</p>\n</blockquote>",
        "id": 222695358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610616831
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>? Just find that both <code>Func::new</code> and <code>Func::wrap</code> require <code>'static</code> which can not move variables from the environment into them easily.</p>\n<p>Could <code>Store</code> offer a generic type field for holding the state of host functions?</p>\n</blockquote>",
        "id": 222696280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610617528
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>? Just find that both <code>Func::new</code> and <code>Func::wrap</code> require <code>'static</code> which can not move variables from the environment into them easily.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0525</span><span class=\"p\">]</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Fn</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnOnce</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">primitives</span><span class=\"o\">/</span><span class=\"n\">sandbox</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">imp</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">67</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">67</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">]</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnOnce</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Fn</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">77</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">inner_args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                          </span><span class=\"o\">-----</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnOnce</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">moves</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">state</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_sig</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">---------</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requirement</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Fn</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">derives</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Could <code>Store</code> offer a generic type field for holding the state of host functions?</p>\n</blockquote>",
        "id": 222696702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610617813
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">HostFuncTypeA</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ReturnValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">HostError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wrap_fn_test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">state</span>: <span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>: <span class=\"nc\">HostFuncTypeA</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig</span>: <span class=\"nc\">FunctionType</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let state_mut = state as *mut T;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">]</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">inner_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_val</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">inner_args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"Could not wrap host function\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">inner_args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_ret_val</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ret</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"Could not wrap host function\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// return Err(Trap::new(\"Could not wrap host function\"));</span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_sig</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>? Just find that both <code>Func::new</code> and <code>Func::wrap</code> require <code>'static</code> which can not move variables from the environment into them easily.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0525</span><span class=\"p\">]</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Fn</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnOnce</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">primitives</span><span class=\"o\">/</span><span class=\"n\">sandbox</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">imp</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">67</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">67</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">]</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnOnce</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Fn</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">77</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">inner_args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                          </span><span class=\"o\">-----</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnOnce</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">moves</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">state</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_sig</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">---------</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requirement</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Fn</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">derives</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Could <code>Store</code> offer a generic type field for holding the state of host functions?</p>\n</blockquote>",
        "id": 222696774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610617873
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759904879\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">HostFuncTypeA</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ReturnValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">HostError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wrap_fn_test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">state</span>: <span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>: <span class=\"nc\">HostFuncTypeA</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig</span>: <span class=\"nc\">FunctionType</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let state_mut = state as *mut T;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">]</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">inner_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_val</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">inner_args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"Could not wrap host function\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">inner_args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_ret_val</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ret</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"Could not wrap host function\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// return Err(Trap::new(\"Could not wrap host function\"));</span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_sig</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there any example of converting a function with <code>&amp;[Val]</code> as parameters into a <code>Func</code>? Just find that both <code>Func::new</code> and <code>Func::wrap</code> require <code>'static</code> which can not move variables from the environment into them easily.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0525</span><span class=\"p\">]</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Fn</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnOnce</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">primitives</span><span class=\"o\">/</span><span class=\"n\">sandbox</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">imp</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">67</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">67</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">]</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnOnce</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Fn</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">77</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">inner_args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                          </span><span class=\"o\">-----</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnOnce</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">moves</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">state</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_sig</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">---------</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requirement</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Fn</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">derives</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or some errors like</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0310</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">parameter</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">T</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 222700297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610620163
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-760275480\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>In tthis case <code>HostFuncTypeA</code> will need to take <code>&amp;RefCell&lt;T&gt;</code>, not a by-value version.</p>\n</blockquote>",
        "id": 222734010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610638651
    },
    {
        "content": "<p>clearloop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-760280154\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<blockquote>\n<p>In tthis case <code>HostFuncTypeA</code> will need to take <code>&amp;RefCell&lt;T&gt;</code>, not a by-value version.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0621</span><span class=\"p\">]</span>: <span class=\"nc\">explicit</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">state</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">primitives</span><span class=\"o\">/</span><span class=\"n\">sandbox</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">imp</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">93</span>:<span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">            </span><span class=\"o\">-----------</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">add</span><span class=\"w\"> </span><span class=\"n\">explicit</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">state</span><span class=\"err\">`</span>: <span class=\"err\">`</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">93</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_sig</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If use <code>&amp;RefCell</code>, it will require <code>'static</code>, I'm not sure if this situation is possible, not sure about if I have to add <code>'static</code> to <code>T</code>.</p>\n</blockquote>",
        "id": 222735267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610639098
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-760280154\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<blockquote>\n<p>In this case <code>HostFuncTypeA</code> will need to take <code>&amp;RefCell&lt;T&gt;</code>, not a by-value version.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0621</span><span class=\"p\">]</span>: <span class=\"nc\">explicit</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">state</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">primitives</span><span class=\"o\">/</span><span class=\"n\">sandbox</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">imp</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">93</span>:<span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">            </span><span class=\"o\">-----------</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">add</span><span class=\"w\"> </span><span class=\"n\">explicit</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">state</span><span class=\"err\">`</span>: <span class=\"err\">`</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">93</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_sig</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If using <code>&amp;RefCell</code>, it will require <code>'static</code>, I'm not sure if this situation is possible, not sure about if I have to add <code>'static</code> to <code>T</code>.</p>\n<p>Thanks for your reply @alexcrichton~ I know there might be some problems in my implementation, I just can't figure out how to make it work, I have stuck at this point for 1 week then : (</p>\n</blockquote>",
        "id": 222735829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610639301
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-760280154\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<blockquote>\n<p>In this case <code>HostFuncTypeA</code> will need to take <code>&amp;RefCell&lt;T&gt;</code>, not a by-value version.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0621</span><span class=\"p\">]</span>: <span class=\"nc\">explicit</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">state</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">primitives</span><span class=\"o\">/</span><span class=\"n\">sandbox</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">imp</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">93</span>:<span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">            </span><span class=\"o\">-----------</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">add</span><span class=\"w\"> </span><span class=\"n\">explicit</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">state</span><span class=\"err\">`</span>: <span class=\"err\">`</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">93</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_sig</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If using <code>&amp;RefCell</code>, it will require <code>'static</code>, I'm not sure if this situation is possible, not sure about if I have to add <code>'static</code> to <code>T</code>.</p>\n<p>Thanks for your reply @alexcrichton~ I know there might be some problems in my implementation, I just can't figure out how to make it work, I have stuck at this point for 1 week then : (</p>\n<hr>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">HostFuncTypeA</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ReturnValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">HostError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wrap_fn_test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>: <span class=\"nc\">HostFuncTypeA</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig</span>: <span class=\"nc\">FunctionType</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let state_mut = state as *mut T;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">]</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">inner_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_val</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">inner_args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"Could not wrap host function\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">inner_args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_ret_val</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"Could not wrap host function\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_sig</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It could be compiled like this, but if I have to use <code>'static</code>?</p>\n</blockquote>",
        "id": 222736573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610639589
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759533170\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<blockquote>\n<p>When using <code>&amp;[Val]</code> you'll want to use <code>Func::new</code>, and <code>state: &amp;mut T</code> can't be given to you from wasm, so it can't be a parameter in the closure passed to <code>Func::wrap</code>. What you can do, however, is close over the <code>state</code> in the closure you provide to <code>Func::wrap</code>. If you need mutable access you'll need to use something like <code>RefCell</code> to account for the possibility that your closure is invoked recursively.</p>\n</blockquote>\n<p>Thanks! </p>\n<p>At least I'm certain about I can't pass <code>state</code> as a parameter now, I'll try to move <code>state</code> into the closure, afraid of not using <code>state</code> as a parameter, functions implemented in wasm could not recognize the signature of the host functions.</p>\n<p>I'll do more practice and close this issue as I implement it.</p>\n<p>Ref to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1678\">https://github.com/bytecodealliance/wasmtime/issues/1678</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2491\">https://github.com/bytecodealliance/wasmtime/issues/2491</a></p>\n</blockquote>",
        "id": 222741510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610641375
    },
    {
        "content": "<p>clearloop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-760321579\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Just got an example following #2491, <a href=\"https://github.com/chifflier/suricata/blob/295091c2e6598e84519d92b87dbe24d31c5fd070/rust/src/wasm/runtime_util.rs\">https://github.com/chifflier/suricata/blob/295091c2e6598e84519d92b87dbe24d31c5fd070/rust/src/wasm/runtime_util.rs</a>, but using <code>Func::wrap()</code></p>\n</blockquote>",
        "id": 222745716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610643037
    },
    {
        "content": "<p>clearloop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-760622252\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<p>Closing this because I'm certain about the problem in my implementation is not a wasmtime problem now.</p>\n</blockquote>",
        "id": 222816102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610681472
    },
    {
        "content": "<p>clearloop closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<h2>Desc</h2>\n<p>Here I'm trying to define the <code>HostFuncType&lt;T&gt;</code> below as extern functions in <code>wasmtime</code>, but I don't know how to handle the <code>&amp;mut T</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">HostFuncType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ReturnValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HostError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It might be possible using <code>ExternRef&lt;Arc&lt;RefCell&lt;T&gt;&gt;&gt;</code> instead of doing something like this, but if there is any solution can pass the <code>&amp;mut T</code> without breaking the arguments of the <code>HostFuncType&lt;T&gt;</code>?</p>\n</blockquote>",
        "id": 222816103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610681472
    },
    {
        "content": "<p>clearloop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578#issuecomment-759533170\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">Issue #2578</a>:</p>\n<blockquote>\n<blockquote>\n<p>When using <code>&amp;[Val]</code> you'll want to use <code>Func::new</code>, and <code>state: &amp;mut T</code> can't be given to you from wasm, so it can't be a parameter in the closure passed to <code>Func::wrap</code>. What you can do, however, is close over the <code>state</code> in the closure you provide to <code>Func::wrap</code>. If you need mutable access you'll need to use something like <code>RefCell</code> to account for the possibility that your closure is invoked recursively.</p>\n</blockquote>\n<p>Thanks! </p>\n<p>At least I'm certain about I can't pass <code>state</code> as a parameter now, I'll try to move <code>state</code> into the closure, afraid of not using <code>state</code> as a parameter, functions implemented in wasm could not recognize the signature of the host functions.</p>\n<p>I'll do more practice and close this issue as I implement it.</p>\n<p>Ref to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1678\">https://github.com/bytecodealliance/wasmtime/issues/1678</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2491\">https://github.com/bytecodealliance/wasmtime/issues/2491</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">https://github.com/bytecodealliance/wasmtime/issues/2159</a></p>\n</blockquote>",
        "id": 222823938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610692016
    }
]