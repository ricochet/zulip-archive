[
    {
        "content": "<p>SingleAccretion opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>Reproduction:</p>\n<p>1) Obtain <code>wasmtime.exe</code> from the released artifacts. You will also need LLDB.<br>\n2) Run: <code>lldb wasmtime -Ddebug-info -Oopt-level=0 &lt;any WASM file with debug info&gt;</code>.<br>\n3) Place a breakpoint on any WASM frame.<br>\n4) Execute <code>p __vmctx-&gt;set()</code>.</p>\n<p>Expected result: it works.<br>\nActual result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Couldn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">look</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">set_vmctx_memory_27_0_0</span>\n</code></pre></div>\n<p>This is because the symbol is not present anywhere visible to LLDB. On Unix-likes it will be in the symbol table, which Windows doesn't have.</p>\n<p><code>(lldb) image dump symtab wasmtime.exe</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Symtab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"err\">\\</span><span class=\"n\">Wasmtime</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_symbols</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span>\n<span class=\"w\">               </span><span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">|</span><span class=\"n\">Synthetic</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">||</span><span class=\"n\">Externally</span><span class=\"w\"> </span><span class=\"n\">Visible</span>\n<span class=\"w\">               </span><span class=\"o\">|||</span>\n<span class=\"n\">Index</span><span class=\"w\">   </span><span class=\"n\">UserID</span><span class=\"w\"> </span><span class=\"n\">DSX</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\">            </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"o\">/</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"w\">       </span><span class=\"n\">Size</span><span class=\"w\">               </span><span class=\"n\">Flags</span><span class=\"w\">      </span><span class=\"n\">Name</span>\n<span class=\"o\">-------</span><span class=\"w\"> </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"o\">---------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">----------</span><span class=\"w\"> </span><span class=\"o\">----------------------------------</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141b396c0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f9b996c0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000005fb8</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_descriptor</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141158dc0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f91b8dc0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000161ec0</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_register_code</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 483973432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732302293
    },
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>Reproduction:</p>\n<p>1) Obtain <code>wasmtime.exe</code> from the released artifacts. You will also need LLDB.<br>\n2) Run: <code>lldb wasmtime -Ddebug-info -Oopt-level=0 &lt;any WASM file with debug info&gt;</code>.<br>\n3) Place a breakpoint on any WASM frame.<br>\n4) Execute <code>p __vmctx-&gt;set()</code>.</p>\n<p>Expected result: it works.<br>\nActual result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Couldn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">look</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">set_vmctx_memory_27_0_0</span>\n</code></pre></div>\n<p>This is because the symbol is not present anywhere visible to LLDB. On Unix-likes it will be in the symbol table, which Windows doesn't have.</p>\n<p><code>(lldb) image dump symtab wasmtime.exe</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Symtab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"err\">\\</span><span class=\"n\">Wasmtime</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_symbols</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span>\n<span class=\"w\">               </span><span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">|</span><span class=\"n\">Synthetic</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">||</span><span class=\"n\">Externally</span><span class=\"w\"> </span><span class=\"n\">Visible</span>\n<span class=\"w\">               </span><span class=\"o\">|||</span>\n<span class=\"n\">Index</span><span class=\"w\">   </span><span class=\"n\">UserID</span><span class=\"w\"> </span><span class=\"n\">DSX</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\">            </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"o\">/</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"w\">       </span><span class=\"n\">Size</span><span class=\"w\">               </span><span class=\"n\">Flags</span><span class=\"w\">      </span><span class=\"n\">Name</span>\n<span class=\"o\">-------</span><span class=\"w\"> </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"o\">---------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">----------</span><span class=\"w\"> </span><span class=\"o\">----------------------------------</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141b396c0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f9b996c0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000005fb8</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_descriptor</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141158dc0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f91b8dc0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000161ec0</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_register_code</span>\n</code></pre></div>\n<p>Of note is the fact that if you build wasmtime locally, this works fine because LLDB synthesizes symbols using wasmtime's PDB.</p>\n</blockquote>",
        "id": 483976022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732303385
    },
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>Reproduction:</p>\n<p>1) Obtain <code>wasmtime.exe</code> from the released artifacts. You will also need LLDB.<br>\n2) Run: <code>lldb wasmtime -Ddebug-info -Oopt-level=0 &lt;any WASM file with debug info&gt;</code>.<br>\n3) Place a breakpoint on any WASM frame.<br>\n4) Execute <code>p __vmctx-&gt;set()</code>.</p>\n<p>Expected result: it works.<br>\nActual result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Couldn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">look</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">set_vmctx_memory_27_0_0</span>\n</code></pre></div>\n<p>This is because the symbol is not present anywhere visible to LLDB. On Unix-likes it will be in the symbol table, which Windows doesn't have. And <code>#[export_name]</code> doesn't do anything for executables (<a href=\"https://github.com/rust-lang/rust/issues/84161\">https://github.com/rust-lang/rust/issues/84161</a>).</p>\n<p><code>(lldb) image dump symtab wasmtime.exe</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Symtab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"err\">\\</span><span class=\"n\">Wasmtime</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_symbols</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span>\n<span class=\"w\">               </span><span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">|</span><span class=\"n\">Synthetic</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">||</span><span class=\"n\">Externally</span><span class=\"w\"> </span><span class=\"n\">Visible</span>\n<span class=\"w\">               </span><span class=\"o\">|||</span>\n<span class=\"n\">Index</span><span class=\"w\">   </span><span class=\"n\">UserID</span><span class=\"w\"> </span><span class=\"n\">DSX</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\">            </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"o\">/</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"w\">       </span><span class=\"n\">Size</span><span class=\"w\">               </span><span class=\"n\">Flags</span><span class=\"w\">      </span><span class=\"n\">Name</span>\n<span class=\"o\">-------</span><span class=\"w\"> </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"o\">---------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">----------</span><span class=\"w\"> </span><span class=\"o\">----------------------------------</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141b396c0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f9b996c0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000005fb8</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_descriptor</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141158dc0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f91b8dc0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000161ec0</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_register_code</span>\n</code></pre></div>\n<p>Of note is the fact that if you build wasmtime locally, this works fine because LLDB synthesizes symbols using wasmtime's PDB.</p>\n</blockquote>",
        "id": 483984545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732306588
    },
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>Reproduction:</p>\n<p>1) Obtain <code>wasmtime.exe</code> from the released artifacts. You will also need LLDB.<br>\n2) Run: <code>lldb wasmtime -Ddebug-info -Oopt-level=0 &lt;any WASM file with debug info&gt;</code>.<br>\n3) Place a breakpoint on any WASM frame.<br>\n4) Execute <code>p __vmctx-&gt;set()</code>.</p>\n<p>Expected result: it works.<br>\nActual result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Couldn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">look</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">set_vmctx_memory_27_0_0</span>\n</code></pre></div>\n<p>This is because the symbol is not present anywhere visible to LLDB. On Unix-likes it will be in the symbol table, which Windows doesn't have. And <code>#[export_name]</code> doesn't do anything for executables (<a href=\"https://github.com/rust-lang/rust/issues/84161\">https://github.com/rust-lang/rust/issues/84161</a>).</p>\n<p><code>(lldb) image dump symtab wasmtime.exe</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Symtab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"err\">\\</span><span class=\"n\">Wasmtime</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_symbols</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span>\n<span class=\"w\">               </span><span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">|</span><span class=\"n\">Synthetic</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">||</span><span class=\"n\">Externally</span><span class=\"w\"> </span><span class=\"n\">Visible</span>\n<span class=\"w\">               </span><span class=\"o\">|||</span>\n<span class=\"n\">Index</span><span class=\"w\">   </span><span class=\"n\">UserID</span><span class=\"w\"> </span><span class=\"n\">DSX</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\">            </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"o\">/</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"w\">       </span><span class=\"n\">Size</span><span class=\"w\">               </span><span class=\"n\">Flags</span><span class=\"w\">      </span><span class=\"n\">Name</span>\n<span class=\"o\">-------</span><span class=\"w\"> </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"o\">---------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">----------</span><span class=\"w\"> </span><span class=\"o\">----------------------------------</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141b396c0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f9b996c0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000005fb8</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_descriptor</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141158dc0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f91b8dc0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000161ec0</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_register_code</span>\n</code></pre></div>\n<p>Of note is the fact that if you build wasmtime locally, this works fine because LLDB synthesizes symbols using wasmtime's PDB.</p>\n<p>I wonder if we could use the same mechanism that libcalls and use a (dynamically) relocatable DWARF DIE for the debug intrinsics with an explicit entry point address, instead of utilizing the platform-specific symbol lookup mechanisms.</p>\n</blockquote>",
        "id": 483984801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732306713
    },
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>Reproduction:</p>\n<p>1) Obtain <code>wasmtime.exe</code> from the released artifacts. You will also need LLDB.<br>\n2) Run: <code>lldb wasmtime -Ddebug-info -Oopt-level=0 &lt;any WASM file with debug info&gt;</code>.<br>\n3) Place a breakpoint on any WASM frame.<br>\n4) Execute <code>p __vmctx-&gt;set()</code>.</p>\n<p>Expected result: it works.<br>\nActual result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Couldn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">look</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">set_vmctx_memory_27_0_0</span>\n</code></pre></div>\n<p>This is because the symbol is not present anywhere visible to LLDB. On Unix-likes it will be in the symbol table, which Windows doesn't have. And <code>#[export_name]</code> doesn't do anything for executables (<a href=\"https://github.com/rust-lang/rust/issues/84161\">https://github.com/rust-lang/rust/issues/84161</a>).</p>\n<p><code>(lldb) image dump symtab wasmtime.exe</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Symtab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"err\">\\</span><span class=\"n\">Wasmtime</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_symbols</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span>\n<span class=\"w\">               </span><span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">|</span><span class=\"n\">Synthetic</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">||</span><span class=\"n\">Externally</span><span class=\"w\"> </span><span class=\"n\">Visible</span>\n<span class=\"w\">               </span><span class=\"o\">|||</span>\n<span class=\"n\">Index</span><span class=\"w\">   </span><span class=\"n\">UserID</span><span class=\"w\"> </span><span class=\"n\">DSX</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\">            </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"o\">/</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"w\">       </span><span class=\"n\">Size</span><span class=\"w\">               </span><span class=\"n\">Flags</span><span class=\"w\">      </span><span class=\"n\">Name</span>\n<span class=\"o\">-------</span><span class=\"w\"> </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"o\">---------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">----------</span><span class=\"w\"> </span><span class=\"o\">----------------------------------</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141b396c0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f9b996c0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000005fb8</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_descriptor</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141158dc0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f91b8dc0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000161ec0</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_register_code</span>\n</code></pre></div>\n<p>Of note is the fact that if you build wasmtime locally, this works fine because LLDB synthesizes symbols using wasmtime's PDB.</p>\n<p>I wonder if we could use the system mechanism that libcalls use via a (dynamically) relocatable DWARF DIE for the debug intrinsics with an explicit entry point address, instead of utilizing the platform-specific symbol lookup mechanisms.</p>\n</blockquote>",
        "id": 483984837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732306733
    },
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>Reproduction:</p>\n<p>1) Obtain <code>wasmtime.exe</code> from the released artifacts. You will also need LLDB.<br>\n2) Run: <code>lldb wasmtime -Ddebug-info -Oopt-level=0 &lt;any WASM file with debug info&gt;</code>.<br>\n3) Place a breakpoint on any WASM frame.<br>\n4) Execute <code>p __vmctx-&gt;set()</code>.</p>\n<p>Expected result: it works.<br>\nActual result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Couldn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">look</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">set_vmctx_memory_27_0_0</span>\n</code></pre></div>\n<p>This is because the symbol is not present anywhere visible to LLDB. On Unix-likes it will be in the symbol table, which Windows doesn't have. And <code>#[export_name]</code> doesn't do anything for executables (<a href=\"https://github.com/rust-lang/rust/issues/84161\">https://github.com/rust-lang/rust/issues/84161</a>).</p>\n<p><code>(lldb) image dump symtab wasmtime.exe</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Symtab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"err\">\\</span><span class=\"n\">Wasmtime</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_symbols</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span>\n<span class=\"w\">               </span><span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">|</span><span class=\"n\">Synthetic</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">||</span><span class=\"n\">Externally</span><span class=\"w\"> </span><span class=\"n\">Visible</span>\n<span class=\"w\">               </span><span class=\"o\">|||</span>\n<span class=\"n\">Index</span><span class=\"w\">   </span><span class=\"n\">UserID</span><span class=\"w\"> </span><span class=\"n\">DSX</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\">            </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"o\">/</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"w\">       </span><span class=\"n\">Size</span><span class=\"w\">               </span><span class=\"n\">Flags</span><span class=\"w\">      </span><span class=\"n\">Name</span>\n<span class=\"o\">-------</span><span class=\"w\"> </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"o\">---------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">----------</span><span class=\"w\"> </span><span class=\"o\">----------------------------------</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141b396c0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f9b996c0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000005fb8</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_descriptor</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141158dc0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f91b8dc0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000161ec0</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_register_code</span>\n</code></pre></div>\n<p>Of note is the fact that if you build wasmtime locally, this works fine because LLDB synthesizes symbols using wasmtime's PDB.</p>\n<p>I wonder if we could use the system mechanism that libcalls use via a (dynamically) relocatable DWARF DIE for the debug intrinsics with an explicit entry point address, instead of utilizing the platform-specific symbol lookup mechanisms.</p>\n<p>Edit: working on this...</p>\n</blockquote>",
        "id": 484101729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732401439
    },
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>Reproduction:</p>\n<p>1) Obtain <code>wasmtime.exe</code> from the released artifacts. You will also need LLDB.<br>\n2) Run: <code>lldb wasmtime -Ddebug-info -Oopt-level=0 &lt;any WASM file with debug info&gt;</code>.<br>\n3) Place a breakpoint on any WASM frame.<br>\n4) Execute <code>p __vmctx-&gt;set()</code>.</p>\n<p>Expected result: it works.<br>\nActual result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Couldn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">look</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">set_vmctx_memory_27_0_0</span>\n</code></pre></div>\n<p>This is because the symbol is not present anywhere visible to LLDB. On Unix-likes it will be in the symbol table, which Windows doesn't have. And <code>#[export_name]</code> doesn't do anything for executables (<a href=\"https://github.com/rust-lang/rust/issues/84161\">https://github.com/rust-lang/rust/issues/84161</a>).</p>\n<p><code>(lldb) image dump symtab wasmtime.exe</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Symtab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"err\">\\</span><span class=\"n\">Wasmtime</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_symbols</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span>\n<span class=\"w\">               </span><span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">|</span><span class=\"n\">Synthetic</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">||</span><span class=\"n\">Externally</span><span class=\"w\"> </span><span class=\"n\">Visible</span>\n<span class=\"w\">               </span><span class=\"o\">|||</span>\n<span class=\"n\">Index</span><span class=\"w\">   </span><span class=\"n\">UserID</span><span class=\"w\"> </span><span class=\"n\">DSX</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\">            </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"o\">/</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"w\">       </span><span class=\"n\">Size</span><span class=\"w\">               </span><span class=\"n\">Flags</span><span class=\"w\">      </span><span class=\"n\">Name</span>\n<span class=\"o\">-------</span><span class=\"w\"> </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"o\">---------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">----------</span><span class=\"w\"> </span><span class=\"o\">----------------------------------</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141b396c0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f9b996c0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000005fb8</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_descriptor</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141158dc0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f91b8dc0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000161ec0</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_register_code</span>\n</code></pre></div>\n<p>Of note is the fact that if you build wasmtime locally, this works fine because LLDB synthesizes symbols using wasmtime's PDB.</p>\n<p>I wonder if we could use the mechanism that libcalls use via a (dynamically) relocatable DWARF DIE for the debug intrinsics with an explicit entry point address, instead of utilizing the platform-specific symbol lookup mechanisms.</p>\n<p>Edit: working on this...</p>\n</blockquote>",
        "id": 484101840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732401599
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657#issuecomment-2498360029\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>Oh dear, thanks for finding this! I see you're working on this but wanted to leave a comment as well saying I like the idea of using the relocation phase for dwarf for this to avoid needing to deal with symbols <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 484333358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732549136
    },
    {
        "content": "<p>SingleAccretion <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657#issuecomment-2503954491\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>This has turned out to be a trickier problem than initially anticipated.</p>\n<p>The expression evaluator (in LLDB) evaluates expression by compiling them to C++ in a context of an AST rehydrated from DWARF. It means that even if the DWARF spec has many interesting facilities in it that could help solve this issue (e. g. <code>DW_TAG_entry_point</code>, <code>DW_AT_vtable_elem_location</code>), what we can actually use must be representable in C++ source, with just a little bit of wiggle room left with location descriptors.</p>\n<p>What I have experimented with then, is describing wasmtime's code in the generated DWARF by adding a small CU that describes the debug intrinsics with <code>low_pc/high_pc</code> ranges. It works, however, I don't think it is an acceptable solution because:<br>\n1) We can't describe the ranges faithfully (no way to know the length of Rust functions).<br>\n2) The generated CU may conflict with actual CUs generated by rustc on platforms where DWARF is the default DI format.</p>\n<p>A way to salvage this approach is to include generated trampolines that would <code>jmp</code> to the debug intrinsics into the overall module, but that would not be very satisfying.</p>\n<p>Another angle I explored is using virtual functions to bypass symbol names. However, that also won't work because LLDB hardcodes the assumption that a C++ class will have the vtable as the first field at a zero offset.</p>\n</blockquote>",
        "id": 484727844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732716041
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9657\">issue #9657</a>:</p>\n<blockquote>\n<p>Reproduction:</p>\n<p>1) Obtain <code>wasmtime.exe</code> from the released artifacts. You will also need LLDB.<br>\n2) Run: <code>lldb wasmtime -Ddebug-info -Oopt-level=0 &lt;any WASM file with debug info&gt;</code>.<br>\n3) Place a breakpoint on any WASM frame.<br>\n4) Execute <code>p __vmctx-&gt;set()</code>.</p>\n<p>Expected result: it works.<br>\nActual result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Couldn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">look</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">set_vmctx_memory_27_0_0</span>\n</code></pre></div>\n<p>This is because the symbol is not present anywhere visible to LLDB. On Unix-likes it will be in the symbol table, which Windows doesn't have. And <code>#[export_name]</code> doesn't do anything for executables (<a href=\"https://github.com/rust-lang/rust/issues/84161\">https://github.com/rust-lang/rust/issues/84161</a>).</p>\n<p><code>(lldb) image dump symtab wasmtime.exe</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Symtab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"err\">\\</span><span class=\"n\">Wasmtime</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_symbols</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span>\n<span class=\"w\">               </span><span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">|</span><span class=\"n\">Synthetic</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">               </span><span class=\"o\">||</span><span class=\"n\">Externally</span><span class=\"w\"> </span><span class=\"n\">Visible</span>\n<span class=\"w\">               </span><span class=\"o\">|||</span>\n<span class=\"n\">Index</span><span class=\"w\">   </span><span class=\"n\">UserID</span><span class=\"w\"> </span><span class=\"n\">DSX</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\">            </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"o\">/</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"w\">       </span><span class=\"n\">Size</span><span class=\"w\">               </span><span class=\"n\">Flags</span><span class=\"w\">      </span><span class=\"n\">Name</span>\n<span class=\"o\">-------</span><span class=\"w\"> </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"o\">---------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"o\">----------</span><span class=\"w\"> </span><span class=\"o\">----------------------------------</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141b396c0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f9b996c0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000005fb8</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_descriptor</span>\n<span class=\"p\">[</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\">            </span><span class=\"mh\">0x0000000141158dc0</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7f91b8dc0</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000161ec0</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"n\">__jit_debug_register_code</span>\n</code></pre></div>\n<p>Of note is the fact that if you build wasmtime locally, this works fine because LLDB synthesizes symbols using wasmtime's PDB.</p>\n<p>I wonder if we could use the mechanism that libcalls use via a (dynamically) relocatable DWARF DIE for the debug intrinsics with an explicit entry point address, instead of utilizing the platform-specific symbol lookup mechanisms.</p>\n<p>Edit: working on this...</p>\n</blockquote>",
        "id": 485706180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733172497
    }
]