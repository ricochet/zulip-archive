[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3469\">PR #3469</a>.</p>",
        "id": 258601758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634843847
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3469\">PR #3469</a> from <code>machbuffer-quadratic-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>Fixes #3468.</p>\n<p>If a program has many instances of the pattern \"goto next; next:\" in a<br>\nrow (i.e., no-op branches to the fallthrough address), the branch<br>\nsimplification in <code>MachBuffer</code> would remove them all, as expected.<br>\nHowever, in order to work correctly, the algorithm needs to track all<br>\nlabels that alias the current buffer tail, so that they can be adjusted<br>\nlater if another branch chomp occurs.</p>\n<p>When many thousands of this branch-to-next pattern occur, many thousands<br>\nof labels will reference the current buffer tail, and this list of<br>\nthousands of labels will be shuffled between the branch metadata struct<br>\nand the \"labels at tail\" struct as branches are appended and then<br>\nchomped immediately.</p>\n<p>It's possible that with smarter data structure design, we could somehow<br>\nshare the list of labels -- e.g., a single array of all labels, in order<br>\nthey are bound, with ranges of indices in this array used to represent<br>\nlists of labels (actually, that seems like a better design in general);<br>\nbut let's leave that to future optimization work.</p>\n<p>For now, we can avoid the quadratic behavior by just \"giving up\" if the<br>\nlist is too long; it's always valid to not optimize a branch. It is very<br>\nunlikely that the \"normal\" case will have more than 100 \"goto next\"<br>\nbranches in a row, so this should not have any perf impact; if it does,<br>\nwe will leave 1 out of every 100 such branches un-optimized in a long<br>\nsequence of thousands.</p>\n<p>This takes total compilation time down on my machine from ~300ms to<br>\n~72ms for the <code>foo.wasm</code> case in #3441. For reference, the old backend<br>\n(now removed), built from arbitrarily-chosen-1-year-old commit<br>\n<code>c7fcc344</code>, takes 158ms, so we're ~twice as fast, which is what I would<br>\nexpect.</p>\n<p>(This PR also switches a few <code>static</code>s to <code>const</code>s just above where I added<br>\na <code>const</code>, as s drive-by change.)</p>\n</blockquote>",
        "id": 258601760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634843848
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3469#discussion_r733984394\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to keep the last few declared labels and forget the oldest ones? That should keep branch simplification working for many <code>jmp next;next:</code> in a row I think.</p>\n</blockquote>",
        "id": 258603118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634844421
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3469#pullrequestreview-786115190\">PR review</a>.</p>",
        "id": 258603119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634844421
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3469#pullrequestreview-786120730\">PR review</a>.</p>",
        "id": 258603995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634844806
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3469#discussion_r733988512\">PR review comment</a>:</p>\n<blockquote>\n<p>Unfortunately, no, the algorithm is built on the invariant that we know all labels that alias the tail; and <code>labels_at_this_branch</code> is also necessarily complete because it is used to refill \"labels at tail\" when a branch is chomped.</p>\n<p>Also, the subtle bit here is that we're not actually forgetting <em>labels</em> directly, we're allowing a branch to be emitted; this means that the branch can no longer be chomped, so we can forget all the labels at the start of the branch, but only as a consequence of the top-level decision.</p>\n<p>I think that if we wanted to do better, the data-structure design mentioned in the commit message is probably the way to go, but that's a bit past my risk-vs-reward threshold right now for this (critical to correctness) code :-)</p>\n</blockquote>",
        "id": 258603996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634844806
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3469#pullrequestreview-786157056\">PR review</a>.</p>",
        "id": 258610095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634847315
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3469\">PR #3469</a>.</p>",
        "id": 258613365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634848661
    }
]