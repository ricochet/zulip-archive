[
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/rfcs/pull/5#issuecomment-736104826\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/5\">Issue #5</a>:</p>\n<blockquote>\n<p>@alexcrichton how awful would it be for <code>Config</code> to expose a method taking an <code>Arc&lt;dyn wasmtime_runtime::InstanceAllocator&gt;</code>? A complete non-starter?</p>\n<p>This asymmetry between the <code>InstanceAllocator</code> traits in <code>wasmtime</code> and <code>wasmtime-runtime</code> necessitate a back pointer from <code>wasmtime_runtime::Instance</code> to the allocator that created it so that the instance can call into the allocator upon deallocation of the <code>InstanceHandle</code>.  I would really like to see the back pointer removed.</p>\n<p>Having <code>Config</code> directly take the runtime trait would both simplify the code (i.e. no duplicated types in the <code>wasmtime</code> crate) and eliminate the problem because <code>Store</code> could use the runtime trait directly to deallocate the instance.</p>\n<p>This also means that if we open up the construction of <code>Instance</code> and <code>InstanceHandle</code> in the runtime so that instance allocators can be implemented in external crates, the Wasmtime API can use those implementations without introducing a wrapping type in the <code>wasmtime</code> crate.</p>\n</blockquote>",
        "id": 218358223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606776925
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/rfcs/pull/5#issuecomment-736108773\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/5\">Issue #5</a>:</p>\n<blockquote>\n<p>Heh I always start with the idea that anything is possible!</p>\n<p>More to the point though a move like that would basically just be about the costs. It would cost us in terms of stability that we would have to document that usage of the method is not covered under our semver stability promises. That's probably feasible to do since we don't expect every user to have to implement this? Especially if we can bundle \"common\" allocation strategies in the <code>wasmtime</code> crate which are covered under the semver rules.</p>\n<p>Other than that the only other alternative I can think of is to sync up on the code you've got and see if anyone else is struck with inspiration of how to not have the dependency</p>\n</blockquote>",
        "id": 218359188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606777542
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/rfcs/pull/5#issuecomment-736120998\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/5\">Issue #5</a>:</p>\n<blockquote>\n<p>It wouldn't solve the duplication issue, but would solve the API stability issues: we could create a <code>wasmtime-traits</code> crate that defines just the <code>InstanceAllocator</code> trait and necessary types (e.g. <code>InstanceRequest</code>) and say it has the same stability that the <code>wasmtime</code> crate does (even re-export it from <code>wasmtime</code>).</p>\n</blockquote>",
        "id": 218362067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606779612
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/rfcs/pull/5#issuecomment-736136417\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/5\">Issue #5</a>:</p>\n<blockquote>\n<p>What if we kept the sole <code>InstanceAllocator</code> trait in <code>wasmtime_runtime</code> where it would inherently be unstable (and thus implementors would know that their implementations are subject to breaks in <code>wasmtime_runtime</code>) but we would then consider <code>Config::with_instance_allocator</code> to itself be stable despite taking <code>Arc&lt;dyn wasmtime_runtime::InstanceAllocator&gt;</code> as an argument?  The <code>wasmtime</code> crate and any implementors of <code>InstanceAllocator</code> must agree on the definition anyway, right?</p>\n<p>The \"out of the box\" instance allocator implementations could be exported via the <code>wasmtime</code> crate and thus considered stable as their only public API surface are their constructors.</p>\n<p>We generally don't expect users to implement the trait themselves as it requires a lot of internal runtime understanding to do so, but we do want an easy mechanism for users to swap out the allocator implementations easily using the public Wasmtime API.</p>\n</blockquote>",
        "id": 218366193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606782345
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/5#issuecomment-736136417\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/5\">Issue #5</a>:</p>\n<blockquote>\n<p>What if we kept the sole <code>InstanceAllocator</code> trait in <code>wasmtime_runtime</code> where it would inherently be unstable (and thus implementors would know that their implementations are subject to breaks in <code>wasmtime_runtime</code>) but we would then consider <code>Config::with_instance_allocator</code> to itself be stable despite taking <code>Arc&lt;dyn wasmtime_runtime::InstanceAllocator&gt;</code> as an argument?  The <code>wasmtime</code> crate and any implementors of <code>InstanceAllocator</code> must agree on the definition anyway, right?</p>\n<p>The \"out of the box\" instance allocator implementations could be exported via the <code>wasmtime</code> crate and thus considered stable as their only public API surface are their constructors.</p>\n<p>We generally don't expect users to implement the trait themselves as it requires a lot of internal runtime understanding to do so, but we do want an easy mechanism for users to swap out the allocator implementations using the public Wasmtime API.</p>\n</blockquote>",
        "id": 218366425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606782484
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/rfcs/pull/5#issuecomment-736138231\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/5\">Issue #5</a>:</p>\n<blockquote>\n<p>If we don't expect anyone else to implement this trait, then we might as well make it an <code>enum</code> at the <code>wasmtime</code> API level, and not expose its guts, types, and implementation details. This would let us write the instance pool in its own (internal) crate, preserve API stability, and avoid duplicating types.</p>\n</blockquote>",
        "id": 218366618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606782633
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/5#issuecomment-736138231\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/5\">Issue #5</a>:</p>\n<blockquote>\n<p>If we don't expect anyone else to implement this trait, then we might as well make it an <code>enum InstanceAllocationStategy { Default, Pool }</code> at the <code>wasmtime</code> API level, and not expose its guts, types, and implementation details. This would let us write the instance pool in its own (internal) crate, preserve API stability, and avoid duplicating types.</p>\n</blockquote>",
        "id": 218366680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606782695
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/rfcs/pull/5#issuecomment-736139318\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/5\">Issue #5</a>:</p>\n<blockquote>\n<p>I can get behind that.  We could always extend any such enumeration for <code>Custom</code> if a trait is needed in the future.</p>\n</blockquote>",
        "id": 218366794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606782787
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/rfcs/pull/5#issuecomment-736181444\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/5\">Issue #5</a>:</p>\n<blockquote>\n<p>I've updated the RFC with an enum approach that hides the implementation details from the <code>wasmtime</code> crate.</p>\n</blockquote>",
        "id": 218374870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606790863
    }
]