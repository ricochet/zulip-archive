[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540#issuecomment-1196983195\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540\">issue #4540</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't necessarily like the unsafe aspect of emit_to_memory. It feels out of place in a crate that otherwise has no unsafe code: the details of putting the bytes where they are needed should be in the hands of the embedder. In my mind the ideal interface is to expose the machine code as a &amp;[u8] off of the MachCompileResult; this more closely mirrors reality (the struct owns the bytes as a Vec&lt;u8&gt;, and is a value representing the result of compilation, so this is just a projection of that part of the value) and feels more idiomatic.</p>\n</blockquote>\n<p>This is an artifact of the old way Cranelift worked before machinst. It was possible to calculate the size of the necessary buffer before actually emitting any bytes, so bytes could be emitted in place without requiring any reallocation. With machinst this is no longer the case. As such it should indeed expose an &amp;[u8] now IMHO.</p>\n<blockquote>\n<p>We have an accessor .compile_result() on the Context (this feels like a little thing, but methods are generally more obvious than public fields) that still returns an Option&lt;&amp;MachCompileResult&gt;; but more importantly,</p>\n</blockquote>\n<p>This one I don't necessarily agree with, but...</p>\n<blockquote>\n<p>We return a CodegenResult&lt;&amp;MachCompileResult&gt; from compile(). The CodeInfo (the current return value) is already accessible from the compile result object with .code_info(). This then enables something like: copy_into_jit_memory(ctx.compile(isa)?.machine_code()).</p>\n</blockquote>\n<p>...this one I definitely do agree with.</p>\n</blockquote>",
        "id": 291073206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658939447
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540#issuecomment-1197013343\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540\">issue #4540</a>:</p>\n<blockquote>\n<p>And while we're at it, I might bikeshed the struct type name <code>MachCompileResult</code> a bit. I came up with it when initially doing the machinst framework where types were often distinguished with the <code>Mach</code> prefix (<code>MachInst</code>, <code>MachBuffer</code>, ...) but IMHO it's a bit of an antipattern now. I also don't necessarily like <code>CompileResult</code> because it sounds more like the \"type alias of <code>Result</code> with a particular error type\" idiom. Maybe something like <code>CompiledCode</code> ?</p>\n</blockquote>",
        "id": 291075373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658940415
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540#issuecomment-1198198781\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540\">issue #4540</a>:</p>\n<blockquote>\n<p>Sounds great! I am hesitant when I hear <code>CompiledCode</code>: does it mean the final code mmapped to its final executable region, or the code with relocations? (and it's the latter)<br>\nNo obvious better name comes to mind, though. For instance, <code>CompiledPicCode</code> or <code>PicCode</code> aren't so self-explanatory, and the <code>Pic</code> bit is a topic for discussion. That's only a renaming and quite easy to change later, though, so I'll start with <code>CompiledCode</code> for this PR.</p>\n</blockquote>",
        "id": 291195938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659017607
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540#issuecomment-1198198781\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540\">issue #4540</a>:</p>\n<blockquote>\n<p>Sounds great! I am incertain when I hear <code>CompiledCode</code>: does it mean the final code mmapped to its final executable region, or the code with relocations? (and it's the latter)<br>\nNo obvious better name comes to mind, though. For instance, <code>CompiledPicCode</code> or <code>PicCode</code> aren't so self-explanatory, and the <code>Pic</code> bit is a topic for discussion. That's only a renaming and quite easy to change later, though, so I'll start with <code>CompiledCode</code> for this PR.</p>\n</blockquote>",
        "id": 291219701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659026578
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540#issuecomment-1201039670\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540\">issue #4540</a>:</p>\n<blockquote>\n<p>Implemented all the ideas mentioned here that would make this move forward. In particular, returning a ref to the compiled result from the <code>compile</code> funcs turned out a bit worse than anticipated in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540/commits/670dcab18c36b7ff4787ec1ef48d86db681b2e7a\">670dcab</a>, so we could decide to get rid of that instead.</p>\n<p>We have a common pattern in the code base of doing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span>: <span class=\"nc\">CodegenError</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pretty_anyhow_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mach_compile_result</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which becomes, with the naive change of just returning <code>&amp;MachCompileResult</code> from the <code>compile</code> function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span>: <span class=\"nc\">CodegenError</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pretty_anyhow_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but now, <code>ctx</code> is mutably borrowed even in the <code>map_err</code> function's body (because <code>result</code> is a reference into <code>ctx</code>'s fields), so borrowck says we can't immutably read <code>ctx.func</code> in the prettifier method.</p>\n<p>The solution I opted for was to have a thin wrapper for the <code>compile</code> functions, that contained both the <code>CodegenError</code> and the reference to the <code>Function</code> we're trying to compile, so this code becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span>: <span class=\"nc\">CompileError</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"n\">pretty_anyhow_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"cm\">/* the CodegenError */</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but that's a bit of cognitive overhead for relatively low-value, so would be happy to hear opinions if it's something we want to keep or not.</p>\n</blockquote>",
        "id": 291558193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659351221
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540#issuecomment-1201039670\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540\">issue #4540</a>:</p>\n<blockquote>\n<p>Implemented all the ideas mentioned here that would make this move forward. In particular, returning a ref to the compiled result from the <code>compile</code> funcs turned out a bit worse than anticipated in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540/commits/670dcab18c36b7ff4787ec1ef48d86db681b2e7a\">670dcab</a>, so we could decide to get rid of that instead.</p>\n<p>We have a common pattern in the code base of doing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span>: <span class=\"nc\">CodegenError</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pretty_anyhow_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mach_compile_result</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which becomes, with the naive change of just returning <code>&amp;MachCompileResult</code> from the <code>compile</code> function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span>: <span class=\"nc\">CodegenError</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pretty_anyhow_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but now, <code>ctx</code> is mutably borrowed even in the <code>map_err</code> function's body (because <code>result</code> is a reference into <code>ctx</code>'s fields), so borrowck says we can't immutably read <code>ctx.func</code> in the prettifier method. I should note that this is a limitation from borrowck, and we humans know better: the <code>mach_compile_result</code> field and the <code>func</code> fields are different and separated, so this is safe to do, but borrowck can't know about this because of all the visible function calls.</p>\n<p>The solution I opted for was to have a thin wrapper for the <code>compile</code> functions, that contained both the <code>CodegenError</code> and the reference to the <code>Function</code> we're trying to compile, so this code becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span>: <span class=\"nc\">CompileError</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"n\">pretty_anyhow_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"cm\">/* the CodegenError */</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but that's a bit of cognitive overhead for relatively low-value, so would be happy to hear opinions if it's something we want to keep or not.</p>\n</blockquote>",
        "id": 291558301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659351287
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540#issuecomment-1201039670\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540\">issue #4540</a>:</p>\n<blockquote>\n<p>Implemented all the ideas mentioned here that would make this move forward. In particular, returning a ref to the compiled result from the <code>compile</code> funcs turned out a bit worse than anticipated in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4540/commits/670dcab18c36b7ff4787ec1ef48d86db681b2e7a\">670dcab</a>, so we could decide to get rid of that instead.</p>\n<p>We have a common pattern in the code base of doing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span>: <span class=\"nc\">CodegenError</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pretty_anyhow_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mach_compile_result</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which becomes, with the naive change of just returning <code>&amp;MachCompileResult</code> from the <code>compile</code> function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span>: <span class=\"nc\">CodegenError</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pretty_anyhow_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but now, <code>ctx</code> is mutably borrowed even in the <code>map_err</code> function's body (because <code>result</code> is a reference into <code>ctx</code>'s fields), so borrowck says we can't immutably read <code>ctx.func</code> in the prettifier method. I should note that this is a limitation from borrowck, and we humans know better: the <code>mach_compile_result</code> field and the <code>func</code> fields are different and separated, so this is safe to do, but borrowck can't know about this because of all the high-level function calls that take <code>&amp;self</code>.</p>\n<p>The solution I opted for was to have a thin wrapper for the <code>compile</code> functions, that contained both the <code>CodegenError</code> and the reference to the <code>Function</code> we're trying to compile, so this code becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span>: <span class=\"nc\">CompileError</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"n\">pretty_anyhow_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"cm\">/* the CodegenError */</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but that's a bit of cognitive overhead for relatively low-value, so would be happy to hear opinions if it's something we want to keep or not.</p>\n</blockquote>",
        "id": 291558317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659351297
    }
]