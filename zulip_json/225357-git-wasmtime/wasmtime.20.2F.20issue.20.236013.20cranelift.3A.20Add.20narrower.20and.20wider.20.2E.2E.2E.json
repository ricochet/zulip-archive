[
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#issuecomment-1467188462\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">issue #6013</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could you also diff the generated target/debug/build/cranelift-codegen-*/out/opcodes.rs before and after this change? I'm particularly interested in making sure that OPCODE_CONSTRAINTS isn't different in any interesting way except for the five instructions you've updated to use the new derived types. There are some nice comments in the generated code for the computed value of use_typevar_operand, for example.</p>\n</blockquote>\n<p><code>OPCODE_CONSTRAINTS</code> only differs in that it's now 80 elements long. There are some new constraints that uses <code>Narrower</code> and <code>Wider</code>, with two previously completely free constraints being replaced with a constrained use of the controlling variable.</p>\n</blockquote>",
        "id": 341602531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755846
    },
    {
        "content": "<p>elliottt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#issuecomment-1467188462\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">issue #6013</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could you also diff the generated target/debug/build/cranelift-codegen-*/out/opcodes.rs before and after this change? I'm particularly interested in making sure that OPCODE_CONSTRAINTS isn't different in any interesting way except for the five instructions you've updated to use the new derived types. There are some nice comments in the generated code for the computed value of use_typevar_operand, for example.</p>\n</blockquote>\n<p><code>OPCODE_CONSTRAINTS</code> only differs in that it's now 80 elements long. There are some new constraints that use <code>Narrower</code> and <code>Wider</code>, with two previously completely free constraints being replaced with a constrained use of the controlling variable.</p>\n</blockquote>",
        "id": 341602906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678756032
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#issuecomment-1468389745\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">issue #6013</a>:</p>\n<blockquote>\n<p>I realized that the changes to the <code>is_ctrl_typevar_candidate</code> were only necessary when we were allowing an instructions return type to include a constrained use of the control type. As we needed to avoid that to ensure that instructions always had a well-defined return type, those changes could be reverted as well.</p>\n</blockquote>",
        "id": 341841131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678810018
    },
    {
        "content": "<p>elliottt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#issuecomment-1468389745\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">issue #6013</a>:</p>\n<blockquote>\n<p>I realized that the changes to the <code>is_ctrl_typevar_candidate</code> were only necessary when we were allowing an instruction's return type to include a constrained use of the control type. As we needed to avoid that to ensure that instructions always had a well-defined return type, those changes could be reverted as well.</p>\n</blockquote>",
        "id": 341844631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678810772
    }
]