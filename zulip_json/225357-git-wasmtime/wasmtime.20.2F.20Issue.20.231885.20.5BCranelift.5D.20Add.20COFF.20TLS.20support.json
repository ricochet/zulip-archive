[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885\">Issue #1885</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Support TLS data objects with COFF binaries.</p>\n<h4>Benefit</h4>\n<p>TLS data objects are already supported for ELF and Mach-O binaries.</p>\n<h4>Implementation</h4>\n<p>Add a new <code>x86_coff_tls_get_addr</code> instruction. See <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/388#issuecomment-532930282\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/388#issuecomment-532930282</a> for what x86_64 instructions to lower the <code>x86_coff_tls_get_addr</code> instruction to. Then make changes to the <code>object</code> crate as necessary to generate TLS sections for COFF.</p>\n<h4>Alternatives</h4>\n<p>N/A</p>\n</blockquote>",
        "id": 200994971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592302357
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885\">Issue #1885</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Support TLS data objects with COFF binaries.</p>\n<h4>Benefit</h4>\n<p>TLS data objects are already supported for ELF and Mach-O binaries.</p>\n<h4>Implementation</h4>\n<p>Add a new <code>x86_coff_tls_get_addr</code> instruction. See <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/388#issuecomment-532930282\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/388#issuecomment-532930282</a> for what x86_64 instructions to lower the <code>x86_coff_tls_get_addr</code> instruction to. Then make changes to the <code>object</code> crate as necessary to generate TLS sections for COFF.</p>\n<h4>Alternatives</h4>\n<p>N/A</p>\n</blockquote>",
        "id": 202329711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593446026
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885#issuecomment-651208421\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885\">Issue #1885</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 202329753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593446038
    },
    {
        "content": "<p>XAMPPRocky <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885#issuecomment-833318299\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885\">Issue #1885</a>:</p>\n<blockquote>\n<p>Commenting to note that at the moment, COFF support is the primary blocker to compiling Rust projects like <code>tokei</code> with <code>cg_clif</code> on Windows MSVC.</p>\n</blockquote>",
        "id": 237620639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620288088
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885#issuecomment-833327418\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885\">Issue #1885</a>:</p>\n<blockquote>\n<p>Thanks for the tracking issue @XAMPPRocky!</p>\n<p>This one probably isn't too bad, if you (or another adventurous soul) wants to take a look: I believe it should work <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6a1a169c62facb4a709490fede242149e4101b0b/cranelift/codegen/src/isa/x64/inst/emit.rs#L2604-L2629\">similarly to the ELF case</a>, in which we emit a pre-ordained sequence of instructions that the linker recognizes and can fix up. Then we emit that pseudoinst for the sequence <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6a1a169c62facb4a709490fede242149e4101b0b/cranelift/codegen/src/isa/x64/lower.rs#L5706-L5711\">based on the TlsModel during lowering</a>. I don't have an MSVC setup handy to work on this but I'm happy to review a PR! :-)</p>\n</blockquote>",
        "id": 237622015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620288877
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885#issuecomment-833327418\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885\">Issue #1885</a>:</p>\n<blockquote>\n<p>Thanks for the note @XAMPPRocky!</p>\n<p>This one probably isn't too bad, if you (or another adventurous soul) wants to take a look: I believe it should work <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6a1a169c62facb4a709490fede242149e4101b0b/cranelift/codegen/src/isa/x64/inst/emit.rs#L2604-L2629\">similarly to the ELF case</a>, in which we emit a pre-ordained sequence of instructions that the linker recognizes and can fix up. Then we emit that pseudoinst for the sequence <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6a1a169c62facb4a709490fede242149e4101b0b/cranelift/codegen/src/isa/x64/lower.rs#L5706-L5711\">based on the TlsModel during lowering</a>. I don't have an MSVC setup handy to work on this but I'm happy to review a PR! :-)</p>\n</blockquote>",
        "id": 237622171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620288966
    },
    {
        "content": "<p>XAMPPRocky <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885#issuecomment-833350399\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885\">Issue #1885</a>:</p>\n<blockquote>\n<p>I have a setup available, but I'll admit to being quite out of my depth in terms of writing the assembly, so I could make the PR with some guidance. The steps are relatively straight forward, but I'm not sure how to map that to instructions. For example how do you access a special variable like <code>__tls_used</code>?</p>\n<blockquote>\n<p>Executable code accesses a static TLS data object through the following steps:</p>\n<ol>\n<li>\n<p>At link time, the linker sets the Address of Index field of the TLS directory. This field points to a location where the program expects to receive the TLS index.</p>\n</li>\n<li>\n<p>The Microsoft run-time library facilitates this process by defining a memory image of the TLS directory and giving it the special name \"__tls_used\" (Intel x86 platforms) or \"_tls_used\" (other platforms). The linker looks for this memory image and uses the data there to create the TLS directory. Other compilers that support TLS and work with the Microsoft linker must use this same technique.</p>\n</li>\n<li>\n<p>When a thread is created, the loader communicates the address of the thread's TLS array by placing the address of the thread environment block (TEB) in the FS register. A pointer to the TLS array is at the offset of 0x2C from the beginning of TEB. This behavior is Intel x86-specific.</p>\n</li>\n<li>\n<p>The loader assigns the value of the TLS index to the place that was indicated by the Address of Index field.</p>\n</li>\n<li>\n<p>The executable code retrieves the TLS index and also the location of the TLS array.</p>\n</li>\n<li>\n<p>The code uses the TLS index and the TLS array location (multiplying the index by 4 and using it as an offset to the array) to get the address of the TLS data area for the given program and module. Each thread has its own TLS data area, but this is transparent to the program, which does not need to know how data is allocated for individual threads.</p>\n</li>\n<li>\n<p>An individual TLS data object is accessed as some fixed offset into the TLS data area.</p>\n</li>\n</ol>\n<p>The TLS array is an array of addresses that the system maintains for each thread. Each address in this array gives the location of TLS data for a given module (EXE or DLL) within the program. The TLS index indicates which member of the array to use. The index is a number (meaningful only to the system) that identifies the module.</p>\n</blockquote>\n<p><a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#the-tls-section\">https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#the-tls-section</a></p>\n</blockquote>",
        "id": 237625344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620290801
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885#issuecomment-833415386\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1885\">Issue #1885</a>:</p>\n<blockquote>\n<p>The <code>_tls_used</code> handling should be done in object's coff write code, not in Cranelift.</p>\n</blockquote>",
        "id": 237636215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620296784
    }
]