[
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1291195108\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<p>@uweigand does the s390x implementation of <code>iadd_overflow_trap</code> look okay?</p>\n</blockquote>",
        "id": 306134182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666735738
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1291597748\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<blockquote>\n<p>@uweigand does the s390x implementation of <code>iadd_overflow_trap</code> look okay?</p>\n</blockquote>\n<p>It looks correct, but I'd prefer if it implemented support for all variants of the ADD LOGICAL instruction (i.e. including the memory-and-register and the 32-&gt;64 zero-extended operand versions).  In particular, I'm assuming the original <code>iadd_ifcout</code> will go away at some point, and then this will be the only operation that can trigger emission of those instructions.</p>\n<p>(The duplication is a bit annoying.  Maybe it would be nicer to have a common <code>add_logical</code> helper that could be used both by <code>iadd_overflow_trap</code> -adding the trap- and by <code>iadd_ifcout</code> -ignoring the flags- ?  On the other hand, if <code>ifadd_ifcout</code> goes away soon, that probably doesn't matter?    Either way, that shouldn't delay merging this PR; I can fix it up afterwards.)</p>\n<p>As an independent question, I'm wondering about naming: this is about overflow of <em>unsigned</em> addition, so maybe it should be called <code>uadd_overflow_trap</code> in case we may want to add an <code>sadd_overflow_trap</code> at some point?<br>\n</p>\n</blockquote>",
        "id": 306177496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666768315
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1291610169\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<blockquote>\n<p>It looks correct, but I'd prefer if it implemented support for all variants of the ADD LOGICAL instruction (i.e. including the memory-and-register and the 32-&gt;64 zero-extended operand versions). In particular, I'm assuming the original <code>iadd_ifcout</code> will go away at some point, and then this will be the only operation that can trigger emission of those instructions.</p>\n<p>(The duplication is a bit annoying. Maybe it would be nicer to have a common <code>add_logical</code> helper that could be used both by <code>iadd_overflow_trap</code> -adding the trap- and by <code>iadd_ifcout</code> -ignoring the flags- ? On the other hand, if <code>ifadd_ifcout</code> goes away soon, that probably doesn't matter? Either way, that shouldn't delay merging this PR; I can fix it up afterwards.)</p>\n</blockquote>\n<p>Happy to add in the additional variants, I'll try factoring out a helper as you suggest. My plan is to remove <code>iadd_ifcout</code> and the other instructions that use iflags as soon as this PR is merged, as the legalization of <code>heap_addr</code> will no longer rely on them. Once the PR that removes <code>iadd_ifcout</code> and friends is up, we can revisit the duplication.</p>\n<blockquote>\n<p>As an independent question, I'm wondering about naming: this is about overflow of _unsigned_ addition, so maybe it should be called <code>uadd_overflow_trap</code> in case we may want to add an <code>sadd_overflow_trap</code> at some point?</p>\n</blockquote>\n<p>I'd be happy to rename this <code>uadd_overflow_trap</code> instead. I chose this name to mirror the existing name of <code>iadd_ifcout</code>, but would be happy to pick something that conveys the behavior better.</p>\n</blockquote>",
        "id": 306178987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666769081
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1291637713\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<blockquote>\n<p>Happy to add in the additional variants, I'll try factoring out a helper as you suggest. My plan is to remove <code>iadd_ifcout</code> and the other instructions that use iflags as soon as this PR is merged, as the legalization of <code>heap_addr</code> will no longer rely on them. Once the PR that removes <code>iadd_ifcout</code> and friends is up, we can revisit the duplication.</p>\n</blockquote>\n<p>Thanks!</p>\n<blockquote>\n<blockquote>\n<p>As an independent question, I'm wondering about naming: this is about overflow of _unsigned_ addition, so maybe it should be called <code>uadd_overflow_trap</code> in case we may want to add an <code>sadd_overflow_trap</code> at some point?</p>\n</blockquote>\n<p>I'd be happy to rename this <code>uadd_overflow_trap</code> instead. I chose this name to mirror the existing name of <code>iadd_ifcout</code>, but would be happy to pick something that conveys the behavior better.</p>\n</blockquote>\n<p>I understand the <code>cout</code> in the existing name stands for \"carry out\", where the use of \"carry\" instead of \"overflow\" is supposed to denote that we're preforming the unsigned operation.   I guess we could also use <code>iadd_carry_trap</code> vs. <code>iadd_overflow_trap</code>, but mirroring the existing <code>uadd_...</code> vs. <code>sadd_...</code> scheme looks clearer to me.</p>\n<p>(Also, as we're already bikeshedding on the name, all the other trap operations have the condition <em>after</em> the word \"trap\", e.g. <code>trapz</code> for trap-if-zero.  So maybe it should actually be <code>uadd_trap_overflow</code> for unsigned-add-and-trap-if-overflow?)<br>\n</p>\n</blockquote>",
        "id": 306182664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666770719
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1291654059\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<blockquote>\n<p>Add a new instruction iadd_overflow_trap, which is a fused version of iadd_ifcout and trapif. </p>\n</blockquote>\n<p>I understand both of those instructions are going away, but would it be better to implement this as an optimized lowering of <code>trapnz</code> + <code>iadd_cout</code> instead of adding a new specialized instruction? <br>\n</p>\n</blockquote>",
        "id": 306185070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666771641
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1291673729\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Add a new instruction iadd_overflow_trap, which is a fused version of iadd_ifcout and trapif.</p>\n</blockquote>\n<p>I understand both of those instructions are going away, but would it be better to implement this as an optimized lowering of <code>trapnz</code> + <code>iadd_cout</code> instead of adding a new specialized instruction?</p>\n</blockquote>\n<p>I believe the current ISLE logic doesn't really allow folding an instruction with two outputs (like <code>iadd_cout</code>), so I don't think this would be possible.</p>\n<p>However, either way, I think it's a good point: we should also make a decision on the other \"carry\" type instructions (<code>iadd_cin</code>, <code>iadd_cout</code>, <code>iadd_carry</code>).  Right now those are defined, but not implemented on any target.  I think they should either <em>be</em> implemented, or else removed.<br>\n</p>\n</blockquote>",
        "id": 306187644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666772682
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1291709303\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<p>(Now that I'm re-reading it, I think i worded my earlier comment quite poorly, I didn't mean to imply that <code>trapnz</code> or <code>iadd_cout</code> were going way!)</p>\n<blockquote>\n<p>I believe the current ISLE logic doesn't really allow folding an instruction with two outputs (like iadd_cout), so I don't think this would be possible.</p>\n</blockquote>\n<p>That's unfortunate. But In that case I think the current approach makes sense.</p>\n<blockquote>\n<p>However, either way, I think it's a good point: we should also make a decision on the other \"carry\" type instructions (iadd_cin, iadd_cout, iadd_carry). Right now those are defined, but not implemented on any target. I think they should either be implemented, or else removed.</p>\n</blockquote>\n<p>I think when we discussed this in the past It was mentioned that they would be useful for cg_clif. I'm going to try to find the link to those discussions.</p>\n<p>If we do decide to keep those, I don't mind working on an implementation for them.</p>\n</blockquote>",
        "id": 306192388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666774234
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1291709303\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<p>(Now that I'm re-reading it, I think I worded my earlier comment quite poorly, I didn't mean to imply that <code>trapnz</code> or <code>iadd_cout</code> were going away!)</p>\n<blockquote>\n<p>I believe the current ISLE logic doesn't really allow folding an instruction with two outputs (like iadd_cout), so I don't think this would be possible.</p>\n</blockquote>\n<p>That's unfortunate. But In that case I think the current approach makes sense.</p>\n<blockquote>\n<p>However, either way, I think it's a good point: we should also make a decision on the other \"carry\" type instructions (iadd_cin, iadd_cout, iadd_carry). Right now those are defined, but not implemented on any target. I think they should either be implemented, or else removed.</p>\n</blockquote>\n<p>I think when we discussed this in the past It was mentioned that they would be useful for cg_clif. I'm going to try to find the link to those discussions.</p>\n<p>If we do decide to keep those, I don't mind working on an implementation for them.</p>\n</blockquote>",
        "id": 306192986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666774465
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1291709303\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<p>(Now that I'm re-reading it, I think I worded my earlier comment quite poorly, I didn't mean to imply that <code>trapnz</code> or <code>iadd_cout</code> were going away!)</p>\n<blockquote>\n<p>I believe the current ISLE logic doesn't really allow folding an instruction with two outputs (like iadd_cout), so I don't think this would be possible.</p>\n</blockquote>\n<p>That's unfortunate. But In that case I think the current approach makes sense.</p>\n<blockquote>\n<p>However, either way, I think it's a good point: we should also make a decision on the other \"carry\" type instructions (iadd_cin, iadd_cout, iadd_carry). Right now those are defined, but not implemented on any target. I think they should either be implemented, or else removed.</p>\n</blockquote>\n<p>I think when we discussed this in the past It was mentioned that they would be useful for cg_clif. I'm going to try to find the link to those discussions.</p>\n<p>If we do decide to keep those, I don't mind working on an implementation for them.</p>\n<p>Edit:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695919017\">Here's some discussion about cg_clif needing them</a><br>\n<a href=\"#narrow/stream/217117-cranelift/topic/x86_64.20iflags.20handling/near/262026837\">Here's someone else on zulip mentioning that <code>iadd_carry</code> would be useful for them</a></p>\n</blockquote>",
        "id": 306196589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666775689
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1292284639\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think when we discussed this in the past It was mentioned that they would be useful for cg_clif.</p>\n</blockquote>\n<p>The Rust standard library provides routines like <code>overflowing_add</code> and (still unstable) <code>carrying_add</code>, whose semantics map onto those instructions:<br>\n<a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.overflowing_add\">https://doc.rust-lang.org/std/primitive.u32.html#method.overflowing_add</a><br>\n<a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.carrying_add\">https://doc.rust-lang.org/std/primitive.u32.html#method.carrying_add</a></p>\n<p>While I believe at the moment they're not actually implemented using those clif instructions at the moment, I guess the compiler could be improved to do so at some point.  All in all, it's probably best to keep the clif instructions, since there's no real other way to expose those particular instructions (which many ISAs do have).<br>\n</p>\n</blockquote>",
        "id": 306276953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666800773
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1292419397\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<p>@uweigand I've renamed the new instruction to <code>uadd_overflow_trap</code>, and filled out the remaining cases in the s390x backend.</p>\n<p>This did get me wondering if we should call the operation <code>uadd_carry_trap</code>, but I think at this point I'm going to leave it as-is, and we can change the name again later if it's bothering anyone :)</p>\n</blockquote>",
        "id": 306301292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666807954
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123#issuecomment-1292435951\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5123\">issue #5123</a>:</p>\n<blockquote>\n<blockquote>\n<p>@uweigand I've renamed the new instruction to <code>uadd_overflow_trap</code>, and filled out the remaining cases in the s390x backend.</p>\n</blockquote>\n<p>Thanks!  This LGTM now.</p>\n<blockquote>\n<p>This did get me wondering if we should call the operation <code>uadd_carry_trap</code>, but I think at this point I'm going to leave it as-is, and we can change the name again later if it's bothering anyone :)</p>\n</blockquote>\n<p>Agreed.   I prefer \"unsigned overflow / signed overflow\"  over  \"carry / overflow\" since the former is simply more explicit ...<br>\n</p>\n</blockquote>",
        "id": 306304012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666808895
    }
]