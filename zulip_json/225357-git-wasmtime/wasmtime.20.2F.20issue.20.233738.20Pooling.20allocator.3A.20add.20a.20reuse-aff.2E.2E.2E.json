[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#issuecomment-1023979614\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">issue #3738</a>:</p>\n<blockquote>\n<p>After writing this, it occurs to me that the reuse policy as stated will choose with equal probability a <em>module</em> whose freelist we still from, but this does not imply equal probability for any <em>slot</em> to be stolen.</p>\n<p>In other words, if we have one module with average occupancy of 500 preinitialized slots out of 1000, and 500 others with 1 slot each, and a new module comes along and wants a slot, we have only 1/501 chance of picking one of the 500.</p>\n<p>To unbias this I should probably keep a global freelist (whole pool of choices mixed together), randomly pick from that freelist, and keep a reverse-index of slot to last-allocated module to remove the index from that module's freelist (or lazily do so next time we look at that list). I'll take a closer look at this tomorrow!</p>\n</blockquote>",
        "id": 269699975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643357484
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#issuecomment-1023979614\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">issue #3738</a>:</p>\n<blockquote>\n<p>After writing this, it occurs to me that the reuse policy as stated will choose with equal probability a <em>module</em> whose freelist we steal from, but this does not imply equal probability for any <em>slot</em> to be stolen.</p>\n<p>In other words, if we have one module with average occupancy of 500 preinitialized slots out of 1000, and 500 others with 1 slot each, and a new module comes along and wants a slot, we have only 1/501 chance of picking one of the 500.</p>\n<p>To unbias this I should probably keep a global freelist (whole pool of choices mixed together), randomly pick from that freelist, and keep a reverse-index of slot to last-allocated module to remove the index from that module's freelist (or lazily do so next time we look at that list). I'll take a closer look at this tomorrow!</p>\n</blockquote>",
        "id": 269699998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643357502
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#issuecomment-1023996125\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">issue #3738</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 269702408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643358949
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#issuecomment-1024799411\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">issue #3738</a>:</p>\n<blockquote>\n<p>I've updated this PR now to use a better data structure/algorithm design. It performs a fair random choice of victim slot when no slots with the desired affinity are available, and it has all O(1) updates -- somewhat tricky given the need to maintain two freelists (global and per-module) and remove from both. This is done by keeping Vecs and using swap_remove, and tracking a slot's position in each freelist in a separate reverse-index. Hopefully the comments make this a little more clear.</p>\n<p>I've added a randomized test that counts ID-reuse (a little random simulation of sorts) and verifies a reasonable hit rate (at least twice what would be expected with random reuse) as well.</p>\n</blockquote>",
        "id": 269827798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643419771
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#issuecomment-1026008187\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">issue #3738</a>:</p>\n<blockquote>\n<blockquote>\n<p>The policy tracks a freelist per \"compiled module ID\", and when<br>\nallocating a slot for an instance, tries these three options in order:</p>\n<ol>\n<li>A slot from the freelist for this module (i.e., last used for another<br>\n  instantiation of this particular module), or</li>\n<li>A slot that was last used by some other module or never before.</li>\n</ol>\n</blockquote>\n<p>1..3 <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> </p>\n</blockquote>",
        "id": 270067273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643648992
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#issuecomment-1026008187\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">issue #3738</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">policy</span><span class=\"w\"> </span><span class=\"n\">tracks</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">freelist</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"s\">\"compiled module ID\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"></span>\n<span class=\"n\">allocating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tries</span><span class=\"w\"> </span><span class=\"n\">these</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">order</span>:\n\n\n<span class=\"mf\">1.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">freelist</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">another</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">instantiation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">particular</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"></span>\n\n<span class=\"mf\">3.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">never</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>1..3 <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> </p>\n</blockquote>",
        "id": 270067373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643649013
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#issuecomment-1026036715\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">issue #3738</a>:</p>\n<blockquote>\n<blockquote>\n<p>1..3 <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>\n</blockquote>\n<p>Incomplete edit, sorry! The distinction between the last two (empty, and then slot with other affinity) was removed because it made the data structure simpler, and in steady-state (past the first <code>n_slot</code> instantiations in the process) no slots will be empty.</p>\n</blockquote>",
        "id": 270072135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643650753
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#issuecomment-1026286335\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">issue #3738</a>:</p>\n<blockquote>\n<p>I think I addressed all your comments; thanks @fitzgen ! This is rebased on the latest #3697 as well.</p>\n</blockquote>",
        "id": 270118885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669073
    }
]