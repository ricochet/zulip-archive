[
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489#issuecomment-740762402\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489\">Issue #2489</a>:</p>\n<blockquote>\n<p>As mentioned on Zulip, this runs into issues. When I run <code>RUST_LOG=cranelift_codegen=debug cargo run --features experimental_x64 -- wast --disable-cache --enable-simd scratch.wast</code> on:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\0</span><span class=\"s\">0</span><span class=\"se\">\\0</span><span class=\"s\">1</span><span class=\"se\">\\0</span><span class=\"s\">2</span><span class=\"se\">\\0</span><span class=\"s\">3</span><span class=\"se\">\\0</span><span class=\"s\">4</span><span class=\"se\">\\0</span><span class=\"s\">5</span><span class=\"se\">\\0</span><span class=\"s\">6</span><span class=\"se\">\\0</span><span class=\"s\">7</span><span class=\"se\">\\0</span><span class=\"s\">8</span><span class=\"se\">\\0</span><span class=\"s\">9</span><span class=\"se\">\\0</span><span class=\"s\">A</span><span class=\"se\">\\0</span><span class=\"s\">B</span><span class=\"se\">\\0</span><span class=\"s\">C</span><span class=\"se\">\\0</span><span class=\"s\">D</span><span class=\"se\">\\0</span><span class=\"s\">E</span><span class=\"se\">\\0</span><span class=\"s\">F\\80\\81\\82\\83\\84\\85\\86\\87\\88\\89\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">65520</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\0</span><span class=\"s\">A</span><span class=\"se\">\\0</span><span class=\"s\">B</span><span class=\"se\">\\0</span><span class=\"s\">C</span><span class=\"se\">\\0</span><span class=\"s\">D</span><span class=\"se\">\\0</span><span class=\"s\">E</span><span class=\"se\">\\0</span><span class=\"s\">F\\80\\81\\82\\83\\84\\85\\86\\87\\88\\89\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"v128.load32_zero\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">v128</span><span class=\"p\">.</span><span class=\"n\">load32_zero</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">assert_return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"s\">\"v128.load32_zero\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v128</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"mh\">0x03020100</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"w\"> </span><span class=\"mh\">0x00000000</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The test fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">scratch</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"o\">'</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">directive</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"p\">.</span><span class=\"n\">wast</span>:<span class=\"mi\">9</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">V128</span><span class=\"p\">(</span><span class=\"n\">I32x4</span><span class=\"p\">([</span><span class=\"mi\">50462976</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">0x00000000000000000000000000010203</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"n\">V128</span><span class=\"p\">(</span><span class=\"mi\">2595974132930443020774722140989752</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">0x00007ffdccd1730000007ffdccd16938</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>After lowering, the <code>MOVSS</code> is present (as it should be):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">compile</span><span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">vcode</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">lowering</span>:\n<span class=\"nc\">VCode_ShowWithRRU</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n  <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">successor</span>: <span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v0J</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v1J</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2J</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>:   <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v2Jl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v3Jl</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"mi\">28</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v0J</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v4J</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>:   <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v4J</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">v3J</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v6Jl</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>:   <span class=\"nc\">movss</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">v6J</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v7V</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>:   <span class=\"nc\">movdqa</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v7V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v8V</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">8</span>:   <span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span>:\n  <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">9</span>:   <span class=\"nc\">movdqa</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v8V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v9V</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">10</span>:   <span class=\"nc\">movdqa</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v9V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">11</span>:   <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But after regalloc it is gone!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">compile</span><span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">vcode</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">regalloc</span>: <span class=\"nc\">final</span><span class=\"w\"> </span><span class=\"n\">version</span>:\n<span class=\"nc\">VCode_ShowWithRRU</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n  <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">successor</span>: <span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>:   <span class=\"nc\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>:   <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"mi\">28</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>:   <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>:   <span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span>:\n  <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>:   <span class=\"nc\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">8</span>:   <span class=\"nc\">re</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 219232044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607446762
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489#issuecomment-754190837\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489\">Issue #2489</a>:</p>\n<blockquote>\n<p>Weirdly, a CLIF filetest like the following will produce the expected code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_simd</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">has_ssse3</span><span class=\"w\"> </span><span class=\"n\">has_sse41</span><span class=\"w\"></span>\n<span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"s\">\"experimental_x64\"</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">load32_zero</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">scalar_to_vector</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>:  <span class=\"nc\">movss</span><span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When I run that with <code>cargo run --features experimental_x64 -p cranelift-tools -- compile --target=\"x86_64\" -dDp scratch.clif</code> I see the following before regalloc:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">compile</span><span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">vcode</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">lowering</span>:\n<span class=\"nc\">VCode_ShowWithRRU</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n  <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v0J</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>:   <span class=\"nc\">movss</span><span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v0J</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2V</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>:   <span class=\"nc\">movdqa</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v2V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v3V</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>:   <span class=\"nc\">movdqa</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v3V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>:   <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And after, the correct <code>MOVSS</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">compile</span><span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">vcode</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">regalloc</span>: <span class=\"nc\">final</span><span class=\"w\"> </span><span class=\"n\">version</span>:\n<span class=\"nc\">VCode_ShowWithRRU</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n  <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>:   <span class=\"nc\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>:   <span class=\"nc\">movss</span><span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>:   <span class=\"nc\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>:   <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 221574232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609791038
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489#issuecomment-754310724\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489\">Issue #2489</a>:</p>\n<blockquote>\n<p>@cfallin, I am bringing this out of draft since:</p>\n<ul>\n<li>it seems like we are still merging x64 SIMD code despite the tests being disabled (I checked locally and this passes the tests)</li>\n<li>I think this side-steps most of the stuff we found in #2545, though we should still fix that separately.</li>\n</ul>\n</blockquote>",
        "id": 221600338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609806921
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489#issuecomment-754312364\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489\">Issue #2489</a>:</p>\n<blockquote>\n<p>Will review soon; re: merging SIMD, yes, at least my position right now is that we should be able to keep making progress on SIMD despite the CI heisenbug and disabled tests; when we resolve that bug and turn the tests back on, we'll see any issues and be able to trace them back to one of N PRs merged recently. IMHO that's better than holding all SIMD work until we track down the issue, given that it's proven elusive so far.</p>\n</blockquote>",
        "id": 221600642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609807191
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489#issuecomment-757063869\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489\">Issue #2489</a>:</p>\n<blockquote>\n<p>@abrown I think this broke the build on <code>main</code> as it went in after the multi-reg refactor but tests had run before it.</p>\n</blockquote>",
        "id": 222143504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610152873
    }
]