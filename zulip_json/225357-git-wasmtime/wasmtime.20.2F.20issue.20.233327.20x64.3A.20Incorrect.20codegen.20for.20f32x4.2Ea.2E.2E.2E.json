[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>Found via fuzzing this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    v128.const f32x4 0 0 0 0\n    f32x4.abs\n    v128.not)\n  (export \"1\" (func 0))\n)\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when it should print <code>u128::MAX</code>.</p>\n<p>The disassembly of this function is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">movdqu</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\">        </span>#<span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">+</span><span class=\"mh\">0x30</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"mi\">00</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">c</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">13</span>:       <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">72</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">          </span><span class=\"n\">psrld</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">18</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">andps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">b</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">22</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">25</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">26</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't for sure know what's going on here with each individual instruction, but this sort of looks like a register allocator issue? I'm not sure what the second <code>xorps</code> is doing there with those registers. If this is a register allocator thing it may or may not be related to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3216\">https://github.com/bytecodealliance/wasmtime/issues/3216</a></p>\n</blockquote>",
        "id": 252885177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631339423
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>Found via fuzzing this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    v128.const f32x4 0 0 0 0\n    f32x4.abs\n    v128.not)\n  (export \"1\" (func 0))\n)\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when it should print <code>u128::MAX</code>.</p>\n<p>The disassembly of this function is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">movdqu</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\">        </span>#<span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">+</span><span class=\"mh\">0x30</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"mi\">00</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">c</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">13</span>:       <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">72</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">          </span><span class=\"n\">psrld</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">18</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">andps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">b</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">22</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">25</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">26</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't for sure know what's going on here with each individual instruction, but this sort of looks like a register allocator issue? I'm not sure what the second <code>xorps</code> is doing there with those registers. If this is a register allocator thing it may or may not be related to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3216\">https://github.com/bytecodealliance/wasmtime/issues/3216</a></p>\n</blockquote>",
        "id": 252885178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631339423
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>Found via fuzzing this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    v128.const f32x4 0 0 0 0\n    f32x4.abs\n    v128.not)\n  (export \"1\" (func 0))\n)\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when it should print <code>u128::MAX</code>.</p>\n<p>The disassembly of this function is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">movdqu</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\">        </span>#<span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">+</span><span class=\"mh\">0x30</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"mi\">00</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">c</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">13</span>:       <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">72</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">          </span><span class=\"n\">psrld</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">18</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">andps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">b</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">22</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">25</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">26</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't for sure know what's going on here with each individual instruction, but this sort of looks like a register allocator issue? I'm not sure what the second <code>xorps</code> is doing there with those registers. If this is a register allocator thing it may or may not be related to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3216\">https://github.com/bytecodealliance/wasmtime/issues/3216</a></p>\n</blockquote>",
        "id": 252885179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631339423
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>Found via fuzzing this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    v128.const f32x4 0 0 0 0\n    f32x4.abs\n    v128.not)\n  (export \"1\" (func 0))\n)\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when it should print <code>u128::MAX</code>.</p>\n<p>The disassembly of this function is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">movdqu</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\">        </span>#<span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">+</span><span class=\"mh\">0x30</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"mi\">00</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">c</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">13</span>:       <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">72</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">          </span><span class=\"n\">psrld</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">18</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">andps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">b</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">22</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">25</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">26</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't for sure know what's going on here with each individual instruction, but this sort of looks like a register allocator issue? I'm not sure what the second <code>xorps</code> is doing there with those registers. If this is a register allocator thing it may or may not be related to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3216\">https://github.com/bytecodealliance/wasmtime/issues/3216</a></p>\n</blockquote>",
        "id": 252885180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631339423
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>Found via fuzzing this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    v128.const f32x4 0 0 0 0\n    f32x4.abs\n    v128.not)\n  (export \"1\" (func 0))\n)\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when it should print <code>u128::MAX</code>.</p>\n<p>The disassembly of this function is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">movdqu</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\">        </span>#<span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">+</span><span class=\"mh\">0x30</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"mi\">00</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">c</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">13</span>:       <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">72</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">          </span><span class=\"n\">psrld</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">18</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">andps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">b</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">22</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">25</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">26</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't for sure know what's going on here with each individual instruction, but this sort of looks like a register allocator issue? I'm not sure what the second <code>xorps</code> is doing there with those registers. If this is a register allocator thing it may or may not be related to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3216\">https://github.com/bytecodealliance/wasmtime/issues/3216</a></p>\n</blockquote>",
        "id": 252885181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631339423
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-917509720\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>This is another module which I believe is broken:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (;0;) (result i32)\n    v128.const i32x4 0xffffffff 0x80bfffff 0x80bf0a0a 0x80bf0a0a\n    f64x2.promote_low_f32x4\n    v128.not\n    v128.not\n    v128.not\n    v128.not\n    v128.not\n    v128.not\n    v128.not\n    v128.const i32x4 0 0 0 0\n    f64x2.gt\n    v128.not\n    i64x2.bitmask)\n  (export \"\" (func 0)))\n</code></pre></div>\n<p>It still has <code>v128.not</code> but I don't know if it's the same bug, I'm just assuming it's related. This is fuzz-generated and v8 claims the function should produce 0 but Wasmtime produces 3 as the answer.</p>\n</blockquote>",
        "id": 252945318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631405940
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-918371942\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>cc @jlb6740, could you take a look?</p>\n</blockquote>",
        "id": 253120684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631551047
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-921819967\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>Another one cropped up today which I'm lumping in with this one, but recording to ensure we can test the fix:</p>\n<p><div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (param i32) (result i32)))\n  (func (;0;) (type 0) (param i32) (result i32)\n    local.get 0\n    i32x4.splat\n    f64x2.abs\n    v128.not\n    i64x2.bitmask)\n  (memory (;0;) 1 1)\n  (export \"\" (func 0))\n  (export \"1\" (func 0)))\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 253746266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631887196
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-962208422\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>I've got a <a href=\"https://github.com/alexcrichton/wasmtime/commit/f7ccaf2395b4fed071e97eaf6c9d490e42638a65\">fix for this</a> when ISLE lands</p>\n</blockquote>",
        "id": 260462138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636145015
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966726819\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton I think I see the issue here. The abs lowering:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xorps</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">psrld</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">andps</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>leaves xmm1 with:<br>\n<code>2147483647</code><br>\nBut this number (the largest 32-bit int) is not a float. The not instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Takes a register (in this case xmm1) and then tries to make it have the float value 1. It does this in order to do then do an xorps to flip the bits. The problem is that the abs sequence has left the register xmm1 with a number that cmpeqps returns an unexpected result. If we do this on another register that just so happens to have a valid float value then this sequence would work, but in our case it doesn't. The fix seems to be to do a logical xor on the float register before doing the cmpeqps. This logical or correctly zeros the register allowing the cmpeqps to work as expected. Maybe a better sequence but will push this to fix this bug. </p>\n</blockquote>",
        "id": 261200432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636677730
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966726819\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton I think I see the issue here. The abs lowering:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xorps</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">psrld</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">andps</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>leaves xmm1 with:<br>\n<code>2147483647</code><br>\nBut this number (the largest 32-bit int) is not a float. The not instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Takes a register (in this case xmm1) and then tries to make it have the float value 1. It does this in order to do then do an xorps to flip the bits. The problem is that the abs sequence has left the register xmm1 with a number that cmpeqps returns an unexpected result. If we do this on another register that just so happens to have a valid float value then this sequence would work, but in our case it doesn't. The fix seems to be to do a logical xor on the float register before doing the cmpeqps. This logical or correctly zeros the register allowing the cmpeqps to work as expected. Maybe a better sequence but will push this lowering for not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"xorps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to resolve this bug. </p>\n</blockquote>",
        "id": 261200474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636677792
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966726819\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton I think I see the issue here. The abs lowering:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xorps</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">psrld</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">andps</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>leaves xmm1 with:<br>\n<code>2147483647</code><br>\nBut this number (the largest 32-bit int) is not a float. The not instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>takes a register (in this case xmm1) and then tries to make it have the float value 1. It does this in order to do then do an xorps to flip the bits. The problem is that the abs sequence has left the register xmm1 with a number that cmpeqps returns an unexpected result. If we do this on another register that just so happens to have a valid float value then this sequence would work, but in our case it doesn't. The fix seems to be to do a logical xor on the float register before doing the cmpeqps. This logical or correctly zeros the register allowing the cmpeqps to work as expected. Maybe a better sequence but will push this lowering for not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"xorps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to resolve this bug. </p>\n</blockquote>",
        "id": 261200684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636678065
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966726819\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton I think I see the issue here. The abs lowering:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xorps</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">psrld</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">andps</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>leaves xmm1 with:<br>\n<code>2147483647</code><br>\nBut this number (the largest 32-bit int) is not a float. The not instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>takes a register (in this case xmm1) and then tries to make it have the float value 1. It does this in order to do then do an xorps to flip the bits. The problem is that the abs sequence has left the register xmm1 with a number that cmpeqps doesn't return as expected because it is not a valid float. If we do this on another register that just so happens to have a valid float value then this sequence would work, but in our case it doesn't. The fix seems to be to do a logical xor on the float register before doing the cmpeqps. This logical or correctly zeros the register allowing the cmpeqps to work as expected. Maybe a better sequence but will push this lowering for not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"xorps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to resolve this bug. </p>\n</blockquote>",
        "id": 261202858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636680549
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966726819\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton I think I see the issue here. The abs lowering:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xorps</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">psrld</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">andps</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>leaves xmm1 with:<br>\n<code>2147483647</code><br>\nBut this number (the largest 32-bit int) is not a float. The not instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>takes a register (in this case xmm1) and then tries to make it have the float value 1. It does this in order to then do an xorps to flip the bits. The problem is that the abs sequence has left the register xmm1 with a number that cmpeqps doesn't return as expected because it is not a valid float. If we do this on another register that just so happens to have a valid float value then this sequence would work, but in our case it doesn't. The fix seems to be to do a logical xor on the float register before doing the cmpeqps. This logical or correctly zeros the register allowing the cmpeqps to work as expected. Maybe a better sequence but will push this lowering for not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"xorps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to resolve this bug. </p>\n</blockquote>",
        "id": 261203591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636681450
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966726819\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton I think I see the issue here. The abs lowering:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xorps</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">psrld</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">andps</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>leaves xmm1 with:<br>\n<code>2147483647</code><br>\nBut this number (the largest 32-bit int) is not a float. The not instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>takes a register (in this case xmm1) and then tries to make it have the float value 1. It does this in order to then do an xorps to flip the bits. The problem is that the abs sequence has left the register xmm1 with an invalid float so cmpeqps doesn't return as expected. If we do this on another register that happens to have a valid float value then this sequence would work, but in our case it doesn't. The fix seems to be to do a logical xor on the float register before doing the cmpeqps. This logical or correctly zeros the register allowing the cmpeqps to work as expected. Maybe a better sequence but will push this lowering for not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"xorps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to resolve this bug. </p>\n</blockquote>",
        "id": 261203655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636681501
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966726819\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton I think I see the issue here. The abs lowering:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xorps</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">psrld</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">andps</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>leaves xmm1 with:<br>\n<code>2147483647</code><br>\nBut this number (the largest 32-bit int) is not a float. The not instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>takes a register (in this case xmm1) and then tries to make it have the float value 1. It does this in order to then do an xorps to flip the bits. The problem is that the abs sequence has left the register xmm1 with an invalid float so cmpeqps doesn't return as expected. If we do this on another register that happens to have a valid float value then this sequence would work, but in our case it doesn't. The fix seems to be to do a logical xor on the float register before doing the cmpeqps. This logical xor correctly zeros the register allowing the cmpeqps to work as expected. Maybe a better sequence but will push this lowering for not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"xorps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to resolve this bug. </p>\n</blockquote>",
        "id": 261203668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636681519
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966726819\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton I think I see the issue here. The abs lowering:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xorps</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"n\">psrld</span><span class=\"w\">   </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">andps</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>leaves xmm1 with:<br>\n<code>2147483647</code><br>\nBut this number (the largest 32-bit int) is not a float. The not instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>takes a register (in this case xmm1) and then tries to make it have the float value 1. It does this in order to then do an xorps to flip the bits. The problem is that the abs sequence has left the register xmm1 with an invalid float so cmpeqps doesn't return as expected. If we do this on another register that happens to have a valid float value then this sequence would work, but in our case it doesn't. The fix seems to be to do a logical xor on the float register before doing the cmpeqps. This logical xor correctly zeros the register allowing the cmpeqps to return as desired. Maybe a another instruction sequence exist but will push this lowering for not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"xorps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"cmpeqps %%xmm1, %%xmm1</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"s\">\"xorps %%xmm1, %%xmm0</span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to resolve this bug. </p>\n</blockquote>",
        "id": 261203683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636681556
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966753300\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton btw .. just read your comment on <a href=\"https://github.com/alexcrichton/wasmtime/commit/f7ccaf2395b4fed071e97eaf6c9d490e42638a65\">https://github.com/alexcrichton/wasmtime/commit/f7ccaf2395b4fed071e97eaf6c9d490e42638a65</a> and indeed the fabs/fneg lowering implements this correctly. The bnot implementation apparently didn't foresee this issue. </p>\n<p>I created a jist here that may be useful for other bugs: <a href=\"https://gist.github.com/jlb6740/33e77c7f32beb99bdc392ff456fbc864\">https://gist.github.com/jlb6740/33e77c7f32beb99bdc392ff456fbc864</a></p>\n</blockquote>",
        "id": 261203856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636681797
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-966753300\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>@alexcrichton btw .. just read your comment on <a href=\"https://github.com/alexcrichton/wasmtime/commit/f7ccaf2395b4fed071e97eaf6c9d490e42638a65\">https://github.com/alexcrichton/wasmtime/commit/f7ccaf2395b4fed071e97eaf6c9d490e42638a65</a> and indeed the fabs/fneg lowering implements this correctly. The bnot implementation apparently didn't foresee this issue. </p>\n<p>I created a jist here that may be useful for debugging similar bugs: <a href=\"https://gist.github.com/jlb6740/33e77c7f32beb99bdc392ff456fbc864\">https://gist.github.com/jlb6740/33e77c7f32beb99bdc392ff456fbc864</a></p>\n</blockquote>",
        "id": 261203917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636681834
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>Found via fuzzing this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result v128)\n    v128.const f32x4 0 0 0 0\n    f32x4.abs\n    v128.not)\n  (export \"1\" (func 0))\n)\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when it should print <code>u128::MAX</code>.</p>\n<p>The disassembly of this function is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">movdqu</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\">        </span>#<span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">+</span><span class=\"mh\">0x30</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"mi\">00</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">c</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">13</span>:       <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">72</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">          </span><span class=\"n\">psrld</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">18</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">andps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">b</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">22</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">25</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">26</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't for sure know what's going on here with each individual instruction, but this sort of looks like a register allocator issue? I'm not sure what the second <code>xorps</code> is doing there with those registers. If this is a register allocator thing it may or may not be related to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3216\">https://github.com/bytecodealliance/wasmtime/issues/3216</a></p>\n</blockquote>",
        "id": 261657627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637076499
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327#issuecomment-970386047\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3327\">issue #3327</a>:</p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">https://github.com/bytecodealliance/wasmtime/pull/3517</a></p>\n</blockquote>",
        "id": 261657633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637076501
    }
]