[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7283\">issue #7283</a>:</p>\n<blockquote>\n<p>Given this input CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>function %foo(i64, i64) {\nblock0(v0: i64, v1: i64):\n    ;; Create a loop-invariant value `v10` which is some operation which\n    ;; includes a constant somewhere.\n    v8 = load.f64 v0+100\n    v9 = f64const 0x1.0000000000000p1\n    v10 = fdiv v8, v9\n\n    ;; jump to the loop\n    v3 = iconst.i64 0\n    jump block2(v3)  ; v3 = 0\n\nblock2(v11: i64):\n    ;; store the loop-invariant `v10` to memory \"somewhere\"\n    v15 = iadd v0, v11\n    store.f64 v10, v15\n\n    ;; loop breakout condition\n    v17 = iadd_imm v11, 1\n    v19 = icmp_imm ne v17, 100\n    brif v19, block2(v17), block1\n\nblock1:\n    return\n}\n</code></pre></div>\n<p>this will currently optimize as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v11</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0000000000000</span><span class=\"n\">p1</span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fdiv</span><span class=\"p\">.</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0000000000000</span><span class=\"n\">p1</span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v15</span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v17</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"n\">block1</span>:\n    <span class=\"nc\">return</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This notably sinks the <code>fdiv</code> operation, which is loop invariant and originally outside of the loop, into the loop.</p>\n<p>After debugging with @elliottt the reason this seems to be happening is that during elaboration to elaborate the <code>fdiv</code> instruction it first elaborates the inputs to the <code>fdiv</code> instruction. When doing so one of the inputs is an <code>f64const</code> which is rematerializable, meaning that the constant value is materialized inside of the loop. Next when elaborating <code>fdiv</code> it sees that one of its inputs is inside of the loop, so it concludes that the <code>fdiv</code> must also itself be inside of the loop. Put another way the rematerialization of the constant argument additionally forces the <code>fdiv</code> to go inside of the loop. This hypothesis was tested by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5c7ed43058fd8bc3122b20debe712c9cbfecf9f2/cranelift/codegen/src/opts/remat.isle#L28-L31\">commenting out these lines</a> which avoided putting the <code>fdiv</code> into the loop. This isn't a complete fix, however, because rematerialized integer constants would still cause integer operations to be sunk into loops erroneously.</p>\n<p>I remember first noticing this behavior in an <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7085\">older issue</a> about false dependencies where a division operation was sunk into a loop, although the performance regression in that issue was due to something else. @elliottt's and my investigation of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7246\">https://github.com/bytecodealliance/wasmtime/issues/7246</a> however turned up that this sinking is the cause of the slowdown there. The <code>vdivsd</code> instruction is present in the loop when in the original wasm the <code>f64.div</code> was not present in the loop. The above commenting of <code>remat.isle</code> rules improves the runtime performance of that test case to be as expected.</p>\n<p>cc @elliottt and @cfallin as y'all are likely interested in this.</p>\n</blockquote>",
        "id": 397358734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697650946
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7283#issuecomment-1769048127\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7283\">issue #7283</a>:</p>\n<blockquote>\n<p>This is fascinating -- thank you both for debugging this!</p>\n<p>I agree that this \"reverse LICM\" should be, well, reversed. (Though I'm tempted to argue that \"loop invariant code motion\" doesn't specify <em>which</em> way the code should move <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ) Basically the remat should not affect code placement decisions at all.</p>\n<p>It seems to me that there should be a relatively small change possible to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5c7ed43058fd8bc3122b20debe712c9cbfecf9f2/cranelift/codegen/src/egraph/elaborate.rs#L289\">remat logic</a>. The part that perplexes me a little bit right now, without going through a tracelog, is why we're remat'ing into <code>block2</code> at all, if there are no other uses of <code>v9</code>. In any case I should be able to look at this more later today and hopefully fix it -- thank you for the very helpful minimal example!</p>\n</blockquote>",
        "id": 397359777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697651455
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7283\">issue #7283</a>:</p>\n<blockquote>\n<p>Given this input CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>function %foo(i64, i64) {\nblock0(v0: i64, v1: i64):\n    ;; Create a loop-invariant value `v10` which is some operation which\n    ;; includes a constant somewhere.\n    v8 = load.f64 v0+100\n    v9 = f64const 0x1.0000000000000p1\n    v10 = fdiv v8, v9\n\n    ;; jump to the loop\n    v3 = iconst.i64 0\n    jump block2(v3)  ; v3 = 0\n\nblock2(v11: i64):\n    ;; store the loop-invariant `v10` to memory \"somewhere\"\n    v15 = iadd v0, v11\n    store.f64 v10, v15\n\n    ;; loop breakout condition\n    v17 = iadd_imm v11, 1\n    v19 = icmp_imm ne v17, 100\n    brif v19, block2(v17), block1\n\nblock1:\n    return\n}\n</code></pre></div>\n<p>this will currently optimize as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v11</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0000000000000</span><span class=\"n\">p1</span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fdiv</span><span class=\"p\">.</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0000000000000</span><span class=\"n\">p1</span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v15</span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">(</span><span class=\"n\">v17</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"n\">block1</span>:\n    <span class=\"nc\">return</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This notably sinks the <code>fdiv</code> operation, which is loop invariant and originally outside of the loop, into the loop.</p>\n<p>After debugging with @elliottt the reason this seems to be happening is that during elaboration to elaborate the <code>fdiv</code> instruction it first elaborates the inputs to the <code>fdiv</code> instruction. When doing so one of the inputs is an <code>f64const</code> which is rematerializable, meaning that the constant value is materialized inside of the loop. Next when elaborating <code>fdiv</code> it sees that one of its inputs is inside of the loop, so it concludes that the <code>fdiv</code> must also itself be inside of the loop. Put another way the rematerialization of the constant argument additionally forces the <code>fdiv</code> to go inside of the loop. This hypothesis was tested by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5c7ed43058fd8bc3122b20debe712c9cbfecf9f2/cranelift/codegen/src/opts/remat.isle#L28-L31\">commenting out these lines</a> which avoided putting the <code>fdiv</code> into the loop. This isn't a complete fix, however, because rematerialized integer constants would still cause integer operations to be sunk into loops erroneously.</p>\n<p>I remember first noticing this behavior in an <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7085\">older issue</a> about false dependencies where a division operation was sunk into a loop, although the performance regression in that issue was due to something else. @elliottt's and my investigation of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7246\">https://github.com/bytecodealliance/wasmtime/issues/7246</a> however turned up that this sinking is the cause of the slowdown there. The <code>vdivsd</code> instruction is present in the loop when in the original wasm the <code>f64.div</code> was not present in the loop. The above commenting of <code>remat.isle</code> rules improves the runtime performance of that test case to be as expected.</p>\n<p>cc @elliottt and @cfallin as y'all are likely interested in this.</p>\n</blockquote>",
        "id": 397773857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697834681
    }
]