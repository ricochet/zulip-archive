[
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[ ] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[ ] debugging support for generated code.</li>\n<li>[ ] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[ ] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[ ] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[ ] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[ ] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[ ] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 202305716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593435896
    },
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[ ] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[ ] debugging support for generated code.</li>\n<li>[ ] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[ ] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[ ] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[ ] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[ ] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[ ] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 202305717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593435896
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-651107362\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 202305740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593435913
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-651113960\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<blockquote>\n<p>enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</p>\n</blockquote>\n<h3>Must have</h3>\n<p>The main thing missing in all new style backends is 128bit integer support. It is very very hard to support 128bit integers in cg_clif without Cranelift support and it is impossible to even compile libcore without 128bit integer support in cg_clif.</p>\n<h3>Nice to have</h3>\n<p>Other than that having System-V struct argument support (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">https://github.com/bytecodealliance/wasmtime/pull/1559</a> for the old style x86 backend) would be really nice. That PR is not yet merged though, but supporting proc-macros depends on it to prevent an abi incompatibility between cg_clif (the proc macro) and cg_llvm (the rustc loading the proc-macro).</p>\n<blockquote>\n<p>as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</p>\n</blockquote>\n<p>Those are nice convenience functions. Maybe they could just be that functions that emit a <code>iconst</code> and an <code>iadd</code>, etc?</p>\n</blockquote>",
        "id": 202307011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593436590
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-651162890\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>One possibility for 128 bit math is to add an i128 type to CLIR, and let the individual target instruction selectors lower them down to the relevant sequences of machine instructions.  I know this isn't the \"traditional\" way that CL currently uses.  There's an argument to be made that having condition codes exposed in the CLIR -- as required by the old-backend handling for multiword arithmetic -- is more trouble than it's worth.  Exposed condition codes mean we have to have extra logic to ensure we don't put any flag-setting insns in between generation and use; they are non-register-allocatable, and we have to jump through hoops to try and avoid materialising them unnecessarily in registers.  </p>\n</blockquote>",
        "id": 202318550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593441392
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-651165435\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<blockquote>\n<p>One possibility for 128 bit math is to add an i128 type to CLIR, and let the individual target instruction selectors lower them down to the relevant sequences of machine instructions. I know this isn't the \"traditional\" way that CL currently uses.</p>\n</blockquote>\n<p>There is already an <a href=\"https://docs.rs/cranelift-codegen/0.65.0/cranelift_codegen/ir/types/constant.I128.html\"><code>i128</code> type</a>. 128 bit math is currently handled is using legalizations though.</p>\n</blockquote>",
        "id": 202319247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593441642
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-651113960\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<blockquote>\n<p>enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</p>\n</blockquote>\n<h3>Must have</h3>\n<p>The main thing missing in all new style backends is 128bit integer support. It is very very hard to support 128bit integers in cg_clif without Cranelift support and it is impossible to even compile libcore without 128bit integer support in cg_clif.</p>\n<p>edit: TLS support is also essential for multi-threading support.</p>\n<h3>Nice to have</h3>\n<p>Other than that having System-V struct argument support (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">https://github.com/bytecodealliance/wasmtime/pull/1559</a> for the old style x86 backend) would be really nice. That PR is not yet merged though, but supporting proc-macros depends on it to prevent an abi incompatibility between cg_clif (the proc macro) and cg_llvm (the rustc loading the proc-macro).</p>\n<blockquote>\n<p>as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</p>\n</blockquote>\n<p>Those are nice convenience functions. Maybe they could just be that functions that emit a <code>iconst</code> and an <code>iadd</code>, etc?</p>\n</blockquote>",
        "id": 202330440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593446349
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-651211660\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>I forgot to add TLS support to the must have section. Added it now.</p>\n</blockquote>",
        "id": 202330480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593446372
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-651234153\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>Thanks for writing this up @bnjbvr! Very thorough.</p>\n<p>One thing not mentioned explicitly, and which Wasmtime relies upon, is support for the target's native calling conventions, as opposed to SpiderMonkey's.</p>\n</blockquote>",
        "id": 202336429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593448845
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-655760020\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>Sorry that I forgot to respond on this. The Lucet team can start running tests against the new backend once x86_64 support is sufficient for Wasm MVP support.</p>\n</blockquote>",
        "id": 203323909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594242741
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-655760020\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>Sorry that I forgot to respond on this. The Lucet team can start running tests against the new backend once x86_64 support is sufficient for Wasm MVP support.</p>\n<p>The lucet-wasi-fuzz crate uses csmith and clang to explore a subset of Wasm programs. This approach has found some bugs in Lucet before but I don't believe it has ever discovered Cranelift bugs. We can apply it to the new backend and see if anything shakes out.</p>\n</blockquote>",
        "id": 203324243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594242912
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-725752041\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>I'll be actively working on this; for tracking purposes, this depends on at least #2079, #2372, #2272, <code>u128</code> support, and a solid round of testing.</p>\n<p>Since the issue was created, we've got reftypes support in the Cranelift backend itself, though not in the <code>wasmtime</code> embedding; I'll look at this soon. We've also got unwind info; @yurydelendik, are you aware of any other missing debug-related bits in the new backend?</p>\n</blockquote>",
        "id": 216416063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605142701
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-726127914\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<blockquote>\n<p>@yurydelendik, are you aware of any other missing debug-related bits in the new backend?</p>\n</blockquote>\n<p>To generate DWARF's .debug_info, you will also need <code>ValueLabelsRanges</code> data and implement TODOs for unwind info in epilogues (when possible).</p>\n</blockquote>",
        "id": 216478284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605192900
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[x] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[ ] debugging support for generated code.</li>\n<li>[ ] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[ ] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[ ] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[ ] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[ ] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[ ] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 216645649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605289031
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-790794306\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>@cfallin, if we want to still take a look at a performance comparison here, the new sightglass CLI should get us almost to the place where we can easily compare both compile times and run times. It supports a bunch of metrics now--cycles, instructions retired, cache hits/misses, etc. I think we need to talk about the final few pieces: do we need more benchmarks? How to aggregate the results? Essentially, what do we want to see from the tool to make this decision?</p>\n</blockquote>",
        "id": 228815773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614879168
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-790803437\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>@abrown, this could be useful yes! However I think the higher-level question is: what are the thresholds for performance and do we want to have a hard-gate on them, or is this simply a nice-to-have input? (The above issue describes it as the former, but I think it would be worth getting recent input from folks.) In general my tests have shown the new backend to be faster (compile time and runtime) but we've seen large inputs where that's not the case; will we hold back the transition until we can address such issues (by e.g. working on <a href=\"http://regalloc.rs\">regalloc.rs</a> more) or will we move forward given the general balance of benefits vs remaining issues?</p>\n</blockquote>",
        "id": 228818130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614879993
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[x] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[x] debugging support for generated code.</li>\n<li>[ ] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[ ] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[ ] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[ ] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[ ] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[ ] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 228818286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614880053
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[x] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[x] debugging support for generated code.</li>\n<li>[x] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[ ] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[ ] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[ ] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[ ] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[ ] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 228818293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614880055
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[x] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[x] debugging support for generated code.</li>\n<li>[x] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[ ] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[x] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[ ] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[ ] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[ ] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 228818311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614880061
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[x] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[x] debugging support for generated code.</li>\n<li>[x] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[ ] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[x] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[x] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[ ] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[ ] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 228818323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614880068
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[x] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[x] debugging support for generated code.</li>\n<li>[x] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[x] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[x] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[x] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[ ] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[ ] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 228818337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614880072
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[x] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[x] debugging support for generated code.</li>\n<li>[x] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[x] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[x] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[x] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[ ] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[x] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 228818404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614880085
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-790860082\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>Greetings all -- so we've been checking off the remaining boxes needed to make the transition, but I haven't done a good job of keeping this up to date. We now have almost full feature-completeness (modulo a few things below) and several stakeholders -- Lucet (<a href=\"https://github.com/bytecodealliance/lucet/issues/646\">bytecodealliance/lucet#646</a>) and rustc_codegen_cranelift (<a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1127\">bjorn3/rustc_codegen_cranelift#1127</a> and <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1140\">bjorn3/rustc_codegen_cranelift#1140</a>) have already switched to the new x86-64 backend, and Wasmtime is largest remaining stakeholder on the old x86-64 backend by default, to my knowledge.</p>\n<h2>Remaining work: implementation</h2>\n<p>There are a few tasks remaining before we can switch Wasmtime's backend:</p>\n<ul>\n<li>We need various Windows support bits: fastcall ABI support (#2678) and unwind-info generation. I plan to get both of these in soon.</li>\n<li>And I think that's it!</li>\n</ul>\n<p>Switching the default backend for the <code>cranelift-codegen</code> crate is technically a separate decision but IMHO can and should happen at the same time. To do so:</p>\n<ul>\n<li>We need to update filetests: there are a number of golden-output tests that should be updated, and there are many tests that make assertions about old-backend-specific results (e.g. encodings) or using old-backend-specific functionality (e.g. regalloc constraints on CLIF values). A first pass at this would be to just label all tests that rely on the old backend with a feature flag, like <code>experimental_x64</code> tests have now, and continue running them with the old backend on CI for now. We could then look at which of these should be ported, if we lack any test coverage on the new backend.</li>\n<li>There are probably other unit tests throughout the codebase that make some assumptions based on the old backend's output.</li>\n</ul>\n<h2>Making the switch</h2>\n<p>My proposed course of action is to (i) finish the Windows-specific implementation, then (ii) put together a PR that makes the switch and look at where CI shows issues. A single PR can switch the default for Wasmtime, cranelift-codegen, and fix up unit tests/filetests at the same time.</p>\n<p>We should talk about what happens to the old backend as well, though that can be a separate discussion after the default-switch occurs. (I can create an issue to track this when the switch occurs.) Until we remove it, we can maintain the ability to select it with a non-default feature, and we can continue to run CI tests for it, just as we run tests for the new backend today.</p>\n<p>To make the switch, though, we should ensure that we have the appropriate sign-offs and that there will be no unforeseen issues. IMHO we should allow some time to hear from the community and consider any concerns or overlooked issues. Hopefully maintaining the ability to use the old backend at least in the medium-term will address any severe concerns, but switching the default does still have an impact that we want to consider.</p>\n<h2>Open questions</h2>\n<p>So, all that said, a few questions for folks here:</p>\n<ul>\n<li>Are there any other issues I've missed above that require implementation before we switch?</li>\n<li>Is there general agreement that (i) we should switch the default for <code>cranelfit-codegen</code> at the same time as Wasmtime, (ii) maintain the ability to use the old backend under a feature flag, and (iii) test the old backend on CI at least for a while?</li>\n<li>Are there major stakeholders we should ping before this happens?</li>\n<li>It may be good to use the BA RFC process to get a formal sign-off on the switch; I would tend toward this, to ensure everyone's on board. Do folks agree? If so, I'll go ahead and draft something (it will be pretty short as most of the work has already happened!)</li>\n</ul>\n</blockquote>",
        "id": 228832259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614885110
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[x] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[x] debugging support for generated code.</li>\n<li>[x] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[x] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[x] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[x] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[x] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[x] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 228832577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614885225
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-791277067\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<blockquote>\n<p>We should talk about what happens to the old backend as well, though that can be a separate discussion after the default-switch occurs.</p>\n</blockquote>\n<p>+1; in the short run, I strongly think it would be nice to keep the old backend around, for a release or two, behind a switch, so that if some users  run into crashes/issues with the new backend, they have a way to revert it locally, report back the issues, so we can fix it before a following release (and in the absolute worst case, revert to the old backend).</p>\n<blockquote>\n<p>Are there any other issues I've missed above that require implementation before we switch?</p>\n</blockquote>\n<p>It would be really nice to have some performance numbers before/after, just so people can consider if 1. there are speedups/slowdowns, 2. if there are slowdowns, how bad/acceptable they are and should require blocking the transition.</p>\n<blockquote>\n<p>Is there general agreement that (i) we should switch the default for cranelfit-codegen at the same time as Wasmtime, (ii) maintain the ability to use the old backend under a feature flag, and (iii) test the old backend on CI at least for a while?</p>\n</blockquote>\n<p>Doing the opposite (i.e. switching default backend in Cranelift and in Wasmtime at different times) would only be valuable if there were a lot of Cranelift embedders who could report back to us in the time window between the two switches. Since we've collaborated closely with the cg_clif backend, which is probably the second largest user of Cranelift, and there aren't many others, I tend towards switching both at the same time.</p>\n<blockquote>\n<p>It may be good to use the BA RFC process to get a formal sign-off on the switch; I would tend toward this, to ensure everyone's on board. Do folks agree? If so, I'll go ahead and draft something (it will be pretty short as most of the work has already happened!)</p>\n</blockquote>\n<p>+1, this issue predated the existence of RFCs in the Bytecode Alliance, so it even could be moved in the RFC repository as a background discussion.</p>\n</blockquote>",
        "id": 228920695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614935133
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936#issuecomment-813516346\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>For the record, this discussion was continued and merged as an RFC in <a href=\"https://github.com/bytecodealliance/rfcs/issues/10\">bytecodealliance/rfcs#10</a>.</p>\n<p>And, as of today, it was fixed in #2718 :-) Closing!</p>\n</blockquote>",
        "id": 233201783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617643268
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1936\">Issue #1936</a>:</p>\n<blockquote>\n<p>TL;DR: what would it take to deprecate the “old” backend in favor of the “new” backend for code generation?</p>\n<h1>Context</h1>\n<p>The compilation pipeline in Cranelift currently does instruction selection (through legalizations) before optimizing the intermediate representation (IR), applying register allocation on it, and then generating the machine code. From the point of view of Cranelift, these last steps can be seen as a “backend” that generates machine code for different target architectures.</p>\n<p>The previous backend was a bit complicated to work with: it was using the DSL from the codegen/meta crate, with concepts hard to approach and explain (like Recipes), it generated Rust code that could get out of sync with the non-meta crate or contain compile errors, etc. (see also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1141\">https://github.com/bytecodealliance/wasmtime/issues/1141</a>). A decision was made to work on a new backend (sometimes referred to as the “machinst” backend). This was presented in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1174\">https://github.com/bytecodealliance/wasmtime/issues/1174</a> and has landed since then, as an alternative backend (viz., in addition to the existing one).</p>\n<p>As of today, the old backend supports generating machine code for (some subset of) RISC-V, x86 64 bits and 32 bits. The new backend supports generating machine code for aarch64, and has a work-in-progress backend for x86_64. The duplication of x86_64 in both the old and new backends imply that both backends move ahead in parallel. This makes it harder for the new backend to catch up with the old one as new features are being added, and can generate frustration as different teams with different priorities work on different backends.</p>\n<p>The Mozilla Spidermonkey team has enough confidence in the new backend, which we consider to be pleasant to work with (developer ergonomics), fast enough for our use case (both compile-time and generated code throughput), and it has the potential for more compile-time and code quality optimizations in the long run, so we think it is a good time to start this discussion.</p>\n<h1>The proposal</h1>\n<p>We propose that at some point in the future, we entirely move away from the “old” backend (that is, remove it, as well as all the associated code in the meta language), and use the “new” backend, for all target architectures, and that the only possible way to implement a new target is to do it through the new backend. Notably, since x86 is the main target in the old backend, this means removing the old x86 backend.</p>\n<p>Of course, this can’t be done until all the primarily involved stakeholders are satisfied with this idea and don’t have any strong objections in moving forward. This RFC is a first step at identifying what the acceptance criterias would be to make it possible to transition, and what a plan would be to make this realistic.</p>\n<p>What this is not about: removing the entire meta language. This may or may not be done in the future (if we want to do it, then moving over to the new backend is a first step).</p>\n<h1>Acceptance criteria</h1>\n<p>Note that these criteria are not definite and could evolve over time, based on our discussions here.</p>\n<ul>\n<li>Features: the new backend should support all the features that are effectively used by all the stakeholders, including all the WebAssembly (wasm) features that have been implemented so far in the old backend.<ul>\n<li>Target-independent features:<ul>\n<li>[x] support wasm MVP features + lightweight extensions (mutable globals, bulk memory ops)</li>\n<li>[x] support wasm reftypes</li>\n<li>[x] support wasm multi-value</li>\n<li>[x] debugging support for generated code.</li>\n<li>[x] implement enough of x86_64 to support these features.</li>\n</ul>\n</li>\n<li>Performance: since the new backend came with its own instruction selection and with a new register allocation, its performance characteristics are likely to be different from those of the old backend.<ul>\n<li>[ ] <em>CLIR compile time</em>: the new backend should compile code as fast as or faster than the old backend, for a set of wasm benchmarks (to be determined).</li>\n<li>[ ] <em>generated code quality</em>: the new backend should generate code that runs at least as fast as or faster than the code generated by the old backend, for a set of wasm benchmarks (to be determined).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Security and quality:<ul>\n<li>[x] <em>CL testing</em>: pass all the existing CLIF tests</li>\n<li>[ ] Major stakeholders/embedders pass tests</li>\n<li>[x] <em>fuzzing</em> should run for some time and fuzz bugs should be fixed</li>\n</ul>\n</li>\n<li>Stakeholders supported:<ul>\n<li>[x] <em>Wasmtime testing</em>: pass all the existing wasmtime tests using Cranelift as the compiler</li>\n<li>[x] <em>SpiderMonkey testing</em>: pass all the existing SpiderMonkey tests using Cranelift as the compiler</li>\n<li>Other Bytecode Alliance stakeholders give their “go” (see below).</li>\n</ul>\n</li>\n</ul>\n<p>Feel free to comment about other things that are important to you, and please explain why (if it is not obvious)! Good criteria tend to be objectively quantifiable, measurable and/or bimodal (done or not done).</p>\n<h2>Potential additions to this list</h2>\n<p>These are additions to the above list, and need to be discussed as a group:</p>\n<ul>\n<li>[x] enough support to not break cg_clif, a Rust backend initiative using Cranelift for code generation. It is hard to make a guess about the amount of work that will be required to keep cg_clif working, while it is our hope that most of it should be covered by our work, and the rest could be a community-supported effort.</li>\n<li>[ ] porting the x86 32-bits platform. While most of the code could be reused between x86_64 and x86 32-bits, it may not be a primary target right now, and we might or might not want to block the transition for this.</li>\n</ul>\n<h1>Proposed planning</h1>\n<h2>Step 1: agree on the proposal</h2>\n<p>This is the current step that’s being done as part of this issue. See below.</p>\n<h2>Step 2: get to a point where we can try the new backend in real-world settings</h2>\n<p>Once we get to a point where we can compile code for large wasm programs mostly using wasm MVP features, we’ll be able to do a performance analysis, comparing on the two axis presented above. This will give us confidence in how fast we can move forward with this plan, or if we should revisit some implementation decisions, and chase more performance first.</p>\n<h2>Step 3: finish implementation of remaining features</h2>\n<p>This means implementing all the Features mentioned in the above list of criteria, as well as passing tests from all the test suites. At this point, we could put up an official depreciation notice for the old backend, and encourage people to use the new backend in general.</p>\n<h2>Step 4: do a final approval and switch</h2>\n<p>Based on an evaluation of performance, as well as feedback from the different stakeholders, we can eventually decide to enable the new backend by default. Removal of the code supporting the old backend may or may not happen at the same time; deferring its removal for a short period of time allows to switch the default back to the old backend, in case of unexpected consequences.</p>\n<h1>Future work</h1>\n<p>There is future work that is going to be enabled by switching to the new backend. At this point, these are mostly ideas, and it is not the point of this issue to discuss the design / feasibility / interest aspects of these ideas.</p>\n<ul>\n<li>Code removal in the meta language as well as in the codegen crate may lower the overall build time of Cranelift, see also <a href=\"https://github.com/bytecodealliance/cranelift/issues/1318\">https://github.com/bytecodealliance/cranelift/issues/1318</a> which shows that large functions in the encodings/recipes system take some time to compile (and they generate large functions too).</li>\n<li>After removal of the old backend, since the instruction selection really happens at the MachInst IR (Vcode) level, then all the CLIF instructions which were present for the sole benefit of being available in the backend can be removed. This includes CLIF instructions that are target-specific (e.g. x86_udivmodx), as well as instructions which offer alternative operand modes (e.g. iadd_imm is an alternate operand mode for iadd, allowing to express an “int add with immediate” with two different CL instructions, making pattern-matching more complex).</li>\n<li>Translating from wasm to target-independent Vcode directly (and then adapting the lowering machinery to use this) is something we would like to investigate. In an even longer horizon, we could get back to having a single IR container again (parameterized by instruction/opcode-space) and carry over optimizations onto it, while avoiding some of the pitfalls of the current CLIF design (such as performance impact of in-place editing).</li>\n</ul>\n<h1>Thoughts?</h1>\n<p>If you have any comments, questions, alternative proposals, objections, please feel free to write them down here. Note that we’re looking for consensus here, which is gained not when everybody agrees about all the details, but when nobody has strong objections anymore. So please carefully discuss objections and assume good intent from everyone involved in the process :-) Thanks!</p>\n</blockquote>",
        "id": 233201785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617643269
    }
]