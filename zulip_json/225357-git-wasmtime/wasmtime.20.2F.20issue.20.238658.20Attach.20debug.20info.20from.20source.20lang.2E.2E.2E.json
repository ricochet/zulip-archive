[
    {
        "content": "<p>oovm opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently, <code>wasmtime</code>'s error in wat text files are based on the compilation offset.</p>\n<p>When an error occurs, it is very confusing where the error occurred.</p>\n<p>I would like to attach some source language location information to point out the error location.</p>\n<p>Similar to:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"c1\">;; @url: file://path/position.wasm:line:column</span>\n<span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$test-type</span> <span class=\"p\">(</span><span class=\"err\">externref</span><span class=\"p\">))</span>\n<span class=\"c1\">;; @url: file://path/position.wasm:offset</span>\n<span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$test-function</span>\n    <span class=\"c1\">;; @file: main.rs:12:24</span>\n    <span class=\"p\">(</span><span class=\"k\">block</span> <span class=\"nv\">$test-block</span>\n\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p><code>binaryen</code> supports similar features<br>\nat: <a href=\"https://github.com/WebAssembly/binaryen/blob/921644ca65afbafb84fb82d58dacc4a028e2d720/test/lit/debug/full.wat#L49-L64\">https://github.com/WebAssembly/binaryen/blob/921644ca65afbafb84fb82d58dacc4a028e2d720/test/lit/debug/full.wat#L49-L64</a></p>\n<h4>Benefit</h4>\n<p>Clearer error location</p>\n<h4>Implementation</h4>\n<p>Unknown, perhaps we can parse custom instructions and mixin them into the final binary wasm with debugger info.</p>\n<h4>Alternatives</h4>\n<p>Wait for <a href=\"https://github.com/elliottt/rfcs/blob/trevor/wasmtime-debugging/accepted/wasmtime-debugging.md#source-language-debugging\">source language debugging</a>.</p>\n<p>But I'm not quite sure how this works, or how to integrate it with my pipeline.</p>\n<p>Many times I write wat files manually, without any toolchain.<br>\n</p>\n</blockquote>",
        "id": 439584148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716215013
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2120606145\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>Thanks for the report! The reason for this is the design of how Wasmtime processes text files today. Wasmtime itself doesn't have much special processing but instead it translates the text to binary very early on in the process and then pretends from then on that a binary was given. That leads to binary offsets for errors even when the input is text, which I agree isn't a great experience.</p>\n<p>I'm curious though that there's sort of two features here and which you'd find the most useful:</p>\n<ol>\n<li>One feature is the ability to report errors based on the input <code>*.wat</code> syntax, not the binary format. That wouldn't require any comments or annotations or anything like that, but the error message for a validation error for example should point to the erroneous instruction.</li>\n<li>A separate feature is the annotations you're listing here. For those that could be split into (a) when printing a wasm binary the annotations are emitted and (b) when parsing a wasm binary the annotations are used for error messages rather than the original position in the <code>*.wat</code>.</li>\n</ol>\n<p>Both of these are likely to be somewhat tricky to implement at this time given that there's not a standard currently (beyond \"just include all of dwarf\") for wasm per se. I think it'd be reasonable to have this though!</p>\n</blockquote>",
        "id": 439587917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716216212
    },
    {
        "content": "<p>oovm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2121709036\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>For solution 1, I first think about when it is necessary to write wat manually</p>\n<ul>\n<li>Learn how to use wat</li>\n<li>Communicate or experience new proposed features</li>\n<li>Write test cases</li>\n<li>Debug optimizer pass or compiler artifacts</li>\n</ul>\n<p>Generally speaking, these codes are small in size, and it is not difficult to infer the wrong instructions based on the error message</p>\n<ul>\n<li>Decompile highly optimized released wasm and try to find out where the problem is in wat</li>\n</ul>\n<p>Marking the wrong instructions is of great help at this time, but I doubt whether this thing itself is meaningful.</p>\n<p>Therefore, I think that from the perspective of usage scenarios, maintaining a separate set of wat format error reporting benefits is not obvious.</p>\n<p>From the implementation point of view, the parser needs to track the line column of each instruction and pass it layer by layer at runtime, and the changes to the backend are also relatively large.</p>\n<hr>\n<p>For solution 2, the biggest problem is that there is no standardization. Other tools may also use special tags independently, just like <code>binaryen</code> does now.</p>\n<p>Another hidden problem is whether wasm cg is willing to standardize. Maybe people have no motivation to do so: <a href=\"https://github.com/WebAssembly/debugging/issues/19#issuecomment-1984894109\">https://github.com/WebAssembly/debugging/issues/19#issuecomment-1984894109</a></p>\n<p>From the implementation point of view, binary debugging is a determined goal. The change is that the front-end needs to parse some additional custom information, and the runtime and back-end do not need to be changed.</p>\n<p>When changes occur or corresponding proposals appear, the cost of changes is relatively small.</p>\n<hr>\n<p>In summary, I prefer option 2 when choosing between the two, unless there is a better solution</p>\n</blockquote>",
        "id": 439729031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716265150
    },
    {
        "content": "<p>oovm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2121717517\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>Another unknown question is what does the wat product of decompiling wasm with DWARF information look like?</p>\n<p>Will debugger info be erased directly?</p>\n<p>If not, is it appropriate to use the <a href=\"https://github.com/WebAssembly/annotations/blob/main/proposals/annotations/Overview.md\">annotations proposal</a>?</p>\n<p>If possible, this is very suitable as a bridge for two-way conversion</p>\n</blockquote>",
        "id": 439729859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716265767
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2122836124\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>Currently with <code>wasm-tools print</code> if you've got a wasm with dwarf it'll print <code>(@custom (after data) \".debug.XXXX\" \"...\")</code> which is basically just there to show you it exists, it doesn't actually work. That debuginfo is almost certainly broken once the text goes back to binary (since the dwarf handles binary offsets and binary -&gt; text -&gt; binary likely changes binary offsets, e.g. reencoding lebs into their minimal size)</p>\n<p>Otherwise though the annotations proposal is likely the way to go here, but it's still a question of formats. Wasmtime supports DWARF as a means of converting binary offsets to filenames/line numbers but DWARF has no definition in the wasm text format with annotations, and supporting the entirety of dwarf with annotations would be a pretty ambitious project. On the web there's source maps which is not DWARF and Wasmtime doesn't support. I'm not personally familiar with source maps, but the challenge again would be representing all of source maps in the text format which may or may not be feasible.</p>\n<p>There's the other alternative of creating a third means of mapping filenames/line numbers to binary offsets. That could be customized just for the wasm text format and have a clear definition with the annotations proposal. The downside of this though is that it's a third alternative and support would need to be added to all consuming/producing tools, which is likely not trivial.</p>\n<p>I would hazard a guess that source maps might be the way to go here. That would require investigating if it's reasonable to represent source maps as annotations (which I'm not sure if it is) in the text format and then adding support to Wasmtime/wasm-tools/etc. I'm also not sure who actually produces source maps originally (e.g. tools that do this, I just know that they exist)</p>\n</blockquote>",
        "id": 439837280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716303598
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2122871867\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>If you're going to add support for generating debug info to <code>wasm-tools</code>, use DWARF instead of source maps. You don't _have_ to emit all the info that DWARF supports emitting (e.g. full source variable recovery) and can emit just the bits that are equivalent to what you'd put in a source map (the <code>.debug_line</code> section). But DWARF generally has a much higher quality of toolchain support for reading/writing it and is much more compact (binary encoding rather than base64 strings).</p>\n</blockquote>",
        "id": 439841251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716304673
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2122973836\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>Ah yes that's a good point, and sorry yeah I shouldn't say one approach should definitely be used over the other. Adding limited support for annotations&lt;-&gt;DWARF to tooling I think could also be reasonable.</p>\n</blockquote>",
        "id": 439852163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716307835
    },
    {
        "content": "<p>oovm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2130761948\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>If I want to add support for <code>.debug_line</code> in wat where do I start?</p>\n<p>I tried tracing from this call</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/tests/all/traps.rs#L817-L828\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/tests/all/traps.rs#L817-L828</a></p>\n<p>I found</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/crates/environ/src/compile/module_environ.rs#L792-L825\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/crates/environ/src/compile/module_environ.rs#L792-L825</a></p>\n<p>But I don't know how to make the front end fill in dwarf.debug_line based on the wat@custom section</p>\n</blockquote>",
        "id": 440608118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716612769
    },
    {
        "content": "<p>oovm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2130761948\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>If I want to add support for <code>.debug_line</code> in wat where do I start?</p>\n<p>I tried tracing from this call</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/tests/all/traps.rs#L817-L828\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/tests/all/traps.rs#L817-L828</a></p>\n<p>I found</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/crates/environ/src/compile/module_environ.rs#L792-L825\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/crates/environ/src/compile/module_environ.rs#L792-L825</a></p>\n<p>But I don't know how to make the front end fill in dwarf.debug_line based on the wat <code>@custom</code> section</p>\n</blockquote>",
        "id": 440608127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716612781
    },
    {
        "content": "<p>oovm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2130761948\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>If I want to add support for <code>.debug_line</code> in wat where do I start?</p>\n<p>I tried tracing from this call</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/tests/all/traps.rs#L817-L828\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/tests/all/traps.rs#L817-L828</a></p>\n<p>I found</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/crates/environ/src/compile/module_environ.rs#L792-L825\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/crates/environ/src/compile/module_environ.rs#L792-L825</a></p>\n<p>But I don't know how to make the frontend fill in <code>dwarf.debug_line</code> based on the wat <code>@custom</code> section</p>\n</blockquote>",
        "id": 440608140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716612816
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2131639117\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>For my answer below I'm assuming that the scope of the implementation you're interested in is to add the ability to have <code>(@foo ...)</code> annotations in the text format, probably interspersed with actual instructions, which ends up getting the <code>.debug_*</code> sections filled out. </p>\n<p>To do that you'll want to take a look at <a href=\"https://github.com/bytecodealliance/wasm-tools\">https://github.com/bytecodealliance/wasm-tools</a>, specifically the <code>wast</code> crate located at <code>crates/wast</code>. I'd recommend reading over <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1394\">https://github.com/bytecodealliance/wasm-tools/pull/1394</a> as well which implements branch hints which is the closest (ish) feature to what you're looking to implement. The various steps involved will be:</p>\n<ul>\n<li>Invent a desired syntax, for example <code>(@debug_line \"foo.rs\" 10 3)</code> or something like that.</li>\n<li>Add parsing support to <code>wast</code> to parse these annotations. It'll probably be around <code>expr.rs</code> and you'll store metadata <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/f1898f46bb9d96f0f09682415cb6ccfd6a4dca79/crates/wast/src/core/expr.rs#L16-L19\">around here</a>.</li>\n<li>Update <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/f1898f46bb9d96f0f09682415cb6ccfd6a4dca79/crates/wast/src/core/binary.rs#L713-L732\">encoding of expressions</a> to return not only branch hint metadata but additionally debug info metadata (this is the location where actual binary offsets are created since it happens during emission)</li>\n<li><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/f1898f46bb9d96f0f09682415cb6ccfd6a4dca79/crates/wast/src/core/binary.rs#L153-L158\">After functions are encoded</a> you'll check to see if there's any debuginfo present and if so emit the requisite <code>.debug_*</code> custom sections. For this you'll probably want to use the <code>gimli</code> crate to create dwarf sections.</li>\n</ul>\n<p>I don't know enough about DWARF myself to be able to suggest enough about what the annotations should look like or what dwarf sections are going to be emitted. You probably won't have to emit every section in a <code>gimli::Dwarf</code> though as much of those aren't related to just filename/line number info I think.</p>\n</blockquote>",
        "id": 440670278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716678520
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658#issuecomment-2135765027\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8658\">issue #8658</a>:</p>\n<blockquote>\n<p>FWIW, there is a simple DWARF-writing example here: <a href=\"https://github.com/gimli-rs/gimli/blob/master/crates/examples/src/bin/simple_write.rs#L106\">https://github.com/gimli-rs/gimli/blob/master/crates/examples/src/bin/simple_write.rs#L106</a></p>\n</blockquote>",
        "id": 441083438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716917075
    }
]