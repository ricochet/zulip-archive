[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>My changes in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8861\">https://github.com/bytecodealliance/wasmtime/pull/8861</a> introduced a change in the default behavior of <code>wasmtime serve</code>. Notably this program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">T</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">proxy</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">incoming_handler</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">IncomingRequest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">outparam</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResponseOutparam</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"request.method = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"request.scheme = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">scheme</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"request.authority = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">authority</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OutgoingResponse</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"n\">ResponseOutparam</span><span class=\"p\">::</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">outparam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://github.com/user-attachments/files/15995214/wat.wasm.gz\">(compiled component)</a></p>\n<p>When run with <code>wasmtime serve</code> and hit with <code>curl http://localhost:8080</code> it prints:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Serving</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"c1\">//0.0.0.0:8080/</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">scheme</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Scheme</span><span class=\"p\">::</span><span class=\"n\">Http</span><span class=\"p\">)</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">authority</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"localhost:8080\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>On <code>main</code>, however, it prints</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Serving</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"c1\">//0.0.0.0:8080/</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">scheme</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">authority</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span>\n</code></pre></div>\n<p>This regression is due to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8861/files#diff-7da576f5c8e7ffe1f4d334844eec78ed27e092a9bacdad959a54468904d870b2L414\">these changes</a> because I didn't understand what they were doing.</p>\n<p>Now why wasn't this caught by the test suite? I tried writing a test for this and it passed, but apparently it's due to our usage of <br>\n<code>hyper::Request::builder().uri(\"http://localhost/\")</code> in the test suite. That creates an HTTP requests that looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">GET</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"c1\">//localhost/ HTTP/1.1</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>where using <code>curl</code> on the command line generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">GET</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"o\">/</span><span class=\"mf\">1.1</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>That leads me to this issue. What should <code>scheme</code> and <code>authority</code> report in these two cases for <code>wasmtime serve</code> by default? The previous behavior means that <code>GET /</code> could not be distinguished from <code>GET http://localhost/</code> which naively seems like what <code>scheme</code> and <code>authority</code> are trying to map to.</p>\n<p>Is the previous behavior of <code>wasmtime serve</code> buggy? Is the current behavior buggy? Should the spec be clarified?</p>\n<p>cc @elliottt @pchickey </p>\n</blockquote>",
        "id": 447333355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719435042
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192609107\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>I'll note that the difference can be seen with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">curl</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">request</span><span class=\"o\">-</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"c1\">//localhost/ http://localhost:8080</span>\n</code></pre></div>\n<p>vs </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">curl</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"c1\">//localhost:8080</span>\n</code></pre></div>\n<p>in terms of how the headers are set. The former is basically what our test suite does while the latter is what the <code>curl</code> command line does by default.</p>\n</blockquote>",
        "id": 447333887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719435177
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192662391\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>The former (full URL in request) is incorrect; that form is only applicable to CONNECT methods.</p>\n</blockquote>",
        "id": 447340859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719437643
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192662391\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>The former (full URL in first line of the request) is incorrect; that form is only applicable to CONNECT methods.</p>\n</blockquote>",
        "id": 447340906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719437663
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192662391\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>The former (full URL in first line of the request) is incorrect; that form is only applicable to the CONNECT method and HTTP/1.0 iirc..</p>\n</blockquote>",
        "id": 447340937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719437691
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192662391\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>The former (full URL in first line of the request) is incorrect; that form is only applicable to the CONNECT method and HTTP/1.0 iirc.</p>\n</blockquote>",
        "id": 447340942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719437696
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192670175\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>The former (full URL in request) is incorrect; that form is only applicable to CONNECT methods.</p>\n<p>Edit: looks like I might be wrong about it being incorrect per se; it might just be very uncommon.</p>\n</blockquote>",
        "id": 447341477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719437953
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192670175\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>The former (full URL in request) is incorrect; that form is only applicable to CONNECT methods.</p>\n<p>Edit: looks like I might be wrong about it being incorrect per se; it might just be very uncommon.</p>\n<p><a href=\"https://www.rfc-editor.org/rfc/rfc2616#section-5.1.2\">https://www.rfc-editor.org/rfc/rfc2616#section-5.1.2</a></p>\n</blockquote>",
        "id": 447341548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719437989
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192710598\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>That makes sense, and means we should probably update our tests, but I guess I'm also curious still what the behavior here should be. For example why do <code>scheme</code> and <code>authority</code> return an <code>Option</code> at the WIT level? Are they intended to map to this or is it expected that they're effectively always <code>Some</code>?</p>\n</blockquote>",
        "id": 447346274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719440101
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192740901\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p><code>scheme</code> is derived from out of band info: whether the request came in over TLS or not</p>\n</blockquote>",
        "id": 447349943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719441917
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2192740901\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p><code>scheme</code> is derived from out of band info: whether the request came in over TLS or not.<br>\n<code>authority</code> was optional in http/1.0 which I believe is why hyper makes it optional. I don't know if that is the reason here though.</p>\n</blockquote>",
        "id": 447350326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719442085
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2194307082\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>my take is that we should have wasi:http either always provide an authority, or provide the <code>host</code> header. Otherwise there's no standard way for content to learn about the authority it's called under. I know that @lukewagner concluded that we must never provide the <code>host</code> header. If that stands, I conversely think that we must continue providing the authority for incoming requests.</p>\n<p>In effect, that means that for incoming requests what content sees is always the <code>absoluteURI</code> form, which the RFC seems to indicate is the way forward, too:</p>\n<blockquote>\n<p>To allow for transition to absoluteURIs in all requests in future<br>\n   versions of HTTP, all HTTP/1.1 servers MUST accept the absoluteURI<br>\n   form in requests, even though HTTP/1.1 clients will only generate<br>\n   them in requests to proxies.</p>\n</blockquote>\n</blockquote>",
        "id": 447439774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719483228
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2194542766\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>Don't pay too much attention to the 1.1 spec for future direction. HTTP/2 makes authority even more special by splitting it into a \"pseudo-header\".</p>\n</blockquote>",
        "id": 447463872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719490937
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2194542766\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>Don't pay too much attention to the 1.1 spec for future direction. HTTP/2 makes authority even more special by (usually) splitting it into a \"pseudo-header\".</p>\n</blockquote>",
        "id": 447470887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719492849
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2194542766\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>Don't pay too much attention to the 1.1 spec for future direction. HTTP/2 and /3 make authority even more special by (usually) splitting it into a \"pseudo-header\": <a href=\"https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#field.host\">https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#field.host</a></p>\n</blockquote>",
        "id": 447471149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719492922
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2194683015\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>The <a href=\"https://github.com/bytecodealliance/wasmtime/blob/761f044efbb6d7465b88d723619168919b30ce0b/src/commands/serve.rs#L417-L428\">previous logic</a> for scheme and authority were:</p>\n<ul>\n<li>Scheme: If the HTTP request used an \"absolute URI\" then the scheme comes from that, otherwise it's hardcoded as Http</li>\n<li>Authority: If the HTTP request used an \"absolute URI\" use the hostname, otherwise if the \"Host: \" header is provided use that, otherwise consider it an invalid http request and don't even invoke wasm.</li>\n</ul>\n<p>Given that <code>wasmtime serve</code> does not itself support HTTPS, should the scheme always be HTTP in this case regardless of what the \"absolute URI\" says? Similarly <code>wasmtime serve</code> has no support for multi-domain hosting or anything like that so is it correct to lookup the authority based on the request?</p>\n<p>A related but orthogonal question is that right now the in-memory store for this information is <code>hyper::Request&lt;T&gt;</code> and I'm not sure if that's the right choice here either. </p>\n<p>Basically I'm still personally very confused about what the desired behavior is and how we would go about implementing it.</p>\n</blockquote>",
        "id": 447476814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719494561
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2197396060\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>Great question.  First of all, from asking some HTTP folks, I believe it is the case that we could tighten the spec wording to say that for methods other than CONNECT and OPTIONS, there must <em>always</em> be an <code>authority</code> (i.e., the return value is <code>some</code>).  Apparently, CONNECT and OPTIONS have an unfortunate <code>*</code> option that simply has no authority.</p>\n<p>Next, my understanding from RFC 9110 is that the <code>authority</code> either comes from the <code>:authority</code> pseudo-header in H/2/3 or the <code>Host</code> header in H/1, and if both are present, they are not allowed to disagree (and this is Web-compatible).  Thus, I think what WASI HTTP should say is that:</p>\n<ul>\n<li><code>Host</code> is in the definitely-forbidden headers list</li>\n<li>The <code>request.authority</code> field is derived in a transport-dependent manner (and required to be present for non-CONNECT/OPTIONS)</li>\n</ul>\n<p>This allows the host implementation to do the transport-appropriate thing for requests coming in or out over the wire.</p>\n</blockquote>",
        "id": 447835907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719597137
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2215229355\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>Ok so for the use case of <code>wasmtime serve</code> specifically:</p>\n<ul>\n<li><code>[method]incoming-request.scheme</code> is always <code>some(http)</code> because we don't implement https yet</li>\n<li><code>[method]incoming-request.authority</code> uses the incoming URI's host if it's there (probably only for CONNECT and OPTIONS). Otherwise it uses <code>Host</code>, otherwise it returns .... None? <code>\"127.0.0.1\"</code>? The value of <code>--addr</code>?</li>\n</ul>\n<p>This all indicates to me that <a href=\"https://docs.rs/wasmtime-wasi-http/latest/wasmtime_wasi_http/trait.WasiHttpView.html#method.new_incoming_request\"><code>new_incoming_request</code></a> should take both a <code>scheme</code> and an <code>authority</code> argument rather than inferring these from the <code>Request</code> as well?</p>\n<p>(sorry I'm really looking for guidance/second opinions here, I don't know why things were originally constructed the way they are or if they're just how things got shaken out)</p>\n</blockquote>",
        "id": 449976578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720470890
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2215294745\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<blockquote>\n<p>otherwise it returns .... None?</p>\n</blockquote>\n<p>Do we want/need to support HTTP/1.0? afaik <code>host</code> is mandatory for 1.1</p>\n</blockquote>",
        "id": 449980465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720472467
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2215294745\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<blockquote>\n<p>otherwise it returns .... None?</p>\n</blockquote>\n<p>Do we want/need to support HTTP/1.0? afaik <code>host</code> is mandatory for 1.1; we could just 400 if a request has no host/authority.</p>\n</blockquote>",
        "id": 449981408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720472667
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2215294745\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<blockquote>\n<p>otherwise it returns .... None?</p>\n</blockquote>\n<p>Do we want/need to support HTTP/1.0? afaik <code>host</code> is mandatory for 1.1; we could just 400 if a request has no host/authority.</p>\n<p>Alternatively, it appears that it is valid for <code>host</code> to be empty, so a 1.0 request without <code>host</code> could just imply that.</p>\n</blockquote>",
        "id": 449981686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720472733
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2215294745\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<blockquote>\n<p>otherwise it returns .... None?</p>\n</blockquote>\n<p>Do we want/need to support HTTP/1.0? afaik <code>host</code> is mandatory for 1.1; we could just 400 if a request has no host/authority.</p>\n<p>Alternatively, it appears that it is valid for <code>host</code> to be empty, so an HTTP/1.0 request without <code>host</code> could just imply that.</p>\n</blockquote>",
        "id": 449981777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720472752
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2215392465\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>Ah ok I didn't realize that was a 1.0 thing. Sounds like it should search for <code>Host</code> as a header in the host-side <code>hyper::Request</code> for the authority if it's not present in the URI. I try to make a PR with these changes tomorrow.</p>\n</blockquote>",
        "id": 449986998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720474703
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878#issuecomment-2215583213\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>The impression that I got talking to an HTTP server maintainer is that it's web-compatible to require the <code>Host</code> field (rejecting if it's absent in HTTP 1.0 or 1.1) and that allowing an empty <code>authority</code> in cases other than CONNECT/OPTIONS can transitively lead to security issues (random googling found <a href=\"https://medium.com/the-volatile-triad/hacking-the-blank-host-header-trick-e280efbaf274\">this</a> e.g.).  Similarly, RFC 9110 (which also intends to be Web-compatible) says that there <a href=\"https://www.rfc-editor.org/rfc/rfc9110#name-host-and-authority\">MUST</a> be a <code>Host</code> header (when there is no <code>:authority</code> pseudo-header) without making an exception for HTTP 1.0.  Thus, I'd suggest making it an error in <code>wasmtime serve</code> if there is no <code>Host</code> in HTTP 1.0, at least to start with, and see if anyone complains.</p>\n</blockquote>",
        "id": 450010062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720483123
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8878\">issue #8878</a>:</p>\n<blockquote>\n<p>My changes in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8861\">https://github.com/bytecodealliance/wasmtime/pull/8861</a> introduced a change in the default behavior of <code>wasmtime serve</code>. Notably this program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">T</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">proxy</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">incoming_handler</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">IncomingRequest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">outparam</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResponseOutparam</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"request.method = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"request.scheme = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">scheme</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"request.authority = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">authority</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OutgoingResponse</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"n\">ResponseOutparam</span><span class=\"p\">::</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">outparam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://github.com/user-attachments/files/15995214/wat.wasm.gz\">(compiled component)</a></p>\n<p>When run with <code>wasmtime serve</code> and hit with <code>curl http://localhost:8080</code> it prints:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Serving</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"c1\">//0.0.0.0:8080/</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">scheme</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Scheme</span><span class=\"p\">::</span><span class=\"n\">Http</span><span class=\"p\">)</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">authority</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"localhost:8080\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>On <code>main</code>, however, it prints</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Serving</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"c1\">//0.0.0.0:8080/</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">scheme</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span>\n<span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">.</span><span class=\"n\">authority</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span>\n</code></pre></div>\n<p>This regression is due to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8861/files#diff-7da576f5c8e7ffe1f4d334844eec78ed27e092a9bacdad959a54468904d870b2L414\">these changes</a> because I didn't understand what they were doing.</p>\n<p>Now why wasn't this caught by the test suite? I tried writing a test for this and it passed, but apparently it's due to our usage of <br>\n<code>hyper::Request::builder().uri(\"http://localhost/\")</code> in the test suite. That creates an HTTP requests that looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">GET</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"c1\">//localhost/ HTTP/1.1</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>where using <code>curl</code> on the command line generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">GET</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"o\">/</span><span class=\"mf\">1.1</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>That leads me to this issue. What should <code>scheme</code> and <code>authority</code> report in these two cases for <code>wasmtime serve</code> by default? The previous behavior means that <code>GET /</code> could not be distinguished from <code>GET http://localhost/</code> which naively seems like what <code>scheme</code> and <code>authority</code> are trying to map to.</p>\n<p>Is the previous behavior of <code>wasmtime serve</code> buggy? Is the current behavior buggy? Should the spec be clarified?</p>\n<p>cc @elliottt @pchickey </p>\n</blockquote>",
        "id": 450231758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720545074
    }
]