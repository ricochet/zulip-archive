[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>:</p>\n<blockquote>\n<p>ISLE's existing code-generation strategy doesn't generate the most efficient matching order for rules. This PR completely replaces it.</p>\n<p>With this PR applied, <code>wasmtime compile</code> retires 2% fewer instructions on the pulldown-cmark and spidermonkey benchmarks from Sightglass.</p>\n<p>A dev build of <code>cranelift-codegen</code> from an empty <code>target/</code> directory takes 2% less time. The build script, invoking ISLE, takes a little longer, but Rust can compile the generated code faster, so it balances out.</p>\n<p>This PR is ready for review, but I'm expecting review to take a few rounds of back-and-forth while we figure out what comments I should have written.</p>\n</blockquote>",
        "id": 315726670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670986129
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a>.</p>",
        "id": 315726671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670986129
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>.</p>",
        "id": 315906510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671048629
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>.</p>",
        "id": 315929295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671058026
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1218404576\">PR review</a>.</p>",
        "id": 315940574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064205
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049080103\">PR review comment</a>:</p>\n<blockquote>\n<p>Better name -- something like <code>ReadyTracker</code>?</p>\n</blockquote>",
        "id": 315940580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049078375\">PR review comment</a>:</p>\n<blockquote>\n<p>I wonder if there's a better name here: maybe <code>Item</code> or <code>Seq</code> or something like that?</p>\n</blockquote>",
        "id": 315940581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049091308\">PR review comment</a>:</p>\n<blockquote>\n<p>Verify that equality constraints are processed in the right order, such that we always have one non-<code>Matched</code> input to trigger the evaluation? Consider e.g. <code>a == b</code>, <code>c == d</code>, <code>b == c</code> in order: after the first two, all four are <code>Matched</code> but we haven't yet processed <code>b == c</code>...</p>\n</blockquote>",
        "id": 315940582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1218404576\">PR review</a>.</p>",
        "id": 315940583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049092227\">PR review comment</a>:</p>\n<blockquote>\n<p>Comment here to describe how many rules may reach this point: if not a multi-term, and if we've passed the overlap checker, then we should only have one rule if there is nothing to split on. But in a multi-term we may just be left with a bunch of rules to evaluate in priority order</p>\n</blockquote>",
        "id": 315940584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049078583\">PR review comment</a>:</p>\n<blockquote>\n<p>A top-level doc comment describing the structure of the code would be helpful here!</p>\n</blockquote>",
        "id": 315940585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049079983\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we define what <code>order</code> is here? Is it necessary to carry it separately from <code>Ready</code> or can it be integrated?</p>\n</blockquote>",
        "id": 315940586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049081842\">PR review comment</a>:</p>\n<blockquote>\n<p>doc: indexed by binding ID</p>\n</blockquote>",
        "id": 315940587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049085867\">PR review comment</a>:</p>\n<blockquote>\n<p>Document <code>order</code>: on input, it contains indices of rules we need to order at this point in recursion tree?</p>\n<p>Document recursion: does the recursive structure of the calls mirror the tree structure of output?</p>\n</blockquote>",
        "id": 315940588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049088302\">PR review comment</a>:</p>\n<blockquote>\n<p>Also: document that there is one ReadyTracker per block; they are created recursively</p>\n</blockquote>",
        "id": 315940589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049083800\">PR review comment</a>:</p>\n<blockquote>\n<p>Make note of binding-dependence-ID-order invariant allowing for a single pass propagation of transitive availability here</p>\n</blockquote>",
        "id": 315940590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049095616\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we explicitly list all <code>Binding</code> kinds here so that adding a new one forces consideration of this property?</p>\n</blockquote>",
        "id": 315940591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049099195\">PR review comment</a>:</p>\n<blockquote>\n<p>This is super-confusing and it seems maybe a different representation is in order: why should there ever be a test of <code>source == source</code> present? The explanation given seems to indicate that this triggers some other check; if so can we make that explicit?</p>\n</blockquote>",
        "id": 315940592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049089189\">PR review comment</a>:</p>\n<blockquote>\n<p><code>changed</code> here needs to consider whether <code>set_ready</code> above (line 225) updated the readiness of <code>source</code> as well</p>\n</blockquote>",
        "id": 315940593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049080910\">PR review comment</a>:</p>\n<blockquote>\n<p>Note here that the order is load-bearing, and why this order?</p>\n</blockquote>",
        "id": 315940594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064209
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049093257\">PR review comment</a>:</p>\n<blockquote>\n<p>Clarify invariant here and elsewhere: are the bindings named in <code>Condition</code> variants required to already be <code>use_expr</code>'d, or does the consumer of the <code>Condition</code>s do so?</p>\n</blockquote>",
        "id": 315940595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064209
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1049078900\">PR review comment</a>:</p>\n<blockquote>\n<p>Define what this means: produce a result (return or add to list of results)?</p>\n</blockquote>",
        "id": 315940596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671064209
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>.</p>",
        "id": 316389731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671240698
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1052760342\">PR review comment</a>:</p>\n<blockquote>\n<p>The name <code>scrutinee</code> is a little... archaic?... here -- perhaps something like <code>emit_expr_for_constraint_eval()</code>?</p>\n</blockquote>",
        "id": 316860799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671499037
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1223705047\">PR review</a>.</p>",
        "id": 316860803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671499040
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1052759585\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add a TODO here with the issue tracking a more full-featured integer type system in ISLE?</p>\n</blockquote>",
        "id": 316860807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671499044
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1223705047\">PR review</a>.</p>",
        "id": 316860810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671499048
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>.</p>",
        "id": 317075158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671590614
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>.</p>",
        "id": 317268889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671666615
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>.</p>",
        "id": 317279124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671675329
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055695022\">PR review comment</a>:</p>\n<blockquote>\n<p>A helper on <code>equal</code> might make this idiom a little clearer: it's basically asserting that <code>x</code> and <code>y</code> have overlapping equivalence classes (at least one element in common), right? Maybe something like <code>self.equal.overlaps(x, y)</code>?</p>\n</blockquote>",
        "id": 317420869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671731552
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1228022447\">PR review</a>.</p>",
        "id": 317420870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671731552
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1228022447\">PR review</a>.</p>",
        "id": 317420871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671731552
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055701567\">PR review comment</a>:</p>\n<blockquote>\n<p>This version of the logic is really close to complete, I think; the main thing that's still a bit unsatisfying to me is the dual use of <code>HasControlFlow::Equal(x, y)</code> as a sort of sentinel for \"check anything related to <code>x</code> (and normally inserted as <code>Equal(x, x)</code> but the second tuple field is ignored here) and as an actual pair to emit a check for below. Could we instead have two variants on <code>HasControlFlow</code> for the two cases, something like <code>EqualityInvolving(x)</code> and <code>Equal(x, y)</code>? Then we can insert the former as a candidate elsewhere, and we can panic if we see it when converting to <code>ControlFlow</code>. (Alternately, two different enums, one for the domain of each stage of processing; but I'm fine with keeping the union of the domains in one enum for expediency here if you want.)</p>\n</blockquote>",
        "id": 317420872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671731552
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055695360\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we have a bit more on the comment above describing why we are asserting something about equality-check candidates in particular below?</p>\n</blockquote>",
        "id": 317420873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671731553
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055696618\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this just a reverse sort...? Could we use <code>Reverse</code> if so (<code>sort_unstable_by_key(|x| Reverse(*x))</code> or somesuch)?</p>\n</blockquote>",
        "id": 317420874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671731553
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>.</p>",
        "id": 317470161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752472
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1228066595\">PR review</a>.</p>",
        "id": 317470167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752479
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1228066595\">PR review</a>.</p>",
        "id": 317470168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752479
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055895844\">PR review comment</a>:</p>\n<blockquote>\n<p>Nope, I can't add to the comment to explain why I did that, because I shouldn't have done that. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n</blockquote>",
        "id": 317470170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752480
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055736093\">PR review comment</a>:</p>\n<blockquote>\n<p>Good idea. I'm adding a <code>DisjointSets::in_same_set</code> helper and using it the three places that I had some variant of this idiom.</p>\n</blockquote>",
        "id": 317470171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752480
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055725368\">PR review comment</a>:</p>\n<blockquote>\n<p>It is just a reverse sort, yes. <code>by_key</code> is annoying for types that aren't <code>Copy</code>, and I didn't want to make <code>Candidate</code> be <code>Copy</code> because I'd rather have the compiler tell me if I tried to copy it somewhere I didn't intend to. Using <code>by</code> instead lets me operate on borrows.</p>\n<p>If it helps, I could write it as <a href=\"https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.reverse\"><code>x.cmp(y).reverse()</code></a>. I didn't do that because we run this from a build script, so it's built in debug mode, which means these calls aren't inlined and have a non-trivial cost. But I haven't measured, so that might just be premature optimization.</p>\n</blockquote>",
        "id": 317470172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752480
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055899466\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm still hesitant to stop (mis-)using <code>HasControlFlow::Equal</code> in this way because every alternative I've considered so far feels worse to me. But I've at least changed it so that this quirk is entirely contained within <code>best_control_flow</code>, and I've improved the comments there about it. Now anywhere outside that function, the <code>Equal</code> variant only appears with two different binding sites. And I'm still thinking about whether I can improve this further.</p>\n</blockquote>",
        "id": 317470174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752480
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055934288\">PR review comment</a>:</p>\n<blockquote>\n<p>Also now that I look at it again: is it meant to be <code>x.zip(y)</code>, that is, find if there's an overlap but only if the identical element is at the same position in both sequences, or is it meant instead to be an all-pairs check?</p>\n</blockquote>",
        "id": 317470470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752699
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1228386467\">PR review</a>.</p>",
        "id": 317470471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752699
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1228386965\">PR review</a>.</p>",
        "id": 317470540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752757
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055934575\">PR review comment</a>:</p>\n<blockquote>\n<p>Fair enough; just a comment \"note that <code>x</code> and <code>y</code> are reversed below, to sort in reverse\" is probably enough then, IMHO.</p>\n</blockquote>",
        "id": 317470541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671752757
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1228432891\">PR review</a>.</p>",
        "id": 317479014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671758311
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055967454\">PR review comment</a>:</p>\n<blockquote>\n<p>I _think_ I've confused you because I used <code>Option::zip</code>, not <code>Iterator::zip</code>. The <code>Iterator</code> for <code>Option</code> returns zero or one results for <code>None</code> or <code>Some</code>, respectively, so the two are equivalent, but it might be easier to think of this as more like a logical-and.</p>\n<p>So this says, if <code>DisjointSets::find</code> returns <code>Some(representative)</code> of a set for both lookups, and the representative is the same for both, then return <code>true</code>.</p>\n</blockquote>",
        "id": 317479015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671758311
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1228436072\">PR review</a>.</p>",
        "id": 317479577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671758705
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055970076\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah! Right, I had somehow thought this was an iteration over the whole equivalence class. That makes much more sense, thanks.</p>\n</blockquote>",
        "id": 317479578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671758705
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1228436615\">PR review</a>.</p>",
        "id": 317479693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671758782
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1055970490\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure thing! I've added that comment locally now. I don't feel like making CI run again for a comment change so I'll push it after building the translation verifier we talked about.</p>\n</blockquote>",
        "id": 317479694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671758782
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246715352\">PR review</a>.</p>",
        "id": 321053721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673565767
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068765148\">PR review comment</a>:</p>\n<blockquote>\n<p>Is it worth stating here that the returned index will always be <code>&lt;= partition_point</code>?</p>\n</blockquote>",
        "id": 321053723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673565767
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246721221\">PR review</a>.</p>",
        "id": 321054734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673566325
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068770391\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Construct a candidate where the sort key is not set. The score will\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 321054735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673566325
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246726739\">PR review</a>.</p>",
        "id": 321055663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673566883
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068775674\">PR review comment</a>:</p>\n<blockquote>\n<p>There are more references to fields named <code>score</code> as <code>sort key</code>, so maybe this isn't a big deal :)</p>\n</blockquote>",
        "id": 321055664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673566883
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246745481\">PR review</a>.</p>",
        "id": 321059068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673568740
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068792147\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this because that would generate dead code?</p>\n</blockquote>",
        "id": 321059069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673568740
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246757874\">PR review</a>.</p>",
        "id": 321061257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673569906
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068801693\">PR review comment</a>:</p>\n<blockquote>\n<p>What do you think about introducing a function on <code>HasControlFlow</code> called something like <code>any_equiv_class</code> that constructs the <code>Equal(source, source)</code> case? Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HasControlFlow</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">any_equivalence_class</span><span class=\"p\">(</span><span class=\"n\">source</span>: <span class=\"nc\">BindingId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">Equal</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It might help when seeing uses where the args are the same.</p>\n</blockquote>",
        "id": 321061258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673569907
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246765184\">PR review</a>.</p>",
        "id": 321062752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673570642
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068807949\">PR review comment</a>:</p>\n<blockquote>\n<p>Good question. No, I was concerned about the codegen going into an infinite loop of trying to match the same binding site repeatedly. The first time, it would reduce the partition to only those rules that all have the same pattern for that binding site. Matching the same binding site again within that partition won't move any rules out of the partition and it won't make any more binding sites available, so we'd come back to the same evaluation point without making any progress.</p>\n<p>The other argument for this is that there's never anything to be gained from matching a binding site when you're in an evaluation path where you already know exactly what pattern that binding site matches. But the full justification for that is a little complicated because you have to reason about both fall-through cases and equality constraints. It's probably worth writing that argument out in some more detail, but the thought of doing so is making me tired <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n</blockquote>",
        "id": 321062754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673570642
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246771652\">PR review</a>.</p>",
        "id": 321064054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673571349
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068813673\">PR review comment</a>:</p>\n<blockquote>\n<p>Or maybe it means I should make changes in more places than this for consistency <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I was hoping the doc comment for <code>Score</code> describing it as \"A sort key ...\" would be clear enough about the two terms being interchangeable. But then, if they're interchangeable, then why not pick one and stick with it?</p>\n</blockquote>",
        "id": 321064055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673571349
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246785368\">PR review</a>.</p>",
        "id": 321066705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673572911
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068825973\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe <code>emit_source</code> to mirror the name from the <code>Match</code> constructor?</p>\n</blockquote>",
        "id": 321066706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673572911
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>.</p>",
        "id": 321073633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673578165
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246835544\">PR review</a>.</p>",
        "id": 321073748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673578248
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068869408\">PR review comment</a>:</p>\n<blockquote>\n<p>Since both you and Chris found the <code>Equal(x, x)</code> pattern confusing, I've implemented an alternative. What do you think of 2bb7988?</p>\n</blockquote>",
        "id": 321073749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673578249
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a> from <code>isle-codegen</code> to <code>main</code>.</p>",
        "id": 321074189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673578603
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1246839075\">PR review</a>.</p>",
        "id": 321074237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673578677
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#discussion_r1068872503\">PR review comment</a>:</p>\n<blockquote>\n<p>I like \"scrutinee\", and it's what the Rust reference calls that part of a <code>match</code> expression—but Trevor's suggestion is compelling enough I've taken it. Thanks!</p>\n</blockquote>",
        "id": 321074238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673578678
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435#pullrequestreview-1264409753\">PR review</a>.</p>",
        "id": 322625637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674252709
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5435\">PR #5435</a>.</p>",
        "id": 323111829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674505674
    }
]