[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a> from <code>afonso360:riscv-insertlane</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR implements <code>insertlane</code>. The implementation is essentially the same as the <code>splat</code> instruction, but using the masked version of <code>vmv</code> where only one lane is enabled.</p>\n<p>Almost all instructions in the V spec support a mask. The mask is determined by a single bit in the instruction encoding, and when enabled always sources <code>v0</code>.</p>\n<p>The WASM <code>replacelane</code> tests exposed a preexisting bug in the encoding of <code>vmv.s.x</code> and <code>vfmv.s.f</code>, where their source operands are encoded in the <code>vs1</code> field, instead of <code>vs2</code>. A fix for that is also included in this PR.</p>\n</blockquote>",
        "id": 359366389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684408658
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a>.</p>",
        "id": 359366392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684408659
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a>.</p>",
        "id": 359366394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684408659
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a>.</p>",
        "id": 359366395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684408659
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR implements <code>insertlane</code>. The implementation is essentially the same as the <code>splat</code> instruction, but using the masked version of <code>vmv</code> where only one lane is enabled.</p>\n<p>Almost all instructions in the V spec support a mask. The mask is determined by a single bit in the instruction encoding, and when enabled always sources register <code>v0</code> as a mask. Masks are bitfields where each bit corresponds to one lane.</p>\n<p>The WASM <code>replacelane</code> tests exposed a preexisting bug in the encoding of <code>vmv.s.x</code> and <code>vfmv.s.f</code>, where their source operands are encoded in the <code>vs1</code> field, instead of <code>vs2</code>. A fix for that is also included in this PR.</p>\n</blockquote>",
        "id": 359366657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684408721
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR implements <code>insertlane</code>. The implementation is essentially the same as the <code>splat</code> instruction, but using the masked version of <code>vmv</code> where only one lane is enabled.</p>\n<p>Almost all instructions in the V spec support a mask. The mask is determined by a single bit in the instruction encoding, and when enabled always sources register <code>v0</code> as a mask. Masks are represented as bitfields where each bit corresponds to one lane.</p>\n<p>The WASM <code>replacelane</code> tests exposed a preexisting bug in the encoding of <code>vmv.s.x</code> and <code>vfmv.s.f</code>, where their source operands are encoded in the <code>vs1</code> field, instead of <code>vs2</code>. A fix for that is also included in this PR.</p>\n</blockquote>",
        "id": 359366695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684408731
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR implements <code>insertlane</code>. The implementation is essentially the same as the <code>splat</code> instruction, but using the masked version of <code>vmv</code> where only one lane is enabled. Masked <code>vmv</code>'s are called <code>vmerge</code>, and they are only special in the fact that they don't follow the mask policy for masked out elements. Instead, masked out elements are sourced from one of the operands, instead of being ignored.</p>\n<p>Almost all instructions in the V spec support a mask. The mask is determined by a single bit in the instruction encoding, and when enabled always sources register <code>v0</code> as a mask. Masks are represented as bitfields where each bit corresponds to one lane.</p>\n<p>The WASM <code>replacelane</code> tests exposed a preexisting bug in the encoding of <code>vmv.s.x</code> and <code>vfmv.s.f</code>, where their source operands are encoded in the <code>vs1</code> field, instead of <code>vs2</code>. A fix for that is also included in this PR.</p>\n</blockquote>",
        "id": 359367766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684409016
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408#pullrequestreview-1432795568\">PR review</a>.</p>",
        "id": 359410162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684419588
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408#pullrequestreview-1432795568\">PR review</a>.</p>",
        "id": 359410163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684419588
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408#discussion_r1197882777\">PR review comment</a>:</p>\n<blockquote>\n<p>Drive-by comment on this, not something specific to this PR, but nowadays <code>format!(\"{foo}\")</code> support in Rust can probably help simplify a lot of these format strings. This affects all backends, not just risc-v, but may be worth incrementally updating from now on if you're interested.</p>\n</blockquote>",
        "id": 359410166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684419588
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408#discussion_r1197888165\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't know much about RISC-V vector instructions, but is this the most optimal this can be? For example are there instructions which move immediates into registers if the immediate is small? </p>\n<p>I ask because it seems sort of out of place abstractly to have these sorts of operations when dealing with the immediates of insertlane/extractlane, but hey if it's the way it is then that's how it's gonna be.</p>\n<p>One thing I thought though is that this might be good to delegate to a general <code>vconst</code> helper. Right now <code>vconst</code> always performs a load but it might be reasonable to fold a rule like this where if the immediate fits in an i64 it could do the x-&gt;v register movement.</p>\n</blockquote>",
        "id": 359410168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684419589
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408#discussion_r1197899569\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, sounds good, I'll start using that.</p>\n</blockquote>",
        "id": 359412525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684420123
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408#discussion_r1198000197\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't know much about RISC-V vector instructions, but is this the most optimal this can be? For example are there instructions which move immediates into registers if the immediate is small?</p>\n</blockquote>\n<p>I'm not sure!</p>\n<p>There are a few combos here that I can think of that could potentially be better than this in terms of materializing the mask. One of them like you mentioned is using something like the immediate splat instruction <code>vmv.v.i</code>, but that only covers a weird subset of masks. Where the mask result can fit in a signed imm5 per lane. So with that one we can do a mask like <code>0b001111</code> but not <code>0b011111</code>, though we do get the benefit of it being just a single instruction.</p>\n<p>I didn't want to try to pull off those sort of weird edge cases yet, but it might be easier than I think if we can look at the whole thing through the lens of <code>vconst</code>, I'm going to give that a try.</p>\n<blockquote>\n<p>I ask because it seems sort of out of place abstractly to have these sorts of operations when dealing with the immediates of insertlane/extractlane, but hey if it's the way it is then that's how it's gonna be.</p>\n</blockquote>\n<p>Do you mean having a separate move instruction into the X / F registers that has no immediate? We used to have <a href=\"https://github.com/riscv/riscv-v-spec/commit/9a4d92ec1d27af9a483c35aa203125caef5cd87a\">instructions that matched exactly those semantics</a>, but they were removed with the following reasoning:</p>\n<blockquote>\n<p>NOTE: The complementary <code>vins.v.x</code> instruction, which allow a write to<br>\nany element in a vector register, has been removed.  This instruction<br>\nwould be the only instruction (apart from <code>vsetvl</code>) that requires two<br>\ninteger source operands, and also would be slow to execute in an<br>\nimplementation with vector register renaming, relegating its main use<br>\nto debugger modifications to state.  The alternative and more<br>\ngenerally useful <code>vslide1up</code> and <code>vslide1down</code> instructions can be<br>\nused to update vector register state in place over a debug link<br>\nwithout accessing memory.</p>\n</blockquote>\n<p><code>vslide1up</code> and <code>vslide1down</code> aren't exactly applicable to <code>insertlane</code> and <code>extractlane</code>. And they have a special note in the standard stating that they are slow instructions, pretty much just reserved for debuggers.</p>\n<blockquote>\n<p>One thing I thought though is that this might be good to delegate to a general vconst helper. Right now vconst always performs a load but it might be reasonable to fold a rule like this where if the immediate fits in an i64 it could do the x-&gt;v register movement.</p>\n</blockquote>\n<p>Yeah, that seems like a good idea! I'm also going to try to merge the splat const rules into that.</p>\n<hr>\n<p>On a broader note I checked what the other engines are doing here w.r.t <code>insertlane</code>:</p>\n<p><a href=\"https://github.com/v8/v8/blob/ad655dc0435b02f40b19dd9b091c2dcbc3aed5f2/src/compiler/backend/riscv/code-generator-riscv.cc#L2867-L2874\">V8 seems to be doing exactly what we do</a>.</p>\n<p><a href=\"https://godbolt.org/z/ME8zzYaq8\">LLVM does a <code>vslideup</code> with a tail undisturbed policy</a>, which is also an option and it does mean they can avoid materializing a mask since they can use <code>vslideup.vi</code> with the lane as part of the immediate. I have no idea if this is better or worse than the option above since it also emits 2 or 3 <code>vsetvli</code>'s.</p>\n</blockquote>",
        "id": 359435561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684425581
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408#discussion_r1198048139\">PR review comment</a>:</p>\n<blockquote>\n<p>Interesting, and thanks for explaining all that! To be clear I don't think any changes are necessary for this PR, I was mostly just musing. With prior art in V8 this is definitely fine to land (even without that I think it's ok). I agree it's probably not worth it yet to have lots of special cases for various immediates here and there, better to start simple and build out. I was mostly curious if there was a pattern that was going to be implemented later that would simplify this or whether this would be the way forward for awhile.</p>\n</blockquote>",
        "id": 359446237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684428334
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a>.</p>",
        "id": 359856343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684578698
    },
    {
        "content": "<p>afonso360 has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a>.</p>",
        "id": 359856682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684578805
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408#discussion_r1199594155\">PR review comment</a>:</p>\n<blockquote>\n<p>I think I would prefer handling the merging all of the vconst stuff in a future PR. But yeah, making mask generation as part of that makes a ton of sense!</p>\n</blockquote>",
        "id": 359856931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684578879
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6408\">PR #6408</a>.</p>",
        "id": 359872683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684583210
    }
]