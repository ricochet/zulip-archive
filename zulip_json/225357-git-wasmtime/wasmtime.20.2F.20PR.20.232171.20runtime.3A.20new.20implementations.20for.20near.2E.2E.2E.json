[
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n</blockquote>",
        "id": 208395548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598649163
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>So I guess second approach <code>with copysign</code> more preferable. wdyt?</p>\n</blockquote>",
        "id": 208398108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598650943
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>So I guess second approach <code>with copysign</code> more preferable. wdyt?</p>\n</blockquote>",
        "id": 208398924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598651607
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach</p>\n</blockquote>",
        "id": 208399004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598651675
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach</p>\n</blockquote>",
        "id": 208399068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598651745
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM</a></p>\n</blockquote>",
        "id": 208400487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598652848
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n</blockquote>",
        "id": 208401335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598653629
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p>Another possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest_new_3</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 208404488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598656406
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p>Another possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 208404496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598656416
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p>Another possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 208404504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598656429
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p>Another possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 208404568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598656479
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p>Another possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208424080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598690295
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208424089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598690341
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683339394\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208453798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598734861
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683339394\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208478395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598783000
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683339394\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208479521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598785050
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683339394\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208479732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598785370
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683394965\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208479799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598785457
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683394965\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208479987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598785745
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#pullrequestreview-478210815\">PR Review</a>.</p>",
        "id": 208489285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598800225
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#pullrequestreview-478210815\">PR Review</a>.</p>",
        "id": 208489286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598800225
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479780724\">PR Review Comment</a>:</p>\n<blockquote>\n<p>With copysign here, you could also replace the <code>if</code> above with just <code>x.abs() + TOINT_32 - TOINT_32</code>, letting the copysign restore the sign bit, so that we don't get branch mispredicts if inputs have a mix of signs.</p>\n</blockquote>",
        "id": 208489287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598800225
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479781285\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You could also check to see if it's faster to do the first <code>if</code> using <code>abs()</code> with a floating-point range check, instead of <code>to_bits()</code> with an integer range check.</p>\n</blockquote>",
        "id": 208489288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598800225
    },
    {
        "content": "<p>MaxGraey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#pullrequestreview-478211716\">PR Review</a>.</p>",
        "id": 208489559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598800593
    },
    {
        "content": "<p>MaxGraey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479782042\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, <code>x.abs() + TOINT_32 - TOINT_32</code> little bit faster. This variant has in <a href=\"https://gist.github.com/MaxGraey/a826c71909353e3a28a54e8a749c06ac#file-nearest_bench-rs-L72\">benchmark</a>. But I'm not sure it will be great on ARM32: <a href=\"https://godbolt.org/z/jsMba8\">https://godbolt.org/z/jsMba8</a>.</p>\n</blockquote>",
        "id": 208489560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598800593
    },
    {
        "content": "<p>MaxGraey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479782087\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That's make sense. Will add this case to benchmark</p>\n</blockquote>",
        "id": 208489572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598800617
    },
    {
        "content": "<p>MaxGraey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#pullrequestreview-478211743\">PR Review</a>.</p>",
        "id": 208489573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598800617
    },
    {
        "content": "<p>MaxGraey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#pullrequestreview-478212693\">PR Review</a>.</p>",
        "id": 208490091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598801408
    },
    {
        "content": "<p>MaxGraey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479783392\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Unfortunately it will be slower:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">nearest_abs_copysign</span><span class=\"w\">              </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">bench</span>:      <span class=\"mi\">35</span><span class=\"p\">,</span><span class=\"mi\">993</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"o\">/</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+/-</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">475</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">nearest_abs_copysign_without_bits</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">bench</span>:      <span class=\"mi\">37</span><span class=\"p\">,</span><span class=\"mi\">380</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"o\">/</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+/-</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"mi\">714</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\">   </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">suggested</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">nearest_branch</span><span class=\"w\">                    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">bench</span>:      <span class=\"mi\">37</span><span class=\"p\">,</span><span class=\"mi\">300</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"o\">/</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+/-</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">593</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">nearest_copysign</span><span class=\"w\">                  </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">bench</span>:      <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"mi\">348</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"o\">/</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+/-</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">869</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">nearest_original</span><span class=\"w\">                  </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">bench</span>:      <span class=\"mi\">99</span><span class=\"p\">,</span><span class=\"mi\">693</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"o\">/</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+/-</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"mi\">491</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">nearest_sse41</span><span class=\"w\">                     </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">bench</span>:      <span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"mi\">587</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"o\">/</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+/-</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">854</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://gist.github.com/MaxGraey/a826c71909353e3a28a54e8a749c06ac#file-nearest_bench-rs-L163\">updated benchmark</a></p>\n</blockquote>",
        "id": 208490092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598801408
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479783392\">PR Review Comment</a>.</p>",
        "id": 208490100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598801435
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479783392\">PR Review Comment</a>.</p>",
        "id": 208490122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598801505
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#pullrequestreview-478213723\">PR Review</a>.</p>",
        "id": 208490621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598802249
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479784819\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, sorry I missed that you had benchmarked that already. I'm not very familiar with ARM32, but in that godbolt link, the only thing that sticks out to me as being slower is that the abs version doesn't have the early exit for inputs for which <code>nearest</code> is an identity operation. On other inputs, the abs version has fewer instructions.</p>\n</blockquote>",
        "id": 208490622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598802249
    },
    {
        "content": "<p>MaxGraey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#pullrequestreview-478214608\">PR Review</a>.</p>",
        "id": 208491126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598802997
    },
    {
        "content": "<p>MaxGraey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479786081\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For second approach (wih abs) ARM has much more ALU / VFP switchings which in theory will be slower. Unfortunately llvm-mca doesn't work for arm targets yet. And I can't benchmark this </p>\n</blockquote>",
        "id": 208491127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598802997
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479786081\">PR Review Comment</a>.</p>",
        "id": 208491162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598803082
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479786081\">PR Review Comment</a>.</p>",
        "id": 208491194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598803089
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#pullrequestreview-478217595\">PR Review</a>.</p>",
        "id": 208493025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598805528
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479790157\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Are you referring to the <code>vmov</code>s that move between d and r registers? I see the same number in both versions.</p>\n</blockquote>",
        "id": 208493026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598805528
    },
    {
        "content": "<p>MaxGraey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#pullrequestreview-478220535\">PR Review</a>.</p>",
        "id": 208495219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598808234
    },
    {
        "content": "<p>MaxGraey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#discussion_r479794630\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Alright, I'll use <code>abs + copysign</code> approach. Thanks for review btw</p>\n</blockquote>",
        "id": 208495220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598808234
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683394965\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208495309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598808359
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683394965\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208496260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598809471
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683394965\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208499180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598813947
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683394965\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208577789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598889733
    },
    {
        "content": "<p>MaxGraey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a> from <code>new-nearest-functions</code> to <code>main</code>:</p>\n<blockquote>\n<p>More efficient implementations for <code>wasmtime_f32_nearest</code> and <code>wasmtime_f64_nearest</code> based on musl's <code>rint</code> and <code>rintf</code> implementations.</p>\n<p>new / old comparison: <a href=\"https://godbolt.org/z/Gxz3bP\">https://godbolt.org/z/Gxz3bP</a></p>\n<p>Also instruction's metrics for new approach with if / else branch for handling <code>-0.0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1900</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1611</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2900</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.80</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.18</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">4.8</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and with new approach but <a href=\"https://godbolt.org/z/sK93zd\">using <code>copysign</code> at the end for handling <code>-0.0</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Iterations</span>:        <span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"n\">Instructions</span>:      <span class=\"mi\">1800</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Cycles</span>:      <span class=\"mi\">1308</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">uOps</span>:        <span class=\"mi\">2200</span><span class=\"w\"></span>\n\n<span class=\"n\">Dispatch</span><span class=\"w\"> </span><span class=\"n\">Width</span>:    <span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"n\">uOps</span><span class=\"w\"> </span><span class=\"n\">Per</span><span class=\"w\"> </span><span class=\"n\">Cycle</span>:    <span class=\"mf\">1.68</span><span class=\"w\"></span>\n<span class=\"n\">IPC</span>:               <span class=\"mf\">1.38</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">RThroughput</span>: <span class=\"mf\">3.7</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171#issuecomment-683394965\">Benchmark results</a></p>\n<p><strong>Upd</strong> So I chose the second approach. Also it <a href=\"https://godbolt.org/z/W3d7af\">branchless on ARM32</a></p>\n<p><strong>Upd 2</strong><br>\nAnother possible approach:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nearest</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x3ff_</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">TOINT_64</span><span class=\"p\">).</span><span class=\"n\">copysign</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But this approach has <a href=\"https://godbolt.org/z/4Mor4a\">lower IPC</a></p>\n</blockquote>",
        "id": 208577855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598889753
    },
    {
        "content": "<p>sunfishcode merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">PR #2171</a>.</p>",
        "id": 208583959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598891962
    }
]