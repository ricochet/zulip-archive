[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7280\">PR #7280</a>.</p>",
        "id": 397227005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697603012
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7280\">PR #7280</a>.</p>",
        "id": 397227007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697603012
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7280\">PR #7280</a> from <code>cfallin:pcc-opts</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This turns out to be quite simple: the fundamental operation during egraph-based optimization is to <em>merge</em> eclasses, which is an assertion that their value is equal. Since the values of either side of the merge are equal, a fact about one side is a fact about the other, and vice-versa.</p>\n<p>Since we only support <em>one</em> fact at most per value, we can't take the union of all facts; instead, if one side is missing a fact, or if both sides have exactly the same fact, we keep that one; otherwise we go to a special \"conflict\" fact that can't support any check. This is edging closer to a fact-lattice, but I opted not to go there with a full meet-function merge yet, for simplicity. (It's a little complex because of the \"minimum fact\" we can know about a value based on its type -- if we're going to do something better, I think we should account for that too.)</p>\n<p>In any case, that complexity mostly isn't needed, because the two cases that happen in reality are (i) opt rules rewrite to a new node, which will have no facts at all, so facts just propagate; or (ii) GVN merges two values in the input program into one, but if both are the same value, in practice the Wasm PCC frontend (for example) should be producing the same facts on both values, so the merge is trivial.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 397227009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697603012
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7280#pullrequestreview-1685464693\">PR review</a>.</p>",
        "id": 397341857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697644225
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7280\">PR #7280</a>.</p>",
        "id": 397349336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697646954
    }
]