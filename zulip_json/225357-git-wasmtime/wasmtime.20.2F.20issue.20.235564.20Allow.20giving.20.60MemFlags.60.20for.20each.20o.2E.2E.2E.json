[
    {
        "content": "<p>Kixiron opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5564\">issue #5564</a>:</p>\n<blockquote>\n<p>Currently functions like <code>FunctionBuilder::emit_small_memory_copy()</code> and <code>FunctionBuilder::emit_small_memory_compare()</code> only allow giving a single <code>MemFlags</code> that (presumably) applies to both pointers when allowing disjoint flags could be beneficial, e.g. in the case where you're copying from a <code>readonly</code> pointer to a non-<code>readonly</code> pointer, or comparisons where only one side is <code>readonly</code>.</p>\n<p>Additionally, the normal <code>FunctionBuilder::call_memcmp()</code> and <code>FunctionBuilder::call_memcpy()</code> functions don't take flag arguments which could be beneficial for potentially de-duplicating calls</p>\n</blockquote>",
        "id": 321009211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673549104
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5564#issuecomment-1380877467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5564\">issue #5564</a>:</p>\n<blockquote>\n<p><code>call_memcmp</code> and <code>call_memcpy</code> directly generate a call instruction, so there is nothing to attach the <code>MemFlags</code> too.</p>\n</blockquote>",
        "id": 321013184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673550335
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5564#issuecomment-1380883889\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5564\">issue #5564</a>:</p>\n<blockquote>\n<p>This is a good point! I'd guess <code>aligned</code> could have a significant impact even if it's only set on one operand.</p>\n<p>However just last month @bjorn3 proposed to introduce dedicated Cranelift IR instructions for these operations (#5479). I think we'll want to get rid of the corresponding cranelift-frontend functions entirely at that point. Also, off-hand I'm guessing we can't do many of the optimizations that dual mem-flags would enable without first plumbing these operations all the way to the backend.</p>\n<p>So I'm going to close this, folding it into that issue as a suggestion that the new instructions should have one <code>MemFlags</code> for each pointer operand.</p>\n</blockquote>",
        "id": 321014280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673550751
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5564\">issue #5564</a>:</p>\n<blockquote>\n<p>Currently functions like <code>FunctionBuilder::emit_small_memory_copy()</code> and <code>FunctionBuilder::emit_small_memory_compare()</code> only allow giving a single <code>MemFlags</code> that (presumably) applies to both pointers when allowing disjoint flags could be beneficial, e.g. in the case where you're copying from a <code>readonly</code> pointer to a non-<code>readonly</code> pointer, or comparisons where only one side is <code>readonly</code>.</p>\n<p>Additionally, the normal <code>FunctionBuilder::call_memcmp()</code> and <code>FunctionBuilder::call_memcpy()</code> functions don't take flag arguments which could be beneficial for potentially de-duplicating calls</p>\n</blockquote>",
        "id": 321014282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673550751
    }
]