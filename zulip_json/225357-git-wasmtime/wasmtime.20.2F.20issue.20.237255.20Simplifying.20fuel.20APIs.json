[
    {
        "content": "<p>rockwotj opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">issue #7255</a>:</p>\n<blockquote>\n<h4>Feature &amp; Benefit</h4>\n<p>Simplify the fuel related APIs.</p>\n<p>Noted in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7240#issuecomment-1762549864\">https://github.com/bytecodealliance/wasmtime/pull/7240#issuecomment-1762549864</a>, there are a number of fuel related APIs and they have grown organically - we should take a step back and see if there is a simpler/smaller scoped API that can serve the same purpose.</p>\n<h4>Proposal</h4>\n<p>Simplify fuel by removing \"consumption\" related tracking (with the right primitives embedders should be able to do this themselves).</p>\n<p>Remove the following APIs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_consumed</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuel</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">consume_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuel</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">out_of_fuel_trap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">out_of_fuel_async_yield</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">injection_count</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">fuel_to_inject</span>: <span class=\"kt\">u64</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Introduce the following APIs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// All APIs only return error if fuel is not enabled.</span>\n\n<span class=\"c1\">// get the current amount of fuel</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_fuel</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span>\n<span class=\"c1\">// set the current amount of fuel</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"c1\">// in async mode, the engine should yield every N fuel consumed, or None to remove yielding</span>\n<span class=\"c1\">// Additionally Some(0) should return an error?</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_async_yield_interval</span><span class=\"p\">(</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>Under the hood, this would work by storing the following state:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fuel_reserves</span>: <span class=\"kt\">u64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">active_fuel</span>: <span class=\"kt\">i64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// This is what the runtime increments as fuel is consumed</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Then <code>get_fuel</code> would be: <code>return (-active_fuel).saturating_add(fuel_reserves)</code></p>\n<p><code>fuel_async_yield_interval</code> just assigns <code>yield_amount</code> then calls <code>set_fuel(get_fuel())</code></p>\n<p><code>set_fuel</code> looks something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fuel_reserves</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">active_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">total_fuel</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">active_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">cmp</span>::<span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">fuel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span><span class=\"p\">);</span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fuel_reserves</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">active_fuel</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Then <code>out_of_gas</code> does something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fuel_reserves</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">get_fuel</span><span class=\"p\">());</span><span class=\"w\">  </span><span class=\"c1\">// Easy mode to recalculate active_fuel and fuel_reserves</span>\n<span class=\"kr\">yield</span><span class=\"p\">();</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>TODO(reader): Add your ideas <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> and comments <span aria-label=\"umm\" class=\"emoji emoji-1f4ac\" role=\"img\" title=\"umm\">:umm:</span> to this issue <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n</blockquote>",
        "id": 396940696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697474657
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255#issuecomment-1765047024\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">issue #7255</a>:</p>\n<blockquote>\n<p>I like the idea of moving the idea of total consumption out of a <code>Store</code> and requiring embedders to track that if necessary. Additionally I like the simplicity here of get/set since that's at least what I'd imagine a counter like this to look like.</p>\n<p>In that sense going over the existing APIs:</p>\n<ul>\n<li><code>fuel_consumed</code> - this would need to be replaced by embedders by keeping track of all fuel historically injected. This method would then be <code>all_fuel_ever_injected - get_fuel()</code>.</li>\n<li><code>fuel_remaining</code> - this would become <code>get_fuel()</code></li>\n<li><code>add_fuel</code> - this would be <code>set_fuel(get_fuel() + n)</code></li>\n<li><code>consume_fuel</code> - this would be <code>get_fuel()</code>, some conditions, followed by maybe <code>set_fuel</code>. </li>\n</ul>\n<p>That all sounds good to me and additionally handles <code>reset_fuel</code> added in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7240\">https://github.com/bytecodealliance/wasmtime/pull/7240</a> by effectively renaming it to <code>set_fuel</code>. </p>\n</blockquote>",
        "id": 396954681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697480404
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255#issuecomment-1765071487\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">issue #7255</a>:</p>\n<blockquote>\n<p>Cool - I'm happy to work on this later this week if there is no objections (I'm not sure who all needs/wants to sign off on this sort of thing), and if nobody wants to work on this earlier.</p>\n</blockquote>",
        "id": 396957002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697481453
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255#issuecomment-1765386552\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">issue #7255</a>:</p>\n<blockquote>\n<p>I'd recommend giving it a day or so for folks to chime in with feedback if they have some, otherwise feel free, and thanks again!</p>\n</blockquote>",
        "id": 396987748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697496377
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255#issuecomment-1765488820\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">issue #7255</a>:</p>\n<blockquote>\n<p>One downside of this API is that we can only store up to <code>i64</code> amount of fuel, so calculating consumption can be wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"kt\">u64</span>::<span class=\"n\">MAX</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// run a function</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">consumed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">get_fuel</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// WRONG! We actually started at i64::MAX</span>\n</code></pre></div>\n<p>Can we change the fuel in vmcontext to be a u64 that goes to zero instead of a negative <code>i64</code> that goes to 0?</p>\n</blockquote>",
        "id": 397002068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697504187
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255#issuecomment-1765520434\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">issue #7255</a>:</p>\n<blockquote>\n<p>I guess that is an existing wart:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/9e4d44626a008f8a1b1b3b4a48f0d5693185844b/tests/all/fuel.rs#L198\">https://github.com/bytecodealliance/wasmtime/blob/9e4d44626a008f8a1b1b3b4a48f0d5693185844b/tests/all/fuel.rs#L198</a></p>\n<p>I guess you always need to compare to <code>get_fuel</code> to implement tracking correctly?<br>\n</p>\n</blockquote>",
        "id": 397006575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697506884
    },
    {
        "content": "<p>rockwotj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255#issuecomment-1765488820\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">issue #7255</a>:</p>\n<blockquote>\n<p>One downside of this API is that we can only store up to <code>i64</code> amount of fuel, so calculating consumption can be wrong:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"kt\">u64</span>::<span class=\"n\">MAX</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// run a function</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">consumed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">get_fuel</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// WRONG! We actually started at i64::MAX</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 397012533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697510399
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255#issuecomment-1766491129\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">issue #7255</a>:</p>\n<blockquote>\n<p>Yeah I think it'd be nice if we could fix that but I'm not sure how to do so myself, so in absence of that I think we sort of have to just stick with what we have today beahvior-wise.</p>\n</blockquote>",
        "id": 397116572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697551501
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">issue #7255</a>:</p>\n<blockquote>\n<h4>Feature &amp; Benefit</h4>\n<p>Simplify the fuel related APIs.</p>\n<p>Noted in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7240#issuecomment-1762549864\">https://github.com/bytecodealliance/wasmtime/pull/7240#issuecomment-1762549864</a>, there are a number of fuel related APIs and they have grown organically - we should take a step back and see if there is a simpler/smaller scoped API that can serve the same purpose.</p>\n<h4>Proposal</h4>\n<p>Simplify fuel by removing \"consumption\" related tracking (with the right primitives embedders should be able to do this themselves).</p>\n<p>Remove the following APIs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_consumed</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuel</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">consume_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuel</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">out_of_fuel_trap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">out_of_fuel_async_yield</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">injection_count</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">fuel_to_inject</span>: <span class=\"kt\">u64</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Introduce the following APIs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// All APIs only return error if fuel is not enabled.</span>\n\n<span class=\"c1\">// get the current amount of fuel</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_fuel</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span>\n<span class=\"c1\">// set the current amount of fuel</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"c1\">// in async mode, the engine should yield every N fuel consumed, or None to remove yielding</span>\n<span class=\"c1\">// Additionally Some(0) should return an error?</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_async_yield_interval</span><span class=\"p\">(</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>Under the hood, this would work by storing the following state:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fuel_reserves</span>: <span class=\"kt\">u64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">active_fuel</span>: <span class=\"kt\">i64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// This is what the runtime increments as fuel is consumed</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Then <code>get_fuel</code> would be: <code>return (-active_fuel).saturating_add(fuel_reserves)</code></p>\n<p><code>fuel_async_yield_interval</code> just assigns <code>yield_amount</code> then calls <code>set_fuel(get_fuel())</code></p>\n<p><code>set_fuel</code> looks something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fuel_reserves</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">active_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">total_fuel</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">active_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">cmp</span>::<span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">fuel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">yield_amount</span><span class=\"p\">);</span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fuel_reserves</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">active_fuel</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Then <code>out_of_gas</code> does something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fuel_reserves</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">get_fuel</span><span class=\"p\">());</span><span class=\"w\">  </span><span class=\"c1\">// Easy mode to recalculate active_fuel and fuel_reserves</span>\n<span class=\"kr\">yield</span><span class=\"p\">();</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>TODO(reader): Add your ideas <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> and comments <span aria-label=\"umm\" class=\"emoji emoji-1f4ac\" role=\"img\" title=\"umm\">:umm:</span> to this issue <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n</blockquote>",
        "id": 398153488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698093832
    }
]