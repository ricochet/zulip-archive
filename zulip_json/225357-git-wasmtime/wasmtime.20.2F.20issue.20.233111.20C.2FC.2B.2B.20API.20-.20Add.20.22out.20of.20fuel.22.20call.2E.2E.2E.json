[
    {
        "content": "<p>dshiell15 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently, the C/C++ API allows instantiating a Config with fuel enabled and an initial amount of fuel, but it would be nice to be able to define a callback or allow for some hook to catch out of fuel conditions such that the host application could decide whether to add more fuel and continue processing or terminate the wasm function.</p>\n<h4>Benefit</h4>\n<p>The Rust API already allows for indefinite async execution by configuring Store::out_of_fuel_async_yield() so this would help match functionality in the C/C++ APIs. It would also allow fair processing in application (server) embeddings which may be attempting to execute many wasm functions and would not want to block too long on any function.</p>\n<h4>Implementation</h4>\n<p>I'm not sure what is involved in exposing this functionality to the C/C++ API.</p>\n<h4>Alternatives</h4>\n<p>The main goal is to provide a way to. allow the host to make a decision about whether to refuel or terminate when the function's fuel is exhausted.</p>\n<p>Thank you!</p>\n</blockquote>",
        "id": 246878785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626974582
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-887832521\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>Could you describe a bit more the use case you have in mind for this? This functionality isn't even exposed in Rust right now, although I don't think there's necesarily anything fundamental about why it couldn't be. </p>\n<p>I think though that an out-of-fuel callback could only decide to add fuel or trap, I don't think there's anything else we'd enable at this time (e.g. stack-switching or things like that), since that's within the realm of async bindings. Is your use case looking to dynamically determine whether more fuel should be added?</p>\n</blockquote>",
        "id": 247391165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627419746
    },
    {
        "content": "<p>dshiell15 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-887915926\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>Hmm, yes, I'm thinking about allowing the host to dynamically determine whether more fuel should be added when an 'out of fuel' trap occurs. I saw the Store::out_of_fuel_async_yield() provides a way to yield and re-add a certain amount of fuel a certain amount of times and was hoping to be able to have some similar logic in the C-API.</p>\n<p>More specifically, my use case is in a server context where I am using fuel to limit cpu consumption of a wasm function so that it can't block the server request processing for too long. The server already has a stack switching mechanism so really it just needs to be able to invoke a callback with the Store/Caller context so that it can make the decision about whether to add more fuel or trap.</p>\n<p>Does that make sense?</p>\n</blockquote>",
        "id": 247408946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627431257
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-889362302\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>Makes sense indeed!</p>\n<p>FWIW I'd recommend being cautious about stack switching. Specifically if wasm is suspended while it's running Wasmtime has to reset its one TLS variable when wasm resumes on another thread. Wasmtime <a href=\"https://github.com/bytecodealliance/wasmtime/blob/535b3a47ee4a4c5cf2c57d4b7296d64481a4afad/crates/wasmtime/src/store.rs#L1231-L1233\">does this with <code>async</code> in Rust</a>, but such functionality is not exposed through the C API at this time.</p>\n</blockquote>",
        "id": 247621992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627582973
    },
    {
        "content": "<p>dshiell15 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-889374760\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>Thanks so much for the tip about the TLS resetting, I'll be sure to look out for that. In my case, the server is running on a single thread so hopefully it will not be an issue.</p>\n</blockquote>",
        "id": 247624483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627584205
    },
    {
        "content": "<p>LLFourn <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1495431593\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>I think this would be useful for me. When the fuel limit is reached I'd like to suspend the program until some condition is reached. The user who has requested the program be run may then satisfy the condition so it can resume.</p>\n</blockquote>",
        "id": 346744654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680590545
    },
    {
        "content": "<p>martindevans <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1539228464\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>An out-of-fuel callback would be very useful for me as well.</p>\n<p>I'm using WASM in a game so the timing is pretty tight. It's pretty hard to know how much fuel to give the WASM up front - too little and no result is produced and the time spent is wasted, too much and the frame may be delayed. It would be much easier to give a very limited amount of fuel to it and then to drip feed more on request, checking if there's time remaining every time an out-of-fuel request is made.</p>\n</blockquote>",
        "id": 356837970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683592125
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1540294119\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>@martindevans you might be more interested in epochs rather than fuel for your use case since a timer can be used to update the epoch. That would be more efficient for wasm itself but still achieve the desired effect of preventing wasm from executing for too long (and without the periodic checkins)</p>\n</blockquote>",
        "id": 357010453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683644042
    },
    {
        "content": "<p>martindevans <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1540350441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>I am actually using epochs at the moment, to avoid the difficult of estimating the correct fuel values. But I think adding an out-of-fuel callback would be an improvement even over that.</p>\n</blockquote>",
        "id": 357016078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683645189
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1725689782\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>I have a proof of concept exposing the async functionality in the C API: <a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...rockwotj:wasmtime:c-ma-its-async\">https://github.com/bytecodealliance/wasmtime/compare/main...rockwotj:wasmtime:c-ma-its-async</a></p>\n<p>Some of the qualifications:</p>\n<ul>\n<li>You cannot pass arguments to <code>call_async</code> - my Rust was not good enough to figure out how to teach the compiler what I'm trying to do. Getting the lifetime of the translated vector parameters and the store context is quite difficult. However, for my usecase I only need to call WASI _start so it's fine to not pass/recv args.</li>\n<li>Some of the rust may not be high quality - I'm really a C++ dev who dabbles in Rust <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span> </li>\n<li>There still may be bugs.</li>\n<li>I'd love to upstream this, but would probably need to figure out how to get call async with params/results first - help is welcome, or folks are welcome to steal that code and make it better if they are going to upstream it :) </li>\n</ul>\n</blockquote>",
        "id": 391921723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695132790
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1726185942\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>Nice!</p>\n<p>One question I'd have about that is what's the expected use case for the done boolean for host functions? Is the intention to enable epochs/fuel exclusively or to additionally enable host functions to be async themselves? I ask because only doing the former, enabling epochs/fuel, I think is the simpler way to go. That way all host functions are still synchronous but we could expose an interface for executing a wasm function which returns to the host on fuel running out or an epoch transition (instead of aborting)</p>\n</blockquote>",
        "id": 391960854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695144402
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1726311214\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<blockquote>\n<p>to additionally enable host functions to be async themselves?</p>\n</blockquote>\n<p>This one :) I have an example of this working in our runtime and it's pretty awesome.</p>\n</blockquote>",
        "id": 391976826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695149747
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1726313935\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>Certainly there could be some API design I'm happy to iterate on.</p>\n<p>I also have a need for \"out of fuel\" in addition to supporting async host functions. I think you have to do the \"out of fuel\" work of allowing the initial call into the VM to yield either way, but once you have that it's not a huge lift to add async functions (and sync functions still work).</p>\n</blockquote>",
        "id": 391977269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695149875
    },
    {
        "content": "<p>rockwotj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1726311214\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<blockquote>\n<p>to additionally enable host functions to be async themselves?</p>\n</blockquote>\n<p>This one :) I have an example of this working in our application and it's pretty awesome.</p>\n</blockquote>",
        "id": 391988591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695154663
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1726415851\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>Oh neat! Is the code public such that I'd be able to poke at it? I'm mostly curious how it all works out. For example how is what the host function is blocking on communicated to what's making the original async invocation of wasm?</p>\n</blockquote>",
        "id": 391989190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695154955
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1726424653\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>It exists in a very early form here: <a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc</a></p>\n<p>It's written in c++ and using <a href=\"http://seastar.io\">seastar.io</a> which has a similar future abstraction to Rust's futures, but here is the high level approach:</p>\n<p>Invoke the host function that returns a <code>future</code>: <br>\n<a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L302-L319\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L302-L319</a></p>\n<p>Record that pending future with the \"engine\" (our abstraction over an <code>Instance</code>): </p>\n<p><a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L325-L334\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L325-L334</a> </p>\n<p>making sure to tail on a callback to update the context that the hostcall is finished.</p>\n<p>The future in Rust polls that state with this callback: <a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L265-L270\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L265-L270</a></p>\n<p>The main driver of the host function when a poll call returns it looks to see if there is a future registered, then awaits it before calling poll again, otherwise asks the scheduler to do other work before resuming execution of polling the future:</p>\n<p><a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L652-L660\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L652-L660</a></p>\n</blockquote>",
        "id": 391990250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695155407
    },
    {
        "content": "<p>rockwotj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1726424653\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>It exists in a very early form here: <a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc</a></p>\n<p>It's written in c++ and using <a href=\"http://seastar.io\">seastar.io</a> which has a similar future abstraction to Rust's futures, but here is the high level approach:</p>\n<p>Invoke the host function that returns a <code>future</code>: <br>\n<a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L302-L319\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L302-L319</a></p>\n<p>Record that pending future with the \"engine\" (our abstraction over an <code>Instance</code>(note that TODO is out of date): </p>\n<p><a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L325-L334\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L325-L334</a> </p>\n<p>making sure to tail on a callback to update the context that the hostcall is finished.</p>\n<p>The future in Rust polls that state with this callback: <a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L265-L270\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L265-L270</a></p>\n<p>The main driver of the host function when a poll call returns it looks to see if there is a future registered, then awaits it before calling poll again, otherwise asks the scheduler to do other work before resuming execution of polling the future:</p>\n<p><a href=\"https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L652-L660\">https://github.com/rockwotj/redpanda/blob/e5ff7ebf8bada9dbb77bce68be0364dcdc0e2f81/src/v/wasm/wasmtime.cc#L652-L660</a></p>\n</blockquote>",
        "id": 391990805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695155649
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1726631600\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>Thanks for the info! That all seems pretty reasonable to me. If you're able to allocate some time I think this'd be great to have upstream. I don't mind reviewing and can help out with any Rust fiddly-bits too.</p>\n</blockquote>",
        "id": 392005668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695163037
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1726752046\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<blockquote>\n<p>If you're able to allocate some time I think this'd be great to have upstream</p>\n</blockquote>\n<p>I'm about to be OOO, but I think I can justify cleaning this up and sending patches out when I'm back. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<blockquote>\n<p>can help out with any Rust fiddly-bits too</p>\n</blockquote>\n<p>I'd appreciate this! The main thing that I was having problems with was teaching rust that <code>wasmtime_func_call_async</code> is with <code>wasm_val_storage</code> being kept alive (and the pointer stable) via the returned <code>wasmtime_call_future_t</code> owning the memory. Further complications are with <code>CStoreContextMut</code> being the reference that holds that initial memory and that <code>func.call_async</code> takes the store as a mutable reference.</p>\n<p>I'll get something in draft mode when I'm back and maybe you can tell me how I'm holding the compiler wrong.</p>\n</blockquote>",
        "id": 392023888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695173555
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1727862828\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<p>Ok sounds good, and yeah IMO the main thing to get designed is the C API and the documentation around its restrictions, and from that the Rust implementation should fall out without too too much effort (in theory), which I'm happy to help out wiht.</p>\n</blockquote>",
        "id": 392131613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695220635
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111\">issue #3111</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently, the C/C++ API allows instantiating a Config with fuel enabled and an initial amount of fuel, but it would be nice to be able to define a callback or allow for some hook to catch out of fuel conditions such that the host application could decide whether to add more fuel and continue processing or terminate the wasm function.</p>\n<h4>Benefit</h4>\n<p>The Rust API already allows for indefinite async execution by configuring Store::out_of_fuel_async_yield() so this would help match functionality in the C/C++ APIs. It would also allow fair processing in application (server) embeddings which may be attempting to execute many wasm functions and would not want to block too long on any function.</p>\n<h4>Implementation</h4>\n<p>I'm not sure what is involved in exposing this functionality to the C/C++ API.</p>\n<h4>Alternatives</h4>\n<p>The main goal is to provide a way to. allow the host to make a decision about whether to refuel or terminate when the function's fuel is exhausted.</p>\n<p>Thank you!</p>\n</blockquote>",
        "id": 394653587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696345256
    }
]