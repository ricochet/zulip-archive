[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a> from <code>alexcrichton:no-trapping-imports</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>By default previously all return types were wrapped in <code>wasmtime::Result&lt;T&gt;</code> to enable any import to return a trap to the wasm guest. This is a fair bit of boilerplate, however, and it's easy to accidentally turn a normal error into a trap. This is additionally somewhat of a power-user method as many imports probably don't end up wanting to trap.</p>\n<p>This commit adds a new configuration option to <code>bindgen!</code>: <code>trappable_imports</code>, and switches the default to <code>false</code>. The previous behavior can be recovered with <code>trappable_imports: true</code>.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 431610603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712354373
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>.</p>",
        "id": 431610604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712354374
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>.</p>",
        "id": 431610605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712354374
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2040725273\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasi\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 431614742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712357080
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>.</p>",
        "id": 432004445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712590820
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#pullrequestreview-1987440311\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 432071575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712612029
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>.</p>",
        "id": 432578906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712780462
    },
    {
        "content": "<p>dearfl <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm relatively new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>Host side impl in Rust with trappable-imports it's like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442140614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386008
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm relatively new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>Host side impl in Rust with trappable-imports it's like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442140634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386027
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm relatively new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>Host side impl in Rust with trappable-imports it's like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442140698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386085
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm relatively new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>The host side impl in Rust with trappable-imports is something like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442140821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386184
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm relatively new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>The host side impl in Rust with trappable-imports is something like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442140982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386316
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm relatively new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>The host side impl in Rust with trappable-imports is something like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// let say Example::hello returns a Result&lt;String, ErrorType&gt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442141073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386383
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm relatively new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>The host side impl in Rust with trappable-imports is something like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// let say Example::hello returns Result&lt;String, ErrorType&gt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442141083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386394
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm fairly new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>The host side impl in Rust with trappable-imports is something like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// let say Example::hello returns Result&lt;String, ErrorType&gt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442141478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386745
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm fairly new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>The host side impl in Rust with trappable-imports is something like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"c1\">// When should I return a trap/normal result? my current understanding is if something is caused by wasmtime itself</span>\n<span class=\"w\">        </span><span class=\"c1\">// (ResourceTable operation failed like here, then I should return a trap, else normal result. it my understanding correct/sane?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// let say Example::hello returns Result&lt;String, ErrorType&gt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442141756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386989
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm fairly new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>The host side impl in Rust with trappable-imports is something like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"c1\">// When should I return a trap/normal result? my current understanding is if something is caused by wasmtime itself</span>\n<span class=\"w\">        </span><span class=\"c1\">// (ResourceTable operation failed like here, then I should return a trap, else normal result. is my understanding correct/sane?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// let say Example::hello returns Result&lt;String, ErrorType&gt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442141762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717386997
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm fairly new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? </p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>The host side impl in Rust with trappable-imports is something like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"c1\">// When should I return a trap/normal result? My current understanding is if something is</span>\n<span class=\"w\">        </span><span class=\"c1\">// caused by wasmtime itself (like ResourceTable operation failed here), then I should</span>\n<span class=\"w\">        </span><span class=\"c1\">// return a trap, else normal result. Is my understanding correct/sane?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// let say Example::hello returns Result&lt;String, ErrorType&gt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442141823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717387069
    },
    {
        "content": "<p>dearfl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2144217578\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Hey guys, I'm fairly new to wasm/wasmtime/wasi, can you provide some per function trappable_imports example? [Nevermind, I found some example in this PR.]</p>\n<p>Also I'd like to ask how should one handle errors in a Host impl?</p>\n<p>Suppose I have some wit definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource example {\n    hello: func() -&gt; result&lt;string, error-type&gt;,\n}\n</code></pre></div>\n<p>The host side impl in Rust with trappable-imports is something like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostExample</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorType</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// should I return a trap when resource table operations failed in here like this?</span>\n<span class=\"w\">        </span><span class=\"c1\">// When should I return a trap/normal result? My current understanding is if something is</span>\n<span class=\"w\">        </span><span class=\"c1\">// caused by wasmtime itself (like ResourceTable operation failed here), then I should</span>\n<span class=\"w\">        </span><span class=\"c1\">// return a trap, else normal result. Is my understanding correct/sane?</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// let say Example::hello returns Result&lt;String, ErrorType&gt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">hello</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Example</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// same here</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442158116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717395450
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2145453627\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<p>Looks like you might have already found your answer @dearfl but I can try to fill in any possible gaps and/or confirm:</p>\n<ul>\n<li>Whether something should be a trap or a WIT-level error depends on whether the guest should be able to recover from it. Guests can't recover from traps but can recover from WIT-level errors.</li>\n<li>Table-related errors are best represented as traps since that indicates a bug in the host or resource limits being hit from the guest if an error is returned.</li>\n<li>You might be interested in the <code>trappable_error_type</code> configuration key to have a single <code>Result&lt;T,E&gt;</code> instead of <code>Result&lt;Result&lt;T, E&gt;&gt;</code>, but that's not required.</li>\n</ul>\n<p>In any case the code you have gisted above looks reasonable to me!</p>\n</blockquote>",
        "id": 442281285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717427420
    },
    {
        "content": "<p>dearfl <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310#issuecomment-2146377411\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8310\">PR #8310</a>:</p>\n<blockquote>\n<blockquote>\n<p>Looks like you might have already found your answer @dearfl but I can try to fill in any possible gaps and/or confirm:</p>\n<div class=\"codehilite\"><pre><span></span><code>* Whether something should be a trap or a WIT-level error depends on whether the guest should be able to recover from it. Guests can&#39;t recover from traps but can recover from WIT-level errors.\n\n* Table-related errors are best represented as traps since that indicates a bug in the host or resource limits being hit from the guest if an error is returned.\n\n* You might be interested in the `trappable_error_type` configuration key to have a single `Result&lt;T,E&gt;` instead of `Result&lt;Result&lt;T, E&gt;&gt;`, but that&#39;s not required.\n</code></pre></div>\n\n<p>In any case the code you have gisted above looks reasonable to me!</p>\n</blockquote>\n<p>Thank you for your detailed reply.</p>\n</blockquote>",
        "id": 442409943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717463185
    }
]