[
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>:</p>\n<blockquote>\n<p>Currently, a let expression in ISLE currently requires unique names for each declaration. If you are sequencing a number of effects together using a let expression, you'll end up with multiple declarations whose results you don't need. Here's an example of this from the s390x backend: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064\">https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064</a></p>\n<p>This PR allows multiple definitions with the name <code>_</code> in a let expression, removing the need to come up with unique names. The previous example can be refactored to the following after this change:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">boolean</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">registers</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ProducesBool</span><span class=\"p\">.</span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp_writable_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_producer</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_mov</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_consumer</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_cmov_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dst</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291629628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659385893
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#pullrequestreview-1057833083\">PR review</a>.</p>",
        "id": 291630027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386100
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#discussion_r934899249\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I think you may need to rebase -- as of Friday there is now a notion of a run-test already and a separate <code>isle_examples/run</code> directory :-)</p>\n</blockquote>",
        "id": 291630028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386100
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>:</p>\n<blockquote>\n<p>Currently, a let expression in ISLE currently requires unique names for each declaration. If you are sequencing a number of effects together using a let expression, you'll end up with multiple declarations whose results you don't need. Here's an example of this from the s390x backend: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064\">https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064</a></p>\n<p>This PR allows shadowing in let expressions, enabling the previous example to be refactored in the following way:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">boolean</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">registers</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ProducesBool</span><span class=\"p\">.</span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp_writable_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_producer</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_mov</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_consumer</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_cmov_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dst</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291630066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386115
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#pullrequestreview-1057834090\">PR review</a>.</p>",
        "id": 291630191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386165
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#discussion_r934899948\">PR review comment</a>:</p>\n<blockquote>\n<p>It's hilarious that this is what the PR boils down to :)</p>\n</blockquote>",
        "id": 291630192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386165
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>.</p>",
        "id": 291630524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386361
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#discussion_r934902671\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice! I rebased and removed the changes I introduced to run the <code>link</code> tests <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 291630655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386407
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#pullrequestreview-1057837990\">PR review</a>.</p>",
        "id": 291630656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386408
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#pullrequestreview-1057840080\">PR review</a>.</p>",
        "id": 291630926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386537
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#discussion_r934904161\">PR review comment</a>:</p>\n<blockquote>\n<p>Something about journeys vs. destinations etc etc ... but, yes, I'm happy it was a simple change!</p>\n</blockquote>",
        "id": 291630927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386537
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#pullrequestreview-1057840401\">PR review</a>.</p>",
        "id": 291630953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386558
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a>.</p>",
        "id": 291630969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659386566
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a>.</p>",
        "id": 291634198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659388230
    }
]