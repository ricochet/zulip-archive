[
    {
        "content": "<p>Lohann opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579\">issue #9579</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>Hello, I need to access the imported memory inside a functions, then I realized the Caller only show exports, not imports, so I had a lot of trouble to get Wasmtime store working with <a href=\"https://doc.rust-lang.org/beta/std/mem/union.MaybeUninit.html\">MaybeUnit</a>, this simple solution segfaults:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">State</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Memory</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">State</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">uninit</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span>\n<span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">Memory</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory_type</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">transmute</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">State</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">State</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// segfaults below</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">imports</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Then I realized the issue is that there's no way for me transmute only the State, I need to transmute the Store which is not recommended, once rust <a href=\"https://doc.rust-lang.org/beta/std/mem/union.MaybeUninit.html#layout-1\">doesn't guarantee the same memory layout</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Actually I haven't find any way to use MaybeUnit that doesn't look hacky, and I want to avoid the usage of Option and unwraps in the code, once it bloats the binary with panic data.</p>\n<h4>Alternatives</h4>\n<ol>\n<li>Make the imported memory easily available inside Functions, ex: expose it in the Caller.</li>\n<li>Use <code>#[repr(C)]</code> on <code>Store</code>, so we can safely transmute it.<br>\n</li>\n</ol>\n</blockquote>",
        "id": 481064544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730967048
    },
    {
        "content": "<p>Lohann edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579\">issue #9579</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>Hello, I need to access the imported memory inside a functions, then I realized the Caller only show exports, not imports, so I had a lot of trouble to get Wasmtime store working with <a href=\"https://doc.rust-lang.org/beta/std/mem/union.MaybeUninit.html\">MaybeUnit</a>, this simple solution segfaults:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">State</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Memory</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">State</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">uninit</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span>\n<span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">Memory</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory_type</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">transmute</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">State</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">State</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// ...</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()];</span>\n\n<span class=\"c1\">// segfaults below</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">imports</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Then I realized the issue is that there's no way for me transmute only the State, I need to transmute the Store which is not recommended, once rust <a href=\"https://doc.rust-lang.org/beta/std/mem/union.MaybeUninit.html#layout-1\">doesn't guarantee the same memory layout</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Actually I haven't find any way to use MaybeUnit that doesn't look hacky, and I want to avoid the usage of Option and unwraps in the code, once it bloats the binary with panic data.</p>\n<h4>Alternatives</h4>\n<ol>\n<li>Make the imported memory easily available inside Functions, ex: expose it in the Caller.</li>\n<li>Use <code>#[repr(C)]</code> on <code>Store</code>, so we can safely transmute it.<br>\n</li>\n</ol>\n</blockquote>",
        "id": 481064808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730967149
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579#issuecomment-2462576544\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579\">issue #9579</a>:</p>\n<blockquote>\n<p>Where possible I'd recommend avoiding <code>unsafe</code>. If things are segfaulting it's probably due to that, so for example you could store <code>Option&lt;Memory&gt;</code> instead of using <code>MaybeUninit</code> and then there's no need for <code>transmute</code> and this probably won't segfault.</p>\n<p>Otherwise though is there a problem with storing the memory in <code>State</code>?</p>\n</blockquote>",
        "id": 481148931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730994472
    },
    {
        "content": "<p>Lohann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579#issuecomment-2466987241\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579\">issue #9579</a>:</p>\n<blockquote>\n<blockquote>\n<p>Otherwise though is there a problem with storing the memory in State?</p>\n</blockquote>\n<p>There's no problem, is just there's no examples of that, and is not ergonomic as using exported memory, rust encourages the use of <a href=\"https://cliffle.com/blog/rust-typestate/\">Typestate Pattern</a>, where the state of an object guarantees it is valid. In this case I want to guarantee the memory ALWAYS exists, that's why I don't want to use Option.<br>\nOne example is the <a href=\"https://doc.rust-lang.org/std/num/type.NonZeroU32.html\">NonZeroU32</a> by knowing the number is never zero, the rust compiler can do some neat optimizations:</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=6778305b1980ec60413183a0a1127a4d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=6778305b1980ec60413183a0a1127a4d</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">NonZeroU32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>In my case I want to guarantee the memory always exists, I don't want to handle the <code>Option::None</code> everywhere, neither use <code>unwrap()</code> everywhere, that's ok if there's no other option, but I think this is something that should be supported somehow by wasmtime, once the Store owns the memory, makes sense I be able to store it together with the store.</p>\n</blockquote>",
        "id": 481607315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731281592
    },
    {
        "content": "<p>Lohann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579#issuecomment-2466987241\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579\">issue #9579</a>:</p>\n<blockquote>\n<blockquote>\n<p>Otherwise though is there a problem with storing the memory in State?</p>\n</blockquote>\n<p>There's no problem, but rust encourages the use of <a href=\"https://cliffle.com/blog/rust-typestate/\">Typestate Pattern</a>, where the state of an object guarantees it is valid. In this case I want to guarantee the memory ALWAYS exists, that's why I don't want to use Option.<br>\nOne example is the <a href=\"https://doc.rust-lang.org/std/num/type.NonZeroU32.html\">NonZeroU32</a> by knowing the number is never zero, the rust compiler can do some neat optimizations:</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=6778305b1980ec60413183a0a1127a4d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=6778305b1980ec60413183a0a1127a4d</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">NonZeroU32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>In my case I want to guarantee the memory always exists, I don't want to handle the <code>Option::None</code> everywhere, neither use <code>unwrap()</code> everywhere, that's ok if there's no other option, but I think this is something that should be supported somehow by wasmtime, once the Store owns the memory, makes sense I be able to store it together with the store.</p>\n</blockquote>",
        "id": 481607891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731282077
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579#issuecomment-2469585743\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9579\">issue #9579</a>:</p>\n<blockquote>\n<p>One thing you could perhaps do is to create a dummy <code>Memory</code> with a throwaway <code>Store</code> which is placed within future <code>Store</code>s as they're created. That would then be overwritten to the \"real\" memory once the store is created. That way you can store just <code>Memory</code> without having to deal with <code>Option</code> and you won't have to deal with any unsafety either.</p>\n</blockquote>",
        "id": 481863294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731386227
    }
]