[
    {
        "content": "<p><a href=\"https://github.com/erxiaozhou\">erxiaozhou</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779\">Issue #7779</a>.</p>",
        "id": 413096071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705390971
    },
    {
        "content": "<p>erxiaozhou opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779\">issue #7779</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/13946762/memory_init_0_9_0.zip\">memory_init_0_9_0.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">zph</span><span class=\"o\">/</span><span class=\"n\">CP912</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">path_of_the__test_case</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">to_test</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>No exception</p>\n<h3>Actual Results</h3>\n<p>An exception indicating \"Memory OOB\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">path_to_the_test_case</span><span class=\"o\">&gt;</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">to_test</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x13f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 37300d3f4b51e0e3374e3c4fc382b7603b065c8b</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture:  x86_64</p>\n<h3>Extra Info</h3>\n<p>According to the specification, there should not be an exception, because here <code>s+n</code>=<code>9</code>, is not larger than the length of <code>data.data</code> and <code>d+n</code>=<code>0</code>, is smaller than the length of <code>mem.data</code> .</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32102519/376eb5f7-d514-4335-b2f8-1382ba36126d\">https://github.com/bytecodealliance/wasmtime/assets/32102519/376eb5f7-d514-4335-b2f8-1382ba36126d</a>)</p>\n</blockquote>",
        "id": 413096073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705390972
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779#issuecomment-1894177404\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779\">issue #7779</a>:</p>\n<blockquote>\n<p>&lt;details&gt;</p>\n<p>&lt;summary&gt;WAT disassembly of the test case&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span> <span class=\"kt\">f32</span> <span class=\"kt\">i64</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">9</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"err\">memory.init</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">3</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">3</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">3</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">3</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">table</span> <span class=\"cm\">(;0;)</span> <span class=\"mi\">10</span> <span class=\"mi\">20</span> <span class=\"k\">funcref</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">1 5</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"kt\">i32</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">541</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">191</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;2;)</span> <span class=\"kt\">f32</span> <span class=\"p\">(</span><span class=\"nb\">f32.const</span> <span class=\"mf\">0x1.0e8p+9</span> <span class=\"cm\">(;=541;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">f32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">f32.const</span> <span class=\"mf\">0x1.8p+7</span> <span class=\"cm\">(;=192;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;4;)</span> <span class=\"kt\">i64</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">54</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">19</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;6;)</span> <span class=\"kt\">f64</span> <span class=\"p\">(</span><span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.bp+5</span> <span class=\"cm\">(;=54;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.3p+4</span> <span class=\"cm\">(;=19;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;8;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;9;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">f32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">f32.const</span> <span class=\"mf\">0x0p</span><span class=\"mi\">+0</span> <span class=\"cm\">(;=0;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;10;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;11;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">f64.const</span> <span class=\"mf\">0x0p</span><span class=\"mi\">+0</span> <span class=\"cm\">(;=0;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;12;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">f32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">f32.const</span> <span class=\"mf\">0x1.566586p-55</span> <span class=\"cm\">(;=3.71227e-17;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;13;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mf\">-7377836612904162111</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;14;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">32562</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;15;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">f32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">f32.const</span> <span class=\"mf\">0x1.566586p-55</span> <span class=\"cm\">(;=3.71227e-17;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;16;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i64.const</span> <span class=\"mf\">-7377836612904162111</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;17;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">32562</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;18;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.664c806fbc53dp+822</span> <span class=\"cm\">(;=3.91437e+247;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;19;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.664c806fbc53dp+822</span> <span class=\"cm\">(;=3.91437e+247;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"to_test\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">elem</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">func</span> <span class=\"mf\">1 2</span> <span class=\"mf\">3 0</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">elem</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">func</span> <span class=\"mf\">3 3</span> <span class=\"mf\">2 1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">elem</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\01\\02\\03\\04\\05\\06\\07\\08</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\01\\02\\03\\04\\05\\06\\07\\08\\ff</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\01\\02\\03\\04\\05\\06\\07\\08\\ff</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 413202861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705425483
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779#issuecomment-1894349846\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779\">issue #7779</a>:</p>\n<blockquote>\n<p>Reduced test case:</p>\n<p><div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span> <span class=\"kt\">f32</span> <span class=\"kt\">i64</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">9</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"err\">memory.init</span> <span class=\"mi\">2</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">1 5</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\01\\02\\03\\04\\05\\06\\07\\08\\ff</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 413221356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705432022
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779#issuecomment-1894350625\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779\">issue #7779</a>:</p>\n<blockquote>\n<p>Thanks for the report! I think though that this is working as intended, the data segment being used here is an \"active data segment\" which implicitly gets a <code>data.drop</code> during module instantiation, meaning that the data segment has length 0 by the time <code>memory.init</code> is executed at which point the offset of 9 is out-of-bounds.</p>\n</blockquote>",
        "id": 413221427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705432060
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779\">issue #7779</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/13946762/memory_init_0_9_0.zip\">memory_init_0_9_0.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">zph</span><span class=\"o\">/</span><span class=\"n\">CP912</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">path_of_the__test_case</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">to_test</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>No exception</p>\n<h3>Actual Results</h3>\n<p>An exception indicating \"Memory OOB\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">path_to_the_test_case</span><span class=\"o\">&gt;</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">to_test</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x13f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 37300d3f4b51e0e3374e3c4fc382b7603b065c8b</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture:  x86_64</p>\n<h3>Extra Info</h3>\n<p>According to the specification, there should not be an exception, because here <code>s+n</code>=<code>9</code>, is not larger than the length of <code>data.data</code> and <code>d+n</code>=<code>0</code>, is smaller than the length of <code>mem.data</code> .</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32102519/376eb5f7-d514-4335-b2f8-1382ba36126d\">https://github.com/bytecodealliance/wasmtime/assets/32102519/376eb5f7-d514-4335-b2f8-1382ba36126d</a>)</p>\n</blockquote>",
        "id": 413221653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705432149
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779#issuecomment-1894352623\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779\">issue #7779</a>:</p>\n<blockquote>\n<p>I believe Alex's interpretation is correct, closing.</p>\n</blockquote>",
        "id": 413221659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705432150
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779#issuecomment-1894369282\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7779\">issue #7779</a>:</p>\n<blockquote>\n<p>@erxiaozhou thanks for filing this bug report! In the future, you can make the bug reports even more helpful by reducing the test case before filing an issue. I've filed a PR documenting how that is done here: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7780\">https://github.com/bytecodealliance/wasmtime/pull/7780</a></p>\n</blockquote>",
        "id": 413223541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705432914
    }
]