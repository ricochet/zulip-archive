[
    {
        "content": "<p>KarelPeeters opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5489\">PR #5489</a> from <code>isa-pretty-ret</code> to <code>main</code>:</p>\n<blockquote>\n<p>While experimenting I noticed that the VCode debug output did not include the operands of return instructions. This can be annoying to follow the data flow and see the full register allocation constraints. </p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">2022</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">24</span><span class=\"n\">T16</span>:<span class=\"mi\">28</span>:<span class=\"mi\">14</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">lower</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">built</span><span class=\"w\"> </span><span class=\"n\">vcode</span>: <span class=\"nc\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v132</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n        <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">successor</span>: <span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">rcx</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">rdx</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">addq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span>:\n        <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This PR fixes that for all ISAs, the new output looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">ret</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"o\">=%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I didn't create an issue for this since it seemed like an easy and non-controversial fix. When formatting registers I always followed what the code around it was doing, which is a bit different for each of them.</p>\n<p>I'm not sure who should review this.</p>\n</blockquote>",
        "id": 317746742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671899574
    },
    {
        "content": "<p>KarelPeeters updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5489\">PR #5489</a> from <code>isa-pretty-ret</code> to <code>main</code>.</p>",
        "id": 317748070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671900562
    },
    {
        "content": "<p>KarelPeeters updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5489\">PR #5489</a> from <code>isa-pretty-ret</code> to <code>main</code>.</p>",
        "id": 317748309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671900756
    },
    {
        "content": "<p>KarelPeeters updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5489\">PR #5489</a> from <code>isa-pretty-ret</code> to <code>main</code>.</p>",
        "id": 317748360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671900809
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5489#pullrequestreview-1234851333\">PR review</a>.</p>",
        "id": 319239436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672765568
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5489\">PR #5489</a>.</p>",
        "id": 319239548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672765608
    }
]