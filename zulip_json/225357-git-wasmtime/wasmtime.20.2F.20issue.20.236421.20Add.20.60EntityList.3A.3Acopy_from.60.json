[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421#issuecomment-1557853139\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421\">issue #6421</a>:</p>\n<blockquote>\n<p>I'll leave detailed review to @elliottt but I took a look and I'm having a difficult time convincing myself that this implementation is correct. Some things I'm unclear on:</p>\n<ul>\n<li>What happens if the new size is in a larger size class so the list is reallocated by <code>grow_at</code>?</li>\n<li>What happens if you're copying within a single list and the source overlaps the destination?</li>\n</ul>\n<p>Also, I'd love to hear more about what motivated adding this.</p>\n</blockquote>",
        "id": 360361575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684784648
    },
    {
        "content": "<p>PROMETHIA-27 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421#issuecomment-1557879839\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421\">issue #6421</a>:</p>\n<blockquote>\n<ul>\n<li>I don't believe <code>other</code> will ever move when reallocating, but I may be wrong about that. This could be a real bug.</li>\n<li><code>Vec::copy_within</code> uses <code>memmove</code>, not <code>memcpy</code>, so this is a perfectly valid operation. </li>\n</ul>\n<p>This ended up getting refactored out for now, but the original need was that I had an iterator of <code>EntityList</code> and wanted to produce a new <code>EntityList</code> from their concatenated values (without having an intermediate allocation). This caused borrowck issues with <code>.extend</code> and <code>from_iter</code> because I can't borrow the slice of values <em>and</em> mutate at the same time.</p>\n</blockquote>",
        "id": 360364153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684785600
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421#issuecomment-1558147510\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421\">issue #6421</a>:</p>\n<blockquote>\n<p>Yes, <code>other</code> shouldn't move, but <code>self</code> may. What I missed was that normally <code>self.index</code> is only read after <code>grow_at</code> returns, so it reflects the result of any reallocation.</p>\n<p>However that's not actually true if <code>other</code> is <code>None</code>. If <code>self</code> gets reallocated _and_ we're moving within the same list, then the source range will point into the list which was just freed. That still gets the correct result in the current implementation since the old list's contents don't get overwritten immediately, but it's questionable.</p>\n<p>I have a similar concern about moving within the same list with regard to the documentation for <code>grow_at</code>, which claims the newly-inserted elements have no specified value. So if the source overlaps with the destination, where the destination was allocated with <code>grow_at</code>, then some portion of the source is copied from unspecified values. Again I _think_ this gets the correct result in the current implementation, because <code>grow_at</code> actually leaves behind the old values in those elements, but it's hard for me to convince myself that it's right and that future changes elsewhere won't break it.</p>\n</blockquote>",
        "id": 360390603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684796144
    },
    {
        "content": "<p>PROMETHIA-27 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421#issuecomment-1558191230\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421\">issue #6421</a>:</p>\n<blockquote>\n<p>That's a very good point, the reallocation when moving within self demonstrably breaks- I ended up with an <code>Inst0</code> in a vec that had only <code>Inst1-4</code>, on top of otherwise being incorrect. </p>\n<p>I can add extra logic to handle this case, or just ban the \"copy within one list\" case. The logic would be somewhat verbose and I'm not sure if anyone will ever need that functionality, but I might do it just for completeness' sake. </p>\n<p>For now I'm going to push the \"ban\" option along with some extra tests and if it's agreed that the extra complexity isn't worth supporting the other case then I'm fine with it being merged in that state, I certainly don't need that functionality.</p>\n</blockquote>",
        "id": 360395057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684798481
    },
    {
        "content": "<p>PROMETHIA-27 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421#issuecomment-1558191230\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6421\">issue #6421</a>:</p>\n<blockquote>\n<p>That's a very good point, the reallocation when moving within self demonstrably breaks- I ended up with an <code>Inst0</code> in a vec that had only <code>Inst1-4</code>, on top of otherwise being incorrect. </p>\n<p>I can add extra logic to handle this case, or just ban the \"copy within one list\" case (which I forgot implicitly happens because of borrowck without an <code>Option</code>). The logic would be somewhat verbose and I'm not sure if anyone will ever need that functionality, but I might do it just for completeness' sake. </p>\n<p>For now I'm going to push the \"ban\" option along with some extra tests and if it's agreed that the extra complexity isn't worth supporting the other case then I'm fine with it being merged in that state, I certainly don't need that functionality.</p>\n</blockquote>",
        "id": 360395450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684798766
    }
]