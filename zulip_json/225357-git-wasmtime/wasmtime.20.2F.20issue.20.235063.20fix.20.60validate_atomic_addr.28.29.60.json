[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063#issuecomment-1281000475\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\">issue #5063</a>:</p>\n<blockquote>\n<p>These intrisnics were added quite some time ago and AFAIK haven't ever really been designed for \"ok this is how they should actually work\", instead they've just sort of \"accidentally\" been kept working as the bare-bones ability to run the <code>threads</code> test suite. In that sense instead of continuing to patch them it might be best to take a step back and see whether these intrinsics have the right interface.</p>\n<p>For example the intrinsics currently do <code>checked_add</code> to \"double check\" that the address is in-bounds, but given how low level libcalls are there should be a strict and well-documented contract between the code generator and these intrinsics. I believe I added the comments and usage of <code>checked_add</code> due to the fact that I didn't take the time to understand the code generator. If these intrinsics are to be implemented for real, however, the <code>checked_add</code> should either go away because the generated code handles this or it should remain and have its error handled since it's part of the implementation.</p>\n<p>That's an example of what's going on here but I suspect there may be other things. Overall if you're interested to see these intrinsics implemented fully I think it might be best to flesh that all out at once rather than incrementally, especially given the trickiness of implementing them correctly and importance of implementing them correctly.</p>\n<hr>\n<p>For the technical contents of this PR itself, personally I find it odd that a real address would be passed along here simply to get re-converted into a relative offsets. I personaly think that either the intrinsics shouldn't need the relative offset or they should take the relative offset, rather than being in a weird \"go between\" as they are now.</p>\n</blockquote>",
        "id": 304482306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666018630
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063#issuecomment-1281032660\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\">issue #5063</a>:</p>\n<blockquote>\n<p>@alexcrichton well, maybe the absolute address makes sense, if you look at a naive futex implementation of notify and wait:<br>\n<a href=\"https://github.com/haraldh/wasmtime/commit/2341d1bb1ae2892992b977c4162d495233d1700b\">https://github.com/haraldh/wasmtime/commit/2341d1bb1ae2892992b977c4162d495233d1700b</a></p>\n</blockquote>",
        "id": 304489033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666019710
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063#issuecomment-1281077877\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\">issue #5063</a>:</p>\n<blockquote>\n<p>Yes in that implementation it does look like it makes sense. That's somewhat orthogonal to my point though of this libcall, in my opinion, should either take the relative offset and calculate the real address or it should take the real address. I dont think it makes sense for cranelift code to do the math for the real address only to have the libcall undo the math again. </p>\n</blockquote>",
        "id": 304494730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666021325
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063#issuecomment-1282350802\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\">issue #5063</a>:</p>\n<blockquote>\n<p>Corrected the check. Now checks start and end address of the atomic.</p>\n</blockquote>",
        "id": 304672736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666098082
    },
    {
        "content": "<p>haraldh edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063#issuecomment-1281032660\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\">issue #5063</a>:</p>\n<blockquote>\n<p>@alexcrichton well, maybe the absolute address makes sense, if you look at a naive futex implementation of notify and wait:<br>\n<a href=\"https://github.com/haraldh/wasmtime/commit/216f6943a8a50c5149a7d27e464ba223c6b57452\">https://github.com/haraldh/wasmtime/commit/216f6943a8a50c5149a7d27e464ba223c6b57452</a></p>\n</blockquote>",
        "id": 304674331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666098602
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063#issuecomment-1309579538\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\">issue #5063</a>:</p>\n<blockquote>\n<p>@haraldh, I think this has been superseded by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5239\">https://github.com/bytecodealliance/wasmtime/pull/5239</a>; should we close this PR?</p>\n</blockquote>",
        "id": 308898835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668039809
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063#issuecomment-1311552336\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\">issue #5063</a>:</p>\n<blockquote>\n<p>@abrown, yes, closing</p>\n</blockquote>",
        "id": 309169799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668164591
    }
]