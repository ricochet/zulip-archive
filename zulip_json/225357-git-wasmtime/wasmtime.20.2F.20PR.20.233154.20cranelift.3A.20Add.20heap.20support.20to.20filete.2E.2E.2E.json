[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154\">PR #3154</a> from <code>filetest-heaps</code> to <code>main</code>:</p>\n<blockquote>\n<p>Hey, this is an initial version of what was discussed in  #3136. The design and whether or not its a good idea are still up for debate, but I thought having an initial implementation would help visualizing how this would turn out.</p>\n<p>The interpreter doesn't support multiple heaps yet, so we will need to alter <code>test interpret</code> once it does.</p>\n</blockquote>",
        "id": 248594889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628245972
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154\">PR #3154</a> from <code>filetest-heaps</code> to <code>main</code>:</p>\n<blockquote>\n<p>Hey, this is an initial version of what was discussed in  #3136. The design and whether or not its a good idea are still up for debate, but I thought having an initial implementation would help visualizing how this would turn out.</p>\n<p>The interpreter doesn't support multiple heaps yet, so we will need to alter <code>test interpret</code> once it does.</p>\n<p>Closes #3136 </p>\n</blockquote>",
        "id": 248596130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628246959
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#pullrequestreview-724254963\">PR review</a>.</p>",
        "id": 248598391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628248827
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#discussion_r684157558\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe also add information about what is stored at which offset from the vmctx pointer instead of keeping it implicit? For example:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>; heap: static, size=0x1000, ptr=vmctx+0\n; heap: dynamic, size=0x1000, ptr=vmctx+16, bound=vmctx+24\n</code></pre></div>\n<p>or</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>; heap: static, size=0x1000, ptr=*(vmctx+0)\n; heap: dynamic, size=0x1000, ptr=*(vmctx+16), bound=*(vmctx+24)\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 248598394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628248827
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154\">PR #3154</a> from <code>filetest-heaps</code> to <code>main</code>.</p>",
        "id": 248790704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628459623
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154\">PR #3154</a> from <code>filetest-heaps</code> to <code>main</code>.</p>",
        "id": 249138964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628702249
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154\">PR #3154</a> from <code>filetest-heaps</code> to <code>main</code>.</p>",
        "id": 249139242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628702365
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#pullrequestreview-731178862\">PR review</a>.</p>",
        "id": 249656593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629152961
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#discussion_r689899833\">PR review comment</a>:</p>\n<blockquote>\n<ol>\n<li>Should this be handling overflow?</li>\n<li>And what changes here if/when #3187 is merged?</li>\n<li>And are we going to reuse this struct when we fuzz CLIF + heaps?</li>\n</ol>\n</blockquote>",
        "id": 249656594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629152961
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#pullrequestreview-731178862\">PR review</a>.</p>",
        "id": 249656595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629152961
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#discussion_r689897078\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the heaps may be laid out sequentially in memory but I'm not sure about the pointers: if the user writes the following,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">heap</span>: <span class=\"nc\">static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mh\">0x1000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"o\">=</span><span class=\"n\">vmctx</span><span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"o\">=</span><span class=\"n\">vmctx</span><span class=\"o\">+</span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">heap</span>: <span class=\"nc\">dynamic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mh\">0x1000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"o\">=</span><span class=\"n\">vmctx</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"o\">=</span><span class=\"n\">vmctx</span><span class=\"o\">+</span><span class=\"mi\">24</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then do bad things happen?</p>\n</blockquote>",
        "id": 249656596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629152961
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#discussion_r689900776\">PR review comment</a>:</p>\n<blockquote>\n<p>It seems like here, or somewhere, we should be checking the <code>Function</code> signature to see if its arguments begin with a <code>vmctx</code> and, if not, emit a useful error like \"you need to change your function signature to...\"</p>\n</blockquote>",
        "id": 249656597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629152961
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#discussion_r689897578\">PR review comment</a>:</p>\n<blockquote>\n<p>Perhaps this can't be done... enforced by the parser? Maybe the docs should say something about \"must be laid out sequentially...\"</p>\n</blockquote>",
        "id": 249656598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629152961
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#discussion_r690215873\">PR review comment</a>:</p>\n<blockquote>\n<p>If the layout is different from what we expect, we throw an error.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154/files#diff-d1f760ce6f086af21cead6aa563293fed30f716318faa1250974c60cb62058f4R22\">https://github.com/bytecodealliance/wasmtime/pull/3154/files#diff-d1f760ce6f086af21cead6aa563293fed30f716318faa1250974c60cb62058f4R22</a></p>\n<p>I don't like that this interface gives the user the impression that they can change the offsets. But I think its better than being implicit.</p>\n<blockquote>\n<p>Maybe the docs should say something about \"must be laid out sequentially...\"</p>\n</blockquote>\n<p>Yeah, I'll update the docs.</p>\n</blockquote>",
        "id": 249697491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629194023
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#pullrequestreview-731562045\">PR review</a>.</p>",
        "id": 249697492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629194023
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#pullrequestreview-731584937\">PR review</a>.</p>",
        "id": 249699535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629195484
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#discussion_r690233177\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Should this be handling overflow?</p>\n</blockquote>\n<p>According to the rust docs, <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#safety-5\">this should always be safe</a>. But even in the event where this goes wrong I would expect the tests to fail with a SIGSEGV. It might be better to change to the <code>wrapping_add</code> variant of this function.</p>\n<blockquote>\n<p>And what changes here if/when cranelift: Add stack support to the interpreter with virtual addresses #3187 is merged?</p>\n</blockquote>\n<p>We won't be able to do this the same way with the interpreter, it will probably need some refactoring to handle the separate address space. Off the top of my head, I think we can do something like the following:</p>\n<ul>\n<li>Allocate the heaps as usual</li>\n<li>Register each heap with the interpreter</li>\n<li>Request the heap pointers from the interpreter</li>\n<li>Build the <code>context_struct</code> with those pointers.</li>\n</ul>\n<blockquote>\n<p>And are we going to reuse this struct when we fuzz CLIF + heaps?</p>\n</blockquote>\n<p>I hadn't thought about that, but it actually is an easy way to pass all of this info while fuzzing to the interpreter and the actual compiled target.</p>\n<p>For fuzzing I'd like to relax the requirement that <code>vmctx</code> is the first argument, but that shouldn't be an issue, since we only check for that in the parser.</p>\n<p>We may also need to coordinate the heaps with the generated <code>global_values</code> in each function. Otherwise I think the fuzzer may have issues generating the correct offsets to get valid heap accesses.</p>\n<p>I think we should be OK reusing this for fuzzing with the changes to generate the valid pointers for the interpreter.<br>\n</p>\n</blockquote>",
        "id": 249699538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629195484
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#discussion_r690233177\">PR review comment</a>.</p>",
        "id": 249699731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629195625
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154\">PR #3154</a> from <code>filetest-heaps</code> to <code>main</code>.</p>",
        "id": 250353975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629726596
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154\">PR #3154</a>.</p>",
        "id": 250354079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629726628
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154#pullrequestreview-736651807\">PR review</a>.</p>",
        "id": 250426305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629762100
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154\">PR #3154</a> from <code>filetest-heaps</code> to <code>main</code>.</p>",
        "id": 250454030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629792302
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3154\">PR #3154</a>.</p>",
        "id": 250510387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629822523
    }
]