[
    {
        "content": "<p>Swivelgames opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Provide an interface for deriving a ComponentFunc params original names</p>\n<h4>Benefit</h4>\n<p>Presently, <code>wasmtime</code> provides a number tools that can be leveraged for something that resembles Reflection, but the details for Function Parameters are lossy. Especially for more complex runtime parameter mapping, it would be great if the names of function parameters were preserved, and an interface provided for retrieving them.</p>\n<h4>Implementation</h4>\n<p>In order to maintain backwards compatibility, it could likely be something like a <code>param_names()</code> method.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ComponentFunc</span>\n\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">param_names</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">ExactSizeIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"err\">`</span>\n\n<span class=\"w\">      </span><span class=\"n\">Iterates</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">parameters</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>There really doesn't seem to be one that's built-in to <code>wasmtime</code>. In order to grab the parameter names, I'd likely need to do something far more complex.</p>\n<p>Based on <code>wasm-tools</code>, though, it seems like the name of the params are preserved in the <code>.wasm</code>, which is intriguing.</p>\n<p>To my knowledge, ComponentFunc params are the entities that do not have some way of deriving their original names.</p>\n</blockquote>",
        "id": 481894240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731401503
    },
    {
        "content": "<p>Swivelgames edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Provide an interface for deriving a ComponentFunc params original names</p>\n<h4>Benefit</h4>\n<p>Presently, <code>wasmtime</code> provides a number tools that can be leveraged for something that resembles Reflection, but the details for Function Parameters are lossy. Especially for more complex runtime parameter mapping, it would be great if the names of function parameters were preserved, and an interface provided for retrieving them.</p>\n<h4>Implementation</h4>\n<p>In order to maintain backwards compatibility, it could likely be something like a <code>param_names()</code> method.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ComponentFunc</span>\n\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">param_names</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">ExactSizeIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"err\">`</span>\n\n<span class=\"w\">      </span><span class=\"n\">Iterates</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">parameters</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>There really doesn't seem to be one that's built-in to <code>wasmtime</code>. In order to grab the parameter names, I'd likely need to do something far more complex.</p>\n<p>Based on <code>wasm-tools</code>, though, it seems like the name of the params are preserved in the <code>.wasm</code>, which is intriguing.</p>\n<p>To my knowledge, ComponentFunc params are the entities that do not have some way of deriving their original names.<br>\n```[tasklist]</p>\n<h3>Tasks</h3>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 482072126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731462961
    },
    {
        "content": "<p>Swivelgames edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Provide an interface for deriving a ComponentFunc params original names</p>\n<h4>Benefit</h4>\n<p>Presently, <code>wasmtime</code> provides a number tools that can be leveraged for something that resembles Reflection, but the details for Function Parameters are lossy. Especially for more complex runtime parameter mapping, it would be great if the names of function parameters were preserved, and an interface provided for retrieving them.</p>\n<h4>Implementation</h4>\n<p>In order to maintain backwards compatibility, it could likely be something like a <code>param_names()</code> method.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ComponentFunc</span>\n\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">param_names</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">ExactSizeIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"err\">`</span>\n\n<span class=\"w\">      </span><span class=\"n\">Iterates</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">parameters</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>There really doesn't seem to be one that's built-in to <code>wasmtime</code>. In order to grab the parameter names, I'd likely need to do something far more complex.</p>\n<p>Based on <code>wasm-tools</code>, though, it seems like the name of the params are preserved in the <code>.wasm</code>, which is intriguing.</p>\n<p>To my knowledge, ComponentFunc params are the entities that do not have some way of deriving their original names.</p>\n</blockquote>",
        "id": 482072178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731462968
    },
    {
        "content": "<p>Swivelgames <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480267061\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>For what it's worth, my personal use-case for this is for a runtime tool that presents the parameter names.</p>\n<p>That being said, assigning arguments to parameters via their names is supported by some popular languages, so preserving parameters names could potentially improve the ergonomics when using languages that support named arguments.</p>\n<ol>\n<li>\n<p><strong>C#</strong> (Starting at v4)<br>\n<code>csharp\n   MethodName(arg1: 42, arg2: \"Hello\");\n   </code></p>\n</li>\n<li>\n<p><strong>Kotlin</strong><br>\n<code>kotlin\n   myFunction(arg1 = 42, arg2 = \"Hello\")\n   </code></p>\n</li>\n<li>\n<p><strong>Python</strong><br>\n<code>python\n   my_function(arg1=42, arg2=\"Hello\")\n   </code></p>\n</li>\n<li>\n<p><strong>PHP</strong><br>\n<code>php\n   my_function(arg1: 42, arg2: \"Hello\");\n   </code></p>\n</li>\n<li>\n<p><strong>Ruby</strong><br>\n<code>ruby\n   my_function(arg1: 42, arg2: \"Hello\")\n   </code></p>\n</li>\n<li>\n<p><strong>Swift</strong><br>\n<code>swift\n   myFunction(arg1: 42, arg2: \"Hello\")\n   </code></p>\n</li>\n</ol>\n<p>Other languages support named arguments too, like <code>R</code>, <code>Scala</code>, <code>Lisp</code>, and others, but I can't imagine they're high on the list of targets for WASM/WASI <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>iirc, you can _technically_ do it in C++20 with gcc and clang, but I'm actually not 100% sure about that, and not sure how popular of a feature it is _if you can do it_.</p>\n</blockquote>",
        "id": 482721004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731720621
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480468931\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>Are param names part of the abi as opposed to just debuginfo?</p>\n</blockquote>",
        "id": 482747960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731743547
    },
    {
        "content": "<p>Swivelgames <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480498777\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>That's a good question. I'm not sure. I was actually digging into that earlier after I posted my most recent message.</p>\n<p>In <code>wasi-parser</code>, for instance, they're <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wit-parser/src/lib.rs#L802\">represented by a Vector of <code>(String, Type)</code> tuples</a>. In <code>wasm-wave</code>, it has <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wasm-wave/src/wasm/func.rs#L14-L22\">methods for both</a> <code>params</code> and <code>param_names</code>, similar to what I'm proposing here, with the caveat that it will return an empty iterable \"if this WasmFunc impl does not support param names.\"</p>\n<p>I imagine there are cases where they're not included, but I think that's still manageable. They could easily be represented either by an <code>Vec&lt;Option&lt;String&gt;&gt;</code> or by their index if they're omitted.</p>\n</blockquote>",
        "id": 482755994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731750896
    },
    {
        "content": "<p>Swivelgames deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480498777\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>That's a good question. I'm not sure. I was actually digging into that earlier after I posted my most recent message.</p>\n<p>In <code>wasi-parser</code>, for instance, they're <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wit-parser/src/lib.rs#L802\">represented by a Vector of <code>(String, Type)</code> tuples</a>. In <code>wasm-wave</code>, it has <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wasm-wave/src/wasm/func.rs#L14-L22\">methods for both</a> <code>params</code> and <code>param_names</code>, similar to what I'm proposing here, with the caveat that it will return an empty iterable \"if this WasmFunc impl does not support param names.\"</p>\n<p>I imagine there are cases where they're not included, but I think that's still manageable. They could easily be represented either by an <code>Vec&lt;Option&lt;String&gt;&gt;</code> or by their index if they're omitted.</p>\n</blockquote>",
        "id": 482756013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731750907
    },
    {
        "content": "<p>Swivelgames <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480498874\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>@bjorn3 That's a good question. I'm not sure. I was actually digging into that earlier after I posted my most recent message.</p>\n<p>In <code>wasi-parser</code>, for instance, they're <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wit-parser/src/lib.rs#L802\">represented by a Vector of <code>(String, Type)</code> tuples</a>. In <code>wasm-wave</code>, it has <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wasm-wave/src/wasm/func.rs#L14-L22\">methods for both</a> <code>params</code> and <code>param_names</code>, similar to what I'm proposing here, with the caveat that it will return an empty iterable \"if this WasmFunc impl does not support param names.\"</p>\n<p>I imagine there are cases where they're not included, but I think that's still manageable. They could easily be represented either by an <code>Vec&lt;Option&lt;String&gt;&gt;</code> or by their index if they're omitted.</p>\n</blockquote>",
        "id": 482756025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731750917
    },
    {
        "content": "<p>Swivelgames edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480498874\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>@bjorn3 That's a good question. I'm not sure. I was actually digging into that earlier after I posted my most recent message.</p>\n<p>In <code>wasi-parser</code>, for instance, they're <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wit-parser/src/lib.rs#L802\">represented by a Vector of <code>(String, Type)</code> tuples</a>. In <code>wasm-wave</code>, it has <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wasm-wave/src/wasm/func.rs#L14-L22\">methods for both</a> <code>params()</code> and <code>param_names()</code>, similar to what I'm proposing here, with the caveat that it will return an empty iterable \"if this WasmFunc impl does not support param names.\"</p>\n<p>I imagine there are cases where they're not included, but I think that's still manageable. They could easily be represented either by an <code>Vec&lt;Option&lt;String&gt;&gt;</code> or by their index if they're omitted.</p>\n</blockquote>",
        "id": 482756049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731750947
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480500862\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>I mean if they are not considered part of the ABI, different components may use different param names for the same function and thus if the host uses named function params derived from the component itself, it wouldn't work with some components even if they are supposed to be abi compatible. Only deriving the named function params that use host uses from a .wit file hard coded into the host would work fine in that case as if the .wit file changes you may need to change the host anyway and can update callers that use named function param at the same time without being affected by the choice of param names by the component that the host wants to load.</p>\n</blockquote>",
        "id": 482756569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731751392
    },
    {
        "content": "<p>Swivelgames <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480502086\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>It looks like the serde serializer in <code>wasm-parser</code> also <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wit-parser/src/serde_.rs#L88-L109\">expects them, but omits the names if they're an empty string</a>.</p>\n<p>And <code>wasm-encoder</code> <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/4e2b392195c3b8db9adf8c67f5890c1418c4e4b7/crates/wasm-encoder/src/component/types.rs#L370-L393\">expects them as well</a>.</p>\n<p>These examples, of course, are being extracted from the <code>.wasm</code> file itself, not the <code>.wit</code> (except maybe <code>wasm-encoder</code>).</p>\n<p>But I'm looking around to see if their inclusion is at least outlined in a spec somewhere. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n</blockquote>",
        "id": 482756837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731751669
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480503278\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>The fact that it is encoded in the wasm file doesn't mean that it is supposed to affect the abi. It could well be included just to make debugging easier.</p>\n</blockquote>",
        "id": 482757208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731751953
    },
    {
        "content": "<p>Swivelgames <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480506124\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>It looks like they're specifically included in the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md?plain=1#L563\">_component-level_ ABI</a></p>\n<blockquote>\n<p>Component-level type definitions are symmetric to core-level type definitions,<br>\nbut use a completely different set of value types. Unlike [<code>core:valtype</code>]<br>\nwhich is low-level and assumes a shared linear memory for communicating<br>\ncompound values, component-level value types assume no shared memory and must<br>\ntherefore be high-level, describing entire compound values.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"EBNF\"><pre><span></span><code><span class=\"err\">/*</span> <span class=\"err\">...</span> <span class=\"err\">*/</span>\n<span class=\"k\">functype      </span><span class=\"err\">::</span><span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">func </span><span class=\"p\">(</span><span class=\"k\">param </span><span class=\"s2\">\"&lt;label&gt;\"</span> <span class=\"err\">&lt;</span><span class=\"k\">valtype</span><span class=\"err\">&gt;</span><span class=\"p\">)</span><span class=\"err\">*</span> <span class=\"p\">(</span><span class=\"k\">result </span><span class=\"err\">&lt;</span><span class=\"k\">valtype</span><span class=\"err\">&gt;</span><span class=\"p\">)</span><span class=\"err\">?</span><span class=\"p\">)</span>\n<span class=\"err\">/*</span> <span class=\"p\">.</span><span class=\"err\">..</span> <span class=\"err\">*/</span>\n</code></pre></div>\n<p>In this case they're referred to as \"label\"s.</p>\n<p>They're also included in the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md\">Binary format</a>:</p>\n<div class=\"codehilite\" data-code-language=\"EBNF\"><pre><span></span><code><span class=\"k\">functype      </span><span class=\"err\">::</span><span class=\"o\">=</span> <span class=\"err\">0</span><span class=\"k\">x40 ps</span><span class=\"err\">:&lt;</span><span class=\"k\">paramlist</span><span class=\"err\">&gt;</span> <span class=\"k\">rs</span><span class=\"err\">:&lt;</span><span class=\"k\">resultlist</span><span class=\"err\">&gt;</span>     <span class=\"err\">=&gt;</span> <span class=\"p\">(</span><span class=\"k\">func ps rs</span><span class=\"p\">)</span>\n<span class=\"k\">paramlist     </span><span class=\"err\">::=</span> <span class=\"k\">lt</span><span class=\"err\">*:</span><span class=\"k\">vec</span><span class=\"p\">(</span><span class=\"err\">&lt;</span><span class=\"k\">labelvaltype</span><span class=\"err\">&gt;</span><span class=\"p\">)</span>                 <span class=\"err\">=&gt;</span> <span class=\"p\">(</span><span class=\"k\">param lt</span><span class=\"p\">)</span><span class=\"err\">*</span>\n</code></pre></div>\n<p>Where <code>labelvaltype</code> is the Label + Type:</p>\n<div class=\"codehilite\" data-code-language=\"EBNF\"><pre><span></span><code><span class=\"k\">labelvaltype  </span><span class=\"err\">::</span><span class=\"o\">=</span> <span class=\"k\">l</span><span class=\"err\">:&lt;</span><span class=\"k\">label</span><span class=\"err\">'&gt;</span> <span class=\"k\">t</span><span class=\"err\">:&lt;</span><span class=\"k\">valtype</span><span class=\"err\">&gt;</span>                  <span class=\"err\">=&gt;</span> <span class=\"k\">l t</span>\n</code></pre></div>\n<blockquote>\n<p>All <strong>_parameter labels_</strong>, result labels, record field labels, variant case labels, flag labels, enum case labels, component import names, component export names, instance import names and instance export names must be unique in their containing scope, considering two labels that differ only in case to be equal and thus rejected.<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 482757823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731752578
    },
    {
        "content": "<p>Swivelgames edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480506124\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>It looks like they're specifically included in the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md?plain=1#L563\">_component-level_ ABI</a></p>\n<blockquote>\n<p>Component-level type definitions are symmetric to core-level type definitions,<br>\nbut use a completely different set of value types. Unlike [<code>core:valtype</code>]<br>\nwhich is low-level and assumes a shared linear memory for communicating<br>\ncompound values, component-level value types assume no shared memory and must<br>\ntherefore be high-level, describing entire compound values.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"EBNF\"><pre><span></span><code><span class=\"err\">/*</span> <span class=\"err\">...</span> <span class=\"err\">*/</span>\n<span class=\"k\">functype      </span><span class=\"err\">::</span><span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">func </span><span class=\"p\">(</span><span class=\"k\">param </span><span class=\"s2\">\"&lt;label&gt;\"</span> <span class=\"err\">&lt;</span><span class=\"k\">valtype</span><span class=\"err\">&gt;</span><span class=\"p\">)</span><span class=\"err\">*</span> <span class=\"p\">(</span><span class=\"k\">result </span><span class=\"err\">&lt;</span><span class=\"k\">valtype</span><span class=\"err\">&gt;</span><span class=\"p\">)</span><span class=\"err\">?</span><span class=\"p\">)</span>\n<span class=\"err\">/*</span> <span class=\"p\">.</span><span class=\"err\">..</span> <span class=\"err\">*/</span>\n</code></pre></div>\n<p>In this case they're referred to as \"label\"s.</p>\n<p>They're also included in the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md\">Binary format</a>:</p>\n<div class=\"codehilite\" data-code-language=\"EBNF\"><pre><span></span><code><span class=\"k\">functype      </span><span class=\"err\">::</span><span class=\"o\">=</span> <span class=\"err\">0</span><span class=\"k\">x40 ps</span><span class=\"err\">:&lt;</span><span class=\"k\">paramlist</span><span class=\"err\">&gt;</span> <span class=\"k\">rs</span><span class=\"err\">:&lt;</span><span class=\"k\">resultlist</span><span class=\"err\">&gt;</span>     <span class=\"err\">=&gt;</span> <span class=\"p\">(</span><span class=\"k\">func ps rs</span><span class=\"p\">)</span>\n<span class=\"k\">paramlist     </span><span class=\"err\">::=</span> <span class=\"k\">lt</span><span class=\"err\">*:</span><span class=\"k\">vec</span><span class=\"p\">(</span><span class=\"err\">&lt;</span><span class=\"k\">labelvaltype</span><span class=\"err\">&gt;</span><span class=\"p\">)</span>                 <span class=\"err\">=&gt;</span> <span class=\"p\">(</span><span class=\"k\">param lt</span><span class=\"p\">)</span><span class=\"err\">*</span>\n</code></pre></div>\n<p>Where <code>labelvaltype</code> is the Label + Type:</p>\n<div class=\"codehilite\" data-code-language=\"EBNF\"><pre><span></span><code><span class=\"k\">labelvaltype  </span><span class=\"err\">::</span><span class=\"o\">=</span> <span class=\"k\">l</span><span class=\"err\">:&lt;</span><span class=\"k\">label</span><span class=\"s1\">'&gt; t:&lt;valtype&gt;                  =&gt; l t</span>\n<span class=\"s1\">label'</span>        <span class=\"err\">::=</span> <span class=\"k\">len</span><span class=\"err\">:&lt;</span><span class=\"k\">u32</span><span class=\"err\">&gt;</span> <span class=\"k\">l</span><span class=\"err\">:&lt;</span><span class=\"k\">label</span><span class=\"err\">&gt;</span>                     <span class=\"err\">=&gt;</span> <span class=\"k\">l    </span><span class=\"p\">(</span><span class=\"k\">if len </span><span class=\"err\">=</span> <span class=\"p\">|</span><span class=\"k\">l</span><span class=\"p\">|)</span>\n</code></pre></div>\n<blockquote>\n<p>All <strong>_parameter labels_</strong>, result labels, record field labels, variant case labels, flag labels, enum case labels, component import names, component export names, instance import names and instance export names must be unique in their containing scope, considering two labels that differ only in case to be equal and thus rejected.<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 482758027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731752792
    },
    {
        "content": "<p>Swivelgames <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480508638\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>Here's <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/canonical-abi/definitions.py#L86-L88\">another reference</a> from the <code>canonical-abi/definitions.py</code> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">FuncType</span><span class=\"p\">(</span><span class=\"n\">ExternType</span><span class=\"p\">):</span>\n  <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span><span class=\"n\">ValType</span><span class=\"p\">]]</span>\n</code></pre></div>\n</blockquote>",
        "id": 482758304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731753041
    },
    {
        "content": "<p>Swivelgames <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480508876\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>So it appears that they're part of the component-level ABI, but not the core-level ABI.</p>\n</blockquote>",
        "id": 482758349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731753093
    },
    {
        "content": "<p>Swivelgames edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480508638\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>Here's <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/canonical-abi/definitions.py#L86-L88\">another reference</a> from the <code>canonical-abi/definitions.py</code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">FuncType</span><span class=\"p\">(</span><span class=\"n\">ExternType</span><span class=\"p\">):</span>\n  <span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span><span class=\"n\">ValType</span><span class=\"p\">]]</span>\n</code></pre></div>\n</blockquote>",
        "id": 482758478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731753231
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480519038\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>I couldn't find anywhere where the param names are actually checked for equality. AFAICT they are ignored for the purpose of checking if two function types are equal and thus ABI compatible.</p>\n</blockquote>",
        "id": 482758913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731753709
    },
    {
        "content": "<p>Swivelgames <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480539565\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>Indeed. It seems my use-case (simply getting the list of parameter names) is supported, but not the additional use-case of implementing host-language named parameters, at least not at the moment.</p>\n</blockquote>",
        "id": 482764786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731758933
    },
    {
        "content": "<p>Swivelgames edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480539565\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>Indeed. It seems my use-case (simply getting the list of parameter names of a Component-level function at runtime) is supported, but not the additional use-case of implementing host-language named parameters, at least not at the moment.</p>\n</blockquote>",
        "id": 482765044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731759150
    },
    {
        "content": "<p>Swivelgames edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595#issuecomment-2480539565\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9595\">issue #9595</a>:</p>\n<blockquote>\n<p>Indeed. It seems my use-case (simply getting the list of parameter names of a Component-level function at runtime) is supported, but not the additional use-case of implementing host-language named parameters (at least not for the moment).</p>\n</blockquote>",
        "id": 482765065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731759171
    }
]