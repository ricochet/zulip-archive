[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190\">PR #4190</a> from <code>use-a-magic</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is motivated by my work on the component model<br>\nimplementation for imported functions. Currently all context pointers in<br>\nwasm are <code>*mut VMContext</code> but with the component model my plan is to<br>\nmake some pointers instead along the lines of <code>*mut VMComponentContext</code>.<br>\nIn doing this though one worry I have is breaking what has otherwise<br>\nbeen a core invariant of Wasmtime for quite some time, subtly<br>\nintroducing bugs by accident.</p>\n<p>To help assuage my worry I've opted here to erase knowledge of<br>\n<code>*mut VMContext</code> where possible. Instead where applicable a context<br>\npointer is simply known as <code>*mut ()</code> and the embedder doesn't actually<br>\nknow anything about this context beyond the value of the pointer. This<br>\nwill help prevent Wasmtime from accidentally ever trying to interpret<br>\nthis context pointer as an actual <code>VMContext</code> when it might instead be a<br>\n<code>VMComponentContext</code>.</p>\n<p>Overall this was a pretty smooth transition. The main change here is<br>\nthat the <code>VMTrampoline</code> (now sporting more docs) has its first argument<br>\nchanged to <code>*mut ()</code>. The second argument, the caller context, is still<br>\nconfigured as <code>*mut VMContext</code> though because all functions are always<br>\ncalled from wasm still. Eventually for component-to-component calls I<br>\nthink we'll probably \"fake\" the second argument as the same as the first<br>\nargument, losing track of the original caller, as an intentional way of<br>\nisolating components from each other.</p>\n<p>Along the way there are a few host locations which do actually assume<br>\nthat the first argument is indeed a <code>VMContext</code>. These are valid<br>\nassumptions that are upheld from a correct implementation, but I opted<br>\nto add a \"magic\" field to <code>VMContext</code> to assert this in debug mode. This<br>\nnew \"magic\" field is inintialized during normal vmcontext initialization<br>\nand it's checked whenever a <code>VMContext</code> is reinterpreted as an<br>\n<code>Instance</code> (but only in debug mode). My hope here is to catch any future<br>\naccidental mistakes, if ever.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 284166821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653675374
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190\">PR #4190</a>.</p>",
        "id": 284181651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653683501
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190#pullrequestreview-991183444\">PR review</a>.</p>",
        "id": 284541991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654034011
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190#pullrequestreview-991183444\">PR review</a>.</p>",
        "id": 284541992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654034011
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190#discussion_r886153970\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // Also note that this magic is only ever invalid in the presence of\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 284541995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654034011
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190#discussion_r886155058\">PR review comment</a>:</p>\n<blockquote>\n<p>wat</p>\n</blockquote>",
        "id": 284541996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654034011
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190#discussion_r886157275\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we make the <code>*mut ()</code> to <code>*mut VMContext</code> cast (that we've done in two different places now) go through a helper function that does the magic value debug assertion eagerly?</p>\n</blockquote>",
        "id": 284541997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654034011
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190#discussion_r886155213\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// * `*mut VMContext` - this is the \"caller\" context, which at this time is\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 284541999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654034011
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190\">PR #4190</a> from <code>use-a-magic</code> to <code>main</code>.</p>",
        "id": 284618683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654093515
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190#pullrequestreview-992070129\">PR review</a>.</p>",
        "id": 284618826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654093563
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190#discussion_r886874138\">PR review comment</a>:</p>\n<blockquote>\n<p>I have word</p>\n</blockquote>",
        "id": 284618831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654093563
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190\">PR #4190</a> from <code>use-a-magic</code> to <code>main</code>.</p>",
        "id": 284618924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654093604
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4190\">PR #4190</a>.</p>",
        "id": 284632198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654099250
    }
]