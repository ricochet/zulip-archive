[
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2734\">Issue #2734</a>:</p>\n<blockquote>\n<p>Repro:</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//pretty_env_logger::init();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// All wasm objects operate within the context of a \"store\"</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">interruptable</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">cranelift_debug_verifier</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Modules can be compiled through either the text or binary format</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">        (module</span>\n<span class=\"s\">            (import \"\" \"\" (func $host_hello</span>\n<span class=\"s\">                (param i32 i32 i32 i32 i32 i32 i32 i32 i32 i32))</span>\n<span class=\"s\">            )</span>\n\n<span class=\"s\">            (func (export \"</span><span class=\"n\">hello</span><span class=\"s\">\")</span>\n<span class=\"s\">                i32.const 1</span>\n<span class=\"s\">                i32.const 2</span>\n<span class=\"s\">                i32.const 3</span>\n<span class=\"s\">                i32.const 4</span>\n<span class=\"s\">                i32.const 5</span>\n<span class=\"s\">                i32.const 6</span>\n<span class=\"s\">                i32.const 7</span>\n<span class=\"s\">                i32.const 8</span>\n<span class=\"s\">                i32.const 9</span>\n<span class=\"s\">                i32.const 10</span>\n<span class=\"s\">                call $host_hello)</span>\n<span class=\"s\">        )</span>\n<span class=\"s\">    \"</span><span class=\"err\">#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Host functions can be defined which take/return wasm values and</span>\n<span class=\"w\">    </span><span class=\"c1\">// execute arbitrary code on the host.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host_hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">x1</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x2</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x3</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x4</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x5</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x6</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x7</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x8</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x9</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x10</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Instantiation of a module requires specifying its imports and then</span>\n<span class=\"w\">    </span><span class=\"c1\">// afterwards we can fetch exports by name, as well as asserting the</span>\n<span class=\"w\">    </span><span class=\"c1\">// type signature of the function with `get_typed_func`.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">host_hello</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// And finally we can call the wasm as if it were a Rust function!</span>\n<span class=\"w\">    </span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This causes a panic for the 8th argument:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"mi\">8</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">54</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n</code></pre></div>\n<p>A wasm function calls an import that takes more than 8 arguments. 8 is the cutoff value for \"in registers\" vs \"on the stack\" for argument passing in the aarch64 ABI, so this might be related. I have looked at the codegen and what Cranelift generates seems sensible (?), so it's unclear what's going on. Will investigate a bit more tomorrow.</p>\n</blockquote>",
        "id": 230741202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616005028
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2734\">Issue #2734</a>:</p>\n<blockquote>\n<p>Repro:</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//pretty_env_logger::init();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// All wasm objects operate within the context of a \"store\"</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">interruptable</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">cranelift_debug_verifier</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Modules can be compiled through either the text or binary format</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">        (module</span>\n<span class=\"s\">            (import \"\" \"\" (func $host_hello</span>\n<span class=\"s\">                (param i32 i32 i32 i32 i32 i32 i32 i32 i32 i32))</span>\n<span class=\"s\">            )</span>\n\n<span class=\"s\">            (func (export \"</span><span class=\"n\">hello</span><span class=\"s\">\")</span>\n<span class=\"s\">                i32.const 1</span>\n<span class=\"s\">                i32.const 2</span>\n<span class=\"s\">                i32.const 3</span>\n<span class=\"s\">                i32.const 4</span>\n<span class=\"s\">                i32.const 5</span>\n<span class=\"s\">                i32.const 6</span>\n<span class=\"s\">                i32.const 7</span>\n<span class=\"s\">                i32.const 8</span>\n<span class=\"s\">                i32.const 9</span>\n<span class=\"s\">                i32.const 10</span>\n<span class=\"s\">                call $host_hello)</span>\n<span class=\"s\">        )</span>\n<span class=\"s\">    \"</span><span class=\"err\">#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Host functions can be defined which take/return wasm values and</span>\n<span class=\"w\">    </span><span class=\"c1\">// execute arbitrary code on the host.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host_hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">x1</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x2</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x3</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x4</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x5</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x6</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x7</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x8</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x9</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x10</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Instantiation of a module requires specifying its imports and then</span>\n<span class=\"w\">    </span><span class=\"c1\">// afterwards we can fetch exports by name, as well as asserting the</span>\n<span class=\"w\">    </span><span class=\"c1\">// type signature of the function with `get_typed_func`.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">host_hello</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// And finally we can call the wasm as if it were a Rust function!</span>\n<span class=\"w\">    </span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This causes a panic for the 8th argument:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"mi\">8</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">54</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n</code></pre></div>\n<p>A wasm function calls an import that takes more than 8 arguments. 8 is the cutoff value for \"in registers\" vs \"on the stack\" for argument passing in the aarch64 ABI, so this might be related. I have looked at the codegen and what Cranelift generates seems sensible (?), so it's unclear what's going on. Will investigate a bit more tomorrow.</p>\n</blockquote>",
        "id": 230741203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616005028
    },
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2734\">Issue #2734</a>:</p>\n<blockquote>\n<p>Repro:</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//pretty_env_logger::init();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// All wasm objects operate within the context of a \"store\"</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">interruptable</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">cranelift_debug_verifier</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Modules can be compiled through either the text or binary format</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">        (module</span>\n<span class=\"s\">            (import \"\" \"\" (func $host_hello</span>\n<span class=\"s\">                (param i32 i32 i32 i32 i32 i32 i32 i32 i32 i32))</span>\n<span class=\"s\">            )</span>\n\n<span class=\"s\">            (func (export \"</span><span class=\"n\">hello</span><span class=\"s\">\")</span>\n<span class=\"s\">                i32.const 1</span>\n<span class=\"s\">                i32.const 2</span>\n<span class=\"s\">                i32.const 3</span>\n<span class=\"s\">                i32.const 4</span>\n<span class=\"s\">                i32.const 5</span>\n<span class=\"s\">                i32.const 6</span>\n<span class=\"s\">                i32.const 7</span>\n<span class=\"s\">                i32.const 8</span>\n<span class=\"s\">                i32.const 9</span>\n<span class=\"s\">                i32.const 10</span>\n<span class=\"s\">                call $host_hello)</span>\n<span class=\"s\">        )</span>\n<span class=\"s\">    \"</span><span class=\"err\">#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Host functions can be defined which take/return wasm values and</span>\n<span class=\"w\">    </span><span class=\"c1\">// execute arbitrary code on the host.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host_hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">x1</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x2</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x3</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x4</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x5</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x6</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x7</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x8</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x9</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">x10</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Instantiation of a module requires specifying its imports and then</span>\n<span class=\"w\">    </span><span class=\"c1\">// afterwards we can fetch exports by name, as well as asserting the</span>\n<span class=\"w\">    </span><span class=\"c1\">// type signature of the function with `get_typed_func`.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">host_hello</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// And finally we can call the wasm as if it were a Rust function!</span>\n<span class=\"w\">    </span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This causes a panic for the 8th argument:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"mi\">8</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">54</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n</code></pre></div>\n<p>A wasm function calls an import that takes more than 8 arguments. 8 is the cutoff value for \"in registers\" vs \"on the stack\" for argument passing in the aarch64 ABI, so this might be related. I have looked at the codegen and what Cranelift generates seems sensible (?), so it's unclear what's going on. Will investigate a bit more tomorrow.</p>\n</blockquote>",
        "id": 230741204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616005028
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2734#issuecomment-801307674\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2734\">Issue #2734</a>:</p>\n<blockquote>\n<p>It appears that there may be some relevant differences in Apple's aarch64 ABI compared to the standard AAPCS. From <a href=\"https://developer.apple.com/documentation/xcode/writing_arm64_code_for_apple_platforms\">this link</a>, there is the statement \"Apple platforms diverge from the ARM64 standard ABI in the following ways\" followed by a list. I wonder if this is relevant -- I haven't fully digested the details there yet...</p>\n</blockquote>",
        "id": 230741884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616005295
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2734#issuecomment-801309647\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2734\">Issue #2734</a>:</p>\n<blockquote>\n<p>Specifically, it seems that for args &lt; 8 bytes that are on the stack, we need to <em>not</em> pad up to 8 bytes -- so args x9 and x10 should be at <code>[sp]</code> and <code>[sp+4]</code> on macOS/aarch64, vs. <code>[sp]</code> and <code>[sp+8]</code> on e.g. Linux/aarch64. That doesn't explain the issue with x8, however.</p>\n</blockquote>",
        "id": 230742376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616005470
    }
]