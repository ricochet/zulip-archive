[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295\">Issue #1295</a>:</p>\n<blockquote>\n<p>Investigating a <a href=\"https://github.com/bytecodealliance/wasmtime/runs/501673516?check_suite_focus=true\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/runs/501673516?check_suite_focus=true\">spurious test failure</a> I'm able to reproduce this locally on Linux with a script that looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">os</span>::<span class=\"n\">unix</span>::<span class=\"n\">prelude</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">Command</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;cargo&quot;</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">&quot;build&quot;</span><span class=\"p\">).</span><span class=\"n\">status</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">success</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"mi\">28</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"mi\">1_000_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;./target/debug/wasmtime&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">&quot;--disable-cache&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">&quot;./tests/wasm/unreachable.wat&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">output</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">signal</span><span class=\"p\">().</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">signal</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm not really sure why concurrent execution of wasmtime is necessary, but I wasn't able to reproduce with only one wasmtime process at a time.</p>\n<p>This almost instantly has one of the subprocesses segfault for me locally, and the core dump shows the stack trace looks like:</p>\n<div class=\"codehilite\"><pre><span></span>#0  _dl_runtime_resolve_xsavec () at ../sysdeps/x86_64/dl-trampoline.h:92\n#1  0x00007f01cec4163e in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#2  0x00007f01cec41bd6 in _Unwind_Find_FDE () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#3  0x00007f01cec3e183 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#4  0x00007f01cec3f360 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#5  0x00007f01cec40068 in _Unwind_Backtrace () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#6  0x000056042eee2d7d in backtrace::backtrace::libunwind::trace (cb=...) at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\n#7  backtrace::backtrace::trace_unsynchronized (cb=...) at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\n#8  0x000056042eee2cfe in backtrace::backtrace::trace (cb=...) at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:53\n#9  0x000056042eed573d in backtrace::capture::Backtrace::create (ip=94575967164064) at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/capture.rs:164\n#10 0x000056042eed56b4 in backtrace::capture::Backtrace::new_unresolved () at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/capture.rs:158\n#11 0x000056042eeceb08 in wasmtime_runtime::traphandlers::CallThreadState::handle_trap (self=0x7fff0284edd0, pc=0x7f01cf687005 &quot;\\017\\v&quot;, reset_guard_page=false, call_handler=...) at crates/runtime/src/traphandlers.rs:343\n#12 0x000056042eecef60 in wasmtime_runtime::traphandlers::HandleTrap::{{closure}} (info=...) at crates/runtime/src/traphandlers.rs:36\n#13 0x0000000000000000 in ?? ()\n</pre></div>\n\n\n<p>cc @yurydelendik it looks like this is something related to FDE information perhaps?</p>\n</blockquote>",
        "id": 190333588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583962051
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-597887143\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-597887143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295\">Issue #1295</a>:</p>\n<blockquote>\n<p>Oh also for posterity, the <code>unreachable.wat</code> file looks like:</p>\n<div class=\"codehilite\"><pre><span></span>(module\n    (func (export &quot;_start&quot;)\n        unreachable\n    )\n)\n</pre></div>\n\n\n</blockquote>",
        "id": 190333700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583962117
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-597889235\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-597889235\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295\">Issue #1295</a>:</p>\n<blockquote>\n<p>@sunfishcode pointed me at <a href=\"https://github.com/rust-lang/rust/issues/69533\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69533\">https://github.com/rust-lang/rust/issues/69533</a> which looks about right. The failing instruction is <code>mov    %rax,(%rsp)</code> which looks like a stack overflow, so sorry @yurydelendik you can probably disregard this, this looks purely related to stacks.</p>\n</blockquote>",
        "id": 190334192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583962457
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-597893000\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-597893000\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295\">Issue #1295</a>:</p>\n<blockquote>\n<p>It looks like this isn't just isolated to debug builds, even release builds are failing with a stack trace that looks like:</p>\n<div class=\"codehilite\"><pre><span></span>#0  0x00007f08b8faf242 in do_lookup_x (undef_name=undef_name@entry=0x7f08b8763d69 &quot;free&quot;, new_hash=new_hash@entry=2090266759, old_hash=old_hash@entry=0x7f08b91ca080, ref=0x7f08b8762718, result=result@entry=0x7f08b91ca090, scope=0x7f08b91ce428, i=0, version=0x7f08b91aa7b0, flags=5, skip=0x0, type_class=1, undef_map=0x7f08b91acf00) at dl-lookup.c:338\n#1  0x00007f08b8fb01ef in _dl_lookup_symbol_x (undef_name=0x7f08b8763d69 &quot;free&quot;, undef_map=0x7f08b91acf00, ref=ref@entry=0x7f08b91ca128, symbol_scope=0x7f08b91ad258, version=0x7f08b91aa7b0, type_class=type_class@entry=1, flags=5, skip_map=&lt;optimized out&gt;) at dl-lookup.c:813\n#2  0x00007f08b8fb4ec3 in _dl_fixup (l=&lt;optimized out&gt;, reloc_arg=&lt;optimized out&gt;) at ../elf/dl-runtime.c:112\n#3  0x00007f08b8fbc7ca in _dl_runtime_resolve_xsavec () at ../sysdeps/x86_64/dl-trampoline.h:125\n#4  0x00007f08b877463e in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#5  0x00007f08b8774bd6 in _Unwind_Find_FDE () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#6  0x00007f08b8771183 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#7  0x00007f08b8772360 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#8  0x00007f08b8773068 in _Unwind_Backtrace () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#9  0x0000000000000000 in ?? ()\n</pre></div>\n\n\n<p>which is actually sort of crazy! We try to avoid having the dynamic symbol loader activate while in a signal handler, but this is resolving the symbol <em><code>free</code></em> which is causing the problem. Who knew!</p>\n</blockquote>",
        "id": 190335146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583963015
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-597898893\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-597898893\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295\">Issue #1295</a>:</p>\n<blockquote>\n<p>This is perhaps another point in favor of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/900\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/900\">https://github.com/bytecodealliance/wasmtime/issues/900</a> where we don't execute segfault code on the sigaltstack. We're executing quite a lot of code clearly which is blown the sigaltstack set up by libstd (which is prety small by default). I think it would be best to have segfault handlers execute on the main execution stack, allowing us to sidestep these sorts of issues.</p>\n</blockquote>",
        "id": 190336594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583963975
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-608696518\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295#issuecomment-608696518\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295\">Issue #1295</a>:</p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1315\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1315\">https://github.com/bytecodealliance/wasmtime/pull/1315</a></p>\n</blockquote>",
        "id": 192867015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585949839
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295\">Issue #1295</a>:</p>\n<blockquote>\n<p>Investigating a <a href=\"https://github.com/bytecodealliance/wasmtime/runs/501673516?check_suite_focus=true\" title=\"https://github.com/bytecodealliance/wasmtime/runs/501673516?check_suite_focus=true\">spurious test failure</a> I'm able to reproduce this locally on Linux with a script that looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">os</span>::<span class=\"n\">unix</span>::<span class=\"n\">prelude</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">Command</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;cargo&quot;</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">&quot;build&quot;</span><span class=\"p\">).</span><span class=\"n\">status</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">success</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"mi\">28</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"mi\">1_000_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;./target/debug/wasmtime&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">&quot;--disable-cache&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">&quot;./tests/wasm/unreachable.wat&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">output</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">signal</span><span class=\"p\">().</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">signal</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm not really sure why concurrent execution of wasmtime is necessary, but I wasn't able to reproduce with only one wasmtime process at a time.</p>\n<p>This almost instantly has one of the subprocesses segfault for me locally, and the core dump shows the stack trace looks like:</p>\n<div class=\"codehilite\"><pre><span></span>#0  _dl_runtime_resolve_xsavec () at ../sysdeps/x86_64/dl-trampoline.h:92\n#1  0x00007f01cec4163e in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#2  0x00007f01cec41bd6 in _Unwind_Find_FDE () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#3  0x00007f01cec3e183 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#4  0x00007f01cec3f360 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#5  0x00007f01cec40068 in _Unwind_Backtrace () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#6  0x000056042eee2d7d in backtrace::backtrace::libunwind::trace (cb=...) at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\n#7  backtrace::backtrace::trace_unsynchronized (cb=...) at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\n#8  0x000056042eee2cfe in backtrace::backtrace::trace (cb=...) at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:53\n#9  0x000056042eed573d in backtrace::capture::Backtrace::create (ip=94575967164064) at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/capture.rs:164\n#10 0x000056042eed56b4 in backtrace::capture::Backtrace::new_unresolved () at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/capture.rs:158\n#11 0x000056042eeceb08 in wasmtime_runtime::traphandlers::CallThreadState::handle_trap (self=0x7fff0284edd0, pc=0x7f01cf687005 &quot;\\017\\v&quot;, reset_guard_page=false, call_handler=...) at crates/runtime/src/traphandlers.rs:343\n#12 0x000056042eecef60 in wasmtime_runtime::traphandlers::HandleTrap::{{closure}} (info=...) at crates/runtime/src/traphandlers.rs:36\n#13 0x0000000000000000 in ?? ()\n</pre></div>\n\n\n<p>cc @yurydelendik it looks like this is something related to FDE information perhaps?</p>\n</blockquote>",
        "id": 192867017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585949840
    }
]