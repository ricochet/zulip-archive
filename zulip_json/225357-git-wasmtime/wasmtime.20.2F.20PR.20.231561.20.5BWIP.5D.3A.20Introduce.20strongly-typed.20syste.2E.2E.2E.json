[
    {
        "content": "<p>kubkon opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a> from <code>handle-rights</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit does a lot of reshuffling and even some more. It introduces<br>\nstrongly-typed system primitives which are: <code>OsFile</code>, <code>OsDir</code>, <code>Stdio</code>,<br>\nand <code>OsOther</code>. Those primitives are separate structs now, each implementing<br>\na subset of <code>Handle</code> methods, rather than all being an enumeration of some<br>\nsupertype such as <code>OsHandle</code>. To summarise the structs:</p>\n<ul>\n<li>\n<p><code>OsFile</code> represents a regular file, and implements fd-ops<br>\n  of <code>Handle</code> trait</p>\n</li>\n<li>\n<p><code>OsDir</code> represents a directory, and primarily implements path-ops, plus<br>\n<code>readdir</code> and some common fd-ops such as <code>fdstat</code>, etc.</p>\n</li>\n<li>\n<p><code>Stdio</code> represents a stdio handle, and implements a subset of fd-ops<br>\n  such as <code>fdstat</code> _and_ <code>read_</code> and <code>write_vectored</code> calls</p>\n</li>\n<li>\n<p><code>OsOther</code> currently represents anything else and implements a set similar<br>\n  to that implemented by <code>Stdio</code></p>\n</li>\n</ul>\n<p>This commit is effectively an experiment and an excercise into better<br>\nunderstanding what's going on for each OS resource/type under-the-hood.<br>\nIt's meant to give us some intuition in order to move on with the idea<br>\nof having strongly-typed handles in WASI both in the syscall impl as well<br>\nas at the libc level.</p>\n<p>Some more minor changes include making <code>OsHandle</code> represent an OS-specific<br>\nwrapper for a raw OS handle (Unix fd or Windows handle). Also, since <code>OsDir</code><br>\nis tricky across OSes, we also have a supertype of <code>OsHandle</code> called<br>\n<code>OsDirHandle</code> which may store a <code>DIR*</code> stream pointer (mainly BSD). Last but not<br>\nleast, the <code>Filetype</code> and <code>Rights</code> are now computed when the resource is created,<br>\nrather than every time we call <code>Handle::get_file_type</code> and <code>Handle::get_rights</code>.<br>\nFinally, in order to facilitate the latter, I've converted <code>EntryRights</code> into<br>\n<code>HandleRights</code> and pushed them into each <code>Handle</code> implementor.</p>\n</blockquote>",
        "id": 194716764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587408310
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/sunfishcode\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a>.</p>",
        "id": 194717183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587408489
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a> from <code>handle-rights</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit does a lot of reshuffling and even some more. It introduces<br>\nstrongly-typed system primitives which are: <code>OsFile</code>, <code>OsDir</code>, <code>Stdio</code>,<br>\nand <code>OsOther</code>. Those primitives are separate structs now, each implementing<br>\na subset of <code>Handle</code> methods, rather than all being an enumeration of some<br>\nsupertype such as <code>OsHandle</code>. To summarise the structs:</p>\n<ul>\n<li>\n<p><code>OsFile</code> represents a regular file, and implements fd-ops<br>\n  of <code>Handle</code> trait</p>\n</li>\n<li>\n<p><code>OsDir</code> represents a directory, and primarily implements path-ops, plus<br>\n<code>readdir</code> and some common fd-ops such as <code>fdstat</code>, etc.</p>\n</li>\n<li>\n<p><code>Stdio</code> represents a stdio handle, and implements a subset of fd-ops<br>\n  such as <code>fdstat</code> _and_ <code>read_</code> and <code>write_vectored</code> calls</p>\n</li>\n<li>\n<p><code>OsOther</code> currently represents anything else and implements a set similar<br>\n  to that implemented by <code>Stdio</code></p>\n</li>\n</ul>\n<p>This commit is effectively an experiment and an excercise into better<br>\nunderstanding what's going on for each OS resource/type under-the-hood.<br>\nIt's meant to give us some intuition in order to move on with the idea<br>\nof having strongly-typed handles in WASI both in the syscall impl as well<br>\nas at the libc level.</p>\n<p>Some more minor changes include making <code>OsHandle</code> represent an OS-specific<br>\nwrapper for a raw OS handle (Unix fd or Windows handle). Also, since <code>OsDir</code><br>\nis tricky across OSes, we also have a supertype of <code>OsHandle</code> called<br>\n<code>OsDirHandle</code> which may store a <code>DIR*</code> stream pointer (mainly BSD). Last but not<br>\nleast, the <code>Filetype</code> and <code>Rights</code> are now computed when the resource is created,<br>\nrather than every time we call <code>Handle::get_file_type</code> and <code>Handle::get_rights</code>.<br>\nFinally, in order to facilitate the latter, I've converted <code>EntryRights</code> into<br>\n<code>HandleRights</code> and pushed them into each <code>Handle</code> implementor.</p>\n</blockquote>",
        "id": 194722791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587411555
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a> from <code>handle-rights</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit does a lot of reshuffling and even some more. It introduces<br>\nstrongly-typed system primitives which are: <code>OsFile</code>, <code>OsDir</code>, <code>Stdio</code>,<br>\nand <code>OsOther</code>. Those primitives are separate structs now, each implementing<br>\na subset of <code>Handle</code> methods, rather than all being an enumeration of some<br>\nsupertype such as <code>OsHandle</code>. To summarise the structs:</p>\n<ul>\n<li>\n<p><code>OsFile</code> represents a regular file, and implements fd-ops<br>\n  of <code>Handle</code> trait</p>\n</li>\n<li>\n<p><code>OsDir</code> represents a directory, and primarily implements path-ops, plus<br>\n<code>readdir</code> and some common fd-ops such as <code>fdstat</code>, etc.</p>\n</li>\n<li>\n<p><code>Stdio</code> represents a stdio handle, and implements a subset of fd-ops<br>\n  such as <code>fdstat</code> _and_ <code>read_</code> and <code>write_vectored</code> calls</p>\n</li>\n<li>\n<p><code>OsOther</code> currently represents anything else and implements a set similar<br>\n  to that implemented by <code>Stdio</code></p>\n</li>\n</ul>\n<p>This commit is effectively an experiment and an excercise into better<br>\nunderstanding what's going on for each OS resource/type under-the-hood.<br>\nIt's meant to give us some intuition in order to move on with the idea<br>\nof having strongly-typed handles in WASI both in the syscall impl as well<br>\nas at the libc level.</p>\n<p>Some more minor changes include making <code>OsHandle</code> represent an OS-specific<br>\nwrapper for a raw OS handle (Unix fd or Windows handle). Also, since <code>OsDir</code><br>\nis tricky across OSes, we also have a supertype of <code>OsHandle</code> called<br>\n<code>OsDirHandle</code> which may store a <code>DIR*</code> stream pointer (mainly BSD). Last but not<br>\nleast, the <code>Filetype</code> and <code>Rights</code> are now computed when the resource is created,<br>\nrather than every time we call <code>Handle::get_file_type</code> and <code>Handle::get_rights</code>.<br>\nFinally, in order to facilitate the latter, I've converted <code>EntryRights</code> into<br>\n<code>HandleRights</code> and pushed them into each <code>Handle</code> implementor.</p>\n</blockquote>",
        "id": 194724645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587412553
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a> from <code>handle-rights</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit does a lot of reshuffling and even some more. It introduces<br>\nstrongly-typed system primitives which are: <code>OsFile</code>, <code>OsDir</code>, <code>Stdio</code>,<br>\nand <code>OsOther</code>. Those primitives are separate structs now, each implementing<br>\na subset of <code>Handle</code> methods, rather than all being an enumeration of some<br>\nsupertype such as <code>OsHandle</code>. To summarise the structs:</p>\n<ul>\n<li>\n<p><code>OsFile</code> represents a regular file, and implements fd-ops<br>\n  of <code>Handle</code> trait</p>\n</li>\n<li>\n<p><code>OsDir</code> represents a directory, and primarily implements path-ops, plus<br>\n<code>readdir</code> and some common fd-ops such as <code>fdstat</code>, etc.</p>\n</li>\n<li>\n<p><code>Stdio</code> represents a stdio handle, and implements a subset of fd-ops<br>\n  such as <code>fdstat</code> _and_ <code>read_</code> and <code>write_vectored</code> calls</p>\n</li>\n<li>\n<p><code>OsOther</code> currently represents anything else and implements a set similar<br>\n  to that implemented by <code>Stdio</code></p>\n</li>\n</ul>\n<p>This commit is effectively an experiment and an excercise into better<br>\nunderstanding what's going on for each OS resource/type under-the-hood.<br>\nIt's meant to give us some intuition in order to move on with the idea<br>\nof having strongly-typed handles in WASI both in the syscall impl as well<br>\nas at the libc level.</p>\n<p>Some more minor changes include making <code>OsHandle</code> represent an OS-specific<br>\nwrapper for a raw OS handle (Unix fd or Windows handle). Also, since <code>OsDir</code><br>\nis tricky across OSes, we also have a supertype of <code>OsHandle</code> called<br>\n<code>OsDirHandle</code> which may store a <code>DIR*</code> stream pointer (mainly BSD). Last but not<br>\nleast, the <code>Filetype</code> and <code>Rights</code> are now computed when the resource is created,<br>\nrather than every time we call <code>Handle::get_file_type</code> and <code>Handle::get_rights</code>.<br>\nFinally, in order to facilitate the latter, I've converted <code>EntryRights</code> into<br>\n<code>HandleRights</code> and pushed them into each <code>Handle</code> implementor.</p>\n</blockquote>",
        "id": 194728481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587414548
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a> from <code>handle-rights</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit does a lot of reshuffling and even some more. It introduces<br>\nstrongly-typed system primitives which are: <code>OsFile</code>, <code>OsDir</code>, <code>Stdio</code>,<br>\nand <code>OsOther</code>. Those primitives are separate structs now, each implementing<br>\na subset of <code>Handle</code> methods, rather than all being an enumeration of some<br>\nsupertype such as <code>OsHandle</code>. To summarise the structs:</p>\n<ul>\n<li>\n<p><code>OsFile</code> represents a regular file, and implements fd-ops<br>\n  of <code>Handle</code> trait</p>\n</li>\n<li>\n<p><code>OsDir</code> represents a directory, and primarily implements path-ops, plus<br>\n<code>readdir</code> and some common fd-ops such as <code>fdstat</code>, etc.</p>\n</li>\n<li>\n<p><code>Stdio</code> represents a stdio handle, and implements a subset of fd-ops<br>\n  such as <code>fdstat</code> _and_ <code>read_</code> and <code>write_vectored</code> calls</p>\n</li>\n<li>\n<p><code>OsOther</code> currently represents anything else and implements a set similar<br>\n  to that implemented by <code>Stdio</code></p>\n</li>\n</ul>\n<p>This commit is effectively an experiment and an excercise into better<br>\nunderstanding what's going on for each OS resource/type under-the-hood.<br>\nIt's meant to give us some intuition in order to move on with the idea<br>\nof having strongly-typed handles in WASI both in the syscall impl as well<br>\nas at the libc level.</p>\n<p>Some more minor changes include making <code>OsHandle</code> represent an OS-specific<br>\nwrapper for a raw OS handle (Unix fd or Windows handle). Also, since <code>OsDir</code><br>\nis tricky across OSes, we also have a supertype of <code>OsHandle</code> called<br>\n<code>OsDirHandle</code> which may store a <code>DIR*</code> stream pointer (mainly BSD). Last but not<br>\nleast, the <code>Filetype</code> and <code>Rights</code> are now computed when the resource is created,<br>\nrather than every time we call <code>Handle::get_file_type</code> and <code>Handle::get_rights</code>.<br>\nFinally, in order to facilitate the latter, I've converted <code>EntryRights</code> into<br>\n<code>HandleRights</code> and pushed them into each <code>Handle</code> implementor.</p>\n</blockquote>",
        "id": 194738746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587419852
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a> from <code>handle-rights</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit does a lot of reshuffling and even some more. It introduces<br>\nstrongly-typed system primitives which are: <code>OsFile</code>, <code>OsDir</code>, <code>Stdio</code>,<br>\nand <code>OsOther</code>. Those primitives are separate structs now, each implementing<br>\na subset of <code>Handle</code> methods, rather than all being an enumeration of some<br>\nsupertype such as <code>OsHandle</code>. To summarise the structs:</p>\n<ul>\n<li>\n<p><code>OsFile</code> represents a regular file, and implements fd-ops<br>\n  of <code>Handle</code> trait</p>\n</li>\n<li>\n<p><code>OsDir</code> represents a directory, and primarily implements path-ops, plus<br>\n<code>readdir</code> and some common fd-ops such as <code>fdstat</code>, etc.</p>\n</li>\n<li>\n<p><code>Stdio</code> represents a stdio handle, and implements a subset of fd-ops<br>\n  such as <code>fdstat</code> _and_ <code>read_</code> and <code>write_vectored</code> calls</p>\n</li>\n<li>\n<p><code>OsOther</code> currently represents anything else and implements a set similar<br>\n  to that implemented by <code>Stdio</code></p>\n</li>\n</ul>\n<p>This commit is effectively an experiment and an excercise into better<br>\nunderstanding what's going on for each OS resource/type under-the-hood.<br>\nIt's meant to give us some intuition in order to move on with the idea<br>\nof having strongly-typed handles in WASI both in the syscall impl as well<br>\nas at the libc level.</p>\n<p>Some more minor changes include making <code>OsHandle</code> represent an OS-specific<br>\nwrapper for a raw OS handle (Unix fd or Windows handle). Also, since <code>OsDir</code><br>\nis tricky across OSes, we also have a supertype of <code>OsHandle</code> called<br>\n<code>OsDirHandle</code> which may store a <code>DIR*</code> stream pointer (mainly BSD). Last but not<br>\nleast, the <code>Filetype</code> and <code>Rights</code> are now computed when the resource is created,<br>\nrather than every time we call <code>Handle::get_file_type</code> and <code>Handle::get_rights</code>.<br>\nFinally, in order to facilitate the latter, I've converted <code>EntryRights</code> into<br>\n<code>HandleRights</code> and pushed them into each <code>Handle</code> implementor.</p>\n</blockquote>",
        "id": 194857700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587501209
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a> from <code>handle-rights</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit does a lot of reshuffling and even some more. It introduces<br>\nstrongly-typed system primitives which are: <code>OsFile</code>, <code>OsDir</code>, <code>Stdio</code>,<br>\nand <code>OsOther</code>. Those primitives are separate structs now, each implementing<br>\na subset of <code>Handle</code> methods, rather than all being an enumeration of some<br>\nsupertype such as <code>OsHandle</code>. To summarise the structs:</p>\n<ul>\n<li>\n<p><code>OsFile</code> represents a regular file, and implements fd-ops<br>\n  of <code>Handle</code> trait</p>\n</li>\n<li>\n<p><code>OsDir</code> represents a directory, and primarily implements path-ops, plus<br>\n<code>readdir</code> and some common fd-ops such as <code>fdstat</code>, etc.</p>\n</li>\n<li>\n<p><code>Stdio</code> represents a stdio handle, and implements a subset of fd-ops<br>\n  such as <code>fdstat</code> _and_ <code>read_</code> and <code>write_vectored</code> calls</p>\n</li>\n<li>\n<p><code>OsOther</code> currently represents anything else and implements a set similar<br>\n  to that implemented by <code>Stdio</code></p>\n</li>\n</ul>\n<p>This commit is effectively an experiment and an excercise into better<br>\nunderstanding what's going on for each OS resource/type under-the-hood.<br>\nIt's meant to give us some intuition in order to move on with the idea<br>\nof having strongly-typed handles in WASI both in the syscall impl as well<br>\nas at the libc level.</p>\n<p>Some more minor changes include making <code>OsHandle</code> represent an OS-specific<br>\nwrapper for a raw OS handle (Unix fd or Windows handle). Also, since <code>OsDir</code><br>\nis tricky across OSes, we also have a supertype of <code>OsHandle</code> called<br>\n<code>OsDirHandle</code> which may store a <code>DIR*</code> stream pointer (mainly BSD). Last but not<br>\nleast, the <code>Filetype</code> and <code>Rights</code> are now computed when the resource is created,<br>\nrather than every time we call <code>Handle::get_file_type</code> and <code>Handle::get_rights</code>.<br>\nFinally, in order to facilitate the latter, I've converted <code>EntryRights</code> into<br>\n<code>HandleRights</code> and pushed them into each <code>Handle</code> implementor.</p>\n</blockquote>",
        "id": 194858064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587501373
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" title=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/sunfishcode\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a>.</p>",
        "id": 194901968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587544881
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" title=\"https://github.com/alexcrichton\">alexcrichton</a>, <a href=\"https://github.com/pchickey\" title=\"https://github.com/pchickey\">pchickey</a>, <a href=\"https://github.com/peterhuene\" title=\"https://github.com/peterhuene\">peterhuene</a> and <a href=\"https://github.com/sunfishcode\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a>.</p>",
        "id": 194902363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587545123
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" title=\"https://github.com/alexcrichton\">alexcrichton</a>, <a href=\"https://github.com/pchickey\" title=\"https://github.com/pchickey\">pchickey</a>, <a href=\"https://github.com/peterhuene\" title=\"https://github.com/peterhuene\">peterhuene</a> and <a href=\"https://github.com/sunfishcode\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1561\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1561\">PR #1561</a>.</p>",
        "id": 194902364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587545123
    }
]