[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986\">PR #5986</a> from <code>lea</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit adds a rule for the lowering of <code>iadd</code> to use <code>lea</code> for 32<br>\nand 64-bit addition. The theoretical benefit of <code>lea</code> over the <code>add</code><br>\ninstruction is that the <code>lea</code> variant can emulate a 3-operand<br>\ninstruction which doesn't destructively modify on of its operands.<br>\nAdditionally the <code>lea</code> operation can fold in other components such as<br>\nconstant additions and shifts.</p>\n<p>In practice, however, if <code>lea</code> is unconditionally used instead of <code>iadd</code><br>\nit ends up losing 10% performance on a local <code>meshoptimizer</code> benchmark.<br>\nMy best guess as to what's going on here is that my CPU's dedicated<br>\nunits for address computation are all overloaded while the ALUs are<br>\nbasically idle in a memory-intensive loop. Previously when the ALU was<br>\nused for <code>add</code> and the address units for stores/loads it in theory<br>\npipelined things better (most of this is me shooting in the dark). To<br>\nprevent the performance loss here I've updated the lowering of <code>iadd</code> to<br>\nconditionally sometimes use <code>lea</code> and sometimes use <code>add</code> depending on<br>\nhow \"complicated\" the <code>Amode</code> is. Simple ones like <code>a + b</code> or <code>a + $imm</code><br>\ncontinue to use <code>add</code> (and its subsequent hypothetical extra <code>mov</code><br>\nnecessary into the result). More complicated ones like <code>a + b + $imm</code> or<br>\n<code>a + b &lt;&lt; c + $imm</code> use <code>lea</code> as it can remove the need for extra<br>\ninstructions. Locally at least this fixes the performance loss relative<br>\nto unconditionally using <code>lea</code>.</p>\n<p>One note is that this adds an <code>OperandSize</code> argument to the<br>\n<code>MInst::LoadEffectiveAddress</code> variant to add an encoding for 32-bit<br>\n<code>lea</code> in addition to the preexisting 64-bit encoding.</p>\n<p>Additionally this PR has a prior commit which is a \"no functional changes intended\" update to the <code>Amode</code> computation in the x64 backend to rely less on recursion and avoid blowing the stack at compile time for very-long-chains of the <code>iadd</code> instruction.</p>\n</blockquote>",
        "id": 340964609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678482382
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986\">PR #5986</a> from <code>lea</code> to <code>main</code>.</p>",
        "id": 340966522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678483179
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986#pullrequestreview-1335668606\">PR review</a>.</p>",
        "id": 340971485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678485191
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986#pullrequestreview-1335668606\">PR review</a>.</p>",
        "id": 340971489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678485192
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986#discussion_r1132918654\">PR review comment</a>:</p>\n<blockquote>\n<p>This says \"higher-priority\" but the actual priority given is less than the other cases. Something doesn't add up here.</p>\n</blockquote>",
        "id": 340971490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678485192
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986#discussion_r1132915380\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>;; instruction to fold multiple operations into one. The actual determination\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 340971491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678485192
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986\">PR #5986</a> from <code>lea</code> to <code>main</code>.</p>",
        "id": 341943459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678845937
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986#discussion_r1136456607\">PR review comment</a>:</p>\n<blockquote>\n<p>With a negative priority though I think this is higher than the prior two?</p>\n<p>(I can switch to giving all positive priority too)</p>\n</blockquote>",
        "id": 341943634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678846056
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986#pullrequestreview-1340536340\">PR review</a>.</p>",
        "id": 341943635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678846056
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986\">PR #5986</a>.</p>",
        "id": 341943962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678846259
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986#pullrequestreview-1342011082\">PR review</a>.</p>",
        "id": 342119770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678900433
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986\">PR #5986</a>.</p>",
        "id": 342128076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678902612
    }
]