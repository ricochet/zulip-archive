[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6804\">PR #6804</a> from <code>cfallin:quadratic-islands</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Work-in-progress solution to #6798</p>\n</blockquote>",
        "id": 381918613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691167887
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6804\">PR #6804</a>.</p>",
        "id": 381923556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691168927
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6804\">PR #6804</a>.</p>",
        "id": 381989012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691189051
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6804\">PR #6804</a>:</p>\n<blockquote>\n<p>Currently, <code>MachBuffer</code> is used to resolve forward and backward references to labels (basic-block entry points and other branch targets) within function bodies as well as calls to functions within a whole module. It implements a single-pass algorithm that tracks \"pending fixups\" -- references to some other place -- and fills in the offsets when known, also handling upgrading ranges by emitting veneers on architectures that need that behavior.</p>\n<p>In #6798 it was reported that on aarch64, module emission is slow for a certain large module. This module ends up forcing many islands of veneers but has branches whose ranges cross those islands and need <em>not</em> be extended with a veneer yet. This case exposes quadratic behavior: the island-emission logic puts the fixup back in a list and replaces the fixup list with that leftover-fixup list after processing all fixups.</p>\n<p>This PR instead does the following:</p>\n<ul>\n<li>When an island is emitted, <em>all</em> unresolved forward references get a veneer, even if their current label kind would still be in range. This prevents fixups from hanging around arbitrarily long when they have longer range kinds (e.g., aarch64's <code>Branch26</code>) while lots of islands for shorter-range references (e.g. <code>Branch19</code>) are emitted.</li>\n<li>When a label fixup reaches its \"longest-range\" kind (<code>PCRel32</code> for branches, for example), we put it in a separate list that we don't process again until the very last \"last-chance island\" after all emission.</li>\n</ul>\n<p>These two rules together will bound the amount of processing to <code>O(|fixups| * |label kinds|)</code> rather than <code>O(|fixups|^2)</code>.</p>\n<p>The first new rule theoretically causes more veneers to be emitted, but in practice is not too likely to make a difference, I think. Unfortunately my aarch64 laptop is unavailable at the moment; if someone on that platform could benchmark the impact that would be quite appreciated!</p>\n<p>Fixes #6798.</p>\n</blockquote>",
        "id": 381990000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691189640
    }
]