[
    {
        "content": "<p>ifsheldon opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776\">issue #9776</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>There are no examples about using <code>bindgen!</code> with <code>async: true</code>, imports and resources in Rust hosts. Please add examples to do that. </p>\n<p>A bit of background:</p>\n<p>I have a <code>string.wit</code> and a guest component.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">big</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">;</span>\n\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">large</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">largestring</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">constructor</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">push</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">clear</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">big</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">large</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">manipulate</span><span class=\"o\">-</span><span class=\"n\">large</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I want to run this component in a Rust host. It took me quite a while to debug and inspect the generated code with <code>cargo-expand</code> to implement this. The code is much more complicated than the and there's no way for IDE to help. </p>\n<p>I didn't have any clues how to write the code until I cargo-expanded the macro.</p>\n<p>You should at least add an example in <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/index.html\">bindgen_example</a> to give a first impression to newcomers about the complexity.</p>\n<p>And probably you can simplify the traits of the async version with latest Rust async functions in traits.</p>\n<h4>Benefit</h4>\n<ul>\n<li>Adding an example in <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/index.html\">bindgen_example</a> can give a first impression to newcomers about the complexity</li>\n<li>Probably simplifying it in bindgen with latest Rust async functions in traits can ultimately remove these annoying lifetimes, <code>Pin</code> and <code>Box</code> in function signatures, which will enable IDE to autocomplete and help better.</li>\n</ul>\n<h4>Implementation</h4>\n<p>I can make a PR to submit my code to be an example.</p>\n<h4>Full Code</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">get_component_linker_store</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::{</span><span class=\"n\">bind_interfaces_needed_by_guest_rust_std</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">sync_version</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit-files/string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"big-string\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"component:big-string/large-string/largestring\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">BigStringImports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"from print sync host func: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kc\">true</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">HostLargestring</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"p\">})</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sync: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clear</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">async_version</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">futures</span><span class=\"p\">::</span><span class=\"n\">executor</span><span class=\"p\">::</span><span class=\"n\">block_on</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">future</span><span class=\"p\">::</span><span class=\"n\">Future</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">::</span><span class=\"n\">Pin</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit-files/string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"big-string\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"component:big-string/large-string/largestring\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">BigStringImports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// TODO: make a PR for this</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"from print async host func: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"kc\">true</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">HostLargestring</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">                    </span><span class=\"p\">})</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">());</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"async: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clear</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 487293629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733848221
    },
    {
        "content": "<p>ifsheldon edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776\">issue #9776</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>There are no examples about using <code>bindgen!</code> with <code>async: true</code>, imports and resources in Rust hosts. Please add examples to do that. </p>\n<h4>A bit of background</h4>\n<p>I have a <code>string.wit</code> and a guest component.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">big</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">;</span>\n\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">large</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">largestring</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">constructor</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">push</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">clear</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">big</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">large</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">manipulate</span><span class=\"o\">-</span><span class=\"n\">large</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I want to run this component in a Rust host. It took me quite a while to debug and inspect the generated code with <code>cargo-expand</code> to implement this. The code is much more complicated than the and there's no way for IDE to help. </p>\n<p>I didn't have any clues how to write the code until I cargo-expanded the macro.</p>\n<p>You should at least add an example in <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/index.html\">bindgen_example</a> to give a first impression to newcomers about the complexity.</p>\n<p>And probably you can simplify the traits of the async version with latest Rust async functions in traits.</p>\n<h4>Benefit</h4>\n<ul>\n<li>Adding an example in <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/index.html\">bindgen_example</a> can give a first impression to newcomers about the complexity</li>\n<li>Probably simplifying it in bindgen with latest Rust async functions in traits can ultimately remove these annoying lifetimes, <code>Pin</code> and <code>Box</code> in function signatures, which will enable IDE to autocomplete and help better.</li>\n</ul>\n<h4>Implementation</h4>\n<p>I can make a PR to submit my code to be an example.</p>\n<h4>Full Code</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">get_component_linker_store</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::{</span><span class=\"n\">bind_interfaces_needed_by_guest_rust_std</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">sync_version</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit-files/string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"big-string\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"component:big-string/large-string/largestring\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">BigStringImports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"from print sync host func: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kc\">true</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">HostLargestring</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"p\">})</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sync: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clear</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">async_version</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">futures</span><span class=\"p\">::</span><span class=\"n\">executor</span><span class=\"p\">::</span><span class=\"n\">block_on</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">future</span><span class=\"p\">::</span><span class=\"n\">Future</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">::</span><span class=\"n\">Pin</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit-files/string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"big-string\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"component:big-string/large-string/largestring\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">BigStringImports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// TODO: make a PR for this</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"from print async host func: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"kc\">true</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">HostLargestring</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">                    </span><span class=\"p\">})</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">());</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"async: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clear</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 487293741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733848257
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776#issuecomment-2532367398\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776\">issue #9776</a>:</p>\n<blockquote>\n<p>In general, adding an example of async <code>bindgen!</code> would be great!</p>\n<p>On the particulars of what the example is doing and whether your given example is best, I don't have super strong opinions. A timer might be smaller and more realistic? Not 100% clear to me.</p>\n<p>Maybe @alexcrichton has opinions.</p>\n</blockquote>",
        "id": 487306762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733852073
    },
    {
        "content": "<p>ifsheldon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776#issuecomment-2533480391\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776\">issue #9776</a>:</p>\n<blockquote>\n<p>Thanks! </p>\n<p>Regarding this long function signature, do you know any ways to simplify it? I thought the stabilized async functions in traits might help. I don't know if <code>async-trait</code> crate can help, either.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SomeReturnType</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span>\n</code></pre></div>\n</blockquote>",
        "id": 488001537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733883995
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776#issuecomment-2539971806\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776\">issue #9776</a>:</p>\n<blockquote>\n<p>Definitely feel free to add an example with a PR, it would be most welcome!</p>\n<p>All of wasmtime's async support was designed before async functions were available in traits, and yes nowadays we should remove the need for <code>#[async_trait]</code> ideally. That'll require using <code>-&gt; impl Future&lt;...&gt; + Send</code> in the trait definitions (can't just use raw <code>async fn</code> just yet I think), but the trait implementors can still use <code>async fn ...</code> in that case.</p>\n<p>If you're up for it a PR to remove <code>#[async_trait]</code> would be most welcome, but I suspect that would be a pretty involved PR as well.</p>\n</blockquote>",
        "id": 488714299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734035951
    },
    {
        "content": "<p>ifsheldon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776#issuecomment-2540447309\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776\">issue #9776</a>:</p>\n<blockquote>\n<blockquote>\n<p>Definitely feel free to add an example with a PR, it would be most welcome!</p>\n</blockquote>\n<p>I will make a PR with a modified example that makes a bit more sense.</p>\n<blockquote>\n<p>All of wasmtime's async support was designed before async functions were available in traits, and yes nowadays we should remove the need for #[async_trait] ideally</p>\n</blockquote>\n<p>So, bindgen indeed uses <code>#[async_trait]</code> internally? I couldn't see this when I just did <code>cargo-expand</code> which expands all macros recursively. If so, I think the users/implmentors can also leverage <code>#[async_trait]</code> to simplify the <code>impl</code> block.</p>\n<blockquote>\n<p>That'll require using -&gt; impl Future&lt;...&gt; + Send in the trait definitions (can't just use raw async fn just yet I think), but the trait implementors can still use async fn ... in that case.</p>\n</blockquote>\n<p>We can use <code>trait_variant</code> mentioned in the <a href=\"https://blog.rust-lang.org/2023/12/21/async-fn-rpit-in-traits.html#async-fn-in-public-traits\">Announcing <code>async fn</code> and return-position <code>impl Trait</code> in traits</a> so we don't even need to write <code>-&gt; impl Future&lt;...&gt; + Send</code> in bindgen's implementation ourselves. Just something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[trait_variant::make(HostLargestring: Send)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LocalHostLargestring</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<blockquote>\n<p>If you're up for it a PR to remove #[async_trait] would be most welcome, but I suspect that would be a pretty involved PR as well.</p>\n</blockquote>\n<p>Yeah, this may take a while. I will just make a PR to add an example first. Then I will open another tracking issue for this.</p>\n</blockquote>",
        "id": 488757242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734059967
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776#issuecomment-2541930550\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776\">issue #9776</a>:</p>\n<blockquote>\n<p>Using <code>trait_variant</code> makes sense to me yeah! And yes bindings use <code>#[async_trait]</code> which is why generated docs aren't great.</p>\n</blockquote>",
        "id": 488889311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734111269
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9776\">issue #9776</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>There are no examples about using <code>bindgen!</code> with <code>async: true</code>, imports and resources in Rust hosts. Please add examples to do that. </p>\n<h4>A bit of background</h4>\n<p>I have a <code>string.wit</code> and a guest component.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">big</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">;</span>\n\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">large</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">largestring</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">constructor</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">push</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">clear</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">big</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">large</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">manipulate</span><span class=\"o\">-</span><span class=\"n\">large</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I want to run this component in a Rust host. It took me quite a while to debug and inspect the generated code with <code>cargo-expand</code> to implement this. The code is much more complicated than the and there's no way for IDE to help. </p>\n<p>I didn't have any clues how to write the code until I cargo-expanded the macro.</p>\n<p>You should at least add an example in <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/index.html\">bindgen_example</a> to give a first impression to newcomers about the complexity.</p>\n<p>And probably you can simplify the traits of the async version with latest Rust async functions in traits.</p>\n<h4>Benefit</h4>\n<ul>\n<li>Adding an example in <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/index.html\">bindgen_example</a> can give a first impression to newcomers about the complexity</li>\n<li>Probably simplifying it in bindgen with latest Rust async functions in traits can ultimately remove these annoying lifetimes, <code>Pin</code> and <code>Box</code> in function signatures, which will enable IDE to autocomplete and help better.</li>\n</ul>\n<h4>Implementation</h4>\n<p>I can make a PR to submit my code to be an example.</p>\n<h4>Full Code</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">get_component_linker_store</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::{</span><span class=\"n\">bind_interfaces_needed_by_guest_rust_std</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">sync_version</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit-files/string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"big-string\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"component:big-string/large-string/largestring\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">BigStringImports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"from print sync host func: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kc\">true</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">HostLargestring</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"p\">})</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sync: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clear</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">async_version</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">futures</span><span class=\"p\">::</span><span class=\"n\">executor</span><span class=\"p\">::</span><span class=\"n\">block_on</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">future</span><span class=\"p\">::</span><span class=\"n\">Future</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">::</span><span class=\"n\">Pin</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit-files/string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"big-string\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"component:big-string/large-string/largestring\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">BigStringImports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// TODO: make a PR for this</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"from print async host func: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"kc\">true</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">big_string</span><span class=\"p\">::</span><span class=\"n\">large_string</span><span class=\"p\">::</span><span class=\"n\">HostLargestring</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">LargeString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">storage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">                    </span><span class=\"p\">})</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">());</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"async: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clear</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">large_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">large_string</span><span class=\"p\">.</span><span class=\"n\">storage</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"o\">&lt;'</span><span class=\"na\">life</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;'</span><span class=\"na\">life</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LargeString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">where</span>\n<span class=\"w\">            </span><span class=\"o\">'</span><span class=\"na\">life</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_trait</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 490221783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734724334
    }
]