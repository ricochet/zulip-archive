[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6989\">PR #6989</a> from <code>afonso360:riscv-c</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR makes introduces compressed instructions to the RISC-V backend as part of the C extension.</p>\n<h3>C extension introduction</h3>\n<p>The C Extension adds encodings for 16 bit instructions. These are allowed to be freely interleaved with uncompressed instructions (i.e. we don't  need a mode switch like Thumb2).</p>\n<p>Some C instruction formats cannot encode all registers, so they may only be emitted if they get assigned a certain physical register. Additionally C instructions (almost) always have an equivalent uncompressed instruction.</p>\n<h3>Implementation</h3>\n<p>I've implemented this as an encoding only change. So our VCode instructions remain the same, but if we happen to get the correct registers and all the stars line up we emit a compressed instruction instead of a full sized instruction. </p>\n<p><code>Inst::emit</code> is now split into 3 stages:</p>\n<ol>\n<li>First we run the instruction through <code>Inst::allocate</code> which just transforms a <code>Inst</code> with virtual registers, into a <code>Inst</code> with physical registers</li>\n<li>\n<p>We then try to emit the instruction as a compressed instruction</p>\n<p>* This may fail, and that's ok<br>\n  * Since we now have the final physical registers we can check if it's possible to emit it as a compressed instruction</p>\n</li>\n<li>\n<p>If the compressed emission fails we default to the uncompressed emission</p>\n</li>\n</ol>\n<p>This PR only enables 2 instructions <code>c.add</code> and <code>c.mv</code>. Both of these use the CR format which allows the full range of registers. However they are enough to get us into trouble. <code>c.mv</code> is emitted quite often, and is enough to \"unalign\" most of the rest of the code.</p>\n<h3>Issues with capstone</h3>\n<p>Capstone supports decoding C instructions with a separate \"Extra Mode\".</p>\n<p>Capstone currently cannot decode a number of instructions that we emit (i.e <code>Zca</code>, <code>Zcb</code>, <code>Zcs</code> or Vector Instructions). This is normally ok since it emits a <code>.byte ...</code> directive and we can still read the V-Code to figure out what is going on.</p>\n<p>If I enable this \"Extra Mode\" by default it tries to decode these unknown instructions as C instructions and makes the whole thing unreadable.</p>\n<p>My solution for this was to make C a non default extension, and only enable the Extra Mode when C is enabled. This lets us keep the normal disassembly for all current test cases. Mixing C instructions and Vector instructions still makes the whole thing unreadable, but at least its not the common case.</p>\n<h3>Runtests</h3>\n<p>I've made pretty much all runtests run with C as well as without. Even if the runtest will never directly emits a C instruction, it can emit for example a <code>c.mv</code> and emit the rest of the instructions \"unaligned\" which is also a configuration worth testing.</p>\n<hr>\n<p>This is built on top of #6988 so it's worth waiting for that to be merged before looking into this. Additionally, it's probably a good idea to review this commit by commit instead of all at once.</p>\n</blockquote>",
        "id": 390146121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694352759
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6989\">PR #6989</a>.</p>",
        "id": 390146124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694352760
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6989\">PR #6989</a>.</p>",
        "id": 390146125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694352760
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6989\">PR #6989</a>.</p>",
        "id": 390146126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694352760
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6989\">PR #6989</a>.</p>",
        "id": 390149345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694354622
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6989#pullrequestreview-1620189359\">PR review</a>:</p>\n<blockquote>\n<p>This all looks great to me, and thanks as always for the detail explanations!</p>\n<p>Would it be possible to add detection of these features to <code>cranelift/native</code>? </p>\n</blockquote>",
        "id": 390327253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694443517
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6989\">PR #6989</a>.</p>",
        "id": 390482512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694511756
    },
    {
        "content": "<p>afonso360 has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6989\">PR #6989</a>.</p>",
        "id": 390484457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694512445
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6989\">PR #6989</a>.</p>",
        "id": 390496373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694517152
    }
]