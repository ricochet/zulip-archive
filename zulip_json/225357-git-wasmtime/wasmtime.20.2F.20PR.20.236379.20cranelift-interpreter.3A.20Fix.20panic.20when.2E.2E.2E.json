[
    {
        "content": "<p>jan-justin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379\">PR #6379</a> from <code>jan-justin:cranelift-interpreter-bitcast-simd-panic</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Fixes panic caused due to exceeding expected bounds when creating vector values, as mentioned over at #5915</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 358550262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684177680
    },
    {
        "content": "<p><strong>jan-justin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379\">PR #6379</a>.</p>",
        "id": 358550272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684177681
    },
    {
        "content": "<p><strong>jan-justin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379\">PR #6379</a>.</p>",
        "id": 358550274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684177682
    },
    {
        "content": "<p>jan-justin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379\">PR #6379</a>:</p>\n<blockquote>\n<p>Fixes panic caused due to exceeding expected bounds when creating vector values, as mentioned over at #5915</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 358633095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684218254
    },
    {
        "content": "<p>jan-justin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379\">PR #6379</a>.</p>",
        "id": 358656888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684225915
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#pullrequestreview-1428517580\">PR review</a>:</p>\n<blockquote>\n<p>LGTM! Thanks! Just a small note.</p>\n</blockquote>",
        "id": 358722639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684241816
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#pullrequestreview-1428517580\">PR review</a>:</p>\n<blockquote>\n<p>LGTM! Thanks! Just a small note.</p>\n</blockquote>",
        "id": 358722644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684241817
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1195124285\">PR review comment</a>:</p>\n<blockquote>\n<p>This seems to not handle big endian bitcasts. Can we add an assert somewhere here to ensure that we panic in that case? Something along these lines:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">mem_flags</span><span class=\"p\">.</span><span class=\"n\">endianness</span><span class=\"p\">(</span><span class=\"n\">Endianness</span>::<span class=\"n\">Little</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Endianness</span>::<span class=\"n\">Little</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"Only little endian bitcasts are supported\"</span>\n<span class=\"p\">);</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 358722645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684241817
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1195124285\">PR review comment</a>.</p>",
        "id": 358722970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684241887
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1195180145\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, I could certainly do that.</p>\n<p>I would, however, like to know where it seems to indicate that the bitcasts on s390x are not handled? It might be useful for me in future since the CI run is indicating green for s390x. It failed on a previous run when I used <code>DataValue::read_from_slice_ne</code> variant.</p>\n</blockquote>",
        "id": 358734689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684244238
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1195229387\">PR review comment</a>:</p>\n<blockquote>\n<p>Well, I adapted the testcases into big endian and tried it out in s390x, and they are pointing out different results.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">s390x</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">runtests</span><span class=\"o\">/</span><span class=\"n\">simd</span><span class=\"o\">-</span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bitcast_more_lanes_big</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">big</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_more_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_more_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00000000000000ff00000000000000ff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x000000ff00000000000000ff00000000</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bitcast_fewer_lanes_big</span><span class=\"p\">(</span><span class=\"n\">i16x8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i16x8</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">big</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_fewer_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_fewer_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00ff0000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000ff0000000000000000</span>\n</code></pre></div>\n<p>Those would be good tests to add though! I don't think we have many big endian bitcast runtests. Although it should be noted that only s390x really supports this, I don't think any of the other backends do.</p>\n<p>I don't think using <code>ne</code> here is the right solution since we explicitly pick one of the two. I think to make this work with big endian we would have to map each lane, apply a <code>to_be/to_le</code> depending on memflags.</p>\n</blockquote>",
        "id": 358744967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684246224
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1196130362\">PR review comment</a>:</p>\n<blockquote>\n<p>I see, thank you for the clarification!</p>\n<p>So then is your preference for me to include a panic on big endian bitcasts, or to spend some additional time ensuring that it is correctly handled? </p>\n</blockquote>",
        "id": 358920136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684311851
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1196178948\">PR review comment</a>:</p>\n<blockquote>\n<p>Up to you! I'm happy either way.</p>\n</blockquote>",
        "id": 358927829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684314163
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1198077812\">PR review comment</a>:</p>\n<blockquote>\n<p>I will give it a whirl. I need to set up qemu to test it and get back to you.</p>\n</blockquote>",
        "id": 359453597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684430197
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1204371779\">PR review comment</a>:</p>\n<blockquote>\n<p>Hey, sorry for the delay but I was unable to setup an s390x environment on my M1 MacBook.</p>\n<p>At this point it would seem that I would go the assert route, however, I have a question regarding your <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1195229387\">comment</a> containing the CLIF. Is your comment stating the assertions you expect to be true, or was that simply the output you received when running on a s390x machine?</p>\n<p>I ask because have been wrapping myself around an axle over it.</p>\n</blockquote>",
        "id": 360821416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684941534
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1204487373\">PR review comment</a>:</p>\n<blockquote>\n<p>I mostly took that test ran it in QEMU s390x and recorded the output. I didn't look at it particularly hard, however I have some faith that the s390x backend would be correct in this regard. If you'd like to look further into this there is a very long <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4566\">thread</a> where we nailed down the bitcast semantics</p>\n</blockquote>",
        "id": 360840700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684946140
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1205920221\">PR review comment</a>:</p>\n<blockquote>\n<p>Thank you, the thread definitely helped me understand the semantics.</p>\n<p>I am subsequently able to get the expected output for <code>bitcast_more_lanes_big</code>, however, I am not quite as successful with <code>bitcast_fewer_lanes_big</code>. If you have the time, could you kindly confirm the expected output for <code>bitcast_fewer_lanes_big</code> since I am getting: <code>Failed test: run: %bitcast_fewer_lanes_big(0x00ff0000000000000000000000000000) == 0x00000000000000ff0000000000000000, actual: 0x000000000000000000ff000000000000</code><br>\n</p>\n</blockquote>",
        "id": 361148244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685042425
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1205981430\">PR review comment</a>:</p>\n<blockquote>\n<p>That test does pass on s390x, and at least at a first glance it makes some sense to me, since the first lane glance it appears that that lane gets mirrored in the i64? This at least seems consistent with the behavior described in page 12 of the <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4566#issuecomment-1208336548\">Vector Bitcast Presentation</a> which essentially makes bitcast a permute? Sorry if I can't help too much here, this stuff really confuses me.</p>\n<p>I've tested a few more cases to try and explore this a bit more:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_fewer_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_fewer_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00ff0000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000ff0000000000000000</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_fewer_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00ff00ff000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x0000000000ff00ff0000000000000000</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_fewer_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00ff00ff000000ff0000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x00ff000000ff00ff0000000000000000</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_fewer_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00ff00ff000000ff00000000000000ff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x00ff000000ff00ff00ff000000000000</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitcast_fewer_lanes_big</span><span class=\"p\">(</span><span class=\"mh\">0x00ff00ff000000ff00ff0000000000ff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x00ff000000ff00ff00ff0000000000ff</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 361161285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685047021
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1205981430\">PR review comment</a>.</p>",
        "id": 361161407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685047060
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1205981430\">PR review comment</a>.</p>",
        "id": 361162262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685047343
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1205981430\">PR review comment</a>.</p>",
        "id": 361162437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685047410
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1205981430\">PR review comment</a>.</p>",
        "id": 361162482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685047428
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1205981430\">PR review comment</a>.</p>",
        "id": 361162574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685047448
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1206351356\">PR review comment</a>:</p>\n<blockquote>\n<p>That is indeed interesting!</p>\n<p>I will try to dig a little deeper to see if I can shed some light on this.</p>\n<p>Thank you for the additional information, it is really appreciated!</p>\n</blockquote>",
        "id": 361240097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685086614
    },
    {
        "content": "<p>jan-justin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379\">PR #6379</a>.</p>",
        "id": 362493998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685547214
    },
    {
        "content": "<p>jan-justin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379\">PR #6379</a>.</p>",
        "id": 362753334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685625865
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1213232841\">PR review comment</a>:</p>\n<blockquote>\n<p>Hey,</p>\n<p>So I removed the explicit calls to <code>DataValue::read_from_slice</code> since it was superfluous. Nevertheless, it seems the output when running the Big endian tests through the interpreter still does not yield the expected results you showed.</p>\n<p>I won't hold the fix hostage any longer than I already have, so I have added a panic when attempting to bitcast on vectors when the big endian mem flag is set.</p>\n</blockquote>",
        "id": 362772364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685629132
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1213685531\">PR review comment</a>:</p>\n<blockquote>\n<p>I think disabling big endian for now seems like a reasonable solutions. I'm not entirely sure what is up with filetest infrastructure. Thanks for looking into this!</p>\n</blockquote>",
        "id": 362882227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685653914
    },
    {
        "content": "<p>jan-justin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379#discussion_r1213958567\">PR review comment</a>:</p>\n<blockquote>\n<p>No problem at all. Thank you for your patience!</p>\n</blockquote>",
        "id": 362937685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685685732
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6379\">PR #6379</a>.</p>",
        "id": 363021122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685706786
    }
]