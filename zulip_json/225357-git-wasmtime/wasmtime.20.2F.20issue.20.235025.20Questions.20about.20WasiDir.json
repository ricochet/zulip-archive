[
    {
        "content": "<p>npmccallum opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>There are a number of aspects to <code>WasiDir</code> that are unclear to me. For completeness, I'll paste the full definition here and put questions in comments.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[wiggle::async_trait]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">WasiDir</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Does path contain segments? Should we follow symlinks? Should we create intermediate dirs?</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">create_dir</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Does path contain segments? Should we follow symlinks?</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">symlink</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">old_path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Does path contain segments? Should we follow symlinks?</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">remove_dir</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Does path contain segments? Should we follow symlinks?</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">unlink_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Does path contain segments? Should we follow symlinks?</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">read_link</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">PathBuf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Does path/dest_path contain segments? Should we follow symlinks?</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">rename</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dest_dir</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">WasiDir</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dest_path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Does path/target_path contain segments? Should we follow symlinks?</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">hard_link</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target_dir</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">WasiDir</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target_path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// There does not appear to be any way to set the times on the directory itself. Is this by design?</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">set_times</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">atime</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">SystemTimeSpec</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mtime</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">SystemTimeSpec</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">follow_symlinks</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 302570014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665019023
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1269200045\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>All the path arguments here can contain multiple path components. Symlinks are are always followed in all path components other than the last component.</p>\n<p><code>create_dir</code>, <code>remove_dir</code>, <code>symlink</code>, <code>unlink_file</code>, <code>read_link</code>, and <code>rename</code> do not follow symlinks in the last component .</p>\n<p><code>hard_link</code> also does not follow symlinks. Its POSIX counterpart <code>linkat</code> does accept an <code>AT_FOLLOW_SYMLINK</code> flag, but that flag isn't supported on all popular platforms, so it isn't exposed here.</p>\n<p><code>create_dir</code> does not create intermediate directories.</p>\n<p>One can set the times on the directory itself by calling <code>set_times</code> with a path of <code>.</code>. There isn't any fundamental reason why there isn't an equivalent of a <code>futimens</code> which works without a path in <code>WasiDir</code>; it just hasn't come up so far.<br>\n</p>\n</blockquote>",
        "id": 302571703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665020746
    },
    {
        "content": "<p>npmccallum <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270254952\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>@sunfishcode When are we expected to handle <code>.</code> and <code>..</code>? This is very important to document because of the security implications.</p>\n</blockquote>",
        "id": 302677313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665069635
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270273668\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p><code>WasiDir</code> is just derived from wasi-filesystem semantics. <code>.</code> and <code>..</code> are supported in all these functions, with the limitation that <code>..</code> shouldn't be able to resolve to a directory outside the <code>self</code> directory. So <code>foo/..</code> is ok (assuming <code>foo</code> is not a symlink to <code>..</code>), but <code>../foo</code> is not.</p>\n<p>That said, wasi-filesystem itself doesn't document many of these details yet. I intend to add documentation, but haven't gotten to it yet. For now, I can answer questions, and if anyone would like to help with the documentation I can mentor.<br>\n</p>\n</blockquote>",
        "id": 302679923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665070226
    },
    {
        "content": "<p>npmccallum <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270298014\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>We plan to submit a documentation PR.</p>\n<p>That limitation makes sense. However, it should be noted that there is a difference between <code>foo/..</code> and <code>.</code>; the first requires permissions on <code>foo</code> to evaluate and the second does not. Again, there are security implications here.</p>\n<p>Consider the situation where we pass in two file descriptors to the wasi instance:</p>\n<ul>\n<li><code>/</code></li>\n<li>'/foo/bar'</li>\n</ul>\n<p>Additionally, let's presume that <code>/</code> is empty.</p>\n<p>What happens in the following scenarios from the perspective of the wasm application?</p>\n<ol>\n<li>open(\"/\") - expectation: an fd pointing to '/'</li>\n<li>open(\"/..\") - expectation: an error</li>\n<li>open(\"/foo/bar\") - expectation: an fd pointing to '/foo/bar'</li>\n<li>open(\"/foo/bar/..\") - expectation: an error</li>\n</ol>\n<p>If my expectations are correct, then cases #2, #3 and #4 differ in surprising ways from all existing operating systems.</p>\n</blockquote>",
        "id": 302683016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665071068
    },
    {
        "content": "<p>npmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270298014\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>We plan to submit a documentation PR.</p>\n<p>That limitation makes sense. However, it should be noted that there is a difference between <code>foo/..</code> and <code>.</code>; the first requires permissions on <code>foo</code> to evaluate and the second does not. Again, there are security implications here.</p>\n<p>Consider the situation where we pass in two file descriptors to the wasi instance:</p>\n<ul>\n<li><code>/</code></li>\n<li><code>/foo/bar</code></li>\n</ul>\n<p>Additionally, let's presume that <code>/</code> is empty.</p>\n<p>What happens in the following scenarios from the perspective of the wasm application?</p>\n<ol>\n<li>open(\"/\") - expectation: an fd pointing to '/'</li>\n<li>open(\"/..\") - expectation: an error</li>\n<li>open(\"/foo/bar\") - expectation: an fd pointing to '/foo/bar'</li>\n<li>open(\"/foo/bar/..\") - expectation: an error</li>\n</ol>\n<p>If my expectations are correct, then cases #2, #3 and #4 differ in surprising ways from all existing operating systems.</p>\n</blockquote>",
        "id": 302683078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665071087
    },
    {
        "content": "<p>npmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270298014\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>We plan to submit a documentation PR.</p>\n<p>That limitation makes sense. However, it should be noted that there is a difference between <code>foo/..</code> and <code>.</code>; the first requires permissions on <code>foo</code> to evaluate and the second does not. Again, there are security implications here.</p>\n<p>Consider the situation where we pass in two file descriptors to the wasi instance:</p>\n<ul>\n<li><code>/</code></li>\n<li><code>/foo/bar</code></li>\n</ul>\n<p>Additionally, let's presume that <code>/</code> is empty.</p>\n<p>What happens in the following scenarios from the perspective of the wasm application?</p>\n<ol>\n<li><code>open(\"/\")</code> - expectation: an fd pointing to '/'</li>\n<li><code>open(\"/..\")</code> - expectation: an error</li>\n<li><code>open(\"/foo/bar\")</code> - expectation: an fd pointing to '/foo/bar'</li>\n<li><code>open(\"/foo/bar/..\")</code> - expectation: an error</li>\n</ol>\n<p>If my expectations are correct, then cases #2, #3 and #4 differ in surprising ways from all existing operating systems.</p>\n</blockquote>",
        "id": 302683158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665071112
    },
    {
        "content": "<p>npmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270298014\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>We plan to submit a documentation PR.</p>\n<p>That limitation makes sense. However, it should be noted that there is a difference between <code>foo/..</code> and <code>.</code>; the first requires permissions on <code>foo</code> to evaluate and the second does not. Again, there are security implications here.</p>\n<p>Consider the situation where we pass in two file descriptors to the wasi instance:</p>\n<ul>\n<li><code>/</code></li>\n<li><code>/foo/bar</code></li>\n</ul>\n<p>Additionally, let's presume that <code>/</code> is empty.</p>\n<p>What happens in the following scenarios from the perspective of the wasm application?</p>\n<ol>\n<li><code>open(\"/\")</code> - expectation: an fd pointing to '/'</li>\n<li><code>open(\"/..\")</code> - expectation: an error</li>\n<li><code>open(\"/foo/bar\")</code> - expectation: an fd pointing to '/foo/bar'</li>\n<li><code>open(\"/foo/bar/..\")</code> - expectation: an error</li>\n</ol>\n<p>If my expectations are correct, then cases 2, 3 and 4 differ in surprising ways from all existing operating systems.</p>\n</blockquote>",
        "id": 302683323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665071158
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270414069\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<blockquote>\n<p>open(\"/\") - expectation: an fd pointing to '/'</p>\n</blockquote>\n<p>That should be an error as opening <code>/</code> on any dir fd would open the root directory, rather than the dir that was passed in. Note that wasi doesn't have an <code>open</code> equivalent. Only an <code>openat</code> equivalent. So it would be <code>openat(some_fd, \"/\")</code> on your example.</p>\n</blockquote>",
        "id": 302698857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665075670
    },
    {
        "content": "<p>npmccallum <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270419881\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>@bjorn3 <code>wasi-libc</code> synthesizes <code>open()</code> in the way I've described above.</p>\n</blockquote>",
        "id": 302700030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665075991
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270429626\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>Right, I thought you were referring to the syscall level.</p>\n</blockquote>",
        "id": 302702267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665076537
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270432359\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>open(\"/foo/bar\") - expectation: an fd pointing to '/foo/bar'</li>\n</ol>\n</blockquote>\n<p>This matches unix systems. By having a pre-opened fd pointing to <code>/foo/bar</code>, you have effectively done a bind mount of <code>/foo/bar</code> to the directory of this fd. As for 2 and 4 I agree that it is surprising. 4 should be solvable by trying to resolve <code>..</code> on the path string before doing any wasi call.</p>\n</blockquote>",
        "id": 302702706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665076704
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270432359\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>open(\"/foo/bar\") - expectation: an fd pointing to '/foo/bar'</li>\n</ol>\n</blockquote>\n<p>This matches unix systems. By having a pre-opened fd pointing to <code>/foo/bar</code>, you have effectively done a bind mount of <code>/foo/bar</code> to the directory of this fd. As for 2 and 4 I agree that it is surprising. 4 should be solvable by trying to resolve <code>..</code> on the path string before doing any wasi call if wasi-libc doesn't already do this.</p>\n</blockquote>",
        "id": 302702751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665076718
    },
    {
        "content": "<p>npmccallum <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270445187\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>@bjorn3 It doesn't match unix systems.</p>\n<p>Passing a file descriptor, under the current implementation with <code>wasi-libc</code> roughly approximates the <code>mount</code> facility combined with filesystem namespaces. The difference is that on a unix system you can only mount a file system on a directory that already exists. Under wasi-libc, however, you can mount a directory anywhere in a theoretical hierarchy that doesn't actually exist.</p>\n<p>Under wasi-libc if you did <code>ls /foo</code> you'd get an error but <code>ls /foo/bar</code> would succeed. This doesn't match unix behavior.</p>\n</blockquote>",
        "id": 302704652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665077361
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270534829\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<blockquote>\n<p>If my expectations are correct, then cases 2, 3 and 4 differ in surprising ways from all existing operating systems.</p>\n</blockquote>\n<p>All of those expectations are currently met by wasi-libc's preopen system. There is some design tension between the goals of compatibility, the goals of leveraging WebAssembly's unique strengths, especially in light of the finite development resources for wasi-libc.</p>\n<p>wasi-libc's underlying observation here is that even outside of WASI, applications generally can't assume that they know the relative positions in the filesystem namespace of the various paths you provide to them. Even if two paths have the same prefix, it's not safe for applications to notice this and switch to using <code>..</code> paths to get from one to the other, because that might not follow the same symlinks as the original path provided from the user. Consequently, wasi libc can use a very simple system which takes a path, decides which preopened resource it belongs to, and then assume that the remainder of the path resolves within that resource.</p>\n<p>If you have specific use cases which need to do this kind of hopping between different resources using <code>..</code>, or which need <code>/..</code> to behave like it does in Unix, it'd be interesting to talk about them. If you're interested in writing libc code which implements a full mount tree, that'd be interesting to talk about too.</p>\n</blockquote>",
        "id": 302718330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665081920
    },
    {
        "content": "<p>npmccallum <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270547599\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>To be clear, I well understand that absolute compatibility with POSIX is not a design goal. I am, however, trying to understand where the surprises happen and why.</p>\n<p>We do have the need to synthesize a wide variety of filesystem-like things from the host. Keep in mind that our implementation cannot trust the host and therefore merely forwarding requests to the host isn't exactly an option. This means we have to implement things like filesystem encryption as a vfs.</p>\n<p>We're trying to design that VFS layer now. And once we have something to show, I'd like to find ways to contribute all or parts of it to wasmtime since I think it is generally useful. More details to come.</p>\n<p>I think our first step is gathering all this information and documenting the <code>WasiDir</code> and <code>WasiFile</code> interfaces.</p>\n</blockquote>",
        "id": 302720284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665082602
    },
    {
        "content": "<p>npmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025#issuecomment-1270547599\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5025\">issue #5025</a>:</p>\n<blockquote>\n<p>To be clear, I well understand that absolute compatibility with POSIX is not a design goal. I am, however, trying to understand where the surprises happen and why.</p>\n<p>We do have the need to synthesize a wide variety of filesystem-like things. Keep in mind that our implementation cannot trust the host and therefore merely forwarding requests to the host isn't exactly an option. This means we have to implement things like filesystem encryption as a vfs.</p>\n<p>We're trying to design that VFS layer now. And once we have something to show, I'd like to find ways to contribute all or parts of it to wasmtime since I think it is generally useful. More details to come.</p>\n<p>I think our first step is gathering all this information and documenting the <code>WasiDir</code> and <code>WasiFile</code> interfaces.</p>\n</blockquote>",
        "id": 302720771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665082768
    }
]