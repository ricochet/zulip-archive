[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451\">PR #2451</a> from <code>alias-section</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to do almost everything necessary for processing<br>\nthe alias section of module linking. Most of this is internal<br>\nrefactoring, the highlights being:</p>\n<ul>\n<li>\n<p>Type contents are now stored separately from a <code>wasmtime_env::Module</code>.<br>\n  Given that modules can freely alias types and have them used all over<br>\n  the place, it seemed best to have one canonical location to type<br>\n  storage which everywhere else points to (with indices). A new<br>\n<code>TypeTables</code> structure is produced during compilation which is shared<br>\n  amongst all member modules in a wasm blob.</p>\n</li>\n<li>\n<p>Instantiation is heavily refactored to account for module linking. The<br>\n  main gotcha here is that imports are now listed as \"initializers\". We<br>\n  have a sort of pseudo-bytecode-interpreter which interprets the<br>\n  initialization of a module. This is more complicated than just<br>\n  matching imports at this point because in the module linking proposal<br>\n  the module, alias, import, and instance sections may all be<br>\n  interleaved. This means that imports aren't guaranteed to show up at<br>\n  the beginning of the address space for modules/instances.</p>\n</li>\n</ul>\n<p>Otherwise most of the changes here largely fell out from these two<br>\ndesign points. Aliases are recorded as initializers in this scheme.<br>\nCopying around type information and/or just knowing type information<br>\nduring compilation is also pretty easy since everything is just a<br>\npointer into a <code>TypeTables</code> and we don't have to actually copy any types<br>\nthemselves. Lots of various refactorings were necessary to accomodate<br>\nthese changes.</p>\n<p>Tests are hoped to cover a breadth of functionality here, but not<br>\nnecessarily a depth. There's still one more piece of the module linking<br>\nproposal missing which is exporting instances/modules, which will come<br>\nin a future PR.</p>\n<p>It's also worth nothing that there's one large TODO which isn't<br>\nimplemented in this change that I plan on opening an issue for.<br>\nWith module linking when a set of modules comes back from compilation<br>\neach modules has all the trampolines for the entire set of modules. This<br>\nis quite a lot of duplicate trampolines across module-linking modules.<br>\nWe'll want to refactor this at some point to instead have only one set<br>\nof trampolines per set of module linking modules and have them shared<br>\nfrom there. I figured it was best to separate out this change, however,<br>\nsince it's purely related to resource usage, and doesn't impact<br>\nnon-module-linking modules at all.</p>\n<p>cc #2094</p>\n</blockquote>",
        "id": 217911245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606323484
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451\">PR #2451</a> from <code>alias-section</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to do almost everything necessary for processing<br>\nthe alias section of module linking. Most of this is internal<br>\nrefactoring, the highlights being:</p>\n<ul>\n<li>\n<p>Type contents are now stored separately from a <code>wasmtime_env::Module</code>.<br>\n  Given that modules can freely alias types and have them used all over<br>\n  the place, it seemed best to have one canonical location to type<br>\n  storage which everywhere else points to (with indices). A new<br>\n<code>TypeTables</code> structure is produced during compilation which is shared<br>\n  amongst all member modules in a wasm blob.</p>\n</li>\n<li>\n<p>Instantiation is heavily refactored to account for module linking. The<br>\n  main gotcha here is that imports are now listed as \"initializers\". We<br>\n  have a sort of pseudo-bytecode-interpreter which interprets the<br>\n  initialization of a module. This is more complicated than just<br>\n  matching imports at this point because in the module linking proposal<br>\n  the module, alias, import, and instance sections may all be<br>\n  interleaved. This means that imports aren't guaranteed to show up at<br>\n  the beginning of the address space for modules/instances.</p>\n</li>\n</ul>\n<p>Otherwise most of the changes here largely fell out from these two<br>\ndesign points. Aliases are recorded as initializers in this scheme.<br>\nCopying around type information and/or just knowing type information<br>\nduring compilation is also pretty easy since everything is just a<br>\npointer into a <code>TypeTables</code> and we don't have to actually copy any types<br>\nthemselves. Lots of various refactorings were necessary to accomodate<br>\nthese changes.</p>\n<p>Tests are hoped to cover a breadth of functionality here, but not<br>\nnecessarily a depth. There's still one more piece of the module linking<br>\nproposal missing which is exporting instances/modules, which will come<br>\nin a future PR.</p>\n<p>It's also worth nothing that there's one large TODO which isn't<br>\nimplemented in this change that I plan on opening an issue for.<br>\nWith module linking when a set of modules comes back from compilation<br>\neach modules has all the trampolines for the entire set of modules. This<br>\nis quite a lot of duplicate trampolines across module-linking modules.<br>\nWe'll want to refactor this at some point to instead have only one set<br>\nof trampolines per set of module linking modules and have them shared<br>\nfrom there. I figured it was best to separate out this change, however,<br>\nsince it's purely related to resource usage, and doesn't impact<br>\nnon-module-linking modules at all.</p>\n<p>cc #2094</p>\n</blockquote>",
        "id": 217921093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606328403
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451\">PR #2451</a> from <code>alias-section</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to do almost everything necessary for processing<br>\nthe alias section of module linking. Most of this is internal<br>\nrefactoring, the highlights being:</p>\n<ul>\n<li>\n<p>Type contents are now stored separately from a <code>wasmtime_env::Module</code>.<br>\n  Given that modules can freely alias types and have them used all over<br>\n  the place, it seemed best to have one canonical location to type<br>\n  storage which everywhere else points to (with indices). A new<br>\n<code>TypeTables</code> structure is produced during compilation which is shared<br>\n  amongst all member modules in a wasm blob.</p>\n</li>\n<li>\n<p>Instantiation is heavily refactored to account for module linking. The<br>\n  main gotcha here is that imports are now listed as \"initializers\". We<br>\n  have a sort of pseudo-bytecode-interpreter which interprets the<br>\n  initialization of a module. This is more complicated than just<br>\n  matching imports at this point because in the module linking proposal<br>\n  the module, alias, import, and instance sections may all be<br>\n  interleaved. This means that imports aren't guaranteed to show up at<br>\n  the beginning of the address space for modules/instances.</p>\n</li>\n</ul>\n<p>Otherwise most of the changes here largely fell out from these two<br>\ndesign points. Aliases are recorded as initializers in this scheme.<br>\nCopying around type information and/or just knowing type information<br>\nduring compilation is also pretty easy since everything is just a<br>\npointer into a <code>TypeTables</code> and we don't have to actually copy any types<br>\nthemselves. Lots of various refactorings were necessary to accomodate<br>\nthese changes.</p>\n<p>Tests are hoped to cover a breadth of functionality here, but not<br>\nnecessarily a depth. There's still one more piece of the module linking<br>\nproposal missing which is exporting instances/modules, which will come<br>\nin a future PR.</p>\n<p>It's also worth nothing that there's one large TODO which isn't<br>\nimplemented in this change that I plan on opening an issue for.<br>\nWith module linking when a set of modules comes back from compilation<br>\neach modules has all the trampolines for the entire set of modules. This<br>\nis quite a lot of duplicate trampolines across module-linking modules.<br>\nWe'll want to refactor this at some point to instead have only one set<br>\nof trampolines per set of module linking modules and have them shared<br>\nfrom there. I figured it was best to separate out this change, however,<br>\nsince it's purely related to resource usage, and doesn't impact<br>\nnon-module-linking modules at all.</p>\n<p>cc #2094</p>\n</blockquote>",
        "id": 218482145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606857038
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451\">PR #2451</a>.</p>",
        "id": 218482175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606857054
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451\">PR #2451</a> from <code>alias-section</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to do almost everything necessary for processing<br>\nthe alias section of module linking. Most of this is internal<br>\nrefactoring, the highlights being:</p>\n<ul>\n<li>\n<p>Type contents are now stored separately from a <code>wasmtime_env::Module</code>.<br>\n  Given that modules can freely alias types and have them used all over<br>\n  the place, it seemed best to have one canonical location to type<br>\n  storage which everywhere else points to (with indices). A new<br>\n<code>TypeTables</code> structure is produced during compilation which is shared<br>\n  amongst all member modules in a wasm blob.</p>\n</li>\n<li>\n<p>Instantiation is heavily refactored to account for module linking. The<br>\n  main gotcha here is that imports are now listed as \"initializers\". We<br>\n  have a sort of pseudo-bytecode-interpreter which interprets the<br>\n  initialization of a module. This is more complicated than just<br>\n  matching imports at this point because in the module linking proposal<br>\n  the module, alias, import, and instance sections may all be<br>\n  interleaved. This means that imports aren't guaranteed to show up at<br>\n  the beginning of the address space for modules/instances.</p>\n</li>\n</ul>\n<p>Otherwise most of the changes here largely fell out from these two<br>\ndesign points. Aliases are recorded as initializers in this scheme.<br>\nCopying around type information and/or just knowing type information<br>\nduring compilation is also pretty easy since everything is just a<br>\npointer into a <code>TypeTables</code> and we don't have to actually copy any types<br>\nthemselves. Lots of various refactorings were necessary to accomodate<br>\nthese changes.</p>\n<p>Tests are hoped to cover a breadth of functionality here, but not<br>\nnecessarily a depth. There's still one more piece of the module linking<br>\nproposal missing which is exporting instances/modules, which will come<br>\nin a future PR.</p>\n<p>It's also worth nothing that there's one large TODO which isn't<br>\nimplemented in this change that I plan on opening an issue for.<br>\nWith module linking when a set of modules comes back from compilation<br>\neach modules has all the trampolines for the entire set of modules. This<br>\nis quite a lot of duplicate trampolines across module-linking modules.<br>\nWe'll want to refactor this at some point to instead have only one set<br>\nof trampolines per set of module linking modules and have them shared<br>\nfrom there. I figured it was best to separate out this change, however,<br>\nsince it's purely related to resource usage, and doesn't impact<br>\nnon-module-linking modules at all.</p>\n<p>cc #2094</p>\n</blockquote>",
        "id": 218613097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606940293
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451#pullrequestreview-543259024\">PR Review</a>.</p>",
        "id": 218626700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606946724
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451#discussion_r534498959\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This <code>TODO</code> sounds issue worthy.  Should we file an issue to track it?</p>\n</blockquote>",
        "id": 218626701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606946724
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451#discussion_r534501761\">PR Review Comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            // are pretty simple, and the only slightly-meaty one is how\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 218626702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606946725
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451#discussion_r534510799\">PR Review Comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    ;; module (referencing parent type implicitly)\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 218626703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606946725
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451#pullrequestreview-543259024\">PR Review</a>.</p>",
        "id": 218626704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606946725
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451#discussion_r534510799\">PR Review Comment</a>.</p>",
        "id": 218627045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606946906
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451#pullrequestreview-543299667\">PR Review</a>.</p>",
        "id": 218630916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949032
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451#discussion_r534532126\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed!</p>\n</blockquote>",
        "id": 218630918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949032
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451\">PR #2451</a> from <code>alias-section</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to do almost everything necessary for processing<br>\nthe alias section of module linking. Most of this is internal<br>\nrefactoring, the highlights being:</p>\n<ul>\n<li>\n<p>Type contents are now stored separately from a <code>wasmtime_env::Module</code>.<br>\n  Given that modules can freely alias types and have them used all over<br>\n  the place, it seemed best to have one canonical location to type<br>\n  storage which everywhere else points to (with indices). A new<br>\n<code>TypeTables</code> structure is produced during compilation which is shared<br>\n  amongst all member modules in a wasm blob.</p>\n</li>\n<li>\n<p>Instantiation is heavily refactored to account for module linking. The<br>\n  main gotcha here is that imports are now listed as \"initializers\". We<br>\n  have a sort of pseudo-bytecode-interpreter which interprets the<br>\n  initialization of a module. This is more complicated than just<br>\n  matching imports at this point because in the module linking proposal<br>\n  the module, alias, import, and instance sections may all be<br>\n  interleaved. This means that imports aren't guaranteed to show up at<br>\n  the beginning of the address space for modules/instances.</p>\n</li>\n</ul>\n<p>Otherwise most of the changes here largely fell out from these two<br>\ndesign points. Aliases are recorded as initializers in this scheme.<br>\nCopying around type information and/or just knowing type information<br>\nduring compilation is also pretty easy since everything is just a<br>\npointer into a <code>TypeTables</code> and we don't have to actually copy any types<br>\nthemselves. Lots of various refactorings were necessary to accomodate<br>\nthese changes.</p>\n<p>Tests are hoped to cover a breadth of functionality here, but not<br>\nnecessarily a depth. There's still one more piece of the module linking<br>\nproposal missing which is exporting instances/modules, which will come<br>\nin a future PR.</p>\n<p>It's also worth nothing that there's one large TODO which isn't<br>\nimplemented in this change that I plan on opening an issue for.<br>\nWith module linking when a set of modules comes back from compilation<br>\neach modules has all the trampolines for the entire set of modules. This<br>\nis quite a lot of duplicate trampolines across module-linking modules.<br>\nWe'll want to refactor this at some point to instead have only one set<br>\nof trampolines per set of module linking modules and have them shared<br>\nfrom there. I figured it was best to separate out this change, however,<br>\nsince it's purely related to resource usage, and doesn't impact<br>\nnon-module-linking modules at all.</p>\n<p>cc #2094</p>\n</blockquote>",
        "id": 218631603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949432
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451\">PR #2451</a> from <code>alias-section</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to do almost everything necessary for processing<br>\nthe alias section of module linking. Most of this is internal<br>\nrefactoring, the highlights being:</p>\n<ul>\n<li>\n<p>Type contents are now stored separately from a <code>wasmtime_env::Module</code>.<br>\n  Given that modules can freely alias types and have them used all over<br>\n  the place, it seemed best to have one canonical location to type<br>\n  storage which everywhere else points to (with indices). A new<br>\n<code>TypeTables</code> structure is produced during compilation which is shared<br>\n  amongst all member modules in a wasm blob.</p>\n</li>\n<li>\n<p>Instantiation is heavily refactored to account for module linking. The<br>\n  main gotcha here is that imports are now listed as \"initializers\". We<br>\n  have a sort of pseudo-bytecode-interpreter which interprets the<br>\n  initialization of a module. This is more complicated than just<br>\n  matching imports at this point because in the module linking proposal<br>\n  the module, alias, import, and instance sections may all be<br>\n  interleaved. This means that imports aren't guaranteed to show up at<br>\n  the beginning of the address space for modules/instances.</p>\n</li>\n</ul>\n<p>Otherwise most of the changes here largely fell out from these two<br>\ndesign points. Aliases are recorded as initializers in this scheme.<br>\nCopying around type information and/or just knowing type information<br>\nduring compilation is also pretty easy since everything is just a<br>\npointer into a <code>TypeTables</code> and we don't have to actually copy any types<br>\nthemselves. Lots of various refactorings were necessary to accomodate<br>\nthese changes.</p>\n<p>Tests are hoped to cover a breadth of functionality here, but not<br>\nnecessarily a depth. There's still one more piece of the module linking<br>\nproposal missing which is exporting instances/modules, which will come<br>\nin a future PR.</p>\n<p>It's also worth nothing that there's one large TODO which isn't<br>\nimplemented in this change that I plan on opening an issue for.<br>\nWith module linking when a set of modules comes back from compilation<br>\neach modules has all the trampolines for the entire set of modules. This<br>\nis quite a lot of duplicate trampolines across module-linking modules.<br>\nWe'll want to refactor this at some point to instead have only one set<br>\nof trampolines per set of module linking modules and have them shared<br>\nfrom there. I figured it was best to separate out this change, however,<br>\nsince it's purely related to resource usage, and doesn't impact<br>\nnon-module-linking modules at all.</p>\n<p>cc #2094</p>\n</blockquote>",
        "id": 218631677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949487
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451#pullrequestreview-543304616\">PR Review</a>.</p>",
        "id": 218631838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949581
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2451\">PR #2451</a>.</p>",
        "id": 218634794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606951447
    }
]