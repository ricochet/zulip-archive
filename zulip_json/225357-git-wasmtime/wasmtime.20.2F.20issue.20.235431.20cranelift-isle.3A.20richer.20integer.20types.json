[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5431\">issue #5431</a>:</p>\n<blockquote>\n<p>Lift a bit more of the integer type system into ISLE. Namely</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">unsigned</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">signed</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>such that in a <code>u64</code> context we accept literals in 0..2^64 and in an <code>i64</code> context we accept -2^63..2^63. Then we also add some syntax</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">imm</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nv\">-1:i64</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"c1\">;; sketching some syntax, please bikeshed something better</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>u64</code> used in term position is a cast (compiles to <code>as u64</code>, but also works with typechecking at ISLE level) and <code>:i64</code> on a constant sets the type of the constant.</p>\n<p>This is all a bit uncertain but I feel there's a better system for constants, and for integer types, buried in here somewhere...</p>\n<p>_Originally posted by @cfallin in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5423#issuecomment-1347701158_\">https://github.com/bytecodealliance/wasmtime/issues/5423#issuecomment-1347701158_</a></p>\n</blockquote>",
        "id": 315705872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670973386
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5431\">issue #5431</a>:</p>\n<blockquote>\n<p>Lift a bit more of the integer type system into ISLE. Namely</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">unsigned</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">signed</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>such that in a <code>u64</code> context we accept literals in 0..2^64 and in an <code>i64</code> context we accept -2^63..2^63. Then we also add some syntax</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">imm</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nv\">-1:i64</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"c1\">;; sketching some syntax, please bikeshed something better</span>\n</code></pre></div>\n<p>where <code>u64</code> used in term position is a cast (compiles to <code>as u64</code>, but also works with typechecking at ISLE level) and <code>:i64</code> on a constant sets the type of the constant.</p>\n<p>This is all a bit uncertain but I feel there's a better system for constants, and for integer types, buried in here somewhere...</p>\n<p>_Originally posted by @cfallin in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5423#issuecomment-1347701158_\">https://github.com/bytecodealliance/wasmtime/issues/5423#issuecomment-1347701158_</a></p>\n</blockquote>",
        "id": 345813944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680223665
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5431#issuecomment-1491142206\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5431\">issue #5431</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 345814073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680223721
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5431\">issue #5431</a>:</p>\n<blockquote>\n<p>Lift a bit more of the integer type system into ISLE. Namely</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">unsigned</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">primitive</span><span class=\"w\"> </span><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"nc\">integer</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"nv\">signed</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>such that in a <code>u64</code> context we accept literals in 0..2^64 and in an <code>i64</code> context we accept -2^63..2^63. Then we also add some syntax</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">imm</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nv\">-1:i64</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"c1\">;; sketching some syntax, please bikeshed something better</span>\n</code></pre></div>\n<p>where <code>u64</code> used in term position is a cast (compiles to <code>as u64</code>, but also works with typechecking at ISLE level) and <code>:i64</code> on a constant sets the type of the constant.</p>\n<p>This is all a bit uncertain but I feel there's a better system for constants, and for integer types, buried in here somewhere...</p>\n<p>_Originally posted by @cfallin in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5423#issuecomment-1347701158_\">https://github.com/bytecodealliance/wasmtime/issues/5423#issuecomment-1347701158_</a></p>\n</blockquote>",
        "id": 485446129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733027246
    }
]