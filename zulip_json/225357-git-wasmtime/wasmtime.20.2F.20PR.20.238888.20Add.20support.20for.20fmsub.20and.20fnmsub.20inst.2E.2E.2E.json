[
    {
        "content": "<p>UnlimitedHummus opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a> from <code>UnlimitedHummus:main</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Issue #8602</p>\n<p>Allows generating fmsub and fnmsub instructions as mentioned in the issue.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 448176317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719782082
    },
    {
        "content": "<p><strong>UnlimitedHummus</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>.</p>",
        "id": 448176318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719782082
    },
    {
        "content": "<p><strong>UnlimitedHummus</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>.</p>",
        "id": 448176320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719782082
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2152080471\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Overall looks good to me, modulo the one comment below.</p>\n<p>Can you also add some run tests in addition to the compile tests, to make sure that the runtime behavior is as-expected as well? Since FMA is not quite the same across architectures, it may make sense to put these run tests under <code>cranelift/filetests/filetests/isa/x64</code> as well.</p>\n</blockquote>",
        "id": 448420923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719862630
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2152080471\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Overall looks good to me, modulo the one comment below.</p>\n<p>Can you also add some run tests in addition to the compile tests, to make sure that the runtime behavior is as-expected as well? Since FMA is not quite the same across architectures, it may make sense to put these run tests under <code>cranelift/filetests/filetests/isa/x64</code> as well.</p>\n</blockquote>",
        "id": 448420924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719862630
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#discussion_r1661435922\">PR review comment</a>:</p>\n<blockquote>\n<p>I forget what the details of our lowering and ISLE conversions are these days, but does this need to guard on sinkable loads? Or will it force things to registers as written? (In which case the comment should be updated)</p>\n<p>cc @jameysharp, who I think would know the answer to this question.</p>\n</blockquote>",
        "id": 448420925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719862630
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2152384586\">PR review</a>.</p>",
        "id": 448458018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719875719
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#discussion_r1661624471\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not actually sure. But I see that this is identical to the existing lowering rules above aside from replacing <code>add</code> with <code>sub</code> and so on. So it's probably fine?</p>\n</blockquote>",
        "id": 448458020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719875720
    },
    {
        "content": "<p>UnlimitedHummus submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2152772793\">PR review</a>.</p>",
        "id": 448510283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719900480
    },
    {
        "content": "<p>UnlimitedHummus created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#discussion_r1661884361\">PR review comment</a>:</p>\n<blockquote>\n<p>I did just work off of the rules for the <code>add</code> instructions. However, its probably related to the semantics of <code>z</code> matching into <code>XmmMem</code> in the rule for <code>x64vfmsub213</code>. I didn't look much into how that works, but the first two test cases actually test this rule both in the case of passing a value in a register or a sinkable load. There, the load is definitely sunk.</p>\n</blockquote>",
        "id": 448510284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719900480
    },
    {
        "content": "<p>UnlimitedHummus <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#issuecomment-2202016383\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>:</p>\n<blockquote>\n<p>Sure, I'll add the runtime tests later, when I have time.</p>\n</blockquote>",
        "id": 448510572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719900621
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#issuecomment-2202174980\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>:</p>\n<blockquote>\n<p>We already have some run tests that run on all arch's here (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/fma.clif\"><code>1</code></a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/simd-fma-neg.clif\"><code>2</code></a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/simd-fma.clif\"><code>3</code></a>). None of them test load sinking, so that would be a nice addition.</p>\n</blockquote>",
        "id": 448526659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719905616
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2152945676\">PR review</a>.</p>",
        "id": 448526972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719905744
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#discussion_r1661990844\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I forget what the details of our lowering and ISLE conversions are these days, but does this need to guard on sinkable loads?</p>\n</blockquote>\n<p>We do some checks when converting from a <code>Value</code> into <code>XmmMem</code> where we force the value into a register if it's not eligible for being sunk (i.e. has multiple uses), so this looks okay to me.</p>\n</blockquote>",
        "id": 448526975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719905744
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2153060039\">PR review</a>:</p>\n<blockquote>\n<p>This LGTM! I double checked the new instruction encodings against the intel manual and they all check out. Thanks!</p>\n</blockquote>",
        "id": 448534161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719908160
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2154258774\">PR review</a>.</p>",
        "id": 448642601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719935788
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#discussion_r1662791271\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for the clarification @afonso360 and @jameysharp!</p>\n</blockquote>",
        "id": 448642604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719935788
    },
    {
        "content": "<p>UnlimitedHummus <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#issuecomment-2204284071\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>:</p>\n<blockquote>\n<p>To add runtime tests for load sinking, I would just duplicate some existing testcases and add loads to them. This doesn't test that the load is actually sunk, but rather that the results are still correct with load sinking. Is that the intention? Or am I missing some different type of testcase I could write?</p>\n</blockquote>",
        "id": 448692204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719950502
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#issuecomment-2204351796\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>:</p>\n<blockquote>\n<p>That is a good thing to test, but generally I was just asking for runtests that check that the new lowerings that turn multiple clif instructions into a single machine instruction produce the same values that interpreting the individual clif instructions would.</p>\n<p>See for example</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/iabs.clif#L1-L18\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/iabs.clif#L1-L18</a></p>\n<p>although we only care about the interpreter and x86-64 here.</p>\n</blockquote>",
        "id": 448697622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719952138
    },
    {
        "content": "<p>UnlimitedHummus updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>.</p>",
        "id": 448930303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720034220
    },
    {
        "content": "<p>UnlimitedHummus submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2157191256\">PR review</a>.</p>",
        "id": 448930951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720034393
    },
    {
        "content": "<p>UnlimitedHummus created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#discussion_r1664643327\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this what you had in mind? I didn't find a better way to test this, other than to store the value on the stack and then load it from there again.</p>\n</blockquote>",
        "id": 448930954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720034393
    },
    {
        "content": "<p>UnlimitedHummus submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2157194971\">PR review</a>.</p>",
        "id": 448931512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720034531
    },
    {
        "content": "<p>UnlimitedHummus created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#discussion_r1664645167\">PR review comment</a>:</p>\n<blockquote>\n<p>If that's good I will add some more tests of course.</p>\n</blockquote>",
        "id": 448931513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720034531
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2157396512\">PR review</a>.</p>",
        "id": 448946664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720039681
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#discussion_r1664774957\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah! Just something to ensure that the instruction gets emitted and runs properly. I wouldn't worry about trying to get all of the variations running, that might be too much (In my opinion).</p>\n</blockquote>",
        "id": 448946665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720039681
    },
    {
        "content": "<p>UnlimitedHummus updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>.</p>",
        "id": 451090305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720824620
    },
    {
        "content": "<p>UnlimitedHummus submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#pullrequestreview-2175881689\">PR review</a>.</p>",
        "id": 451091656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720825240
    },
    {
        "content": "<p>UnlimitedHummus created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#discussion_r1676541919\">PR review comment</a>:</p>\n<blockquote>\n<p>This could generate more efficient core by selecting vfnmsub132ss instead and skipping the negation.</p>\n</blockquote>",
        "id": 451091658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720825240
    },
    {
        "content": "<p>UnlimitedHummus <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#issuecomment-2226496364\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>:</p>\n<blockquote>\n<p>I added some tests, but also identified an optimization I missed. This only affects the case where the negation happens before the load. I think the order of the two shouldn't matter. I still need to look into how to write rules to handle that case.</p>\n</blockquote>",
        "id": 451091845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720825330
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#issuecomment-2226539849\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>:</p>\n<blockquote>\n<blockquote>\n<p>I added some tests, but also identified an optimization I missed. This only affects the case where the negation happens before the load. I think the order of the two shouldn't matter. I still need to look into how to write rules to handle that case.</p>\n</blockquote>\n<p>This PR is already a nice improvement even if it doesn't optimize every case, so: If you want to dig into that you're welcome to, but I'd also be happy to merge this as-is. If you decide not to fix it right now, then it would be great to open a new issue describing what's not working, and include a link to that issue in the comments on the test that illustrates the problem.</p>\n<p>That said, this is failing in CI right now. The error looks weird to me and I'm not sure whether you just need to re-run <code>CRANELIFT_TEST_BLESS=1 cargo test -p cranelift-tools --test filetests</code> or if there's something stranger going on, so please let us know if you have any trouble.</p>\n</blockquote>",
        "id": 451096520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720828253
    },
    {
        "content": "<p>UnlimitedHummus updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>.</p>",
        "id": 451156358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720867951
    },
    {
        "content": "<p>UnlimitedHummus updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>.</p>",
        "id": 451161533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720869920
    },
    {
        "content": "<p>UnlimitedHummus <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888#issuecomment-2226870779\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>:</p>\n<blockquote>\n<p>CI failing was due to me annotating a copy of the expected output. I moved my comment before the testcase, which fixed that. I tried adding some rules to improve code generation for this case yesterday, but that didn't work. So I'd have to take a closer look at ISLE to see why it doesn't generate the right code. Not sure when I'll get around to that so I opened an issue describing the missed optimization like you suggested.</p>\n</blockquote>",
        "id": 451162569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720870728
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8888\">PR #8888</a>.</p>",
        "id": 451174704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720878379
    }
]