[
    {
        "content": "<p>adambratschikaye labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4923\">issue #4923</a>:</p>\n<blockquote>\n<p>It seems that a <code>wasm</code> source with a chain of blocks each containing a <code>local.get</code> instruction can have quadratic compile time because <code>can_optimize_var_lookup</code> will traverse the entire chain when handling each <code>local.get</code> instruction. As an example, the following <code>wat</code> takes 2.4 seconds to compile on my machine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">repeated</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">000</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and a flamegraph: ![flamegraph](<a href=\"https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg\">https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg</a>) shows that almost the entire time is spent in <code>can_optimize_var_lookup</code>. Note that the <code>wasm</code> file is 147 KB.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Download the attached <a href=\"https://github.com/bytecodealliance/wasmtime/files/9599992/blocks.wasm.gz\"><code>blocks.wasm.gz</code></a> and unzip it (or take the above <code>wat</code> and convert it to <code>wasm</code>).</li>\n<li>Compile it with <code>time target/release/wasmtime compile blocks.wasm</code>.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>I'd expect the compilation to be on the order of 100ms as it is for other modules with a single function of similar size on my machine.</p>\n<h3>Actual Results</h3>\n<p>The compilation takes over 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: commit <code>27435ae398bcce74bf990b9683e5c47c3f6c5d51</code></p>\n<p>Operating system: Ubuntu 20.04, Linux kernel 5.4.0-122-generic</p>\n<p>Architecture: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Architecture</span>:                    <span class=\"nc\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                  <span class=\"mi\">32</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"w\"></span>\n<span class=\"n\">Byte</span><span class=\"w\"> </span><span class=\"n\">Order</span>:                      <span class=\"nc\">Little</span><span class=\"w\"> </span><span class=\"n\">Endian</span><span class=\"w\"></span>\n<span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"n\">sizes</span>:                   <span class=\"mi\">43</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"n\">physical</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"kr\">virtual</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                          <span class=\"mi\">64</span><span class=\"w\"></span>\n<span class=\"n\">On</span><span class=\"o\">-</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">list</span>:             <span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">63</span><span class=\"w\"></span>\n<span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">core</span>:              <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">Core</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">socket</span>:              <span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                       <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">NUMA</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                    <span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">Vendor</span><span class=\"w\"> </span><span class=\"n\">ID</span>:                       <span class=\"nc\">AuthenticAMD</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">family</span>:                      <span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"n\">Model</span>:                           <span class=\"mi\">49</span><span class=\"w\"></span>\n<span class=\"n\">Model</span><span class=\"w\"> </span><span class=\"n\">name</span>:                      <span class=\"nc\">AMD</span><span class=\"w\"> </span><span class=\"n\">EPYC</span><span class=\"w\"> </span><span class=\"mi\">7302</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">-</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">Processor</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Extra Info</h3>\n<p>I'm working on a PR which should help with this.<br>\n</p>\n</blockquote>",
        "id": 299581137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663599709
    },
    {
        "content": "<p>adambratschikaye opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4923\">issue #4923</a>:</p>\n<blockquote>\n<p>It seems that a <code>wasm</code> source with a chain of blocks each containing a <code>local.get</code> instruction can have quadratic compile time because <code>can_optimize_var_lookup</code> will traverse the entire chain when handling each <code>local.get</code> instruction. As an example, the following <code>wat</code> takes 2.4 seconds to compile on my machine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">repeated</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">000</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and a flamegraph: ![flamegraph](<a href=\"https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg\">https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg</a>) shows that almost the entire time is spent in <code>can_optimize_var_lookup</code>. Note that the <code>wasm</code> file is 147 KB.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Download the attached <a href=\"https://github.com/bytecodealliance/wasmtime/files/9599992/blocks.wasm.gz\"><code>blocks.wasm.gz</code></a> and unzip it (or take the above <code>wat</code> and convert it to <code>wasm</code>).</li>\n<li>Compile it with <code>time target/release/wasmtime compile blocks.wasm</code>.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>I'd expect the compilation to be on the order of 100ms as it is for other modules with a single function of similar size on my machine.</p>\n<h3>Actual Results</h3>\n<p>The compilation takes over 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: commit <code>27435ae398bcce74bf990b9683e5c47c3f6c5d51</code></p>\n<p>Operating system: Ubuntu 20.04, Linux kernel 5.4.0-122-generic</p>\n<p>Architecture: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Architecture</span>:                    <span class=\"nc\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                  <span class=\"mi\">32</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"w\"></span>\n<span class=\"n\">Byte</span><span class=\"w\"> </span><span class=\"n\">Order</span>:                      <span class=\"nc\">Little</span><span class=\"w\"> </span><span class=\"n\">Endian</span><span class=\"w\"></span>\n<span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"n\">sizes</span>:                   <span class=\"mi\">43</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"n\">physical</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"kr\">virtual</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                          <span class=\"mi\">64</span><span class=\"w\"></span>\n<span class=\"n\">On</span><span class=\"o\">-</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">list</span>:             <span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">63</span><span class=\"w\"></span>\n<span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">core</span>:              <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">Core</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">socket</span>:              <span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                       <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">NUMA</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                    <span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">Vendor</span><span class=\"w\"> </span><span class=\"n\">ID</span>:                       <span class=\"nc\">AuthenticAMD</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">family</span>:                      <span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"n\">Model</span>:                           <span class=\"mi\">49</span><span class=\"w\"></span>\n<span class=\"n\">Model</span><span class=\"w\"> </span><span class=\"n\">name</span>:                      <span class=\"nc\">AMD</span><span class=\"w\"> </span><span class=\"n\">EPYC</span><span class=\"w\"> </span><span class=\"mi\">7302</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">-</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">Processor</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Extra Info</h3>\n<p>I'm working on a PR which should help with this.<br>\n</p>\n</blockquote>",
        "id": 299581138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663599710
    },
    {
        "content": "<p>adambratschikaye labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4923\">issue #4923</a>:</p>\n<blockquote>\n<p>It seems that a <code>wasm</code> source with a chain of blocks each containing a <code>local.get</code> instruction can have quadratic compile time because <code>can_optimize_var_lookup</code> will traverse the entire chain when handling each <code>local.get</code> instruction. As an example, the following <code>wat</code> takes 2.4 seconds to compile on my machine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">repeated</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">000</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and a flamegraph: ![flamegraph](<a href=\"https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg\">https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg</a>) shows that almost the entire time is spent in <code>can_optimize_var_lookup</code>. Note that the <code>wasm</code> file is 147 KB.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Download the attached <a href=\"https://github.com/bytecodealliance/wasmtime/files/9599992/blocks.wasm.gz\"><code>blocks.wasm.gz</code></a> and unzip it (or take the above <code>wat</code> and convert it to <code>wasm</code>).</li>\n<li>Compile it with <code>time target/release/wasmtime compile blocks.wasm</code>.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>I'd expect the compilation to be on the order of 100ms as it is for other modules with a single function of similar size on my machine.</p>\n<h3>Actual Results</h3>\n<p>The compilation takes over 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: commit <code>27435ae398bcce74bf990b9683e5c47c3f6c5d51</code></p>\n<p>Operating system: Ubuntu 20.04, Linux kernel 5.4.0-122-generic</p>\n<p>Architecture: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Architecture</span>:                    <span class=\"nc\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                  <span class=\"mi\">32</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"w\"></span>\n<span class=\"n\">Byte</span><span class=\"w\"> </span><span class=\"n\">Order</span>:                      <span class=\"nc\">Little</span><span class=\"w\"> </span><span class=\"n\">Endian</span><span class=\"w\"></span>\n<span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"n\">sizes</span>:                   <span class=\"mi\">43</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"n\">physical</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"kr\">virtual</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                          <span class=\"mi\">64</span><span class=\"w\"></span>\n<span class=\"n\">On</span><span class=\"o\">-</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">list</span>:             <span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">63</span><span class=\"w\"></span>\n<span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">core</span>:              <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">Core</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">socket</span>:              <span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                       <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">NUMA</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                    <span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">Vendor</span><span class=\"w\"> </span><span class=\"n\">ID</span>:                       <span class=\"nc\">AuthenticAMD</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">family</span>:                      <span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"n\">Model</span>:                           <span class=\"mi\">49</span><span class=\"w\"></span>\n<span class=\"n\">Model</span><span class=\"w\"> </span><span class=\"n\">name</span>:                      <span class=\"nc\">AMD</span><span class=\"w\"> </span><span class=\"n\">EPYC</span><span class=\"w\"> </span><span class=\"mi\">7302</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">-</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">Processor</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Extra Info</h3>\n<p>I'm working on a PR which should help with this.<br>\n</p>\n</blockquote>",
        "id": 299581140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663599711
    },
    {
        "content": "<p>adambratschikaye closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4923\">issue #4923</a>:</p>\n<blockquote>\n<p>It seems that a <code>wasm</code> source with a chain of blocks each containing a <code>local.get</code> instruction can have quadratic compile time because <code>can_optimize_var_lookup</code> will traverse the entire chain when handling each <code>local.get</code> instruction. As an example, the following <code>wat</code> takes 2.4 seconds to compile on my machine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">repeated</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">000</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and a flamegraph: ![flamegraph](<a href=\"https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg\">https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg</a>) shows that almost the entire time is spent in <code>can_optimize_var_lookup</code>. Note that the <code>wasm</code> file is 147 KB.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Download the attached <a href=\"https://github.com/bytecodealliance/wasmtime/files/9599992/blocks.wasm.gz\"><code>blocks.wasm.gz</code></a> and unzip it (or take the above <code>wat</code> and convert it to <code>wasm</code>).</li>\n<li>Compile it with <code>time target/release/wasmtime compile blocks.wasm</code>.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>I'd expect the compilation to be on the order of 100ms as it is for other modules with a single function of similar size on my machine.</p>\n<h3>Actual Results</h3>\n<p>The compilation takes over 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: commit <code>27435ae398bcce74bf990b9683e5c47c3f6c5d51</code></p>\n<p>Operating system: Ubuntu 20.04, Linux kernel 5.4.0-122-generic</p>\n<p>Architecture: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Architecture</span>:                    <span class=\"nc\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                  <span class=\"mi\">32</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"w\"></span>\n<span class=\"n\">Byte</span><span class=\"w\"> </span><span class=\"n\">Order</span>:                      <span class=\"nc\">Little</span><span class=\"w\"> </span><span class=\"n\">Endian</span><span class=\"w\"></span>\n<span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"n\">sizes</span>:                   <span class=\"mi\">43</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"n\">physical</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"kr\">virtual</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                          <span class=\"mi\">64</span><span class=\"w\"></span>\n<span class=\"n\">On</span><span class=\"o\">-</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">list</span>:             <span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">63</span><span class=\"w\"></span>\n<span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">core</span>:              <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">Core</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">socket</span>:              <span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                       <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">NUMA</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                    <span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">Vendor</span><span class=\"w\"> </span><span class=\"n\">ID</span>:                       <span class=\"nc\">AuthenticAMD</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">family</span>:                      <span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"n\">Model</span>:                           <span class=\"mi\">49</span><span class=\"w\"></span>\n<span class=\"n\">Model</span><span class=\"w\"> </span><span class=\"n\">name</span>:                      <span class=\"nc\">AMD</span><span class=\"w\"> </span><span class=\"n\">EPYC</span><span class=\"w\"> </span><span class=\"mi\">7302</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">-</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">Processor</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Extra Info</h3>\n<p>I'm working on a PR which should help with this.<br>\n</p>\n</blockquote>",
        "id": 299699406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663660118
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4923#issuecomment-1254063838\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4923\">issue #4923</a>:</p>\n<blockquote>\n<p>My draft fix for this is in #4939.</p>\n</blockquote>",
        "id": 300013613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663784201
    },
    {
        "content": "<p>jameysharp reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4923\">issue #4923</a>:</p>\n<blockquote>\n<p>It seems that a <code>wasm</code> source with a chain of blocks each containing a <code>local.get</code> instruction can have quadratic compile time because <code>can_optimize_var_lookup</code> will traverse the entire chain when handling each <code>local.get</code> instruction. As an example, the following <code>wat</code> takes 2.4 seconds to compile on my machine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">repeated</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">000</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and a flamegraph: ![flamegraph](<a href=\"https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg\">https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg</a>) shows that almost the entire time is spent in <code>can_optimize_var_lookup</code>. Note that the <code>wasm</code> file is 147 KB.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Download the attached <a href=\"https://github.com/bytecodealliance/wasmtime/files/9599992/blocks.wasm.gz\"><code>blocks.wasm.gz</code></a> and unzip it (or take the above <code>wat</code> and convert it to <code>wasm</code>).</li>\n<li>Compile it with <code>time target/release/wasmtime compile blocks.wasm</code>.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>I'd expect the compilation to be on the order of 100ms as it is for other modules with a single function of similar size on my machine.</p>\n<h3>Actual Results</h3>\n<p>The compilation takes over 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: commit <code>27435ae398bcce74bf990b9683e5c47c3f6c5d51</code></p>\n<p>Operating system: Ubuntu 20.04, Linux kernel 5.4.0-122-generic</p>\n<p>Architecture: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Architecture</span>:                    <span class=\"nc\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                  <span class=\"mi\">32</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"w\"></span>\n<span class=\"n\">Byte</span><span class=\"w\"> </span><span class=\"n\">Order</span>:                      <span class=\"nc\">Little</span><span class=\"w\"> </span><span class=\"n\">Endian</span><span class=\"w\"></span>\n<span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"n\">sizes</span>:                   <span class=\"mi\">43</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"n\">physical</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"kr\">virtual</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                          <span class=\"mi\">64</span><span class=\"w\"></span>\n<span class=\"n\">On</span><span class=\"o\">-</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">list</span>:             <span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">63</span><span class=\"w\"></span>\n<span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">core</span>:              <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">Core</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">socket</span>:              <span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                       <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">NUMA</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                    <span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">Vendor</span><span class=\"w\"> </span><span class=\"n\">ID</span>:                       <span class=\"nc\">AuthenticAMD</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">family</span>:                      <span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"n\">Model</span>:                           <span class=\"mi\">49</span><span class=\"w\"></span>\n<span class=\"n\">Model</span><span class=\"w\"> </span><span class=\"n\">name</span>:                      <span class=\"nc\">AMD</span><span class=\"w\"> </span><span class=\"n\">EPYC</span><span class=\"w\"> </span><span class=\"mi\">7302</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">-</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">Processor</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Extra Info</h3>\n<p>I'm working on a PR which should help with this.<br>\n</p>\n</blockquote>",
        "id": 300013614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663784201
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4923\">issue #4923</a>:</p>\n<blockquote>\n<p>It seems that a <code>wasm</code> source with a chain of blocks each containing a <code>local.get</code> instruction can have quadratic compile time because <code>can_optimize_var_lookup</code> will traverse the entire chain when handling each <code>local.get</code> instruction. As an example, the following <code>wat</code> takes 2.4 seconds to compile on my machine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">repeated</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">000</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and a flamegraph: ![flamegraph](<a href=\"https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg\">https://user-images.githubusercontent.com/90606735/191045431-3e7626ef-7c29-4343-b784-4f9f7205d9d5.svg</a>) shows that almost the entire time is spent in <code>can_optimize_var_lookup</code>. Note that the <code>wasm</code> file is 147 KB.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Download the attached <a href=\"https://github.com/bytecodealliance/wasmtime/files/9599992/blocks.wasm.gz\"><code>blocks.wasm.gz</code></a> and unzip it (or take the above <code>wat</code> and convert it to <code>wasm</code>).</li>\n<li>Compile it with <code>time target/release/wasmtime compile blocks.wasm</code>.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>I'd expect the compilation to be on the order of 100ms as it is for other modules with a single function of similar size on my machine.</p>\n<h3>Actual Results</h3>\n<p>The compilation takes over 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: commit <code>27435ae398bcce74bf990b9683e5c47c3f6c5d51</code></p>\n<p>Operating system: Ubuntu 20.04, Linux kernel 5.4.0-122-generic</p>\n<p>Architecture: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Architecture</span>:                    <span class=\"nc\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"o\">-</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                  <span class=\"mi\">32</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"w\"></span>\n<span class=\"n\">Byte</span><span class=\"w\"> </span><span class=\"n\">Order</span>:                      <span class=\"nc\">Little</span><span class=\"w\"> </span><span class=\"n\">Endian</span><span class=\"w\"></span>\n<span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"n\">sizes</span>:                   <span class=\"mi\">43</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"n\">physical</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"kr\">virtual</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                          <span class=\"mi\">64</span><span class=\"w\"></span>\n<span class=\"n\">On</span><span class=\"o\">-</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">CPU</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">list</span>:             <span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">63</span><span class=\"w\"></span>\n<span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">core</span>:              <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">Core</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">per</span><span class=\"w\"> </span><span class=\"n\">socket</span>:              <span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                       <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">NUMA</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>:                    <span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">Vendor</span><span class=\"w\"> </span><span class=\"n\">ID</span>:                       <span class=\"nc\">AuthenticAMD</span><span class=\"w\"></span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">family</span>:                      <span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"n\">Model</span>:                           <span class=\"mi\">49</span><span class=\"w\"></span>\n<span class=\"n\">Model</span><span class=\"w\"> </span><span class=\"n\">name</span>:                      <span class=\"nc\">AMD</span><span class=\"w\"> </span><span class=\"n\">EPYC</span><span class=\"w\"> </span><span class=\"mi\">7302</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">-</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">Processor</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Extra Info</h3>\n<p>I'm working on a PR which should help with this.<br>\n</p>\n</blockquote>",
        "id": 300408135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663951287
    }
]