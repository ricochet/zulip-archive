[
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the good first issue label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">Issue #9310</a>.</p>",
        "id": 472731015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727280300
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">Issue #9310</a>.</p>",
        "id": 472731016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727280301
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">issue #9310</a>:</p>\n<blockquote>\n<p>We currently have an <code>enum</code> of various trap codes, but they are all pretty Wasm-/Wasmtime-specific, rather than things that general Cranelift users will want. And they certainly do not cover everything that general Cranelift users might want.</p>\n<p>We should replace <code>cranelift_codegen::ir::TrapCode</code> with a <code>u8</code> that is simply plumbed through cranelift and whose meaning is determined fully by the CLIF producer. Or perhaps instead of simply a <code>u8</code>, a <code>pub struct TrapCode(pub u8)</code>, just so that it is that much harder to pass the wrong value around when we are shuffling these about inside the compiler.</p>\n<p>This will also let us stop duplicating trap codes between <code>cranelift_codegen::ir::TrapCode</code> and <code>wasmtime_environ::Trap</code>, which will be a nice clean up.</p>\n<p>Note: fixing this issue will mostly involve chasing down compile errors throughout Cranelift and Wasmtime.</p>\n</blockquote>",
        "id": 472731025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727280302
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310#issuecomment-2374543734\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">issue #9310</a>:</p>\n<blockquote>\n<p><code>TrapCode::User(u16)</code> can already be used for passing custom trap codes. While some builtin trap codes are wasm specific, others are not. For example <code>IntegerDivisionByZero</code> and <code>BadConversionToInteger</code> directly correspond to an instruction that could trap. And <code>UnreachableCodeReached</code> is used by cg_clif for any block that should be unreachable. Also <code>HeapOutOfBounds</code> (which is a bit misnamed) is the default trap code for trapping loads and stores. We still need a default trap code for trapping loads and stores.</p>\n</blockquote>",
        "id": 472733679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727281212
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310#issuecomment-2374578012\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">issue #9310</a>:</p>\n<blockquote>\n<p>Perhaps something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(All, The, Traits)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">TrapCode</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TrapCode</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">INTEGER_DIVIDE_BY_ZERO</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TrapCode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TrapCode</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">::</span><span class=\"n\">MAX</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BAD_CONVERSION_TO_INTEGER</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TrapCode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TrapCode</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">::</span><span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MEMORY_INVALID</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TrapCode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TrapCode</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">::</span><span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">user</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">TrapCode</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">::</span><span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">TrapCode</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">code</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>That way Cranelift can reserve a few trap codes for itself that lowerings generate but leave most of the 8-bit space open up to embedders?</p>\n</blockquote>",
        "id": 472736204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727282089
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310#issuecomment-2374624036\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">issue #9310</a>:</p>\n<blockquote>\n<p>Division by zero is an interesting example, because Cranelift emits that trap code itself. Makes sense to reserve a constant for that one.</p>\n<p>I think bad integer conversions may be in the same boat, but I'd need to double check.</p>\n<p>But unreachable code reached and the others seem like things that could easily be defined by the CLIF producer, since they choose what code to attach to <code>trap[n]z</code> or in <code>ir::MemFlags</code>, and cranelift itself just plumbs that code through without actually inspecting it or doing different things depending on which code was attached.</p>\n</blockquote>",
        "id": 472738760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727283094
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310#issuecomment-2374633204\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">issue #9310</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think bad integer conversions may be in the same boat, but I'd need to double check.</p>\n</blockquote>\n<p>It is. Eg on x86_64: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1e37274a0795be7063d1c5db6eb282d57d117f02/cranelift/codegen/src/isa/x64/inst/emit.rs#L3695\">https://github.com/bytecodealliance/wasmtime/blob/1e37274a0795be7063d1c5db6eb282d57d117f02/cranelift/codegen/src/isa/x64/inst/emit.rs#L3695</a></p>\n<p>For loads and stores the default is allowing traps, so there has to be a default trap code for loads and stores unless you want to force everyone to explicitly choose between a trap code or notrap.</p>\n</blockquote>",
        "id": 472739392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727283346
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310#issuecomment-2374649025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">issue #9310</a>:</p>\n<blockquote>\n<blockquote>\n<p>For loads and stores the default is allowing traps, so there has to be a default trap code for loads and stores unless you want to force everyone to explicitly choose between a trap code or notrap.</p>\n</blockquote>\n<p>That doesn't seem like the worst option actually -- those are indeed the choices, trap or no trap, and if trap, given that we're pushing the definition of trap codes upward as far as possible, why not require the user to specify?</p>\n</blockquote>",
        "id": 472739993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727283572
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310#issuecomment-2374656293\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">issue #9310</a>:</p>\n<blockquote>\n<p>Alternatively we could flip the defaults and disallow traps by default? Wasm translation already has to handle loads and stores with great care and assuming no traps seems like a more appropriate default for a Cranelift only context</p>\n</blockquote>",
        "id": 472740614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727283767
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310#issuecomment-2374761371\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">issue #9310</a>:</p>\n<blockquote>\n<blockquote>\n<p>Alternatively we could flip the defaults and disallow traps by default?</p>\n</blockquote>\n<p>Currently you have to opt in to get any kind of UB in Cranelift IR. I would prefer if it stays that way. Making notrap the default would cause loads and stores to have UB by default.</p>\n</blockquote>",
        "id": 472746734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727286254
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9310\">issue #9310</a>:</p>\n<blockquote>\n<p>We currently have an <code>enum</code> of various trap codes, but they are all pretty Wasm-/Wasmtime-specific, rather than things that general Cranelift users will want. And they certainly do not cover everything that general Cranelift users might want.</p>\n<p>We should replace <code>cranelift_codegen::ir::TrapCode</code> with a <code>u8</code> that is simply plumbed through cranelift and whose meaning is determined fully by the CLIF producer. Or perhaps instead of simply a <code>u8</code>, a <code>pub struct TrapCode(pub u8)</code>, just so that it is that much harder to pass the wrong value around when we are shuffling these about inside the compiler.</p>\n<p>This will also let us stop duplicating trap codes between <code>cranelift_codegen::ir::TrapCode</code> and <code>wasmtime_environ::Trap</code>, which will be a nice clean up.</p>\n<p>Note: fixing this issue will mostly involve chasing down compile errors throughout Cranelift and Wasmtime.</p>\n</blockquote>",
        "id": 474099848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727806931
    }
]