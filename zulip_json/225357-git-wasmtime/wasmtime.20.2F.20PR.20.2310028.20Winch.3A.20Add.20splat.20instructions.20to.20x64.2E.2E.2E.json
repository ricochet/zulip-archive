[
    {
        "content": "<p>jeffcharles opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a> from <code>jeffcharles:winch-simd-splat</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;<br>\nPart of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8093\">https://github.com/bytecodealliance/wasmtime/issues/8093</a>. Implements the following instructions on x64 with AVX2 support:</p>\n<ul>\n<li><code>i8x16.splat</code></li>\n<li><code>i16x8.splat</code></li>\n<li><code>i32x4.splat</code></li>\n<li><code>i64x2.splat</code></li>\n<li><code>f32x4.splat</code></li>\n<li><code>f64x2.splat</code></li>\n</ul>\n</blockquote>",
        "id": 494029267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736980440
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494029269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736980440
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494029270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736980440
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494029272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736980441
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494029274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736980441
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#issuecomment-2594160381\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 494037070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736984699
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/saulecabrera\">saulecabrera</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494114918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737024488
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#pullrequestreview-2556307363\">PR review</a>.</p>",
        "id": 494162455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737038393
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918644720\">PR review comment</a>:</p>\n<blockquote>\n<p>Instead of making this specific to x64, can we instead call this <code>lane_size</code> or something along those lines and move the implementation to <code>masm.rs</code>? I don't think we'd only need this for x64. </p>\n</blockquote>",
        "id": 494162458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737038393
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918665181\">PR review comment</a>:</p>\n<blockquote>\n<p>If I'm not wrong, this is the exact same comment/mask value used in <code>load_splat</code>. Could we extract this as a helper? </p>\n</blockquote>",
        "id": 494162460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737038394
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918679187\">PR review comment</a>:</p>\n<blockquote>\n<p>Taking a look at the callsites, and trying to think to future backends, I'm tempted to suggest adding a single entry here, <code>splat</code>, defined as </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">splat</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">SplatKind</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>That's potentially the most flexible approach, and that would potentially make the definition more uniform across backends: as far as I can tell, the only reason why we have a special <code>splat_int</code> is because of the requirements in x64. </p>\n<p>For that suggestion to work though, we'd probably need to extend <code>SplatKind</code> to encode the source type, (e.g., <code>SplatKind::I8x16</code>) -- I don't think this changes anything fundamental, since we'd still be able to derive the <code>lane_size</code>. </p>\n</blockquote>",
        "id": 494162461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737038394
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#pullrequestreview-2556372533\">PR review</a>.</p>",
        "id": 494162927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737038502
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918683306\">PR review comment</a>:</p>\n<blockquote>\n<p>Could you return a <code>slice</code> here instead? The constant pool will copy the bytes into a <code>Vec&lt;u8&gt;</code>, but returning a slice will at least prevent heap allocations in case this gets used for anything else that's not constant pool related. </p>\n</blockquote>",
        "id": 494162939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737038504
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#pullrequestreview-2556374532\">PR review</a>.</p>",
        "id": 494163145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737038541
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918684508\">PR review comment</a>:</p>\n<blockquote>\n<p>To be more specific, using <code>as_slice()</code> instead of <code>to_vec()</code>, similar to the other uses of <code>add_constant</code>. </p>\n</blockquote>",
        "id": 494163146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737038541
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494176422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737041806
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494177848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737042219
    },
    {
        "content": "<p>jeffcharles submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#pullrequestreview-2556580255\">PR review</a>.</p>",
        "id": 494180414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737042946
    },
    {
        "content": "<p>jeffcharles created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918804033\">PR review comment</a>:</p>\n<blockquote>\n<p>If I use <code>as_slice()</code> and return a <code>&amp;[u8]</code>, I get this message from the compiler: <code>cannot return value referencing temporary value</code>. Likely because the array that's created by <code>to_le_bytes()</code> gets dropped when the method returns. The arrays are also of different lengths between the variants. We could maybe use some unsafe code to create a reference to the underlying bytes. Otherwise I'm not sure how to avoid the heap allocation.</p>\n</blockquote>",
        "id": 494180415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737042946
    },
    {
        "content": "<p>jeffcharles submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#pullrequestreview-2556695006\">PR review</a>.</p>",
        "id": 494190319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737045661
    },
    {
        "content": "<p>jeffcharles created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918873178\">PR review comment</a>:</p>\n<blockquote>\n<p>The one thing with changing <code>SplatKind</code> to encode an <code>I</code> or <code>F</code> is the <code>v128.load*_splat</code> instructions aren't necessarily operating on integers or floats. It's operating on whatever state was stored in the memory. That said, it should still be fine to have the visitor specify a <code>SplatKind::I32x4</code> for <code>v128.load32_splat</code> even if it's operating on 4 floats, it'll still have the same result.</p>\n</blockquote>",
        "id": 494190320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737045662
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#pullrequestreview-2556730313\">PR review</a>.</p>",
        "id": 494193161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737046559
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918894910\">PR review comment</a>:</p>\n<blockquote>\n<p>To be explicit, we could rename the current <code>SplatKind</code> to <code>SplatLoadKind</code> and introduce the types in <code>SplatKind</code>. That would tighten the implementation and keep the semantics as close as possible to the Wasm semantics. </p>\n</blockquote>",
        "id": 494193162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737046559
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918894910\">PR review comment</a>.</p>",
        "id": 494193278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737046586
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918679187\">PR review comment</a>.</p>",
        "id": 494194345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737046915
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#pullrequestreview-2556748914\">PR review</a>.</p>",
        "id": 494194725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737047033
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#discussion_r1918905633\">PR review comment</a>:</p>\n<blockquote>\n<p>Given that this is not used for anything that the constant pool, I don't think we need to introduce any unsafe code. Perhaps adding a comment stating that this method heap allocates and it's intended to be used mostly with the constant pool?</p>\n</blockquote>",
        "id": 494194726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737047033
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494198665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737048309
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494199957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737048726
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494200394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737048880
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494200812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737049029
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028#pullrequestreview-2556851725\">PR review</a>.</p>",
        "id": 494203350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737049975
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10028\">PR #10028</a>.</p>",
        "id": 494208778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737051877
    }
]