[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400067355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698989261
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400067357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698989262
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400067358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698989262
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a> from <code>cfallin:pcc-dynamic-wasm</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This PR completes the work to add proof-carrying-code validation to Wasm heap accesses in Wasmtime, for all bounds-check cases (dynamic and static, covering the 4 and 3 cases of the former and latter respectively), on x86-64 and aarch64.</p>\n<p>The PR includes an integration test at the top level (<code>tests/pcc_memory.rs</code>) that compiles a Wasm module with PCC enabled under a range of memory configurations. Ideally we'd use the existing Wasm filetest infrastructure for this; but it has its own Wasm environment definitions and PCC hasn't been plumbed through those (this would also mean we'd be testing a slightly different path of at least the memory-type setup than production Wasmtime).</p>\n<p>The test expectations change slightly because this PR had to change <code>iadd_imm(x, -k)</code> to <code>isub(x, iconst(k))</code> in the generated bounds-checking code. Some of the backends (riscv64, s390x) seem to match iadd-of-negative better than isub-of-positive; but that's an orthogonal isel issue and can be fixed up.</p>\n<p>I hope to add fuzzing to exercise this further, but we at least have (theoretical) functional completeness with this PR. Hence, I think this fixes #6090.</p>\n<p>Followup work on PCC could include use of PCC annotations to verify table accesses as well, and a strong-enforcing mode that disallows all non-<code>checked</code> memory accesses (so we have to audit and allowlist constant pools and ABI code and the like, and ensure all lowered Wasm ops are covered). However I don't think this additional assurance level is necessary to turn on and benefit from Wasm-memory-bounds-checking PCC.</p>\n<p>The first half of this PR was</p>\n<p>Co-authored-by: Nick Fitzgerald &lt;<a href=\"mailto:fitzgen@gmail.com\">fitzgen@gmail.com</a>&gt;</p>\n</blockquote>",
        "id": 400067359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698989262
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400067506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698989403
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713123468\">PR review</a>:</p>\n<blockquote>\n<p>r=me with comments addressed</p>\n</blockquote>",
        "id": 400183208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713123468\">PR review</a>:</p>\n<blockquote>\n<p>r=me with comments addressed</p>\n</blockquote>",
        "id": 400183209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1381959303\">PR review comment</a>:</p>\n<blockquote>\n<p>Do we need this fact? Why isn't looking at the DFG itself good enough? </p>\n<p>Ah is this for once we've lowered to machinsts and we need to know if a particular machinst is defining a <code>Value</code>? If so, can you clarify that in a comment here?</p>\n</blockquote>",
        "id": 400183211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382005069\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's use <code>i64::from</code> here instead of <code>as</code>.</p>\n</blockquote>",
        "id": 400183212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1381986765\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh it is parsed as <code>def(...)</code> not <code>value(...)</code> here? Is the printer just wrong then?</p>\n</blockquote>",
        "id": 400183213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1381962216\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we make the text format and Rust type names align? This will make it easier when trying to figure out the implementation for stuff people see in the clif text format or vice versa.</p>\n<p>So either <code>def({value})</code> in the text format or rename <code>Fact::Def</code> to <code>Fact::Value</code>.</p>\n</blockquote>",
        "id": 400183214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382011542\">PR review comment</a>:</p>\n<blockquote>\n<p>Should this be a checked sub?</p>\n</blockquote>",
        "id": 400183215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382026268\">PR review comment</a>:</p>\n<blockquote>\n<p>Can this also add</p>\n<ul>\n<li>access size of <code>i32</code> (existing), <code>i8</code> (missing), and <code>i64</code> (missing)</li>\n<li><code>spectre={yes, no}</code></li>\n<li>offset of nonzero (existing) and zero (missing)</li>\n<li>wasm memory size of 32 (existing) and 64 (missing)</li>\n</ul>\n<p>In particular, we aren't exercising all branches in <code>bounds_checks.rs</code> right now because there are special cases for when <code>offset + access_size == 1</code> for example.</p>\n<p>For anything that isn't handled yet, could we still have the test do something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">enable_spectre</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cm\">/* TODO: support pcc without spectre */</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 400183216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382009161\">PR review comment</a>:</p>\n<blockquote>\n<p>Can avoid writing out our own <code>is_some</code> method by removing <code>AddrPcc::None</code> and then using <code>Option&lt;AddrPcc&gt;</code> in place of where <code>AddrPcc</code> is used now. Rust will even pack the type into the same size. In general, <code>Option&lt;T&gt;</code> is preferred over adding a <code>None</code> variant to <code>T</code> since you get all the helpers and combinators like <code>map</code> and <code>and_then</code> etc.</p>\n</blockquote>",
        "id": 400183217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1381968378\">PR review comment</a>:</p>\n<blockquote>\n<p>It is surprising to me that the <code>Fact::value</code> constructor doesn't create a <code>Fact::Def</code> variant aka a <code>value(...)</code> fact in the text format. Maybe more reason to use <code>def(...)</code> instead?</p>\n</blockquote>",
        "id": 400183218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699034637
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400221382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056448
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713662343\">PR review</a>.</p>",
        "id": 400221385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056449
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382296199\">PR review comment</a>:</p>\n<blockquote>\n<p>Added the extra loops as signposts for future, good idea! Also expanded the test bodies to include all of i8, i16, i32, i64. The test bodies do have loads with offsets of 0 and 0x10000, so I think that was already covered.</p>\n</blockquote>",
        "id": 400221386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056449
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713662351\">PR review</a>.</p>",
        "id": 400221388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056450
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382296203\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yes, fixed.</p>\n</blockquote>",
        "id": 400221389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056450
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713662358\">PR review</a>.</p>",
        "id": 400221391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056451
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382296210\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 400221392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056452
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713662372\">PR review</a>.</p>",
        "id": 400221397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056453
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382296219\">PR review comment</a>:</p>\n<blockquote>\n<p>Done; <code>i64::try_from</code> actually (it's a <code>u64</code> source value) but now <code>make_compare</code> takes an <code>Option</code> and only unwraps it if PCC is enabled, and PCC only supports memory32.</p>\n</blockquote>",
        "id": 400221398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056453
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382296225\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed in the printer!</p>\n</blockquote>",
        "id": 400221399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056455
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713662378\">PR review</a>.</p>",
        "id": 400221400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056455
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713662386\">PR review</a>.</p>",
        "id": 400221401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056455
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382296231\">PR review comment</a>:</p>\n<blockquote>\n<p>Hopefully clearer after the doc-comment on <code>def</code>; I'll add a note here too.</p>\n</blockquote>",
        "id": 400221402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056455
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713662390\">PR review</a>.</p>",
        "id": 400221407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056456
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382296238\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yes, switched to <code>def</code>; that's what the parser takes, and what should have been here. Thanks!</p>\n</blockquote>",
        "id": 400221408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056457
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#pullrequestreview-1713662393\">PR review</a>.</p>",
        "id": 400221412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056457
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468#discussion_r1382296241\">PR review comment</a>:</p>\n<blockquote>\n<p>Added more to the doc-comment clarifying this!</p>\n</blockquote>",
        "id": 400221413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056458
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400221765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699056639
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400227847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699060171
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400251534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699072806
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400251603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699072839
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7468\">PR #7468</a>.</p>",
        "id": 400258888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699077125
    }
]