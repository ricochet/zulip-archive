[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4827\">PR #4827</a> from <code>limit-trampoline-size</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is a (second?) attempt at improving the generation of<br>\nadapter modules to avoid excessively large functions for fuzz-generated<br>\ninputs.</p>\n<p>The first iteration of adapters simply translated an entire type<br>\ninline per-function. This proved problematic however since the size of<br>\nthe adapter function was on the order of the overall size of a type,<br>\nwhich can be exponential for a type that is otherwise defined in linear<br>\nsize.</p>\n<p>The second iteration of adapters performed a split where memory-based<br>\ntypes would always be translated with individual functions. The theory<br>\nhere was that once a type was memory-based it was large enough to not<br>\nwarrant inline translation in the original function and a separate<br>\noutlined function could be shared and otherwise used to deduplicate<br>\nportions of the original giant function. This again proved problematic,<br>\nhowever, since the splitting heuristic was quite naive and didn't take<br>\ninto account large stack-based types.</p>\n<p>This third iteration in this commit replaces the previous system with a<br>\nsimilar but slightly more general one. Each adapter function now has a<br>\nconcept of fuel which is decremented each time a layer of a type is<br>\ntranslated. When fuel runs out further translations are deferred to<br>\noutlined functions. The fuel counter should hopefully provide a sort of<br>\nreasonable upper bound on the size of a function and the outlined<br>\nfunctions should ideally provide the ability to be called from multiple<br>\nplaces and therefore deduplicate what would otherwise be a massive<br>\nfunction.</p>\n<p>This final iteration is another attempt at guaranteeing that an adapter<br>\nmodule is linear in size with respect to the input type section of the<br>\noriginal module. Additionally this iteration uniformly handles stack and<br>\nmemory-based translations which means that stack-based translations<br>\ncan't go wild in their function size and memory-based translations may<br>\nbenefit slightly from having at least a little bit of inlining<br>\ninternally.</p>\n<p>The immediate impact of this is that the <code>component_api</code> fuzzer seems to<br>\nbe running at a faster rate than before. Otherwise #4825 is sufficient<br>\nto invalidate preexisting fuzz-bugs and this PR is hopefully the final<br>\nnail in the coffin to prevent further timeouts for small inputs cropping<br>\nup.</p>\n<p>Closes #4816</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 296226987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661896303
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4827\">PR #4827</a>.</p>",
        "id": 296227075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661896339
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4827#pullrequestreview-1092213344\">PR review</a>.</p>",
        "id": 296408486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661965359
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4827#pullrequestreview-1092213344\">PR review</a>.</p>",
        "id": 296408487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661965359
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4827#discussion_r959814546\">PR review comment</a>:</p>\n<blockquote>\n<p>Not for this PR or even the immediate future but it might be interesting to look at what types actually appear multiple times in the parameter/result type trees and use that as a heuristic for splitting things out, when you <em>know</em> the helper will be reused.</p>\n</blockquote>",
        "id": 296408488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661965359
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4827\">PR #4827</a>.</p>",
        "id": 296409818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661965787
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4827#pullrequestreview-1092235040\">PR review</a>.</p>",
        "id": 296409942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661965815
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4827#discussion_r959829853\">PR review comment</a>:</p>\n<blockquote>\n<p>Agreed! At some point I'm wondering if this is basically recreating all of LLVM's own inlining heuristics but in a worse way.</p>\n</blockquote>",
        "id": 296409943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661965815
    }
]