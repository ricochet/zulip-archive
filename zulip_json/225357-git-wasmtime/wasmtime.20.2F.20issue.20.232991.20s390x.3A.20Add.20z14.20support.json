[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-862534161\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<p>I was curious so I <a href=\"https://github.com/alexcrichton/wasmtime/runs/2840910786?check_suite_focus=true\">ran the test suite in qemu</a> and I ran into an issue that looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">wasi_cap_std_sync</span>::<span class=\"n\">fd_readdir</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">preopen</span>: <span class=\"s\">\"/tmp/wasi_common_fd_readdirfr5CGv\"</span><span class=\"w\"></span>\n<span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">stderr</span>:\n<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"mi\">0</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"mi\">2</span><span class=\"err\">`</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">fd_readdir</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">76</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n\n<span class=\"o\">===</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">testing</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">fd_readdir</span><span class=\"o\">'</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">exhausted</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n        <span class=\"mi\">0</span>: <span class=\"mh\">0xaafb</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">wasi</span>::<span class=\"n\">stdio</span>::<span class=\"n\">Stderr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Write</span><span class=\"o\">&gt;</span>::<span class=\"n\">is_write_vectored</span>::<span class=\"n\">hf152121ba89ed5c9</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>: <span class=\"mh\">0xa867</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">rust_panic</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span>: <span class=\"mh\">0xa3fd</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">rust_panic_with_hook</span>::<span class=\"n\">hf735cc98c0f3e6f4</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">3</span>: <span class=\"mh\">0x9b35</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">begin_panic_handler</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">hb082d09953c1ceec</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">4</span>: <span class=\"mh\">0x9a76</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_end_short_backtrace</span>::<span class=\"n\">hac58197bca415fd5</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">5</span>: <span class=\"mh\">0xa2a1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">rust_begin_unwind</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">6</span>: <span class=\"mh\">0xff0b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic_fmt</span>::<span class=\"n\">hf8b3045973a2d1f9</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">7</span>: <span class=\"mh\">0x10b73</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">assert_failed</span>::<span class=\"n\">inner</span>::<span class=\"n\">h4a10935a4d4a4d0d</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">8</span>: <span class=\"mh\">0x3581</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">assert_failed</span>::<span class=\"n\">hf88aca872cdb2b11</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">9</span>: <span class=\"mh\">0x167b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">fd_readdir</span>::<span class=\"n\">main</span>::<span class=\"n\">hb00a7e1c801281d4</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">10</span>: <span class=\"mh\">0x2dcf</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span>::<span class=\"n\">hf92d88d850fed84d</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">11</span>: <span class=\"mh\">0x2e06</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">hc83ff37db6c562d6</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">12</span>: <span class=\"mh\">0xa912</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">h3bc712c5a299b4e4</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">13</span>: <span class=\"mh\">0x1ec4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">14</span>:  <span class=\"mh\">0x545</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">15</span>: <span class=\"mh\">0x13c08</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span><span class=\"p\">.</span><span class=\"n\">command_export</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where something seems off there if it's saying that the call-stack is exhausted. Perhaps a qemu bug? Maybe a backend bug? In any case was just curious how qemu would run, although it unfortunately didn't make it to the meat of the tests.</p>\n<p>I was also a little surprised at how slow the compile was, our aarch64 build finishes building tests in ~18m but the s390x tests built in ~27m. This is the speed of the LLVM backend for s390x presumably, so nothing related to Wasmtime, just curious!</p>\n</blockquote>",
        "id": 242907486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623861622
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-862548409\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<p>Note that mainline qemu doesn't quite support z14 yet.  Support has been merged into the qemu s390x maintainer repo (branch s390-next in <a href=\"https://gitlab.com/cohuck/qemu.git\">https://gitlab.com/cohuck/qemu.git</a>) but not yet mainline.  Not sure if this explains this particular crash.</p>\n<blockquote>\n<p>I was also a little surprised at how slow the compile was, our aarch64 build finishes building tests in ~18m but the s390x tests built in ~27m. This is the speed of the LLVM backend for s390x presumably, so nothing related to Wasmtime, just curious!</p>\n</blockquote>\n<p>Is this running as cross-compiler, or running the native LLVM under qemu?  I don't see any particular reason why the s390x back-end should be significantly slower than the aarch64 back-end when running as cross-compiler ...</p>\n</blockquote>",
        "id": 242909826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623862586
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-862550042\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<p>Also, please hold off merging this a bit -- I just noticed that there seems to be bug in the auxv crate that causes getauxval to sometimes return a wrong value so the native platform is mis-detected.  I'm currently testing a fix to just use getauxval from the libc crate, which works correctly (and seems more straightforward anyway).</p>\n</blockquote>",
        "id": 242910018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623862685
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-862552086\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<p>Ah yeah it was using stock qemu 6.0.0, and \"stack overflow\" also happens with illegal instructions, so that would indeed explain that!</p>\n<p>For the slowness, it's LLVM running natively but compiling to s390x. It could also just be variance in GitHub Actions perhaps, but afaik the only thing affecting the speed of compiling the test suite in this case would be the s390x backend in LLVM. In any case though not like something we'll fix here, just something I was curious about.</p>\n</blockquote>",
        "id": 242910416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623862866
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-862556057\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah yeah it was using stock qemu 6.0.0, and \"stack overflow\" also happens with illegal instructions, so that would indeed explain that!</p>\n<p>For the slowness, it's LLVM running natively but compiling to s390x. It could also just be variance in GitHub Actions perhaps, but afaik the only thing affecting the speed of compiling the test suite in this case would be the s390x backend in LLVM. In any case though not like something we'll fix here, just something I was curious about.</p>\n</blockquote>\n<p>Is there a simple way to reproduce this process outside of GitHub actions?   I could have a look ...</p>\n</blockquote>",
        "id": 242911316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623863236
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-862577364\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<p>While not exactly easy one possible way to reproduce is to <a href=\"https://github.com/alexcrichton/wasmtime/runs/2840910786?check_suite_focus=true#step:10:2\">run the same steps locally that CI does</a>, which basically just downloads QEMU, builds it, and then configures some env vars for cargo's build</p>\n</blockquote>",
        "id": 242915802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623865188
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-862615817\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<blockquote>\n<p>Also, please hold off merging this a bit -- I just noticed that there seems to be bug in the auxv crate that causes getauxval to sometimes return a wrong value so the native platform is mis-detected. I'm currently testing a fix to just use getauxval from the libc crate, which works correctly (and seems more straightforward anyway).</p>\n</blockquote>\n<p>OK, this is fixed now.  The current version passes the full test suite on both z14 and z15, and it will indeed use the z15 instructions on the latter.  As far as I can see, this should be good to merge now.   FYI @cfallin .</p>\n</blockquote>",
        "id": 242922807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623868363
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-864206611\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<blockquote>\n<p>While not exactly easy one possible way to reproduce is to <a href=\"https://github.com/alexcrichton/wasmtime/runs/2840910786?check_suite_focus=true#step:10:2\">run the same steps locally that CI does</a>, which basically just downloads QEMU, builds it, and then configures some env vars for cargo's build</p>\n</blockquote>\n<p>Turns out this has nothing to do with qemu, I'm seeing the same failure natively.  This is related to the <code>--features \"test-programs/test_programs\"</code> argument used by <code>./ci/run-tests.sh</code>  -- I hadn't been using this argument in my testing, which means I've apparently never even attempted to executed some of those tests.</p>\n<p>I'll have a look why those tests are failing.<br>\n</p>\n</blockquote>",
        "id": 243194298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624040749
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-865927699\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<p>Turns out this was an endian bug in handling of the <code>Dirent</code> data type: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3016\">https://github.com/bytecodealliance/wasmtime/pull/3016</a></p>\n<p>With this, I can now successfully run <code>./ci/run-tests.sh</code> (at least natively).</p>\n</blockquote>",
        "id": 243505998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624363698
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-866026073\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<p>The trap was originally reported as a stack overflow exhaustion but given the wasm stack that doesn't seem to be the case, but was the trap classification fixed by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3014\">https://github.com/bytecodealliance/wasmtime/pull/3014</a>? I could definitely imagine that switching endiannness would cause some random traps on reads/writes in wasm though...</p>\n</blockquote>",
        "id": 243523460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624371603
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991#issuecomment-866046223\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2991\">issue #2991</a>:</p>\n<blockquote>\n<blockquote>\n<p>The trap was originally reported as a stack overflow exhaustion but given the wasm stack that doesn't seem to be the case, but was the trap classification fixed by #3014? </p>\n</blockquote>\n<p>Looks like this is indeed the case!   I now get <code>wasm trap: unreachable</code> which seems reasonable for a <code>rust_panic</code>.<br>\n</p>\n</blockquote>",
        "id": 243527138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624373057
    }
]