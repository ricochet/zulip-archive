[
    {
        "content": "<p>yurydelendik opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">issue #4315</a>:</p>\n<blockquote>\n<p>While working on the SIMD tests at <a href=\"https://github.com/bytecodealliance/sightglass/pull/189\">https://github.com/bytecodealliance/sightglass/pull/189</a>, I found that this file is not executed properly. The app informs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Size</span>: <span class=\"mi\">400</span><span class=\"n\">x400</span><span class=\"w\"></span>\n<span class=\"n\">ojph</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mh\">0x000300A1</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">ojph_codestream</span><span class=\"p\">.</span><span class=\"n\">cpp</span>:<span class=\"mi\">4067</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">decoding</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">codeblock</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Though expected something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Size</span>: <span class=\"mi\">400</span><span class=\"n\">x400</span><span class=\"w\"></span>\n<span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"mi\">100</span>:\n <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>:  <span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"mi\">35</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"o\">....</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It appears to be running correctly on Node and SM, so I assume it is an issue of correctness. Attaching a compiled benchmark (minus bench_start/_end):</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/8980520/test-case.zip\">test-case.zip</a></p>\n</blockquote>",
        "id": 287380885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656102385
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">issue #4315</a>:</p>\n<blockquote>\n<p>While working on the SIMD tests at <a href=\"https://github.com/bytecodealliance/sightglass/pull/189\">https://github.com/bytecodealliance/sightglass/pull/189</a>, I found that this file is not executed properly. The app informs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Size</span>: <span class=\"mi\">400</span><span class=\"n\">x400</span><span class=\"w\"></span>\n<span class=\"n\">ojph</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mh\">0x000300A1</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">ojph_codestream</span><span class=\"p\">.</span><span class=\"n\">cpp</span>:<span class=\"mi\">4067</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">decoding</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">codeblock</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Though expected something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Size</span>: <span class=\"mi\">400</span><span class=\"n\">x400</span><span class=\"w\"></span>\n<span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"mi\">100</span>:\n <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>:  <span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"mi\">35</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"o\">....</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It appears to be running on Node and SM, so I assume it is an issue of correctness. Attaching the compiled benchmark (minus bench_start/_end):</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/8980520/test-case.zip\">test-case.zip</a></p>\n</blockquote>",
        "id": 287382004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656103029
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">issue #4315</a>:</p>\n<blockquote>\n<p>While working on the SIMD tests at <a href=\"https://github.com/bytecodealliance/sightglass/pull/189\">https://github.com/bytecodealliance/sightglass/pull/189</a>, I found that this file is not executed properly. The app informs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Size</span>: <span class=\"mi\">400</span><span class=\"n\">x400</span><span class=\"w\"></span>\n<span class=\"n\">ojph</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mh\">0x000300A1</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">ojph_codestream</span><span class=\"p\">.</span><span class=\"n\">cpp</span>:<span class=\"mi\">4067</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">decoding</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">codeblock</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Though expected something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Size</span>: <span class=\"mi\">400</span><span class=\"n\">x400</span><span class=\"w\"></span>\n<span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"mi\">100</span>:\n <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>:  <span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"mi\">35</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"o\">....</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It appears to be running on Node and SM, so I assume it is an issue of correctness. Attaching the compiled benchmark (minus bench_start/_end):</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/8980520/test-case.zip\">test-case.zip</a></p>\n<p>P.S. on Intel CPU x64</p>\n</blockquote>",
        "id": 287382077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656103074
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315#issuecomment-1165956260\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">issue #4315</a>:</p>\n<blockquote>\n<p>Also, works on wasmtime for ARM64</p>\n</blockquote>",
        "id": 287387665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656106309
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315#issuecomment-1166185377\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">issue #4315</a>:</p>\n<blockquote>\n<p>I've done some work to narrow this down but unfortunately I'm not being super successful at the moment. My strategy for narrowing this down has been:</p>\n<ul>\n<li>Modify the CLI to print the sha256 of memory after running the wasm</li>\n<li>Modify fuel to get checked before every single instruction instead of just loop headers and function entries</li>\n</ul>\n<p>Next I have a script which runs the binary on aarch64 and x86_64 with a binary-search-of-sorts. This pins down the precise fuel count where with one more fuel the execution differs. My goal here is to find the precise wasm instruction at which execution diverges here. This quickly-ish found results and I started sprinkling \"debug stores\" within the <code>*.wat</code>. Basically I'd take a value of the stack, shove it in a temporary global, store the global to linear memory address 0, and then load the global back onto the stack. The goal here was a quick-and-dirty way of debugging the wasm value stack.</p>\n<p>In doing this I've narrowed this down to function 40 in the input file above. Specifically these two instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"mh\">0x4942</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">V128Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">V128</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mh\">0x4954</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">e</span><span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">I8x16Swizzle</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Unfortunately this <code>v128.const</code> value is not actually going into <code>i8x16.swizzle</code>. With my \"debug store\" inserted between these two instructions it turns out that the value stored in memory is indeed not the <code>v128.const</code> here. Instead some other bit-pattern gets stored in memory and naturally when that gets fed into <code>i8x16.swizzle</code> everything goes awry.</p>\n<p>Other than that though I have now hit a wall and am unable to make progress debugging this. Function 40 is huge and it's tough to explore the disassembly. Using <code>rr</code> I can find the portion of the function that actually creates the value which eventually gets fed into <code>i8x16.swizzle</code>. This _should_ feed in the <code>v128.const</code> value but it is not. Unfortunately I can't figure out how to translate this random snippet of assembly back to the source file.</p>\n<p>I have confirmed, though, that 0.35.0 reproduces this issue so I don't believe this is a problem with recent developments like regalloc2, recent ISLE migrations, or the alias analysis pass added. </p>\n<p>Others who are more familiar with the backend may know more about how to debug this though. IIRC there's some optimizations around constants, constant pools, and trying to not always reify something into a register or something like that, and something may be going awry there. </p>\n<hr>\n<p>... aaaand as I am writing this up I took another look at the definition of <a href=\"https://github.com/bytecodealliance/wasmtime/blob/87007c58393813f0257f710a92006024c4909a67/cranelift/codegen/src/isa/x64/lower.rs#L2537-L2574\">the <code>Swizzle</code> instruction</a>. This looks suspicious, specifically <a href=\"https://github.com/bytecodealliance/wasmtime/blob/87007c58393813f0257f710a92006024c4909a67/cranelift/codegen/src/isa/x64/lower.rs#L2561\">treating the mask as a writable reg</a> since I think in this case it's the mask that's getting corrupted going into the swizzle instruction. </p>\n<p>I added a move from the input to a temporary register and that didn't actually fix the original program but it did surprisingly allow it to make more progress. I think that means there's actually at least two bugs here!</p>\n<p>Doing my bisection again I think I found a much simpler reproduction, namely:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (param v128 v128 i32) (result v128)\n        local.get 0\n        local.get 1\n        local.get 2\n        select\n        ))\n</code></pre></div>\n<p>I don't think that our codegen for the <code>select</code> instruction is correct for v128 values. Namely this produces:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"mi\">85</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"w\">                   </span><span class=\"n\">test</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">6</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">84</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">je</span><span class=\"w\">     </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">+</span><span class=\"mh\">0x10</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">c</span>:       <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">c8</span><span class=\"w\">             </span><span class=\"n\">movss</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">10</span>:       <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">             </span><span class=\"n\">movdqa</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">14</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">17</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">18</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where the <code>movss</code> I don't believe is correct, I think that needs to be <code>movdqa</code> or something sized larger.</p>\n<p>I'm running out of steam for tonight so I think this is as far as I'll get today. I'm actually quite worried that fuzzing hasn't discovered anything in this area. These are somewhat trivial bugs which in theory should be found almost immediately by any halfway decent fuzzing.</p>\n</blockquote>",
        "id": 287409393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656129427
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315#issuecomment-1166198900\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">issue #4315</a>:</p>\n<blockquote>\n<p>Ok I can confirm that with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4317\">https://github.com/bytecodealliance/wasmtime/pull/4317</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4318\">https://github.com/bytecodealliance/wasmtime/pull/4318</a> the original test case now has the same behavior on arm64 and on x86_64</p>\n</blockquote>",
        "id": 287415110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656135932
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315#issuecomment-1167774652\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">issue #4315</a>:</p>\n<blockquote>\n<p>I realize now I forgot to say this earlier but thanks @yurydelendik for taking the time to file this! We'll be making an 0.38.1 release with these fixes soon and a few other fixes for Cranelift (unrelated to this).</p>\n<p>We also plan on filing a CVE about these micompiles because while they don't affect hosts themselves this could affect in-wasm execution which is often just as important in some environments.</p>\n</blockquote>",
        "id": 287624419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656357259
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315#issuecomment-1167939148\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">issue #4315</a>:</p>\n<blockquote>\n<p>I believe everything is now merged so I'm going to close this.</p>\n</blockquote>",
        "id": 287640907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656366130
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">issue #4315</a>:</p>\n<blockquote>\n<p>While working on the SIMD tests at <a href=\"https://github.com/bytecodealliance/sightglass/pull/189\">https://github.com/bytecodealliance/sightglass/pull/189</a>, I found that this file is not executed properly. The app informs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Size</span>: <span class=\"mi\">400</span><span class=\"n\">x400</span><span class=\"w\"></span>\n<span class=\"n\">ojph</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mh\">0x000300A1</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">ojph_codestream</span><span class=\"p\">.</span><span class=\"n\">cpp</span>:<span class=\"mi\">4067</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">decoding</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">codeblock</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Though expected something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Size</span>: <span class=\"mi\">400</span><span class=\"n\">x400</span><span class=\"w\"></span>\n<span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"mi\">100</span>:\n <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>:  <span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"mi\">35</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"o\">....</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It appears to be running on Node and SM, so I assume it is an issue of correctness. Attaching the compiled benchmark (minus bench_start/_end):</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/8980520/test-case.zip\">test-case.zip</a></p>\n<p>P.S. on Intel CPU x64</p>\n</blockquote>",
        "id": 287640909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656366130
    }
]