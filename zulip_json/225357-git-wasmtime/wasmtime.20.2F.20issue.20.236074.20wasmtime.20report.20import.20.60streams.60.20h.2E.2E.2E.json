[
    {
        "content": "<p>Sherlock-Holo opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<p><strong>Note: if you want to report a security issue, please read our <a href=\"https://bytecodealliance.org/security\">security policy</a>!</strong></p>\n<h3>Test Case</h3>\n<h4>wit file</h4>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world http {\n    import get: func(url: string) -&gt; result&lt;string, string&gt;\n    export run: func(url: string) -&gt; result&lt;string, string&gt;\n}\n</code></pre></div>\n<p>rust wasm code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"world\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Runner</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Http</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Runner</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">url</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"wasm response: {resp}\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"c1\">// Ok(\"wasm response: \".to_string() + &amp;resp)</span>\n<span class=\"w\">        </span><span class=\"c1\">// Ok(resp)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export_http</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Runner</span><span class=\"p\">);</span>\n</code></pre></div>\n<h4>rust normal codes</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">async_trait</span>::<span class=\"n\">async_trait</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">bindgen</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span>: <span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Function</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">url</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reqwest</span>::<span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">().</span><span class=\"n\">to_string</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[async_trait]</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HttpImports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">url</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[tokio::main(flavor = </span><span class=\"s\">\"current_thread\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"../target/component.wasm\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">Http</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">http</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Http</span>::<span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">http</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"http://www.example.com\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>I build the rust wasm codes with <code>cargo b -r</code>, the target is set on .cargo/config.toml</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[build]</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasm32-wasi\"</span>\n</code></pre></div>\n<p>then I download the <a href=\"https://github.com/bytecodealliance/preview2-prototyping/releases/download/latest/wasi_snapshot_preview1.reactor.wasm\">https://github.com/bytecodealliance/preview2-prototyping/releases/download/latest/wasi_snapshot_preview1.reactor.wasm</a> and rename it to <code>wasi_snapshot_preview1.wasm</code></p>\n<p>then run <code>wasm-tools component new ../target/wasm32-wasi/release/wasm.wasm -o ../target/component.wasm --adapt ../wasi_snapshot_preview1.wasm</code> to compile the wasm file, no error</p>\n<p>then I run the normal codes, it report error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">streams</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n\n<span class=\"nc\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">instance</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">drop</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n    <span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">nothing</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">39</span>:<span class=\"mi\">10</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>I run <code>wasm-tools component wit ../target/component.wasm</code> to dump the wit file, it shows</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface streams {\n  type input-stream = u32\n\n  type output-stream = u32\n\n  record stream-error {\n  }\n\n  drop-input-stream: func(this: input-stream)\n\n  write: func(this: output-stream, buf: list&lt;u8&gt;) -&gt; result&lt;u64, stream-error&gt;\n\n  drop-output-stream: func(this: output-stream)\n}\n\ninterface filesystem {\n  use self.streams.{output-stream}\n\n  type descriptor = u32\n\n  type filesize = u64\n\n  write-via-stream: func(this: descriptor, offset: filesize) -&gt; output-stream\n\n  append-via-stream: func(this: descriptor) -&gt; output-stream\n\n  drop-descriptor: func(this: descriptor)\n}\n\ninterface environment {\n  get-environment: func() -&gt; list&lt;tuple&lt;string, string&gt;&gt;\n}\n\ninterface exit {\n  exit: func(status: result)\n}\n\ninterface stderr {\n  print: func(message: string)\n}\n\ndefault world component {\n  import streams: self.streams\n  import filesystem: self.filesystem\n  import environment: self.environment\n  import exit: self.exit\n  import stderr: self.stderr\n  import get: func(url: string) -&gt; result&lt;string, string&gt;\n  export run: func(url: string) -&gt; result&lt;string, string&gt;\n}\n</code></pre></div>\n<p>a lot of things, but if I remove the <code>Ok(format!(\"wasm response: {resp}\"))</code> in the rust wasm codes, replace with <code>Ok(resp)</code>, dump again and it will shows</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world component {\n  import get: func(url: string) -&gt; result&lt;string, string&gt;\n  export run: func(url: string) -&gt; result&lt;string, string&gt;\n}\n</code></pre></div>\n<p>it looks like normal</p>\n<h3>Expected Results</h3>\n<p>works well</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime crate 7.0.0</p>\n<p>Operating system: Archlinux</p>\n<p>Architecture: x64<br>\n</p>\n</blockquote>",
        "id": 343318772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679391733
    },
    {
        "content": "<p>Sherlock-Holo labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<p><strong>Note: if you want to report a security issue, please read our <a href=\"https://bytecodealliance.org/security\">security policy</a>!</strong></p>\n<h3>Test Case</h3>\n<h4>wit file</h4>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world http {\n    import get: func(url: string) -&gt; result&lt;string, string&gt;\n    export run: func(url: string) -&gt; result&lt;string, string&gt;\n}\n</code></pre></div>\n<p>rust wasm code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"world\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Runner</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Http</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Runner</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">url</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"wasm response: {resp}\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"c1\">// Ok(\"wasm response: \".to_string() + &amp;resp)</span>\n<span class=\"w\">        </span><span class=\"c1\">// Ok(resp)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export_http</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Runner</span><span class=\"p\">);</span>\n</code></pre></div>\n<h4>rust normal codes</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">async_trait</span>::<span class=\"n\">async_trait</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">bindgen</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span>: <span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Function</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">url</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reqwest</span>::<span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">().</span><span class=\"n\">to_string</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[async_trait]</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HttpImports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">url</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[tokio::main(flavor = </span><span class=\"s\">\"current_thread\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"../target/component.wasm\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">Http</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">http</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Http</span>::<span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">http</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"http://www.example.com\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>I build the rust wasm codes with <code>cargo b -r</code>, the target is set on .cargo/config.toml</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[build]</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasm32-wasi\"</span>\n</code></pre></div>\n<p>then I download the <a href=\"https://github.com/bytecodealliance/preview2-prototyping/releases/download/latest/wasi_snapshot_preview1.reactor.wasm\">https://github.com/bytecodealliance/preview2-prototyping/releases/download/latest/wasi_snapshot_preview1.reactor.wasm</a> and rename it to <code>wasi_snapshot_preview1.wasm</code></p>\n<p>then run <code>wasm-tools component new ../target/wasm32-wasi/release/wasm.wasm -o ../target/component.wasm --adapt ../wasi_snapshot_preview1.wasm</code> to compile the wasm file, no error</p>\n<p>then I run the normal codes, it report error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">streams</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n\n<span class=\"nc\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">instance</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">drop</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n    <span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">nothing</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">39</span>:<span class=\"mi\">10</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>I run <code>wasm-tools component wit ../target/component.wasm</code> to dump the wit file, it shows</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface streams {\n  type input-stream = u32\n\n  type output-stream = u32\n\n  record stream-error {\n  }\n\n  drop-input-stream: func(this: input-stream)\n\n  write: func(this: output-stream, buf: list&lt;u8&gt;) -&gt; result&lt;u64, stream-error&gt;\n\n  drop-output-stream: func(this: output-stream)\n}\n\ninterface filesystem {\n  use self.streams.{output-stream}\n\n  type descriptor = u32\n\n  type filesize = u64\n\n  write-via-stream: func(this: descriptor, offset: filesize) -&gt; output-stream\n\n  append-via-stream: func(this: descriptor) -&gt; output-stream\n\n  drop-descriptor: func(this: descriptor)\n}\n\ninterface environment {\n  get-environment: func() -&gt; list&lt;tuple&lt;string, string&gt;&gt;\n}\n\ninterface exit {\n  exit: func(status: result)\n}\n\ninterface stderr {\n  print: func(message: string)\n}\n\ndefault world component {\n  import streams: self.streams\n  import filesystem: self.filesystem\n  import environment: self.environment\n  import exit: self.exit\n  import stderr: self.stderr\n  import get: func(url: string) -&gt; result&lt;string, string&gt;\n  export run: func(url: string) -&gt; result&lt;string, string&gt;\n}\n</code></pre></div>\n<p>a lot of things, but if I remove the <code>Ok(format!(\"wasm response: {resp}\"))</code> in the rust wasm codes, replace with <code>Ok(resp)</code>, dump again and it will shows</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world component {\n  import get: func(url: string) -&gt; result&lt;string, string&gt;\n  export run: func(url: string) -&gt; result&lt;string, string&gt;\n}\n</code></pre></div>\n<p>it looks like normal</p>\n<h3>Expected Results</h3>\n<p>works well</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime crate 7.0.0</p>\n<p>Operating system: Archlinux</p>\n<p>Architecture: x64<br>\n</p>\n</blockquote>",
        "id": 343318773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679391733
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1477559992\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>I think if you use wasi_snapshot_preview1.wasm you will need to provide an implementation of wasi_snapshot_preview2 on the host side. Wasmtime doesn't have an implementation of this yet afaik.</p>\n</blockquote>",
        "id": 343323135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679393027
    },
    {
        "content": "<p>Sherlock-Holo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1477662356\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>@bjorn3 could you tell me how to add the</p>\n<blockquote>\n<p>implementation of wasi_snapshot_preview2</p>\n</blockquote>\n<p>I try to use the <code>wasmtime::Linker</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_args</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_env</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">wasi_ctx</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>but run still report same error</p>\n</blockquote>",
        "id": 343340907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679397606
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1477746289\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>wasmtime_wasi is an implementation of wasi_snapshot_preview1, not the wasi_snapshot_preview2 you need.</p>\n</blockquote>",
        "id": 343354978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679401368
    },
    {
        "content": "<p>Sherlock-Holo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1477750000\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>so i can't use the component model feature to write normal rust wasm codes, until wasmtime support preview2 ?</p>\n</blockquote>",
        "id": 343355660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679401498
    },
    {
        "content": "<p>Sherlock-Holo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1477753724\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>but why if i return the resp directly, ot can works on wasmtime?</p>\n</blockquote>",
        "id": 343356383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679401671
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1477762584\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<blockquote>\n<p>so i can't use the component model feature to write normal rust wasm codes, until wasmtime support preview2 ?</p>\n</blockquote>\n<p>Yeah, using wasi with wasm components requires wasi preview2. I just found that <a href=\"https://github.com/bytecodealliance/preview2-prototyping\">https://github.com/bytecodealliance/preview2-prototyping</a> has host support for wasi preview2 in the host/ directory. Be aware that it depends on a specific commit of wasmtime, so you will need to specify the exact same version of wasmtime: <a href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/b4eb2043b165971820e60f077076c9484de283ed/host/Cargo.toml#L14\">https://github.com/bytecodealliance/preview2-prototyping/blob/b4eb2043b165971820e60f077076c9484de283ed/host/Cargo.toml#L14</a></p>\n<blockquote>\n<p>but why if i return the resp directly, ot can works on wasmtime?</p>\n</blockquote>\n<p>The wasi_snapshot_preview1.wasm adapter probably got skipped due to the inner wasm module not needing any of the wasi methods when directly returning the response. Printing the response requires wasi and thus the wasi_snapshot_preview1 -&gt; wasi_snapshot_preview2 adapter and in turn means the final wasm component needs wasi_snapshot_preview2.</p>\n</blockquote>",
        "id": 343358083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679402091
    },
    {
        "content": "<p>Sherlock-Holo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1478822253\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>I change to<br>\n<code>wasmtime = { git = \"https://github.com/bytecodealliance/wasmtime\", rev = \"5ae8575296d5b524cde42ad10badf8c89945105a\", features = [\"component-model\"] }</code><br>\nbut still report error</p>\n<blockquote>\n<p>thread 'main' panicked at 'called <code>Result::unwrap()</code> on an <code>Err</code> value: import <code>streams</code> has the wrong type</p>\n<p>Caused by:<br>\n    0: instance export <code>drop-input-stream</code> has the wrong type<br>\n    1: expected func found nothing', runtime/src/main.rs:42:10<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace</p>\n</blockquote>\n<p>anything I miss?</p>\n</blockquote>",
        "id": 343562112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679450768
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1478897816\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>are you using the preview1.wasm adapter and host crate from the same revision of preview2-prototyping? use the host crate's <code>command::add_to_linker</code> on your <code>wasmtime::component::Linker</code> in order to provide the <code>drop-import-stream</code> export func that is reported missing there</p>\n</blockquote>",
        "id": 343573370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679458620
    },
    {
        "content": "<p>Sherlock-Holo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1479025653\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>I change the Cargo.toml to</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"runtime\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n<span class=\"c1\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">clap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"4\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"derive\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">tokio</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"rt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"macros\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"time\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">reqwest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.11\"</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"7\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"component-model\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"c1\">#wasmtime = { git = \"https://github.com/bytecodealliance/wasmtime\", rev = \"5ae8575296d5b524cde42ad10badf8c89945105a\", features = [\"component-model\"] }</span>\n<span class=\"c1\">#wasmtime = { git = \"https://github.com/bytecodealliance/wasmtime\", branch = \"main\", features = [\"component-model\"] }</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/preview2-prototyping\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasi-cap-std-sync</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/preview2-prototyping\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">async-trait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1\"</span>\n</code></pre></div>\n<p>and add <code> command::add_to_linker(&amp;mut linker, |state: &amp;mut Function| &amp;mut state.wasi_ctx).unwrap();</code>, it works!</p>\n<p>thanks for your help~</p>\n</blockquote>",
        "id": 343591930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679469384
    },
    {
        "content": "<p>Sherlock-Holo closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<p><strong>Note: if you want to report a security issue, please read our <a href=\"https://bytecodealliance.org/security\">security policy</a>!</strong></p>\n<h3>Test Case</h3>\n<h4>wit file</h4>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world http {\n    import get: func(url: string) -&gt; result&lt;string, string&gt;\n    export run: func(url: string) -&gt; result&lt;string, string&gt;\n}\n</code></pre></div>\n<p>rust wasm code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"world\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Runner</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Http</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Runner</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">url</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"wasm response: {resp}\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"c1\">// Ok(\"wasm response: \".to_string() + &amp;resp)</span>\n<span class=\"w\">        </span><span class=\"c1\">// Ok(resp)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export_http</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Runner</span><span class=\"p\">);</span>\n</code></pre></div>\n<h4>rust normal codes</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">async_trait</span>::<span class=\"n\">async_trait</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">bindgen</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span>: <span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Function</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">url</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reqwest</span>::<span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">().</span><span class=\"n\">to_string</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[async_trait]</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HttpImports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">url</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[tokio::main(flavor = </span><span class=\"s\">\"current_thread\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"../target/component.wasm\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">Http</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">http</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Http</span>::<span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">http</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"http://www.example.com\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>I build the rust wasm codes with <code>cargo b -r</code>, the target is set on .cargo/config.toml</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[build]</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasm32-wasi\"</span>\n</code></pre></div>\n<p>then I download the <a href=\"https://github.com/bytecodealliance/preview2-prototyping/releases/download/latest/wasi_snapshot_preview1.reactor.wasm\">https://github.com/bytecodealliance/preview2-prototyping/releases/download/latest/wasi_snapshot_preview1.reactor.wasm</a> and rename it to <code>wasi_snapshot_preview1.wasm</code></p>\n<p>then run <code>wasm-tools component new ../target/wasm32-wasi/release/wasm.wasm -o ../target/component.wasm --adapt ../wasi_snapshot_preview1.wasm</code> to compile the wasm file, no error</p>\n<p>then I run the normal codes, it report error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">streams</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n\n<span class=\"nc\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">instance</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">drop</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n    <span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">nothing</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">39</span>:<span class=\"mi\">10</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>I run <code>wasm-tools component wit ../target/component.wasm</code> to dump the wit file, it shows</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface streams {\n  type input-stream = u32\n\n  type output-stream = u32\n\n  record stream-error {\n  }\n\n  drop-input-stream: func(this: input-stream)\n\n  write: func(this: output-stream, buf: list&lt;u8&gt;) -&gt; result&lt;u64, stream-error&gt;\n\n  drop-output-stream: func(this: output-stream)\n}\n\ninterface filesystem {\n  use self.streams.{output-stream}\n\n  type descriptor = u32\n\n  type filesize = u64\n\n  write-via-stream: func(this: descriptor, offset: filesize) -&gt; output-stream\n\n  append-via-stream: func(this: descriptor) -&gt; output-stream\n\n  drop-descriptor: func(this: descriptor)\n}\n\ninterface environment {\n  get-environment: func() -&gt; list&lt;tuple&lt;string, string&gt;&gt;\n}\n\ninterface exit {\n  exit: func(status: result)\n}\n\ninterface stderr {\n  print: func(message: string)\n}\n\ndefault world component {\n  import streams: self.streams\n  import filesystem: self.filesystem\n  import environment: self.environment\n  import exit: self.exit\n  import stderr: self.stderr\n  import get: func(url: string) -&gt; result&lt;string, string&gt;\n  export run: func(url: string) -&gt; result&lt;string, string&gt;\n}\n</code></pre></div>\n<p>a lot of things, but if I remove the <code>Ok(format!(\"wasm response: {resp}\"))</code> in the rust wasm codes, replace with <code>Ok(resp)</code>, dump again and it will shows</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world component {\n  import get: func(url: string) -&gt; result&lt;string, string&gt;\n  export run: func(url: string) -&gt; result&lt;string, string&gt;\n}\n</code></pre></div>\n<p>it looks like normal</p>\n<h3>Expected Results</h3>\n<p>works well</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime crate 7.0.0</p>\n<p>Operating system: Archlinux</p>\n<p>Architecture: x64<br>\n</p>\n</blockquote>",
        "id": 343601271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679472736
    },
    {
        "content": "<p>DougAnderson444 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074#issuecomment-1581410083\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6074\">issue #6074</a>:</p>\n<blockquote>\n<p>I am still seeing this error, noting that a few things have changed since March</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Error:<span class=\"w\"> </span>import<span class=\"w\"> </span><span class=\"sb\">`</span>wasi:io/streams<span class=\"sb\">`</span><span class=\"w\"> </span>has<span class=\"w\"> </span>the<span class=\"w\"> </span>wrong<span class=\"w\"> </span><span class=\"nb\">type</span>\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span><span class=\"m\">0</span>:<span class=\"w\"> </span>instance<span class=\"w\"> </span><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"sb\">`</span>drop-input-stream<span class=\"sb\">`</span><span class=\"w\"> </span>has<span class=\"w\"> </span>the<span class=\"w\"> </span>wrong<span class=\"w\"> </span><span class=\"nb\">type</span>\n<span class=\"w\">    </span><span class=\"m\">1</span>:<span class=\"w\"> </span>expected<span class=\"w\"> </span>func<span class=\"w\"> </span>found<span class=\"w\"> </span>nothing\n</code></pre></div>\n<p>1) First I used <code>--adapt</code> as per <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/crates/wasi-preview1-component-adapter\">the instructions</a></p>\n<p>2) Next I also see that <code>preview2-prototyping</code> moved to <code>crates/wasi-preview1-component-adapter</code> so I also tried</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># Cargo.toml</span>\n<span class=\"k\">[dev-dependencies]</span>\n<span class=\"n\">wasi-preview1-component-adapter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/wasmtime\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default-features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"s\">\"command\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>...in order to use the <code>command::add_to_linker</code> move, but the <code>feature</code> selection doesn't seem to be working as <code>command</code> isn't available?</p>\n</blockquote>",
        "id": 364380837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686167108
    }
]