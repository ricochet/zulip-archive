[
    {
        "content": "<p>avanhatt opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">issue #5903</a>:</p>\n<blockquote>\n<p>Our prototype verifier seems to have found a completeness/performance (not correctness) bug in the handling of some narrow immediate values in <code>aarch64</code>. </p>\n<p><code>aarch64</code> has the following rules that check if the _negated_ value of a constant fits in an immediate (<code>Imm12</code>), doing a corresponding switch between add and subtract:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">an</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">add_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>These rules should work for all <code>fits_in_64</code> types (i8, i16, i32, i64), but they seem to only work as intended for i64 (they aren't stricly needed for i8, since the versions of these rules without negation trigger there since i8 values always fit in <code>Imm12</code>).</p>\n<p>In particular, our prototype verifier found that for i16 and i32, these rules _only_ apply if the operand extracted with <code>imm12_from_negated_value</code> is exactly 0, rather than values in the range Cranelift lowers to <code>Imm12</code>: constants with negated values <code>val</code>:  <code>(val &lt; 0xfff) || (val &lt; 0xfff_000 &amp;&amp; (val &amp; 0xfff == 0))</code>. </p>\n<p>For example, adding a constant -1 to a value should always be able to be lowered to subtracting an immediate 1 from the value, but as shown in the test cases below, clif only uses <code>sub</code> for i8 and i64 in this case and otherwise keeps a <code>mov</code> and <code>add</code>. </p>\n<h3>What I think is the bug</h3>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700\">https://github.com/bytecodealliance/wasmtime/issues/5700</a>, Clif semantics are that narrow (i8, i64, i32) <code>iconst</code> are stored in an underlying <code>u64</code> that is zero-extended, not sign-extended, from the narrow bits. </p>\n<p><code>imm12_from_negated_value</code> negates this zero-extended value as an i64 then checks whether that fits into an immediate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">imm12_from_negated_u64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Imm12</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Imm12</span>::<span class=\"n\">maybe_from_u64</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">).</span><span class=\"n\">wrapping_neg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Any narrow negative constant, after being zero extended, has left-filled zeros, so negating the value no longer produces a constant that is unsigned <code>&lt; 0xfff</code> or <code>&lt; 0xfff_000</code>. </p>\n<p>When handling narrow iconst values, <code>imm12_from_negated_value</code> should negate the narrow value then zero extend in this case. In general, ISLE terms operating on the <code>u64</code> may need to see the <code>u32</code>, <code>u16</code>, etc, instead.  I'll work on a PR for at least fixing <code>imm12_from_negated_value</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<p><code>imm12-64.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Because the <code>.clif</code> parser currently sign-extends instead of zero-extends values, for narrow constants I use the decimal -1 value as an unsigned u64 to construct the iconst:</p>\n<p><code>imm12-32.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">4294967295</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>This function gets rewritten to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>\n<span class=\"n\">ret</span>\n</code></pre></div>\n<p>in all cases.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">209</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\">             </span><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">226</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">159</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"nc\">e2</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xffff</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">fc</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\">      </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">small</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: c4a2c1e81893a41b363ba135b9fd79fb77eb0531</p>\n<p>Operating system: macOS</p>\n<p>Architecture: aarch64</p>\n</blockquote>",
        "id": 338912560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677692961
    },
    {
        "content": "<p>avanhatt labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">issue #5903</a>:</p>\n<blockquote>\n<p>Our prototype verifier seems to have found a completeness/performance (not correctness) bug in the handling of some narrow immediate values in <code>aarch64</code>. </p>\n<p><code>aarch64</code> has the following rules that check if the _negated_ value of a constant fits in an immediate (<code>Imm12</code>), doing a corresponding switch between add and subtract:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">an</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">add_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>These rules should work for all <code>fits_in_64</code> types (i8, i16, i32, i64), but they seem to only work as intended for i64 (they aren't stricly needed for i8, since the versions of these rules without negation trigger there since i8 values always fit in <code>Imm12</code>).</p>\n<p>In particular, our prototype verifier found that for i16 and i32, these rules _only_ apply if the operand extracted with <code>imm12_from_negated_value</code> is exactly 0, rather than values in the range Cranelift lowers to <code>Imm12</code>: constants with negated values <code>val</code>:  <code>(val &lt; 0xfff) || (val &lt; 0xfff_000 &amp;&amp; (val &amp; 0xfff == 0))</code>. </p>\n<p>For example, adding a constant -1 to a value should always be able to be lowered to subtracting an immediate 1 from the value, but as shown in the test cases below, clif only uses <code>sub</code> for i8 and i64 in this case and otherwise keeps a <code>mov</code> and <code>add</code>. </p>\n<h3>What I think is the bug</h3>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700\">https://github.com/bytecodealliance/wasmtime/issues/5700</a>, Clif semantics are that narrow (i8, i64, i32) <code>iconst</code> are stored in an underlying <code>u64</code> that is zero-extended, not sign-extended, from the narrow bits. </p>\n<p><code>imm12_from_negated_value</code> negates this zero-extended value as an i64 then checks whether that fits into an immediate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">imm12_from_negated_u64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Imm12</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Imm12</span>::<span class=\"n\">maybe_from_u64</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">).</span><span class=\"n\">wrapping_neg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Any narrow negative constant, after being zero extended, has left-filled zeros, so negating the value no longer produces a constant that is unsigned <code>&lt; 0xfff</code> or <code>&lt; 0xfff_000</code>. </p>\n<p>When handling narrow iconst values, <code>imm12_from_negated_value</code> should negate the narrow value then zero extend in this case. In general, ISLE terms operating on the <code>u64</code> may need to see the <code>u32</code>, <code>u16</code>, etc, instead.  I'll work on a PR for at least fixing <code>imm12_from_negated_value</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<p><code>imm12-64.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Because the <code>.clif</code> parser currently sign-extends instead of zero-extends values, for narrow constants I use the decimal -1 value as an unsigned u64 to construct the iconst:</p>\n<p><code>imm12-32.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">4294967295</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>This function gets rewritten to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>\n<span class=\"n\">ret</span>\n</code></pre></div>\n<p>in all cases.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">209</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\">             </span><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">226</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">159</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"nc\">e2</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xffff</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">fc</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\">      </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">small</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: c4a2c1e81893a41b363ba135b9fd79fb77eb0531</p>\n<p>Operating system: macOS</p>\n<p>Architecture: aarch64</p>\n</blockquote>",
        "id": 338912561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677692961
    },
    {
        "content": "<p>avanhatt labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">issue #5903</a>:</p>\n<blockquote>\n<p>Our prototype verifier seems to have found a completeness/performance (not correctness) bug in the handling of some narrow immediate values in <code>aarch64</code>. </p>\n<p><code>aarch64</code> has the following rules that check if the _negated_ value of a constant fits in an immediate (<code>Imm12</code>), doing a corresponding switch between add and subtract:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">an</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">add_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>These rules should work for all <code>fits_in_64</code> types (i8, i16, i32, i64), but they seem to only work as intended for i64 (they aren't stricly needed for i8, since the versions of these rules without negation trigger there since i8 values always fit in <code>Imm12</code>).</p>\n<p>In particular, our prototype verifier found that for i16 and i32, these rules _only_ apply if the operand extracted with <code>imm12_from_negated_value</code> is exactly 0, rather than values in the range Cranelift lowers to <code>Imm12</code>: constants with negated values <code>val</code>:  <code>(val &lt; 0xfff) || (val &lt; 0xfff_000 &amp;&amp; (val &amp; 0xfff == 0))</code>. </p>\n<p>For example, adding a constant -1 to a value should always be able to be lowered to subtracting an immediate 1 from the value, but as shown in the test cases below, clif only uses <code>sub</code> for i8 and i64 in this case and otherwise keeps a <code>mov</code> and <code>add</code>. </p>\n<h3>What I think is the bug</h3>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700\">https://github.com/bytecodealliance/wasmtime/issues/5700</a>, Clif semantics are that narrow (i8, i64, i32) <code>iconst</code> are stored in an underlying <code>u64</code> that is zero-extended, not sign-extended, from the narrow bits. </p>\n<p><code>imm12_from_negated_value</code> negates this zero-extended value as an i64 then checks whether that fits into an immediate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">imm12_from_negated_u64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Imm12</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Imm12</span>::<span class=\"n\">maybe_from_u64</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">).</span><span class=\"n\">wrapping_neg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Any narrow negative constant, after being zero extended, has left-filled zeros, so negating the value no longer produces a constant that is unsigned <code>&lt; 0xfff</code> or <code>&lt; 0xfff_000</code>. </p>\n<p>When handling narrow iconst values, <code>imm12_from_negated_value</code> should negate the narrow value then zero extend in this case. In general, ISLE terms operating on the <code>u64</code> may need to see the <code>u32</code>, <code>u16</code>, etc, instead.  I'll work on a PR for at least fixing <code>imm12_from_negated_value</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<p><code>imm12-64.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Because the <code>.clif</code> parser currently sign-extends instead of zero-extends values, for narrow constants I use the decimal -1 value as an unsigned u64 to construct the iconst:</p>\n<p><code>imm12-32.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">4294967295</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>This function gets rewritten to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>\n<span class=\"n\">ret</span>\n</code></pre></div>\n<p>in all cases.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">209</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\">             </span><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">226</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">159</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"nc\">e2</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xffff</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">fc</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\">      </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">small</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: c4a2c1e81893a41b363ba135b9fd79fb77eb0531</p>\n<p>Operating system: macOS</p>\n<p>Architecture: aarch64</p>\n</blockquote>",
        "id": 338912565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677692962
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903#issuecomment-1450657675\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">issue #5903</a>:</p>\n<blockquote>\n<p>I agree that this is a bug and I think you've diagnosed the root cause correctly. Thanks for the example inputs, which illustrate the bug very clearly! These would make great precise-output filetests in <code>cranelift/filetests/filetests/isa/aarch64/</code>, if you'd like to open a PR for that: we'd test for the current sub-optimal behavior for now, and then when this is fixed we'll see the tests \"fail\", highlighting that the fix worked.</p>\n<p>I guess <code>imm12_from_negated_value</code> should be a partial constructor, not an extractor, so it can use <code>i64_sextend_imm64</code> and pass the value's type through. If we add an <code>i64_neg</code> constructor to the prelude, then I think we can get rid of <code>imm12_from_negated_u64</code> and write this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">partial</span><span class=\"w\"> </span><span class=\"nv\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Imm12</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">has_type</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">imm12_from_u64</span><span class=\"w\"> </span><span class=\"nv\">imm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">i64_as_u64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">i64_neg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">i64_sextend_imm64</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))))</span>\n<span class=\"w\">  </span><span class=\"nv\">imm</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I think we also need to implement #3059 so we can have some confidence that we're treating high bits consistently everywhere.</p>\n<p>If anyone wants to pick this up I'm happy to discuss in more detail how to fix it!</p>\n</blockquote>",
        "id": 338923048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677695605
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">issue #5903</a>:</p>\n<blockquote>\n<p>Our prototype verifier seems to have found a completeness/performance (not correctness) bug in the handling of some narrow immediate values in <code>aarch64</code>. </p>\n<p><code>aarch64</code> has the following rules that check if the _negated_ value of a constant fits in an immediate (<code>Imm12</code>), doing a corresponding switch between add and subtract:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">an</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">add_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>These rules should work for all <code>fits_in_64</code> types (i8, i16, i32, i64), but they seem to only work as intended for i64 (they aren't stricly needed for i8, since the versions of these rules without negation trigger there since i8 values always fit in <code>Imm12</code>).</p>\n<p>In particular, our prototype verifier found that for i16 and i32, these rules _only_ apply if the operand extracted with <code>imm12_from_negated_value</code> is exactly 0, rather than values in the range Cranelift lowers to <code>Imm12</code>: constants with negated values <code>val</code>:  <code>(val &lt; 0xfff) || (val &lt; 0xfff_000 &amp;&amp; (val &amp; 0xfff == 0))</code>. </p>\n<p>For example, adding a constant -1 to a value should always be able to be lowered to subtracting an immediate 1 from the value, but as shown in the test cases below, clif only uses <code>sub</code> for i8 and i64 in this case and otherwise keeps a <code>mov</code> and <code>add</code>. </p>\n<h3>What I think is the bug</h3>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700\">https://github.com/bytecodealliance/wasmtime/issues/5700</a>, Clif semantics are that narrow (i8, i64, i32) <code>iconst</code> are stored in an underlying <code>u64</code> that is zero-extended, not sign-extended, from the narrow bits. </p>\n<p><code>imm12_from_negated_value</code> negates this zero-extended value as an i64 then checks whether that fits into an immediate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">imm12_from_negated_u64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Imm12</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Imm12</span>::<span class=\"n\">maybe_from_u64</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">).</span><span class=\"n\">wrapping_neg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Any narrow negative constant, after being zero extended, has left-filled zeros, so negating the value no longer produces a constant that is unsigned <code>&lt; 0xfff</code> or <code>&lt; 0xfff_000</code>. </p>\n<p>When handling narrow iconst values, <code>imm12_from_negated_value</code> should negate the narrow value then zero extend in this case. In general, ISLE terms operating on the <code>u64</code> may need to see the <code>u32</code>, <code>u16</code>, etc, instead.  I'll work on a PR for at least fixing <code>imm12_from_negated_value</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<p><code>imm12-64.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Because the <code>.clif</code> parser currently sign-extends instead of zero-extends values, for narrow constants I use the decimal -1 value as an unsigned u64 to construct the iconst:</p>\n<p><code>imm12-32.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">4294967295</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>This function gets rewritten to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>\n<span class=\"n\">ret</span>\n</code></pre></div>\n<p>in all cases.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">209</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\">             </span><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">226</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">159</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"nc\">e2</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xffff</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">fc</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\">      </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">small</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: c4a2c1e81893a41b363ba135b9fd79fb77eb0531</p>\n<p>Operating system: macOS</p>\n<p>Architecture: aarch64</p>\n</blockquote>",
        "id": 338923099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677695620
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">issue #5903</a>:</p>\n<blockquote>\n<p>Our prototype verifier seems to have found a completeness/performance (not correctness) bug in the handling of some narrow immediate values in <code>aarch64</code>. </p>\n<p><code>aarch64</code> has the following rules that check if the _negated_ value of a constant fits in an immediate (<code>Imm12</code>), doing a corresponding switch between add and subtract:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">an</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">add_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>These rules should work for all <code>fits_in_64</code> types (i8, i16, i32, i64), but they seem to only work as intended for i64 (they aren't stricly needed for i8, since the versions of these rules without negation trigger there since i8 values always fit in <code>Imm12</code>).</p>\n<p>In particular, our prototype verifier found that for i16 and i32, these rules _only_ apply if the operand extracted with <code>imm12_from_negated_value</code> is exactly 0, rather than values in the range Cranelift lowers to <code>Imm12</code>: constants with negated values <code>val</code>:  <code>(val &lt; 0xfff) || (val &lt; 0xfff_000 &amp;&amp; (val &amp; 0xfff == 0))</code>. </p>\n<p>For example, adding a constant -1 to a value should always be able to be lowered to subtracting an immediate 1 from the value, but as shown in the test cases below, clif only uses <code>sub</code> for i8 and i64 in this case and otherwise keeps a <code>mov</code> and <code>add</code>. </p>\n<h3>What I think is the bug</h3>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700\">https://github.com/bytecodealliance/wasmtime/issues/5700</a>, Clif semantics are that narrow (i8, i64, i32) <code>iconst</code> are stored in an underlying <code>u64</code> that is zero-extended, not sign-extended, from the narrow bits. </p>\n<p><code>imm12_from_negated_value</code> negates this zero-extended value as an i64 then checks whether that fits into an immediate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">imm12_from_negated_u64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Imm12</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Imm12</span>::<span class=\"n\">maybe_from_u64</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">).</span><span class=\"n\">wrapping_neg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Any narrow negative constant, after being zero extended, has left-filled zeros, so negating the value no longer produces a constant that is unsigned <code>&lt; 0xfff</code> or <code>&lt; 0xfff_000</code>. </p>\n<p>When handling narrow iconst values, <code>imm12_from_negated_value</code> should negate the narrow value then zero extend in this case. In general, ISLE terms operating on the <code>u64</code> may need to see the <code>u32</code>, <code>u16</code>, etc, instead.  I'll work on a PR for at least fixing <code>imm12_from_negated_value</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<p><code>imm12-64.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Because the <code>.clif</code> parser currently sign-extends instead of zero-extends values, for narrow constants I use the decimal -1 value as an unsigned u64 to construct the iconst:</p>\n<p><code>imm12-32.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">4294967295</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>This function gets rewritten to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>\n<span class=\"n\">ret</span>\n</code></pre></div>\n<p>in all cases.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">209</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\">             </span><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">226</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">159</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"nc\">e2</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xffff</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">fc</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\">      </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">small</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: c4a2c1e81893a41b363ba135b9fd79fb77eb0531</p>\n<p>Operating system: macOS</p>\n<p>Architecture: aarch64</p>\n</blockquote>",
        "id": 338923101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677695620
    },
    {
        "content": "<p>avanhatt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903#issuecomment-1450747827\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">issue #5903</a>:</p>\n<blockquote>\n<p>I'll open a PR for adding these as file tests, and try out the change @jameysharp suggested to use <code>i64_sextend_imm64</code>.</p>\n<p>@jameysharp, do you think that the change to the rule shouldn't land until <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">https://github.com/bytecodealliance/wasmtime/issues/3059</a> changes? Or just that this is more motivation to address #3059?</p>\n</blockquote>",
        "id": 338938996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677699660
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903#issuecomment-1450802092\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">issue #5903</a>:</p>\n<blockquote>\n<p>I had to think about that question, but my conclusion is that this is only more motivation to address #3059 and maybe find more cases like this. Since the <code>i64_sextend_imm64</code> constructor entirely ignores the upper bits, if we start using that in these rules then these rules won't care whether the CLIF verifier checks this property or not.</p>\n</blockquote>",
        "id": 338948272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677702419
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">issue #5903</a>:</p>\n<blockquote>\n<p>Our prototype verifier seems to have found a completeness/performance (not correctness) bug in the handling of some narrow immediate values in <code>aarch64</code>. </p>\n<p><code>aarch64</code> has the following rules that check if the _negated_ value of a constant fits in an immediate (<code>Imm12</code>), doing a corresponding switch between add and subtract:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">an</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">add_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">special</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">addition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">subtraction</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">fits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>These rules should work for all <code>fits_in_64</code> types (i8, i16, i32, i64), but they seem to only work as intended for i64 (they aren't stricly needed for i8, since the versions of these rules without negation trigger there since i8 values always fit in <code>Imm12</code>).</p>\n<p>In particular, our prototype verifier found that for i16 and i32, these rules _only_ apply if the operand extracted with <code>imm12_from_negated_value</code> is exactly 0, rather than values in the range Cranelift lowers to <code>Imm12</code>: constants with negated values <code>val</code>:  <code>(val &lt; 0xfff) || (val &lt; 0xfff_000 &amp;&amp; (val &amp; 0xfff == 0))</code>. </p>\n<p>For example, adding a constant -1 to a value should always be able to be lowered to subtracting an immediate 1 from the value, but as shown in the test cases below, clif only uses <code>sub</code> for i8 and i64 in this case and otherwise keeps a <code>mov</code> and <code>add</code>. </p>\n<h3>What I think is the bug</h3>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700\">https://github.com/bytecodealliance/wasmtime/issues/5700</a>, Clif semantics are that narrow (i8, i64, i32) <code>iconst</code> are stored in an underlying <code>u64</code> that is zero-extended, not sign-extended, from the narrow bits. </p>\n<p><code>imm12_from_negated_value</code> negates this zero-extended value as an i64 then checks whether that fits into an immediate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">imm12_from_negated_u64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Imm12</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Imm12</span>::<span class=\"n\">maybe_from_u64</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">).</span><span class=\"n\">wrapping_neg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Any narrow negative constant, after being zero extended, has left-filled zeros, so negating the value no longer produces a constant that is unsigned <code>&lt; 0xfff</code> or <code>&lt; 0xfff_000</code>. </p>\n<p>When handling narrow iconst values, <code>imm12_from_negated_value</code> should negate the narrow value then zero extend in this case. In general, ISLE terms operating on the <code>u64</code> may need to see the <code>u32</code>, <code>u16</code>, etc, instead.  I'll work on a PR for at least fixing <code>imm12_from_negated_value</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<p><code>imm12-64.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Because the <code>.clif</code> parser currently sign-extends instead of zero-extends values, for narrow constants I use the decimal -1 value as an unsigned u64 to construct the iconst:</p>\n<p><code>imm12-32.clif</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">4294967295</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>This function gets rewritten to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>\n<span class=\"n\">ret</span>\n</code></pre></div>\n<p>in all cases.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">64.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">209</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\">             </span><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">32.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">16.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">226</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">159</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"nc\">e2</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xffff</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w2</span><span class=\"w\">         </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">immediate</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"o\">-</span><span class=\"mf\">8.</span><span class=\"n\">clif</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">fc</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\">      </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">immediate</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">small</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: c4a2c1e81893a41b363ba135b9fd79fb77eb0531</p>\n<p>Operating system: macOS</p>\n<p>Architecture: aarch64</p>\n</blockquote>",
        "id": 343505269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679428095
    }
]