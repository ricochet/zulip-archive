[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>:</p>\n<blockquote>\n<p>(Stacked on #5380.)</p>\n<p>This work rewrites the \"egraph\"-based optimization framework in<br>\nCranelift to operate on aegraphs (acyclic egraphs) represented in the<br>\nCLIF itself rather than as a separate data structure to which and from<br>\nwhich we translate the CLIF.</p>\n<p>The basic idea is to add a new kind of value, a \"union\", that is like an<br>\nalias but refers to two other values rather than one.  This allows us to<br>\nrepresent an eclass of enodes (values) as a tree. The union node allows<br>\nfor a value to have <em>multiple representations</em>: either constituent value<br>\ncould be used, and (in well-formed CLIF produced by correct<br>\noptimization rules) they must be equivalent.</p>\n<p>Like the old egraph infrastructure, we take advantage of acyclicity and<br>\neager rule application to do optimization in a single pass. Like before,<br>\nwe integrate GVN (during the optimization pass) and LICM (during<br>\nelaboration).</p>\n<p>Unlike the old egraph infrastructure, everything stays in the<br>\nDataFlowGraph. \"Pure\" enodes are represented as instructions that have<br>\nvalues attached, but that are not placed into the function layout. When<br>\nentering \"egraph\" form, we remove them from the layout while optimizing.<br>\nWhen leaving \"egraph\" form, during elaboration, we can place an<br>\ninstruction back into the layout the first time we elaborate the enode;<br>\nif we elaborate it more than once, we clone the instruction.</p>\n<p>The implementation performs two passes overall:</p>\n<ul>\n<li>\n<p>One, a forward pass in RPO (to see defs before uses), that (i) removes<br>\n  \"pure\" instructions from the layout and (ii) optimizes as it goes. As<br>\n  before, we eagerly optimize, so we form the entire union of optimized<br>\n  forms of a value before we see any uses of that value. This lets us<br>\n  rewrite uses to use the most \"up-to-date\" form of the value and<br>\n  canonicalize and optimize that form.</p>\n<p>The eager rewriting and acyclic representation make each other work<br>\n(we could not eagerly rewrite if there were cycles; and acyclicity<br>\ndoes not miss optimization opportunities only because the first time<br>\nwe introduce a value, we immediately produce its \"best\" form). This<br>\ndesign choice is also what allows us to avoid the \"parent pointers\"<br>\nand fixpoint loop of traditional egraphs.</p>\n<p>This forward optimization pass keeps a scoped hashmap to \"intern\"<br>\nnodes (thus performing GVN), and also interleaves on a per-instruction<br>\nlevel with alias analysis. The interleaving with alias analysis allows<br>\nalias analysis to see the most optimized form of each address (so it<br>\ncan see equivalences), and allows the next value to see any<br>\nequivalences (reuses of loads or stored values) that alias analysis<br>\nuncovers.</p>\n</li>\n<li>\n<p>Two, a forward pass in domtree preorder, that \"elaborates\" pure enodes<br>\n  back into the layout, possibly in multiple places if needed. This<br>\n  tracks the loop nest and hoists nodes as needed, performing LICM as it<br>\n  goes. Note that by doing this in forward order, we avoid the<br>\n  \"fixpoint\" that traditional LICM needs: we hoist a def before its<br>\n  uses, so when we place a node, we place it in the right place the<br>\n  first time rather than moving later.</p>\n</li>\n</ul>\n<p>This PR replaces the old (a)egraph implementation. It removes both the<br>\ncranelift-egraph crate and the logic in cranelift-codegen that uses it.</p>\n<p>On <code>spidermonkey.wasm</code> running a simple recursive Fibonacci<br>\nmicrobenchmark, this work shows 5.5% compile-time reduction and 7.7%<br>\nruntime improvement (speedup). More benchmarks to come.</p>\n<p>Most of this implementation was done in (very productive) pair<br>\nprogramming sessions with Jamey Sharp, thus:</p>\n<p>Co-authored-by: Jamey Sharp &lt;<a href=\"mailto:jsharp@fastly.com\">jsharp@fastly.com</a>&gt;</p>\n</blockquote>",
        "id": 314172061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670304063
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a>.</p>",
        "id": 314172063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670304063
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314174729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670306184
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1206344571\">PR review</a>.</p>",
        "id": 314210302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670323715
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1040806262\">PR review comment</a>:</p>\n<blockquote>\n<p>We already have an fxhash impl in the fx module.</p>\n</blockquote>",
        "id": 314210303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670323715
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1206354334\">PR review</a>.</p>",
        "id": 314211239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670324075
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1040814149\">PR review comment</a>:</p>\n<blockquote>\n<p>What exactly is hashbrown necessary for? std::collection::HashMap is a wrapper around hashbrown.</p>\n</blockquote>",
        "id": 314211240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670324075
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041261000\">PR review comment</a>:</p>\n<blockquote>\n<p>It's necessary for <code>crate::ctxhash::CtxHashMap</code>, which is a hashmap that uses external context for hashing and equality. <code>HashMap</code> isn't sufficient for this.</p>\n<p>Note that this was previously in the <code>cranelift-egraph</code> crate, which was unconditionally required by <code>cranelift-codegen</code>, and now has been moved into <code>cranelift-codegen</code>; so there's no change in the dependency footprint.</p>\n</blockquote>",
        "id": 314285233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670347713
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207022608\">PR review</a>.</p>",
        "id": 314285234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670347713
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314285520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670347798
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207024874\">PR review</a>.</p>",
        "id": 314285587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670347805
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041262524\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yes, I had forgotten that; thanks, updated.</p>\n</blockquote>",
        "id": 314285589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670347806
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314287170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670348255
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314289726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670349097
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314300309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352213
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>:</p>\n<blockquote>\n<p>This work rewrites the \"egraph\"-based optimization framework in<br>\nCranelift to operate on aegraphs (acyclic egraphs) represented in the<br>\nCLIF itself rather than as a separate data structure to which and from<br>\nwhich we translate the CLIF.</p>\n<p>The basic idea is to add a new kind of value, a \"union\", that is like an<br>\nalias but refers to two other values rather than one.  This allows us to<br>\nrepresent an eclass of enodes (values) as a tree. The union node allows<br>\nfor a value to have <em>multiple representations</em>: either constituent value<br>\ncould be used, and (in well-formed CLIF produced by correct<br>\noptimization rules) they must be equivalent.</p>\n<p>Like the old egraph infrastructure, we take advantage of acyclicity and<br>\neager rule application to do optimization in a single pass. Like before,<br>\nwe integrate GVN (during the optimization pass) and LICM (during<br>\nelaboration).</p>\n<p>Unlike the old egraph infrastructure, everything stays in the<br>\nDataFlowGraph. \"Pure\" enodes are represented as instructions that have<br>\nvalues attached, but that are not placed into the function layout. When<br>\nentering \"egraph\" form, we remove them from the layout while optimizing.<br>\nWhen leaving \"egraph\" form, during elaboration, we can place an<br>\ninstruction back into the layout the first time we elaborate the enode;<br>\nif we elaborate it more than once, we clone the instruction.</p>\n<p>The implementation performs two passes overall:</p>\n<ul>\n<li>\n<p>One, a forward pass in RPO (to see defs before uses), that (i) removes<br>\n  \"pure\" instructions from the layout and (ii) optimizes as it goes. As<br>\n  before, we eagerly optimize, so we form the entire union of optimized<br>\n  forms of a value before we see any uses of that value. This lets us<br>\n  rewrite uses to use the most \"up-to-date\" form of the value and<br>\n  canonicalize and optimize that form.</p>\n<p>The eager rewriting and acyclic representation make each other work<br>\n(we could not eagerly rewrite if there were cycles; and acyclicity<br>\ndoes not miss optimization opportunities only because the first time<br>\nwe introduce a value, we immediately produce its \"best\" form). This<br>\ndesign choice is also what allows us to avoid the \"parent pointers\"<br>\nand fixpoint loop of traditional egraphs.</p>\n<p>This forward optimization pass keeps a scoped hashmap to \"intern\"<br>\nnodes (thus performing GVN), and also interleaves on a per-instruction<br>\nlevel with alias analysis. The interleaving with alias analysis allows<br>\nalias analysis to see the most optimized form of each address (so it<br>\ncan see equivalences), and allows the next value to see any<br>\nequivalences (reuses of loads or stored values) that alias analysis<br>\nuncovers.</p>\n</li>\n<li>\n<p>Two, a forward pass in domtree preorder, that \"elaborates\" pure enodes<br>\n  back into the layout, possibly in multiple places if needed. This<br>\n  tracks the loop nest and hoists nodes as needed, performing LICM as it<br>\n  goes. Note that by doing this in forward order, we avoid the<br>\n  \"fixpoint\" that traditional LICM needs: we hoist a def before its<br>\n  uses, so when we place a node, we place it in the right place the<br>\n  first time rather than moving later.</p>\n</li>\n</ul>\n<p>This PR replaces the old (a)egraph implementation. It removes both the<br>\ncranelift-egraph crate and the logic in cranelift-codegen that uses it.</p>\n<p>On <code>spidermonkey.wasm</code> running a simple recursive Fibonacci<br>\nmicrobenchmark, this work shows 5.5% compile-time reduction and 7.7%<br>\nruntime improvement (speedup). More benchmarks to come.</p>\n<p>Most of this implementation was done in (very productive) pair<br>\nprogramming sessions with Jamey Sharp, thus:</p>\n<p>Co-authored-by: Jamey Sharp &lt;<a href=\"mailto:jsharp@fastly.com\">jsharp@fastly.com</a>&gt;</p>\n</blockquote>",
        "id": 314300333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352222
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207071954\">PR review</a>.</p>",
        "id": 314302809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352962
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207071954\">PR review</a>.</p>",
        "id": 314302815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352962
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041300869\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: in general, I think a <code>where</code> clause would make these methods easier to read.</p>\n</blockquote>",
        "id": 314302816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352962
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041338771\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we wrap this up into <code>process_skeleton_inst</code> or something like that, just to make the overall algorithm a little easier to read at a glance?</p>\n</blockquote>",
        "id": 314302820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352962
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041308958\">PR review comment</a>:</p>\n<blockquote>\n<p><code>InstructionData</code> is <code>Copy</code> so this can be</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            NewOrExistingInst::New(data, ty) =&gt; (*ty, *data),\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 314302822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352962
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041329755\">PR review comment</a>:</p>\n<blockquote>\n<p>This is shorter and allows for reserving capacity for all children at once:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            block_stack.extend(self.domtree_children.children(block));\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 314302824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352962
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041295326\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we package this up in a <code>self.egraph_pass()</code> method, similar to other passes, rather than have all the bits of state exposed in our pass-ordering / mid end? I think that would be a bit nicer.</p>\n</blockquote>",
        "id": 314302826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352962
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041313360\">PR review comment</a>:</p>\n<blockquote>\n<ul>\n<li>What about something like <code>iadd_carry</code>, which is a pure instruction with two results, how does that fit in here? We used to return tuples and then project fields out of them, but now that we are using the DFG directly, how is this handled?</li>\n<li>This could be simplified as<br>\n<code>suggestion\n          let orig_value = self.func.dfg.first_result(inst);\n  </code></li>\n</ul>\n</blockquote>",
        "id": 314302827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352963
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041323487\">PR review comment</a>:</p>\n<blockquote>\n<p>Should this be behind <code>if cfg!(feature = \"trace-log\")</code> or something? Or are we pretty confident that LLVM will clean this up?</p>\n</blockquote>",
        "id": 314302828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352963
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041298220\">PR review comment</a>:</p>\n<blockquote>\n<p>I would expect this to more closely mirror <code>std::hash::Hash::hash</code>, like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">ctx_hash</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">H</span>: <span class=\"nc\">Hasher</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there a reason it doesn't?</p>\n</blockquote>",
        "id": 314302831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670352963
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207149554\">PR review</a>.</p>",
        "id": 314321917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670359044
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207149554\">PR review</a>.</p>",
        "id": 314321918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670359045
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041347564\">PR review comment</a>:</p>\n<blockquote>\n<p>A comment at the top of <code>Cost</code> explaining what sentinel values there are would be useful here, especially since I had a comment about how the loop level max should be 3 not 2 until I realized that it was leaving room for sentinels.</p>\n</blockquote>",
        "id": 314321919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670359045
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041429315\">PR review comment</a>:</p>\n<blockquote>\n<p>Do we really need <code>u32</code>s here? With the <code>Cost</code> we limit the loop level to 2 at most...</p>\n</blockquote>",
        "id": 314321921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670359045
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041433366\">PR review comment</a>:</p>\n<blockquote>\n<p>Additionally, can we debug assert that there are no <code>ValueDef::Union</code>s in the layout after running this pass?</p>\n</blockquote>",
        "id": 314321923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670359045
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314330124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362217
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207357620\">PR review</a>.</p>",
        "id": 314330231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362243
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041479620\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 314330233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362243
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207357743\">PR review</a>.</p>",
        "id": 314330241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362247
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041479682\">PR review comment</a>:</p>\n<blockquote>\n<p>No particular reason, just expediency at the time (it was this way in the original egraph prototype then carried over). Updated as suggested!</p>\n</blockquote>",
        "id": 314330242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362247
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207357903\">PR review</a>.</p>",
        "id": 314330255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362252
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041479750\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 314330256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362252
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041479800\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 314330263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362256
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207358046\">PR review</a>.</p>",
        "id": 314330264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362256
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207358199\">PR review</a>.</p>",
        "id": 314330277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362260
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041479869\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point, added the conditional to be sure (it never hurts to make LLVM's life easier in this way either...).</p>\n</blockquote>",
        "id": 314330278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362260
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207358346\">PR review</a>.</p>",
        "id": 314330294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362264
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041479926\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, the <code>DomTreeChildIter</code> doesn't give a size hint (it traverses a linked list internally) so we won't get that one-reservation benefit, but this form is still clearer, so updated, thanks!</p>\n</blockquote>",
        "id": 314330295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362264
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207358477\">PR review</a>.</p>",
        "id": 314330302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362268
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041479976\">PR review comment</a>:</p>\n<blockquote>\n<p>This was a bit ugly because of <code>AliasAnalysis</code> carrying a lifetime parameter, and ended up propagating lifetimes outward to the point that the ISLE context has three lifetimes with two constraints between them. But now that it's done, the factoring is kind of nice, so I think I'll leave it...</p>\n</blockquote>",
        "id": 314330303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362268
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207365507\">PR review</a>.</p>",
        "id": 314331090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362628
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041484289\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, great point with <code>first_result</code>, I hadn't remembered that method existed. Updated!</p>\n<p>Regarding multi-output instructions in general: yes, this was a bit of a compromise for now. Jamey and I went back and forth a bit on an <code>Inst</code>-centric vs. <code>Value</code>-centric design in the elaborator and ultimately basing everything on <code>Value</code>s was far, far simpler; so to keep everything straight, we need to deal only with single-result instructions.</p>\n<p>We judged this to be acceptable-ish because the most common multi-result instructions are calls. There are indeed also adds-with-carries but, for now, not optimizing these probably will not have a material impact on speedups.</p>\n<p>Ultimately I'm curious whether we might be able to adapt a tuple-types-and-projection approach to CLIF as well, though that's a much larger change. </p>\n</blockquote>",
        "id": 314331092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362628
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314331144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670362671
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314332928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670363414
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207386159\">PR review</a>.</p>",
        "id": 314332949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670363424
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041496555\">PR review comment</a>:</p>\n<blockquote>\n<p>Added! Hopefully the explanation helps.</p>\n</blockquote>",
        "id": 314332950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670363424
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#pullrequestreview-1207386431\">PR review</a>.</p>",
        "id": 314332974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670363435
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#discussion_r1041496725\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, reverted, thanks for catching this!</p>\n<p>For the curious, this change came from a dead-end (since reverted) where we invented a notion of a \"pseudo-loop nest\" based on the domtree (basic idea is that we wanted the loop nest to fully be a subtree of the domtree; consider e.g. a loop exit dominating the rest of the function, that's where the loop tree and domtree differ) and loop nests could get much deeper. But we've reverted all that and <code>LoopLevel</code> should correspond only to true loop-nest level again, now.</p>\n</blockquote>",
        "id": 314332976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670363435
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314338198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670365536
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a> from <code>egraph-in-dfg-rebase</code> to <code>main</code>.</p>",
        "id": 314338317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670365568
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">PR #5382</a>.</p>",
        "id": 314343071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670367539
    }
]