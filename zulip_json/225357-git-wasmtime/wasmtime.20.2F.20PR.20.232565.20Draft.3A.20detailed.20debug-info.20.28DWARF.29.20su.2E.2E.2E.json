[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is an initial attempt at propagating \"value labels\" all the way<br>\nfrom CLIF to DWARF metadata on the emitted machine code. The key idea is<br>\nas follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>Unfortunately, it doesn't <em>quite</em> work yet with the gdb tests in<br>\ntests/all/debug/gdb.rs. Strangely, these tests are marked <code>#[ignore]</code>.<br>\nNeeds more debugging, I'd like to publish this draft now as-is to share<br>\nthe design and get feedback / bringup help on the tests.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 222165708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610189663
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a>.</p>",
        "id": 222165709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610189663
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is an initial attempt at propagating \"value labels\" all the way<br>\nfrom CLIF to DWARF metadata on the emitted machine code. The key idea is<br>\nas follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>Unfortunately, it doesn't <em>quite</em> work yet with the gdb tests in<br>\ntests/all/debug/gdb.rs. Strangely, these tests are marked <code>#[ignore]</code>.<br>\nNeeds more debugging, I'd like to publish this draft now as-is to share<br>\nthe design and get feedback / bringup help on the tests.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 222165869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610189897
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is an initial attempt at propagating \"value labels\" all the way<br>\nfrom CLIF to DWARF metadata on the emitted machine code. The key idea is<br>\nas follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>Unfortunately, it doesn't <em>quite</em> work yet with the gdb tests in<br>\ntests/all/debug/gdb.rs. Strangely, these tests are marked <code>#[ignore]</code>.<br>\nNeeds more debugging, I'd like to publish this draft now as-is to share<br>\nthe design and get feedback / bringup help on the tests.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 222189704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610226177
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR propagates \"value labels\" all the way from CLIF to DWARF<br>\nmetadata on the emitted machine code. The key idea is as follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>This PR also adds the new-backend variant to the gdb tests on CI.</p>\n</blockquote>",
        "id": 222189819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610226316
    }
]