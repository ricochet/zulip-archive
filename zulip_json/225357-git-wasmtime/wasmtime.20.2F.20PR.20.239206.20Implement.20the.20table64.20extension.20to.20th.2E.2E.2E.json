[
    {
        "content": "<p>lwshang opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a> from <code>lwshang:table64</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Implements #8674</p>\n</blockquote>",
        "id": 468220587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725636987
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 468223778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725637787
    },
    {
        "content": "<p>lwshang <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2334445263\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<p>There are still some <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/10741354477/job/29791554809?pr=9206\">test failures</a> related to codegen.<br>\nI’m uncertain whether I should retain the existing code generation behavior or if it’s acceptable to simply update the tests by blessing them.</p>\n<p>I think it would be beneficial to add unit tests to cover the table operations with a 64-bit table. However, I’m unsure about the best location to include them.</p>\n<p>@alexcrichton I’d appreciate your guidance.</p>\n</blockquote>",
        "id": 468235456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725641147
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2334562960\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<p>Blessing is fine to do at any time yeah. That'll show up in the diff of this PR so the changes to the output can be reviewed. If anything looks awry a reviewer can flag it for further investigation.</p>\n<p>For tests the basic ones should already be running from the <code>memory64</code> proposal. If table64 is implemented and working then <code>cargo test --test wast</code> should in theory fail saying that some tests were expected to fail but they actually passed. That would be resolved by updating <a href=\"https://github.com/bytecodealliance/wasmtime/blob/459378c7d7f19ceb66093ee2bfeca5a0eacd8fc4/tests/wast.rs#L238-L247\">these lines</a>.</p>\n<p>Another way to add tests is to add <code>*.wast</code> files somewhere within <code>tests/misc_testsuite</code>. That is also run through <code>cargo test --test wast</code>.</p>\n<p>Another way to add tests is in <code>tests/all/*.rs</code>, probably <code>tests/all/table.rs</code>. These are more focused on API tests though rather than wasm tests since that's best done through the <code>*.wast</code> frameworks if possible.</p>\n<p>And finally one other thing this PR will want to do is to remove <a href=\"https://github.com/bytecodealliance/wasmtime/blob/459378c7d7f19ceb66093ee2bfeca5a0eacd8fc4/crates/fuzzing/src/generators/config.rs#L407-L410\">this line</a> which will re-enable fuzzing the memory64 proposal. Once that's done you can also run the fuzzers to get some more test coverage.</p>\n</blockquote>",
        "id": 468254269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725645529
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#pullrequestreview-2286877443\">PR review</a>:</p>\n<blockquote>\n<p>Thank you again so much for spearheading the work on this, it's very much appreciated! This looks like a great start and it looks like you've basically figured out how to touch all the bits here and there. I think you've made some great decisions about when to use <code>u64</code> vs <code>usize</code> as well, thanks for that!</p>\n<p>I mostly left a bunch of comments below about things related to casts. I in general want to make sure we're really careful to minimize issues with the principles of (a) avoiding <code>as</code> in general and (b) avoiding unwraps unless we know that panicking is indicative of a fatal bug in the runtime. </p>\n<p>Let me know if I can clarify anything further though!</p>\n</blockquote>",
        "id": 468260552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647312
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747521701\">PR review comment</a>:</p>\n<blockquote>\n<p>This one's ok to leave as <code>u32</code> since the quantity of items in a module is still bounded by 32-bits, it's just the runtime indices that are inflated to 64 bits.</p>\n</blockquote>",
        "id": 468260554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647312
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747526228\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you be sure to reflect these changes in the wasmtime C header files as well? (should be replacing a few <code>uint32_t</code> with <code>uint64_t</code> here and there)</p>\n</blockquote>",
        "id": 468260555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647312
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747528848\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind doing <code>u64::from(...)</code> here?</p>\n</blockquote>",
        "id": 468260557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647312
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747525128\">PR review comment</a>:</p>\n<blockquote>\n<p>Where possible it's generally recommended to use <code>t::from(val)</code> instead of <code>val as t</code> since the former is guaranteed to be lossless where the latter can accidentally lose bits. Can this be changed to <code>u64::from(index)</code>? (here and some places below too)</p>\n</blockquote>",
        "id": 468260559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647312
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747530554\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind leaving this as it was prior? You'll be adding <code>table64: _</code> to the pattern but it helps us remember to consider updating these impls when fields are added or removed from <code>Table</code></p>\n</blockquote>",
        "id": 468260560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647312
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747532061\">PR review comment</a>:</p>\n<blockquote>\n<p>In general, especially in the runtime, we want to avoid <code>.unwrap()</code>. To that end could this failure case be turned into an error? </p>\n<p>This I think comes up if a 32-bit host tries to build a table with &gt;= u32::MAX elements.</p>\n</blockquote>",
        "id": 468260561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647312
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747532899\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to my comment above, could this cast's error be handled to return an error in this case? (it basically means out-of-bounds)</p>\n</blockquote>",
        "id": 468260562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647312
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747538845\">PR review comment</a>:</p>\n<blockquote>\n<p>Also to clarify this <code>try_from(...).unwrap()</code> is ok (and the one below). Panicking here helps catch bugs rather than silently truncating by accident. Thanks for updating this!</p>\n</blockquote>",
        "id": 468260563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647312
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747534280\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to above could this be <code>u64::try_from(...).unwrap()</code>?</p>\n</blockquote>",
        "id": 468260564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747533851\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be <code>u64::try_from(...).unwrap()</code>? Here the <code>.unwrap()</code> should be ok because the runtiem should always guarantee that we can fit the number of elements in a 64-bit integer.</p>\n</blockquote>",
        "id": 468260565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747545748\">PR review comment</a>:</p>\n<blockquote>\n<p>While this was a preexisting issue mind rewriting this as <code>usize::try_from(dst)</code> and return <code>TableOutOfBounds</code> on a cast failure?</p>\n</blockquote>",
        "id": 468260566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747546276\">PR review comment</a>:</p>\n<blockquote>\n<p>Here this'll want to return an error if this returns <code>Err</code> rather than panicking</p>\n</blockquote>",
        "id": 468260567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747537733\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to some prior comments of mine, this <code>try_into()</code> will want to be checked and handled. In the context of these functions it'll want to return <code>Trap::TableOutOfBounds</code>.</p>\n<p>I'll also clarify that this is mostly for hygiene. We can't easily write tests for this right now since it would require running on a 32-bit platform which Wasmtime doesn't support just yet. In the future though it'll help keep tests clean on a 32-bit platform.</p>\n</blockquote>",
        "id": 468260568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747544841\">PR review comment</a>:</p>\n<blockquote>\n<p>Here I might recommend duplicating (in spirit at least) what's happening in <code>vm/memory.rs</code>. Namely the <code>table_growing </code>callback<code> is always called no matter what but the min/max passed in are </code>usize::MAX<code> if they overflow. Notably this shouldn't </code>.unwrap()<code> here but you'll want to try to convert to a </code>usize`.</p>\n<p>After the <code>table_growing</code> call is made though you'll convert the min/max into <code>usize</code> and return an error if something overflows.</p>\n<p>Also like <code>Memory::limit_new</code> I'd recomend returning <code>(usize, Option&lt;usize&gt;)</code> from this method to avoid re-casting things in the callers and reusing the results of this function.</p>\n</blockquote>",
        "id": 468260569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747547124\">PR review comment</a>:</p>\n<blockquote>\n<p>This'll want to return <code>None</code> if this cast fails (since it's out-of-bounds)</p>\n</blockquote>",
        "id": 468260570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747548288\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind adding both of these as a test? Both growing by <code>u64::from(u32::MAX)</code> and <code>u64::MAX</code> should both fail</p>\n</blockquote>",
        "id": 468260571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747540893\">PR review comment</a>:</p>\n<blockquote>\n<p>Here this <code>.unwrap()</code> will want to be replaced with <code>.unwrap_or(usize::MAX)</code>. That'll mean that on a 32-bit system if you load a table with a maximum size of <code>u64::MAX</code> the effective maximum size of the table will end up being <code>usize::MAX</code></p>\n</blockquote>",
        "id": 468260572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747551784\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this is probably copy/pasted from a memory-related function, so could the memory-related function be refactored so both tables/memories could use the same underlying logic?</p>\n</blockquote>",
        "id": 468260573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747552350\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that this might be causing issues because the table.grow builtin is returning <code>i64</code> rather than <code>pointer</code>, so that may need to be updated to return <code>pointer</code> instead?</p>\n</blockquote>",
        "id": 468260575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747549285\">PR review comment</a>:</p>\n<blockquote>\n<p>Do you know why this error changed? Is that perhaps a cast gone wrong somewhere?</p>\n</blockquote>",
        "id": 468260576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1747545866\">PR review comment</a>:</p>\n<blockquote>\n<p>(and <code>len</code> below)</p>\n</blockquote>",
        "id": 468260577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725647313
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2334664059\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<p>Also as a heads up I was inspired reading over this to send <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209\">https://github.com/bytecodealliance/wasmtime/pull/9209</a> which may cause more errors in CI for this if that lands first. My hope though is that'll help reviewing and flagging locations to audit for casts though</p>\n</blockquote>",
        "id": 468270925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725649851
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 468899675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725910316
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 468904679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725911995
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 468907366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725912884
    },
    {
        "content": "<p>lwshang <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2339045067\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<p>@alexcrichton I made the changes according to you suggestions.</p>\n<p>One significant change I made was introducing <code>IndexType</code> and <code>Limits</code>, which streamline and unify the handling of limits for both memories and tables.</p>\n<hr>\n<p>Blessing <code>disas</code> tests still left a few tests unfixed.</p>\n<p>The <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/10780559368/job/29896607278?pr=9206#step:18:1192\">error</a> looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">verifier</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"n\">aborted</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>It seems that those are related to <code>call_indirect</code>. I guess it might be the <code>fn translate_call_indirect()</code> method in <code>func_environ.rs</code>.</p>\n<p>But I couldn't figure out how to fix it. Could you give me some hint?<br>\n(It is hard for me to reason about the disassembled code as I have no experience with CLIF before.)</p>\n</blockquote>",
        "id": 468911807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725914353
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#pullrequestreview-2290938697\">PR review</a>:</p>\n<blockquote>\n<p>No worries I'm happy to help! I've flagged a few locations in Wasm-&gt;CLIF translation around <code>table.get</code> and <code>table.set</code> but the <code>call_indirect</code> one didn't jump out to me (but it may still be there). In general though the high-level comment is that we won't want to extend a 32-bit index to a 64-bit index too eagerly and instead only do that when necessary. Various checks already handle the index type being smaller than the host pointer type, but you might need to add a few more checks in a few more places.</p>\n</blockquote>",
        "id": 468927740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725920211
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1750934613\">PR review comment</a>:</p>\n<blockquote>\n<p>stray comment</p>\n</blockquote>",
        "id": 468927741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725920211
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1750926829\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh this is a case where it's a bit subtle, but <code>value</code> has type <code>i32</code> which means that it's signed. That means that <code>try_from</code> will fail here if the sign bit is set, but that's not what we want. Instead whe we need to do here is to view <code>value</code> as unsigned first (e.g. <code>value as u32</code>) and then convert that to <code>u64</code>, e.g. <code>u64::from(value as u32)</code>. That's for the <code>I32Const</code> case, but for <code>I64Const</code> it'll just be <code>value as u64</code>.</p>\n<p>If you'd like I think there's also traits to import from Cranelift where you can do <code>u64::from(value.unsigned())</code></p>\n</blockquote>",
        "id": 468927742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725920211
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1751002456\">PR review comment</a>:</p>\n<blockquote>\n<p>Like <code>table_get</code> above this'll want to avoid casting to i64 since some table sets are handled inline. This may need to propagate the <code>index_type</code> into various calls below so they can handle the 32/64 split.</p>\n</blockquote>",
        "id": 468927743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725920211
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1750994702\">PR review comment</a>:</p>\n<blockquote>\n<p>If you'd like this could also be <code>let index = usize::try_from(index).ok()?;</code></p>\n</blockquote>",
        "id": 468927744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725920211
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1751001558\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that this may be roughly where the verifier error is coming from. We only want to cast indices to <code>i64</code> when it's going out to a libcall, but otherwise the index will stay in its native type. </p>\n</blockquote>",
        "id": 468927745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725920211
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 468936223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725923887
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2339341247\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<p>I poked around a bit at this locally and this fixed the call_indirect case I believe:</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/cranelift/src/func_environ.rs b/crates/cranelift/src/func_environ.rs</span>\n<span class=\"gh\">index 568c8e29c7..d486cf082d 100644</span>\n<span class=\"gd\">--- a/crates/cranelift/src/func_environ.rs</span>\n<span class=\"gi\">+++ b/crates/cranelift/src/func_environ.rs</span>\n<span class=\"gu\">@@ -894,11 +894,13 @@ impl&lt;'module_environment&gt; FuncEnvironment&lt;'module_environment&gt; {</span>\n<span class=\"w\"> </span>        builder.seal_block(null_block);\n\n<span class=\"w\"> </span>        builder.switch_to_block(null_block);\n<span class=\"gi\">+        let index_type = self.table(table_index).idx_type;</span>\n<span class=\"w\"> </span>        let table_index = builder.ins().iconst(I32, table_index.index() as i64);\n<span class=\"w\"> </span>        let lazy_init = self\n<span class=\"w\"> </span>            .builtin_functions\n<span class=\"w\"> </span>            .table_get_lazy_init_func_ref(builder.func);\n<span class=\"w\"> </span>        let vmctx = self.vmctx_val(&amp;mut builder.cursor());\n<span class=\"gi\">+        let index = self.cast_index_to_i64(&amp;mut builder.cursor(), index, index_type);</span>\n<span class=\"w\"> </span>        let call_inst = builder.ins().call(lazy_init, &amp;[vmctx, table_index, index]);\n<span class=\"w\"> </span>        let returned_entry = builder.func.dfg.inst_results(call_inst)[0];\n<span class=\"w\"> </span>        builder.ins().jump(continuation_block, &amp;[returned_entry]);\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 468939770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725925536
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 468943239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725927298
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#pullrequestreview-2291204811\">PR review</a>:</p>\n<blockquote>\n<p>Looks great! I think the remaining test failure is just matching error messages. Feel free to update <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2b29e4590ee7e3089dc4b5886c951e0c02920d91/crates/wast/src/wast.rs#L559-L572\">this block</a> if you'd like.</p>\n</blockquote>",
        "id": 468952597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725932380
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#discussion_r1751127350\">PR review comment</a>:</p>\n<blockquote>\n<p>I think sextend may have snuck back in instead of a uextend?</p>\n</blockquote>",
        "id": 468952598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725932380
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2340849723\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:wasm\", \"fuzzing\", \"wasmtime:api\", \"wasmtime:c-api\", \"wasmtime:config\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 469096313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725975889
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2341078376\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 469115834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725979514
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469159162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725988336
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469161017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725988912
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469187450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725995141
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2341919212\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<p>If you're curious I poked a bit at this and <a href=\"https://github.com/bytecodealliance/wasmtime/commit/6fff1193035cad2464871b8d53c29cb2087e3bd5\">https://github.com/bytecodealliance/wasmtime/commit/6fff1193035cad2464871b8d53c29cb2087e3bd5</a> should fix the remaining <code>*.wast</code> tests, but there may still be other test failures. Just some minor things here and there.</p>\n</blockquote>",
        "id": 469201192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725998864
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469205446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726000174
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469388064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726058856
    },
    {
        "content": "<p>lwshang <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2343618228\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<p>@alexcrichton A big thank you for providing the fix that resolved the CI failure! I really appreciate your help.</p>\n<p>IIUC the re-enabled spec and fuzzing tests provide fairly good coverage for table64.<br>\nAs for the bot’s comment regarding <code>wasmtime:config</code>, it appears that no action is required.</p>\n<p>Do you think the PR is now ready to be merged? If so, would you mind turning it from a draft into “Ready for review”?</p>\n</blockquote>",
        "id": 469391987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726059883
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2344059523\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<p>Sounds good, and happy to help! I think you should have a \"Ready for review\" button on your end, but I'm happy to hit it too if it's hidden. Would you be ok squashing these commits as well? After that I agree that this looks good to go <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, thanks so much for your work on this!</p>\n</blockquote>",
        "id": 469447340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726070199
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469451003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726070986
    },
    {
        "content": "<p><strong>lwshang</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a> as ready for review.</p>",
        "id": 469451045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726070997
    },
    {
        "content": "<p><strong>lwshang</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469451052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726070998
    },
    {
        "content": "<p><strong>lwshang</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469451055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726070998
    },
    {
        "content": "<p><strong>lwshang</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469451058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726070999
    },
    {
        "content": "<p><strong>lwshang</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469451059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726070999
    },
    {
        "content": "<p><strong>lwshang</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469451060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726070999
    },
    {
        "content": "<p>lwshang <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2344099326\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would you be ok squashing these commits as well?</p>\n</blockquote>\n<p>Should I do anything here? Or if it's just you click \"Squash and merge\" button?</p>\n</blockquote>",
        "id": 469452153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726071266
    },
    {
        "content": "<p>lwshang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2344099326\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would you be ok squashing these commits as well?</p>\n</blockquote>\n<p>Should I do anything here? Or if it's just you clicking the \"Squash and merge\" button?</p>\n</blockquote>",
        "id": 469452239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726071280
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#issuecomment-2344105408\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>:</p>\n<blockquote>\n<p>Oh that's something you'll do locally and the main purpose is to edit the message on the commit since the default GitHub would generate would otherwise concatenate all the commits so far. The basic idea is you can run <code>git rebase -i origin/main</code> and then that'll allow you to squash commits all into one. If you have trouble with that though let me know</p>\n</blockquote>",
        "id": 469452897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726071445
    },
    {
        "content": "<p>lwshang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469466201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726074267
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206#pullrequestreview-2298091701\">PR review</a>:</p>\n<blockquote>\n<p>Thanks again for your work on this!</p>\n</blockquote>",
        "id": 469471832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726076065
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">PR #9206</a>.</p>",
        "id": 469474968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726077010
    }
]