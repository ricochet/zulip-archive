[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5049\">PR #5049</a>.</p>",
        "id": 303663003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665588091
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5049\">PR #5049</a> from <code>keep-existing-trap-backtraces</code> to <code>main</code>:</p>\n<blockquote>\n<p>This fixes some accidentally quadratic code where we would re-capture a Wasm<br>\nstack trace (takes <code>O(n)</code> time) every time we propagated a trap through a host<br>\nframe back to Wasm (can happen <code>O(n)</code> times). And <code>O(n) * O(n) = O(n^2)</code>, of<br>\ncourse. Whoops. After this commit, it trapping with a call stack that is <code>n</code><br>\nframes deep of Wasm-to-host-to-Wasm calls just captures a single backtrace and<br>\nis therefore just a proper <code>O(n)</code> time operation, as it is intended to be.</p>\n<p>Now we explicitly track whether we need to capture a Wasm backtrace or not when<br>\nraising a trap. This unfortunately isn't as straightforward as one might hope,<br>\nhowever, because of the split between <code>wasmtime::Trap</code> and<br>\n<code>wasmtime_runtime::Trap</code>. We need to decide whether or not to capture a Wasm<br>\nbacktrace inside <code>wasmtime_runtime</code> but in order to determine whether to do that<br>\nor not we need to reflect on the <code>anyhow::Error</code> and see if it is a<br>\n<code>wasmtime::Trap</code> that already has a backtrace or not. This can't be done the<br>\nstraightforward way because it would introduce a cyclic dependency between the<br>\n<code>wasmtime</code> and <code>wasmtime-runtime</code> crates. We can't merge those two <code>Trap</code><br>\ntypes-- at least not without effectively merging the whole <code>wasmtime</code> and<br>\n<code>wasmtime-runtime</code> crates together, which would be a good idea in a perfect<br>\nworld but would be a <em>ton</em> of ocean boiling from where we currently are --<br>\nbecause <code>wasmtime::Trap</code> does symbolication of stack traces which relies on<br>\nmodule registration information data that resides inside the <code>wasmtime</code> crate<br>\nand therefore can't be moved into <code>wasmtime-runtime</code>. We resolve this problem by<br>\nadding a boolean to <code>wasmtime_runtime::raise_user_trap</code> that controls whether we<br>\nshould capture a Wasm backtrace or not, and then determine whether we need a<br>\nbacktrace or not at each of that function's call sites, which are in <code>wasmtime</code><br>\nand therefore can do the reflection to determine whether the user trap already<br>\nhas a backtrace or not. Phew!</p>\n<p>Fixes #5037</p>\n</blockquote>",
        "id": 303663004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665588091
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5049#pullrequestreview-1139314233\">PR review</a>.</p>",
        "id": 303665654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665588916
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5049#discussion_r993618790\">PR review comment</a>:</p>\n<blockquote>\n<p>IIRC this has a <code>OnceCell</code> initialized internally here which ignores insertion of a backtrace over a prior backtrace. Could some debug assertions and such be added around here? For example can this debug assert that <code>needs_backtrace</code> is the same as <code>backtrace.is_some()</code>? Additionally <code>record_backtrace</code> could <code>debug_assert!</code> that insertion is always successful to.</p>\n<p>I'm not sure if we can actually trip the assertions but it would probably be good to be aware of any cases if there are.</p>\n</blockquote>",
        "id": 303665655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665588916
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5049#discussion_r993616773\">PR review comment</a>:</p>\n<blockquote>\n<p>This snippet is shared amongst a few places below as well, so couldd a helper function be added to the <code>wasmtime</code> crate which is the <code>raise_trap(e: Error)</code> of old?</p>\n</blockquote>",
        "id": 303665658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665588916
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5049#pullrequestreview-1139314233\">PR review</a>.</p>",
        "id": 303665660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665588916
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5049\">PR #5049</a> from <code>keep-existing-trap-backtraces</code> to <code>main</code>.</p>",
        "id": 303699681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665600119
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5049\">PR #5049</a>.</p>",
        "id": 303848879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665670969
    }
]