[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a> from <code>bytecodealliance:pch/no_more_stream_error</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/WebAssembly/wasi-io/pull/38\">https://github.com/WebAssembly/wasi-io/pull/38</a> we got review feedback<br>\nto eliminate the stream-error in favor of the empty error in wit<br>\n<code>result&lt;a&gt;</code>.</p>\n<p>This means we cant use trappable error anymore, and therefore leads to<br>\nall this other unsightly transformation of the streams trait definition<br>\nand all its call sites.</p>\n<p>We'll fix the wasmtime-wit-bindgen macro to support this case better in<br>\nthe future, but rn we gotta stay synchronized with upstream</p>\n<p>On the upside this showed us that the host stream trait design doesnt<br>\ndifferentiate between a runtime and a trapping error, so lets fix that<br>\nnext</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 384926444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692054567
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 384926445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692054567
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 384926447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692054568
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 384926500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692054600
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 384930421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692056831
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 384930422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692056832
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 384934449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692058667
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 384935462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692059112
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 384935510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692059138
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 385282663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692131993
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/WebAssembly/wasi-io/pull/38\">https://github.com/WebAssembly/wasi-io/pull/38</a> we got review feedback<br>\nto eliminate the stream-error in favor of the empty error in wit<br>\n<code>result&lt;a&gt;</code>.</p>\n<p>This means we cant use trappable error anymore, and therefore leads to<br>\nall this other unsightly transformation of the streams trait definition<br>\nand all its call sites.</p>\n<p>We'll fix the wasmtime-wit-bindgen macro to support this case better in<br>\nthe future.</p>\n<p>As we made this change, it occurred to us that the host stream trait design doesn't<br>\ndistinguish between an error to be returned via a stream method at runtime, and an<br>\nerror that traps execution. We defined the <code>StreamRuntimeError</code> type for runtime<br>\nerrors, and all other errors trap.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 385290129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692136008
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/WebAssembly/wasi-io/pull/38\">https://github.com/WebAssembly/wasi-io/pull/38</a> we got review feedback<br>\nto eliminate the stream-error in favor of the empty error in wit<br>\n<code>result&lt;a&gt;</code>.</p>\n<p>This means we cant use wasmtime-wit-bindgen's <code>trappable_error</code> functionality<br>\nanymore, so the signature of the streams binding trait its call sites are much less<br>\nidiomatic than before. We'll fix the wasmtime-wit-bindgen macro to support this<br>\ncase better in the future, but for now we can live with this code being a little ugly,<br>\nsince most users will be using the (much nicer) <code>HostInputStream</code> and<br>\n<code>HostOutputStream</code> types.</p>\n<p>As we made this change, it occurred to us that the host stream trait design doesn't<br>\ndistinguish between an error to be returned via a stream method at runtime, and an<br>\nerror that traps execution. We defined the <code>StreamRuntimeError</code> type for runtime<br>\nerrors, and all other errors trap.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 385290335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692136096
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/WebAssembly/wasi-io/pull/38\">https://github.com/WebAssembly/wasi-io/pull/38</a> we got review feedback to eliminate the stream-error in favor of the empty error (wit <code>result&lt;a&gt;</code>). Although upstream PR 38 is not merged yet, we are downstreaming this interface change now, expecting it will merge upstream soon.</p>\n<p>The wit change means we cant use wasmtime-wit-bindgen's <code>trappable_error</code> functionality anymore, so the signature of the streams binding trait its call sites are much less idiomatic than before. We'll fix the wasmtime-wit-bindgen macro to support this case better in the future, but for now we can live with this code being a little ugly, since most users will be using the (much nicer) <code>HostInputStream</code> and <code>HostOutputStream</code> types.</p>\n<p>As we made this change, it occurred to us that the host stream trait design doesn't distinguish between an error to be returned via a stream method at runtime, and an error that traps execution. We defined the <code>StreamRuntimeError</code> type for runtime errors, and all other errors trap.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 385290461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692136184
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846#pullrequestreview-1579590637\">PR review</a>:</p>\n<blockquote>\n<p>This looks great! I'm looking forward to the day that we can have custom impls for <code>Try</code>, as it would be great to remove the double-nesting of <code>Result</code> :)</p>\n</blockquote>",
        "id": 385299494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692141313
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 385550857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692224189
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">PR #6846</a>.</p>",
        "id": 385756841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692308275
    }
]