[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984\">PR #2984</a> from <code>fix-leak</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit internally refactors how instance exports are handled and<br>\nfixes two issues. One issue is that when we instantiate an instance we<br>\nno longer forcibly load all items from the instance immediately,<br>\ndeferring insertion of each item into the store data tables to happen<br>\nlater as necessary. The next issue is that repeated calls to<br>\n<code>Caller::get_export</code> would continuously insert items into the store data<br>\ntables. While working as intended this was undesirable because it would<br>\ncontinuously push onto a vector that only got deallocated once the<br>\nentire store was deallocate. Now it's routed to <code>Instance::get_export</code><br>\nwhich doesn't have this behavior.</p>\n<p>Closes #2916<br>\nCloses #2983</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 242645008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623697688
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984\">PR #2984</a> from <code>fix-leak</code> to <code>main</code>.</p>",
        "id": 242645313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623697830
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984#pullrequestreview-683279160\">PR review</a>.</p>",
        "id": 242650814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623700441
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984#pullrequestreview-683279160\">PR review</a>.</p>",
        "id": 242650815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623700441
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984#discussion_r651218903\">PR review comment</a>:</p>\n<blockquote>\n<p>Doesn't take too many more lines of code to implement than this <code>TODO</code> comment:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">EitherIter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">U</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">EitherIter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">U</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span>::<span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span>::<span class=\"n\">U</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 242650816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623700441
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984#discussion_r651233809\">PR review comment</a>:</p>\n<blockquote>\n<p>Kind of unfortunate to add a new <code>malloc</code> call and a couple of atomic inc refs on the instantiation hot path. Did you happen to measure if this has any observable effect on instantiation times?</p>\n</blockquote>",
        "id": 242650818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623700441
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984\">PR #2984</a> from <code>fix-leak</code> to <code>main</code>.</p>",
        "id": 242664306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623707913
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984#pullrequestreview-683390073\">PR review</a>.</p>",
        "id": 242664390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623707987
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984#discussion_r651306539\">PR review comment</a>:</p>\n<blockquote>\n<p>This was actually already happening, although it was even worse. Previously we created an <code>IndexMap</code> with freshly allocated strings for all the names as well. This should perform fewer allocations (only one) as well as be a bit more optimized (it's an array, should be calloc-able).</p>\n<p>The atomics I don't think really affect anything, they're on the order of a handful of ns when we shoot for a handful of us for instantiation.</p>\n</blockquote>",
        "id": 242664393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623707987
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984\">PR #2984</a>.</p>",
        "id": 243030781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623941980
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984\">PR #2984</a>.</p>",
        "id": 243030830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623941997
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984#pullrequestreview-686695305\">PR review</a>.</p>",
        "id": 243066725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623956286
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2984\">PR #2984</a>.</p>",
        "id": 243070999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623958070
    }
]