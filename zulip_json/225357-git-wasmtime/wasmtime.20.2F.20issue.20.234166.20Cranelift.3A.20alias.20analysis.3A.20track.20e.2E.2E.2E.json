[
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166\">issue #4166</a>:</p>\n<blockquote>\n<p>In #4163 we are introducing an alias analysis and redundant-load elimination / store-to-load-forwarding transform.</p>\n<p>This initial implementation categorizes all memory accesses as one of four kinds: to a \"heap\", to a \"table\", to the \"vmctx\", or to everything else. These four categories are allowed to be optimized separately from each other; so e.g. a store to a table does not prevent a load from a heap from being merged with an earlier load, if otherwise to the same address.</p>\n<p>This is correct, and simple, and allows us to keep just four bits in <code>MemFlags</code> and four <code>u32</code>s for the \"last store\" vector, per instruction. However, it is somewhat more imprecise than we would like, especially in the future when we expect multiple modules, memories, tables, etc. to become more common.</p>\n<p>Thus, we should investigate ways of efficiently representing an arbitrary number of heaps or tables as separate categories of abstract state. This may require an extended <code>MemFlag</code>s, or indirection of some kind, or some limit (first 16, 32, ... memories are privileged).</p>\n</blockquote>",
        "id": 283004698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002278
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166\">issue #4166</a>:</p>\n<blockquote>\n<p>In #4163 we are introducing an alias analysis and redundant-load elimination / store-to-load-forwarding transform.</p>\n<p>This initial implementation categorizes all memory accesses as one of four kinds: to a \"heap\", to a \"table\", to the \"vmctx\", or to everything else. These four categories are allowed to be optimized separately from each other; so e.g. a store to a table does not prevent a load from a heap from being merged with an earlier load, if otherwise to the same address.</p>\n<p>This is correct, and simple, and allows us to keep just four bits in <code>MemFlags</code> and four <code>u32</code>s for the \"last store\" vector, per instruction. However, it is somewhat more imprecise than we would like, especially in the future when we expect multiple modules, memories, tables, etc. to become more common.</p>\n<p>Thus, we should investigate ways of efficiently representing an arbitrary number of heaps or tables as separate categories of abstract state. This may require an extended <code>MemFlag</code>s, or indirection of some kind, or some limit (first 16, 32, ... memories are privileged).</p>\n</blockquote>",
        "id": 283004699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002278
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166\">issue #4166</a>:</p>\n<blockquote>\n<p>In #4163 we are introducing an alias analysis and redundant-load elimination / store-to-load-forwarding transform.</p>\n<p>This initial implementation categorizes all memory accesses as one of four kinds: to a \"heap\", to a \"table\", to the \"vmctx\", or to everything else. These four categories are allowed to be optimized separately from each other; so e.g. a store to a table does not prevent a load from a heap from being merged with an earlier load, if otherwise to the same address.</p>\n<p>This is correct, and simple, and allows us to keep just four bits in <code>MemFlags</code> and four <code>u32</code>s for the \"last store\" vector, per instruction. However, it is somewhat more imprecise than we would like, especially in the future when we expect multiple modules, memories, tables, etc. to become more common.</p>\n<p>Thus, we should investigate ways of efficiently representing an arbitrary number of heaps or tables as separate categories of abstract state. This may require an extended <code>MemFlag</code>s, or indirection of some kind, or some limit (first 16, 32, ... memories are privileged).</p>\n</blockquote>",
        "id": 283004700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002278
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166\">issue #4166</a>:</p>\n<blockquote>\n<p>In #4163 we are introducing an alias analysis and redundant-load elimination / store-to-load-forwarding transform.</p>\n<p>This initial implementation categorizes all memory accesses as one of four kinds: to a \"heap\", to a \"table\", to the \"vmctx\", or to everything else. These four categories are allowed to be optimized separately from each other; so e.g. a store to a table does not prevent a load from a heap from being merged with an earlier load, if otherwise to the same address.</p>\n<p>This is correct, and simple, and allows us to keep just four bits in <code>MemFlags</code> and four <code>u32</code>s for the \"last store\" vector, per instruction. However, it is somewhat more imprecise than we would like, especially in the future when we expect multiple modules, memories, tables, etc. to become more common.</p>\n<p>Thus, we should investigate ways of efficiently representing an arbitrary number of heaps or tables as separate categories of abstract state. This may require an extended <code>MemFlag</code>s, or indirection of some kind, or some limit (first 16, 32, ... memories are privileged).</p>\n</blockquote>",
        "id": 283004701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653002278
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166#issuecomment-1133172314\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166\">issue #4166</a>:</p>\n<blockquote>\n<p>One possibility is that we have \"heap0\", \"heap1\", \"heap2\", and finally \"heap_other\" (or even just heap0 and heap_other).</p>\n<p>The CG has talked about using hints for which memories need to be fast and use virtual memory tricks in browsers which can't use those tricks for every memory. Maybe we could use those same hints to map onto heap0/1/2 vs other.</p>\n</blockquote>",
        "id": 283105582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653069525
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166#issuecomment-1133172582\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166\">issue #4166</a>:</p>\n<blockquote>\n<blockquote>\n<p>or some limit (first 16, 32, ... memories are privileged).</p>\n</blockquote>\n<p>Ah I think this is the same thing I was getting at with heap0/1/2 vs heap_other.</p>\n</blockquote>",
        "id": 283105634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653069550
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166#issuecomment-1133244405\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166\">issue #4166</a>:</p>\n<blockquote>\n<blockquote>\n<p>One possibility is that we have \"heap0\", \"heap1\", \"heap2\", and finally \"heap_other\" (or even just heap0 and heap_other).</p>\n</blockquote>\n<p>That won't help for stack slots though. Those are really important for cg_clif. Maybe we could have a side table recording for each instruction which alias set it is part of?</p>\n</blockquote>",
        "id": 283115651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653074684
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166#issuecomment-1133248888\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4166\">issue #4166</a>:</p>\n<blockquote>\n<p>@bjorn3 yes, that could work, as long as it is optional (for memory-overhead reasons). The advantage of <code>MemFlags</code> now is that it's a <code>u8</code> (or maybe extended to 16 or 32 bits) that can ride along in the <code>InstructionData</code>.</p>\n</blockquote>",
        "id": 283115984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653074912
    }
]