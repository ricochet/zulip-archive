[
    {
        "content": "<p>esarver opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9315\">issue #9315</a>:</p>\n<blockquote>\n<h2>Problem Description</h2>\n<p>I created a simple <code>host.wit</code> file to start playing with the component model in an embedded runtime. In this file, I created a world by the name <code>host</code>. I was following the examples in the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/_1_world_imports/index.html\">wasmtime bindgen examples</a> and got an error stating that <code>HostImports</code> did not exist but there was a similar trait named <code>Host_Imports</code> (see build output below). I changed my trait impl to the one shown below and got an error stating that <code>bindgen</code> was creating some code that referenced <code>HostImports</code>. </p>\n<p>If I change the world name to anything else, the problem goes away.</p>\n<h2>Identified Problem Area</h2>\n<p>I found that there is a function in <code>wasmtime/crates/wit-bindgen/src/rust.rs</code> called <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/rust.rs#L420-L427\"><code>to_rust_upper_camel_case</code></a> that uses <code>Host_</code> if the provided <code>name</code> is <code>host</code>. This is not being used consistently somewhere.</p>\n<h2>Project Files</h2>\n<p>Here are my project files that replicate the issue, along with the <code>cargo expand</code> output that shows the code with an issue (collapsed to improve readability of this ticket). </p>\n<h3><code>./Cargo.toml</code></h3>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"host\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"25.0.1\"</span>\n<span class=\"n\">wit-bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.32.0\"</span>\n</code></pre></div>\n<h3><code>./wit/host.wit</code></h3>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package system:system;\n\nworld host {\n    import print: func(msg: string);\n    export run: func();\n}\n</code></pre></div>\n<h3><code>./src/main.rs</code></h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"host\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">State</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Host_Imports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{msg}\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;</p>\n<h3>Expanded <code>main.rs</code></h3>\n<p>&lt;/summary&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(prelude_import)]</span>\n<span class=\"cp\">#[prelude_import]</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">prelude</span><span class=\"p\">::</span><span class=\"n\">rust_2021</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"cp\">#[macro_use]</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"sd\">/// Auto-generated bindings for a pre-instantiated version of a</span>\n<span class=\"sd\">/// component which implements the world `host`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// This structure is created through [`Host_Pre::new`] which</span>\n<span class=\"sd\">/// takes a [`InstancePre`](wasmtime::component::InstancePre) that</span>\n<span class=\"sd\">/// has been created through a [`Linker`](wasmtime::component::Linker).</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// For more information see [`Host_`] as well.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host_Pre</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">instance_pre</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">InstancePre</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">indices</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Host_Indices</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host_Pre</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">instance_pre</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">instance_pre</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">indices</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">indices</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host_Pre</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Creates a new copy of `Host_Pre` bindings which can then</span>\n<span class=\"w\">    </span><span class=\"sd\">/// be used to instantiate into a particular store.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// This method may fail if the component behind `instance_pre`</span>\n<span class=\"w\">    </span><span class=\"sd\">/// does not have the required exports.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">instance_pre</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">InstancePre</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Host_Indices</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">instance_pre</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">instance_pre</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">engine</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instance_pre</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instance_pre</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">InstancePre</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instance_pre</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Instantiates a new instance of [`Host_`] within the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// `store` provided.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// This function will use `self` as the pre-instantiated</span>\n<span class=\"w\">    </span><span class=\"sd\">/// instance to perform instantiation. Afterwards the preloaded</span>\n<span class=\"w\">    </span><span class=\"sd\">/// indices in `self` are used to lookup all exports on the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// resulting instance.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Host_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instance_pre</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">indices</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"sd\">/// Auto-generated bindings for index of the exports of</span>\n<span class=\"sd\">/// `host`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// This is an implementation detail of [`Host_Pre`] and can</span>\n<span class=\"sd\">/// be constructed if needed as well.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// For more information see [`Host_`] as well.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">ComponentExportIndex</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[automatically_derived]</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">clone</span><span class=\"p\">::</span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">clone</span><span class=\"p\">::</span><span class=\"nb\">Clone</span><span class=\"p\">::</span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"sd\">/// Auto-generated bindings for an instance a component which</span>\n<span class=\"sd\">/// implements the world `host`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// This structure can be created through a number of means</span>\n<span class=\"sd\">/// depending on your requirements and what you have on hand:</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// * The most convenient way is to use</span>\n<span class=\"sd\">///   [`Host_::instantiate`] which only needs a</span>\n<span class=\"sd\">///   [`Store`], [`Component`], and [`Linker`].</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// * Alternatively you can create a [`Host_Pre`] ahead of</span>\n<span class=\"sd\">///   time with a [`Component`] to front-load string lookups</span>\n<span class=\"sd\">///   of exports once instead of per-instantiation. This</span>\n<span class=\"sd\">///   method then uses [`Host_Pre::instantiate`] to</span>\n<span class=\"sd\">///   create a [`Host_`].</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// * If you've instantiated the instance yourself already</span>\n<span class=\"sd\">///   then you can use [`Host_::new`].</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// * You can also access the guts of instantiation through</span>\n<span class=\"sd\">///   [`Host_Indices::new_instance`] followed</span>\n<span class=\"sd\">///   by [`Host_Indices::load`] to crate an instance of this</span>\n<span class=\"sd\">///   type.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// These methods are all equivalent to one another and move</span>\n<span class=\"sd\">/// around the tradeoff of what work is performed when.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// [`Store`]: wasmtime::Store</span>\n<span class=\"sd\">/// [`Component`]: wasmtime::component::Component</span>\n<span class=\"sd\">/// [`Linker`]: wasmtime::component::Linker</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host_</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Func</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Host_Imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Host_ImportsGetHost</span><span class=\"o\">&lt;</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Host_ImportsGetHost</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Host_Imports</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host_ImportsGetHost</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">F</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">O</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">O</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Host_Imports</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Host_Imports</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host_Imports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Host_Imports</span><span class=\"p\">::</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Creates a new copy of `Host_Indices` bindings which can then</span>\n<span class=\"w\">        </span><span class=\"sd\">/// be used to instantiate into a particular store.</span>\n<span class=\"w\">        </span><span class=\"sd\">///</span>\n<span class=\"w\">        </span><span class=\"sd\">/// This method may fail if the component does not have the</span>\n<span class=\"w\">        </span><span class=\"sd\">/// required exports.</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_component</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">export_index</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">ok_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">__private</span><span class=\"p\">::</span><span class=\"n\">must_use</span><span class=\"p\">({</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">__private</span><span class=\"p\">::</span><span class=\"n\">format_err</span><span class=\"p\">(</span>\n<span class=\"w\">                        </span><span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"s\">\"no function export `run` found\"</span><span class=\"p\">),</span>\n<span class=\"w\">                    </span><span class=\"p\">);</span>\n<span class=\"w\">                    </span><span class=\"n\">error</span>\n<span class=\"w\">                </span><span class=\"p\">}))</span><span class=\"o\">?</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Creates a new instance of [`Host_Indices`] from an</span>\n<span class=\"w\">        </span><span class=\"sd\">/// instantiated component.</span>\n<span class=\"w\">        </span><span class=\"sd\">///</span>\n<span class=\"w\">        </span><span class=\"sd\">/// This method of creating a [`Host_`] will perform string</span>\n<span class=\"w\">        </span><span class=\"sd\">/// lookups for all exports when this method is called. This</span>\n<span class=\"w\">        </span><span class=\"sd\">/// will only succeed if the provided instance matches the</span>\n<span class=\"w\">        </span><span class=\"sd\">/// requirements of [`Host_`].</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new_instance</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Instance</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_instance</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">ok_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">__private</span><span class=\"p\">::</span><span class=\"n\">must_use</span><span class=\"p\">({</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">__private</span><span class=\"p\">::</span><span class=\"n\">format_err</span><span class=\"p\">(</span>\n<span class=\"w\">                        </span><span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"s\">\"no function export `run` found\"</span><span class=\"p\">),</span>\n<span class=\"w\">                    </span><span class=\"p\">);</span>\n<span class=\"w\">                    </span><span class=\"n\">error</span>\n<span class=\"w\">                </span><span class=\"p\">}))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Uses the indices stored in `self` to load an instance</span>\n<span class=\"w\">        </span><span class=\"sd\">/// of [`Host_`] from the instance provided.</span>\n<span class=\"w\">        </span><span class=\"sd\">///</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Note that at this time this method will additionally</span>\n<span class=\"w\">        </span><span class=\"sd\">/// perform type-checks of all exports.</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">load</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Instance</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Host_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">_instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Host_</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Host_</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Convenience wrapper around [`Host_Pre::new`] and</span>\n<span class=\"w\">        </span><span class=\"sd\">/// [`Host_Pre::instantiate`].</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Host_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_pre</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">Host_Pre</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Convenience wrapper around [`Host_Indices::new_instance`] and</span>\n<span class=\"w\">        </span><span class=\"sd\">/// [`Host_Indices::load`].</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Instance</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Host_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Host_Indices</span><span class=\"p\">::</span><span class=\"n\">new_instance</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">indices</span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 472892311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727355988
    },
    {
        "content": "<p>esarver <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9315#issuecomment-2376993863\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9315\">issue #9315</a>:</p>\n<blockquote>\n<p>The issue appears to be in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/lib.rs#L2608\"><code>wasmtime/crates/wit-bindgen/src/lib.rs</code></a></p>\n<p>I'll try making a quick change to see if I can get it to work and then submit a PR.</p>\n</blockquote>",
        "id": 472898617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727357638
    },
    {
        "content": "<p>esarver edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9315#issuecomment-2376993863\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9315\">issue #9315</a>:</p>\n<blockquote>\n<p>The issue appears to be in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/lib.rs#L2608\"><code>wasmtime/crates/wit-bindgen/src/lib.rs:2608</code></a></p>\n<p>I'll try making a quick change to see if I can get it to work and then submit a PR.</p>\n</blockquote>",
        "id": 472898709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727357656
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9315\">issue #9315</a>:</p>\n<blockquote>\n<h2>Problem Description</h2>\n<p>I created a simple <code>host.wit</code> file to start playing with the component model in an embedded runtime. In this file, I created a world by the name <code>host</code>. I was following the examples in the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/_1_world_imports/index.html\">wasmtime bindgen examples</a> and got an error stating that <code>HostImports</code> did not exist but there was a similar trait named <code>Host_Imports</code> (see build output below). I changed my trait impl to the one shown below and got an error stating that <code>bindgen</code> was creating some code that referenced <code>HostImports</code>. </p>\n<p>If I change the world name to anything else, the problem goes away.</p>\n<h2>Identified Problem Area</h2>\n<p>I found that there is a function in <code>wasmtime/crates/wit-bindgen/src/rust.rs</code> called <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/rust.rs#L420-L427\"><code>to_rust_upper_camel_case</code></a> that uses <code>Host_</code> if the provided <code>name</code> is <code>host</code>. This is not being used consistently somewhere.</p>\n<h2>Project Files</h2>\n<p>Here are my project files that replicate the issue, along with the <code>cargo expand</code> output that shows the code with an issue (collapsed to improve readability of this ticket). </p>\n<h3><code>./Cargo.toml</code></h3>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"host\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"25.0.1\"</span>\n<span class=\"n\">wit-bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.32.0\"</span>\n</code></pre></div>\n<h3><code>./wit/host.wit</code></h3>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package system:system;\n\nworld host {\n    import print: func(msg: string);\n    export run: func();\n}\n</code></pre></div>\n<h3><code>./src/main.rs</code></h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"host\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">State</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Host_Imports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{msg}\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;</p>\n<h3>Expanded <code>main.rs</code></h3>\n<p>&lt;/summary&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(prelude_import)]</span>\n<span class=\"cp\">#[prelude_import]</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">prelude</span><span class=\"p\">::</span><span class=\"n\">rust_2021</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"cp\">#[macro_use]</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"sd\">/// Auto-generated bindings for a pre-instantiated version of a</span>\n<span class=\"sd\">/// component which implements the world `host`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// This structure is created through [`Host_Pre::new`] which</span>\n<span class=\"sd\">/// takes a [`InstancePre`](wasmtime::component::InstancePre) that</span>\n<span class=\"sd\">/// has been created through a [`Linker`](wasmtime::component::Linker).</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// For more information see [`Host_`] as well.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host_Pre</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">instance_pre</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">InstancePre</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">indices</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Host_Indices</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host_Pre</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">instance_pre</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">instance_pre</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">indices</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">indices</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host_Pre</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Creates a new copy of `Host_Pre` bindings which can then</span>\n<span class=\"w\">    </span><span class=\"sd\">/// be used to instantiate into a particular store.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// This method may fail if the component behind `instance_pre`</span>\n<span class=\"w\">    </span><span class=\"sd\">/// does not have the required exports.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">instance_pre</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">InstancePre</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Host_Indices</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">instance_pre</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">instance_pre</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">engine</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instance_pre</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instance_pre</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">InstancePre</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instance_pre</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Instantiates a new instance of [`Host_`] within the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// `store` provided.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// This function will use `self` as the pre-instantiated</span>\n<span class=\"w\">    </span><span class=\"sd\">/// instance to perform instantiation. Afterwards the preloaded</span>\n<span class=\"w\">    </span><span class=\"sd\">/// indices in `self` are used to lookup all exports on the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// resulting instance.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Host_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instance_pre</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">indices</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"sd\">/// Auto-generated bindings for index of the exports of</span>\n<span class=\"sd\">/// `host`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// This is an implementation detail of [`Host_Pre`] and can</span>\n<span class=\"sd\">/// be constructed if needed as well.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// For more information see [`Host_`] as well.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">ComponentExportIndex</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[automatically_derived]</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">clone</span><span class=\"p\">::</span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">clone</span><span class=\"p\">::</span><span class=\"nb\">Clone</span><span class=\"p\">::</span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"sd\">/// Auto-generated bindings for an instance a component which</span>\n<span class=\"sd\">/// implements the world `host`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// This structure can be created through a number of means</span>\n<span class=\"sd\">/// depending on your requirements and what you have on hand:</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// * The most convenient way is to use</span>\n<span class=\"sd\">///   [`Host_::instantiate`] which only needs a</span>\n<span class=\"sd\">///   [`Store`], [`Component`], and [`Linker`].</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// * Alternatively you can create a [`Host_Pre`] ahead of</span>\n<span class=\"sd\">///   time with a [`Component`] to front-load string lookups</span>\n<span class=\"sd\">///   of exports once instead of per-instantiation. This</span>\n<span class=\"sd\">///   method then uses [`Host_Pre::instantiate`] to</span>\n<span class=\"sd\">///   create a [`Host_`].</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// * If you've instantiated the instance yourself already</span>\n<span class=\"sd\">///   then you can use [`Host_::new`].</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// * You can also access the guts of instantiation through</span>\n<span class=\"sd\">///   [`Host_Indices::new_instance`] followed</span>\n<span class=\"sd\">///   by [`Host_Indices::load`] to crate an instance of this</span>\n<span class=\"sd\">///   type.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// These methods are all equivalent to one another and move</span>\n<span class=\"sd\">/// around the tradeoff of what work is performed when.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// [`Store`]: wasmtime::Store</span>\n<span class=\"sd\">/// [`Component`]: wasmtime::component::Component</span>\n<span class=\"sd\">/// [`Linker`]: wasmtime::component::Linker</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host_</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Func</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Host_Imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Host_ImportsGetHost</span><span class=\"o\">&lt;</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Host_ImportsGetHost</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Host_Imports</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host_ImportsGetHost</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">F</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">O</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">O</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Host_Imports</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Host_Imports</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host_Imports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Host_Imports</span><span class=\"p\">::</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Creates a new copy of `Host_Indices` bindings which can then</span>\n<span class=\"w\">        </span><span class=\"sd\">/// be used to instantiate into a particular store.</span>\n<span class=\"w\">        </span><span class=\"sd\">///</span>\n<span class=\"w\">        </span><span class=\"sd\">/// This method may fail if the component does not have the</span>\n<span class=\"w\">        </span><span class=\"sd\">/// required exports.</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_component</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">export_index</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">ok_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">__private</span><span class=\"p\">::</span><span class=\"n\">must_use</span><span class=\"p\">({</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">__private</span><span class=\"p\">::</span><span class=\"n\">format_err</span><span class=\"p\">(</span>\n<span class=\"w\">                        </span><span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"s\">\"no function export `run` found\"</span><span class=\"p\">),</span>\n<span class=\"w\">                    </span><span class=\"p\">);</span>\n<span class=\"w\">                    </span><span class=\"n\">error</span>\n<span class=\"w\">                </span><span class=\"p\">}))</span><span class=\"o\">?</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Creates a new instance of [`Host_Indices`] from an</span>\n<span class=\"w\">        </span><span class=\"sd\">/// instantiated component.</span>\n<span class=\"w\">        </span><span class=\"sd\">///</span>\n<span class=\"w\">        </span><span class=\"sd\">/// This method of creating a [`Host_`] will perform string</span>\n<span class=\"w\">        </span><span class=\"sd\">/// lookups for all exports when this method is called. This</span>\n<span class=\"w\">        </span><span class=\"sd\">/// will only succeed if the provided instance matches the</span>\n<span class=\"w\">        </span><span class=\"sd\">/// requirements of [`Host_`].</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new_instance</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Instance</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_instance</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">ok_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">__private</span><span class=\"p\">::</span><span class=\"n\">must_use</span><span class=\"p\">({</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">__private</span><span class=\"p\">::</span><span class=\"n\">format_err</span><span class=\"p\">(</span>\n<span class=\"w\">                        </span><span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"s\">\"no function export `run` found\"</span><span class=\"p\">),</span>\n<span class=\"w\">                    </span><span class=\"p\">);</span>\n<span class=\"w\">                    </span><span class=\"n\">error</span>\n<span class=\"w\">                </span><span class=\"p\">}))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Host_Indices</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Uses the indices stored in `self` to load an instance</span>\n<span class=\"w\">        </span><span class=\"sd\">/// of [`Host_`] from the instance provided.</span>\n<span class=\"w\">        </span><span class=\"sd\">///</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Note that at this time this method will additionally</span>\n<span class=\"w\">        </span><span class=\"sd\">/// perform type-checks of all exports.</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">load</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Instance</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Host_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">_instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Host_</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Host_</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Convenience wrapper around [`Host_Pre::new`] and</span>\n<span class=\"w\">        </span><span class=\"sd\">/// [`Host_Pre::instantiate`].</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">_T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Host_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_pre</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">Host_Pre</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Convenience wrapper around [`Host_Indices::new_instance`] and</span>\n<span class=\"w\">        </span><span class=\"sd\">/// [`Host_Indices::load`].</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Instance</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Host_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Host_Indices</span><span class=\"p\">::</span><span class=\"n\">new_instance</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"k\">in</span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 473362574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727540407
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9315#issuecomment-2380724888\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9315\">issue #9315</a>:</p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9316\">https://github.com/bytecodealliance/wasmtime/pull/9316</a></p>\n</blockquote>",
        "id": 473362576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727540408
    }
]