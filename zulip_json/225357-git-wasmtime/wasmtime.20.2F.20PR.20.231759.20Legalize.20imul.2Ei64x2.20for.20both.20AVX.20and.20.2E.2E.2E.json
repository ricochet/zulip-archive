[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 198790999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590512101
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 198791451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590512328
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 198792760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590513081
    },
    {
        "content": "<p><strong>abrown</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> as ready for review.</p>",
        "id": 198797142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590515274
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a>.</p>",
        "id": 198797178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590515282
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 198797965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590515718
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 198803516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590518448
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 198912874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590595100
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 198913137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590595215
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 199235105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590808460
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#pullrequestreview-422777307\">PR Review</a>.</p>",
        "id": 199517710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591115127
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#pullrequestreview-422777307\">PR Review</a>.</p>",
        "id": 199517712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591115127
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r433951802\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: each</p>\n</blockquote>",
        "id": 199517713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591115127
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r433951319\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: double \"the\" here</p>\n</blockquote>",
        "id": 199517714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591115127
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r433959565\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this not be expressed as a standard legalization, with an ISA predicate on these two flags, in the meta-language? Then, the SSE2 expansion would just be put thereafter, so that isel would use the AVX legalization if it's there, or the SSE2 otherwise.</p>\n</blockquote>",
        "id": 199517715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591115127
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r433957178\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If this comment is right, could we safely put an <code>unreachable!</code> statement here? (Otherwise, this custom legalization will be silently triggered and do nothing for other imul variants, resulting in correctness issues, if i remember correctly)</p>\n</blockquote>",
        "id": 199517716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591115127
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r434010361\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It would be nice to comment a bit how this works, especially since pmuludq does a multiplication of the first and third double-word in each operand and puts the result in the first and second quadwords, if I understand correctly Intel's documentation.</p>\n</blockquote>",
        "id": 199517718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591115127
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#pullrequestreview-423007051\">PR Review</a>.</p>",
        "id": 199543610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591127359
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r434136702\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't see how this is possible with the current API in <code>xform.rs</code>. If we added a way to guard legalizations with predicates then, yes, but it looks to me like this doesn't exist yet.</p>\n</blockquote>",
        "id": 199543611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591127359
    },
    {
        "content": "<p>lars-t-hansen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#pullrequestreview-423294494\">PR Review</a>.</p>",
        "id": 199587946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591169990
    },
    {
        "content": "<p>lars-t-hansen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r434369115\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This doesn't look quite right to me but it may be possible I'm misunderstanding because I don't know the Cranelift IR.  The result of addhigh looks right, it looks like it has the results for the high dwords of the result qwords in its low two dwords, ie the upper two dwords are garbage.  But the value of 'high' isn't right I think, at least I can't make either psllq or pslldq work here - some kind of shuffle might work.  The computation of low computes the two low dwords of the result qwords correctly in the two low dwords, but simply adding them in won't work even if high was correct, they again need to be shuffled into their correct places.  Instead of shift and add it looks like an unpack might work (this is untested):</p>\n<div class=\"codehilite\"><pre><span></span><code>  // lhsDest = D C B A\n  // rhs = H G F E\n  mov(lhsDest, high0);       // high0 = D C B A\n  psrlq(32, high0);          // high0 = 0 D 0 B\n  pmuludq(rhs, high0);       // high0 = 0 D CG BE\n  mov(rhs, high1);           // high1 = H G F E\n  psrlq(32, high1);          // high1 = 0 H 0 F\n  pmuludq(lhsDest, high1);   // high1 = 0 H CH AF\n  paddq(high0, high1);       // high1 = 0 D+H CG+CH BE+AF\n  pmuludq(rhs, lhsDest);     // lhsDest = D C CG AE\n  punpckldq(high1, lhsDest); // lhsDest = CG+CH CG BE+AF AE\n</code></pre></div>\n\n\n</blockquote>",
        "id": 199587947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591169990
    },
    {
        "content": "<p>lars-t-hansen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r434369115\">PR Review Comment</a>.</p>",
        "id": 199588573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591170457
    },
    {
        "content": "<p>lars-t-hansen deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r434369115\">PR Review Comment</a>.</p>",
        "id": 199589504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591171188
    },
    {
        "content": "<p>lars-t-hansen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#pullrequestreview-423310609\">PR Review</a>.</p>",
        "id": 199589808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591171338
    },
    {
        "content": "<p>lars-t-hansen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r434381636\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Benjamin asked me to take a look.  Initially I had a comment here where I indicated I thought this was wrong, but I see I misunderstood something, and I now think this looks right to me.</p>\n</blockquote>",
        "id": 199589809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591171338
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#discussion_r434593136\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I thought about encodings (which <em>can</em> be guarded against isa predicates), so this code is correct.</p>\n</blockquote>",
        "id": 199623424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591193121
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#pullrequestreview-423588121\">PR Review</a>.</p>",
        "id": 199623426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591193122
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759#pullrequestreview-423590970\">PR Review</a>.</p>",
        "id": 199623808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591193296
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 199642321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591201662
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a> from <code>i64x2-mul</code> to <code>master</code>:</p>\n<blockquote>\n<p>The <code>convert_i64x2_imul</code> custom legalization checks the ISA flags for AVX512DQ or AVX512VL support and legalizes <code>imul.i64x2</code> to an <code>x86_pmullq</code> in this case; if not, it uses a lengthy SSE2-compatible instruction sequence. For this logic to work, we need:</p>\n<ul>\n<li>the AVX512 instruction to be defined as a separate Cranelift instruction, <code>x86_pmullq</code> (this additional instruction would go away in the new backend)</li>\n<li>a mechanism for accessing the x86 <code>TargetIsa</code> so that we can inspect its flags during legalization</li>\n<li>a new SSE2 instruction, <code>x86_pmuludq</code> for implementing the SSE2-compatible instruction sequence</li>\n</ul>\n</blockquote>",
        "id": 199683674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591222393
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1759\">PR #1759</a>.</p>",
        "id": 199689864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591226879
    }
]