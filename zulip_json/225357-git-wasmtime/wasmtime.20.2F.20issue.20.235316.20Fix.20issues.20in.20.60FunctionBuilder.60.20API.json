[
    {
        "content": "<p>Rodrigodd <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316#issuecomment-1323997596\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316\">issue #5316</a>:</p>\n<blockquote>\n<p>Pinging @jameysharp because it is the one that I talked about this.</p>\n</blockquote>",
        "id": 311666139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669137042
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316#issuecomment-1324014104\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316\">issue #5316</a>:</p>\n<blockquote>\n<p>The <code>func</code> fields needs to be mutable for cg_clif. module.declare_func_in_func() needs it as well as a hack I use to support variadic functions (<a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/a449d0d1431b789adf7c4c27e0db028ad2218a4a/src/abi/mod.rs#L542\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/a449d0d1431b789adf7c4c27e0db028ad2218a4a/src/abi/mod.rs#L542</a>) Others may have other reasons to directly modify the function.</p>\n<blockquote>\n<p>The distinction is that even if you call func_mut(), you can only change the contents of the Function.</p>\n</blockquote>\n<p><code>*builder.func_mut() = Function::new()</code> is allowed and replaces the entirety of the function.</p>\n</blockquote>",
        "id": 311668816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669137837
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316#issuecomment-1324056802\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316\">issue #5316</a>:</p>\n<blockquote>\n<p>Oh, right, it doesn't let you change where the pointer points, but it does let you change what it points to in any way you want. I guess then that's only useful to highlight those call-sites which might break <code>FunctionBuilder</code>s invariants. Which is still worth something, but maybe not enough to justify the change.</p>\n<p>I don't understand your other comments though, @bjorn3. As far as I can tell, the callers of <code>Module::declare_func_in_func</code> and the line you pointed to in <code>codegen_terminator_call</code> are all well-supported by the <code>func_mut()</code> accessor.</p>\n<p>Regarding the <code>finalize()</code> call in cg-clif's <code>codegen_fn_body</code>: do you mind changing that to let <code>finalize</code> consume the <code>FunctionBuilder</code>? It looks to me like passing <code>bcx</code> as an argument instead of keeping it in <code>fx</code> might not be too invasive of a change, for example.</p>\n</blockquote>",
        "id": 311676294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669140130
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316#issuecomment-1324068420\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316\">issue #5316</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't understand your other comments though, @bjorn3. As far as I can tell, the callers of Module::declare_func_in_func and the line you pointed to in codegen_terminator_call are all well-supported by the func_mut() accessor.</p>\n</blockquote>\n<p>They are. I was just saying that <code>func_mut()</code> doesn't prevent replacing the Function unlike what you said.</p>\n<blockquote>\n<p>Regarding the finalize() call in cg-clif's codegen_fn_body: do you mind changing that to let finalize consume the FunctionBuilder? It looks to me like passing bcx as an argument instead of keeping it in fx might not be too invasive of a change, for example.</p>\n</blockquote>\n<p>Passing bcx as argument would require passing it everywhere. What would work though is to move the finalize() call to the caller of codegen_fn_body. I did have to move it out of the <code>tcx.sess.time(\"codegen clif ir\")</code> call too which would slightly regress accuracy of performance measurements, but that isn't a big deal as I expect <code>finalize()</code> to be much cheaper than the rest of codegen_fn_body.</p>\n</blockquote>",
        "id": 311678192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669140762
    },
    {
        "content": "<p>Rodrigodd <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316#issuecomment-1324101457\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316\">issue #5316</a>:</p>\n<blockquote>\n<p>fixed a warning</p>\n</blockquote>",
        "id": 311684414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669142669
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316#issuecomment-1325715674\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316\">issue #5316</a>:</p>\n<blockquote>\n<p>I chatted with @cfallin to double-check my reasoning. @Rodrigodd, please drop the second commit (getters for <code>FunctionBuilder::func</code>), and I'll merge the first one (making <code>finalize</code> consume <code>self</code>).</p>\n<p>Limiting access to the <code>func</code> field has some value, even though it doesn't prevent any bugs since <code>func_mut()</code> allows effectively the same thing; at least uses of <code>func_mut</code> mark where such bugs could occur. However, we concluded that's not enough to justify a breaking API change that's somewhat tedious to fix.</p>\n<p>Forcing <code>FunctionBuilder</code> to be a short-lived borrow of the <code>FunctionBuilderContext</code>, on the other hand, has minimal impact on callers and clarifies how these types are intended to be used, so that change is worth doing.</p>\n</blockquote>",
        "id": 311914763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669241458
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316#issuecomment-1325759222\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5316\">issue #5316</a>:</p>\n<blockquote>\n<p>Thank you!</p>\n</blockquote>",
        "id": 311920194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669245189
    }
]