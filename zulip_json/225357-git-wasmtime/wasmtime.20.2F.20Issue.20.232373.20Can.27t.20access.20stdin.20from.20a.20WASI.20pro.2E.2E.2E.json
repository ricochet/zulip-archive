[
    {
        "content": "<p>flavio edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>I hope I'm opening this bug on the right GitHub repo, if not please forgive me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I've written a simple \"echo\" program using <a href=\"https://www.assemblyscript.org\">AssemblyScript</a> and <a href=\"https://github.com/jedisct1/as-wasi\">as-wasi</a>. The program reads the user input from STDIN and writes it back to STDOUT.</p>\n<p>Unfortunately it looks like I can never get back the input I enter.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>This the source code of the AssemblyScript program I'm running:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"s2\">\"wasi\"</span>\n\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">Console</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">\"as-wasi\"</span>\n\n<span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"type something\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">input</span>: <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">msg</span> : <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"nothing\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">readAll</span><span class=\"p\">();</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">input</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"nx\">input</span><span class=\"o\">!</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'I got: '</span> <span class=\"o\">+</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The program can be compiled to a WASM binary by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ asc echo.ts -b echo.wasm\n</code></pre></div>\n<p>And it can be run in this way:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ wasmtime run echo.wasm\n</code></pre></div>\n<p>The program will start and I'll be able to enter my text. The program will keep reading from STDIN until I send the <code>EOF</code> symbol (I'm on Linux -&gt; <code>CTRL-D</code>).</p>\n<p>Unfortunately the <code>input</code> variable is always <code>null</code>.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>I would expect the WASM program to be able to read data from stdin. The <code>input</code> object should hold the text I entered on my terminal.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>This is my stack:</p>\n<p>* wasmtime: 0.21.0<br>\n  * AssemblyScript: 0.17.1<br>\n  * <code>as-wasi</code>: 0.4.0</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>I'm running on a x86_64 Linux box that has openSUSE Tumbleweed</p>\n<p>More information...</p>\n<p>The <code>as-wasi</code> handles STDIN/STDOUT/STDERR by using instances of the <a href=\"https://github.com/jedisct1/as-wasi/blob/master/REFERENCE_API_DOCS.md#class-descriptor\">Descriptor</a> class. The library simply opens the file descriptor <code>0</code> for STDIN, <code>1</code> for STDOUT and <code>2</code> for STDERR. In my tests it looks like opening the file descriptor <code>0</code> always returns a <code>null</code> instance of <code>Descriptor</code>; this doesn't happen with STDOUT and STDERR.</p>\n<p>The same issue happens also when running the program through a custom made Go program I wrote leveraging <code>wasmtime-go</code>. <br>\nIn that case I even tried to start the WASM binary not by inheriting the parent STDIN, but instead by using a text file I previously created. Also in this case the WASM binary got a <code>null</code> object when reading from the STDIN.</p>\n<p><strong>Relevant:</strong> a similar WASM binary, generated by translating Rust -&gt; WASM, just works as expected.</p>\n<p>Thanks for any kind of help you can give me. I gotta say, WebAssembly and wasmtime are really cool :)</p>\n</blockquote>",
        "id": 215887262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604688143
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-723260418\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Thanks for the report! This seems like it may be an issue with the wasi support in AssemblyScript possibly, so I'm gonna loop in @torch2424 to see if they can help (or help point you in the right direction)</p>\n</blockquote>",
        "id": 215893074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604691137
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-723265315\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Could it be <a href=\"https://github.com/jedisct1/as-wasi/blob/5c047fd98f62ba3fbc79b5700690ece87e2be3d7/assembly/as-wasi.ts#L397\">this line</a> that returns null when bytes read = 0?</p>\n</blockquote>",
        "id": 215894527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604691797
    },
    {
        "content": "<p>torch2424 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-723308118\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Thanks for looping me in @alexcrichton <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>And yes, @peterhuene , I bet it's falling through to the bottom to return 0 <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<hr>\n<p>@flavio I was able to reproduce this, and what caught my interest was:</p>\n<blockquote>\n<p>The as-wasi handles STDIN/STDOUT/STDERR by using instances of the Descriptor class. The library simply opens the file descriptor 0 for STDIN, 1 for STDOUT and 2 for STDERR. In my tests it looks like opening the file descriptor 0 always returns a null instance of Descriptor; this doesn't happen with STDOUT and STDERR.</p>\n</blockquote>\n<p>So! Yes, in most instances, I've personally noticed stdin was represent by 0. Or perhaps it does on Mac? </p>\n<p>But! If you can't get a file descriptor for stdin at 0, then yes it could totally be the cause of this bug. </p>\n<p>cc @jedisct1 , as they are the author of as-wasi, and they may have a better hunch than me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n</blockquote>",
        "id": 215906356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604698149
    },
    {
        "content": "<p>flavio <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-723339143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>@torch2424 it's fine on Unix to have the STDIN -&gt; 0, STDOUT -&gt; 1 and STDERR -&gt; 2. I'm not surprised by that :)</p>\n</blockquote>",
        "id": 215915401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604703989
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-723265315\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Could it be <a href=\"https://github.com/jedisct1/as-wasi/blob/5c047fd98f62ba3fbc79b5700690ece87e2be3d7/assembly/as-wasi.ts#L397\">this line</a> that returns null when bytes read = 0 (i.e it always returns null because it'll read a 0 to indicate end of stream)?</p>\n</blockquote>",
        "id": 215915557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604704101
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-723344394\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Yes, STDIN-&gt;0, STDOUT-&gt;1, STDERR-&gt;2 is true of WASI today, so it's fine to rely on for now.</p>\n<p>That said, this is something that may change in the future, at the WASI level. The 0,1,2 values are <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/stdout.html\">required in POSIX</a> so we'll always need a way to let applications that need this numbering to get it, but we may also want more flexibility for applications that don't need it.</p>\n</blockquote>",
        "id": 215916821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604705151
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-724306120\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Hi,</p>\n<p>This is a misunderstanding of what the <code>readAll()</code> function does in <code>as-wasi</code>, and the behavior would be the same with any runtime.</p>\n<p>The <code>readAll()</code> function reads a stream until the end. And a newline doesn't indicate the end of a stream.</p>\n<p><code>stdin</code> is an endless stream, unless it is manually closed from a console (Control-D), or the content of a file has been redirected to it (<code>command &lt; file.txt</code>) and the whole file has been read.</p>\n<p>In order to read a line of text, you need to read bytes until you reach a <code>\\n</code> or <code>\\r\\n</code> sequence.</p>\n<p>The current version of <code>as-wasi</code> includes a <code>readLine()</code> function (both in <code>Descriptor</code> and <code>Console</code>) that reads a line of text, and converts it into an AssemblyScript string. This is probably the function you should use here.</p>\n</blockquote>",
        "id": 216148960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604959560
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-724312016\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Perhaps I misunderstood, but I don't think there was confusion over a newline causing a termination of the stream.</p>\n<p>I think the problem is that @flavio was observing <code>null</code> returned even with a CTRL-D.</p>\n<p>I believe <a href=\"https://github.com/jedisct1/as-wasi/blob/5c047fd98f62ba3fbc79b5700690ece87e2be3d7/assembly/as-wasi.ts#L397\">this line</a> is the cause, at least assuming that the stdin descriptor was opened correctly.</p>\n<p>This code appears to buffer the stream until <code>fd_read</code> returns 0, at which point it returns <code>null</code> instead of the buffered input.</p>\n</blockquote>",
        "id": 216150194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604960324
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-724312016\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Perhaps I misunderstood, but I don't think there was confusion over a newline causing a termination of the stream.</p>\n<p>I think the problem is that @flavio was observing <code>null</code> returned even with a CTRL-D.</p>\n<p>I believe <a href=\"https://github.com/jedisct1/as-wasi/blob/5c047fd98f62ba3fbc79b5700690ece87e2be3d7/assembly/as-wasi.ts#L397\">this line</a> is the cause, at least assuming that the stdin descriptor was opened correctly.</p>\n<p>This code appears to buffer the stream until <code>fd_read</code> returns 0, at which point it returns <code>null</code> instead of the buffered input.</p>\n<p>Also, it should probably reset the <code>read</code> variable each iteration (or simply return <code>null</code> for an error returned by <code>fd_read</code> rather than the <code>break</code>) otherwise a successful read followed by an error will result in partial data being returned rather than <code>null</code>.</p>\n</blockquote>",
        "id": 216150630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604960641
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-724312016\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Perhaps I misunderstood, but I don't think there was confusion over a newline causing a termination of the stream.</p>\n<p>I think the problem is that @flavio was observing <code>null</code> returned even with a CTRL-D.</p>\n<p>I believe <a href=\"https://github.com/jedisct1/as-wasi/blob/5c047fd98f62ba3fbc79b5700690ece87e2be3d7/assembly/as-wasi.ts#L397\">this line</a> is the cause, at least assuming that the stdin descriptor was opened correctly.</p>\n<p>This code appears to buffer the stream until <code>fd_read</code> returns 0 bytes read, at which point it returns <code>null</code> instead of the buffered input.</p>\n<p>Also, it should probably reset the <code>read</code> variable each iteration (or simply return <code>null</code> for an error returned by <code>fd_read</code> rather than the <code>break</code>) otherwise a successful read followed by an error will result in partial data being returned rather than <code>null</code>.</p>\n</blockquote>",
        "id": 216150740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604960700
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-724312016\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Perhaps I misunderstood, but I don't think there was confusion over a newline causing a termination of the stream.</p>\n<p>I think the problem is that @flavio was observing <code>null</code> returned from <code>readAll</code> even with a CTRL-D.</p>\n<p>I believe <a href=\"https://github.com/jedisct1/as-wasi/blob/5c047fd98f62ba3fbc79b5700690ece87e2be3d7/assembly/as-wasi.ts#L397\">this line</a> is the cause, at least assuming that the stdin descriptor was opened correctly.</p>\n<p>This code appears to buffer the stream until <code>fd_read</code> returns 0 bytes read, at which point it returns <code>null</code> instead of the buffered input.</p>\n<p>Also, it should probably reset the <code>read</code> variable each iteration (or simply return <code>null</code> for an error returned by <code>fd_read</code> rather than the <code>break</code>) otherwise a successful read followed by an error will result in partial data being returned rather than <code>null</code>.</p>\n</blockquote>",
        "id": 216151306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604961080
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-724369574\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Since this is unrelated to wasmtime, maybe the issue should be discussed on the <code>as-wasi</code> repository instead?</p>\n</blockquote>",
        "id": 216160338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604968275
    },
    {
        "content": "<p>flavio <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-724540113\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think the problem is that @flavio was observing <code>null</code> returned from <code>readAll</code> even with a CTRL-D.</p>\n</blockquote>\n<p>Yes, exactly.</p>\n<p>@jedisct1, sure if you want I can close this issue and open a new one one the <code>as-wasi</code> repository</p>\n</blockquote>",
        "id": 216181428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604996200
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373#issuecomment-730546655\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>Thanks for opening the issue there, @flavio.  I'll close this issue for now in favor of <a href=\"https://github.com/jedisct1/as-wasi/issues/95\">jedisct1/as-wasi#95</a>.</p>\n</blockquote>",
        "id": 217308519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605809322
    },
    {
        "content": "<p>peterhuene closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2373\">Issue #2373</a>:</p>\n<blockquote>\n<p>I hope I'm opening this bug on the right GitHub repo, if not please forgive me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I've written a simple \"echo\" program using <a href=\"https://www.assemblyscript.org\">AssemblyScript</a> and <a href=\"https://github.com/jedisct1/as-wasi\">as-wasi</a>. The program reads the user input from STDIN and writes it back to STDOUT.</p>\n<p>Unfortunately it looks like I can never get back the input I enter.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>This the source code of the AssemblyScript program I'm running:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"s2\">\"wasi\"</span>\n\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">Console</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">\"as-wasi\"</span>\n\n<span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"type something\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">input</span>: <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">msg</span> : <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"nothing\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">readAll</span><span class=\"p\">();</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">input</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"nx\">input</span><span class=\"o\">!</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'I got: '</span> <span class=\"o\">+</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The program can be compiled to a WASM binary by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ asc echo.ts -b echo.wasm\n</code></pre></div>\n<p>And it can be run in this way:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ wasmtime run echo.wasm\n</code></pre></div>\n<p>The program will start and I'll be able to enter my text. The program will keep reading from STDIN until I send the <code>EOF</code> symbol (I'm on Linux -&gt; <code>CTRL-D</code>).</p>\n<p>Unfortunately the <code>input</code> variable is always <code>null</code>.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>I would expect the WASM program to be able to read data from stdin. The <code>input</code> object should hold the text I entered on my terminal.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>This is my stack:</p>\n<p>* wasmtime: 0.21.0<br>\n  * AssemblyScript: 0.17.1<br>\n  * <code>as-wasi</code>: 0.4.0</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>I'm running on a x86_64 Linux box that has openSUSE Tumbleweed</p>\n<p>More information...</p>\n<p>The <code>as-wasi</code> handles STDIN/STDOUT/STDERR by using instances of the <a href=\"https://github.com/jedisct1/as-wasi/blob/master/REFERENCE_API_DOCS.md#class-descriptor\">Descriptor</a> class. The library simply opens the file descriptor <code>0</code> for STDIN, <code>1</code> for STDOUT and <code>2</code> for STDERR. In my tests it looks like opening the file descriptor <code>0</code> always returns a <code>null</code> instance of <code>Descriptor</code>; this doesn't happen with STDOUT and STDERR.</p>\n<p>The same issue happens also when running the program through a custom made Go program I wrote leveraging <code>wasmtime-go</code>. <br>\nIn that case I even tried to start the WASM binary not by inheriting the parent STDIN, but instead by using a text file I previously created. Also in this case the WASM binary got a <code>null</code> object when reading from the STDIN.</p>\n<p><strong>Relevant:</strong> a similar WASM binary, generated by translating Rust -&gt; WASM, just works as expected.</p>\n<p>Thanks for any kind of help you can give me. I gotta say, WebAssembly and wasmtime are really cool :)</p>\n</blockquote>",
        "id": 217308521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605809323
    }
]