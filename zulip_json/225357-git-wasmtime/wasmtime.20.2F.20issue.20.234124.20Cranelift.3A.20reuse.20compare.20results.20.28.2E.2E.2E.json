[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124\">issue #4124</a>:</p>\n<blockquote>\n<p>Currently, in both the x64 and aarch64 backends, we generate flags \"locally\" whenever needed. So, for example, the sequence</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">brnz</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">blockN</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">blockM</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would generate the compare for <code>v0</code> twice.</p>\n<p>This is generally a simplification over the old <code>iflags</code> approach, which we prefer for some of the reasons described in #3249. In particular, <code>iflags</code>-typed values are \"weird\" (cannot be stored or loaded, only one can be live at a time, cannot be directly observed) and these restrictions complicate other analyses/transforms. The tradeoff of effectively regenerating them on each use has been reasonable so far.</p>\n<p>However, locally in cases where we do use the results of a compare more than once, we should be able to share a single compare operation. We might be able to reason about this by building a forward pass that tracks the last generated flags and using this information from within the backend's pattern-matching. For extra credit, we might be able to factor this information into the \"unique use\" framework, allowing a compare with multiple uses but only one codegen'd occurrence to merge load operations directly on x64.</p>\n</blockquote>",
        "id": 281892326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652220225
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124\">issue #4124</a>:</p>\n<blockquote>\n<p>Currently, in both the x64 and aarch64 backends, we generate flags \"locally\" whenever needed. So, for example, the sequence</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">brnz</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">blockN</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">blockM</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would generate the compare for <code>v0</code> twice.</p>\n<p>This is generally a simplification over the old <code>iflags</code> approach, which we prefer for some of the reasons described in #3249. In particular, <code>iflags</code>-typed values are \"weird\" (cannot be stored or loaded, only one can be live at a time, cannot be directly observed) and these restrictions complicate other analyses/transforms. The tradeoff of effectively regenerating them on each use has been reasonable so far.</p>\n<p>However, locally in cases where we do use the results of a compare more than once, we should be able to share a single compare operation. We might be able to reason about this by building a forward pass that tracks the last generated flags and using this information from within the backend's pattern-matching. For extra credit, we might be able to factor this information into the \"unique use\" framework, allowing a compare with multiple uses but only one codegen'd occurrence to merge load operations directly on x64.</p>\n</blockquote>",
        "id": 281892327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652220225
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124\">issue #4124</a>:</p>\n<blockquote>\n<p>Currently, in both the x64 and aarch64 backends, we generate flags \"locally\" whenever needed. So, for example, the sequence</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">brnz</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">blockN</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">blockM</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would generate the compare for <code>v0</code> twice.</p>\n<p>This is generally a simplification over the old <code>iflags</code> approach, which we prefer for some of the reasons described in #3249. In particular, <code>iflags</code>-typed values are \"weird\" (cannot be stored or loaded, only one can be live at a time, cannot be directly observed) and these restrictions complicate other analyses/transforms. The tradeoff of effectively regenerating them on each use has been reasonable so far.</p>\n<p>However, locally in cases where we do use the results of a compare more than once, we should be able to share a single compare operation. We might be able to reason about this by building a forward pass that tracks the last generated flags and using this information from within the backend's pattern-matching. For extra credit, we might be able to factor this information into the \"unique use\" framework, allowing a compare with multiple uses but only one codegen'd occurrence to merge load operations directly on x64.</p>\n</blockquote>",
        "id": 281892328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652220225
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124\">issue #4124</a>:</p>\n<blockquote>\n<p>Currently, in both the x64 and aarch64 backends, we generate flags \"locally\" whenever needed. So, for example, the sequence</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">brnz</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">blockN</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">blockM</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would generate the compare for <code>v0</code> twice.</p>\n<p>This is generally a simplification over the old <code>iflags</code> approach, which we prefer for some of the reasons described in #3249. In particular, <code>iflags</code>-typed values are \"weird\" (cannot be stored or loaded, only one can be live at a time, cannot be directly observed) and these restrictions complicate other analyses/transforms. The tradeoff of effectively regenerating them on each use has been reasonable so far.</p>\n<p>However, locally in cases where we do use the results of a compare more than once, we should be able to share a single compare operation. We might be able to reason about this by building a forward pass that tracks the last generated flags and using this information from within the backend's pattern-matching. For extra credit, we might be able to factor this information into the \"unique use\" framework, allowing a compare with multiple uses but only one codegen'd occurrence to merge load operations directly on x64.</p>\n</blockquote>",
        "id": 281892329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652220225
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124\">issue #4124</a>:</p>\n<blockquote>\n<p>Currently, in both the x64 and aarch64 backends, we generate flags \"locally\" whenever needed. So, for example, the sequence</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">brnz</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">blockN</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">blockM</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would generate the compare for <code>v0</code> twice.</p>\n<p>This is generally a simplification over the old <code>iflags</code> approach, which we prefer for some of the reasons described in #3249. In particular, <code>iflags</code>-typed values are \"weird\" (cannot be stored or loaded, only one can be live at a time, cannot be directly observed) and these restrictions complicate other analyses/transforms. The tradeoff of effectively regenerating them on each use has been reasonable so far.</p>\n<p>However, locally in cases where we do use the results of a compare more than once, we should be able to share a single compare operation. We might be able to reason about this by building a forward pass that tracks the last generated flags and using this information from within the backend's pattern-matching. For extra credit, we might be able to factor this information into the \"unique use\" framework, allowing a compare with multiple uses but only one codegen'd occurrence to merge load operations directly on x64.</p>\n</blockquote>",
        "id": 281892330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652220226
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124#issuecomment-1141957588\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124\">issue #4124</a>:</p>\n<blockquote>\n<p>Are there any plans to enable machine-level optimizations, or scheduling? I feel like there's a high possibility of similar sub-optimal codegen cases where machine-level CSE would be useful for a post-isel cleanup.</p>\n<p>Of course, at least for AArch64, we'd have to change the way we define the flag setting instructions to actually define _something_. I imagine this will also be necessary if we want to verify flag setting isel patterns too.</p>\n</blockquote>",
        "id": 284454764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653992970
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124#issuecomment-1142379365\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124\">issue #4124</a>:</p>\n<blockquote>\n<p>I definitely think there's a place for post-lowering opts of some sort! I've noticed cases where reuse would be possible; for example, address mode lowering will sometimes give up pattern matching and emit a new <code>add</code>, and those <code>add</code>s could be GVN'd together. This issue's topic (reuse flags) is another significant one.</p>\n<p>I'm not sure what the framework would look like yet, though. There is likely a need for both architecture-specific opts and generic ones. Actually I could see most being generic if we're careful: one could define trait methods on <code>MachInst</code> that mean something like \"is a pure binary op\", \"produces flags\", \"consumes flags\", etc, and then the logic to (i) GVN redundant ops at the MachInst level and (ii) remove redundant identical flags producers could be shared.</p>\n<p>As an interesting historical footnote, IIRC a big part of the motivation for the single-level IR in the \"old-style backend\" design was exactly this, that one could optimize the common bits of heap-address computation, etc after legalizing (lowering). There are a bunch of other good reasons for the two-level IR now, and it gives us much better codegen in other ways (any N-to-1 matching case, e.g. address modes), but this is a specific benefit we lost and is something we could improve.</p>\n</blockquote>",
        "id": 284505998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654015755
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124#issuecomment-1143237446\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4124\">issue #4124</a>:</p>\n<blockquote>\n<blockquote>\n<p>Actually I could see most being generic if we're careful: one could define trait methods on MachInst that mean something like \"is a pure binary op\", \"produces flags\", \"consumes flags\"</p>\n</blockquote>\n<p>This is basically how it is done in LLVM. It doesn't matter what the opcode is, as long as it's not marked as doing something other than producing a value, 'pure' in your terms I guess, then a generic pass can do a lot of the work. As long as we still have SSA, we should be able to do quite a bit - but only if the instructions encode enough information.</p>\n<p>Flags tend to be a bit more of a pain though, I've seen it get ugly, quickly, trying to optimise these during isel.</p>\n</blockquote>",
        "id": 284577839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654069837
    }
]