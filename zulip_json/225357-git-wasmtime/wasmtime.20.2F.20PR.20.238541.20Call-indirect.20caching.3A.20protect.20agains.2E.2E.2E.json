[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541\">PR #8541</a> from <code>cfallin:oob-table-index-during-prescan</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>â€¦ng prescan.</p>\n<p>Call-indirect caching requires a \"prescan\" of a module's code section during compilation in order to know which tables are possibly written, and to count call-indirect callsites so that each separate function compilation can enable caching if possible and use the right slot range.</p>\n<p>This prescan is not integrated with the usual validation logic (nor should it be, probably, for performance), so it's possible that an out-of-bounds table index or other illegal instruction could be present. We previously indexed into an internal data structure (<code>table_plans</code>) with this index, allowing for a compilation panic on certain invalid modules before validation would have caught it. This PR fixes that with a one-off check at the single point that we interpret a parameter (the table index) from an instruction during the prescan.</p>\n<p>Fixes <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=68614\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=68614</a>.</p>\n<p>No test case because this requires compilation with non-default parameters, so the usual WAST <code>assert_invalid</code> form can't be used in a WAST test, and requires an invalid module, so a compilation disas test can't be used. Could build out either if desired but that seems like a much larger change.</p>\n</blockquote>",
        "id": 436936324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714760488
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541\">PR #8541</a>.</p>",
        "id": 436936325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714760488
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541\">PR #8541</a>.</p>",
        "id": 436936326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714760488
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541\">PR #8541</a>.</p>",
        "id": 436936356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714760497
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541\">PR #8541</a>:</p>\n<blockquote>\n<p>Call-indirect caching requires a \"prescan\" of a module's code section during compilation in order to know which tables are possibly written, and to count call-indirect callsites so that each separate function compilation can enable caching if possible and use the right slot range.</p>\n<p>This prescan is not integrated with the usual validation logic (nor should it be, probably, for performance), so it's possible that an out-of-bounds table index or other illegal instruction could be present. We previously indexed into an internal data structure (<code>table_plans</code>) with this index, allowing for a compilation panic on certain invalid modules before validation would have caught it. This PR fixes that with a one-off check at the single point that we interpret a parameter (the table index) from an instruction during the prescan.</p>\n<p>Fixes <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=68614\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=68614</a>.</p>\n<p>No test case because this requires compilation with non-default parameters, so the usual WAST <code>assert_invalid</code> form can't be used in a WAST test, and requires an invalid module, so a compilation disas test can't be used. Could build out either if desired but that seems like a much larger change.</p>\n</blockquote>",
        "id": 436936370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714760503
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541#pullrequestreview-2038833488\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n<p>Can you add a test similar to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8544\">https://github.com/bytecodealliance/wasmtime/pull/8544</a>? Basically just assert <code>Module::new</code> returns an error. I was thinking when writing that PR we should add support for custom CLI flags on the <code>*.wast</code> test suite, but that can be added orthogonally to this.</p>\n</blockquote>",
        "id": 436942011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714762770
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541\">PR #8541</a>.</p>",
        "id": 436950653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714766368
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541#issuecomment-2093680257\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541\">PR #8541</a>:</p>\n<blockquote>\n<p>Ah, right, that's the straightforward and obvious way to test this -- thanks! Added.</p>\n</blockquote>",
        "id": 436950682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714766391
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541\">PR #8541</a>.</p>",
        "id": 436950700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714766398
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8541\">PR #8541</a>.</p>",
        "id": 436955351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714768686
    }
]