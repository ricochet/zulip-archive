[
    {
        "content": "<p>gggrafff opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>Hello!  <br>\nI use wasmtime-go. I want to create a module and serialize Module.Serialize() on a first machine, and deserialize Module.NewModuleDeserialize() - on another one. But the machines have different processors (Intel Xeon Silver 4114 vs Intel Xeon E-2276G) and I get the error <code>compilation setting \"has_avx512dq\" is enabled, but not available on the host</code>.  <br>\nWhich <a href=\"https://pkg.go.dev/github.com/bytecodealliance/wasmtime-go#NewConfig\">engine config</a> option should I turn off to ensure compatibility? And is it possible?  <br>\nThanks!  </p>\n</blockquote>",
        "id": 388096918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693399143
    },
    {
        "content": "<p>gggrafff edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>Hello!  <br>\nI use wasmtime-go. I want to create a module and serialize Module.Serialize() on a first machine, and deserialize Module.NewModuleDeserialize() - on another one. But the machines have different processors (Intel Xeon Silver 4114 vs Intel Xeon E-2276G) and I get the error <code>compilation setting \"has_avx512dq\" is enabled, but not available on the host</code>.  <br>\nWhich <a href=\"https://pkg.go.dev/github.com/bytecodealliance/wasmtime-go#NewConfig\">engine config</a> option should I turn to ensure compatibility? And is it possible?  <br>\nThanks!  </p>\n</blockquote>",
        "id": 388101398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693400324
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699123890\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>The Rust api has the target method which will cause it to use the baseline features of the specified target without inferring supported features from the host. It seems like the Go api is missing it. </p>\n</blockquote>",
        "id": 388101730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693400405
    },
    {
        "content": "<p>gggrafff <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699156001\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>@bjorn3 thank you  <br>\nDo you mean this option <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target</a> ?  <br>\nWhere can I read a more detailed description, in what format do I need to pass values for this option and how do I understand what value I need?</p>\n</blockquote>",
        "id": 388106258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693401491
    },
    {
        "content": "<p>gggrafff edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699156001\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>@bjorn3 thank you  <br>\nDo you mean this <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target</a> ?  <br>\nWhere can I read a more detailed description, in what format do I need to pass values for this option and how do I understand what value I need?</p>\n</blockquote>",
        "id": 388106330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693401509
    },
    {
        "content": "<p>gggrafff edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699156001\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>@bjorn3 thank you  <br>\nDo you mean this <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target</a> ?  <br>\nWhere can I read a more detailed description, in what format do I need to pass values for this option and how do I understand what value I need?</p>\n<p>UPD: I found<br>\n<a href=\"https://docs.wasmtime.dev/wasm-rust.html#rust\">https://docs.wasmtime.dev/wasm-rust.html#rust</a></p>\n</blockquote>",
        "id": 388107534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693401819
    },
    {
        "content": "<p>gggrafff edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699156001\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>@bjorn3 thank you  <br>\nDo you mean this <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target</a> ?  <br>\nWhere can I read a more detailed description, in what format do I need to pass values for this option and how do I understand what value I need?</p>\n<p>UPD: I found<br>\n<a href=\"https://docs.wasmtime.dev/wasm-rust.html#rust\">https://docs.wasmtime.dev/wasm-rust.html#rust</a></p>\n<p>UPDUPD: or not, it seems like another targets, not for wasmtime</p>\n</blockquote>",
        "id": 388108486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693402075
    },
    {
        "content": "<p>gggrafff edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699156001\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>@bjorn3 thank you  <br>\nDo you mean this <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.target</a> ?  <br>\nWhere can I read a more detailed description, in what format do I need to pass values for this option and how do I understand what value I need?</p>\n<p>UPD: I found<br>\n<a href=\"https://docs.wasmtime.dev/wasm-rust.html#rust\">https://docs.wasmtime.dev/wasm-rust.html#rust</a></p>\n<p>UPDUPD: or not, it seems like other targets, not for wasmtime</p>\n</blockquote>",
        "id": 388108528,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693402084
    },
    {
        "content": "<p>gggrafff <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699241469\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>I used rustc to find out the host triple on both machines, and it's the same: `host triple: x86_64-unknown-linux-gnu'. Does this mean that serialized modules should be compatible?</p>\n<p>I used the wasmtime cli to run <code>wasmtime compile --target=x86_64-unknown-linux-gnu</code> on both machines, and compare the result. Even with explicit targeting, the compilation result is different on the two machines.</p>\n<p>First:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker5</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">md5sum</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"mi\">1</span><span class=\"n\">a84290c20ad87e3bf1deacd6fb20050</span><span class=\"w\">  </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker5</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker5</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">md5sum</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasmc</span>\n<span class=\"mi\">01070422</span><span class=\"n\">fdc1d3943d40f711fa1a2c75</span><span class=\"w\">  </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasmc</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker5</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker5</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">md5sum</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasmc</span>\n<span class=\"mi\">01070422</span><span class=\"n\">fdc1d3943d40f711fa1a2c75</span><span class=\"w\">  </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasmc</span>\n</code></pre></div>\n<p>Second:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker1</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">md5sum</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"mi\">1</span><span class=\"n\">a84290c20ad87e3bf1deacd6fb20050</span><span class=\"w\">  </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker1</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker1</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">md5sum</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasmc</span>\n<span class=\"n\">dfe56884f884bffad84f79122d6765a6</span><span class=\"w\">  </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasmc</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker1</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">docker1</span>:<span class=\"o\">/</span><span class=\"n\">app</span>#<span class=\"w\"> </span><span class=\"n\">md5sum</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasmc</span>\n<span class=\"n\">dfe56884f884bffad84f79122d6765a6</span><span class=\"w\">  </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasmc</span>\n</code></pre></div>\n<p>That is, the target option does not force the compiler to use only baseline features? Or does it need some special target value?</p>\n</blockquote>",
        "id": 388116315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693403832
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699266291\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>@bjorn3 is right in that <code>--target</code> or calling <code>Config::target</code> should reset the baseline features, but @gggrafff in your example you're calling <code>md5sum main.wasmc</code> when the output of Wasmtime is <code>main.cwasm</code> (note the different extension), is that a typo in the copy/paste? If you use <code>cwasm</code> does the output artifact change?</p>\n</blockquote>",
        "id": 388120054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693404713
    },
    {
        "content": "<p>gggrafff <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699291499\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>@alexcrichton <br>\nThank you, you are the best<br>\nIt was my mistake, I mixed up the file extensions<br>\nI repeated the experiment and really got the same files as expected</p>\n<p>I'll try to pass the target parameter from the Go API.   <br>\nOr I'll use the cli. Can I call NewModule/NewModuleDeserialize for a cwasm file obtained using the 'wasmtime compile` cli?</p>\n</blockquote>",
        "id": 388123737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693405593
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699295326\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>To confirm, when you say you \"really got the same files as expected\", does that means that <code>--target</code> changed the output artifact? </p>\n<p>Currently the <code>--target</code> option isn't exposed from the C API which is what Go is built on, but I can send a PR for that. In the meantime, yes, <code>wasmtime compile</code> on the CLI should produce something usable to load in Go. Do be aware though that the underlying versions of Wasmtime must match, so it'd be two pieces to keep in sync.</p>\n</blockquote>",
        "id": 388124346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693405727
    },
    {
        "content": "<p>gggrafff <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699655897\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>Thanks, <br>\nYes, <code>--target</code> changed the output artifact<br>\n</p>\n</blockquote>",
        "id": 388173214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693420434
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932#issuecomment-1699689519\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>Ok great! In that case I think this is handled now so I'm going to close this. #6934 added the relevant bits to the C API which the 13.0.0 release of wasmtime-go will be able to expose at the Go layer</p>\n</blockquote>",
        "id": 388177590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693422109
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6932\">issue #6932</a>:</p>\n<blockquote>\n<p>Hello!  <br>\nI use wasmtime-go. I want to create a module and serialize Module.Serialize() on a first machine, and deserialize Module.NewModuleDeserialize() - on another one. But the machines have different processors (Intel Xeon Silver 4114 vs Intel Xeon E-2276G) and I get the error <code>compilation setting \"has_avx512dq\" is enabled, but not available on the host</code>.  <br>\nWhich <a href=\"https://pkg.go.dev/github.com/bytecodealliance/wasmtime-go#NewConfig\">engine config</a> option should I turn to ensure compatibility? And is it possible?  <br>\nThanks!  </p>\n</blockquote>",
        "id": 388187179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693425898
    }
]