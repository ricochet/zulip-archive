[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a> from <code>profiling</code> to <code>master</code>:</p>\n<blockquote>\n<p>This the result of some of the investigation I was doing for #1017. I've<br>\ndone a number of refactorings here which culminated in a number of<br>\nchanges that all amount to what I think should result in jitdump support being<br>\nenabled by default:</p>\n<ul>\n<li>\n<p>Pass in a list of finished functions instead of just a range to<br>\n  ensure that we're emitting jit dump data for a specific module rather<br>\n  than a whole <code>CodeMemory</code> which may have other modules.</p>\n</li>\n<li>\n<p>Define <code>ProfilingStrategy</code> in the <code>wasmtime</code> crate to have everything<br>\n  locally-defined</p>\n</li>\n<li>\n<p>Add support to the C API to enable profiling</p>\n</li>\n<li>Documentation added for profiling with jitdump to the book</li>\n<li>\n<p>Split out supported/unsupported files in <code>jitdump.rs</code> to avoid having<br>\n  lots of <code>#[cfg]</code>.</p>\n</li>\n<li>\n<p>Make dependencies optional that are only used for <code>jitdump</code>.</p>\n</li>\n<li>\n<p>Move initialization up-front to <code>JitDumpAgent::new()</code> instead of<br>\n  deferring it to the first module.</p>\n</li>\n<li>\n<p>Pass around <code>Arc&lt;dyn ProfilingAgent&gt;</code> instead of<br>\n<code>Option&lt;Arc&lt;Mutex&lt;Box&lt;dyn ProfilingAgent&gt;&gt;&gt;&gt;</code></p>\n</li>\n</ul>\n<p>The <code>jitdump</code> Cargo feature is now enabled by default which means that<br>\nour published binaries, C API artifacts, and crates will support<br>\nprofiling at runtime by default. The support I don't think is fully<br>\nfleshed out and working but I think it's probably in a good enough spot<br>\nwe can get users playing around with it!</p>\n</blockquote>",
        "id": 190532293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584120746
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374504945\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374504945\">PR Review</a>.</p>",
        "id": 190535540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584122279
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392385795\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392385795\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>performance, so typically when executing wasm you&#39;ll be quite interested in how\n</pre></div>\n\n\n</blockquote>",
        "id": 190535541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584122280
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a> from <code>profiling</code> to <code>master</code>:</p>\n<blockquote>\n<p>This the result of some of the investigation I was doing for #1017. I've<br>\ndone a number of refactorings here which culminated in a number of<br>\nchanges that all amount to what I think should result in jitdump support being<br>\nenabled by default:</p>\n<ul>\n<li>\n<p>Pass in a list of finished functions instead of just a range to<br>\n  ensure that we're emitting jit dump data for a specific module rather<br>\n  than a whole <code>CodeMemory</code> which may have other modules.</p>\n</li>\n<li>\n<p>Define <code>ProfilingStrategy</code> in the <code>wasmtime</code> crate to have everything<br>\n  locally-defined</p>\n</li>\n<li>\n<p>Add support to the C API to enable profiling</p>\n</li>\n<li>Documentation added for profiling with jitdump to the book</li>\n<li>\n<p>Split out supported/unsupported files in <code>jitdump.rs</code> to avoid having<br>\n  lots of <code>#[cfg]</code>.</p>\n</li>\n<li>\n<p>Make dependencies optional that are only used for <code>jitdump</code>.</p>\n</li>\n<li>\n<p>Move initialization up-front to <code>JitDumpAgent::new()</code> instead of<br>\n  deferring it to the first module.</p>\n</li>\n<li>\n<p>Pass around <code>Arc&lt;dyn ProfilingAgent&gt;</code> instead of<br>\n<code>Option&lt;Arc&lt;Mutex&lt;Box&lt;dyn ProfilingAgent&gt;&gt;&gt;&gt;</code></p>\n</li>\n</ul>\n<p>The <code>jitdump</code> Cargo feature is now enabled by default which means that<br>\nour published binaries, C API artifacts, and crates will support<br>\nprofiling at runtime by default. The support I don't think is fully<br>\nfleshed out and working but I think it's probably in a good enough spot<br>\nwe can get users playing around with it!</p>\n</blockquote>",
        "id": 190539889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584124660
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a> from <code>profiling</code> to <code>master</code>:</p>\n<blockquote>\n<p>This the result of some of the investigation I was doing for #1017. I've<br>\ndone a number of refactorings here which culminated in a number of<br>\nchanges that all amount to what I think should result in jitdump support being<br>\nenabled by default:</p>\n<ul>\n<li>\n<p>Pass in a list of finished functions instead of just a range to<br>\n  ensure that we're emitting jit dump data for a specific module rather<br>\n  than a whole <code>CodeMemory</code> which may have other modules.</p>\n</li>\n<li>\n<p>Define <code>ProfilingStrategy</code> in the <code>wasmtime</code> crate to have everything<br>\n  locally-defined</p>\n</li>\n<li>\n<p>Add support to the C API to enable profiling</p>\n</li>\n<li>Documentation added for profiling with jitdump to the book</li>\n<li>\n<p>Split out supported/unsupported files in <code>jitdump.rs</code> to avoid having<br>\n  lots of <code>#[cfg]</code>.</p>\n</li>\n<li>\n<p>Make dependencies optional that are only used for <code>jitdump</code>.</p>\n</li>\n<li>\n<p>Move initialization up-front to <code>JitDumpAgent::new()</code> instead of<br>\n  deferring it to the first module.</p>\n</li>\n<li>\n<p>Pass around <code>Arc&lt;dyn ProfilingAgent&gt;</code> instead of<br>\n<code>Option&lt;Arc&lt;Mutex&lt;Box&lt;dyn ProfilingAgent&gt;&gt;&gt;&gt;</code></p>\n</li>\n</ul>\n<p>The <code>jitdump</code> Cargo feature is now enabled by default which means that<br>\nour published binaries, C API artifacts, and crates will support<br>\nprofiling at runtime by default. The support I don't think is fully<br>\nfleshed out and working but I think it's probably in a good enough spot<br>\nwe can get users playing around with it!</p>\n</blockquote>",
        "id": 190540116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584124785
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a> from <code>profiling</code> to <code>master</code>:</p>\n<blockquote>\n<p>This the result of some of the investigation I was doing for #1017. I've<br>\ndone a number of refactorings here which culminated in a number of<br>\nchanges that all amount to what I think should result in jitdump support being<br>\nenabled by default:</p>\n<ul>\n<li>\n<p>Pass in a list of finished functions instead of just a range to<br>\n  ensure that we're emitting jit dump data for a specific module rather<br>\n  than a whole <code>CodeMemory</code> which may have other modules.</p>\n</li>\n<li>\n<p>Define <code>ProfilingStrategy</code> in the <code>wasmtime</code> crate to have everything<br>\n  locally-defined</p>\n</li>\n<li>\n<p>Add support to the C API to enable profiling</p>\n</li>\n<li>Documentation added for profiling with jitdump to the book</li>\n<li>\n<p>Split out supported/unsupported files in <code>jitdump.rs</code> to avoid having<br>\n  lots of <code>#[cfg]</code>.</p>\n</li>\n<li>\n<p>Make dependencies optional that are only used for <code>jitdump</code>.</p>\n</li>\n<li>\n<p>Move initialization up-front to <code>JitDumpAgent::new()</code> instead of<br>\n  deferring it to the first module.</p>\n</li>\n<li>\n<p>Pass around <code>Arc&lt;dyn ProfilingAgent&gt;</code> instead of<br>\n<code>Option&lt;Arc&lt;Mutex&lt;Box&lt;dyn ProfilingAgent&gt;&gt;&gt;&gt;</code></p>\n</li>\n</ul>\n<p>The <code>jitdump</code> Cargo feature is now enabled by default which means that<br>\nour published binaries, C API artifacts, and crates will support<br>\nprofiling at runtime by default. The support I don't think is fully<br>\nfleshed out and working but I think it's probably in a good enough spot<br>\nwe can get users playing around with it!</p>\n</blockquote>",
        "id": 190540186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584124809
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a> from <code>profiling</code> to <code>master</code>:</p>\n<blockquote>\n<p>This the result of some of the investigation I was doing for #1017. I've<br>\ndone a number of refactorings here which culminated in a number of<br>\nchanges that all amount to what I think should result in jitdump support being<br>\nenabled by default:</p>\n<ul>\n<li>\n<p>Pass in a list of finished functions instead of just a range to<br>\n  ensure that we're emitting jit dump data for a specific module rather<br>\n  than a whole <code>CodeMemory</code> which may have other modules.</p>\n</li>\n<li>\n<p>Define <code>ProfilingStrategy</code> in the <code>wasmtime</code> crate to have everything<br>\n  locally-defined</p>\n</li>\n<li>\n<p>Add support to the C API to enable profiling</p>\n</li>\n<li>Documentation added for profiling with jitdump to the book</li>\n<li>\n<p>Split out supported/unsupported files in <code>jitdump.rs</code> to avoid having<br>\n  lots of <code>#[cfg]</code>.</p>\n</li>\n<li>\n<p>Make dependencies optional that are only used for <code>jitdump</code>.</p>\n</li>\n<li>\n<p>Move initialization up-front to <code>JitDumpAgent::new()</code> instead of<br>\n  deferring it to the first module.</p>\n</li>\n<li>\n<p>Pass around <code>Arc&lt;dyn ProfilingAgent&gt;</code> instead of<br>\n<code>Option&lt;Arc&lt;Mutex&lt;Box&lt;dyn ProfilingAgent&gt;&gt;&gt;&gt;</code></p>\n</li>\n</ul>\n<p>The <code>jitdump</code> Cargo feature is now enabled by default which means that<br>\nour published binaries, C API artifacts, and crates will support<br>\nprofiling at runtime by default. The support I don't think is fully<br>\nfleshed out and working but I think it's probably in a good enough spot<br>\nwe can get users playing around with it!</p>\n</blockquote>",
        "id": 190544275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584127276
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374643603\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374643603\">PR Review</a>.</p>",
        "id": 190560005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584137043
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392506652\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392506652\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is great.  I see the link to it in SUMMAR.mdY, but does the SUMMARY.md get published anywhere? I could only find it on the github view of this branch by clicking through the source tree and not any official links to docs found on the opening Readme.</p>\n</blockquote>",
        "id": 190560011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584137043
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392506652\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392506652\">PR Review Comment</a>.</p>",
        "id": 190560175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584137173
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374653527\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374653527\">PR Review</a>.</p>",
        "id": 190562316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584138858
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392514817\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392514817\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah yeah these are auto-published from the master branch at <a href=\"https://bytecodealliance.github.io/wasmtime/\" target=\"_blank\" title=\"https://bytecodealliance.github.io/wasmtime/\">https://bytecodealliance.github.io/wasmtime/</a></p>\n</blockquote>",
        "id": 190562317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584138858
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374653983\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374653983\">PR Review</a>.</p>",
        "id": 190562405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584138949
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392515163\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392515163\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In particular the <code>SUMMARY.md</code> is the table of contents on the left hand side. More info in the <code>mdbook</code> user guide: <a href=\"https://rust-lang.github.io/mdBook/format/summary.html\" target=\"_blank\" title=\"https://rust-lang.github.io/mdBook/format/summary.html\">https://rust-lang.github.io/mdBook/format/summary.html</a></p>\n</blockquote>",
        "id": 190562406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584138949
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374656454\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-374656454\">PR Review</a>.</p>",
        "id": 190562979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584139452
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392517258\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r392517258\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@fitzgen .. Ahh I see. Thanks. I clicked on docs here linked to at the bottom here: <a href=\"https://github.com/alexcrichton/wasmtime/tree/profiling\" target=\"_blank\" title=\"https://github.com/alexcrichton/wasmtime/tree/profiling\">https://github.com/alexcrichton/wasmtime/tree/profiling</a> for this pr, but I didn't notice that link was going to be linking back to master. Got to be carefully following links like that.</p>\n</blockquote>",
        "id": 190562980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584139452
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a> from <code>profiling</code> to <code>master</code>:</p>\n<blockquote>\n<p>This the result of some of the investigation I was doing for #1017. I've<br>\ndone a number of refactorings here which culminated in a number of<br>\nchanges that all amount to what I think should result in jitdump support being<br>\nenabled by default:</p>\n<ul>\n<li>\n<p>Pass in a list of finished functions instead of just a range to<br>\n  ensure that we're emitting jit dump data for a specific module rather<br>\n  than a whole <code>CodeMemory</code> which may have other modules.</p>\n</li>\n<li>\n<p>Define <code>ProfilingStrategy</code> in the <code>wasmtime</code> crate to have everything<br>\n  locally-defined</p>\n</li>\n<li>\n<p>Add support to the C API to enable profiling</p>\n</li>\n<li>Documentation added for profiling with jitdump to the book</li>\n<li>\n<p>Split out supported/unsupported files in <code>jitdump.rs</code> to avoid having<br>\n  lots of <code>#[cfg]</code>.</p>\n</li>\n<li>\n<p>Make dependencies optional that are only used for <code>jitdump</code>.</p>\n</li>\n<li>\n<p>Move initialization up-front to <code>JitDumpAgent::new()</code> instead of<br>\n  deferring it to the first module.</p>\n</li>\n<li>\n<p>Pass around <code>Arc&lt;dyn ProfilingAgent&gt;</code> instead of<br>\n<code>Option&lt;Arc&lt;Mutex&lt;Box&lt;dyn ProfilingAgent&gt;&gt;&gt;&gt;</code></p>\n</li>\n</ul>\n<p>The <code>jitdump</code> Cargo feature is now enabled by default which means that<br>\nour published binaries, C API artifacts, and crates will support<br>\nprofiling at runtime by default. The support I don't think is fully<br>\nfleshed out and working but I think it's probably in a good enough spot<br>\nwe can get users playing around with it!</p>\n</blockquote>",
        "id": 190876039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584463164
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\" target=\"_blank\" title=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a>.</p>",
        "id": 191177187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584652987
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a> from <code>profiling</code> to <code>master</code>:</p>\n<blockquote>\n<p>This the result of some of the investigation I was doing for #1017. I've<br>\ndone a number of refactorings here which culminated in a number of<br>\nchanges that all amount to what I think should result in jitdump support being<br>\nenabled by default:</p>\n<ul>\n<li>\n<p>Pass in a list of finished functions instead of just a range to<br>\n  ensure that we're emitting jit dump data for a specific module rather<br>\n  than a whole <code>CodeMemory</code> which may have other modules.</p>\n</li>\n<li>\n<p>Define <code>ProfilingStrategy</code> in the <code>wasmtime</code> crate to have everything<br>\n  locally-defined</p>\n</li>\n<li>\n<p>Add support to the C API to enable profiling</p>\n</li>\n<li>Documentation added for profiling with jitdump to the book</li>\n<li>\n<p>Split out supported/unsupported files in <code>jitdump.rs</code> to avoid having<br>\n  lots of <code>#[cfg]</code>.</p>\n</li>\n<li>\n<p>Make dependencies optional that are only used for <code>jitdump</code>.</p>\n</li>\n<li>\n<p>Move initialization up-front to <code>JitDumpAgent::new()</code> instead of<br>\n  deferring it to the first module.</p>\n</li>\n<li>\n<p>Pass around <code>Arc&lt;dyn ProfilingAgent&gt;</code> instead of<br>\n<code>Option&lt;Arc&lt;Mutex&lt;Box&lt;dyn ProfilingAgent&gt;&gt;&gt;&gt;</code></p>\n</li>\n</ul>\n<p>The <code>jitdump</code> Cargo feature is now enabled by default which means that<br>\nour published binaries, C API artifacts, and crates will support<br>\nprofiling at runtime by default. The support I don't think is fully<br>\nfleshed out and working but I think it's probably in a good enough spot<br>\nwe can get users playing around with it!</p>\n</blockquote>",
        "id": 191177344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584653077
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-378156437\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-378156437\">PR Review</a>.</p>",
        "id": 191263634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584720328
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-378156437\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-378156437\">PR Review</a>.</p>",
        "id": 191263635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584720328
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395371365\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395371365\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    /// No profiler support.\n</pre></div>\n\n\n</blockquote>",
        "id": 191263636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584720328
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395371432\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395371432\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// Select which profiling technique to support.\n</pre></div>\n\n\n</blockquote>",
        "id": 191263637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584720328
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395371697\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395371697\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    /// Collect profiling info for the &quot;jitdump&quot; file format, used with `perf` on Linux.\n</pre></div>\n\n\n</blockquote>",
        "id": 191263638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584720328
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395376852\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395376852\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Why aren't we using <code>std::time::Instant::now</code> here? If there's a reason, it deserves a comment. If there isn't a reason, then we should use it ;)</p>\n</blockquote>",
        "id": 191263639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584720328
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395737639\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395737639\">PR Review Comment</a>:</p>\n<blockquote>\n<p>A screenshot here would be nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 191263640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584720328
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-378638165\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#pullrequestreview-378638165\">PR Review</a>.</p>",
        "id": 191267607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584722020
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395755703\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310#discussion_r395755703\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good idea! Looks like though <code>Instant</code> doesn't allow accessing nanoseconds-since-the-epoch, so I'll leave a comment saying that.</p>\n</blockquote>",
        "id": 191267608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584722020
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a> from <code>profiling</code> to <code>master</code>:</p>\n<blockquote>\n<p>This the result of some of the investigation I was doing for #1017. I've<br>\ndone a number of refactorings here which culminated in a number of<br>\nchanges that all amount to what I think should result in jitdump support being<br>\nenabled by default:</p>\n<ul>\n<li>\n<p>Pass in a list of finished functions instead of just a range to<br>\n  ensure that we're emitting jit dump data for a specific module rather<br>\n  than a whole <code>CodeMemory</code> which may have other modules.</p>\n</li>\n<li>\n<p>Define <code>ProfilingStrategy</code> in the <code>wasmtime</code> crate to have everything<br>\n  locally-defined</p>\n</li>\n<li>\n<p>Add support to the C API to enable profiling</p>\n</li>\n<li>Documentation added for profiling with jitdump to the book</li>\n<li>\n<p>Split out supported/unsupported files in <code>jitdump.rs</code> to avoid having<br>\n  lots of <code>#[cfg]</code>.</p>\n</li>\n<li>\n<p>Make dependencies optional that are only used for <code>jitdump</code>.</p>\n</li>\n<li>\n<p>Move initialization up-front to <code>JitDumpAgent::new()</code> instead of<br>\n  deferring it to the first module.</p>\n</li>\n<li>\n<p>Pass around <code>Arc&lt;dyn ProfilingAgent&gt;</code> instead of<br>\n<code>Option&lt;Arc&lt;Mutex&lt;Box&lt;dyn ProfilingAgent&gt;&gt;&gt;&gt;</code></p>\n</li>\n</ul>\n<p>The <code>jitdump</code> Cargo feature is now enabled by default which means that<br>\nour published binaries, C API artifacts, and crates will support<br>\nprofiling at runtime by default. The support I don't think is fully<br>\nfleshed out and working but I think it's probably in a good enough spot<br>\nwe can get users playing around with it!</p>\n</blockquote>",
        "id": 191269084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584722674
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1310\">PR #1310</a>.</p>",
        "id": 191269129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584722693
    }
]