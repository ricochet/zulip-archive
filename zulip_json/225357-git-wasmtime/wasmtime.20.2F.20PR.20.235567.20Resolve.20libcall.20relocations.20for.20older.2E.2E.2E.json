[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567\">PR #5567</a> from <code>libcalls</code> to <code>main</code>:</p>\n<blockquote>\n<p>Long ago Wasmtime used to have logic for resolving relocations post-compilation for libcalls which I ended up removing during refactorings last year. As #5563 points out, however, it's possible to get Wasmtime to panic by disabling SSE features which forces Cranelift to use libcalls for some floating-point operations instead. Note that this also requires disabling SIMD because SIMD support has a baseline of SSE 4.2.</p>\n<p>This commit pulls back the old implementations of various libcalls and reimplements logic necessary to have them work on CPUs without SSE 4.2</p>\n<p>Closes #5563</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 321053429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673565605
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567\">PR #5567</a> as ready for review.</p>",
        "id": 321053438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673565609
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#pullrequestreview-1248360106\">PR review</a>.</p>",
        "id": 321249423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673641096
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#pullrequestreview-1248360106\">PR review</a>.</p>",
        "id": 321249424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673641096
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#discussion_r1069982358\">PR review comment</a>:</p>\n<blockquote>\n<p>It'd be nice if there was a good way to share these implementations of <code>round_ties_even</code> with the ones in <code>cranelift/codegen/src/ir/immediates.rs</code>. None come to my mind off-hand since the runtime can be built in a configuration without the compiler, but it'd be nice.</p>\n<p>The existing version there doesn't have the \"Check for NaNs\" section that this version does. I haven't thought hard enough about this to understand what that's for, but maybe you could add a comment linking to some reference for why this is the right implementation?</p>\n<p>The existing version does have a link to <a href=\"https://github.com/rust-lang/rust/issues/96710\">rust-lang/rust#96710</a> which I think is worth copying here.</p>\n</blockquote>",
        "id": 321249425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673641096
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#discussion_r1069931106\">PR review comment</a>:</p>\n<blockquote>\n<p>Minor typo:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            /// Returns the libcall corresponding to the provided symbol name,\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 321249426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673641096
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#discussion_r1069965120\">PR review comment</a>:</p>\n<blockquote>\n<p>Even after reading the above comment several times I still had a hard time figuring out that these calls to <code>arbitrary()</code> can't be moved into the loop.</p>\n<p>How about something like this to avoid having to keep two lists of feature names in sync, and hopefully make it less tempting to inline the variables into the loop?</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            let new_flags = [\"has_sse3\", \"has_ssse3\", \"has_sse41\", \"has_sse42\"]\n                .into_iter()\n                .map(|name| (name, u.arbitrary()?))\n                .collect::&lt;arbitrary::Result&lt;HashMap&lt;&amp;'static str, bool&gt;&gt;()?;\n\n            for (name, val) in flags {\n                if let Some(new_value) = new_flags.get(name) {\n                    *val = new_value.to_string();\n                }\n            }\n</code></pre></div>\n<p>Also, I think this is okay, but just to check: Each of these features implies the previous one (e.g. if you have SSE4.2 you also have SSE4.1). Is it okay to turn some off without turning off later ones?</p>\n</blockquote>",
        "id": 321249427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673641096
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#discussion_r1072436246\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is it okay to turn some off without turning off later ones?</p>\n</blockquote>\n<p>While I'm not 100% certain myself I believe that this question is up to Cranelift mostly. I believe Cranelift is mostly structured around \"if this feature is active emit this instr\" while it doesn't make sense to disable sse3 but leave sse4.1 enabled I don't think it will break anything since it would be a sort of \"chaos mode\" for cranelift stressing it.</p>\n<p>If this becomes a problem for Cranelift, however, we can tweak the fuzz input to respect what the actual CPU feature hierarchy is.</p>\n</blockquote>",
        "id": 321872534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673973168
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#pullrequestreview-1251945816\">PR review</a>.</p>",
        "id": 321872535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673973168
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567\">PR #5567</a> from <code>libcalls</code> to <code>main</code>.</p>",
        "id": 321880854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673975321
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567\">PR #5567</a> from <code>libcalls</code> to <code>main</code>.</p>",
        "id": 321880944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673975343
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#pullrequestreview-1252058144\">PR review</a>.</p>",
        "id": 321881286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673975430
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#discussion_r1072494469\">PR review comment</a>:</p>\n<blockquote>\n<p>These libcalls were removed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4470\">https://github.com/bytecodealliance/wasmtime/pull/4470</a> and I copied their source from just before that commit. </p>\n<p>Apparently <code>nearest</code> has a slightly storied history:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2219\">https://github.com/bytecodealliance/wasmtime/pull/2219</a> fixed it for NaN cases </li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2171\">https://github.com/bytecodealliance/wasmtime/pull/2171</a> made the implementation more efficient based on musl</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/34\">https://github.com/bytecodealliance/wasmtime/pull/34</a> was the original implementation</li>\n</ul>\n<p>I ran <code>cargo run wast ./tests/spec_testsuite/f32.wast --cranelift-set has_sse41=false --wasm-features=-simd</code> and commented out the \"Check for NaNs\" block and the tests failed, so the block is definitely load-bearing. That may mean that Cranelift's implementation needs to be updated to account for NaN's perhaps? (I don't really understand the actual underlying code here I'm just copying bytes)</p>\n</blockquote>",
        "id": 321881288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673975430
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567#pullrequestreview-1252533402\">PR review</a>.</p>",
        "id": 321935716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673993567
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5567\">PR #5567</a>.</p>",
        "id": 322074296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674054252
    }
]