[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2808\">Issue #2808</a>:</p>\n<blockquote>\n<p>On Mac aarch64 (e.g. M1 MBP), the system's libunwind doesn't behave as on other platforms, and doesn't properly unwind wasm frames using the information we provide it (CFI etc.). The PR that introduces the switch from using signal handlers to mach ports to handle software traps has <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-801120463\">something that worked</a>, using a custom build of libunwind and custom directives for linking against it.</p>\n<p>Some ways to fix this:</p>\n<ul>\n<li>poke more at the system's libunwind, to try to understand what it wants. At some point its source code might be released on <a href=\"https://opensource.apple.com/\">https://opensource.apple.com/</a>, and if we can reproduce the issues observed with the system's libunwind, then we could investigate them with a debugger.</li>\n<li>I've had some discussions with Apple engineers who said these particular functions were not particularly used and tested by Apple. So we could look into other functions exposed by libunwind and try to use those instead. This would be pretty invasive, since that would require coordination with <code>backtrace-rs</code> too, which uses libunwind's functions as well.</li>\n<li>ship a custom build of libunwind, and link against it. I don't know <code>backtrace-rs</code> would also require the custom link annotations.</li>\n<li>implement our own frame unwinder (after all, we don't need a lot), or find another existing implementation that works equally well. There was some talk on the Rust's zulip to reimplement libunwind in Rust at some point, I don't know what came out of that.</li>\n</ul>\n</blockquote>",
        "id": 233322727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617717406
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2808\">Issue #2808</a>:</p>\n<blockquote>\n<p>On Mac aarch64 (e.g. M1 MBP), the system's libunwind doesn't behave as on other platforms, and doesn't properly unwind wasm frames using the information we provide it (CFI etc.). The PR that introduces the switch from using signal handlers to mach ports to handle software traps has <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-801120463\">something that worked</a>, using a custom build of libunwind and custom directives for linking against it.</p>\n<p>Some ways to fix this:</p>\n<ul>\n<li>poke more at the system's libunwind, to try to understand what it wants. At some point its source code might be released on <a href=\"https://opensource.apple.com/\">https://opensource.apple.com/</a>, and if we can reproduce the issues observed with the system's libunwind, then we could investigate them with a debugger.</li>\n<li>I've had some discussions with Apple engineers who said these particular functions were not particularly used and tested by Apple. So we could look into other functions exposed by libunwind and try to use those instead. This would be pretty invasive, since that would require coordination with <code>backtrace-rs</code> too, which uses libunwind's functions as well.</li>\n<li>ship a custom build of libunwind, and link against it. I don't know <code>backtrace-rs</code> would also require the custom link annotations.</li>\n<li>implement our own frame unwinder (after all, we don't need a lot), or find another existing implementation that works equally well. There was some talk on the Rust's zulip to reimplement libunwind in Rust at some point, I don't know what came out of that.</li>\n</ul>\n</blockquote>",
        "id": 233322728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617717407
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2808#issuecomment-814263476\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2808\">Issue #2808</a>:</p>\n<blockquote>\n<p>Related: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2459\">https://github.com/bytecodealliance/wasmtime/issues/2459</a></p>\n</blockquote>",
        "id": 233350968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617726955
    }
]