[
    {
        "content": "<p>rylev opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8645\">issue #8645</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Several times I've simply wanted the linker to stub out all implementations for a component that it has not yet seen. </p>\n<p>Essentially I've wanted to do roughly the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Linker</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyData</span><span class=\"o\">&gt;</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">stub_imports</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>With the above configuration, any imports configured by <code>wasmtime_wasi</code> would work correctly, but any other imports would simply trap when invoked.</p>\n<h4>Benefit</h4>\n<p>This would provide users a simple way to get the linker to be happy and turn instantiation errors into runtime errors. This can be useful in cases where you want to instantiate a component and call one of its exports, and you are fine with calls to certain imports to simply trap if they occur.</p>\n<h4>Implementation</h4>\n<p>The implementation should be fairly straight forward I believe through the use of <code>Component::env_component</code> to do the necessary reflection to know when to call <code>LinkerInstance::func_new</code> with a closure that calls <code>panic!(\"stubbed function called\")</code>.</p>\n<h4>Future possibilities</h4>\n<p>In the future, we could expose an additional API that would allow the user to supply a closure that is invoked on each import invocation so that the user can customize the behavior of the stub. <br>\n</p>\n</blockquote>",
        "id": 439195532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715941874
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8645#issuecomment-2117733045\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8645\">issue #8645</a>:</p>\n<blockquote>\n<p>Sounds reasonable to me! I think this'd be the equivalent of <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Linker.html#method.define_unknown_imports_as_traps\"><code>wasmtime::Linker::define_unknown_imports_as_traps</code></a> for <code>wasmtime::component::Linker</code>. </p>\n</blockquote>",
        "id": 439234528,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715956017
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8645\">issue #8645</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Several times I've simply wanted the linker to stub out all implementations for a component that it has not yet seen. </p>\n<p>Essentially I've wanted to do roughly the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Linker</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyData</span><span class=\"o\">&gt;</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">stub_imports</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>With the above configuration, any imports configured by <code>wasmtime_wasi</code> would work correctly, but any other imports would simply trap when invoked.</p>\n<h4>Benefit</h4>\n<p>This would provide users a simple way to get the linker to be happy and turn instantiation errors into runtime errors. This can be useful in cases where you want to instantiate a component and call one of its exports, and you are fine with calls to certain imports to simply trap if they occur.</p>\n<h4>Implementation</h4>\n<p>The implementation should be fairly straight forward I believe through the use of <code>Component::env_component</code> to do the necessary reflection to know when to call <code>LinkerInstance::func_new</code> with a closure that calls <code>panic!(\"stubbed function called\")</code>.</p>\n<h4>Future possibilities</h4>\n<p>In the future, we could expose an additional API that would allow the user to supply a closure that is invoked on each import invocation so that the user can customize the behavior of the stub. <br>\n</p>\n</blockquote>",
        "id": 439885177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716318764
    }
]