[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1516883117\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Would you mind pulling the <code>lb_to_bindex</code> change out to a separate PR? I'd like to review and benchmark that on its own.</p>\n</blockquote>",
        "id": 351418873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682021275
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1516904422\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>@jameysharp sure thing: #6255 </p>\n</blockquote>",
        "id": 351421890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682022437
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1525084748\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Hi @fitzgen , I'm still getting errors from cargo vet. I merged the main branch where the wildcard audit was added. Do I need to do something else to make the audit work? I think we'd also need a wildcard audit for <code>derive_arbitrary</code>, right?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Run</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">vet</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">locked</span>\n<span class=\"n\">Vetting</span><span class=\"w\"> </span><span class=\"n\">Failed</span><span class=\"o\">!</span>\n\n<span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">unvetted</span><span class=\"w\"> </span><span class=\"n\">dependencies</span>:\n  <span class=\"nc\">arbitrary</span>:<span class=\"mf\">1.3.0</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"safe-to-deploy\"</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">derive_arbitrary</span>:<span class=\"mf\">1.3.0</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"safe-to-deploy\"</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 353157110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682583483
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1526080531\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think we'd also need a wildcard audit for <code>derive_arbitrary</code>, right?</p>\n</blockquote>\n<p>Added in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6294\">https://github.com/bytecodealliance/wasmtime/pull/6294</a></p>\n</blockquote>",
        "id": 353412712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682616985
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1527297012\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Alright, I think this should be ready to review @cfallin </p>\n</blockquote>",
        "id": 353765002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682675684
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1528076787\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>@remlse would you mind looking into the CI failure in the merge queue?</p>\n</blockquote>",
        "id": 354049206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682714901
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1528717622\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Will do. I'm having trouble reproducing locally, but I'll get there.</p>\n</blockquote>",
        "id": 354254111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682757059
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1529083504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Well, this was quite the rabbit whole.</p>\n<p>I can reproduce now, compiling the fuzz target <code>component_api</code> causes some kind of infinite loop / memory leak during compilation. RAM consumption of rustc slowly crawls up to 100% (30GB), at which point my PC freezes. The trigger seems to be the update to (derive_)arbitrary 1.3.</p>\n<p>With <code>git bisect</code>, I narrowed it down to the diff of this commit range in the arbitrary repo: <a href=\"https://github.com/rust-fuzz/arbitrary/compare/7ebc6c8...15c340e\">7ebc6c8...15c340e</a>. (Given the rest of this story, I don't think the problem is in the arbitrary crate. There's nothing crazy going on in this diff.)</p>\n<p>The build script of <code>wasmtime-fuzz</code> generates some code, which is included in the <code>component_api</code> target with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">include!</span><span class=\"p\">(</span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"fm\">env!</span><span class=\"p\">(</span><span class=\"s\">\"OUT_DIR\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"/static_component_api.rs\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>Compiling these 15 MB of generated code no longer terminates with higher versions of arbitrary. I reduced the number of generated test cases from 100 to 1 to make it easier to inspect the generated code. That actually fixed the problem, though, building the fuzz targets now succeeded.</p>\n<p>So I started bisecting the number of test cases. But I soon noticed that not even compiling 2 test cases works. At least with 2 test cases, my memory was enough to get me to a compiler crash.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">unexpectedly</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>Lovely. I'll attach the full output for future reference: <a href=\"https://github.com/bytecodealliance/wasmtime/files/11361878/rustc_panic.txt\">rustc_panic.txt</a>. And I made a branch with (hopefully) all the necessary changes to reproduce <a href=\"https://github.com/remlse/wasmtime/tree/rustc-panic\">here</a>. The command I used is</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">WASMTIME_FUZZ_SEED</span><span class=\"o\">=</span><span class=\"m\">1234</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>fuzz<span class=\"w\"> </span>build<span class=\"w\"> </span>--no-default-features<span class=\"w\"> </span>--dev<span class=\"w\"> </span>-s<span class=\"w\"> </span>none\n</code></pre></div>\n<p>I'll have to call it a day. I guess the next debugging step for me would be to try to understand the code generated in the build script - and how it could confuse the compiler.</p>\n</blockquote>",
        "id": 354724588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682874870
    },
    {
        "content": "<p>remlse edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1529083504\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Well, this was quite the rabbit hole.</p>\n<p>I can reproduce now, compiling the fuzz target <code>component_api</code> causes some kind of infinite loop / memory leak during compilation. RAM consumption of rustc slowly crawls up to 100% (30GB), at which point my PC freezes. The trigger seems to be the update to (derive_)arbitrary 1.3.</p>\n<p>With <code>git bisect</code>, I narrowed it down to the diff of this commit range in the arbitrary repo: <a href=\"https://github.com/rust-fuzz/arbitrary/compare/7ebc6c8...15c340e\">7ebc6c8...15c340e</a>. (Given the rest of this story, I don't think the problem is in the arbitrary crate. There's nothing crazy going on in this diff.)</p>\n<p>The build script of <code>wasmtime-fuzz</code> generates some code, which is included in the <code>component_api</code> target with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">include!</span><span class=\"p\">(</span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"fm\">env!</span><span class=\"p\">(</span><span class=\"s\">\"OUT_DIR\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"/static_component_api.rs\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>Compiling these 15 MB of generated code no longer terminates with higher versions of arbitrary. I reduced the number of generated test cases from 100 to 1 to make it easier to inspect the generated code. That actually fixed the problem, though, building the fuzz targets now succeeded.</p>\n<p>So I started bisecting the number of test cases. But I soon noticed that not even compiling 2 test cases works. At least with 2 test cases, my memory was enough to get me to a compiler crash.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">unexpectedly</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>Lovely. I'll attach the full output for future reference: <a href=\"https://github.com/bytecodealliance/wasmtime/files/11361878/rustc_panic.txt\">rustc_panic.txt</a>. And I made a branch with (hopefully) all the necessary changes to reproduce <a href=\"https://github.com/remlse/wasmtime/tree/rustc-panic\">here</a>. The command I used is</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">WASMTIME_FUZZ_SEED</span><span class=\"o\">=</span><span class=\"m\">1234</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>fuzz<span class=\"w\"> </span>build<span class=\"w\"> </span>--no-default-features<span class=\"w\"> </span>--dev<span class=\"w\"> </span>-s<span class=\"w\"> </span>none\n</code></pre></div>\n<p>I'll have to call it a day. I guess the next debugging step for me would be to try to understand the code generated in the build script - and how it could confuse the compiler.</p>\n</blockquote>",
        "id": 354815046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682929086
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1529754515\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Oh dear if that script is building a 15M source file that's way too big, let me see if the limits should be trimmed on that.</p>\n</blockquote>",
        "id": 354886785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682950259
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1529814196\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Ok I've pushed up <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6315\">https://github.com/bytecodealliance/wasmtime/pull/6315</a> which, when testing locally, gets the size of the generated test file to be a more reasonable 200K instead of 15M</p>\n</blockquote>",
        "id": 354901099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682953637
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1529920997\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Ok let's try again and fingers crossed on this one. Thanks again @remlse for taking the time to investigate the failure!</p>\n</blockquote>",
        "id": 354919598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682958420
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1529921325\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Oh actually I think this'll need to be rebased, but it should be able to merge afterwards.</p>\n</blockquote>",
        "id": 354919675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682958441
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1529986705\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>@alexcrichton Thank you for the fix! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </p>\n</blockquote>",
        "id": 354934902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682962414
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1530014168\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>@remlse we've just seen a possible issue on this while discussing in a meeting; more from @elliottt in a bit...</p>\n</blockquote>",
        "id": 354939947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682963878
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1530065441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>I think we're reliant on seeing uses before defs for the management of the <code>value_lowered_uses</code> field of the <code>Lower</code> struct. If we put the blocks in a random order, we may see the definition first, and as a result decide that the instruction isn't needed in the final program: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7274fa94c39b9e3984fa207994b60ec827a31b/cranelift/codegen/src/machinst/lower.rs#L708-L709\">https://github.com/bytecodealliance/wasmtime/blob/3b7274fa94c39b9e3984fa207994b60ec827a31b/cranelift/codegen/src/machinst/lower.rs#L708-L709</a><br>\nIn the snippet above, <code>is_any_inst_result_needed</code> queries the <code>value_lowered_uses</code> vector for any result value with a number of uses that's greater than zero, and the entry in that vector is only incremented when processing uses of that value.</p>\n</blockquote>",
        "id": 354952135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682966885
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1530077644\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>I see, then we can't merge this. Is there some other order we could randomize to salvage some of the work? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> </p>\n</blockquote>",
        "id": 354954834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682967597
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1530115180\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Yes, sorry @remlse, I had forgotten about this ordering invariant. (I have no excuse, I wrote this code ~3 years ago!)</p>\n<p>Offline Trevor suggested a nice approach to still reorder to an allowed degree,  namely: pick some permutation that still respects defs-before-uses. In particular, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d5d2e854f97daa3acc6820299231e73cbb0b246c/cranelift/codegen/src/machinst/blockorder.rs#L198\">this loop</a> I think can iterate successors for a block in any order and still generate valid RPO.</p>\n</blockquote>",
        "id": 354961549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682969664
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1531084644\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<blockquote>\n<p>Out of curiosity, have you fuzzed with this (and verified that no issues arise)?</p>\n</blockquote>\n<p>I did a short sanity check yesterday, and a longer (30min) run today without panics. Is there something else I should do to verify there aren't any issues?</p>\n</blockquote>",
        "id": 355071980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683016418
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254#issuecomment-1531758253\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6254\">issue #6254</a>:</p>\n<blockquote>\n<p>Nope, that sounds great -- let's merge, thanks!</p>\n</blockquote>",
        "id": 355202305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683044433
    }
]