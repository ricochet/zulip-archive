[
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">issue #2398</a>:</p>\n<blockquote>\n<p>While implementing packed shifts for the old backend, I needed a way to be able to determine the memory address o an offset into a constant emitted by Cranelift. To do this, I added <code>const_addr</code>, an instruction that returns the base address of where the constant is emitted in memory. This pattern followed similar instructions in Cranelift: <code>table_addr</code>, <code>func_addr</code>, <code>stack_addr</code>, <code>heap_addr</code>. In the new backend, I can lower packed shifts without this instruction: since I have more direct control of the compiler machinery, I can figure out the location of the constant in the buffer and emit the appropriate machine-level instructions. <code>const_addr</code> exists because in the old backend this had to be done using CLIF instructions.</p>\n<p>I am debating whether to remove this instruction:</p>\n<ul>\n<li>in favor of removing it, fewer instructions would be nice and the primary purpose of this instruction can be fulfilled at a different level</li>\n<li>in favor of keeping it, Cranelift frontend users might find it useful for mask tables (like I did) and the instruction is symmetrical to other <code>*_addr</code> instructions Cranelift provides.</li>\n</ul>\n<p>Any strong opinions one way or the other?</p>\n</blockquote>",
        "id": 255809955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633123664
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398#issuecomment-1118011931\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">issue #2398</a>:</p>\n<blockquote>\n<p>Coming back to this issue during some gardening: with fresh eyes, it seems to me at least that <code>const_addr</code> is reasonable and there are legitimate use-cases, especially now that we have a better-developed constant pool infrastructure. I think I'll go ahead and close this as there's no pressing need or argument to remove the instruction.</p>\n</blockquote>",
        "id": 281232571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651705513
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">issue #2398</a>:</p>\n<blockquote>\n<p>While implementing packed shifts for the old backend, I needed a way to be able to determine the memory address o an offset into a constant emitted by Cranelift. To do this, I added <code>const_addr</code>, an instruction that returns the base address of where the constant is emitted in memory. This pattern followed similar instructions in Cranelift: <code>table_addr</code>, <code>func_addr</code>, <code>stack_addr</code>, <code>heap_addr</code>. In the new backend, I can lower packed shifts without this instruction: since I have more direct control of the compiler machinery, I can figure out the location of the constant in the buffer and emit the appropriate machine-level instructions. <code>const_addr</code> exists because in the old backend this had to be done using CLIF instructions.</p>\n<p>I am debating whether to remove this instruction:</p>\n<ul>\n<li>in favor of removing it, fewer instructions would be nice and the primary purpose of this instruction can be fulfilled at a different level</li>\n<li>in favor of keeping it, Cranelift frontend users might find it useful for mask tables (like I did) and the instruction is symmetrical to other <code>*_addr</code> instructions Cranelift provides.</li>\n</ul>\n<p>Any strong opinions one way or the other?</p>\n</blockquote>",
        "id": 281232572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651705513
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398#issuecomment-1233620644\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">issue #2398</a>:</p>\n<blockquote>\n<p>I was looking at old open PRs, and #2399 prompted me to look at this. Given that no backend actually implements <code>const_addr</code> today, is it still worth having?</p>\n</blockquote>",
        "id": 296502877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661995006
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398#issuecomment-1234768236\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">issue #2398</a>:</p>\n<blockquote>\n<p>Hmm, yeah, I think my reasoning about was that it was a consistent and sensible instruction to have; but actually, if it's not implemented and hasn't been missed yet, maybe we can just remove it for now. The constant pool is still there (and used by our lowerings for other instructions internally); if we want to expose the ability to have an arbitrary blob of data in the pool we can always actually implement this later. So I'd be happy to r+ a PR to remove it.</p>\n</blockquote>",
        "id": 296697903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662065603
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398#issuecomment-1234775782\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2398\">issue #2398</a>:</p>\n<blockquote>\n<p>It was used at one point but no longer... I would also vote to remove it.</p>\n</blockquote>",
        "id": 296698787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662065978
    }
]