[
    {
        "content": "<p>dheaton-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314\">PR #3314</a> from <code>implement-bitops</code> to <code>main</code>:</p>\n<blockquote>\n<p>Implemented for the Cranelift interpreter:</p>\n<ul>\n<li><code>Bitrev</code> to reverse the order of the bits in an integer.</li>\n<li>\n<p><code>Cls</code> to count the leading bits which are the same as the sign bit in<br>\nan integer, yielding one less than the size of the integer for 0 and -1.</p>\n</li>\n<li>\n<p><code>Clz</code> to count the number of leading zeros in the bitwise representation of the<br>\ninteger.</p>\n</li>\n<li>\n<p><code>Ctz</code> to count the number of trailing zeros in the bitwise representation of the<br>\ninteger.</p>\n</li>\n<li>\n<p><code>Popcnt</code> to count the number of ones in the bitwise representation of the<br>\ninteger.</p>\n</li>\n</ul>\n<p>Copyright (c) 2021, Arm Limited</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 252435119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631095704
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#pullrequestreview-748994881\">PR review</a>.</p>",
        "id": 252440484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631098932
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#discussion_r704308044\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                let lanes = extractlanes(&amp;arg(0)?, ctrl_ty.lane_type())?\n                    .into_iter()\n                    .map(|lane| lane.count_ones()?)\n                    .collect::&lt;ValueResult&lt;SimdVec&lt;V&gt;&gt;&gt;()?;\n\n                vectorizelanes(&amp;new_vec, ctrl_ty)?\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 252440485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631098932
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#discussion_r704310254\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it make sense for us to instead do a <code>.convert(ValueConversionKind::Exact(ctrl_ty))</code>, instead of casting to and from int?</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        Opcode::Clz =&gt; assign(\n            arg(0)?\n                .leading_zeroes()?\n                .convert(ValueConversionKind::Exact(ctrl_ty))?\n         )?,\n</code></pre></div>\n<p>I think Exact would be able to both extend and reduce types? Although I'm not sure about converting from unsigned to signed types.</p>\n</blockquote>",
        "id": 252440486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631098933
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#pullrequestreview-748994881\">PR review</a>.</p>",
        "id": 252440488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631098933
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#discussion_r704308044\">PR review comment</a>.</p>",
        "id": 252440608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631098999
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#discussion_r704308044\">PR review comment</a>.</p>",
        "id": 252440886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631099153
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#pullrequestreview-749004090\">PR review</a>.</p>",
        "id": 252441078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631099258
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#discussion_r704314967\">PR review comment</a>:</p>\n<blockquote>\n<p>Or we could cast it to the original type in the macro that <code>leading_zeroes</code> uses, so that it would always return the original type? I think that would also solve a lot of issues and make the rest of the interface cleaner.</p>\n</blockquote>",
        "id": 252441079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631099258
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#discussion_r704314967\">PR review comment</a>.</p>",
        "id": 252441300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631099386
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#pullrequestreview-748994881\">PR review</a>.</p>",
        "id": 252443901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631100753
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#pullrequestreview-749444224\">PR review</a>.</p>",
        "id": 252503174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631123241
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#discussion_r704643104\">PR review comment</a>:</p>\n<blockquote>\n<p>+1, iterator methods are clearer (to me at least!) and more idiomatic than the imperative loop style.</p>\n</blockquote>",
        "id": 252503175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631123241
    },
    {
        "content": "<p>dheaton-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314\">PR #3314</a> from <code>implement-bitops</code> to <code>main</code>.</p>",
        "id": 252751892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631263112
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#pullrequestreview-751306065\">PR review</a>.</p>",
        "id": 252770551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631272986
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#pullrequestreview-751306065\">PR review</a>.</p>",
        "id": 252770552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631272986
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#discussion_r706101246\">PR review comment</a>:</p>\n<blockquote>\n<p>A really nice thing you can do with iterators is collecting from an iterator of <code>Result&lt;T, _&gt;</code> into <code>Result&lt;Vec&lt;T&gt;, _&gt;</code>. This fails on the first <code>Result</code> that isn't <code>Ok</code>, which is exactly what we want! I think the <a href=\"https://doc.rust-lang.org/rust-by-example/error/iter_result.html#fail-the-entire-operation-with-collect\">rust book</a> has a better explanation if you want to look more into it.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                    .map(|lane| lane.count_ones())\n                    .collect::&lt;ValueResult&lt;SimdVec&lt;V&gt;&gt;&gt;()?;\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 252770553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631272986
    },
    {
        "content": "<p>dheaton-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314\">PR #3314</a> from <code>implement-bitops</code> to <code>main</code>.</p>",
        "id": 253109285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631546997
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314#pullrequestreview-752971199\">PR review</a>.</p>",
        "id": 253119464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631550544
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3314\">PR #3314</a>.</p>",
        "id": 253119481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631550551
    }
]