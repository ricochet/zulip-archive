[
    {
        "content": "<p>tliron opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>The <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/bindgen_examples/_6_exported_resources/index.html\">exported resources example</a> shows how to create a guest resource. Unfortunately it doesn't show how to actually send that resource to an exported client function.</p>\n<p>But, to this issue, it doesn't show how to access a resource returned by a call to the guest.</p>\n<p>The guest returns <code>ResourceAny</code>, and the documentation does make it clear that this is expected. However, now what?</p>\n<p>It cannot be converted to a <code>Resource</code>, because <code>try_into_resource</code> only works on host resources. (That is also not clear in the documentation, I had to delve into the source code to figure that out.)</p>\n<p>Also, it's also unclear to me if I must call <code>resource_drop</code> on the value returned by the guest. Or is that necessary just for host resources?</p>\n<p>The documentation could be more specific, and the example is not especially useful. In any case, I do not know how to proceed.</p>\n</blockquote>",
        "id": 492473876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736331634
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2577322055\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>A resource is an opaque id. I think all the host can do with a guest resource is to pass it as argument when calling a guest function or to call the drop function of the resource.</p>\n</blockquote>",
        "id": 492474707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736331923
    },
    {
        "content": "<p>tliron <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2577465231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>@bjorn3 , actually I figured it out and it is possible. The example code is the hint. Here's how it's done:</p>\n<p>1) First, create the dispatcher. From the example: <code>let logger = guest.logger();</code><br>\n2) Then, do <em>not</em> call <code>call_constructor</code>. We already have the <code>ResourceAny</code>! In fact, <code>call_constructor</code> returns a <code>ResourceAny</code>, too.<br>\n3) So now just call the resource functions via the dispatcher on the <code>ResourceAny</code> that you got from the guest, e.g. <code>logger.call_log(&amp;mut store, my_returned_value, Level::Debug, \"hello!\")?;</code><br>\n4) I'm pretty sure you need to <code>drop_resource</code>, too, when you're done. Well, at least it doesn't return an error when I call it.</p>\n<p>I wish the example actually showed this. Instead, the example doesn't have any exported functions in the interface, which doesn't seem to me to be a very common scenario.</p>\n</blockquote>",
        "id": 492486236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736336430
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2580820557\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>@tliron do you have a suggestion for what WIT you'd like to see in the example? it sounds like you figured things out otherwise, but I'd be happy to help update the example to be more useful to you.</p>\n</blockquote>",
        "id": 492770354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736441954
    },
    {
        "content": "<p>tliron <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2581037765\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>I mostly figured things out, but I'm sorry, I doubt that others would, too.</p>\n<p>Also, I'm still not sure if I have to manually <code>resource_drop</code>.</p>\n<p>1) I suggest that the \"exported resources example\" show a resource being both sent as an argument to an exported function, and <em>also</em> returned from it. So users can see how to create/send a resource and how to deal with one handed to them by the guest.</p>\n<p>2) I think the <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.ResourceAny.html\"><code>ResourceAny</code> documentation</a> is confusing and possibly wrong. It says that it can represent either a guest or host resource, but then blends both uses together. It mentions <code>try_from_resource</code>, but that only works on host resources. Generally it is unclear why you would ever need to create a ResourceAny for a host resource in the first place. I mean no disrespect to the author, but I would recommend rewriting that entire section to make it clear why ResourceAny exists in the first place for the guest, why it exists for the host, and separate the rules for those two use cases clearly.</p>\n<p>On that note, why does <code>wasmtime::component::bindgen</code> emit code that uses <code>ResourceAny</code> in the first place, forcing us to unpack and deal with it ourselves? Wouldn't it have been more ergonomic to already handle the conversion to <code>Resource&lt;T&gt;</code>? Is there an efficiency concern here?</p>\n<p>Again, going back to my suggestion #1, a full example of dealing with this would make these challenges easier to see.</p>\n</blockquote>",
        "id": 492795187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736448921
    },
    {
        "content": "<p>tliron edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2581037765\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>I mostly figured things out, but I'm sorry, I doubt that others would, too.</p>\n<p>Also, I'm still not sure if I have to manually <code>resource_drop</code>.</p>\n<p>1) I suggest that the \"exported resources example\" show a resource being both sent as an argument to an exported function, and <em>also</em> returned from it. So users can see how to create/send a resource and how to deal with one handed to them by the guest.</p>\n<p>2) I think the <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.ResourceAny.html\"><code>ResourceAny</code> documentation</a> is confusing and possibly wrong. It says that it can represent either a guest or host resource, but then blends both uses together. It mentions <code>try_from_resource</code>, but that only works on host resources. Generally it is unclear why you would ever need to create a ResourceAny for a host resource in the first place. I mean no disrespect to the author, but I would recommend rewriting that entire section to make it clear why ResourceAny exists in the first place for the guest, why it exists for the host, and separate the rules for those two use cases clearly.</p>\n<p>On that note, why does <code>wasmtime::component::bindgen</code> emit code that uses <code>ResourceAny</code> in the first place, forcing us to unpack and deal with it ourselves? Wouldn't it have been more ergonomic to already handle the conversion to <code>Resource&lt;T&gt;</code>? Is there an efficiency concern here?</p>\n<p>Again, going back to my suggestion 1, a full example of dealing with this would make these challenges easier to see.</p>\n</blockquote>",
        "id": 492805901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736452423
    },
    {
        "content": "<p>tliron edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2581037765\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>I mostly figured things out, but I'm sorry, I doubt that others would, too.</p>\n<p>Also, I'm still not sure if I have to manually <code>resource_drop</code>.</p>\n<p>1) I suggest that the \"exported resources example\" show a resource being both sent as an argument to an exported function, and <em>also</em> returned from it. So users can see how to create/send a resource and how to deal with one handed to them by the guest.</p>\n<p>2) I think the <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.ResourceAny.html\"><code>ResourceAny</code> documentation</a> is confusing and possibly wrong. It says that it can represent either a guest or host resource, but then blends both uses together. It mentions <code>try_from_resource</code>, but that only works on host resources. Generally it is unclear why you would ever need to create a ResourceAny for a host resource in the first place. I mean no disrespect to the author, but I would recommend rewriting that entire section to make it clear why ResourceAny exists for the guest, why it exists for the host, and separate the rules for those two use cases clearly.</p>\n<p>On that note, why does <code>wasmtime::component::bindgen</code> emit code that uses <code>ResourceAny</code>, forcing us to unpack and deal with it ourselves? Wouldn't it have been more ergonomic to already handle the conversion to <code>Resource&lt;T&gt;</code> for us? Is there an efficiency concern here?</p>\n<p>Again, going back to my suggestion 1, a full example of dealing with this would make these challenges easier to see.</p>\n</blockquote>",
        "id": 492806086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736452493
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2583184553\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>Hm I'm a bit confused, and while I agree we can improve docs I'm going to try to drill in here to be a bit more specific. Basically I'm not sure where the disconnect is and understanding that'll be important to improve the documentation.</p>\n<hr>\n<blockquote>\n<p>Also, I'm still not sure if I have to manually resource_drop.</p>\n</blockquote>\n<p>The example linked ends with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// The `ResourceAny` type has no destructor but when the host is done</span>\n<span class=\"w\">    </span><span class=\"c1\">// with it it needs to invoke the guest-level destructor.</span>\n<span class=\"w\">    </span><span class=\"n\">my_logger</span><span class=\"p\">.</span><span class=\"n\">resource_drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>and the <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.ResourceAny.html\">documentation states</a>:</p>\n<blockquote>\n<p>Note that it is required to call resource_drop for all instances of <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.ResourceAny.html\">ResourceAny</a>: even borrows. Both borrows and own handles have state associated with them that must be discarded by the time they’re done being used.</p>\n</blockquote>\n<p>So I'm curious to understand more where you're left with an ambiguity of what to do? It should be the case that all <code>ResourceAny</code> needs to be dropped via <code>resource_drop</code>.</p>\n<hr>\n<blockquote>\n<p>I suggest that the \"exported resources example\" show a resource being both sent as an argument to an exported function, and also returned from it</p>\n</blockquote>\n<p>The example has this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_logger</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"n\">call_constructor</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">Warn</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"n\">call_get_max_level</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">my_logger</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">Warn</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>where <code>call_constructor</code> is returning a resource (<code>my_logger: ResourceAny</code>) and <code>call_get_max_level</code> is taking the resource as an argument. Do you feel that one of these isn't satisfying what you were looking for, and if so how come?</p>\n<p>It's impossible for the host to create a <code>ResourceAny</code> out of nothing. It's required to be created by the guest and returned back, so is that perhaps a possible source of confusion?</p>\n<hr>\n<blockquote>\n<p>I think the <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.ResourceAny.html\">ResourceAny documentation</a> is confusing and possibly wrong.</p>\n</blockquote>\n<p>I definitely agree that some examples of using <code>ResourceAny</code> for host resources would be useful! It's relatively niche and thus would be good to document.</p>\n<p>Could you clarify which part you think is wrong though? I skimmed over and it looks accurate (albeit not as clear as it could be) to me.</p>\n<hr>\n<blockquote>\n<p>On that note, why does wasmtime::component::bindgen emit code that uses ResourceAny, forcing us to unpack and deal with it ourselves? Wouldn't it have been more ergonomic to already handle the conversion to Resource&lt;T&gt; for us? Is there an efficiency concern here?</p>\n</blockquote>\n<p>These are good questions! Unfortunately though it's not possible to do this. The reasons for this touch on the design of the component model itself and how it interacts with instantiation and static types. Basically it's impossible to statically rule out runtime type errors here. Now that doesn't mean the situation couldn't be improved with a type parameter, but even if that were the case there'd still be the possibility for a runtime type error. The current design is intended to reflect that a runtime type error is always possible.</p>\n</blockquote>",
        "id": 492984673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736526668
    },
    {
        "content": "<p>tliron <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2583691457\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>Let's take this slowly.</p>\n<p>I think the current example is the niche one. Perhaps there's a misunderstanding on the use cases for resources. Here's a snippet from one of my WITs to give you an idea:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">acme</span><span class=\"p\">:</span><span class=\"nc\">acme</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">null</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"n\">s64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unsigned</span><span class=\"o\">-</span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">float</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">boolean</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">kv</span><span class=\"o\">-</span><span class=\"n\">pairs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">dispatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// not shown here, but also uses resources as arguments</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The point is to show you that resources can be used as arguments and return values for functions, indeed in complex scenarios where they are nested in lists, records, or variants. I believe that's their true power.</p>\n<p>In the currently existing example the resource creation is initiated by the host, so it's clear that the host owns it and must drop it. It includes no exported or imported functions at all in the interface. Actually, it does make resources seem rather useless as they do don't do much that can't be done with just exported functions (with a little extra \"logger-name\" argument), so I understand why it looks \"niche\" to you.</p>\n<p>Back to my example, the concept of ownership is unclear. Who owns a resource sent as an argument? Who owns a resource returned by a function? And who is responsible for dropping? The documentation mentions \"borrows\", but to be honest I don't understand what is \"borrowed\" here at all. The arguments and return value are all pass-by-value, intending to pass ownership, too. How does one \"borrow\" a resource in my example? Are there any \"borrows\" you can point to?</p>\n<p>My OP issue very specifically was about accessing, at the host, the result returned by the exported <code>dispatch</code> function above. I managed to figure out that I had to do it like this (pseudo-snippet dealing specifically with a nested <code>value-list</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_returned_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">::</span><span class=\"n\">ValueList</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">functions</span><span class=\"p\">.</span><span class=\"n\">acme_acme_dispatcher</span><span class=\"p\">().</span><span class=\"n\">value_list</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"p\">.</span><span class=\"n\">call_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">resource_drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// do I need this?</span>\n<span class=\"w\">              </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"o\">....</span>\n<span class=\"w\">       </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My initial challenge was that it was unclear that I had to explicitly call <code>functions.acme_acme_dispatcher().value_list()</code> in order to gain access to that returned (and nested) resource. Te documentation says that I should use <code>ResourceAny::try_from_resource</code>, but that's simply wrong for this scenario, as that works only on \"host-defined resources\". The documentation doesn't make that clear at all, and indeed doesn't tell me what to do with guest-defined resources. I figured that out myself by poring over Wasmtime code.</p>\n<p>The side issue (not the main reason I opened this issue): In currently existing example, the drop is indeed obvious because in it you are constructing the resource yourself, so of course you would have to drop it when you're done using it. Nobody else would. But it's that last drop in my code that is unclear to me.</p>\n<p>Did the guest pass ownership to me? Does that mean I really have to drop the resource?</p>\n<p>What about passing resources as argument in the call to <code>dispatch</code>? Who owns those and who is supposed to drop them? The guest? How does the guest drop them?</p>\n<p>And here's why this has me worried and I'm making a big deal out of it: If indeed the host has to drop the returned resource then, well, what happens if it doesn't? What happens if I never handles the return value the way I did above? Will this be a memory leak? If that's true, then that's a very big deal that needs to be carefully documented and made very prominent by an example.</p>\n<p>And I'm sorry but the current documentation and example have not helped me much understand this situation.</p>\n</blockquote>",
        "id": 493011328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736536672
    },
    {
        "content": "<p>tliron edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2583691457\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>Let's take this slowly.</p>\n<p>I think the current example is the niche one. Perhaps there's a misunderstanding on the use cases for resources. Here's a snippet from one of my WITs to give you an idea:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">acme</span><span class=\"p\">:</span><span class=\"nc\">acme</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">null</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"n\">s64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unsigned</span><span class=\"o\">-</span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">float</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">boolean</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">kv</span><span class=\"o\">-</span><span class=\"n\">pairs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">dispatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// not shown here, but also uses resources as arguments</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The point is to show you that resources can be used as arguments and return values for functions, indeed in complex scenarios where they are nested in lists, records, or variants. I believe that's their true power.</p>\n<p>In the currently existing example the resource creation is initiated by the host, so it's clear that the host owns it and must drop it. It includes no exported or imported functions at all in the interface. Actually, it does make resources seem rather useless as they don't do much that can't be done with just exported functions (with a little extra \"logger-name\" argument), so I understand why it looks \"niche\" to you.</p>\n<p>Back to my example, the concept of ownership is unclear. Who owns a resource sent as an argument? Who owns a resource returned by a function? And who is responsible for dropping? The documentation mentions \"borrows\", but to be honest I don't understand what is \"borrowed\" here at all. The arguments and return value are all pass-by-value, intending to pass ownership, too. How does one \"borrow\" a resource in my example? Are there any \"borrows\" you can point to?</p>\n<p>My OP issue very specifically was about accessing, at the host, the result returned by the exported <code>dispatch</code> function above. I managed to figure out that I had to do it like this (pseudo-snippet dealing specifically with a nested <code>value-list</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_returned_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">::</span><span class=\"n\">ValueList</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">functions</span><span class=\"p\">.</span><span class=\"n\">acme_acme_dispatcher</span><span class=\"p\">().</span><span class=\"n\">value_list</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"p\">.</span><span class=\"n\">call_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">resource_drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// do I need this?</span>\n<span class=\"w\">              </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"o\">....</span>\n<span class=\"w\">       </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My initial challenge was that it was unclear that I had to explicitly call <code>functions.acme_acme_dispatcher().value_list()</code> in order to gain access to that returned (and nested) resource. Te documentation says that I should use <code>ResourceAny::try_from_resource</code>, but that's simply wrong for this scenario, as that works only on \"host-defined resources\". The documentation doesn't make that clear at all, and indeed doesn't tell me what to do with guest-defined resources. I figured that out myself by poring over Wasmtime code.</p>\n<p>The side issue (not the main reason I opened this issue): In currently existing example, the drop is indeed obvious because in it you are constructing the resource yourself, so of course you would have to drop it when you're done using it. Nobody else would. But it's that last drop in my code that is unclear to me.</p>\n<p>Did the guest pass ownership to me? Does that mean I really have to drop the resource?</p>\n<p>What about passing resources as argument in the call to <code>dispatch</code>? Who owns those and who is supposed to drop them? The guest? How does the guest drop them?</p>\n<p>And here's why this has me worried and I'm making a big deal out of it: If indeed the host has to drop the returned resource then, well, what happens if it doesn't? What happens if I never handles the return value the way I did above? Will this be a memory leak? If that's true, then that's a very big deal that needs to be carefully documented and made very prominent by an example.</p>\n<p>And I'm sorry but the current documentation and example have not helped me much understand this situation.</p>\n</blockquote>",
        "id": 493011517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736536749
    },
    {
        "content": "<p>tliron edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2583691457\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>Let's take this slowly.</p>\n<p>I think the current example is the niche one. Perhaps there's a misunderstanding on the use cases for resources. Here's a snippet from one of my WITs to give you an idea:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">acme</span><span class=\"p\">:</span><span class=\"nc\">acme</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">null</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"n\">s64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unsigned</span><span class=\"o\">-</span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">float</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">boolean</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">kv</span><span class=\"o\">-</span><span class=\"n\">pairs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">dispatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// not shown here, but also uses resources as arguments</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The point is to show you that resources can be used as arguments and return values for functions, indeed in complex scenarios where they are nested in lists, records, or variants. I believe that's their true power.</p>\n<p>In the currently existing example the resource creation is initiated by the host, so it's clear that the host owns it and must drop it. It includes no exported or imported functions at all in the interface. Actually, it does make resources seem rather useless as they don't do much that can't be done with just exported functions (with a little extra \"logger-name\" argument), so I understand why it looks \"niche\" to you.</p>\n<p>Back to my example, the concept of ownership is unclear. Who owns a resource sent as an argument? Who owns a resource returned by a function? And who is responsible for dropping? The documentation mentions \"borrows\", but to be honest I don't understand what is \"borrowed\" here at all. The arguments and return value are all pass-by-value, intending to pass ownership, too. How does one \"borrow\" a resource in my example? Are there any \"borrows\" you can point to?</p>\n<p>My OP issue very specifically was about accessing, at the host, the result returned by the exported <code>dispatch</code> function above. I managed to figure out that I had to do it like this (pseudo-snippet dealing specifically with a nested <code>value-list</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_returned_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">::</span><span class=\"n\">ValueList</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">functions</span><span class=\"p\">.</span><span class=\"n\">acme_acme_dispatcher</span><span class=\"p\">().</span><span class=\"n\">value_list</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"p\">.</span><span class=\"n\">call_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">resource_drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// do I need this?</span>\n<span class=\"w\">              </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"o\">....</span>\n<span class=\"w\">       </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My initial challenge was that it was unclear that I had to explicitly call <code>functions.acme_acme_dispatcher().value_list()</code> in order to gain access to that returned (and nested) resource. The documentation says that I should use <code>ResourceAny::try_from_resource</code>, but that's simply wrong for this scenario, as that works only on \"host-defined resources\". The documentation doesn't make that clear at all, and indeed doesn't tell me what to do with guest-defined resources. I figured that out myself by poring over Wasmtime code.</p>\n<p>The side issue (not the main reason I opened this issue): In currently existing example, the drop is indeed obvious because in it you are constructing the resource yourself, so of course you would have to drop it when you're done using it. Nobody else would. But it's that last drop in my code that is unclear to me.</p>\n<p>Did the guest pass ownership to me? Does that mean I really have to drop the resource?</p>\n<p>What about passing resources as argument in the call to <code>dispatch</code>? Who owns those and who is supposed to drop them? The guest? How does the guest drop them?</p>\n<p>And here's why this has me worried and I'm making a big deal out of it: If indeed the host has to drop the returned resource then, well, what happens if it doesn't? What happens if I never handles the return value the way I did above? Will this be a memory leak? If that's true, then that's a very big deal that needs to be carefully documented and made very prominent by an example.</p>\n<p>And I'm sorry but the current documentation and example have not helped me much understand this situation.</p>\n</blockquote>",
        "id": 493011689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736536820
    },
    {
        "content": "<p>tliron edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2583691457\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>Let's take this slowly.</p>\n<p>I think the current example is the niche one. Perhaps there's a misunderstanding on the use cases for resources. Here's a snippet from one of my WITs to give you an idea:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">acme</span><span class=\"p\">:</span><span class=\"nc\">acme</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">null</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"n\">s64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unsigned</span><span class=\"o\">-</span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">float</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">boolean</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">kv</span><span class=\"o\">-</span><span class=\"n\">pairs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">dispatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// not shown here, but also uses resources as arguments</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The point is to show you that resources can be used as arguments and return values for functions, indeed in complex scenarios where they are nested in lists, records, or variants. I believe that's their true power.</p>\n<p>In the currently existing example the resource creation is initiated by the host, so it's clear that the host owns it and must drop it. It includes no exported or imported functions at all in the interface. Actually, it does make resources seem rather useless as they don't do much that can't be done with just exported functions (with a little extra \"logger-name\" argument), so I understand why it looks \"niche\" to you.</p>\n<p>Back to my example, the concept of ownership is unclear. Who owns a resource sent as an argument? Who owns a resource returned by a function? And who is responsible for dropping? The documentation mentions \"borrows\", but to be honest I don't understand what is \"borrowed\" here at all. The arguments and return value are all pass-by-value, intending to pass ownership, too. How does one \"borrow\" a resource in my example? Are there any \"borrows\" you can point to?</p>\n<p>My OP issue very specifically was about accessing, at the host, the result returned by the exported <code>dispatch</code> function above. I managed to figure out that I had to do it like this (pseudo-snippet dealing specifically with a nested <code>value-list</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_returned_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">::</span><span class=\"n\">ValueList</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">functions</span><span class=\"p\">.</span><span class=\"n\">acme_acme_dispatcher</span><span class=\"p\">().</span><span class=\"n\">value_list</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"p\">.</span><span class=\"n\">call_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">resource_drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// do I need this?</span>\n<span class=\"w\">              </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"o\">....</span>\n<span class=\"w\">       </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My initial challenge was that it was unclear that I had to explicitly call <code>functions.acme_acme_dispatcher().value_list()</code> in order to gain access to that returned (and nested) resource. The documentation says that I should use <code>ResourceAny::try_from_resource</code>, but that's wrong for this scenario, as that function works only on \"host-defined resources\". The documentation doesn't make that clear, and indeed doesn't tell me what to do, instead, with guest-defined resources. I figured that out by myself by poring over Wasmtime code.</p>\n<p>The side issue (not the main reason I opened this issue): In the currently existing example, the drop is indeed obvious because in it you are constructing the resource yourself, so of course you would have to drop it when you're done using it. Nobody else would. But it's that last drop in my code that is unclear to me.</p>\n<p>Did the guest pass ownership to me? Does that mean I really have to drop the resource?</p>\n<p>What about passing resources as argument in the call to <code>dispatch</code>? Who owns those and who is supposed to drop them? The guest? How does the guest drop them?</p>\n<p>And here's why this has me worried and I'm making a big deal out of it: If indeed the host has to drop the returned resource then, well, what happens if it doesn't? What happens if I never handles the return value the way I did above? Will this be a memory leak? If that's true, then that's a very big deal that needs to be carefully documented and made very prominent by an example.</p>\n<p>And I'm sorry but the current documentation and example have not helped me much understand this situation.</p>\n</blockquote>",
        "id": 493011872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736536888
    },
    {
        "content": "<p>tliron edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2583691457\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>Let's take this slowly.</p>\n<p>I think the current example is the niche one. Perhaps there's a misunderstanding on the use cases for resources. Here's a snippet from one of my WITs to give you an idea:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">acme</span><span class=\"p\">:</span><span class=\"nc\">acme</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">null</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"n\">s64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unsigned</span><span class=\"o\">-</span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">float</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">boolean</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">kv</span><span class=\"o\">-</span><span class=\"n\">pairs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">dispatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// not shown here, but also uses resources as arguments</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The point is to show you that resources can be used as arguments and return values for functions, indeed in complex scenarios where they are nested in lists, records, or variants. I believe that's their true power.</p>\n<p>In the currently existing example the resource creation is initiated by the host, so it's clear that the host owns it and must drop it. It includes no exported or imported functions at all in the interface. Actually, it does make resources seem rather useless as they don't do much that can't be done with just exported functions (with a little extra \"logger-name\" argument), so I understand why it looks \"niche\" to you.</p>\n<p>Back to my example, the concept of ownership is unclear. Who owns a resource sent as an argument? Who owns a resource returned by a function? And who is responsible for dropping? The documentation mentions \"borrows\", but to be honest I don't understand what is \"borrowed\" here at all. The arguments and return value are all pass-by-value, intending to pass ownership, too. How does one \"borrow\" a resource in my example? Are there any \"borrows\" you can point to?</p>\n<p>My OP issue very specifically was about accessing, at the host, the result returned by the exported <code>dispatch</code> function above. I managed to figure out that I had to do it like this (pseudo-snippet dealing specifically with a nested <code>value-list</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_returned_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">::</span><span class=\"n\">ValueList</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">functions</span><span class=\"p\">.</span><span class=\"n\">acme_acme_dispatcher</span><span class=\"p\">().</span><span class=\"n\">value_list</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"p\">.</span><span class=\"n\">call_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">resource_drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// do I need this?</span>\n<span class=\"w\">              </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"o\">....</span>\n<span class=\"w\">       </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My initial challenge was that it was unclear that I had to explicitly call <code>functions.acme_acme_dispatcher().value_list()</code> in order to gain access to that returned (and nested) resource. The documentation says that I should use <code>ResourceAny::try_from_resource</code>, but that's wrong for this scenario, as that function works only on \"host-defined resources\". The documentation doesn't make that clear, and indeed doesn't tell me what to do, instead, with guest-defined resources. I figured that out by myself by poring over Wasmtime code.</p>\n<p>The side issue (not the main reason I opened this issue): In the currently existing example, the drop is indeed obvious because in it you are constructing the resource yourself, so of course you would have to drop it when you're done using it. Nobody else would. But it's that last drop in my code that is unclear to me.</p>\n<p>Did the guest pass ownership to me? Does that mean I really have to drop the resource?</p>\n<p>What about passing resources as arguments in the call to <code>dispatch</code>? Who owns those and who is supposed to drop them? The guest? How does the guest drop them? Can we see an example of that?</p>\n<p>And here's why this has me worried and I'm making a big deal out of it: If indeed the host has to drop the returned resource then, well, what happens if it doesn't? What happens if I never handles the return value the way I did above? Will this be a memory leak? If that's true, then that's a very big deal that needs to be carefully documented and made very prominent by an example.</p>\n<p>And I'm sorry but the current documentation and example have not helped me much understand this situation.</p>\n</blockquote>",
        "id": 493012029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736536952
    },
    {
        "content": "<p>tliron edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2583691457\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>Let's take this slowly.</p>\n<p>I think the current example is the niche one. Perhaps there's a misunderstanding on the use cases for resources. Here's a snippet from one of my WITs to give you an idea:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">acme</span><span class=\"p\">:</span><span class=\"nc\">acme</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">null</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"n\">s64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unsigned</span><span class=\"o\">-</span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">float</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">boolean</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">kv</span><span class=\"o\">-</span><span class=\"n\">pairs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">dispatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// not shown here, but also uses resources as arguments</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The point is to show you that resources can be used as arguments and return values for functions, indeed in complex scenarios where they are nested in lists, records, or variants. I believe that's their true power.</p>\n<p>In the currently existing example the resource creation is initiated by the host, so it's clear that the host owns it and must drop it. It includes no exported or imported functions at all in the interface. Actually, it does make resources seem rather useless as they don't do much that can't be done with just exported functions (with a little extra \"logger-name\" argument), so I understand why it looks \"niche\" to you.</p>\n<p>Back to my example, the concept of ownership is unclear. Who owns a resource sent as an argument? Who owns a resource returned by a function? And who is responsible for dropping? The documentation mentions \"borrows\", but to be honest I don't understand what is \"borrowed\" here at all. The arguments and return value are all pass-by-value, intending to pass ownership, too. How does one \"borrow\" a resource in my example? Are there any \"borrows\" you can point to?</p>\n<p>My OP issue very specifically was about accessing, at the host, the result returned by the exported <code>dispatch</code> function above. I managed to figure out that I had to do it like this (pseudo-snippet dealing specifically with a nested <code>value-list</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_returned_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">::</span><span class=\"n\">ValueList</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">functions</span><span class=\"p\">.</span><span class=\"n\">acme_acme_dispatcher</span><span class=\"p\">().</span><span class=\"n\">value_list</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"p\">.</span><span class=\"n\">call_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">resource_drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// do I need this?</span>\n<span class=\"w\">              </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"o\">....</span>\n<span class=\"w\">       </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My initial challenge was that it was unclear that I had to explicitly call <code>functions.acme_acme_dispatcher().value_list()</code> in order to gain access to that returned (and nested) resource. The documentation says that I should use <code>ResourceAny::try_from_resource</code>, but that's wrong for this scenario, as that function works only on \"host-defined resources\". The documentation doesn't make that clear, and indeed doesn't tell me what to do, instead, with guest-defined resources. I figured that out by myself by poring over Wasmtime code.</p>\n<p>The side issue (not the main reason I opened this issue): In the currently existing example, the drop is indeed obvious because in it you are constructing the resource yourself, so of course you would have to drop it when you're done using it. Nobody else would. But it's that last drop in my code that is unclear to me.</p>\n<p>Did the guest pass ownership to me? Does that mean I really have to drop the resource?</p>\n<p>What about passing resources as arguments in the call to <code>dispatch</code>? Who owns those and who is supposed to drop them? The guest? How does the guest drop them? Can we see an example of that?</p>\n<p>And here's why this has me worried and I'm making a big deal out of it: If indeed the host has to drop the returned resource then, well, what happens if it doesn't? What happens if I never handle the return value the way I did above? Will this be a memory leak? If that's true, then that's a very big deal that needs to be carefully documented and made very prominent by an example.</p>\n<p>Consider that in my case, because the resources can be nested (recursively), such a cleanup would involve more than one drop. That's a lot of responsibility put on my code. I can do it, it's just not clear to me that I must.</p>\n<p>And I'm sorry but the current documentation and example have not helped me much understand much about this situation.</p>\n</blockquote>",
        "id": 493012268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736537054
    },
    {
        "content": "<p>tliron edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2583691457\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>Let's take this slowly.</p>\n<p>I think the current example is the niche one. Perhaps there's a misunderstanding on the use cases for resources. Here's a snippet from one of my WITs to give you an idea:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">acme</span><span class=\"p\">:</span><span class=\"nc\">acme</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">null</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"n\">s64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unsigned</span><span class=\"o\">-</span><span class=\"n\">integer</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">float</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">boolean</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">-</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">kv</span><span class=\"o\">-</span><span class=\"n\">pairs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">dispatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// not shown here, but also uses resources as arguments</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The point is to show you that resources can be used as arguments and return values for functions, indeed in complex scenarios where they are nested in lists, records, or variants. I believe that's their true power.</p>\n<p>In the currently existing example the resource creation is initiated by the host, so it's clear that the host owns it and must drop it. It includes no exported or imported functions at all in the interface. Actually, it does make resources seem rather useless as they don't do much that can't be done with just exported functions (with a little extra \"logger-name\" argument), so I understand why it looks \"niche\" to you.</p>\n<p>Back to my example, the concept of ownership is unclear. Who owns a resource sent as an argument? Who owns a resource returned by a function? And who is responsible for dropping? The documentation mentions \"borrows\", but to be honest I don't understand what is \"borrowed\" here at all. The arguments and return value are all pass-by-value, intending to pass ownership, too. How does one \"borrow\" a resource in my example? Are there any \"borrows\" you can point to?</p>\n<p>My OP issue very specifically was about accessing, at the host, the result returned by the exported <code>dispatch</code> function above. I managed to figure out that I had to do it like this (pseudo-snippet dealing specifically with a nested <code>value-list</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_returned_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">dispatcher</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">::</span><span class=\"n\">ValueList</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">functions</span><span class=\"p\">.</span><span class=\"n\">acme_acme_dispatcher</span><span class=\"p\">().</span><span class=\"n\">value_list</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value_list</span><span class=\"p\">.</span><span class=\"n\">call_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">              </span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">resource_drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// do I need this?</span>\n<span class=\"w\">              </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">}</span>\n<span class=\"w\">           </span><span class=\"o\">....</span>\n<span class=\"w\">       </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My initial challenge was that it was unclear that I had to explicitly call <code>functions.acme_acme_dispatcher().value_list()</code> in order to gain access to that returned (and nested) resource. The documentation says that I should use <code>ResourceAny::try_from_resource</code>, but that's wrong for this scenario, as that function works only on \"host-defined resources\". The documentation doesn't make that clear, and indeed doesn't tell me what to do, instead, with guest-defined resources. I figured that out by myself by poring over Wasmtime code.</p>\n<p>The side issue (not the main reason I opened this issue): In the currently existing example, the drop is indeed obvious because in it you are constructing the resource yourself, so of course you would have to drop it when you're done using it. Nobody else would. But it's that last drop in my code that is unclear to me.</p>\n<p>Did the guest pass ownership to me? Does that mean I really have to drop the resource?</p>\n<p>What about passing resources as arguments in the call to <code>dispatch</code>? Who owns those and who is supposed to drop them? The guest? How does the guest drop them? Can we see an example of that?</p>\n<p>And here's why this has me worried and I'm making a big deal out of it: If indeed the host has to drop the returned resource then, well, what happens if it doesn't? What happens if I never handle the return value the way I did above? Will this be a memory leak? If that's true, then that's a very big deal that needs to be carefully documented and made very prominent by an example.</p>\n<p>Consider that in my case, because the resources can be nested (recursively), such a cleanup would involve more than one drop. That's a lot of responsibility put on my code. I can do it, it's just not clear to me that I must.</p>\n<p>And I'm sorry but the current documentation and example have not helped me understand much about this situation.</p>\n</blockquote>",
        "id": 493019583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736540331
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946#issuecomment-2593994448\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9946\">issue #9946</a>:</p>\n<blockquote>\n<p>Thanks for writing that out! To answer some questions more quickly:</p>\n<ul>\n<li>Ownership is conveyed through the WIT signature. If you take a <code>value-list</code> that's by ownership. If you take <code>borrow&lt;value-list&gt;</code> that's now owned. If you return <code>value-list</code> then the host is now responsible for dropping that. Returning <code>borrow&lt;value-list&gt;</code> isn't allowed by WIT. Basically tl;dr; in your example ownership is always required everywhere, so passing arguments to the guest is always relinquishing ownership and receiving results is always acquiring ownership.</li>\n<li>If the host does not call <code>resource_drop</code>, yes, that's a leak. It's a leak until the <code>Store&lt;T&gt;</code> is deallocated, though, so it's not a permanent leak in the sense of you called <code>malloc</code> and forgot to call <code>free</code>.</li>\n</ul>\n<blockquote>\n<p>It includes no exported or imported functions at all in the interface.</p>\n</blockquote>\n<p>For this the example has <code>export logging;</code> which means that the entire interface, and all functions, and all resource methods/functions, are all exported. For example <code>example:exported-resources/logging/logger/get-max-level</code> is an exported function. Could you clarify more what you're looking for in an exported function? Are you looking for example for a free funtion within <code>interface logging</code>?</p>\n</blockquote>",
        "id": 494021956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736977208
    }
]