[
    {
        "content": "<p>itsrainy opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a> from <code>bytecodealliance:rainy/coredumps</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This adds a configuration option and machinery to capture a core dump when<br>\na trap occurs and attach it to the resulting anyhow::Error that gets bubbled up to<br>\nthe caller. I've created a CoreDumpStack structure in the runtime, which is<br>\ncurrently just a backtrace until we design a way to recover the locals and<br>\nstack values when a trap occurs. When that CoreDumpStack gets converted to<br>\na wasmtime::WasmCoreDump, we add additional information from the Store such<br>\nas globals, memories, and instance information.</p>\n<p>A lot of this is mechanistically similar to how backtraces<br>\nare captured and attached to errors. Given that they both are attached as<br>\ncontext to anyhow::Errors, setting coredump_on_trap to true will supersede<br>\nany setting for wasm_backtrace.</p>\n</blockquote>",
        "id": 363179179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685745450
    },
    {
        "content": "<p><strong>itsrainy</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 363179184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685745451
    },
    {
        "content": "<p><strong>itsrainy</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 363179185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685745451
    },
    {
        "content": "<p><strong>itsrainy</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 363179187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685745451
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 363183720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685747589
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#pullrequestreview-1470492333\">PR review</a>:</p>\n<blockquote>\n<p>This is looking good!</p>\n<p>Before this can land, we still need some smoke tests under <code>tests/all/coredump.rs</code> though. Should test that we get the expected stack, modules, instances, globals, and memories in the resulting coredumps.</p>\n<p>To be explicit, mostly for folks following along at home, I'm okay with waiting for follow up PRs to implement</p>\n<ul>\n<li>serialization into the Wasm coredump format for <code>wastime::WasmCoreDump</code></li>\n<li>implementing <code>wasmtime --coredump-on-trap=...</code> in the CLI on top of <code>wasmtime::WasmCoreDump</code>.</li>\n</ul>\n<p>A few nitpicks inline below.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 364644711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686248329
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#pullrequestreview-1470492333\">PR review</a>:</p>\n<blockquote>\n<p>This is looking good!</p>\n<p>Before this can land, we still need some smoke tests under <code>tests/all/coredump.rs</code> though. Should test that we get the expected stack, modules, instances, globals, and memories in the resulting coredumps.</p>\n<p>To be explicit, mostly for folks following along at home, I'm okay with waiting for follow up PRs to implement</p>\n<ul>\n<li>serialization into the Wasm coredump format for <code>wastime::WasmCoreDump</code></li>\n<li>implementing <code>wasmtime --coredump-on-trap=...</code> in the CLI on top of <code>wasmtime::WasmCoreDump</code>.</li>\n</ul>\n<p>A few nitpicks inline below.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 364644712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686248329
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#discussion_r1223379095\">PR review comment</a>:</p>\n<blockquote>\n<p>We can make this a timeless comment rather than a TODO, since it won't ever be the case that we always recover all Wasm state, regardless of the compiler in use and debug flags and all that:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// Note that some state, such as Wasm locals or values on the operand stack,\n/// may be optimized away by the compiler or otherwise not recovered in the\n/// coredump.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 364644713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686248329
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#discussion_r1223374201\">PR review comment</a>:</p>\n<blockquote>\n<p>This doesn't actually override the <code>wasm_backtrace</code> option internally, and if someone tries to downcast the <code>anyhow::Error</code> to a <code>WasmBacktrace</code> they won't get one if they only set this option and not the other, so I think these docs are slightly misleading/confusing. I think we can remove the whole second sentence here.</p>\n<p>Also, and this is like the ultimate nitpick, we try to follow the Rust/rustdoc idioms for doc comments (especially for <code>Config</code>). <code>rustdoc</code> will inline the first paragraph of a doc comment into the \"index\" view of types/methods/etc so having a single, short, and to the point sentence for the first paragraph is good. Then there can be any number of paragraphs (separated by newlines so rustdoc recognizes them as paragraphs) providing more details for when users are on the methods details doc page. See the bot's comment (you have to expand the <code>&lt;details&gt;</code>) for an example.</p>\n</blockquote>",
        "id": 364644714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686248329
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#discussion_r1223381521\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you double check that these links all work in the rendered html docs? IIRC using types as URLs requires <code>[text][the::Type]</code> not <code>[text](the::Type)</code> and I sort of remember needing <code>crate::</code> prefixes for local-to-the-crate types (eg <code>[Trap][crate::Trap]</code>) but I'm not 100% sure about it. As long as everything works, I'm happy!</p>\n</blockquote>",
        "id": 364644715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686248329
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#discussion_r1223384003\">PR review comment</a>:</p>\n<blockquote>\n<p>Is there a particular reason this is a <code>Display</code> impl and not a <code>Debug</code> impl? Or why we can't just <code>derive(Debug)</code>?</p>\n</blockquote>",
        "id": 364644716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686248329
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#discussion_r1223392981\">PR review comment</a>:</p>\n<blockquote>\n<p>I think if we have a backtrace and a coredump, we want to attach them both as context to the error, so I think it would be better to do something like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">bt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmBacktrace</span>::<span class=\"n\">from_captured</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">bt</span><span class=\"p\">.</span><span class=\"n\">wasm_trace</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">bt</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">cd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">coredump</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmBacktrace</span>::<span class=\"n\">from_captured</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cd</span><span class=\"p\">.</span><span class=\"n\">bt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmCoreDump</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">cd</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">error</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 364644717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686248329
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#discussion_r1223375978\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: as written, this first sentence suggests that coredumps are always attached to the errors, so I think we should add this suffix:</p>\n<blockquote>\n<p>... when the <code>Config::coredump_on_trap</code> option is enabled.</p>\n</blockquote>\n</blockquote>",
        "id": 364644718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686248329
    },
    {
        "content": "<p>itsrainy created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#discussion_r1237432559\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is there a particular reason this is a Display impl and not a Debug impl?</p>\n</blockquote>\n<p>I think anyhow context requires it to implement Display iirc. I did try to <code>derive(Debug)</code> but it contains a vec of <code>Module</code> which doesn't <code>derive(Debug)</code> (and transitively contains other things that also don't derive it).</p>\n</blockquote>",
        "id": 368331552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687372798
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 368343669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687376052
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 368347850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687377179
    },
    {
        "content": "<p>itsrainy created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#discussion_r1237610806\">PR review comment</a>:</p>\n<blockquote>\n<p>Apparently it accepts both <code>()</code> and <code>[]</code>! I switched it to <code>[]</code> to be consistent. Also, yep it did need the crate prefix! </p>\n</blockquote>",
        "id": 368348168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687377253
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 370912793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688069392
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 370939614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688077829
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 370944227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688079886
    },
    {
        "content": "<p><strong>itsrainy</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a> as ready for review.</p>",
        "id": 370946652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688080957
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 370947982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688081605
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 371262897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688149016
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 373252218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688744190
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 376789181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689800255
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 376791598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689801043
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513#pullrequestreview-1548575774\">PR review</a>:</p>\n<blockquote>\n<p>LGTM! Feel free to enqueue to merge when this is rebased and conflicts are resolved.</p>\n</blockquote>",
        "id": 378943157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690404641
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 379200394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690470801
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 380713549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690898709
    },
    {
        "content": "<p>itsrainy merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6513\">PR #6513</a>.</p>",
        "id": 380771344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690907953
    }
]