[
    {
        "content": "<p>abrown labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<h3>What do you expect to happen? What does actually happen? Does it panic, and if so, with which assertion?</h3>\n<p><code>wasmtime</code> traps with an OOB memory access; Node does not. In Node</p>\n<div class=\"codehilite\"><pre><span></span>$ node --version\nv13.9.0\n$ node --experimental-wasm-simd emscripten-built-for-js.js\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\ndecode: vertex 16.32 ms (1.83 GB/sec), index 11.15 ms (2.00 GB/sec)\ndecode: vertex 16.33 ms (1.83 GB/sec), index 11.15 ms (2.00 GB/sec)\ndecode: vertex 16.57 ms (1.80 GB/sec), index 11.23 ms (1.99 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.35 ms (1.97 GB/sec)\ndecode: vertex 16.18 ms (1.85 GB/sec), index 11.16 ms (2.00 GB/sec)\ndecode: vertex 16.12 ms (1.85 GB/sec), index 11.19 ms (2.00 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.15 ms (2.01 GB/sec)\ndecode: vertex 16.16 ms (1.85 GB/sec), index 11.14 ms (2.01 GB/sec)\ndecode: vertex 16.15 ms (1.85 GB/sec), index 11.17 ms (2.00 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.16 ms (2.00 GB/sec)\npass 1: vertex data 18518204 bytes, index data 2001016 bytes\ndecode: vertex 16.12 ms (1.85 GB/sec), index 11.07 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.08 ms (2.02 GB/sec)\ndecode: vertex 16.11 ms (1.85 GB/sec), index 11.11 ms (2.01 GB/sec)\ndecode: vertex 16.21 ms (1.84 GB/sec), index 11.09 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.10 ms (2.01 GB/sec)\ndecode: vertex 16.07 ms (1.86 GB/sec), index 11.13 ms (2.01 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.06 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.10 ms (2.01 GB/sec)\ndecode: vertex 16.04 ms (1.86 GB/sec), index 11.14 ms (2.01 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.07 ms (2.02 GB/sec)\nfilters: oct8 data 4000000 bytes, oct12/quat12 data 8000000 bytes\nfilter: oct8 2.12 ms (1.76 GB/sec), oct12 2.26 ms (3.29 GB/sec), quat12 2.84 ms (2.63 GB/sec)\nfilter: oct8 2.11 ms (1.76 GB/sec), oct12 2.19 ms (3.40 GB/sec), quat12 2.79 ms (2.67 GB/sec)\nfilter: oct8 2.11 ms (1.77 GB/sec), oct12 2.17 ms (3.43 GB/sec), quat12 2.79 ms (2.67 GB/sec)\nfilter: oct8 2.13 ms (1.75 GB/sec), oct12 2.25 ms (3.32 GB/sec), quat12 2.86 ms (2.61 GB/sec)\nfilter: oct8 2.10 ms (1.77 GB/sec), oct12 2.17 ms (3.43 GB/sec), quat12 2.80 ms (2.66 GB/sec)\nfilter: oct8 2.09 ms (1.78 GB/sec), oct12 2.16 ms (3.45 GB/sec), quat12 2.81 ms (2.65 GB/sec)\nfilter: oct8 2.13 ms (1.75 GB/sec), oct12 2.28 ms (3.26 GB/sec), quat12 2.82 ms (2.64 GB/sec)\nfilter: oct8 2.23 ms (1.67 GB/sec), oct12 2.16 ms (3.44 GB/sec), quat12 2.81 ms (2.65 GB/sec)\nfilter: oct8 2.10 ms (1.78 GB/sec), oct12 2.15 ms (3.47 GB/sec), quat12 2.83 ms (2.63 GB/sec)\nfilter: oct8 2.14 ms (1.74 GB/sec), oct12 2.17 ms (3.44 GB/sec), quat12 2.80 ms (2.66 GB/sec)\n</pre></div>\n\n\n<p>In wasmtime (on branch <a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> which implements needed instructions). I tried various versions of the same code built with different tools:</p>\n<div class=\"codehilite\"><pre><span></span>$ ls ../oob/*.wasm | xargs -I{} sh -c &quot;cargo run -- run --enable-simd --disable-cache {}&quot;\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/emscripten-built-for-js.wasm`\nError: failed to run main module `../oob/emscripten-built-for-js.wasm`\n\nCaused by:\n    import module `a` was not found\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/emscripten-built.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/emscripten-built.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @7d97\n       wasm backtrace:\n         0: &lt;unknown&gt;!&lt;wasm function 74&gt;\n         1: &lt;unknown&gt;!&lt;wasm function 37&gt;\n         2: &lt;unknown&gt;!&lt;wasm function 75&gt;\n         3: &lt;unknown&gt;!&lt;wasm function 28&gt;\n         4: &lt;unknown&gt;!&lt;wasm function 67&gt;\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/wasi-sdk-built-extra-memory.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/wasi-sdk-built-extra-memory.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a5\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/wasi-sdk-built.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/wasi-sdk-built.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a4\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<h3>Which Wasmtime version / commit hash / branch are you using?</h3>\n<p>On branch <a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> which implements needed instructions.</p>\n<h3>What are the steps to reproduce the issue?</h3>\n<p>See above. Also, here are steps for building the Wasm modules from <a href=\"https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4\" title=\"https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4\">https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4</a>:</p>\n<div class=\"codehilite\"><pre><span></span># wasi-sdi-built.wasm (2^28 bytes of memory, 4096x64K pages)\n$ /opt/wasi-sdk/bin/clang++ --version\nclang version 11.0.0 (https://github.com/llvm/llvm-project 46bb6613a31fd43b6d4485ce7e71a387dc22cbc7)\nTarget: wasm32-unknown-wasi\nThread model: posix\nInstalledDir: /opt/wasi-sdk/bin\n$ make clean &amp;&amp; make codecbench-simd.wasm\n/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -fno-exceptions -Wl,--initial-memory=268435456 -msimd128 -o codecbench-simd.wasm\n\n# wasi-sdk-built-extra-memory.wasm (2^30 bytes, 16384x64K pages)\n$ make clean &amp;&amp; make codecbench-simd.wasm\n/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -fno-exceptions -Wl,--initial-memory=1073741824 -msimd128 -o codecbench-simd.wasm\n\n# emscripten-built.wasm\n$ emcc --version\nemcc (Emscripten gcc/clang-like replacement) 1.39.10 (commit 1bd7d547598f3fc74699c172f6c9c59a1e8484f1)\n$ make clean &amp;&amp; make codecbench-simd.wasm\nemcc tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -s TOTAL_MEMORY=268435456 -msimd128 -o codecbench-simd.wasm\n\n# then generated wat and dump files with\nls *.wasm | xargs -I{} sh -c &quot;wasm2wat --enable-all {} &gt; {}.wat&quot;\nls *.wasm | xargs -I{} sh -c &quot;wasm-objdump -d {} &gt; {}.dump&quot;\n</pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4383623/emscripten-built.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383623/emscripten-built.wasm.txt\">emscripten-built.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383624/emscripten-built.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383624/emscripten-built.wasm.wat.txt\">emscripten-built.wasm.wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383625/emscripten-built-for-js.js.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383625/emscripten-built-for-js.js.txt\">emscripten-built-for-js.js.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383626/emscripten-built-for-js.wasm.dump.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383626/emscripten-built-for-js.wasm.dump.txt\">emscripten-built-for-js.wasm.dump.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383627/emscripten-built-for-js.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383627/emscripten-built-for-js.wasm.txt\">emscripten-built-for-js.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383628/emscripten-built-for-js.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383628/emscripten-built-for-js.wasm.wat.txt\">emscripten-built-for-js.wasm.wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383629/wasi-sdk-built.wasm.dump.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383629/wasi-sdk-built.wasm.dump.txt\">wasi-sdk-built.wasm.dump.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383630/wasi-sdk-built.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383630/wasi-sdk-built.wasm.txt\">wasi-sdk-built.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383631/wasi-sdk-built.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383631/wasi-sdk-built.wasm.wat.txt\">wasi-sdk-built.wasm.wat.txt</a><br>\n[wasi-sdk-built-extra-memory.wasm.dump.txt](<a href=\"https://github.com/bytecodealliance/wasmti\" title=\"https://github.com/bytecodealliance/wasmti\">https://github.com/bytecodealliance/wasmti</a><br>\n[message truncated]</p>\n</blockquote>",
        "id": 191814123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585172168
    },
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<h3>What do you expect to happen? What does actually happen? Does it panic, and if so, with which assertion?</h3>\n<p><code>wasmtime</code> traps with an OOB memory access; Node does not. In Node</p>\n<div class=\"codehilite\"><pre><span></span>$ node --version\nv13.9.0\n$ node --experimental-wasm-simd emscripten-built-for-js.js\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\ndecode: vertex 16.32 ms (1.83 GB/sec), index 11.15 ms (2.00 GB/sec)\ndecode: vertex 16.33 ms (1.83 GB/sec), index 11.15 ms (2.00 GB/sec)\ndecode: vertex 16.57 ms (1.80 GB/sec), index 11.23 ms (1.99 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.35 ms (1.97 GB/sec)\ndecode: vertex 16.18 ms (1.85 GB/sec), index 11.16 ms (2.00 GB/sec)\ndecode: vertex 16.12 ms (1.85 GB/sec), index 11.19 ms (2.00 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.15 ms (2.01 GB/sec)\ndecode: vertex 16.16 ms (1.85 GB/sec), index 11.14 ms (2.01 GB/sec)\ndecode: vertex 16.15 ms (1.85 GB/sec), index 11.17 ms (2.00 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.16 ms (2.00 GB/sec)\npass 1: vertex data 18518204 bytes, index data 2001016 bytes\ndecode: vertex 16.12 ms (1.85 GB/sec), index 11.07 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.08 ms (2.02 GB/sec)\ndecode: vertex 16.11 ms (1.85 GB/sec), index 11.11 ms (2.01 GB/sec)\ndecode: vertex 16.21 ms (1.84 GB/sec), index 11.09 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.10 ms (2.01 GB/sec)\ndecode: vertex 16.07 ms (1.86 GB/sec), index 11.13 ms (2.01 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.06 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.10 ms (2.01 GB/sec)\ndecode: vertex 16.04 ms (1.86 GB/sec), index 11.14 ms (2.01 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.07 ms (2.02 GB/sec)\nfilters: oct8 data 4000000 bytes, oct12/quat12 data 8000000 bytes\nfilter: oct8 2.12 ms (1.76 GB/sec), oct12 2.26 ms (3.29 GB/sec), quat12 2.84 ms (2.63 GB/sec)\nfilter: oct8 2.11 ms (1.76 GB/sec), oct12 2.19 ms (3.40 GB/sec), quat12 2.79 ms (2.67 GB/sec)\nfilter: oct8 2.11 ms (1.77 GB/sec), oct12 2.17 ms (3.43 GB/sec), quat12 2.79 ms (2.67 GB/sec)\nfilter: oct8 2.13 ms (1.75 GB/sec), oct12 2.25 ms (3.32 GB/sec), quat12 2.86 ms (2.61 GB/sec)\nfilter: oct8 2.10 ms (1.77 GB/sec), oct12 2.17 ms (3.43 GB/sec), quat12 2.80 ms (2.66 GB/sec)\nfilter: oct8 2.09 ms (1.78 GB/sec), oct12 2.16 ms (3.45 GB/sec), quat12 2.81 ms (2.65 GB/sec)\nfilter: oct8 2.13 ms (1.75 GB/sec), oct12 2.28 ms (3.26 GB/sec), quat12 2.82 ms (2.64 GB/sec)\nfilter: oct8 2.23 ms (1.67 GB/sec), oct12 2.16 ms (3.44 GB/sec), quat12 2.81 ms (2.65 GB/sec)\nfilter: oct8 2.10 ms (1.78 GB/sec), oct12 2.15 ms (3.47 GB/sec), quat12 2.83 ms (2.63 GB/sec)\nfilter: oct8 2.14 ms (1.74 GB/sec), oct12 2.17 ms (3.44 GB/sec), quat12 2.80 ms (2.66 GB/sec)\n</pre></div>\n\n\n<p>In wasmtime (on branch <a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> which implements needed instructions). I tried various versions of the same code built with different tools:</p>\n<div class=\"codehilite\"><pre><span></span>$ ls ../oob/*.wasm | xargs -I{} sh -c &quot;cargo run -- run --enable-simd --disable-cache {}&quot;\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/emscripten-built-for-js.wasm`\nError: failed to run main module `../oob/emscripten-built-for-js.wasm`\n\nCaused by:\n    import module `a` was not found\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/emscripten-built.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/emscripten-built.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @7d97\n       wasm backtrace:\n         0: &lt;unknown&gt;!&lt;wasm function 74&gt;\n         1: &lt;unknown&gt;!&lt;wasm function 37&gt;\n         2: &lt;unknown&gt;!&lt;wasm function 75&gt;\n         3: &lt;unknown&gt;!&lt;wasm function 28&gt;\n         4: &lt;unknown&gt;!&lt;wasm function 67&gt;\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/wasi-sdk-built-extra-memory.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/wasi-sdk-built-extra-memory.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a5\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/wasi-sdk-built.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/wasi-sdk-built.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a4\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<h3>Which Wasmtime version / commit hash / branch are you using?</h3>\n<p>On branch <a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> which implements needed instructions.</p>\n<h3>What are the steps to reproduce the issue?</h3>\n<p>See above. Also, here are steps for building the Wasm modules from <a href=\"https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4\" title=\"https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4\">https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4</a>:</p>\n<div class=\"codehilite\"><pre><span></span># wasi-sdi-built.wasm (2^28 bytes of memory, 4096x64K pages)\n$ /opt/wasi-sdk/bin/clang++ --version\nclang version 11.0.0 (https://github.com/llvm/llvm-project 46bb6613a31fd43b6d4485ce7e71a387dc22cbc7)\nTarget: wasm32-unknown-wasi\nThread model: posix\nInstalledDir: /opt/wasi-sdk/bin\n$ make clean &amp;&amp; make codecbench-simd.wasm\n/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -fno-exceptions -Wl,--initial-memory=268435456 -msimd128 -o codecbench-simd.wasm\n\n# wasi-sdk-built-extra-memory.wasm (2^30 bytes, 16384x64K pages)\n$ make clean &amp;&amp; make codecbench-simd.wasm\n/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -fno-exceptions -Wl,--initial-memory=1073741824 -msimd128 -o codecbench-simd.wasm\n\n# emscripten-built.wasm\n$ emcc --version\nemcc (Emscripten gcc/clang-like replacement) 1.39.10 (commit 1bd7d547598f3fc74699c172f6c9c59a1e8484f1)\n$ make clean &amp;&amp; make codecbench-simd.wasm\nemcc tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -s TOTAL_MEMORY=268435456 -msimd128 -o codecbench-simd.wasm\n\n# then generated wat and dump files with\nls *.wasm | xargs -I{} sh -c &quot;wasm2wat --enable-all {} &gt; {}.wat&quot;\nls *.wasm | xargs -I{} sh -c &quot;wasm-objdump -d {} &gt; {}.dump&quot;\n</pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4383623/emscripten-built.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383623/emscripten-built.wasm.txt\">emscripten-built.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383624/emscripten-built.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383624/emscripten-built.wasm.wat.txt\">emscripten-built.wasm.wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383625/emscripten-built-for-js.js.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383625/emscripten-built-for-js.js.txt\">emscripten-built-for-js.js.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383626/emscripten-built-for-js.wasm.dump.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383626/emscripten-built-for-js.wasm.dump.txt\">emscripten-built-for-js.wasm.dump.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383627/emscripten-built-for-js.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383627/emscripten-built-for-js.wasm.txt\">emscripten-built-for-js.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383628/emscripten-built-for-js.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383628/emscripten-built-for-js.wasm.wat.txt\">emscripten-built-for-js.wasm.wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383629/wasi-sdk-built.wasm.dump.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383629/wasi-sdk-built.wasm.dump.txt\">wasi-sdk-built.wasm.dump.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383630/wasi-sdk-built.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383630/wasi-sdk-built.wasm.txt\">wasi-sdk-built.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383631/wasi-sdk-built.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383631/wasi-sdk-built.wasm.wat.txt\">wasi-sdk-built.wasm.wat.txt</a><br>\n[wasi-sdk-built-extra-memory.wasm.dump.txt](<a href=\"https://github.com/bytecodealliance/wasmtim\" title=\"https://github.com/bytecodealliance/wasmtim\">https://github.com/bytecodealliance/wasmtim</a><br>\n[message truncated]</p>\n</blockquote>",
        "id": 191814125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585172168
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604101859\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604101859\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>It is interesting that the OOB is triggered in different places:</p>\n<div class=\"codehilite\"><pre><span></span>$ wasm-objdump -d emscripten-built.wasm | grep -A5 -B5 7d97\n 007d8a: 0e 03 01 02 03 00          |                       br_table 1 2 3 0\n 007d90: 0b                         |                     end\n 007d91: 20 07                      |                     local.get 7\n 007d93: 41 00                      |                     i32.const 0\n 007d95: fd 0c                      |                     i32x4.splat\n&gt;007d97: fd 01 04 10                |                     v128.store 4 16\n 007d9b: 0c 03                      |                     br 3\n 007d9d: 0b                         |                   end\n 007d9e: 20 07                      |                   local.get 7\n 007da0: 20 00                      |                   local.get 0\n 007da2: fd 00 00 04                |                   v128.load 0 4\nabrown@abrown-desk:~/Code/oob$ wasm-objdump -d wasi-sdk-built.wasm | grep -A5 -B5 22a4\n 002297: fd 06 00                   |                     i8x16.extract_lane_u 0\n 00229a: 6a                         |                     i32.add\n 00229b: 20 17                      |                     local.get 23\n 00229d: 41 f0 b0 80 80 00          |                     i32.const 6256\n 0022a3: 6a                         |                     i32.add\n&gt;0022a4: 2d 00 00                   |                     i32.load8_u 0 0\n 0022a7: 6a                         |                     i32.add\n 0022a8: 21 00                      |                     local.set 0\n 0022aa: 0c 02                      |                     br 2\n 0022ac: 0b                         |                   end\n 0022ad: 20 0f                      |                   local.get 15\n</pre></div>\n\n\n</blockquote>",
        "id": 191814408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585172352
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604101859\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604101859\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>It is interesting that the OOB is triggered in different places:</p>\n<div class=\"codehilite\"><pre><span></span>$ wasm-objdump -d emscripten-built.wasm | grep -A5 -B5 7d97\n 007d8a: 0e 03 01 02 03 00          |                       br_table 1 2 3 0\n 007d90: 0b                         |                     end\n 007d91: 20 07                      |                     local.get 7\n 007d93: 41 00                      |                     i32.const 0\n 007d95: fd 0c                      |                     i32x4.splat\n&gt;007d97: fd 01 04 10                |                     v128.store 4 16\n 007d9b: 0c 03                      |                     br 3\n 007d9d: 0b                         |                   end\n 007d9e: 20 07                      |                   local.get 7\n 007da0: 20 00                      |                   local.get 0\n 007da2: fd 00 00 04                |                   v128.load 0 4\n$ wasm-objdump -d wasi-sdk-built.wasm | grep -A5 -B5 22a4\n 002297: fd 06 00                   |                     i8x16.extract_lane_u 0\n 00229a: 6a                         |                     i32.add\n 00229b: 20 17                      |                     local.get 23\n 00229d: 41 f0 b0 80 80 00          |                     i32.const 6256\n 0022a3: 6a                         |                     i32.add\n&gt;0022a4: 2d 00 00                   |                     i32.load8_u 0 0\n 0022a7: 6a                         |                     i32.add\n 0022a8: 21 00                      |                     local.set 0\n 0022aa: 0c 02                      |                     br 2\n 0022ac: 0b                         |                   end\n 0022ad: 20 0f                      |                   local.get 15\n</pre></div>\n\n\n</blockquote>",
        "id": 191814448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585172376
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<h3>What do you expect to happen? What does actually happen? Does it panic, and if so, with which assertion?</h3>\n<p><code>wasmtime</code> traps with an OOB memory access; Node does not. </p>\n<p>In Node the code runs as expected (though we have to run it from the JS wrapper):</p>\n<div class=\"codehilite\"><pre><span></span>$ node --version\nv13.9.0\n$ node --experimental-wasm-simd emscripten-built-for-js.js\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\ndecode: vertex 16.32 ms (1.83 GB/sec), index 11.15 ms (2.00 GB/sec)\ndecode: vertex 16.33 ms (1.83 GB/sec), index 11.15 ms (2.00 GB/sec)\ndecode: vertex 16.57 ms (1.80 GB/sec), index 11.23 ms (1.99 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.35 ms (1.97 GB/sec)\ndecode: vertex 16.18 ms (1.85 GB/sec), index 11.16 ms (2.00 GB/sec)\ndecode: vertex 16.12 ms (1.85 GB/sec), index 11.19 ms (2.00 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.15 ms (2.01 GB/sec)\ndecode: vertex 16.16 ms (1.85 GB/sec), index 11.14 ms (2.01 GB/sec)\ndecode: vertex 16.15 ms (1.85 GB/sec), index 11.17 ms (2.00 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.16 ms (2.00 GB/sec)\npass 1: vertex data 18518204 bytes, index data 2001016 bytes\ndecode: vertex 16.12 ms (1.85 GB/sec), index 11.07 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.08 ms (2.02 GB/sec)\ndecode: vertex 16.11 ms (1.85 GB/sec), index 11.11 ms (2.01 GB/sec)\ndecode: vertex 16.21 ms (1.84 GB/sec), index 11.09 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.10 ms (2.01 GB/sec)\ndecode: vertex 16.07 ms (1.86 GB/sec), index 11.13 ms (2.01 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.06 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.10 ms (2.01 GB/sec)\ndecode: vertex 16.04 ms (1.86 GB/sec), index 11.14 ms (2.01 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.07 ms (2.02 GB/sec)\nfilters: oct8 data 4000000 bytes, oct12/quat12 data 8000000 bytes\nfilter: oct8 2.12 ms (1.76 GB/sec), oct12 2.26 ms (3.29 GB/sec), quat12 2.84 ms (2.63 GB/sec)\nfilter: oct8 2.11 ms (1.76 GB/sec), oct12 2.19 ms (3.40 GB/sec), quat12 2.79 ms (2.67 GB/sec)\nfilter: oct8 2.11 ms (1.77 GB/sec), oct12 2.17 ms (3.43 GB/sec), quat12 2.79 ms (2.67 GB/sec)\nfilter: oct8 2.13 ms (1.75 GB/sec), oct12 2.25 ms (3.32 GB/sec), quat12 2.86 ms (2.61 GB/sec)\nfilter: oct8 2.10 ms (1.77 GB/sec), oct12 2.17 ms (3.43 GB/sec), quat12 2.80 ms (2.66 GB/sec)\nfilter: oct8 2.09 ms (1.78 GB/sec), oct12 2.16 ms (3.45 GB/sec), quat12 2.81 ms (2.65 GB/sec)\nfilter: oct8 2.13 ms (1.75 GB/sec), oct12 2.28 ms (3.26 GB/sec), quat12 2.82 ms (2.64 GB/sec)\nfilter: oct8 2.23 ms (1.67 GB/sec), oct12 2.16 ms (3.44 GB/sec), quat12 2.81 ms (2.65 GB/sec)\nfilter: oct8 2.10 ms (1.78 GB/sec), oct12 2.15 ms (3.47 GB/sec), quat12 2.83 ms (2.63 GB/sec)\nfilter: oct8 2.14 ms (1.74 GB/sec), oct12 2.17 ms (3.44 GB/sec), quat12 2.80 ms (2.66 GB/sec)\n</pre></div>\n\n\n<p>In wasmtime (on branch <a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> which implements needed instructions). I tried various versions of the same code built with different tools:</p>\n<div class=\"codehilite\"><pre><span></span>$ ls ../oob/*.wasm | xargs -I{} sh -c &quot;cargo run -- run --enable-simd --disable-cache {}&quot;\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/emscripten-built-for-js.wasm`\nError: failed to run main module `../oob/emscripten-built-for-js.wasm`\n\nCaused by:\n    import module `a` was not found\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/emscripten-built.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/emscripten-built.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @7d97\n       wasm backtrace:\n         0: &lt;unknown&gt;!&lt;wasm function 74&gt;\n         1: &lt;unknown&gt;!&lt;wasm function 37&gt;\n         2: &lt;unknown&gt;!&lt;wasm function 75&gt;\n         3: &lt;unknown&gt;!&lt;wasm function 28&gt;\n         4: &lt;unknown&gt;!&lt;wasm function 67&gt;\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/wasi-sdk-built-extra-memory.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/wasi-sdk-built-extra-memory.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a5\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/wasi-sdk-built.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/wasi-sdk-built.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a4\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<h3>Which Wasmtime version / commit hash / branch are you using?</h3>\n<p>On branch <a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> which implements needed instructions.</p>\n<h3>What are the steps to reproduce the issue?</h3>\n<p>See above. Also, here are steps for building the Wasm modules from <a href=\"https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4\" title=\"https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4\">https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4</a>:</p>\n<div class=\"codehilite\"><pre><span></span># wasi-sdi-built.wasm (2^28 bytes of memory, 4096x64K pages)\n$ /opt/wasi-sdk/bin/clang++ --version\nclang version 11.0.0 (https://github.com/llvm/llvm-project 46bb6613a31fd43b6d4485ce7e71a387dc22cbc7)\nTarget: wasm32-unknown-wasi\nThread model: posix\nInstalledDir: /opt/wasi-sdk/bin\n$ make clean &amp;&amp; make codecbench-simd.wasm\n/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -fno-exceptions -Wl,--initial-memory=268435456 -msimd128 -o codecbench-simd.wasm\n\n# wasi-sdk-built-extra-memory.wasm (2^30 bytes, 16384x64K pages)\n$ make clean &amp;&amp; make codecbench-simd.wasm\n/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -fno-exceptions -Wl,--initial-memory=1073741824 -msimd128 -o codecbench-simd.wasm\n\n# emscripten-built.wasm\n$ emcc --version\nemcc (Emscripten gcc/clang-like replacement) 1.39.10 (commit 1bd7d547598f3fc74699c172f6c9c59a1e8484f1)\n$ make clean &amp;&amp; make codecbench-simd.wasm\nemcc tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -s TOTAL_MEMORY=268435456 -msimd128 -o codecbench-simd.wasm\n\n# then generated wat and dump files with\nls *.wasm | xargs -I{} sh -c &quot;wasm2wat --enable-all {} &gt; {}.wat&quot;\nls *.wasm | xargs -I{} sh -c &quot;wasm-objdump -d {} &gt; {}.dump&quot;\n</pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4383623/emscripten-built.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383623/emscripten-built.wasm.txt\">emscripten-built.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383624/emscripten-built.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383624/emscripten-built.wasm.wat.txt\">emscripten-built.wasm.wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383625/emscripten-built-for-js.js.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383625/emscripten-built-for-js.js.txt\">emscripten-built-for-js.js.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383626/emscripten-built-for-js.wasm.dump.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383626/emscripten-built-for-js.wasm.dump.txt\">emscripten-built-for-js.wasm.dump.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383627/emscripten-built-for-js.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383627/emscripten-built-for-js.wasm.txt\">emscripten-built-for-js.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383628/emscripten-built-for-js.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383628/emscripten-built-for-js.wasm.wat.txt\">emscripten-built-for-js.wasm.wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383629/wasi-sdk-built.wasm.dump.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383629/wasi-sdk-built.wasm.dump.txt\">wasi-sdk-built.wasm.dump.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383630/wasi-sdk-built.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383630/wasi-sdk-built.wasm.txt\">wasi-sdk-built.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383631/wasi-sdk-built.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383631/wasi-sdk-built.wasm.wat.txt\">wasi-sdk-built.wasm.wat.txt</a><br>\n[wasi-sdk-b<br>\n[message truncated]</p>\n</blockquote>",
        "id": 191814627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585172465
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604107317\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604107317\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>Are the wasm files emitted here intended to be run directly? I would imagine that the JS does some sort of setup/glue which might prepare the runtime and/or size memory appropriately. Without that it might be expected that the wasm faults if run directly? (mostly in that node is running more code than we are, so a difference in behavior may not mean something wrong is happening)</p>\n</blockquote>",
        "id": 191815657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585173181
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604113060\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604113060\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>Perhaps there is some Emscripten/Node-specific setup that I'm not aware of (@zeux, what do you think?). In the minified JS I do see code like <code>var DYNAMIC_BASE=5249984,DYNAMICTOP_PTR=6944</code> that might be doing something special. But I wouldn't think that the wasi-sdk-built Wasm code should need any of that setup: the files compiled are normal-looking C++.</p>\n</blockquote>",
        "id": 191817098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585174107
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604114920\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-604114920\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>In answer to,</p>\n<blockquote>\n<p>Are the wasm files emitted here intended to be run directly?</p>\n</blockquote>\n<p>I think, yes, the files that are not <code>*-for-js</code> should be runnable directly. Or at least looking at the <code>*.wat</code> versions I do not see why not.</p>\n</blockquote>",
        "id": 191817519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585174399
    },
    {
        "content": "<p>zeux <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608145018\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608145018\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>I'm wondering if wasmtime is hitting one of the cases where the code might actually hit an OOB access in practice. There's a couple of TODO comments in the code around this, where the right thing to do is to use a load_splat, but load_splat isn't available in node/Chrome so I'm not using it...</p>\n<p>Let me look closer at what these accesses are actually doing.</p>\n</blockquote>",
        "id": 192741003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585870136
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608154670\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608154670\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>This shouldn't theoretically be an issue but Cranelift is lowering <code>load_splat</code> to <code>load + splat</code> at the moment (eventually optimized by #1175)... in case that matters.</p>\n</blockquote>",
        "id": 192743307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585871976
    },
    {
        "content": "<p>zeux <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608176279\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608176279\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>I tried to reproduce this but (maybe because I'm using a later version of Emscripten) I'm hitting this:</p>\n<div class=\"codehilite\"><pre><span></span>Error: failed to run main module `codecbench-simd.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: function u0:73(i64 vmctx, i64, i32, i32, i32, i32, i32) -&gt; i32 system_v {\n...\n       @7bf3                               v154 = iadd v152, v153\n       ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n       ; error: inst149 (v154 = iadd.i32 v152, v153): arg 1 (v153) has type i8, expected i32\n</pre></div>\n\n\n<p>wasm-validate doesn't agree with this assessment but maybe it's because it doesn't validate something properly? Attaching the .wasm file in question.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4424539/codecbench-simd.zip\" title=\"https://github.com/bytecodealliance/wasmtime/files/4424539/codecbench-simd.zip\">codecbench-simd.zip</a></p>\n</blockquote>",
        "id": 192748495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585876579
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608305629\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608305629\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>Where is v153 defined?</p>\n</blockquote>",
        "id": 192771839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585902821
    },
    {
        "content": "<p>zeux <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608467646\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608467646\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4427915/codecbench-simd.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4427915/codecbench-simd.txt\">codecbench-simd.txt</a></p>\n</blockquote>",
        "id": 192812497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585924445
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608589666\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608589666\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>@zeux, I was in a special branch that has some fixes and additional instructions that make it possible to get past those types of errors:  <a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a>. I'm waiting on a review for #1377 and then I can try to merge #1409; then all of that functionality should be in master.</p>\n</blockquote>",
        "id": 192844787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585937989
    },
    {
        "content": "<p>zeux <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608595508\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608595508\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>@abrown Ahh, git :( I did check out that branch initially but had issues with the submodule links, and forgot to switch back to it after re-cloning it recursively. After syncing to this branch properly I can indeed reproduce the error, thanks! Will update once I understand this more.</p>\n</blockquote>",
        "id": 192846485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585938790
    },
    {
        "content": "<p>zeux <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608626236\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608626236\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>I strongly suspect this isn't an issue in the benchmark; the behavior seems highly dependent on the inlining here. Adding <code>noinline</code> to decodeBytesGroupSimd &amp; decodeBytesSimd &amp; decodeVertexBlockSimd fixes this. With only decodeBytesSimd marked as noinline, I get this instead:</p>\n<div class=\"codehilite\"><pre><span></span>/mnt/c/work/meshoptimizer $ make -B codecbench-simd.wasm &amp;&amp; ../wasmtime/target/debug/wasmtime --enable-simd codecbench-simd.wasm\nemcc tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/clusterizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.c\npp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -s TOTAL_MEMORY=268435456 -msimd128 -o codecbench-simd.wasm -g\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `codecbench-simd.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: call stack exhausted, source location: @-\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeBytesSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long)\n         1: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         2: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         3: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         4: &lt;unknown&gt;!__original_main\n         5: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<p>The expected call sequence here is meshopt_decodeVertexBuffer -&gt; decodeVertexBlockSimd -&gt; decodeBytesSimd -&gt; decodeBytesGroupSimd, with no recursion. Unsure what \"call stack exhausted\" indicates here...</p>\n<p>Unfortunately trying to add prints to this to understand the behavior fixes the issue as well, so the investigation here might be complicated. Is there a way to coerce wasmtime to generate a debuggable binary?</p>\n</blockquote>",
        "id": 192855128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585943211
    },
    {
        "content": "<p>zeux edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608626236\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608626236\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>I strongly suspect this isn't an issue in the benchmark; the behavior seems highly dependent on the inlining here. Adding <code>noinline</code> to decodeBytesGroupSimd &amp; decodeBytesSimd &amp; decodeVertexBlockSimd fixes this. With only decodeBytesSimd marked as noinline, I get this instead:</p>\n<div class=\"codehilite\"><pre><span></span>/mnt/c/work/meshoptimizer $ make -B codecbench-simd.wasm &amp;&amp; ../wasmtime/target/debug/wasmtime --enable-simd codecbench-simd.wasm\nemcc tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/clusterizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.c\npp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -s TOTAL_MEMORY=268435456 -msimd128 -o codecbench-simd.wasm -g\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `codecbench-simd.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: call stack exhausted, source location: @-\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeBytesSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long)\n         1: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         2: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         3: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         4: &lt;unknown&gt;!__original_main\n         5: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<p>The expected call sequence here is meshopt_decodeVertexBuffer -&gt; decodeVertexBlockSimd -&gt; decodeBytesSimd -&gt; decodeBytesGroupSimd, with no recursion. Unsure what \"call stack exhausted\" indicates here...</p>\n<p>Also worth noting is that expanding various buffers to accomodate for possible overruns didn't help; in some configurations I'm not getting a stack overflow, but meshopt_decodeVertexBuffer returns a non-0 result because it exits early during parsing, which suggests some issues with control flow here.</p>\n<p>Unfortunately trying to add prints to this to understand the behavior fixes the issue as well, so the investigation here might be complicated. Is there a way to coerce wasmtime to generate a debuggable binary?</p>\n</blockquote>",
        "id": 192855428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585943386
    },
    {
        "content": "<p>zeux edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608626236\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608626236\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>I strongly suspect this isn't an issue in the benchmark; the behavior seems highly dependent on the inlining here. Adding <code>noinline</code> to decodeBytesGroupSimd &amp; decodeBytesSimd &amp; decodeVertexBlockSimd fixes this. With only decodeBytesSimd marked as noinline, I get this instead:</p>\n<div class=\"codehilite\"><pre><span></span>/mnt/c/work/meshoptimizer $ make -B codecbench-simd.wasm &amp;&amp; ../wasmtime/target/debug/wasmtime --enable-simd codecbench-simd.wasm\nemcc tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/clusterizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.c\npp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -s TOTAL_MEMORY=268435456 -msimd128 -o codecbench-simd.wasm -g\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `codecbench-simd.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: call stack exhausted, source location: @-\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeBytesSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long)\n         1: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         2: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         3: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         4: &lt;unknown&gt;!__original_main\n         5: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<p>The expected call sequence here is meshopt_decodeVertexBuffer -&gt; decodeVertexBlockSimd -&gt; decodeBytesSimd -&gt; decodeBytesGroupSimd, with no recursion. Unsure what \"call stack exhausted\" indicates here...</p>\n<p>Also worth noting is that expanding various buffers to accomodate for possible overruns didn't help; also in some inlining/codegen configurations I'm not getting a stack overflow or OOB, but meshopt_decodeVertexBuffer returns a non-0 result because it exits early during parsing, which suggests some issues with control flow here.</p>\n<p>Unfortunately trying to add prints to this to understand the behavior fixes the issue as well, so the investigation here might be complicated. Is there a way to coerce wasmtime to generate a debuggable binary?</p>\n</blockquote>",
        "id": 192855526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585943412
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608628152\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608628152\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>Pass <code>-g</code> if your wasm file was build with debuginfo. I don't know if wasm2obj supports it though.</p>\n</blockquote>",
        "id": 192855650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585943489
    },
    {
        "content": "<p>zeux <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608635837\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608635837\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p><code>-g</code> doesn't seem to work with Emscripten-generated debug info here:</p>\n<div class=\"codehilite\"><pre><span></span>Error: failed to emit debug sections\n\nCaused by:\n    The end offset of a location list entry must not be before the beginning.`\n</pre></div>\n\n\n<p>Might be an Emscripten bug, not sure.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4429672/codecbench-simd.zip\" title=\"https://github.com/bytecodealliance/wasmtime/files/4429672/codecbench-simd.zip\">codecbench-simd.zip</a></p>\n</blockquote>",
        "id": 192857837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585944620
    },
    {
        "content": "<p>zeux <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608639504\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608639504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>One other observation is that <code>--opt-level 0</code> doesn't trigger this bug:</p>\n<div class=\"codehilite\"><pre><span></span>/mnt/c/work/meshoptimizer $ ../wasmtime/target/debug/wasmtime --enable-simd --disable-cache --opt-level 0 codecbench-simd.wasm\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\ndecode: vertex 28.46 ms (1.05 GB/sec), index 25.10 ms (0.89 GB/sec); rv 0 ri 0\n...\n\n/mnt/c/work/meshoptimizer $ ../wasmtime/target/debug/wasmtime --enable-simd --disable-cache --opt-level 1 codecbench-simd.wasm\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `codecbench-simd.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @7ca4\n       wasm backtrace:\n         0: &lt;unknown&gt;!&lt;wasm function 75&gt;\n         1: &lt;unknown&gt;!&lt;wasm function 37&gt;\n         2: &lt;unknown&gt;!&lt;wasm function 76&gt;\n         3: &lt;unknown&gt;!&lt;wasm function 28&gt;\n         4: &lt;unknown&gt;!&lt;wasm function 67&gt;\n</pre></div>\n\n\n<p>This is on a file without Emscripten-generated debug info.<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4429744/codecbench-simd.zip\" title=\"https://github.com/bytecodealliance/wasmtime/files/4429744/codecbench-simd.zip\">codecbench-simd.zip</a></p>\n<p>I don't think I have enough understanding here to provide further help, but it looks to me as if the .wasm file in question has control flow that is complicated enough to trigger some miscompilation if optimizations are enabled, and the out of bounds access is just an odd side effect.</p>\n</blockquote>",
        "id": 192858733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585945163
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608643395\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-608643395\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>Glad you were able to replicate and that <code>--opt-level 0</code> difference is actually pretty interesting. There is a pass that converts a load with an offset that is the result of a sum to a complex load; I wonder if something weird is happening there.</p>\n</blockquote>",
        "id": 192859727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585945719
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-621521705\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407#issuecomment-621521705\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<p>I just re-ran the Wasm files above and they ran without issue in the master branch of wasmtime (except for <code>emscripten-built-for-js.wasm</code> of course--that failure is expected). It's hard to say exactly what has changed that would have fixed this but I'm going to close it since I can't reproduce now (thankfully!).</p>\n</blockquote>",
        "id": 195782744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588202804
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1407\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1407\">Issue #1407</a>:</p>\n<blockquote>\n<h3>What do you expect to happen? What does actually happen? Does it panic, and if so, with which assertion?</h3>\n<p><code>wasmtime</code> traps with an OOB memory access; Node does not. </p>\n<p>In Node the code runs as expected (though we have to run it from the JS wrapper):</p>\n<div class=\"codehilite\"><pre><span></span><code>$ node --version\nv13.9.0\n$ node --experimental-wasm-simd emscripten-built-for-js.js\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\ndecode: vertex 16.32 ms (1.83 GB/sec), index 11.15 ms (2.00 GB/sec)\ndecode: vertex 16.33 ms (1.83 GB/sec), index 11.15 ms (2.00 GB/sec)\ndecode: vertex 16.57 ms (1.80 GB/sec), index 11.23 ms (1.99 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.35 ms (1.97 GB/sec)\ndecode: vertex 16.18 ms (1.85 GB/sec), index 11.16 ms (2.00 GB/sec)\ndecode: vertex 16.12 ms (1.85 GB/sec), index 11.19 ms (2.00 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.15 ms (2.01 GB/sec)\ndecode: vertex 16.16 ms (1.85 GB/sec), index 11.14 ms (2.01 GB/sec)\ndecode: vertex 16.15 ms (1.85 GB/sec), index 11.17 ms (2.00 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.16 ms (2.00 GB/sec)\npass 1: vertex data 18518204 bytes, index data 2001016 bytes\ndecode: vertex 16.12 ms (1.85 GB/sec), index 11.07 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.08 ms (2.02 GB/sec)\ndecode: vertex 16.11 ms (1.85 GB/sec), index 11.11 ms (2.01 GB/sec)\ndecode: vertex 16.21 ms (1.84 GB/sec), index 11.09 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.10 ms (2.01 GB/sec)\ndecode: vertex 16.07 ms (1.86 GB/sec), index 11.13 ms (2.01 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.06 ms (2.02 GB/sec)\ndecode: vertex 16.17 ms (1.85 GB/sec), index 11.10 ms (2.01 GB/sec)\ndecode: vertex 16.04 ms (1.86 GB/sec), index 11.14 ms (2.01 GB/sec)\ndecode: vertex 16.19 ms (1.84 GB/sec), index 11.07 ms (2.02 GB/sec)\nfilters: oct8 data 4000000 bytes, oct12/quat12 data 8000000 bytes\nfilter: oct8 2.12 ms (1.76 GB/sec), oct12 2.26 ms (3.29 GB/sec), quat12 2.84 ms (2.63 GB/sec)\nfilter: oct8 2.11 ms (1.76 GB/sec), oct12 2.19 ms (3.40 GB/sec), quat12 2.79 ms (2.67 GB/sec)\nfilter: oct8 2.11 ms (1.77 GB/sec), oct12 2.17 ms (3.43 GB/sec), quat12 2.79 ms (2.67 GB/sec)\nfilter: oct8 2.13 ms (1.75 GB/sec), oct12 2.25 ms (3.32 GB/sec), quat12 2.86 ms (2.61 GB/sec)\nfilter: oct8 2.10 ms (1.77 GB/sec), oct12 2.17 ms (3.43 GB/sec), quat12 2.80 ms (2.66 GB/sec)\nfilter: oct8 2.09 ms (1.78 GB/sec), oct12 2.16 ms (3.45 GB/sec), quat12 2.81 ms (2.65 GB/sec)\nfilter: oct8 2.13 ms (1.75 GB/sec), oct12 2.28 ms (3.26 GB/sec), quat12 2.82 ms (2.64 GB/sec)\nfilter: oct8 2.23 ms (1.67 GB/sec), oct12 2.16 ms (3.44 GB/sec), quat12 2.81 ms (2.65 GB/sec)\nfilter: oct8 2.10 ms (1.78 GB/sec), oct12 2.15 ms (3.47 GB/sec), quat12 2.83 ms (2.63 GB/sec)\nfilter: oct8 2.14 ms (1.74 GB/sec), oct12 2.17 ms (3.44 GB/sec), quat12 2.80 ms (2.66 GB/sec)\n</code></pre></div>\n\n\n<p>In wasmtime (on branch <a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> which implements needed instructions). I tried various versions of the same code built with different tools:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ls ../oob/*.wasm | xargs -I{} sh -c &quot;cargo run -- run --enable-simd --disable-cache {}&quot;\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/emscripten-built-for-js.wasm`\nError: failed to run main module `../oob/emscripten-built-for-js.wasm`\n\nCaused by:\n    import module `a` was not found\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/emscripten-built.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/emscripten-built.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @7d97\n       wasm backtrace:\n         0: &lt;unknown&gt;!&lt;wasm function 74&gt;\n         1: &lt;unknown&gt;!&lt;wasm function 37&gt;\n         2: &lt;unknown&gt;!&lt;wasm function 75&gt;\n         3: &lt;unknown&gt;!&lt;wasm function 28&gt;\n         4: &lt;unknown&gt;!&lt;wasm function 67&gt;\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/wasi-sdk-built-extra-memory.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/wasi-sdk-built-extra-memory.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a5\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n\n\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run --enable-simd --disable-cache ../oob/wasi-sdk-built.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../oob/wasi-sdk-built.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a4\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n</code></pre></div>\n\n\n<h3>Which Wasmtime version / commit hash / branch are you using?</h3>\n<p>On branch <a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> which implements needed instructions.</p>\n<h3>What are the steps to reproduce the issue?</h3>\n<p>See above. Also, here are steps for building the Wasm modules from <a href=\"https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4\" title=\"https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4\">https://github.com/zeux/meshoptimizer/tree/9047ac1936351d0508bb26b5b82ec1101f9735b4</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code># wasi-sdi-built.wasm (2^28 bytes of memory, 4096x64K pages)\n$ /opt/wasi-sdk/bin/clang++ --version\nclang version 11.0.0 (https://github.com/llvm/llvm-project 46bb6613a31fd43b6d4485ce7e71a387dc22cbc7)\nTarget: wasm32-unknown-wasi\nThread model: posix\nInstalledDir: /opt/wasi-sdk/bin\n$ make clean &amp;&amp; make codecbench-simd.wasm\n/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -fno-exceptions -Wl,--initial-memory=268435456 -msimd128 -o codecbench-simd.wasm\n\n# wasi-sdk-built-extra-memory.wasm (2^30 bytes, 16384x64K pages)\n$ make clean &amp;&amp; make codecbench-simd.wasm\n/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -fno-exceptions -Wl,--initial-memory=1073741824 -msimd128 -o codecbench-simd.wasm\n\n# emscripten-built.wasm\n$ emcc --version\nemcc (Emscripten gcc/clang-like replacement) 1.39.10 (commit 1bd7d547598f3fc74699c172f6c9c59a1e8484f1)\n$ make clean &amp;&amp; make codecbench-simd.wasm\nemcc tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -s TOTAL_MEMORY=268435456 -msimd128 -o codecbench-simd.wasm\n\n# then generated wat and dump files with\nls *.wasm | xargs -I{} sh -c &quot;wasm2wat --enable-all {} &gt; {}.wat&quot;\nls *.wasm | xargs -I{} sh -c &quot;wasm-objdump -d {} &gt; {}.dump&quot;\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4383623/emscripten-built.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383623/emscripten-built.wasm.txt\">emscripten-built.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383624/emscripten-built.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383624/emscripten-built.wasm.wat.txt\">emscripten-built.wasm.wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383625/emscripten-built-for-js.js.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383625/emscripten-built-for-js.js.txt\">emscripten-built-for-js.js.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383626/emscripten-built-for-js.wasm.dump.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383626/emscripten-built-for-js.wasm.dump.txt\">emscripten-built-for-js.wasm.dump.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383627/emscripten-built-for-js.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383627/emscripten-built-for-js.wasm.txt\">emscripten-built-for-js.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383628/emscripten-built-for-js.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383628/emscripten-built-for-js.wasm.wat.txt\">emscripten-built-for-js.wasm.wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383629/wasi-sdk-built.wasm.dump.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383629/wasi-sdk-built.wasm.dump.txt\">wasi-sdk-built.wasm.dump.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383630/wasi-sdk-built.wasm.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383630/wasi-sdk-built.wasm.txt\">wasi-sdk-built.wasm.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4383631/wasi-sdk-built.wasm.wat.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4383631/wasi-sdk-built.wasm.wat.txt\">wasi-sdk-built.wasm.wat.txt</a><br>\n[wasi-sdk-b<br>\n[message truncated]</p>\n</blockquote>",
        "id": 195782745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588202804
    }
]