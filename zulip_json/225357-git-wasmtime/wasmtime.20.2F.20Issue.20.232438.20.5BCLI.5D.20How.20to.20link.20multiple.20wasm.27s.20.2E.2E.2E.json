[
    {
        "content": "<p>Horki opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438\">Issue #2438</a>:</p>\n<blockquote>\n<p><strong>Example 1</strong><br>\nI have written a gcd unit tests into <code>gcd.wast</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Do</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">need</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$gcd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"p\">(</span><span class=\"n\">assert_return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">assert_return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And I want to run wast file from CLI, with importing wat file.</p>\n<p><code>wasmtime --import gcd.wat wast gcd.wast</code></p>\n<p><strong>Example 2</strong><br>\nLinking example</p>\n<p>How can I do this?<br>\n<code>wasmtime --import examples/linking2.wat run examples/linking1.wat</code></p>\n</blockquote>",
        "id": 217511746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605981754
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438#issuecomment-732242433\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438\">Issue #2438</a>:</p>\n<blockquote>\n<p>I think you might be looking for the <code>--preload</code> CLI option? That allows loading modules under specific names I think for this use case</p>\n</blockquote>",
        "id": 217643760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606146277
    },
    {
        "content": "<p>Horki <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438#issuecomment-732325412\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438\">Issue #2438</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton , <code>--preload</code> currently only works with <code>run</code> command, but it's missing in <code>wast</code> command</p>\n<p>Meaning <code>example2</code> is working;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">Works</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">preload</span><span class=\"w\"> </span><span class=\"n\">linking2</span><span class=\"o\">=</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">linking2</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">linking1</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"n\">working</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">preload</span><span class=\"w\"> </span><span class=\"n\">gcd</span><span class=\"o\">=</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">gcd</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">gcd</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"w\"></span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"o\">'--</span><span class=\"n\">preload</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">wasn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">isn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What would be the proper way to <code>preload</code> while using wast for unit testing?</p>\n</blockquote>",
        "id": 217660938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606154133
    },
    {
        "content": "<p>Horki edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438#issuecomment-732325412\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438\">Issue #2438</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton , <code>--preload</code> currently only works with <code>run</code> command, but it's missing in <code>wast</code> command</p>\n<p>Meaning <code>example2</code> is working;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">Works</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">preload</span><span class=\"w\"> </span><span class=\"n\">linking2</span><span class=\"o\">=</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">linking2</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">linking1</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"n\">working</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">preload</span><span class=\"w\"> </span><span class=\"n\">gcd</span><span class=\"o\">=</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">gcd</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">gcd</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"w\"></span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"o\">'--</span><span class=\"n\">preload</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">wasn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">isn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What would be the proper way to <code>preload</code> while using wast for unit testing?</p>\n<p>EDIT:<br>\nI know I could do a manual hack, and add field <code>preload</code> here, but that would be <em>VERY WRONG</em> IMGO</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/ac0ee271b16891883d0e6d40697bc0885f66c058/src/commands/wast.rs#L17-L24\">https://github.com/bytecodealliance/wasmtime/blob/ac0ee271b16891883d0e6d40697bc0885f66c058/src/commands/wast.rs#L17-L24</a></p>\n</blockquote>",
        "id": 217663451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606155307
    },
    {
        "content": "<p>Horki edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438#issuecomment-732325412\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438\">Issue #2438</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton , <code>--preload</code> currently only works with <code>run</code> command, but it's missing in <code>wast</code> command</p>\n<p>Meaning <code>example2</code> is working;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">Works</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">preload</span><span class=\"w\"> </span><span class=\"n\">linking2</span><span class=\"o\">=</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">linking2</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">linking1</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"n\">working</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">preload</span><span class=\"w\"> </span><span class=\"n\">gcd</span><span class=\"o\">=</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">gcd</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">gcd</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"w\"></span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"o\">'--</span><span class=\"n\">preload</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">wasn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">isn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What would be the proper way to <code>preload</code> while using wast for unit testing?</p>\n<p>EDIT:<br>\nI know I could do a manual hack, and add field <code>preload</code> here, but that would be <em>VERY WRONG</em> IMHO</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/ac0ee271b16891883d0e6d40697bc0885f66c058/src/commands/wast.rs#L17-L24\">https://github.com/bytecodealliance/wasmtime/blob/ac0ee271b16891883d0e6d40697bc0885f66c058/src/commands/wast.rs#L17-L24</a></p>\n</blockquote>",
        "id": 217663493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606155329
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438#issuecomment-732340726\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438\">Issue #2438</a>:</p>\n<blockquote>\n<p>Ah sorry I missed that! I believe that the <code>wast</code> command doesn't have support for this yet but it probably wouldn't be too hard to do so!</p>\n</blockquote>",
        "id": 217664188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606155706
    },
    {
        "content": "<p>Horki <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438#issuecomment-732437907\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438\">Issue #2438</a>:</p>\n<blockquote>\n<p>@alexcrichton </p>\n<p>Ok, I've got it, no need for <code>preload</code> in my case</p>\n<p><code>gcd.wast</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">assert_return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">assert_return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">gcd</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"n\">gcd</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As in  <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ac0ee271b16891883d0e6d40697bc0885f66c058/src/commands/wast.rs#L44-L48\">https://github.com/bytecodealliance/wasmtime/blob/ac0ee271b16891883d0e6d40697bc0885f66c058/src/commands/wast.rs#L44-L48</a></p>\n</blockquote>",
        "id": 217685150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606167005
    },
    {
        "content": "<p>Horki closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2438\">Issue #2438</a>:</p>\n<blockquote>\n<p><strong>Example 1</strong><br>\nI have written a gcd unit tests into <code>gcd.wast</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Do</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">need</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$gcd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"p\">(</span><span class=\"n\">assert_return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">assert_return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"s\">\"gcd\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And I want to run wast file from CLI, with importing wat file.</p>\n<p><code>wasmtime --import gcd.wat wast gcd.wast</code></p>\n<p><strong>Example 2</strong><br>\nLinking example</p>\n<p>How can I do this?<br>\n<code>wasmtime --import examples/linking2.wat run examples/linking1.wat</code></p>\n</blockquote>",
        "id": 217685159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606167008
    }
]