[
    {
        "content": "<p>hungryzzz opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287\">issue #6287</a>:</p>\n<blockquote>\n<h3>Description</h3>\n<p>Hi, I run the following case in different Wasm runtimes(after being compiled by <code>Emscripten</code>), and I find some performance differences between <code>wasmtime</code> and other 3 runtimes.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// random.c</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">--</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// compound operations are + and %.</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/11331076/random.wasm.txt\">random.wasm.txt</a></p>\n<h3>Steps to Reproduce</h3>\n<ol>\n<li>\n<p>Compile the above C case using Emscripten<br>\n<code>emcc -sENVIRONMENT=shell -O2 -s WASM=1 -s TOTAL_MEMORY=512MB random.c -o random.wasm</code></p>\n</li>\n<li>\n<p>Execute the wasm file in different wasm runtimes and collect the execution time, all the compilation and execution options are default.</p>\n</li>\n</ol>\n<h3>Actual Results</h3>\n<p>The execution time(collected by <code>perf-tool</code>, probe begins when starting to execute the wasm code(<code>invoke_func</code> in <code>wasmtime</code>) and end in <code>sched:sched_process_exit</code>) in <code>wasmtime</code> is 3x slower than that in other 3 runtimes.</p>\n<p>And if I replace compound operations to other combinations, I find that in some situations, the execution time in <code>wasmtime</code> is 3x slower than that in other 3 runtimes, but sometimes not. The details are as follow:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\"></th>\n<th style=\"text-align: center;\">\\*/</th>\n<th style=\"text-align: center;\">+%</th>\n<th style=\"text-align: center;\">+/</th>\n<th style=\"text-align: center;\">+\\*</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">wasmtime</td>\n<td style=\"text-align: center;\">79362.79 us</td>\n<td style=\"text-align: center;\">85006.50 us</td>\n<td style=\"text-align: center;\">73508.21 us</td>\n<td style=\"text-align: center;\">1577.37 us</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">wasmer</td>\n<td style=\"text-align: center;\">28642.15 us</td>\n<td style=\"text-align: center;\">28935.57 us</td>\n<td style=\"text-align: center;\">19977.13 us</td>\n<td style=\"text-align: center;\">1965.65 us</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">wasmedge</td>\n<td style=\"text-align: center;\">22462.40 us</td>\n<td style=\"text-align: center;\">24814.40 us</td>\n<td style=\"text-align: center;\">74.27 us</td>\n<td style=\"text-align: center;\">171.18 us</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">wamr</td>\n<td style=\"text-align: center;\">23018.67 us</td>\n<td style=\"text-align: center;\">25328.92 us</td>\n<td style=\"text-align: center;\">741.49 us</td>\n<td style=\"text-align: center;\">856.79 us</td>\n</tr>\n</tbody>\n</table>\n<p>So I am wondering that there maybe some performance bugs when handling such compound operations.</p>\n<h3>Versions and Environment</h3>\n<ul>\n<li>Hardware Architecture: x86_64</li>\n<li>Operating system: Ubuntu 20.04</li>\n<li>CPU: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</li>\n<li>Memory: 32GB</li>\n</ul>\n<h4>Emscripten</h4>\n<ul>\n<li>emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 3.1.24 (68a9f990429e0bcfb63b1cde68bad792554350a5)<br>\nclang version 16.0.0 (<a href=\"https://github.com/llvm/llvm-project\">https://github.com/llvm/llvm-project</a> 277c382760bf9575cfa2eac73d5ad1db91466d3f)<br>\nTarget: wasm32-unknown-emscripten<br>\nThread model: posix</li>\n</ul>\n<h4>Wasm runtime version</h4>\n<ul>\n<li>wasmer: wasmer 3.2.0</li>\n<li>wasmtime: wasmtime-cli 8.0.0 (build from commit a3d9c2ca33a44220bbc82488e7064c6ae045a1dd)</li>\n<li>wasmedge: build from commit <a href=\"https://github.com/WasmEdge/WasmEdge/commit/381b7b28049b968297e6a585b92d1cba955def66\">https://github.com/WasmEdge/WasmEdge/commit/381b7b28049b968297e6a585b92d1cba955def66</a></li>\n<li>wamr: iwasm 1.1.2</li>\n</ul>\n</blockquote>",
        "id": 352797082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682514973
    },
    {
        "content": "<p>hungryzzz labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287\">issue #6287</a>:</p>\n<blockquote>\n<h3>Description</h3>\n<p>Hi, I run the following case in different Wasm runtimes(after being compiled by <code>Emscripten</code>), and I find some performance differences between <code>wasmtime</code> and other 3 runtimes.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// random.c</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">--</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// compound operations are + and %.</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/11331076/random.wasm.txt\">random.wasm.txt</a></p>\n<h3>Steps to Reproduce</h3>\n<ol>\n<li>\n<p>Compile the above C case using Emscripten<br>\n<code>emcc -sENVIRONMENT=shell -O2 -s WASM=1 -s TOTAL_MEMORY=512MB random.c -o random.wasm</code></p>\n</li>\n<li>\n<p>Execute the wasm file in different wasm runtimes and collect the execution time, all the compilation and execution options are default.</p>\n</li>\n</ol>\n<h3>Actual Results</h3>\n<p>The execution time(collected by <code>perf-tool</code>, probe begins when starting to execute the wasm code(<code>invoke_func</code> in <code>wasmtime</code>) and end in <code>sched:sched_process_exit</code>) in <code>wasmtime</code> is 3x slower than that in other 3 runtimes.</p>\n<p>And if I replace compound operations to other combinations, I find that in some situations, the execution time in <code>wasmtime</code> is 3x slower than that in other 3 runtimes, but sometimes not. The details are as follow:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\"></th>\n<th style=\"text-align: center;\">\\*/</th>\n<th style=\"text-align: center;\">+%</th>\n<th style=\"text-align: center;\">+/</th>\n<th style=\"text-align: center;\">+\\*</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">wasmtime</td>\n<td style=\"text-align: center;\">79362.79 us</td>\n<td style=\"text-align: center;\">85006.50 us</td>\n<td style=\"text-align: center;\">73508.21 us</td>\n<td style=\"text-align: center;\">1577.37 us</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">wasmer</td>\n<td style=\"text-align: center;\">28642.15 us</td>\n<td style=\"text-align: center;\">28935.57 us</td>\n<td style=\"text-align: center;\">19977.13 us</td>\n<td style=\"text-align: center;\">1965.65 us</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">wasmedge</td>\n<td style=\"text-align: center;\">22462.40 us</td>\n<td style=\"text-align: center;\">24814.40 us</td>\n<td style=\"text-align: center;\">74.27 us</td>\n<td style=\"text-align: center;\">171.18 us</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">wamr</td>\n<td style=\"text-align: center;\">23018.67 us</td>\n<td style=\"text-align: center;\">25328.92 us</td>\n<td style=\"text-align: center;\">741.49 us</td>\n<td style=\"text-align: center;\">856.79 us</td>\n</tr>\n</tbody>\n</table>\n<p>So I am wondering that there maybe some performance bugs when handling such compound operations.</p>\n<h3>Versions and Environment</h3>\n<ul>\n<li>Hardware Architecture: x86_64</li>\n<li>Operating system: Ubuntu 20.04</li>\n<li>CPU: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</li>\n<li>Memory: 32GB</li>\n</ul>\n<h4>Emscripten</h4>\n<ul>\n<li>emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 3.1.24 (68a9f990429e0bcfb63b1cde68bad792554350a5)<br>\nclang version 16.0.0 (<a href=\"https://github.com/llvm/llvm-project\">https://github.com/llvm/llvm-project</a> 277c382760bf9575cfa2eac73d5ad1db91466d3f)<br>\nTarget: wasm32-unknown-emscripten<br>\nThread model: posix</li>\n</ul>\n<h4>Wasm runtime version</h4>\n<ul>\n<li>wasmer: wasmer 3.2.0</li>\n<li>wasmtime: wasmtime-cli 8.0.0 (build from commit a3d9c2ca33a44220bbc82488e7064c6ae045a1dd)</li>\n<li>wasmedge: build from commit <a href=\"https://github.com/WasmEdge/WasmEdge/commit/381b7b28049b968297e6a585b92d1cba955def66\">https://github.com/WasmEdge/WasmEdge/commit/381b7b28049b968297e6a585b92d1cba955def66</a></li>\n<li>wamr: iwasm 1.1.2</li>\n</ul>\n</blockquote>",
        "id": 352797083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682514973
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287#issuecomment-1523494797\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287\">issue #6287</a>:</p>\n<blockquote>\n<p>Division and modulo are relatively slow on most cpu's. For small constant divisors there exist faster methods to perform these operations using multiplication and shifting which Cranelift doesn't currently support. This may be the reason that it is slower. I haven't looked at the disassembly of any of the other wasm engines though. By the way are you using the LLVM backend of Wasmer? Wasmer has a Cranelift backend too which should perform almost identically to Wasmtime.</p>\n</blockquote>",
        "id": 352813781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682518396
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287#issuecomment-1524295858\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287\">issue #6287</a>:</p>\n<blockquote>\n<p>I thought I'd take a quick look at what code we generate for this program. It's interesting that LLVM has unrolled the loop four times, but that should be fine I think.</p>\n<p>In the wasm, the loop body is four copies of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">33</span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">13</span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">rem_u</span>\n</code></pre></div>\n<p>We compile that to four copies of this sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">000000</span><span class=\"n\">a6</span><span class=\"w\">    </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"mi\">21</span><span class=\"w\">                          </span><span class=\"n\">lea</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rdx</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mh\">0x21</span><span class=\"p\">]</span>\n<span class=\"mi\">000000</span><span class=\"n\">a9</span><span class=\"w\">    </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"w\">                          </span><span class=\"n\">xor</span><span class=\"w\"> </span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rdx</span>\n<span class=\"mi\">000000</span><span class=\"n\">ac</span><span class=\"w\">    </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"n\">f7</span><span class=\"w\"> </span><span class=\"n\">f3</span><span class=\"w\">                          </span><span class=\"n\">div</span><span class=\"w\"> </span><span class=\"n\">r11d</span>\n</code></pre></div>\n<p>(Except the first copy also loads the constant 13 into <code>%r11</code>. In this case, rematerialization is hurting us slightly since we have plenty of free registers.)</p>\n<p>I don't think we can do better than that except, as @bjorn3 says, by turning the division into multiplication by magic constants.</p>\n</blockquote>",
        "id": 353000871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682555628
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287#issuecomment-1524326877\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287\">issue #6287</a>:</p>\n<blockquote>\n<p>Okay, that said, the bottom of the loop isn't ideal:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">000000</span><span class=\"n\">c1</span><span class=\"w\">    </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ea</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\">                       </span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"n\">r10d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"mi\">000000</span><span class=\"n\">c5</span><span class=\"w\">    </span><span class=\"mi\">45</span><span class=\"w\"> </span><span class=\"mi\">85</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"w\">                          </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">r10d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r10d</span>\n<span class=\"mi\">000000</span><span class=\"n\">c8</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">84</span><span class=\"w\"> </span><span class=\"mi\">08</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                 </span><span class=\"n\">je</span><span class=\"w\"> </span><span class=\"mh\">0xd6</span>\n<span class=\"mi\">000000</span><span class=\"n\">ce</span><span class=\"w\">    </span><span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">d3</span><span class=\"w\">                          </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rdx</span>\n<span class=\"mi\">000000</span><span class=\"n\">d1</span><span class=\"w\">    </span><span class=\"n\">e9</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">                    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"mh\">0x96</span>\n</code></pre></div>\n<p>We have the value of <code>last</code> in <code>%r11</code> on entry to the loop, but during the first of the four unrolled copies of the loop body we switch over to keeping it in <code>%rdx</code>, due to the register constraint on the <code>div</code> instruction on x86. So at the end of the loop we have to copy it back to <code>%r11</code> if the loop is continuing. Since the move is only necessary on the critical edge, regalloc2 inserts it between the two branch instructions, which inhibits the machbuffer branch optimizations.</p>\n<p>cc @elliottt who might find this an interesting case to think about.</p>\n<p>I don't think this particular issue should have much of any effect on performance in anything other than the tiniest microbenchmarks, though. I suspect the cost of the division instruction is much more significant.</p>\n</blockquote>",
        "id": 353006834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682556787
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287#issuecomment-1525142522\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287\">issue #6287</a>:</p>\n<blockquote>\n<blockquote>\n<p>Division and modulo are relatively slow on most cpu's. For small constant divisors there exist faster methods to perform these operations using multiplication and shifting which Cranelift doesn't currently support. This may be the reason that it is slower. I haven't looked at the disassembly of any of the other wasm engines though. By the way are you using the LLVM backend of Wasmer? Wasmer has a Cranelift backend too which should perform almost identically to Wasmtime.</p>\n</blockquote>\n<p>Hi, I use the Cranelift backend of Wamser(default option), but the version(0.98) maybe different with Wasmtime. And I also use the LLVM backend of Wamser, I get the execution time is 25228.15 us, which is a little bit quicker than using Cranelift in Wamser.</p>\n</blockquote>",
        "id": 353167367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682584934
    },
    {
        "content": "<p>hungryzzz edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287#issuecomment-1525142522\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287\">issue #6287</a>:</p>\n<blockquote>\n<blockquote>\n<p>Division and modulo are relatively slow on most cpu's. For small constant divisors there exist faster methods to perform these operations using multiplication and shifting which Cranelift doesn't currently support. This may be the reason that it is slower. I haven't looked at the disassembly of any of the other wasm engines though. By the way are you using the LLVM backend of Wasmer? Wasmer has a Cranelift backend too which should perform almost identically to Wasmtime.</p>\n</blockquote>\n<p>Hi, I use the Cranelift backend of Wamser(default option), but the version(0.98) maybe different with Wasmtime. And I also get the execution time 25228.15 us under LLVM backend of Wamser, which is a little bit quicker than using Cranelift in Wamser.</p>\n</blockquote>",
        "id": 353168619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682585094
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287#issuecomment-1530023710\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287\">issue #6287</a>:</p>\n<blockquote>\n<p>It seems like we've bottomed this out as an issue in not doing the magic constant for divisions optimization anymore, and adding that back is tracked in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6049\">https://github.com/bytecodealliance/wasmtime/issues/6049</a>, so I'm going to go ahead and close this issue. Thanks for bringing it to our attention @hungryzzz!</p>\n</blockquote>",
        "id": 354941366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682964252
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6287\">issue #6287</a>:</p>\n<blockquote>\n<h3>Description</h3>\n<p>Hi, I run the following case in different Wasm runtimes(after being compiled by <code>Emscripten</code>), and I find some performance differences between <code>wasmtime</code> and other 3 runtimes.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// random.c</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">--</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// compound operations are + and %.</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/11331076/random.wasm.txt\">random.wasm.txt</a></p>\n<h3>Steps to Reproduce</h3>\n<ol>\n<li>\n<p>Compile the above C case using Emscripten<br>\n<code>emcc -sENVIRONMENT=shell -O2 -s WASM=1 -s TOTAL_MEMORY=512MB random.c -o random.wasm</code></p>\n</li>\n<li>\n<p>Execute the wasm file in different wasm runtimes and collect the execution time, all the compilation and execution options are default.</p>\n</li>\n</ol>\n<h3>Actual Results</h3>\n<p>The execution time(collected by <code>perf-tool</code>, probe begins when starting to execute the wasm code(<code>invoke_func</code> in <code>wasmtime</code>) and end in <code>sched:sched_process_exit</code>) in <code>wasmtime</code> is 3x slower than that in other 3 runtimes.</p>\n<p>And if I replace compound operations to other combinations, I find that in some situations, the execution time in <code>wasmtime</code> is 3x slower than that in other 3 runtimes, but sometimes not. The details are as follow:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\"></th>\n<th style=\"text-align: center;\">\\*/</th>\n<th style=\"text-align: center;\">+%</th>\n<th style=\"text-align: center;\">+/</th>\n<th style=\"text-align: center;\">+\\*</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">wasmtime</td>\n<td style=\"text-align: center;\">79362.79 us</td>\n<td style=\"text-align: center;\">85006.50 us</td>\n<td style=\"text-align: center;\">73508.21 us</td>\n<td style=\"text-align: center;\">1577.37 us</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">wasmer</td>\n<td style=\"text-align: center;\">28642.15 us</td>\n<td style=\"text-align: center;\">28935.57 us</td>\n<td style=\"text-align: center;\">19977.13 us</td>\n<td style=\"text-align: center;\">1965.65 us</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">wasmedge</td>\n<td style=\"text-align: center;\">22462.40 us</td>\n<td style=\"text-align: center;\">24814.40 us</td>\n<td style=\"text-align: center;\">74.27 us</td>\n<td style=\"text-align: center;\">171.18 us</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">wamr</td>\n<td style=\"text-align: center;\">23018.67 us</td>\n<td style=\"text-align: center;\">25328.92 us</td>\n<td style=\"text-align: center;\">741.49 us</td>\n<td style=\"text-align: center;\">856.79 us</td>\n</tr>\n</tbody>\n</table>\n<p>So I am wondering that there maybe some performance bugs when handling such compound operations.</p>\n<h3>Versions and Environment</h3>\n<ul>\n<li>Hardware Architecture: x86_64</li>\n<li>Operating system: Ubuntu 20.04</li>\n<li>CPU: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</li>\n<li>Memory: 32GB</li>\n</ul>\n<h4>Emscripten</h4>\n<ul>\n<li>emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 3.1.24 (68a9f990429e0bcfb63b1cde68bad792554350a5)<br>\nclang version 16.0.0 (<a href=\"https://github.com/llvm/llvm-project\">https://github.com/llvm/llvm-project</a> 277c382760bf9575cfa2eac73d5ad1db91466d3f)<br>\nTarget: wasm32-unknown-emscripten<br>\nThread model: posix</li>\n</ul>\n<h4>Wasm runtime version</h4>\n<ul>\n<li>wasmer: wasmer 3.2.0</li>\n<li>wasmtime: wasmtime-cli 8.0.0 (build from commit a3d9c2ca33a44220bbc82488e7064c6ae045a1dd)</li>\n<li>wasmedge: build from commit <a href=\"https://github.com/WasmEdge/WasmEdge/commit/381b7b28049b968297e6a585b92d1cba955def66\">https://github.com/WasmEdge/WasmEdge/commit/381b7b28049b968297e6a585b92d1cba955def66</a></li>\n<li>wamr: iwasm 1.1.2</li>\n</ul>\n</blockquote>",
        "id": 354941369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682964252
    }
]