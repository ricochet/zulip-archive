[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a> from <code>alexcrichton:x64-evex-memory</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Currently load-sinking is enabled for EVEX instructions (aka AVX512 instructions) but the encoding of these instructions is a <code>todo!()</code> which can cause a panic for some wasms if the right features are enabled. This commit fills out the support for memory operands in the same manner as VEX-encoded instructions. The main stickler here was that EVEX instructions always use a scaled 8-bit offset which needed extra handling to ensure that the correct offset is emitted.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 359766058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684529822
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a> as ready for review.</p>",
        "id": 359766065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684529825
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a>.</p>",
        "id": 359766068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684529826
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a>.</p>",
        "id": 359766069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684529826
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a>.</p>",
        "id": 359773177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684532711
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#pullrequestreview-1437862188\">PR review</a>.</p>",
        "id": 360396949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684799876
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#pullrequestreview-1437862188\">PR review</a>.</p>",
        "id": 360396950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684799876
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#discussion_r1201294183\">PR review comment</a>:</p>\n<blockquote>\n<p>This doc comment can probably change.</p>\n</blockquote>",
        "id": 360396951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684799876
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#discussion_r1201295166\">PR review comment</a>:</p>\n<blockquote>\n<p>I would probably create a private <code>read</code> function for this just to avoid confusion.</p>\n</blockquote>",
        "id": 360396953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684799876
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#discussion_r1201291282\">PR review comment</a>:</p>\n<blockquote>\n<p>It took me a second to review this because I was worried the inversion would be double-applied or something like that. For reference for others in the future, <code>EVEX.RXB</code> are stored in inverted format (do we want to note that here?). I eventually conclude this is actually fine since the only inversions performed are <code>!b</code> and <code>!x</code>.</p>\n</blockquote>",
        "id": 360396954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684799876
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#discussion_r1201308240\">PR review comment</a>:</p>\n<blockquote>\n<p>I think I'm convinced from the tests that this scaling factor is correct for <code>vpabs</code> but I'm not sure this is set up well for the future (or even all of the possible EVEX-encoded instructions that can currently be emitted). Section 2.7.7 talks about the kinds of instructions that do not have embedded broadcast (single scalar result, explicit broadcast in opcode, pure load/store) &mdash; these instructions all have <code>scaling != 16</code> for <code>VL = 128</code>. I think this means that if any future or current instructions are of this kind, we could get a miscompilation (see the expected scaling factors in table 2-35). I wish there was a way to throw an error of some kind here instead. (The same kind of logic applies for the instructions that _are_ affected by embedded broadcast: instructions could expect scalings of 8 and 4 unless we do more checks, e.g., on <code>EVEX.b</code> and <code>EVEX.W</code>).</p>\n<p>My argument here is \"let's prevent errors\" when someone tries to add a new EVEX-encoded instruction in the future. I looked into adding a new function to <code>Avx512Opcode</code> to signal which tuple type each opcode has but that might not totally work: <code>vpopcnt</code>, e.g., can be emitted as both \"Full Mem\" and \"Full\" (we use the \"Full Mem\" one, apparently!). <code>vcvtudq2ps</code> uses \"Full\", which only uses <code>scaling = 16</code> when <code>EVEX.b = 0</code> and <code>EVEX.W = 1</code>. Maybe <code>EvexInstruction</code> needs to gain a <code>tuple</code> field which we force users to specify somehow in <code>emit.rs</code>. Not sure I have the best solution here but hopefully you get what I mean about protecting against future errors.</p>\n</blockquote>",
        "id": 360396955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684799876
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#discussion_r1201310812\">PR review comment</a>:</p>\n<blockquote>\n<p>It's unfortunate that <code>sink</code> has to get more specific... I had always hoped this code could be used for some kind of assembler. But this trap is necessary and if we eventually create an assembler this can get refactored.</p>\n</blockquote>",
        "id": 360396956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684799877
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#discussion_r1202346766\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh the other main purpose for a <code>MachBuffer</code> is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5e33c4a3061cf17555eef8b1592a2b653529c55d/cranelift/codegen/src/isa/x64/encoding/rex.rs#L423\">this use of <code>use_label_at_offset</code></a> for rip-relative addressing modes.</p>\n</blockquote>",
        "id": 360533930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684848934
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#pullrequestreview-1439744256\">PR review</a>.</p>",
        "id": 360535906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684849402
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#pullrequestreview-1439744256\">PR review</a>.</p>",
        "id": 360535908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684849402
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#discussion_r1202360036\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh my read was that <code>EvexContext</code> was what controlled all these bits where whatever sets <code>EvexContext</code> guides the scaling, but it sounds like that's not right. I see now the listing on each instruction and its \"TupleType\"!</p>\n<p>Looking at <a href=\"https://www.felixcloutier.com/x86/vpopcnt\">vpopcnt</a> if we have a separate opcode per-size (which I think we do today anyway) it looks like that means the tuple type is per-opcode still? If that's possible then I could add something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Avx512Opcode</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">tuple_type</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Avx512TupleType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which could get fed into the <code>EvexInstruction</code> encoder which would then futher handle all the <code>EVEX.{b,W}</code> cases? That way if more tuple types were added they would result in a non-exhaustive match and require handling?</p>\n</blockquote>",
        "id": 360535909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684849402
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a>.</p>",
        "id": 360547234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684851634
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#discussion_r1202428314\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok I've attempted to implement this, but a double-check is certainly in order</p>\n</blockquote>",
        "id": 360547881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684851751
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a>.</p>",
        "id": 360558724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684853933
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416#pullrequestreview-1442317751\">PR review</a>:</p>\n<blockquote>\n<p>LGTM. From my reading, we now map the tuple type to the values in tables 2-34 and 2-35 for <code>Full</code> and <code>FullMem</code> so we shouldn't have problems with the existing instructions. And any additions to <code>Avx512Opcode</code> will be forced to update <code>tuple_type()</code>.</p>\n</blockquote>",
        "id": 360837754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684945414
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a>.</p>",
        "id": 360868851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684953025
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a>.</p>",
        "id": 360868867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684953030
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6416\">PR #6416</a>.</p>",
        "id": 360880789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684956763
    }
]