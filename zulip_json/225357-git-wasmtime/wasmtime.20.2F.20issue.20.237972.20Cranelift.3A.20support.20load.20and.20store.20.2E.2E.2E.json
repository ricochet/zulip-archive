[
    {
        "content": "<p>meijies opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7972\">issue #7972</a>:</p>\n<blockquote>\n<p>My original request is sum two variable length array element to element and store the result to result array . Below is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span>: <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">array</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span>: <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">result</span><span class=\"w\">  </span>: <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>According to <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-dynamic-vector.md\">cranelift-dynamic-vector</a>, I found dynamic vector type currently only support scaling factors which are compile-time constants. So I have to sum element by element through a loop. For each iteration. I have to load and store the nth element by a dynamic offset, but I can't found any api to support this.</p>\n<p>another solution is create a new address by sum a offset, but seems UB occurs. </p>\n</blockquote>",
        "id": 422544313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708490898
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7972#issuecomment-1955923964\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7972\">issue #7972</a>:</p>\n<blockquote>\n<p>@meijies the \"dynamic vector\" support is very incomplete: it was originally developed by aarch64 folks to support a new ISA extension (SVE), but was never finished.</p>\n<p>If you want to loop through an array and add values, you can generate IR that has a loop, and compute the addresses just like you might do manually in assembly language: take the base address of the array and add the index (multiplied by element size). The \"API\" to support this consists of <code>iadd</code> (integer add), <code>imul</code> (integer multiply) or <code>ishl</code> (integer shift left), and the various load instructions.</p>\n<p>Could you describe what UB you're seeing, with examples of the CLIF and the generated assembly?</p>\n</blockquote>",
        "id": 422547780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708493311
    },
    {
        "content": "<p>meijies closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7972\">issue #7972</a>:</p>\n<blockquote>\n<p>My original request is sum two variable length array element to element and store the result to result array . Below is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span>: <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">array</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span>: <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">result</span><span class=\"w\">  </span>: <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>According to <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-dynamic-vector.md\">cranelift-dynamic-vector</a>, I found dynamic vector type currently only support scaling factors which are compile-time constants. So I have to sum element by element through a loop. For each iteration. I have to load and store the nth element by a dynamic offset, but I can't found any api to support this.</p>\n<p>another solution is create a new address by sum a offset, but seems UB occurs. </p>\n</blockquote>",
        "id": 422550393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708494937
    },
    {
        "content": "<p>meijies <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7972#issuecomment-1955946374\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7972\">issue #7972</a>:</p>\n<blockquote>\n<p>@cfallin sorry, I misunderstood pointer offset, each pointer offset represents 1 byte but not 8 bytes, so for f64, the next element address = base address + index * types::F64.bytes()</p>\n</blockquote>",
        "id": 422550395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708494938
    }
]