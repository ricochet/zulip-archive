[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475\">PR #2475</a> from <code>fix-1681</code> to <code>main</code>:</p>\n<blockquote>\n<p>This should be helpful as we investigate <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2432\">https://github.com/bytecodealliance/wasmtime/issues/2432</a>. Please note that the hex-ifying of the assertion expressions and Wasm values is pretty confusing: scalars are shown as big endian whereas vectors are shown as little endian (I tried to describe why in the comments). I would appreciate a careful look to ensure I did this correctly and any suggestions to reduce the verbosity would be great!</p>\n</blockquote>",
        "id": 218777058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607044478
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475\">PR #2475</a>.</p>",
        "id": 218777059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607044478
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475\">PR #2475</a> from <code>fix-1681</code> to <code>main</code>:</p>\n<blockquote>\n<p>This should be helpful as we investigate <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2432\">https://github.com/bytecodealliance/wasmtime/issues/2432</a>. Please note that the hex-ifying of the assertion expressions and Wasm values is pretty confusing: scalars are shown as big endian whereas vectors are shown as little endian (I tried to describe why in the comments). I would appreciate a careful look to ensure I did this correctly and any suggestions to reduce the verbosity would be great!</p>\n</blockquote>",
        "id": 218792926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607055671
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#pullrequestreview-545043939\">PR Review</a>.</p>",
        "id": 218845052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607094907
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#pullrequestreview-545043939\">PR Review</a>.</p>",
        "id": 218845053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607094907
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#discussion_r536168744\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If you want to get super fancy this can all get squashed into:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{1:#00$x}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size_of_val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">bits</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://doc.rust-lang.org/stable/std/fmt/#width\">more info</a></p>\n</blockquote>",
        "id": 218845054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607094908
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#discussion_r536170437\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Insteaad of <code>reverse_pattern</code> could this use <code>to_le_bytes()</code> as well?</p>\n</blockquote>",
        "id": 218845055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607094908
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#pullrequestreview-545303409\">PR Review</a>.</p>",
        "id": 218892574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607116797
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#discussion_r536385853\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Unfortunately, no. Because the float patterns are enums of either a canonical NaN pattern, an arithmetic NaN pattern (where the payload bits are unspecified), and an actual value, I emit special hex strings for these. I can't just reverse these hex strings: I have to reverse 2-char chunks (2 hex chars per byte) and remove the leading <code>0x</code>.</p>\n</blockquote>",
        "id": 218892575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607116797
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475\">PR #2475</a> from <code>fix-1681</code> to <code>main</code>:</p>\n<blockquote>\n<p>This should be helpful as we investigate <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2432\">https://github.com/bytecodealliance/wasmtime/issues/2432</a>. Please note that the hex-ifying of the assertion expressions and Wasm values is pretty confusing: scalars are shown as big endian whereas vectors are shown as little endian (I tried to describe why in the comments). I would appreciate a careful look to ensure I did this correctly and any suggestions to reduce the verbosity would be great!</p>\n</blockquote>",
        "id": 218892633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607116818
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#pullrequestreview-545303964\">PR Review</a>.</p>",
        "id": 218892672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607116863
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#discussion_r536386337\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Sorcery... done.</p>\n</blockquote>",
        "id": 218892673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607116863
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#pullrequestreview-545305905\">PR Review</a>.</p>",
        "id": 218893014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607117076
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#discussion_r536388112\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@uweigand, as an FYI: I've tried to avoid this type of endianness-aware code but I didn't really know how to do this otherwise. If there is something we can do as a part of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2124\">https://github.com/bytecodealliance/wasmtime/issues/2124</a> let me know.</p>\n</blockquote>",
        "id": 218893016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607117076
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475\">PR #2475</a> from <code>fix-1681</code> to <code>main</code>:</p>\n<blockquote>\n<p>This should be helpful as we investigate <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2432\">https://github.com/bytecodealliance/wasmtime/issues/2432</a>. Please note that the hex-ifying of the assertion expressions and Wasm values is pretty confusing: scalars are shown as big endian whereas vectors are shown as little endian (I tried to describe why in the comments). I would appreciate a careful look to ensure I did this correctly and any suggestions to reduce the verbosity would be great!</p>\n</blockquote>",
        "id": 218895565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607118577
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475\">PR #2475</a>.</p>",
        "id": 218900709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607121885
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#pullrequestreview-546409014\">PR Review</a>.</p>",
        "id": 219116248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607364796
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2475#discussion_r537721101\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@abrown Thanks for the ping!   I believe your currrent code here is fine for both little- and big-endian host systems: the way V128 constants are formed should be the same on both as far as I can see (little-endian lane order and little-endian byte order within each lane).</p>\n<p>#2124 is only relevant where it's about implementing v128.load and so on.  This is not currently part of my #2124 patch because I do not yet have any SIMD support on IBM Z; I'll have a look later.<br>\n</p>\n</blockquote>",
        "id": 219116249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607364797
    }
]