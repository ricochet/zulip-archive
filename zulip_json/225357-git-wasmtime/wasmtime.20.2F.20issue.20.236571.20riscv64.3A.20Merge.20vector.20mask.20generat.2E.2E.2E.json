[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6571\">issue #6571</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently have separate rules for generating vector masks and vector constants. We should merge these rules into the same set of instructions.</p>\n<h4>Benefit</h4>\n<p>This would allow us to implement the constant generation logic in a single place, and improve codegen for both use cases.</p>\n<h4>Implementation</h4>\n<p>Today we have <code>gen_vec_mask</code> and <code>gen_constant</code>. <code>gen_constant</code> takes a <code>VCodeConstant</code> and that is not a very flexible interface since it requires us to emit a VCode Constant before using it. As far as I understand that means that those constants would always end up in the constant pool.</p>\n<p>We could have <code>gen_constant</code> take a byte slice and pattern match based on that. That would allow us to avoid polluting the constant pool, and only materialize the constants there when necessary.</p>\n<p>A slight issue with this is that we aren't very good at de-duplicating generated constants, so it would be nice to try and reuse <code>VCodeConstant</code>'s when they originate from <code>vconst</code>. (Since that means that they have been de-duplicated beforehand)</p>\n<p>We could try making a variant of <code>gen_constant</code> that is fallible but always emits an optimized lowering that is better than a load to the constant. <code>gen_constant</code> could then try that before falling back to loading the de-duplicated constant pool value.</p>\n<h4>Alternatives</h4>\n<p>Having these as separate rules is an option, however there are some slightly complex constant generation rules that could be beneficial for mask generation which would be nice not to duplicate.<br>\n</p>\n</blockquote>",
        "id": 365814767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686651536
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6571\">issue #6571</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently have separate rules for generating vector masks and vector constants. We should merge these rules into the same set of instructions.</p>\n<h4>Benefit</h4>\n<p>This would allow us to implement the constant generation logic in a single place, and improve codegen for both use cases.</p>\n<h4>Implementation</h4>\n<p>Today we have <code>gen_vec_mask</code> and <code>gen_constant</code>. <code>gen_constant</code> takes a <code>VCodeConstant</code> and that is not a very flexible interface since it requires us to emit a VCode Constant before using it. As far as I understand that means that those constants would always end up in the constant pool.</p>\n<p>We could have <code>gen_constant</code> take a byte slice and pattern match based on that. That would allow us to avoid polluting the constant pool, and only materialize the constants there when necessary.</p>\n<p>A slight issue with this is that we aren't very good at de-duplicating generated constants, so it would be nice to try and reuse <code>VCodeConstant</code>'s when they originate from <code>vconst</code>. (Since that means that they have been de-duplicated beforehand)</p>\n<p>We could try making a variant of <code>gen_constant</code> that is fallible but always emits an optimized lowering that is better than a load to the constant. <code>gen_constant</code> could then try that before falling back to loading the de-duplicated constant pool value.</p>\n<h4>Alternatives</h4>\n<p>Having these as separate rules is an option, however there are some slightly complex constant generation rules that could be beneficial for mask generation which would be nice not to duplicate.<br>\n</p>\n</blockquote>",
        "id": 365814811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686651544
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6571\">issue #6571</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently have separate rules for generating vector masks and vector constants. We should merge these together.</p>\n<h4>Benefit</h4>\n<p>This would allow us to implement the constant generation logic in a single place, and improve codegen for both use cases.</p>\n<h4>Implementation</h4>\n<p>Today we have <code>gen_vec_mask</code> and <code>gen_constant</code>. <code>gen_constant</code> takes a <code>VCodeConstant</code> and that is not a very flexible interface since it requires us to emit a VCode Constant before using it. As far as I understand that means that those constants would always end up in the constant pool.</p>\n<p>We could have <code>gen_constant</code> take a byte slice and pattern match based on that. That would allow us to avoid polluting the constant pool, and only materialize the constants there when necessary.</p>\n<p>A slight issue with this is that we aren't very good at de-duplicating generated constants, so it would be nice to try and reuse <code>VCodeConstant</code>'s when they originate from <code>vconst</code>. (Since that means that they have been de-duplicated beforehand)</p>\n<p>We could try making a variant of <code>gen_constant</code> that is fallible but always emits an optimized lowering that is better than a load to the constant. <code>gen_constant</code> could then try that before falling back to loading the de-duplicated constant pool value.</p>\n<h4>Alternatives</h4>\n<p>Having these as separate rules is an option, however there are some slightly complex constant generation rules that could be beneficial for mask generation which would be nice not to duplicate.<br>\n</p>\n</blockquote>",
        "id": 365814992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686651584
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6571\">issue #6571</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently have separate rules for generating vector masks and vector constants. We should merge these together.</p>\n<h4>Benefit</h4>\n<p>This would allow us to implement the constant generation logic in a single place, and improve codegen for both use cases.</p>\n<h4>Implementation</h4>\n<p>Today we have <code>gen_vec_mask</code> and <code>gen_constant</code>. <code>gen_constant</code> takes a <code>VCodeConstant</code> and that is not a very flexible interface since it requires us to emit a VCode Constant before using it. As far as I understand that means that those constants would always end up in the constant pool.</p>\n<p>We could have <code>gen_constant</code> take a byte slice and pattern match based on that. That would allow us to avoid polluting the constant pool, and only materialize the constants there when necessary.</p>\n<p>A slight issue with this is that we aren't very good at de-duplicating generated constants, so it would be nice to try and reuse <code>VCodeConstant</code>'s when they originate from <code>vconst</code>. (Since that means that they have been de-duplicated beforehand)</p>\n<p>We could try making a variant of <code>gen_constant</code> that is fallible but always emits an optimized lowering that is better than a load to the constant. <code>gen_constant</code> could then try that before falling back to loading the de-duplicated constant pool value.</p>\n<h4>Alternatives</h4>\n<p>Having these as separate rules is an option, however there are some slightly complex constant generation rules that could be beneficial for mask generation which would be nice not to duplicate.<br>\n</p>\n</blockquote>",
        "id": 365815041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686651592
    }
]