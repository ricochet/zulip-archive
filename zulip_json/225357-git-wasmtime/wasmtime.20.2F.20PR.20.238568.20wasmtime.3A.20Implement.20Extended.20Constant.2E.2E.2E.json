[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568\">PR #8568</a> from <code>jameysharp:extended-const</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This implements <a href=\"https://github.com/webassembly/extended-const\">https://github.com/webassembly/extended-const</a> for Wasmtime.</p>\n<p>Currently the documentation comment for the <code>wasm_extended_const</code> configuration option says it's false by default, but <code>Config::new</code> sets it to true. One of those should be fixed and I'm not sure which. Other config-related things are still to-do as well, such as adding the appropriate CLI flag.</p>\n<p>Also, I could use a little help understanding why one of the funcrefs spec tests fails:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">directive</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">proposals</span><span class=\"o\">/</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">references</span><span class=\"o\">/</span><span class=\"n\">elem</span><span class=\"p\">.</span><span class=\"n\">wast</span>:<span class=\"mi\">539</span>:<span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">assert_invalid</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"s\">\"constant expression required\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"s\">\"failed to parse WebAssembly module</span>\n\n<span class=\"s\">       Caused by:</span>\n<span class=\"s\">           type mismatch: expected funcref, found i32 (at offset 0x1b)\"</span>\n</code></pre></div>\n<p>cc: @fitzgen</p>\n</blockquote>",
        "id": 437417831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715075537
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568#issuecomment-2098330935\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568\">PR #8568</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 437445842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715086145
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568#issuecomment-2098557488\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568\">PR #8568</a>:</p>\n<blockquote>\n<p>For the failure here I think you'll need to set <code>wasm_extended_const(false)</code> in <code>Config</code> when running the tests. Spec proposals aren't always in-sync with one another and it takes quite some time to merge into the official spec, so tests often assert that a specific construct is invalid when another proposal specifically makes it valid, meaning that we have to be careful about enabled features when testing various proposals.</p>\n</blockquote>",
        "id": 437467631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715092507
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568#issuecomment-2098774517\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568\">PR #8568</a>:</p>\n<blockquote>\n<p>Yeah that failure is just because it is using an <code>i32.add</code> in a constant expression which used to be disallowed but is now allowed with the extended constants proposal.</p>\n<p>We can ignore that particular failure by adding a clause here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wast/src/wast.rs#L544\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wast/src/wast.rs#L544</a></p>\n<p>Would be nice to ideally send a PR upstream to fix the issue (switch the add to some operator that isn't allowed even with the extended constants proposal) or at least make a local copy for the <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/tests/misc_testsuite\"><code>misc_testsuite</code></a> that does that same thing.</p>\n</blockquote>",
        "id": 437481242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715096808
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568#issuecomment-2098778577\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568\">PR #8568</a>:</p>\n<blockquote>\n<blockquote>\n<p>Currently the documentation comment for the <code>wasm_extended_const</code> configuration option says it's false by default, but <code>Config::new</code> sets it to true. One of those should be fixed and I'm not sure which.</p>\n</blockquote>\n<p>I think it is fine to have it enabled by default since it is a phase 4 proposal (basically done) and will have more than 2 weeks fuzzing before it hits a release.</p>\n</blockquote>",
        "id": 437481578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715096934
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568#issuecomment-2098808298\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568\">PR #8568</a>:</p>\n<blockquote>\n<p>Oh I'll note that wasm-smith doesn't have support for extended consts right now I think, so AFAIK we won't fuzz this at all</p>\n</blockquote>",
        "id": 437484621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715097843
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568#issuecomment-2098819909\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8568\">PR #8568</a>:</p>\n<blockquote>\n<p>Ah yes, we should add that support before enabling this proposal by default.</p>\n</blockquote>",
        "id": 437485701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715098182
    }
]