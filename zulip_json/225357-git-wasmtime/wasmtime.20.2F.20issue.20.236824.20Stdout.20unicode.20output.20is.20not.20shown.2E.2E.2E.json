[
    {
        "content": "<p>mush42 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<h2>The problem</h2>\n<p>Given the following rust app that prints some Arabic text to the terminal:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">};</span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"مرحبا بكم\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">lock</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Compiling the app and running the <code>.wasm</code> module using <code>wasmtime.</code> gives the following garbled output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">┘à╪▒╪¡╪¿╪º</span><span class=\"w\"> </span><span class=\"err\">╪¿┘â┘à</span>\n</code></pre></div>\n<h2>Expected</h2>\n<p>The app should print the given text to the terminal:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"مرحبا بكم</span>\n</code></pre></div>\n<p>Things work as expected on an alternative runtime like <a href=\"https://github.com/wasmerio/wasmer/\">wasmer</a></p>\n<h2>Extra information</h2>\n<p>Platform: Windows 11 64-bit<br>\n<code>wasmtime</code> invoked from <code>cmd.exe</code></p>\n<p>Best<br>\nMusharraf</p>\n</blockquote>",
        "id": 383107398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691541166
    },
    {
        "content": "<p>kpreisser <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671609277\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Hi,<br>\nwithout knowing the details of Rust and the WASI APIs, this looks like the WASM module is using UTF-8 to print the string to stdout, resulting in this byte sequence:<br>\n<code>D9 85 D8 B1 D8 AD D8 A8 D8 A7 20 D8 A8 D9 83 D9 85</code></p>\n<p>Wasmtime on Windows probably doesn't set the console encoding using <a href=\"https://learn.microsoft.com/en-us/windows/console/setconsoleoutputcp\"><code>SetConsoleOutputCP</code></a>, so with default Windows settings it gets interpreted using the OEM codepage encoding, e.g. 437. With CP437, this byte sequence results in the string:<br>\n<code>┘à╪▒╪¡╪¿╪º ╪¿┘â┘à</code>.</p>\n<p>For example, when using <code>conhost.exe</code> as default console application, the current console encoding is shown in the properties (the set console encoding will be kept even after the child process exits):<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd\">https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd</a>)</p>\n<p>AFAIK, recent Windows 10 versions (Version 1909 and higher) support using UTF-8 as input and output console encoding (see <a href=\"https://github.com/MicrosoftDocs/Console-Docs/blob/5bf6f626dbef5da7944de725819993582ca8fc2d/docs/classic-vs-vt.md#unicode\">these docs</a> for mode details). (But I'm not familiar enough with WASI to know whether it specifies/assumes that strings written to stdout/stderr should use a specific encoding like UTF-8.)</p>\n<p>For example, when starting an app that calls <code>SetConsoleOutputCP(65001)</code> and then starting wasmtime with the example module again, the string should be printed correctly:<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3\">https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3</a>)</p>\n</blockquote>",
        "id": 383324596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691594256
    },
    {
        "content": "<p>kpreisser edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671609277\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Hi,<br>\nwithout knowing the details of Rust and the WASI APIs, this looks like the WASM module is using UTF-8 to print the string to stdout, resulting in this byte sequence:<br>\n<code>D9 85 D8 B1 D8 AD D8 A8 D8 A7 20 D8 A8 D9 83 D9 85</code></p>\n<p>Wasmtime on Windows probably doesn't set the console encoding using <a href=\"https://learn.microsoft.com/en-us/windows/console/setconsoleoutputcp\"><code>SetConsoleOutputCP</code></a>, so with default Windows settings it gets interpreted using the OEM codepage encoding, e.g. 437 on US English. With CP437, this byte sequence results in the string:<br>\n<code>┘à╪▒╪¡╪¿╪º ╪¿┘â┘à</code>.</p>\n<p>For example, when using <code>conhost.exe</code> as default console application, the current console encoding is shown in the properties (the set console encoding will be kept even after the child process exits):<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd\">https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd</a>)</p>\n<p>AFAIK, recent Windows 10 versions (Version 1909 and higher) support using UTF-8 as input and output console encoding (see <a href=\"https://github.com/MicrosoftDocs/Console-Docs/blob/5bf6f626dbef5da7944de725819993582ca8fc2d/docs/classic-vs-vt.md#unicode\">these docs</a> for mode details). (But I'm not familiar enough with WASI to know whether it specifies/assumes that strings written to stdout/stderr should use a specific encoding like UTF-8.)</p>\n<p>For example, when starting an app that calls <code>SetConsoleOutputCP(65001)</code> and then starting wasmtime with the example module again, the string should be printed correctly:<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3\">https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3</a>)</p>\n</blockquote>",
        "id": 383325866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691594462
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671619646\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>If stdout is a console, libstd will use <code>WriteConsoleW</code> for writing which accepts UTF-16. Is <code>SetConsoleOutputCP</code> also necessary for the UTF-16 apis? Code pages should only matter for the <code>*A</code> api's, not the <code>*W</code> api's, right?</p>\n</blockquote>",
        "id": 383326757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691594611
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671622815\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>cc @sunfishcode or @peterhuene perhaps?</p>\n</blockquote>",
        "id": 383327429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691594721
    },
    {
        "content": "<p>kpreisser <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671634229\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<blockquote>\n<p>Code pages should only matter for the <code>*A</code> api's, not the <code>*W</code> api's, right?</p>\n</blockquote>\n<p>Yes, as I understand the docs the current console page should only matter for <code>WriteFile</code> and <code>WriteConsoleA</code>, but not for <code>WriteConsoleW</code> (but I haven't tested it).</p>\n</blockquote>",
        "id": 383329977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691595120
    },
    {
        "content": "<p>kpreisser edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671609277\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Hi,<br>\nwithout knowing the details of Rust and the WASI APIs, this looks like the WASM module is using UTF-8 to print the string to stdout, resulting in this byte sequence:<br>\n<code>D9 85 D8 B1 D8 AD D8 A8 D8 A7 20 D8 A8 D9 83 D9 85</code></p>\n<p>Wasmtime on Windows probably doesn't set the console encoding using <a href=\"https://learn.microsoft.com/en-us/windows/console/setconsoleoutputcp\"><code>SetConsoleOutputCP</code></a>, so with default Windows settings it gets interpreted using the OEM codepage encoding, e.g. 437 on US English (<strong>edit:</strong> when using APIs accepting <code>char *</code>, like <code>WriteFile</code> or <code>WriteConsoleA</code>). With CP437, this byte sequence results in the string:<br>\n<code>┘à╪▒╪¡╪¿╪º ╪¿┘â┘à</code>.</p>\n<p>For example, when using <code>conhost.exe</code> as default console application, the current console encoding is shown in the properties (the set console encoding will be kept even after the child process exits):<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd\">https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd</a>)</p>\n<p>AFAIK, recent Windows 10 versions (Version 1909 and higher) support using UTF-8 as input and output console encoding (see <a href=\"https://github.com/MicrosoftDocs/Console-Docs/blob/5bf6f626dbef5da7944de725819993582ca8fc2d/docs/classic-vs-vt.md#unicode\">these docs</a> for mode details). (But I'm not familiar enough with WASI to know whether it specifies/assumes that strings written to stdout/stderr should use a specific encoding like UTF-8.)</p>\n<p>For example, when starting an app that calls <code>SetConsoleOutputCP(65001)</code> and then starting wasmtime with the example module again, the string should be printed correctly:<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3\">https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3</a>)</p>\n</blockquote>",
        "id": 383330456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691595187
    },
    {
        "content": "<p>kpreisser edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671609277\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Hi,<br>\nwithout knowing the details of Rust and the WASI APIs, this looks like the WASM module is using UTF-8 to print the string to stdout, resulting in this byte sequence:<br>\n<code>D9 85 D8 B1 D8 AD D8 A8 D8 A7 20 D8 A8 D9 83 D9 85</code></p>\n<p>Wasmtime on Windows probably doesn't set the console encoding using <a href=\"https://learn.microsoft.com/en-us/windows/console/setconsoleoutputcp\"><code>SetConsoleOutputCP</code></a>, so with default Windows settings it gets interpreted using the OEM codepage encoding, e.g. 437 on US English (<strong>edit:</strong> when using APIs accepting <code>char *</code>/<code>void *</code>, like <code>WriteFile</code> or <code>WriteConsoleA</code>). With CP437, this byte sequence results in the string:<br>\n<code>┘à╪▒╪¡╪¿╪º ╪¿┘â┘à</code>.</p>\n<p>For example, when using <code>conhost.exe</code> as default console application, the current console encoding is shown in the properties (the set console encoding will be kept even after the child process exits):<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd\">https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd</a>)</p>\n<p>AFAIK, recent Windows 10 versions (Version 1909 and higher) support using UTF-8 as input and output console encoding (see <a href=\"https://github.com/MicrosoftDocs/Console-Docs/blob/5bf6f626dbef5da7944de725819993582ca8fc2d/docs/classic-vs-vt.md#unicode\">these docs</a> for mode details). (But I'm not familiar enough with WASI to know whether it specifies/assumes that strings written to stdout/stderr should use a specific encoding like UTF-8.)</p>\n<p>For example, when starting an app that calls <code>SetConsoleOutputCP(65001)</code> and then starting wasmtime with the example module again, the string should be printed correctly:<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3\">https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3</a>)</p>\n</blockquote>",
        "id": 383338327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691596584
    },
    {
        "content": "<p>kpreisser edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671609277\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Hi,<br>\nwithout knowing the details of Rust and the WASI APIs, this looks like the WASM module is using UTF-8 to print the string to stdout, resulting in this byte sequence:<br>\n<code>D9 85 D8 B1 D8 AD D8 A8 D8 A7 20 D8 A8 D9 83 D9 85</code></p>\n<p>Wasmtime on Windows probably doesn't set the console encoding using <a href=\"https://learn.microsoft.com/en-us/windows/console/setconsoleoutputcp\"><code>SetConsoleOutputCP</code></a>, so with default Windows settings it gets interpreted using the OEM codepage encoding, e.g. 437 on US English (<strong>edit:</strong> when using APIs like <code>WriteFile</code> or <code>WriteConsoleA</code>). With CP437, this byte sequence results in the string:<br>\n<code>┘à╪▒╪¡╪¿╪º ╪¿┘â┘à</code>.</p>\n<p>For example, when using <code>conhost.exe</code> as default console application, the current console encoding is shown in the properties (the set console encoding will be kept even after the child process exits):<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd\">https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd</a>)</p>\n<p>AFAIK, recent Windows 10 versions (Version 1909 and higher) support using UTF-8 as input and output console encoding (see <a href=\"https://github.com/MicrosoftDocs/Console-Docs/blob/5bf6f626dbef5da7944de725819993582ca8fc2d/docs/classic-vs-vt.md#unicode\">these docs</a> for mode details). (But I'm not familiar enough with WASI to know whether it specifies/assumes that strings written to stdout/stderr should use a specific encoding like UTF-8.)</p>\n<p>For example, when starting an app that calls <code>SetConsoleOutputCP(65001)</code> and then starting wasmtime with the example module again, the string should be printed correctly:<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3\">https://github.com/bytecodealliance/wasmtime/assets/13289184/69b40bd5-ab7c-4f43-8d39-ad1b191957d3</a>)</p>\n</blockquote>",
        "id": 383338427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691596612
    },
    {
        "content": "<p>kpreisser edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671609277\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Hi,<br>\nwithout knowing the details of Rust and the WASI APIs, this looks like the WASM module is using UTF-8 to print the string to stdout, resulting in this byte sequence:<br>\n<code>D9 85 D8 B1 D8 AD D8 A8 D8 A7 20 D8 A8 D9 83 D9 85</code></p>\n<p>Wasmtime on Windows probably doesn't set the console encoding using <a href=\"https://learn.microsoft.com/en-us/windows/console/setconsoleoutputcp\"><code>SetConsoleOutputCP</code></a>, so with default Windows settings it gets interpreted using the OEM codepage encoding, e.g. 437 on US English (<strong>edit:</strong> when using APIs like <code>WriteFile</code> or <code>WriteConsoleA</code>). With CP437, this byte sequence results in the string:<br>\n<code>┘à╪▒╪¡╪¿╪º ╪¿┘â┘à</code>.</p>\n<p>For example, when using <code>conhost.exe</code> as default console application, the current console encoding is shown in the properties (the set console encoding will be kept even after the child process exits):<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd\">https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd</a>)</p>\n<p>AFAIK, recent Windows 10 versions (Version 1909 and higher) support using UTF-8 as input and output console encoding (see <a href=\"https://github.com/MicrosoftDocs/Console-Docs/blob/5bf6f626dbef5da7944de725819993582ca8fc2d/docs/classic-vs-vt.md#unicode\">these docs</a> for mode details). (But I'm not familiar enough with WASI to know whether it specifies/assumes that strings written to stdout/stderr should use a specific encoding like UTF-8.)</p>\n<p>For example, when starting an app that calls <code>SetConsoleOutputCP(65001)</code> and then starting wasmtime with the example module again, the string should be printed correctly:<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/f310d006-71e8-4ef3-a592-11e050207540\">https://github.com/bytecodealliance/wasmtime/assets/13289184/f310d006-71e8-4ef3-a592-11e050207540</a>)</p>\n</blockquote>",
        "id": 383339644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691596824
    },
    {
        "content": "<p>kpreisser edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671609277\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Hi,<br>\nwithout knowing the details of Rust and the WASI APIs, this looks like the WASM module is using UTF-8 to print the string to stdout, resulting in this byte sequence:<br>\n<code>D9 85 D8 B1 D8 AD D8 A8 D8 A7 20 D8 A8 D9 83 D9 85</code></p>\n<p>Wasmtime on Windows probably doesn't set the console encoding using <a href=\"https://learn.microsoft.com/en-us/windows/console/setconsoleoutputcp\"><code>SetConsoleOutputCP</code></a>, so with default Windows settings it gets interpreted using the OEM codepage encoding, e.g. 437 on US English (<strong>edit:</strong> when using APIs like <code>WriteFile</code> or <code>WriteConsoleA</code>). With CP437, this byte sequence results in the string:<br>\n<code>┘à╪▒╪¡╪¿╪º ╪¿┘â┘à</code>.</p>\n<p>For example, when using <code>conhost.exe</code> as default console application, the current console encoding is shown in the properties (the set console encoding will be kept even after the child process exits):<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd\">https://github.com/bytecodealliance/wasmtime/assets/13289184/190f07a9-c0c0-441b-99be-966a526ac5cd</a>)</p>\n<p>AFAIK, recent Windows 10 versions (Version 1909 and higher) support using UTF-8 as input and output console encoding (see <a href=\"https://github.com/MicrosoftDocs/Console-Docs/blob/5bf6f626dbef5da7944de725819993582ca8fc2d/docs/classic-vs-vt.md#unicode\">these docs</a> for mode details). (But I'm not familiar enough with WASI to know whether it specifies/assumes that strings written to stdout/stderr should use a specific encoding like UTF-8.)</p>\n<p>When starting an app that calls <code>SetConsoleOutputCP(65001)</code> (e.g. by running <code>chcp 65001</code> on the command-line) and then starting wasmtime with the example module again, the string should be printed correctly:<br>\n![grafik](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13289184/f310d006-71e8-4ef3-a592-11e050207540\">https://github.com/bytecodealliance/wasmtime/assets/13289184/f310d006-71e8-4ef3-a592-11e050207540</a>)</p>\n</blockquote>",
        "id": 383339966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691596885
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671759289\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I don't have access to my Windows machine this week as I'm working away from home, but I can try to reproduce and investigate on a VM.</p>\n<p>From what I can tell of the various async wrappers (wasi's, tokio's, etc), we should still be ending up in a call to the <code>write_all</code> impl of <code>std::io::Stdio</code>, which should detect the handle as a console (as we do not call <code>SetStdHandle</code> in Wasmtime), convert the UTF-8 bytes to UTF-16, and use <code>WriteConsoleW</code> to print.</p>\n<p>Thus I'd expect the wasm Rust program would behave the same as it would as a native Rust program, but obviously something is amiss.</p>\n</blockquote>",
        "id": 383349156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691598616
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671906750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I was able to reproduce this on a VM (after some battling getting the fact I was using a Windows ARM VM since I have an M2 Mac).</p>\n<p>I'll investigate shortly.</p>\n</blockquote>",
        "id": 383379627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691604547
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672002629\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Thanks for this report and discussion, all - I'm pretty ignorant on this topic.</p>\n<p>I don't have a windows machine, so I tried to reproduce the issue using the windows runners in CI, and it appears that in CI the encoding is handled correctly (<a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/5811016470/job/15753287837#step:16:929\">https://github.com/bytecodealliance/wasmtime/actions/runs/5811016470/job/15753287837#step:16:929</a>) - but, from my reading above, that could be due to the way GitHub CI captures output with different defaults than cmd.exe.</p>\n<p>I looked at the implementations and the wasi-common implementations (the <code>wasi-cap-std-sync</code> and <code>wasi-tokio</code> tests) bypass rust test output capture (showing the arabic <code>welcome</code> above) because they use <code>std::fs::File</code>'s <code>Write::write_vectored</code> on the stdout/stderr files directly <a href=\"https://github.com/bytecodealliance/wasmtime/blob/pch/sync_wasi_cli/crates/wasi-common/cap-std-sync/src/stdio.rs#L131\">https://github.com/bytecodealliance/wasmtime/blob/pch/sync_wasi_cli/crates/wasi-common/cap-std-sync/src/stdio.rs#L131</a> whereas the preview2 implementations write by way of tokio::io::std{out,err}'s <code>AsyncWrite</code> impls, which in turn internally use <code>std::io::std{out,err}</code>'s <code>Write</code> impl.</p>\n<p>Unfortunately the preview 2 implementations dont actually produce output due to another issue. I'll fix that in parallel, but this might shed some light...</p>\n</blockquote>",
        "id": 383396270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691608568
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672047926\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I'm having a difficult time debugging from an emulated x86-64 debugger running on a Windows ARM VM; it <em>seems</em> like I can hit a breakpoint inside the <code>if !is_console(...)</code> check in the stdlib was for seeing if it needed to convert the output to UTF-16 and use <code>WriteConsoleW</code>, which would imply it is writing the raw UTF-8 bytes to the console (presumably with <code>WriteFile</code>), hence the console code page issue.</p>\n<p>Unfortunately, it appears the debugger or the cross-compiled Wasmtime is doing things that make it impossible to actually inspect locals or step reliably through (misaligned memory access, AVs, etc); the joys of debugging a x86-64 Windows process running on an M2 Mac.</p>\n<p>Therefore, I can't reliably trust what I'm seeing.</p>\n<p>Unless someone else debugs this, this will have to wait until next week when I am back in front of a proper Windows machine.</p>\n</blockquote>",
        "id": 383402470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691610417
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672047926\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I'm having a difficult time debugging from an emulated x86-64 debugger running on a Windows ARM VM; it <em>seems</em> like I can hit a breakpoint inside the <code>if !is_console(...)</code> check in the stdlib for seeing if it needs to convert the output to UTF-16 and use <code>WriteConsoleW</code>; this would imply it is writing the raw UTF-8 bytes to the console (presumably with <code>WriteFile</code>), hence the console code page issue.</p>\n<p>Unfortunately, it appears the debugger or the cross-compiled Wasmtime is doing things that make it impossible to actually inspect locals or step reliably through (misaligned memory access, AVs, etc); the joys of debugging a x86-64 Windows process running on an M2 Mac.</p>\n<p>Therefore, I can't reliably trust what I'm seeing.</p>\n<p>Unless someone else debugs this, this will have to wait until next week when I am back in front of a proper Windows machine.</p>\n</blockquote>",
        "id": 383402795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691610500
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671759289\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I don't have access to my Windows machine this week as I'm working away from home, but I can try to reproduce and investigate on a VM.</p>\n<p>From what I can tell of the various async wrappers (wasi's, tokio's, etc), we should still be ending up in a call to the <code>Write</code> impl of <code>std::io::Stdio</code>, which should detect the handle as a console (as we do not call <code>SetStdHandle</code> in Wasmtime), convert the UTF-8 bytes to UTF-16, and use <code>WriteConsoleW</code> to print.</p>\n<p>Thus I'd expect the wasm Rust program would behave the same as it would as a native Rust program, but obviously something is amiss.</p>\n</blockquote>",
        "id": 383405296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691611234
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672047926\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I'm having a difficult time debugging from an emulated x86-64 debugger running on a Windows ARM VM; it <em>seems</em> like I can hit a breakpoint inside the <code>if !is_console(...)</code> check in the stdlib for seeing if it needs to convert the output to UTF-16 and use <code>WriteConsoleW</code>; this would imply it is writing the raw UTF-8 bytes to the console (presumably with <code>WriteFile</code>), hence the console code page issue.</p>\n<p>Unfortunately, it appears the debugger or the cross-compiled Wasmtime is doing things that make it impossible to actually inspect locals or step reliably through (misaligned memory access, AVs, etc); the joys of debugging a x86-64 Windows process running on an M2 Mac.</p>\n<p>Therefore, I can't reliably trust what I'm seeing.</p>\n<p>Unless someone else debugs this, this will have to wait until next week when I am back in front of a proper Windows machine.</p>\n<p>Update: apparently an ARM windbg incorrectly sets symbol breakpoints (hence I can't easily break on <code>kernel32!WriteConsoleW</code> or <code>ntdll!NtWriteFile</code>) and can't correctly display the disassembly of a x64 user mode debuggee. I'll try later with a x64 windbg under emulation and see if that works.</p>\n</blockquote>",
        "id": 383418993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691615643
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672047926\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I'm having a difficult time debugging from an emulated x86-64 debugger running on a Windows ARM VM; it <em>seems</em> like I can hit a breakpoint inside the <code>if !is_console(...)</code> check in the stdlib for seeing if it needs to convert the output to UTF-16 and use <code>WriteConsoleW</code>; this would imply it is writing the raw UTF-8 bytes to the console (presumably with <code>WriteFile</code>), hence the console code page issue.</p>\n<p>Unfortunately, it appears the debugger from the \"C/C++\" VS code extension is doing things that make it impossible to actually inspect locals or step reliably through (misaligned memory access, AVs, etc); the joys of debugging a x86-64 Windows process running on an M2 Mac.</p>\n<p>Therefore, I can't reliably trust what I'm seeing.</p>\n<p>Unless someone else debugs this, this will have to wait until next week when I am back in front of a proper Windows machine.</p>\n<p>Update: apparently an ARM windbg incorrectly sets symbol breakpoints (hence I can't easily break on <code>kernel32!WriteConsoleW</code> or <code>ntdll!NtWriteFile</code>) and can't correctly display the disassembly of a x64 user mode debuggee. I'll try later with a x64 windbg under emulation and see if that works.</p>\n</blockquote>",
        "id": 383419444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691615788
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672047926\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I'm having a difficult time debugging from an emulated x86-64 debugger running on a Windows ARM VM; it <em>seems</em> like I can hit a breakpoint inside the <code>if !is_console(...)</code> check in the stdlib for seeing if it needs to convert the output to UTF-16 and use <code>WriteConsoleW</code>; this would imply it is writing the raw UTF-8 bytes to the console (presumably with <code>WriteFile</code>), hence the console code page issue.</p>\n<p>Unfortunately, it appears the debugger from the \"C/C++\" VS code extension is doing things that make it impossible to actually inspect locals or step reliably through (misaligned memory access, AVs, etc); the joys of debugging a x86-64 Windows process running on an M2 Mac.</p>\n<p>Therefore, I can't reliably trust what I'm seeing.</p>\n<p>Unless someone else debugs this, this will have to wait until next week when I am back in front of a proper Windows machine.</p>\n</blockquote>",
        "id": 383434402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691623950
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672047926\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I'm having a difficult time debugging from an ARM debugger with a x86-64 Wasmtime running under emulation.</p>\n<p>Unless someone else debugs this, this will have to wait until next week when I am back in front of a proper Windows machine.</p>\n</blockquote>",
        "id": 383434467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691624004
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672340269\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Indeed, as Pat mentioned in the link above, the problem lies with treating the stdout/stderr handles as a <code>File</code> with <code>(&amp;*self.0.as_filelike_view::&lt;File&gt;()).write_vectored(bufs)</code>.</p>\n<p>This redirects the <code>Write</code> implementation to <code>File</code> which ultimately writes the UTF-8 bytes directly to the console _without_ letting the stdlib do the conversion to UTF-16 and call <code>WriteConsoleW</code>.</p>\n<p>@sunfishcode, as the cap-std author and the last person to touch that line in the WASI preview1 code, is there a reason for not wanting to simply call the <code>Stdout</code>/<code>Stderr</code> impls of <code>write_vectored</code>?</p>\n</blockquote>",
        "id": 383437385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691626012
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672340269\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Indeed, as Pat mentioned in the link above, the problem lies with treating the stdout/stderr handles as a <code>File</code> with <code>(&amp;*self.0.as_filelike_view::&lt;File&gt;()).write_vectored(bufs)</code>.</p>\n<p>This redirects to the <code>Write</code> implementation of <code>File</code> which ultimately writes the UTF-8 bytes directly to the console _without_ letting the stdlib do the conversion to UTF-16 and call <code>WriteConsoleW</code>.</p>\n<p>@sunfishcode, as the cap-std author and the last person to touch that line in the WASI preview1 code, is there a reason for not wanting to simply call the <code>Stdout</code>/<code>Stderr</code> impls of <code>write_vectored</code>?</p>\n</blockquote>",
        "id": 383438302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691626514
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672340269\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>Indeed, as Pat mentioned in the link above, the problem lies with treating the stdout/stderr handles as a <code>File</code> with <code>(&amp;*self.0.as_filelike_view::&lt;File&gt;()).write_vectored(bufs)</code>.</p>\n<p>This redirects to the <code>Write</code> implementation of <code>File</code> which ultimately writes the UTF-8 bytes directly to the console _without_ letting the stdlib do the conversion to UTF-16 and then call <code>WriteConsoleW</code>.</p>\n<p>@sunfishcode, as the cap-std author and the last person to touch that line in the WASI preview1 code, is there a reason for not wanting to simply call the <code>Stdout</code>/<code>Stderr</code> impls of <code>write_vectored</code>?</p>\n</blockquote>",
        "id": 383438473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691626594
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1672433431\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>I expect the answer is that we had no idea it had a different impl. Lets switch it!</p>\n</blockquote>",
        "id": 383473555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691633382
    },
    {
        "content": "<p>kpreisser edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1671634229\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<blockquote>\n<p>Code pages should only matter for the <code>*A</code> api's, not the <code>*W</code> api's, right?</p>\n</blockquote>\n<p>Yes, as I understand the docs the current console code page should only matter for <code>WriteFile</code> and <code>WriteConsoleA</code>, but not for <code>WriteConsoleW</code> (but I haven't tested it).</p>\n</blockquote>",
        "id": 383530427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691654744
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1716481097\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<p>@mush42 sorry, this fell off my radar - I caught up with @peterhuene in person the other day and we each thought the other was taking care of it.</p>\n<p>We just hit merge on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6825\">https://github.com/bytecodealliance/wasmtime/pull/6825</a>. Can you build the latest wasmtime <code>main</code> and try to reproduce again? It should be fixed, but we don't have any windows users handy who can check.</p>\n</blockquote>",
        "id": 390600252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694554392
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<h2>The problem</h2>\n<p>Given the following rust app that prints some Arabic text to the terminal:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">};</span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"مرحبا بكم\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">lock</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Compiling the app and running the <code>.wasm</code> module using <code>wasmtime.</code> gives the following garbled output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">┘à╪▒╪¡╪¿╪º</span><span class=\"w\"> </span><span class=\"err\">╪¿┘â┘à</span>\n</code></pre></div>\n<h2>Expected</h2>\n<p>The app should print the given text to the terminal:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"مرحبا بكم</span>\n</code></pre></div>\n<p>Things work as expected on an alternative runtime like <a href=\"https://github.com/wasmerio/wasmer/\">wasmer</a></p>\n<h2>Extra information</h2>\n<p>Platform: Windows 11 64-bit<br>\n<code>wasmtime</code> invoked from <code>cmd.exe</code></p>\n<p>Best<br>\nMusharraf</p>\n</blockquote>",
        "id": 390607131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694557633
    },
    {
        "content": "<p>mush42 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824#issuecomment-1716876865\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6824\">issue #6824</a>:</p>\n<blockquote>\n<blockquote>\n<p>@mush42 sorry, this fell off my radar - I caught up with @peterhuene in person the other day and we each thought the other was taking care of it.</p>\n<p>We just hit merge on #6825. Can you build the latest wasmtime <code>main</code> and try to reproduce again? It should be fixed, but we don't have any windows users handy who can check.</p>\n</blockquote>\n<p>I can confirm that the issue has been fixed in #6825. Thanks!</p>\n</blockquote>",
        "id": 390636835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694574758
    }
]