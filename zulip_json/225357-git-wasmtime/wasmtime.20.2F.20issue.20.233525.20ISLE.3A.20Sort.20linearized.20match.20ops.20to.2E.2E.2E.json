[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3525\">issue #3525</a>:</p>\n<blockquote>\n<p>Originally <a href=\"https://github.com/cfallin/isle/issues/11\">https://github.com/cfallin/isle/issues/11</a></p>\n<p>&lt;blockquote&gt;</p>\n<p>After linearizing rule patterns for a given term, but before we insert those linear match ops into the trie, we should do a custom topological sort of the linear match ops's data-flow graph that seeks to maximize prefix sharing in the eventual trie:</p>\n<ul>\n<li>create a data-flow graph for each pattern</li>\n<li>keep track of \"emittable\" match operations for each pattern, i.e. those operations whose operands are all already emitted so we can emit this operation if we choose</li>\n<li>count which operations are most emittable across all patterns</li>\n<li>select the operation with the highest count</li>\n<li>for all patterns where this is an emittable operation:<ul>\n<li>emit this operation next</li>\n<li>recurse</li>\n</ul>\n</li>\n<li>for all patterns where that is not an emittable operation:<ul>\n<li>choose the operation with the highest count among these remaining patterns</li>\n<li>emit this operation next for these patterns</li>\n<li>recurse</li>\n</ul>\n</li>\n<li>repeat previous until all patterns have been accounted for</li>\n</ul>\n<p>This is greedy algorithm is not optimal, because we don't break ties between equally-emittable operations such that the final trie will have maximal prefix sharing. I can't think of an efficient way to do that right now. But I think this should get us very close to optimal in practice.</p>\n<p>&lt;/blockquote&gt;</p>\n</blockquote>",
        "id": 261577194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637019700
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3525\">issue #3525</a>:</p>\n<blockquote>\n<p>Originally <a href=\"https://github.com/cfallin/isle/issues/11\">https://github.com/cfallin/isle/issues/11</a></p>\n<p>&lt;blockquote&gt;</p>\n<p>After linearizing rule patterns for a given term, but before we insert those linear match ops into the trie, we should do a custom topological sort of the linear match ops's data-flow graph that seeks to maximize prefix sharing in the eventual trie:</p>\n<ul>\n<li>create a data-flow graph for each pattern</li>\n<li>keep track of \"emittable\" match operations for each pattern, i.e. those operations whose operands are all already emitted so we can emit this operation if we choose</li>\n<li>count which operations are most emittable across all patterns</li>\n<li>select the operation with the highest count</li>\n<li>for all patterns where this is an emittable operation:<ul>\n<li>emit this operation next</li>\n<li>recurse</li>\n</ul>\n</li>\n<li>for all patterns where that is not an emittable operation:<ul>\n<li>choose the operation with the highest count among these remaining patterns</li>\n<li>emit this operation next for these patterns</li>\n<li>recurse</li>\n</ul>\n</li>\n<li>repeat previous until all patterns have been accounted for</li>\n</ul>\n<p>This is greedy algorithm is not optimal, because we don't break ties between equally-emittable operations such that the final trie will have maximal prefix sharing. I can't think of an efficient way to do that right now. But I think this should get us very close to optimal in practice.</p>\n<p>&lt;/blockquote&gt;</p>\n</blockquote>",
        "id": 261577195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637019701
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3525#issuecomment-1451188689\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3525\">issue #3525</a>:</p>\n<blockquote>\n<p>I think this is no longer necessary since ISLE doesn't use linearized matches any more. Please re-open if I've misunderstood it though.</p>\n</blockquote>",
        "id": 338993172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677724957
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3525\">issue #3525</a>:</p>\n<blockquote>\n<p>Originally <a href=\"https://github.com/cfallin/isle/issues/11\">https://github.com/cfallin/isle/issues/11</a></p>\n<p>&lt;blockquote&gt;</p>\n<p>After linearizing rule patterns for a given term, but before we insert those linear match ops into the trie, we should do a custom topological sort of the linear match ops's data-flow graph that seeks to maximize prefix sharing in the eventual trie:</p>\n<ul>\n<li>create a data-flow graph for each pattern</li>\n<li>keep track of \"emittable\" match operations for each pattern, i.e. those operations whose operands are all already emitted so we can emit this operation if we choose</li>\n<li>count which operations are most emittable across all patterns</li>\n<li>select the operation with the highest count</li>\n<li>for all patterns where this is an emittable operation:<ul>\n<li>emit this operation next</li>\n<li>recurse</li>\n</ul>\n</li>\n<li>for all patterns where that is not an emittable operation:<ul>\n<li>choose the operation with the highest count among these remaining patterns</li>\n<li>emit this operation next for these patterns</li>\n<li>recurse</li>\n</ul>\n</li>\n<li>repeat previous until all patterns have been accounted for</li>\n</ul>\n<p>This is greedy algorithm is not optimal, because we don't break ties between equally-emittable operations such that the final trie will have maximal prefix sharing. I can't think of an efficient way to do that right now. But I think this should get us very close to optimal in practice.</p>\n<p>&lt;/blockquote&gt;</p>\n</blockquote>",
        "id": 338993173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677724957
    }
]