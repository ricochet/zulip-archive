[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759#issuecomment-1028384530\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759\">issue #3759</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 270462485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643838106
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759#issuecomment-1028388534\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759\">issue #3759</a>:</p>\n<blockquote>\n<p>Re: pooling allocator on-by-default, I wonder if we should evaluate the default limits at the same time? IIRC, for example, a build of SpiderMonkey/WASI doesn't fit within the defaults; when testing with the pooling allocator I've had to bump the limits. One advantage of the on-demand allocator is that since it does a heap allocation just once, for just the right amount of <code>VMContext</code> space, it doesn't need to be as careful; while the pooling allocator can easily mmap significant amounts of memory for instances if it makes too-conservative assumptions.</p>\n<p>(Perhaps a way around that is for the pooling allocator defaults to allow for very large instances -- as high as, say, what a typical browser would have for implementation-defined limits -- but only one instance slot?)</p>\n</blockquote>",
        "id": 270463165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643838401
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759#issuecomment-1028402683\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759\">issue #3759</a>:</p>\n<blockquote>\n<p>That makes sense to me, but to clarify the pooling allocator is already enabled by default, this shouldn't change that. I do think it's reasonable to up the limits though (or measure the impact of malloc-ing the <code>VMContext</code> instead of mmap-ing it to avoid the need for most limits)</p>\n</blockquote>",
        "id": 270465928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643839594
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759#issuecomment-1028446939\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759\">issue #3759</a>:</p>\n<blockquote>\n<blockquote>\n<p>That makes sense to me, but to clarify the pooling allocator is already enabled by default, this shouldn't change that</p>\n</blockquote>\n<p>Even for <code>wasmtime-cli</code> though? I was referring to your third commit, which I think changes this -- that's the part I'd worry about potentially surprising someone who's using wasmtime to run big modules from the commandline...</p>\n</blockquote>",
        "id": 270474306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643843747
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759#issuecomment-1029094636\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3759\">issue #3759</a>:</p>\n<blockquote>\n<p>Oh I see it's in a somewhat inconsistent state right now I think. The pooling allocator is enabled on the <code>wasmtime</code> crate unconditionally but the top-level feature is disabled by default. In any case I think that it's best to defer the limits question to later, AFAIK this is mostly just used for our own internal testing right now since there's not really much purpose for using the pooling allocator on the CLI anyway. It should be pretty easy to tweak the limits in the future if necessary.</p>\n</blockquote>",
        "id": 270564829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643901422
    }
]