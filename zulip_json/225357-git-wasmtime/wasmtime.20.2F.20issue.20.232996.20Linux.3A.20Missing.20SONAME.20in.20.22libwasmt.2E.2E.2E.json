[
    {
        "content": "<p>MartinKolbAtWork opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996\">issue #2996</a>:</p>\n<blockquote>\n<p>The shared library <code>libwasmtime.so</code> does not have an <code>SONAME</code> specified. This can be checked using this command:<br>\n<code>objdump -p libwasmtime.so | grep SONAME</code></p>\n<p>When <code>libwasmtime.so</code> is consumed in CMake, the <strong>linker produces a wrong output file due to the missing SONAME</strong>.<br>\nThere is a workaround for this in CMake, but according to a reply from the CMake folks, the missing SONAME is a bug that must be fixed by the library provider (note: the CMake ticket refers to wasmer, but wasmtime has exactly the same issue, due to the Rust heritage):<br>\n<a href=\"https://gitlab.kitware.com/cmake/cmake/-/issues/22307#note_971562\">https://gitlab.kitware.com/cmake/cmake/-/issues/22307#note_971562</a><br>\n‚Äú_The .so file should have a SONAME. If it doesn't, that's a bug in the package_‚Äù</p>\n<p>I know that the problem is <strong>inherent for all Rust builds of cdylibs</strong>: <a href=\"https://github.com/rust-lang/cargo/issues/5045\">https://github.com/rust-lang/cargo/issues/5045</a><br>\nThe Rust community did not fix this since 2018 (see issue above), but fortunately it‚Äôs <strong>easy to fix</strong> for library creators. You just need to put the following code into the <code>build.rs</code> of the library:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_os</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"linux\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"cargo:rustc-cdylib-link-arg=-Wl,-soname,libwasmtime.so\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried putting these lines into <code>crates/wasi-common/build.rs</code>, and then <code>libwasmtime.so</code> was built correctly, including a SONAME entry.</p>\n<p>Could you please fix this issue?</p>\n<p>Thanks<br>\nMartin<br>\n</p>\n</blockquote>",
        "id": 243151591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624018456
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996#issuecomment-863999105\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996\">issue #2996</a>:</p>\n<blockquote>\n<p>That snippet is wrong if a user of wasmtime wants to rename the library to for example allow multiple versions to be installed at the same time. (common when packaging shared libraries by distros) You could use <code>patchelf --set-soname</code> yourself after building wasmtime as alternative.</p>\n</blockquote>",
        "id": 243152349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624018936
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996#issuecomment-864087720\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996\">issue #2996</a>:</p>\n<blockquote>\n<p>Thanks for the report! We actually do something <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d8d4bf81b260ea18f56475fbde96b6662a365cf8/ci/build-tarballs.sh#L56-L59\">similar for macOS</a> already. @MartinKolbAtWork would you be up for making a PR to update that script? I unfortunately don't really know much about SONAME...</p>\n</blockquote>",
        "id": 243169837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624027225
    },
    {
        "content": "<p>MartinKolbAtWork <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996#issuecomment-864151620\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996\">issue #2996</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton , <br>\nas suggested, I added PR <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2998\">https://github.com/bytecodealliance/wasmtime/pull/2998</a><br>\nThanks,<br>\nMartin</p>\n</blockquote>",
        "id": 243182812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624033647
    },
    {
        "content": "<p>MartinKolbAtWork <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996#issuecomment-869143945\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996\">issue #2996</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton ,</p>\n<p>I have a question/proposal on this topic, and I‚Äôd like to know your opinion/view.</p>\n<p>Like you, I don‚Äôt care about that SONAME thing at all. As stated in the title of the issue, the missing SONAME ‚Äújust‚Äù hinders the usage of Wasmtime in a C/C++ based CMake environment.</p>\n<p>Wasmtime has <strong>both a C API</strong> (wasm-c-api) as well as the <strong>new C++ API</strong> that you mentioned. The <strong>vast majority</strong> of people using these APIs <strong>do have a CMake environment</strong>.<br>\nSo, instead of fiddling around in low-level SONAME entries during packaging, wouldn‚Äôt it be better to offer these users of the C and C++ API a <strong>native CMake project</strong>?<br>\nThat would make <strong>consuming Wasmtime</strong> in CMake a matter of <strong>a few lines</strong>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FetchContent_Declare</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">GIT_REPOSITORY</span><span class=\"w\">    </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime.git</span>\n<span class=\"w\">  </span><span class=\"n\">GIT_TAG</span><span class=\"w\">           </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">28.0</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I can tell you, today that‚Äôs a lot more‚Ä¶ üòâ</p>\n<p>I‚Äôm sure in wasmtime there are some C++ enthusiasts around that could add the relevant CMakeLists.txt files to the Git repo. <br>\nDo you think this would be a valid option? I‚Äôm confident that would be a giant leap forward for all those who use Wasmtime via the C/C++ API.</p>\n<p>If you think, my suggestion is a valid approach, I'd close this issue and open a new one with the new suggestion.</p>\n<p>Thanks<br>\nMartin</p>\n</blockquote>",
        "id": 244061914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624792187
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996#issuecomment-869720713\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996\">issue #2996</a>:</p>\n<blockquote>\n<p>Yeah that seems reasonable to me to add! I've never worked with CMake in this regard before (maybe others have?) but adding that for consuming the C API seems pretty reasonable to me.</p>\n</blockquote>",
        "id": 244150342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624889561
    },
    {
        "content": "<p>MartinKolbAtWork <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996#issuecomment-870274523\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996\">issue #2996</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton,<br>\nit seems like @redradist is the CMake expert. Maybe he can throw in his expertise.</p>\n<p>I'll close this issue now and hopefully I'll see Wasmtime's CMake friendliness increased over time <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>Thanks and best regards,<br>\nMartin</p>\n</blockquote>",
        "id": 244237896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624947876
    },
    {
        "content": "<p>MartinKolbAtWork closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2996\">issue #2996</a>:</p>\n<blockquote>\n<p>The shared library <code>libwasmtime.so</code> does not have an <code>SONAME</code> specified. This can be checked using this command:<br>\n<code>objdump -p libwasmtime.so | grep SONAME</code></p>\n<p>When <code>libwasmtime.so</code> is consumed in CMake, the <strong>linker produces a wrong output file due to the missing SONAME</strong>.<br>\nThere is a workaround for this in CMake, but according to a reply from the CMake folks, the missing SONAME is a bug that must be fixed by the library provider (note: the CMake ticket refers to wasmer, but wasmtime has exactly the same issue, due to the Rust heritage):<br>\n<a href=\"https://gitlab.kitware.com/cmake/cmake/-/issues/22307#note_971562\">https://gitlab.kitware.com/cmake/cmake/-/issues/22307#note_971562</a><br>\n‚Äú_The .so file should have a SONAME. If it doesn't, that's a bug in the package_‚Äù</p>\n<p>I know that the problem is <strong>inherent for all Rust builds of cdylibs</strong>: <a href=\"https://github.com/rust-lang/cargo/issues/5045\">https://github.com/rust-lang/cargo/issues/5045</a><br>\nThe Rust community did not fix this since 2018 (see issue above), but fortunately it‚Äôs <strong>easy to fix</strong> for library creators. You just need to put the following code into the <code>build.rs</code> of the library:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_os</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"linux\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"cargo:rustc-cdylib-link-arg=-Wl,-soname,libwasmtime.so\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried putting these lines into <code>crates/wasi-common/build.rs</code>, and then <code>libwasmtime.so</code> was built correctly, including a SONAME entry.</p>\n<p>Could you please fix this issue?</p>\n<p>Thanks<br>\nMartin<br>\n</p>\n</blockquote>",
        "id": 244237897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624947876
    }
]