[
    {
        "content": "<p>kubkon opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a> from <code>mut-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p>Until now, several syscalls including <code>fd_pwrite</code> etc. were relying on mutating <code>&amp;mut Entry</code> by mutating its inner file handle. This is unnecessary in almost all cases since all methods mutating <code>std::fs::File</code> in Rust's libstd are also implemented for <code>&amp;std::fs::File</code>. In part, this will prepare us to handle <code>Entry</code>s behind an <code>Rc</code> and <code>RefCell</code> combo.</p>\n<p>While here, I've also modified <code>OsHandle</code> in BSD to include <code>RefCell&lt;Option&lt;Dir&gt;&gt;</code> rather than <code>Option&lt;Mutex&lt;Dir&gt;&gt;</code> as was until now. While <code>RefCell</code> could easily be replaced with <code>RefCell</code>, since going multithreading will require a lot of (probably even) conceptual changes to <code>wasi-common</code>, I thought it'd be best not to mix single- with multithreading contexts and swap all places at once when it comes to it. If y'all feel this is not the right approach, lemme know!</p>\n<p>I've also had to make some modifications to virtual FS which mainly swapped mutability for interior mutability in places.</p>\n</blockquote>",
        "id": 191667024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585081421
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" target=\"_blank\" title=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/iximeow\" target=\"_blank\" title=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a>.</p>",
        "id": 191667025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585081422
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" target=\"_blank\" title=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/iximeow\" target=\"_blank\" title=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a>.</p>",
        "id": 191667026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585081422
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a> from <code>mut-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p>Until now, several syscalls including <code>fd_pwrite</code> etc. were relying on mutating <code>&amp;mut Entry</code> by mutating its inner file handle. This is unnecessary in almost all cases since all methods mutating <code>std::fs::File</code> in Rust's libstd are also implemented for <code>&amp;std::fs::File</code>. In part, this will prepare us to handle <code>Entry</code>s behind an <code>Rc</code> and <code>RefCell</code> combo.</p>\n<p>While here, I've also modified <code>OsHandle</code> in BSD to include <code>RefCell&lt;Option&lt;Dir&gt;&gt;</code> rather than <code>Option&lt;Mutex&lt;Dir&gt;&gt;</code> as was until now. While <code>RefCell</code> could easily be replaced with <code>Mutex</code>, since going multithreading will require a lot of (probably even) conceptual changes to <code>wasi-common</code>, I thought it'd be best not to mix single- with multithreading contexts and swap all places at once when it comes to it. If y'all feel this is not the right approach, lemme know!</p>\n<p>I've also had to make some modifications to virtual FS which mainly swapped mutability for interior mutability in places.</p>\n</blockquote>",
        "id": 191667263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585081536
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a> from <code>mut-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p>Until now, several syscalls including <code>fd_pwrite</code> etc. were relying on mutating <code>&amp;mut Entry</code> by mutating its inner file handle. This is unnecessary in almost all cases since all methods mutating <code>std::fs::File</code> in Rust's libstd are also implemented for <code>&amp;std::fs::File</code>. In part, this will prepare us to handle <code>Entry</code>s behind an <code>Rc</code> and <code>RefCell</code> combo.</p>\n<p>While here, I've also modified <code>OsHandle</code> in BSD to include <code>RefCell&lt;Option&lt;Dir&gt;&gt;</code> rather than <code>Option&lt;Mutex&lt;Dir&gt;&gt;</code> as was until now. While <code>RefCell</code> could easily be replaced with <code>Mutex</code>, since going multithreading will require a lot of conceptual changes to <code>wasi-common</code>, I thought it'd be best not to mix single- with multithreading contexts and swap all places at once when it comes to it. If y'all feel this is not the right approach, lemme know!</p>\n<p>I've also had to make some modifications to virtual FS which mainly swapped mutability for interior mutability in places.</p>\n</blockquote>",
        "id": 191667301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585081554
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a> from <code>mut-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p>Until now, several syscalls including <code>fd_pwrite</code> etc. were relying on mutating <code>&amp;mut Entry</code> by mutating its inner file handle. This is unnecessary in almost all cases since all methods mutating <code>std::fs::File</code> in Rust's libstd are also implemented for <code>&amp;std::fs::File</code>. In part, this will prepare us to handle <code>Entry</code>s behind an <code>Rc</code> and <code>RefCell</code> combo.</p>\n<p>While here, I've also modified <code>OsHandle</code> in BSD to include <code>RefCell&lt;Option&lt;Dir&gt;&gt;</code> rather than <code>Option&lt;Mutex&lt;Dir&gt;&gt;</code> as was until now. While <code>RefCell</code> could easily be replaced with <code>Mutex</code>, since going multithreading will require a lot of conceptual changes to <code>wasi-common</code>, I thought it'd be best not to mix single- with multithreading contexts and swap all places at once when it comes to it. If y'all feel this is not the right approach, lemme know!</p>\n<p>I've also had to make some modifications to virtual FS which mainly swaps mutability for interior mutability in places.</p>\n</blockquote>",
        "id": 191667404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585081589
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a> from <code>mut-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p>Until now, several syscalls including <code>fd_pwrite</code> etc. were relying on mutating <code>&amp;mut Entry</code> by mutating its inner file handle. This is unnecessary in almost all cases since all methods mutating <code>std::fs::File</code> in Rust's libstd are also implemented for <code>&amp;std::fs::File</code>. In part, this will prepare us to handle <code>Entry</code>s behind an <code>Rc</code> and <code>RefCell</code> combo.</p>\n<p>While here, I've also modified <code>OsHandle</code> in BSD to include <code>RefCell&lt;Option&lt;Dir&gt;&gt;</code> rather than <code>Option&lt;Mutex&lt;Dir&gt;&gt;</code> as was until now. While <code>RefCell</code> could easily be replaced with <code>Mutex</code>, since going multithreading will require a lot of conceptual changes to <code>wasi-common</code>, I thought it'd be best not to mix single- with multithreading contexts and swap all places at once when it comes to it. If y'all feel this is not the right approach, lemme know!</p>\n<p>I've also had to make some modifications to virtual FS which mainly swaps mutability for interior mutability in a handful of places.</p>\n</blockquote>",
        "id": 191667424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585081602
    }
]