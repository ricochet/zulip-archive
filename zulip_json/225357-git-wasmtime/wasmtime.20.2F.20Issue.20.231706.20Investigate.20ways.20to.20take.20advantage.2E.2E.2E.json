[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1706\">Issue #1706</a>:</p>\n<blockquote>\n<p>Right now, peepmatic has no knowledge of (for example) <code>iadd</code>'s commutativity, and so both of the following optimizations must be written:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nv\">iadd</span> <span class=\"nv\">$C</span> <span class=\"nv\">$x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">iadd_imm</span> <span class=\"nv\">$C</span> <span class=\"nv\">$x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nv\">iadd</span> <span class=\"nv\">$x</span> <span class=\"nv\">$C</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">iadd_imm</span> <span class=\"nv\">$C</span> <span class=\"nv\">$x</span><span class=\"p\">))</span>\n</code></pre></div>\n\n\n<p>We could give peepmatic knowledge of commutativity to make it so that we only had to write one or the other in the DSL.</p>\n<p>If we did this at the automaton level, this would create extra states (but I guess we have those states anyways if we repeat the optimization definitions).</p>\n<p>If we did this at the interpreter level, this would not create extra states, but would involve extra runtime checking. It would also be incompatible with #1704</p>\n</blockquote>",
        "id": 197589914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589477372
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1706\">Issue #1706</a>:</p>\n<blockquote>\n<p>Right now, peepmatic has no knowledge of (for example) <code>iadd</code>'s commutativity, and so both of the following optimizations must be written:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nv\">iadd</span> <span class=\"nv\">$C</span> <span class=\"nv\">$x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">iadd_imm</span> <span class=\"nv\">$C</span> <span class=\"nv\">$x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nv\">iadd</span> <span class=\"nv\">$x</span> <span class=\"nv\">$C</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">iadd_imm</span> <span class=\"nv\">$C</span> <span class=\"nv\">$x</span><span class=\"p\">))</span>\n</code></pre></div>\n\n\n<p>We could give peepmatic knowledge of commutativity to make it so that we only had to write one or the other in the DSL.</p>\n<p>If we did this at the automaton level, this would create extra states (but I guess we have those states anyways if we repeat the optimization definitions).</p>\n<p>If we did this at the interpreter level, this would not create extra states, but would involve extra runtime checking. It would also be incompatible with #1704</p>\n</blockquote>",
        "id": 197589915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589477372
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1706#issuecomment-628783824\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1706\">Issue #1706</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift:area:peepmatic\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: cranelift:area:peepmatic</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 197590879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589477796
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1706#issuecomment-628847723\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1706\">Issue #1706</a>:</p>\n<blockquote>\n<p>Another option is to first have a canonicalization pass that makes sure that all constants are the first operand (for example) and then later optimization passes only need to include one version of the optimization.</p>\n</blockquote>",
        "id": 197607377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589485235
    }
]