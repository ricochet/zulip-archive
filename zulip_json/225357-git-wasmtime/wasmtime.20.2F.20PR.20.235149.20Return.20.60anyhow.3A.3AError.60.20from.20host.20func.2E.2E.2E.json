[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit refactors how errors are modeled when returned from host functions and additionally refactors how custom errors work with <code>Trap</code>. At a high level functions in Wasmtime that previously worked with <code>Result&lt;T, Trap&gt;</code> now work with <code>Result&lt;T&gt;</code> instead where the error is <code>anyhow::Error</code>. This includes functions such as:</p>\n<ul>\n<li>Host-defined functions in a <code>Linker&lt;T&gt;</code></li>\n<li><code>TypedFunc::call</code></li>\n<li>Host-related callbacks like call hooks</li>\n</ul>\n<p>Errors are now modeled primarily as <code>anyhow::Error</code> throughout Wasmtime. This subsequently removes the need for <code>Trap</code> to have the ability to represent all host-defined errors as it previously did. Consequently the <code>From</code> implementations for any error into a <code>Trap</code> have been removed here and the only embedder-defined way to create a <code>Trap</code> is to use <code>Trap::new</code> with a custom string.</p>\n<p>After this commit the distinction between a <code>Trap</code> and a host error is the wasm backtrace that it contains. Previously all errors in host functions would flow through a <code>Trap</code> and get a wasm backtrace attached to them, but now this only happens if a <code>Trap</code> itself is created meaning that arbitrary host-defined errors flowing from a host import to the other side won't get backtraces attached. Some internals of Wasmtime itself were updated or preserved to use <code>Trap::new</code> to capture a backtrace where it seemed useful, such as when fuel runs out.</p>\n<p>The main motivation for this commit is that it now enables hosts to thread a concrete error type from a host function all the way through to where a wasm function was invoked. Previously this could not be done since the host error was wrapped in a <code>Trap</code> that didn't provide the ability to get at the internals.</p>\n<p>A consequence of this commit is that when a host error is returned that isn't a <code>Trap</code> we'll capture a backtrace and then won't have a <code>Trap</code> to attach it to. To avoid losing the contextual information this commit uses the <code>Error::context</code> method to attach the backtrace as contextual information to ensure that the backtrace is itself not lost.</p>\n<p>This is a breaking change for likely all users of Wasmtime, but it's hoped to be a relatively minor change to workaround. Most use cases can likely change <code>-&gt; Result&lt;T, Trap&gt;</code> to <code>-&gt; Result&lt;T&gt;</code> and otherwise explicit creation of a <code>Trap</code> is largely no longer necessary.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 306696816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666974083
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a>.</p>",
        "id": 306696817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666974083
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>.</p>",
        "id": 307133120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667229591
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>.</p>",
        "id": 307146014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667233233
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>.</p>",
        "id": 307320588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667312078
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>.</p>",
        "id": 307370639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667325389
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149#pullrequestreview-1163822031\">PR review</a>.</p>",
        "id": 307373503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667326170
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>.</p>",
        "id": 307385898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667330129
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>.</p>",
        "id": 307386413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667330305
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit refactors how errors are modeled when returned from host functions and additionally refactors how custom errors work with <code>Trap</code>. At a high level functions in Wasmtime that previously worked with <code>Result&lt;T, Trap&gt;</code> now work with <code>Result&lt;T&gt;</code> instead where the error is <code>anyhow::Error</code>. This includes functions such as:</p>\n<ul>\n<li>Host-defined functions in a <code>Linker&lt;T&gt;</code></li>\n<li><code>TypedFunc::call</code></li>\n<li>Host-related callbacks like call hooks</li>\n</ul>\n<p>Errors are now modeled primarily as <code>anyhow::Error</code> throughout Wasmtime. This subsequently removes the need for <code>Trap</code> to have the ability to represent all host-defined errors as it previously did. Consequently the <code>From</code> implementations for any error into a <code>Trap</code> have been removed here and the only embedder-defined way to create a <code>Trap</code> is to use <code>Trap::new</code> with a custom string.</p>\n<p>After this commit the distinction between a <code>Trap</code> and a host error is the wasm backtrace that it contains. Previously all errors in host functions would flow through a <code>Trap</code> and get a wasm backtrace attached to them, but now this only happens if a <code>Trap</code> itself is created meaning that arbitrary host-defined errors flowing from a host import to the other side won't get backtraces attached. Some internals of Wasmtime itself were updated or preserved to use <code>Trap::new</code> to capture a backtrace where it seemed useful, such as when fuel runs out.</p>\n<p>The main motivation for this commit is that it now enables hosts to thread a concrete error type from a host function all the way through to where a wasm function was invoked. Previously this could not be done since the host error was wrapped in a <code>Trap</code> that didn't provide the ability to get at the internals.</p>\n<p>A consequence of this commit is that when a host error is returned that isn't a <code>Trap</code> we'll capture a backtrace and then won't have a <code>Trap</code> to attach it to. To avoid losing the contextual information this commit uses the <code>Error::context</code> method to attach the backtrace as contextual information to ensure that the backtrace is itself not lost.</p>\n<p>This is a breaking change for likely all users of Wasmtime, but it's hoped to be a relatively minor change to workaround. Most use cases can likely change <code>-&gt; Result&lt;T, Trap&gt;</code> to <code>-&gt; Result&lt;T&gt;</code> and otherwise explicit creation of a <code>Trap</code> is largely no longer necessary.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 307387173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667330561
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>:</p>\n<blockquote>\n<p>This series of commits is a large refactoring of how <code>Trap</code> works and is used in Wasmtime. Individual commits have more details but at a high-level the changes implemented here are:</p>\n<ul>\n<li>All functions in Wasmtime now work with <code>Result&lt;T&gt;</code> instead of some working with <code>Result&lt;T, Trap&gt;</code>. For example <code>TypedFunc::call</code> reutrns <code>Result&lt;T&gt;</code> now, in addition to the host-provided closure to <code>Func::wrap</code>.</li>\n<li>Instances of <code>anyhow::Error</code> are threaded around as-is, so if the host returns a specific error that error pops out the other end.</li>\n<li>The <code>Trap::i32_exit</code> function has been removed in favor of a concrete <code>wasi_common::I32Exit</code> error type</li>\n<li>The <code>Trap::new</code> function has been removed in favor of <code>anyhow::Error</code> constructors like <code>bail!</code></li>\n<li>The <code>Trap</code> type has been removed and replaced with <code>TrapCode</code>. It's now just a simple <code>enum</code></li>\n<li>Wasm backtraces are modeled through a new <code>WasmBacktrace</code> type that's attached with <code>.context(...)</code> to <code>anyhow::Error</code> errors.</li>\n</ul>\n<p>This is a large refactoring of how traps work in Wasmtime where the main goal is to pare down the responsibility of <code>Trap</code> and instead let <code>anyhow</code> do all the heavy lifting. Embedders which handle various kinds of traps various ways will need to be adjusted accordingly.</p>\n</blockquote>",
        "id": 307387776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667330768
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149#pullrequestreview-1164053492\">PR review</a>.</p>",
        "id": 307403886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667336949
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>.</p>",
        "id": 307537136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667399371
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a>.</p>",
        "id": 307537560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667399445
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a> from <code>refactor-trap</code> to <code>main</code>.</p>",
        "id": 307541840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667400566
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5149\">PR #5149</a>.</p>",
        "id": 307565990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667406573
    }
]