[
    {
        "content": "<p>whitequark opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1612\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1612\">PR #1612</a> from <code>x86_32-legalize-i64-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>I tried to run some WASI binary with wasmtime targeting i686-unknown-linux-gnu (as part of #1089) and immediately ran into a codegen crash. I believe the cause of the crash is the fact that something is emitting shifts with 64-bit value and amount (both 64-bit, in the testcase I reduced), which are not legal on x86_32. </p>\n<p>I think I managed to fix 2/3 of the problematic cases, although not in an elegant way. Let me know what you think.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Testcase&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>test compile\nset enable_simd\ntarget i686 haswell\n\nfunction u0:1(i32) -&gt; i64 system_v {\n    block1(v0: i32):\n        v1 = load.i64 notrap aligned v0+0\n        v2 = load.i32 notrap aligned v0+16\n        v3 = ishl v1, v2\n        return v3\n}\n\nfunction u0:2(i32) -&gt; i64 system_v {\n    block1(v0: i32):\n        v1 = load.i64 notrap aligned v0+0\n        v2 = load.i64 notrap aligned v0+16\n        v3 = ishl v1, v2\n        return v3\n}\n\n; this doesn&#39;t work\n;function u0:3(i32) -&gt; i32 system_v {\n;    block1(v0: i32):\n;        v1 = load.i32 notrap aligned v0+0\n;        v2 = load.i64 notrap aligned v0+16\n;        v3 = ishl v1, v2\n;        return v3\n;}\n\nfunction u0:4(i32) -&gt; i64 system_v {\n    block1(v0: i32):\n        v1 = load.i64 notrap aligned v0+0\n        v2 = load.i32 notrap aligned v0+16\n        v3 = ishl v1, v2\n        return v3\n}\n\nfunction u0:5(i32) -&gt; i64 system_v {\n    block1(v0: i32):\n        v1 = load.i64 notrap aligned v0+0\n        v2 = load.i64 notrap aligned v0+16\n        v3 = ishl v1, v2\n        return v3\n}\n\n; this doesn&#39;t work\n;function u0:6(i32) -&gt; i32 system_v {\n;    block1(v0: i32):\n;        v1 = load.i32 notrap aligned v0+0\n;        v2 = load.i64 notrap aligned v0+16\n;        v3 = ishl v1, v2\n;        return v3\n;}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 195494839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588038864
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1612#pullrequestreview-401579965\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1612#pullrequestreview-401579965\">PR Review</a>.</p>",
        "id": 195533283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588062890
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1612#pullrequestreview-401579965\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1612#pullrequestreview-401579965\">PR Review</a>.</p>",
        "id": 195533284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588062890
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1612#discussion_r416402515\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1612#discussion_r416402515\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think it's better off to have another case for <code>arg1_type == I64</code>. If <code>arg0_type != I64</code> and it's not a vector type, it ought to be I32, I16, or I8. So it would be just fine to <code>ireduce</code> arg1 to <code>I8</code> and put them through a typical <code>ishl</code> or <code>ushr</code>.</p>\n<p>Unfortunately, for the same reason your third test cases blow up, I can't write a test to exercise this at the moment.</p>\n</blockquote>",
        "id": 195533285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588062890
    },
    {
        "content": "<p>whitequark updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1612\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1612\">PR #1612</a> from <code>x86_32-legalize-i64-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>I tried to run some WASI binary with wasmtime targeting i686-unknown-linux-gnu (as part of #1089) and immediately ran into a codegen crash. I believe the cause of the crash is the fact that something is emitting shifts with 64-bit value and amount (both 64-bit, in the testcase I reduced), which are not legal on x86_32. </p>\n<p>I think I managed to fix 2/3 of the problematic cases, although not in an elegant way. Let me know what you think.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Testcase&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code>test compile\nset enable_simd\ntarget i686 haswell\n\nfunction u0:1(i32) -&gt; i64 system_v {\n    block1(v0: i32):\n        v1 = load.i64 notrap aligned v0+0\n        v2 = load.i32 notrap aligned v0+16\n        v3 = ishl v1, v2\n        return v3\n}\n\nfunction u0:2(i32) -&gt; i64 system_v {\n    block1(v0: i32):\n        v1 = load.i64 notrap aligned v0+0\n        v2 = load.i64 notrap aligned v0+16\n        v3 = ishl v1, v2\n        return v3\n}\n\n; this doesn&#39;t work\n;function u0:3(i32) -&gt; i32 system_v {\n;    block1(v0: i32):\n;        v1 = load.i32 notrap aligned v0+0\n;        v2 = load.i64 notrap aligned v0+16\n;        v3 = ishl v1, v2\n;        return v3\n;}\n\nfunction u0:4(i32) -&gt; i64 system_v {\n    block1(v0: i32):\n        v1 = load.i64 notrap aligned v0+0\n        v2 = load.i32 notrap aligned v0+16\n        v3 = ishl v1, v2\n        return v3\n}\n\nfunction u0:5(i32) -&gt; i64 system_v {\n    block1(v0: i32):\n        v1 = load.i64 notrap aligned v0+0\n        v2 = load.i64 notrap aligned v0+16\n        v3 = ishl v1, v2\n        return v3\n}\n\n; this doesn&#39;t work\n;function u0:6(i32) -&gt; i32 system_v {\n;    block1(v0: i32):\n;        v1 = load.i32 notrap aligned v0+0\n;        v2 = load.i64 notrap aligned v0+16\n;        v3 = ishl v1, v2\n;        return v3\n;}\n</code></pre></div>\n\n\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 196982664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589017049
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1612#pullrequestreview-408635917\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1612#pullrequestreview-408635917\">PR Review</a>.</p>",
        "id": 196983630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589018543
    },
    {
        "content": "<p>iximeow merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1612\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1612\">PR #1612</a>.</p>",
        "id": 196984604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589020100
    }
]