[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a> from <code>peepmatic-generic-over-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>This lets us avoid the cost of <code>cranelift_codegen::ir::Opcode</code> to<br>\n<code>peepmatic_runtime::Operator</code> conversion overhead, and paves the way for<br>\nallowing Peepmatic to support non-clif optimizations (e.g. vcode optimizations).</p>\n<p>Rather than defining our own <code>peepmatic::Operator</code> type like we used to, now the<br>\nwhole <code>peepmatic</code> crate is effectively generic over a <code>TOperator</code> type<br>\nparameter. For the Cranelift integration, we use <code>cranelift_codegen::ir::Opcode</code><br>\nas the concrete type for our <code>TOperator</code> type parameter. For testing, we also<br>\ndefine a <code>TestOperator</code> type, so that we can test Peepmatic code without<br>\nbuilding all of Cranelift, and we can keep them somewhat isolated from each<br>\nother.</p>\n<p>The methods that <code>peepmatic::Operator</code> had are now translated into trait bounds<br>\non the <code>TOperator</code> type. These traits need to be shared between all of<br>\n<code>peepmatic</code>, <code>peepmatic-runtime</code>, and <code>cranelift-codegen</code>'s Peepmatic<br>\nintegration. Therefore, these new traits live in a new crate:<br>\n<code>peepmatic-traits</code>. This crate acts as a header file of sorts for shared<br>\ntrait/type/macro definitions.</p>\n<p>Additionally, the <code>peepmatic-runtime</code> crate no longer depends on the<br>\n<code>peepmatic-macro</code> procedural macro crate, which should lead to faster build<br>\ntimes for Cranelift when it is using pre-built peephole optimizers.</p>\n</blockquote>",
        "id": 202632185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593643280
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a>.</p>",
        "id": 202632186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593643280
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a> from <code>peepmatic-generic-over-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>This lets us avoid the cost of <code>cranelift_codegen::ir::Opcode</code> to<br>\n<code>peepmatic_runtime::Operator</code> conversion overhead, and paves the way for<br>\nallowing Peepmatic to support non-clif optimizations (e.g. vcode optimizations).</p>\n<p>Rather than defining our own <code>peepmatic::Operator</code> type like we used to, now the<br>\nwhole <code>peepmatic</code> crate is effectively generic over a <code>TOperator</code> type<br>\nparameter. For the Cranelift integration, we use <code>cranelift_codegen::ir::Opcode</code><br>\nas the concrete type for our <code>TOperator</code> type parameter. For testing, we also<br>\ndefine a <code>TestOperator</code> type, so that we can test Peepmatic code without<br>\nbuilding all of Cranelift, and we can keep them somewhat isolated from each<br>\nother.</p>\n<p>The methods that <code>peepmatic::Operator</code> had are now translated into trait bounds<br>\non the <code>TOperator</code> type. These traits need to be shared between all of<br>\n<code>peepmatic</code>, <code>peepmatic-runtime</code>, and <code>cranelift-codegen</code>'s Peepmatic<br>\nintegration. Therefore, these new traits live in a new crate:<br>\n<code>peepmatic-traits</code>. This crate acts as a header file of sorts for shared<br>\ntrait/type/macro definitions.</p>\n<p>Additionally, the <code>peepmatic-runtime</code> crate no longer depends on the<br>\n<code>peepmatic-macro</code> procedural macro crate, which should lead to faster build<br>\ntimes for Cranelift when it is using pre-built peephole optimizers.</p>\n</blockquote>",
        "id": 202632430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593643455
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a> from <code>peepmatic-generic-over-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>This lets us avoid the cost of <code>cranelift_codegen::ir::Opcode</code> to<br>\n<code>peepmatic_runtime::Operator</code> conversion overhead, and paves the way for<br>\nallowing Peepmatic to support non-clif optimizations (e.g. vcode optimizations).</p>\n<p>Rather than defining our own <code>peepmatic::Operator</code> type like we used to, now the<br>\nwhole <code>peepmatic</code> crate is effectively generic over a <code>TOperator</code> type<br>\nparameter. For the Cranelift integration, we use <code>cranelift_codegen::ir::Opcode</code><br>\nas the concrete type for our <code>TOperator</code> type parameter. For testing, we also<br>\ndefine a <code>TestOperator</code> type, so that we can test Peepmatic code without<br>\nbuilding all of Cranelift, and we can keep them somewhat isolated from each<br>\nother.</p>\n<p>The methods that <code>peepmatic::Operator</code> had are now translated into trait bounds<br>\non the <code>TOperator</code> type. These traits need to be shared between all of<br>\n<code>peepmatic</code>, <code>peepmatic-runtime</code>, and <code>cranelift-codegen</code>'s Peepmatic<br>\nintegration. Therefore, these new traits live in a new crate:<br>\n<code>peepmatic-traits</code>. This crate acts as a header file of sorts for shared<br>\ntrait/type/macro definitions.</p>\n<p>Additionally, the <code>peepmatic-runtime</code> crate no longer depends on the<br>\n<code>peepmatic-macro</code> procedural macro crate, which should lead to faster build<br>\ntimes for Cranelift when it is using pre-built peephole optimizers.</p>\n</blockquote>",
        "id": 202636466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593647011
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960#pullrequestreview-450906293\">PR Review</a>.</p>",
        "id": 204249202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595014553
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960#discussion_r456633671\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should this dependency also have <code>optional = true</code>, so that it isn't pulled in if peepmatic isn't enabled?</p>\n</blockquote>",
        "id": 204249203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595014553
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960#pullrequestreview-450906293\">PR Review</a>.</p>",
        "id": 204249204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595014553
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960#pullrequestreview-450957054\">PR Review</a>.</p>",
        "id": 204258990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595019917
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960#discussion_r456674038\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good catch!</p>\n</blockquote>",
        "id": 204258991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595019917
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a> from <code>peepmatic-generic-over-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>This lets us avoid the cost of <code>cranelift_codegen::ir::Opcode</code> to<br>\n<code>peepmatic_runtime::Operator</code> conversion overhead, and paves the way for<br>\nallowing Peepmatic to support non-clif optimizations (e.g. vcode optimizations).</p>\n<p>Rather than defining our own <code>peepmatic::Operator</code> type like we used to, now the<br>\nwhole <code>peepmatic</code> crate is effectively generic over a <code>TOperator</code> type<br>\nparameter. For the Cranelift integration, we use <code>cranelift_codegen::ir::Opcode</code><br>\nas the concrete type for our <code>TOperator</code> type parameter. For testing, we also<br>\ndefine a <code>TestOperator</code> type, so that we can test Peepmatic code without<br>\nbuilding all of Cranelift, and we can keep them somewhat isolated from each<br>\nother.</p>\n<p>The methods that <code>peepmatic::Operator</code> had are now translated into trait bounds<br>\non the <code>TOperator</code> type. These traits need to be shared between all of<br>\n<code>peepmatic</code>, <code>peepmatic-runtime</code>, and <code>cranelift-codegen</code>'s Peepmatic<br>\nintegration. Therefore, these new traits live in a new crate:<br>\n<code>peepmatic-traits</code>. This crate acts as a header file of sorts for shared<br>\ntrait/type/macro definitions.</p>\n<p>Additionally, the <code>peepmatic-runtime</code> crate no longer depends on the<br>\n<code>peepmatic-macro</code> procedural macro crate, which should lead to faster build<br>\ntimes for Cranelift when it is using pre-built peephole optimizers.</p>\n</blockquote>",
        "id": 204261877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595021408
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a> from <code>peepmatic-generic-over-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>This lets us avoid the cost of <code>cranelift_codegen::ir::Opcode</code> to<br>\n<code>peepmatic_runtime::Operator</code> conversion overhead, and paves the way for<br>\nallowing Peepmatic to support non-clif optimizations (e.g. vcode optimizations).</p>\n<p>Rather than defining our own <code>peepmatic::Operator</code> type like we used to, now the<br>\nwhole <code>peepmatic</code> crate is effectively generic over a <code>TOperator</code> type<br>\nparameter. For the Cranelift integration, we use <code>cranelift_codegen::ir::Opcode</code><br>\nas the concrete type for our <code>TOperator</code> type parameter. For testing, we also<br>\ndefine a <code>TestOperator</code> type, so that we can test Peepmatic code without<br>\nbuilding all of Cranelift, and we can keep them somewhat isolated from each<br>\nother.</p>\n<p>The methods that <code>peepmatic::Operator</code> had are now translated into trait bounds<br>\non the <code>TOperator</code> type. These traits need to be shared between all of<br>\n<code>peepmatic</code>, <code>peepmatic-runtime</code>, and <code>cranelift-codegen</code>'s Peepmatic<br>\nintegration. Therefore, these new traits live in a new crate:<br>\n<code>peepmatic-traits</code>. This crate acts as a header file of sorts for shared<br>\ntrait/type/macro definitions.</p>\n<p>Additionally, the <code>peepmatic-runtime</code> crate no longer depends on the<br>\n<code>peepmatic-macro</code> procedural macro crate, which should lead to faster build<br>\ntimes for Cranelift when it is using pre-built peephole optimizers.</p>\n</blockquote>",
        "id": 204262045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595021522
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a> from <code>peepmatic-generic-over-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>This lets us avoid the cost of <code>cranelift_codegen::ir::Opcode</code> to<br>\n<code>peepmatic_runtime::Operator</code> conversion overhead, and paves the way for<br>\nallowing Peepmatic to support non-clif optimizations (e.g. vcode optimizations).</p>\n<p>Rather than defining our own <code>peepmatic::Operator</code> type like we used to, now the<br>\nwhole <code>peepmatic</code> crate is effectively generic over a <code>TOperator</code> type<br>\nparameter. For the Cranelift integration, we use <code>cranelift_codegen::ir::Opcode</code><br>\nas the concrete type for our <code>TOperator</code> type parameter. For testing, we also<br>\ndefine a <code>TestOperator</code> type, so that we can test Peepmatic code without<br>\nbuilding all of Cranelift, and we can keep them somewhat isolated from each<br>\nother.</p>\n<p>The methods that <code>peepmatic::Operator</code> had are now translated into trait bounds<br>\non the <code>TOperator</code> type. These traits need to be shared between all of<br>\n<code>peepmatic</code>, <code>peepmatic-runtime</code>, and <code>cranelift-codegen</code>'s Peepmatic<br>\nintegration. Therefore, these new traits live in a new crate:<br>\n<code>peepmatic-traits</code>. This crate acts as a header file of sorts for shared<br>\ntrait/type/macro definitions.</p>\n<p>Additionally, the <code>peepmatic-runtime</code> crate no longer depends on the<br>\n<code>peepmatic-macro</code> procedural macro crate, which should lead to faster build<br>\ntimes for Cranelift when it is using pre-built peephole optimizers.</p>\n</blockquote>",
        "id": 204263020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595022075
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a> from <code>peepmatic-generic-over-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>This lets us avoid the cost of <code>cranelift_codegen::ir::Opcode</code> to<br>\n<code>peepmatic_runtime::Operator</code> conversion overhead, and paves the way for<br>\nallowing Peepmatic to support non-clif optimizations (e.g. vcode optimizations).</p>\n<p>Rather than defining our own <code>peepmatic::Operator</code> type like we used to, now the<br>\nwhole <code>peepmatic</code> crate is effectively generic over a <code>TOperator</code> type<br>\nparameter. For the Cranelift integration, we use <code>cranelift_codegen::ir::Opcode</code><br>\nas the concrete type for our <code>TOperator</code> type parameter. For testing, we also<br>\ndefine a <code>TestOperator</code> type, so that we can test Peepmatic code without<br>\nbuilding all of Cranelift, and we can keep them somewhat isolated from each<br>\nother.</p>\n<p>The methods that <code>peepmatic::Operator</code> had are now translated into trait bounds<br>\non the <code>TOperator</code> type. These traits need to be shared between all of<br>\n<code>peepmatic</code>, <code>peepmatic-runtime</code>, and <code>cranelift-codegen</code>'s Peepmatic<br>\nintegration. Therefore, these new traits live in a new crate:<br>\n<code>peepmatic-traits</code>. This crate acts as a header file of sorts for shared<br>\ntrait/type/macro definitions.</p>\n<p>Additionally, the <code>peepmatic-runtime</code> crate no longer depends on the<br>\n<code>peepmatic-macro</code> procedural macro crate, which should lead to faster build<br>\ntimes for Cranelift when it is using pre-built peephole optimizers.</p>\n</blockquote>",
        "id": 204264020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595022739
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a> from <code>peepmatic-generic-over-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>This lets us avoid the cost of <code>cranelift_codegen::ir::Opcode</code> to<br>\n<code>peepmatic_runtime::Operator</code> conversion overhead, and paves the way for<br>\nallowing Peepmatic to support non-clif optimizations (e.g. vcode optimizations).</p>\n<p>Rather than defining our own <code>peepmatic::Operator</code> type like we used to, now the<br>\nwhole <code>peepmatic</code> crate is effectively generic over a <code>TOperator</code> type<br>\nparameter. For the Cranelift integration, we use <code>cranelift_codegen::ir::Opcode</code><br>\nas the concrete type for our <code>TOperator</code> type parameter. For testing, we also<br>\ndefine a <code>TestOperator</code> type, so that we can test Peepmatic code without<br>\nbuilding all of Cranelift, and we can keep them somewhat isolated from each<br>\nother.</p>\n<p>The methods that <code>peepmatic::Operator</code> had are now translated into trait bounds<br>\non the <code>TOperator</code> type. These traits need to be shared between all of<br>\n<code>peepmatic</code>, <code>peepmatic-runtime</code>, and <code>cranelift-codegen</code>'s Peepmatic<br>\nintegration. Therefore, these new traits live in a new crate:<br>\n<code>peepmatic-traits</code>. This crate acts as a header file of sorts for shared<br>\ntrait/type/macro definitions.</p>\n<p>Additionally, the <code>peepmatic-runtime</code> crate no longer depends on the<br>\n<code>peepmatic-macro</code> procedural macro crate, which should lead to faster build<br>\ntimes for Cranelift when it is using pre-built peephole optimizers.</p>\n</blockquote>",
        "id": 204265814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595024064
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a> from <code>peepmatic-generic-over-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>This lets us avoid the cost of <code>cranelift_codegen::ir::Opcode</code> to<br>\n<code>peepmatic_runtime::Operator</code> conversion overhead, and paves the way for<br>\nallowing Peepmatic to support non-clif optimizations (e.g. vcode optimizations).</p>\n<p>Rather than defining our own <code>peepmatic::Operator</code> type like we used to, now the<br>\nwhole <code>peepmatic</code> crate is effectively generic over a <code>TOperator</code> type<br>\nparameter. For the Cranelift integration, we use <code>cranelift_codegen::ir::Opcode</code><br>\nas the concrete type for our <code>TOperator</code> type parameter. For testing, we also<br>\ndefine a <code>TestOperator</code> type, so that we can test Peepmatic code without<br>\nbuilding all of Cranelift, and we can keep them somewhat isolated from each<br>\nother.</p>\n<p>The methods that <code>peepmatic::Operator</code> had are now translated into trait bounds<br>\non the <code>TOperator</code> type. These traits need to be shared between all of<br>\n<code>peepmatic</code>, <code>peepmatic-runtime</code>, and <code>cranelift-codegen</code>'s Peepmatic<br>\nintegration. Therefore, these new traits live in a new crate:<br>\n<code>peepmatic-traits</code>. This crate acts as a header file of sorts for shared<br>\ntrait/type/macro definitions.</p>\n<p>Additionally, the <code>peepmatic-runtime</code> crate no longer depends on the<br>\n<code>peepmatic-macro</code> procedural macro crate, which should lead to faster build<br>\ntimes for Cranelift when it is using pre-built peephole optimizers.</p>\n</blockquote>",
        "id": 204270184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595027817
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1960\">PR #1960</a>.</p>",
        "id": 204273120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595030756
    }
]