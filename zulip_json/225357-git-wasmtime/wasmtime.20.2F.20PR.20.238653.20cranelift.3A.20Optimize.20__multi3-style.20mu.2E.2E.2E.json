[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a> from <code>jameysharp:opt-multi3</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>LLVM's <code>__multi3</code> function works by splitting a wide multiplication into several narrower ones. This optimization recognizes the algebraic identities involved and merges them back into the original wide multiply.</p>\n<p>This is not yet done but illustrates how part of the optimization can work, at least.</p>\n<p>Currently, the lower half of the result is optimized into a single <code>imul</code> instruction, but most of the intermediate values that are optimized away there are still used in computing the upper half, so elaboration brings them back later.</p>\n<p>Fixes #4077</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 439467351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716153477
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2119455801\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 439475767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716162275
    },
    {
        "content": "<p>scottmcm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2123833568\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<p>I don't know if it'd help at all, but cc <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719/files#diff-2041f67049d5ac3d8f62ea91d3cb45cdb8608d5f5cdab988731ae2addf90ef01\">https://github.com/bytecodealliance/wasmtime/pull/7719/files#diff-2041f67049d5ac3d8f62ea91d3cb45cdb8608d5f5cdab988731ae2addf90ef01</a> which will convert larger <code>mul</code>s back to smaller <code>mul</code>s and <code>mulhi</code>s.  So I think if you can recognize the open-coded multiplication and turn it into a larger cranelift multiplication, the rest might just work.</p>\n</blockquote>",
        "id": 439954295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716351286
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2123981463\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't know if it'd help at all, but cc <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719/files#diff-2041f67049d5ac3d8f62ea91d3cb45cdb8608d5f5cdab988731ae2addf90ef01\">https://github.com/bytecodealliance/wasmtime/pull/7719/files#diff-2041f67049d5ac3d8f62ea91d3cb45cdb8608d5f5cdab988731ae2addf90ef01</a> which will convert larger <code>mul</code>s back to smaller <code>mul</code>s and <code>mulhi</code>s. So I think if you can recognize the open-coded multiplication and turn it into a larger cranelift multiplication, the rest might just work.</p>\n</blockquote>\n<p>Yeah, this definitely felt similar to that, so I placed my new rules next to those <code>mulhi</code> rules. I don't see a way to simplify these rules in terms of those, though. The hard part is recognizing that four multiplies, two adds with overflow checks, and some other instructions, all together are equivalent to a single <code>mulhi</code>. I suspect that by the time we can recognize all those pieces, it's easier to just emit the <code>umulhi</code> instruction than it is to emit a couple <code>uextend</code>s, an <code>imul</code>, and an <code>ireduce</code>. But if you can see a way to do it more simply I'd love that!</p>\n<p>Thinking about this comment, though, led me to realize that once we can do that, ISLE is capable enough today to transform a sequence like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">umulhi</span><span class=\"w\"> </span><span class=\"n\">a_lo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lo</span>\n<span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">a_lo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_hi</span>\n<span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">a_hi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lo</span>\n<span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">a_hi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_hi</span>\n<span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span>\n</code></pre></div>\n<p>into something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconcat</span><span class=\"w\"> </span><span class=\"n\">a_hi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a_lo</span>\n<span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconcat</span><span class=\"w\"> </span><span class=\"n\">b_hi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lo</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ushr</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n<span class=\"n\">ireduce</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div>\n<p>If our mid-end rules supported producing instructions with multiple results, the <code>ushr</code>/<code>ireduce</code> pair would be better as <code>isplit</code>, since <code>isplit</code> and <code>iconcat</code> produce no instructions for 128-bit values.</p>\n<p>On x86 at least, an <code>imul.i128</code> currently lowers to roughly the first sequence above so I'm not sure this is an improvement, but I hadn't previously been sure it was even possible.</p>\n</blockquote>",
        "id": 440024705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716359794
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2124167359\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<blockquote>\n<p>On x86 at least, an imul.i128 currently lowers to roughly the first sequence above so I'm not sure this is an improvement, but I hadn't previously been sure it was even possible.</p>\n</blockquote>\n<p>It might not be an improvement by itself, but if we recognize some other i128 ops we can probably start applying some optimization rules at the i128 level which would be really neat. For example, we could now recognize <code>(imul.i128 x (iconst 2))</code> and turn it into a <code>(iadd.i128 x x)</code> which would be hard to do with the other sequences.</p>\n</blockquote>",
        "id": 440039983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716366070
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2125096795\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<p>Good point! Except we currently can't deal with 128-bit constants, so rules like <code>imul x, 2</code> won't actually fire. We should figure out how to fix that too <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>The other thing we can't currently do is notice that this sequence has a redundant multiply:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconcat</span><span class=\"w\"> </span><span class=\"n\">a_hi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a_lo</span>\n<span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconcat</span><span class=\"w\"> </span><span class=\"n\">b_hi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lo</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">a_lo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_lo</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 440121130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716391961
    },
    {
        "content": "<p>scottmcm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2125101745\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<p>Since there's no 128-bit <code>iconst</code> it's <code>imul.i128 x (uextend i128 (iconst 2))</code>, but with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7693/files#diff-2041f67049d5ac3d8f62ea91d3cb45cdb8608d5f5cdab988731ae2addf90ef01R92\">https://github.com/bytecodealliance/wasmtime/pull/7693/files#diff-2041f67049d5ac3d8f62ea91d3cb45cdb8608d5f5cdab988731ae2addf90ef01R92</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670/files#diff-bf1f1ea991da38588a1785fc7012072e7a685411ea6a262c1fab18379411ef50R94\">https://github.com/bytecodealliance/wasmtime/pull/7670/files#diff-bf1f1ea991da38588a1785fc7012072e7a685411ea6a262c1fab18379411ef50R94</a> hopefully it'll already work <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> </p>\n</blockquote>",
        "id": 440121585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716392105
    },
    {
        "content": "<p>scottmcm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2125101745\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<p>Since there's no 128-bit <code>iconst</code> it's <code>imul.i128 x (uextend i128 (iconst 2))</code>, but with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7693/files#diff-2041f67049d5ac3d8f62ea91d3cb45cdb8608d5f5cdab988731ae2addf90ef01R92\">https://github.com/bytecodealliance/wasmtime/pull/7693/files#diff-2041f67049d5ac3d8f62ea91d3cb45cdb8608d5f5cdab988731ae2addf90ef01R92</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670/files#diff-bf1f1ea991da38588a1785fc7012072e7a685411ea6a262c1fab18379411ef50R94\">https://github.com/bytecodealliance/wasmtime/pull/7670/files#diff-bf1f1ea991da38588a1785fc7012072e7a685411ea6a262c1fab18379411ef50R94</a> hopefully it actually already works <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> </p>\n</blockquote>",
        "id": 440135290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716395938
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2125435660\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<blockquote>\n<p>Since there's no 128-bit <code>iconst</code> it's <code>imul.i128 x (uextend i128 (iconst 2))</code>, but with ... hopefully it'll already work <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>\n</blockquote>\n<p>Ooh, I hadn't looked at those carefully. That's awesome that <code>iconst_u</code> special cases i128! However I see that it doesn't do that for the extractor, only the constructor. Right now it would need an external extractor to match an optional <code>uextend</code>, which is yet more motivation for something like or-patterns (#6128 or #8599).</p>\n</blockquote>",
        "id": 440151372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716400828
    },
    {
        "content": "<p>scottmcm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2125453440\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<p>For extend we don't need to wait on <code>or</code> patterns, because it could use</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f1fe2afffa9430b4a7765459a462cb32a4d81de8/cranelift/codegen/src/prelude_opt.isle#L113-L116\">https://github.com/bytecodealliance/wasmtime/blob/f1fe2afffa9430b4a7765459a462cb32a4d81de8/cranelift/codegen/src/prelude_opt.isle#L113-L116</a></p>\n<p>which is a special extractor added in #7710 for exactly the \"there might be an <code>extend</code>\" problem :)</p>\n<p>(Though I'd love to have or patterns to stop needing custom extractors for things like this!)</p>\n</blockquote>",
        "id": 440153338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716401475
    },
    {
        "content": "<p>scottmcm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2125453440\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<p>For extend we don't need to wait on <code>or</code> patterns, because it could use</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f1fe2afffa9430b4a7765459a462cb32a4d81de8/cranelift/codegen/src/prelude_opt.isle#L113-L116\">https://github.com/bytecodealliance/wasmtime/blob/f1fe2afffa9430b4a7765459a462cb32a4d81de8/cranelift/codegen/src/prelude_opt.isle#L113-L116</a></p>\n<p>which is a special extractor added in #7710 for exactly the \"there might be an <code>extend</code>\" problem :)</p>\n<p>(Though I'd love to have or patterns to stop needing custom extractors for things like this!)</p>\n<p>EDIT: landed in #8686</p>\n</blockquote>",
        "id": 440345441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716477451
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>.</p>",
        "id": 490237787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734732749
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653#issuecomment-2557783623\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">PR #8653</a>:</p>\n<blockquote>\n<p>This is a relatively old PR at this point and with the <a href=\"https://github.com/WebAssembly/wide-arithmetic/\">wasm wide-arithmetic proposal</a> in the works that should in theory supplant the need for this in the long-term. If folks are interested in pushing on this in the nearer-term though I'm happy to reopen.</p>\n</blockquote>",
        "id": 490237789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734732750
    }
]