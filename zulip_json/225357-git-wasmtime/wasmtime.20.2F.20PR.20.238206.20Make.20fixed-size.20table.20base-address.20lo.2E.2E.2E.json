[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a> from <code>jameysharp:table-base-readonly</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Fixes #8200 </p>\n<p>I'd appreciate careful review of my claim that the table base-address won't change as long as the table declaration has a fixed size. If I'm wrong about that then this change isn't safe.</p>\n</blockquote>",
        "id": 428157664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711035096
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>.</p>",
        "id": 428157665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711035096
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>.</p>",
        "id": 428157667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711035097
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#pullrequestreview-1952677211\">PR review</a>:</p>\n<blockquote>\n<p>I believe this is correct, yes. Can you add an assertion <a href=\"https://github.com/bytecodealliance/wasmtime/blob/082acb4e29934af9b79e709535966fd4331d7019/crates/runtime/src/table.rs#L397-L398\">here</a> with a comment indicating why it's important to preserve the base pointer? That's I believe the only possible method where a table can change its base pointer, so having a comment there referencing this optimization I think would also be good.</p>\n</blockquote>",
        "id": 428163803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711036770
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#issuecomment-2013697396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>:</p>\n<blockquote>\n<p>Note that it is theoretically possible for the base pointer to remain constant even while supporting growth, if we are just growing within one large pre-allocated or pre-reserved virtual memory region. It may or may not be worth adding support for this subtlety to <code>cranelift-wasm</code>.</p>\n</blockquote>",
        "id": 428214410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711053832
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#issuecomment-2013697396\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>:</p>\n<blockquote>\n<p>Note that it is theoretically possible for the base pointer to remain constant even while supporting growth, if we are just growing within one large pre-allocated or pre-reserved memory region. It may or may not be worth adding support for this subtlety to <code>cranelift-wasm</code>.</p>\n</blockquote>",
        "id": 428214487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711053851
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#issuecomment-2013939517\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>:</p>\n<blockquote>\n<p>Yeah, Nick, when I looked at the code Alex pointed at, I noticed that it looks like the pooling allocator never resizes the backing store for tables. So maybe we can thread that information through?</p>\n<p>The decision of whether to use the <code>readonly</code> flag or not is in the wasmtime-cranelift crate so it's not a big deal to rely on Wasmtime internal details in making that decision. I haven't dug into how well connected those parts are though.</p>\n</blockquote>",
        "id": 428226755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711059169
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#issuecomment-2014069871\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>:</p>\n<blockquote>\n<p>What you're describing is I believe one property of \"static\" vs \"dynamic\" memories, namely that static memories never change their base pointer but dynamic memories are allowed. There's lots of knobs for that in Wasmtime but the problem here is we'd have to be able to classify static/dynamic at compile time and then make sure it matches the settings at runtime. Currently the pooling allocator isn't consulted at compile time, only runtime, so pooling-vs-not wouldn't be suitable for this optimization.</p>\n<p>We could of course, though, add more flags and more config options like memories but for tables to control this.</p>\n</blockquote>",
        "id": 428237454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711065618
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#issuecomment-2015156108\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>:</p>\n<blockquote>\n<p>Yep, I think that's something we may want to do in the long term.</p>\n</blockquote>",
        "id": 428334127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711115535
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#issuecomment-2015715974\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>:</p>\n<blockquote>\n<p>Oh right, causality goes the wrong way here. I do like the idea of eventually adding a compile-time option for \"no table backing-store resizes\" that lets us set the <code>readonly</code> flag even for tables which might grow, and then turning <code>table.grow</code> requests that overflow the backing store into runtime errors.</p>\n<p>Until we do that, though: Alex, I'm not sure what assertion I can add at that call to <code>Vec::resize</code>. I'm happy to add comments. But in the case where this PR requires non-moving backing stores, the <code>resize</code> call is guarded immediately above by checking that the new size does not exceed <code>self.maximum()</code>. So the only way it's reachable is if this function is called with a size <code>delta</code> of zero, and I think in that case it would be better to return earlier and always succeed.</p>\n<p>What would you suggest doing there?</p>\n</blockquote>",
        "id": 428391653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711133518
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#issuecomment-2015772726\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>:</p>\n<blockquote>\n<p>Hm no you're right, I was assuming we had more context there than we actually do. I was envisioning an assert along the lines of \"assert the type doesn't have max == Some(min)\" but that can't be done.</p>\n<p>In lieu of that I think it's ok to leave a comment on the check for max and say that this is needed by the spec but also for soundness in cranelift to enable this optimization. It's a bit redundant but it does seem good to have a mention of this optimization somewhere in <code>grow</code></p>\n</blockquote>",
        "id": 428396732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711135729
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>.</p>",
        "id": 429535684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711414370
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#issuecomment-2019195720\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>:</p>\n<blockquote>\n<p>Okay, I've added stuff to the <code>grow</code> method in wasmtime-runtime. Would you give that part another look? I also rebased for other changes that have landed meanwhile.</p>\n</blockquote>",
        "id": 429535801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711414451
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206#pullrequestreview-1959122989\">PR review</a>.</p>",
        "id": 429538593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711416646
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8206\">PR #8206</a>.</p>",
        "id": 429541026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711418230
    }
]