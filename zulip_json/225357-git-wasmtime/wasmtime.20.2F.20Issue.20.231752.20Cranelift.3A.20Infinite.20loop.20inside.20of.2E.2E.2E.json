[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752\">Issue #1752</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>test compile\nset is_pic\ntarget x86_64-pc-windows-gnu\n\nfunction u0:43(i64, i64, i64) windows_fastcall {\n; symbol _ZN61_$LT$core..num..NonZeroU128$u20$as$u20$core..str..FromStr$GT$8from_str17hc6d5a93f1d348c98E\n; instance Instance { def: Item(DefId(0:11611 ~ core[5f76]::num[0]::{{impl}}[292]::from_str[0])), substs: [] }\n; sig ([&amp;str]; c_variadic: false)-&gt;result::Result&lt;num::NonZeroU128, num::ParseIntError&gt;\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      = v0       ByRef { sized: true }                result::Result&lt;num::NonZeroU128, num::ParseIntError&gt;\n; arg   _1      = v1, v2   ByValPair(types::I64, types::I64)    &amp;str\n\n; kind  local ty                              size align (abi,pref)\n; stack _1    &amp;str                             16b 8, 8              storage=ss0\n; stack _2    option::Option&lt;num::NonZeroU128&gt;   16b 8, 8              storage=ss1\n; ssa   _3    u128                             16b 8, 8\n; stack _4    result::Result&lt;u128, num::ParseIntError&gt;   24b 8, 8              storage=ss2\n; stack _5    result::Result&lt;u128, num::ParseIntError&gt;   24b 8, 8              storage=ss3\n; stack _6    &amp;str                             16b 8, 8              storage=ss4\n; ssa   _7    isize                             8b 8, 8\n; stack _8    num::ParseIntError                1b 1, 8              storage=ss5\n; stack _9    num::ParseIntError                1b 1, 8              storage=ss6\n; stack _10   num::ParseIntError                1b 1, 8              storage=ss7\n; ssa   _11   u128                             16b 8, 8\n; stack _12   num::ParseIntError                1b 1, 8              storage=ss8\n\n    ss0 = explicit_slot 16\n    ss1 = explicit_slot 16\n    ss2 = explicit_slot 24\n    ss3 = explicit_slot 24\n    ss4 = explicit_slot 16\n    ss5 = explicit_slot 1\n    ss6 = explicit_slot 1\n    ss7 = explicit_slot 1\n    ss8 = explicit_slot 1\n    gv0 = symbol colocated u1:22 ; trap at Instance { def: Item(DefId(0:11611 ~ core[5f76]::num[0]::{{impl}}[292]::from_str[0])), substs: [] } (_ZN61_$LT$core..num..NonZeroU128$u20$as$u20$core..str..FromStr$GT$8from_str17hc6d5a93f1d348c98E): [corruption] Hit unreachable code.\n    gv1 = symbol colocated u1:23 ; alloc32624\n    sig0 = (i64, i64, i64, i32) windows_fastcall\n    sig1 = (i64, i64) windows_fastcall\n    sig2 = (i128) -&gt; i128 windows_fastcall\n    sig3 = (i64) -&gt; i32 windows_fastcall\n    sig4 = (i8) -&gt; i8 windows_fastcall\n    sig5 = (i64, i8) windows_fastcall\n    sig6 = (i64, i128, i8) windows_fastcall\n    fn0 = u0:283 sig0 ; Instance { def: Item(DefId(0:677 ~ core[5f76]::num[0]::from_str_radix[0])), substs: [u128] }\n    fn1 = u0:284 sig1 ; Instance { def: Item(DefId(0:5800 ~ core[5f76]::result[0]::{{impl}}[36]::into_result[0])), substs: [u128, num::ParseIntError] }\n    fn2 = colocated u0:17 sig2 ; Instance { def: Item(DefId(0:11011 ~ core[5f76]::num[0]::{{impl}}[52]::new[0])), substs: [] }\n    fn3 = u0:263 sig3 ; puts\n    fn4 = u0:268 sig4 ; Instance { def: Item(DefId(0:1846 ~ core[5f76]::convert[0]::{{impl}}[4]::from[0])), substs: [num::ParseIntError] }\n    fn5 = u0:285 sig5 ; Instance { def: Item(DefId(0:5802 ~ core[5f76]::result[0]::{{impl}}[36]::from_error[0])), substs: [num::NonZeroU128, num::ParseIntError] }\n    fn6 = u0:286 sig6 ; Instance { def: Item(DefId(0:5279 ~ core[5f76]::option[0]::{{impl}}[0]::ok_or[0])), substs: [num::NonZeroU128, num::ParseIntError] }\n    jt0 = jump_table [block4, block6]\n\n                                block0(v0: i64, v1: i64, v2: i64):\n                                    nop\n; write_cvalue: Addr(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &amp;str &lt;- ByValPair(v1, v2): &amp;str\n                                    stack_store v1, ss0\n                                    stack_store v2, ss0+8\n                                    jump block1\n\n                                block1:\n                                    nop\n; write_cvalue: Addr(Pointer { base: Stack(ss4), offset: Offset32(0) }, None): &amp;str &lt;- ByRef(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &amp;str\n@0004                               v3 = stack_load.i64 ss0\n@0004                               v4 = stack_load.i64 ss0+8\n@0004                               stack_store v3, ss4\n@0004                               stack_store v4, ss4+8\n;\n; _5 = const num::from_str_radix::&lt;u128&gt;(move _6, const 10u32)\n@0003                               v5 = iconst.i32 10\n@0003                               v6 = stack_load.i64 ss4\n@0003                               v7 = stack_load.i64 ss4+8\n@0003                               v8 = stack_addr.i64 ss3\n@0003                               call fn0(v8, v6, v7, v5)\n@0003                               jump block2\n\n                                block2:\n@0003                               nop\n;\n; _4 = const &lt;result::Result&lt;u128, num::ParseIntError&gt; as ops::r#try::Try&gt;::into_result(move _5)\n@0002                               v9 = stack_addr.i64 ss3\n@0002                               v10 = stack_addr.i64 ss2\n@0002                               call fn1(v10, v9)\n@0002                               jump block3\n\n                                block3:\n@0002                               nop\n@0007                               v11 = stack_load.i8 ss2\n@0007                               v12 = uextend.i64 v11\n; write_cvalue: Var(_7): isize &lt;- ByVal(v12): isize\n;\n; switchInt(move _7)\n@0007                               jump block12\n\n                                block12:\n@0007                               br_table.i64 v12, block5, jt0\n\n                                block4:\n@0007                               nop\n; write_cvalue: Var(_11): u128 &lt;- ByRef(Pointer { base: Stack(ss2), offset: Offset32(8) }, None): u128\n@0001                               v13 = stack_addr.i64 ss2\n@0001                               v14 = load.i128 v13+8\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v14): u128\n;\n; _2 = const num::NonZeroU128::new(move _3)\n@0000                               v15 = call fn2(v14)\n; write_cvalue: Addr(Pointer { base: Stack(ss1), offset: Offset32(0) }, None): option::Option&lt;num::NonZeroU128&gt; &lt;- ByVal(v15): option::Option&lt;num::NonZeroU128&gt;\n@0000                               v16 = stack_addr.i64 ss1\n@0000                               store v15, v16\n@0000                               jump block9\n\n                                block5:\n@0000                               nop\n;\n; unreachable\n@0002                               v17 = global_value.i64 gv0\n@0002                               v18 = call fn3(v17)\n@0002                               trap unreachable\n\n                                block6:\n@0002                               nop\n; write_cvalue: Addr(Pointer { base: Stack(ss5), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Stack(ss2), offset: Offset32(1) }, None): num::ParseIntError\n@0007                               v19 = stack_load.i8 ss2+1\n@0007                               stack_store v19, ss5\n; write_cvalue: Addr(Pointer { base: Stack(ss7), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Stack(ss5), offset: Offset32(0) }, None): num::ParseIntError\n@000a                               v20 = stack_load.i8 ss5\n@000a                               stack_store v20, ss7\n;\n; _9 = const &lt;num::ParseIntError as convert::From&lt;num::ParseIntError&gt;&gt;::from(move _10)\n@000a                               v21 = stack_load.i8 ss7\n@000a                               v22 = call fn4(v21)\n; write_cvalue: Addr(Pointer { base: Stack(ss6), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByVal(v22): num::ParseIntError\n@000a                               stack_store v22, ss6\n@000a                               jump block7\n\n                                block7:\n@000a                               nop\n;\n; _0 = const &lt;result::Result&lt;num::NonZeroU128, num::ParseIntError&gt; as ops::r#try::Try&gt;::from_error(move _9)\n@000a                               v23 = stack_load.i8 ss6\n@000a                               call fn5(v0, v23)\n@000a                               jump block8\n\n                                block8:\n@000a                               nop\n;\n; goto\n@000e                               return\n\n                                block9:\n@000e                               nop\n@000f                               v24 = global_value.i64 gv1\n; write_cvalue: Addr(Pointer { base: Stack(ss8), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Addr(v24), offset: Offset32(0) }, None): num::ParseIntError\n@000f                               v25 = load.i8 v24\n@000f                               stack_store v25, ss8\n;\n; _0 = const option::Option::&lt;num::NonZeroU128&gt;::ok_or::&lt;num::ParseIntError&gt;(move _2, move _12)\n@0010                               v26 = stack_addr.i64 ss1\n@0010                               v27 = load.i128 v26\n@0010                               v28 = stack_load.i8 ss8\n@0010                               call fn6(v0, v27, v28)\n@0010                               jump block10\n\n                                block10:\n@0010                               nop\n;\n; goto\n@000e                               return\n\n                                block11:\n@000e                               nop\n;\n; return\n@000e                               return\n}\n</code></pre></div>\n\n\n<p>Backtrace (for release build)</p>\n<div class=\"codehilite\"><pre><span></span><code>#0  0x00005555557f5efb in cranelift_codegen::ir::layout::Layout::renumber_insts ()\n#1  0x00005555557f5719 in cranelift_codegen::ir::layout::Layout::assign_inst_seq ()\n#2  0x000055555578eb39 in &lt;&amp;mut cranelift_codegen::cursor::FuncCursor as cranelift_codegen::ir::builder::InstInserterBase&gt;::insert_built_inst ()\n#3  0x000055555579b468 in cranelift_codege\n[message truncated]\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198680955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590421136
    },
    {
        "content": "<p>bjorn3 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752\">Issue #1752</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>test compile\nset is_pic\ntarget x86_64-pc-windows-gnu\n\nfunction u0:43(i64, i64, i64) windows_fastcall {\n; symbol _ZN61_$LT$core..num..NonZeroU128$u20$as$u20$core..str..FromStr$GT$8from_str17hc6d5a93f1d348c98E\n; instance Instance { def: Item(DefId(0:11611 ~ core[5f76]::num[0]::{{impl}}[292]::from_str[0])), substs: [] }\n; sig ([&amp;str]; c_variadic: false)-&gt;result::Result&lt;num::NonZeroU128, num::ParseIntError&gt;\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      = v0       ByRef { sized: true }                result::Result&lt;num::NonZeroU128, num::ParseIntError&gt;\n; arg   _1      = v1, v2   ByValPair(types::I64, types::I64)    &amp;str\n\n; kind  local ty                              size align (abi,pref)\n; stack _1    &amp;str                             16b 8, 8              storage=ss0\n; stack _2    option::Option&lt;num::NonZeroU128&gt;   16b 8, 8              storage=ss1\n; ssa   _3    u128                             16b 8, 8\n; stack _4    result::Result&lt;u128, num::ParseIntError&gt;   24b 8, 8              storage=ss2\n; stack _5    result::Result&lt;u128, num::ParseIntError&gt;   24b 8, 8              storage=ss3\n; stack _6    &amp;str                             16b 8, 8              storage=ss4\n; ssa   _7    isize                             8b 8, 8\n; stack _8    num::ParseIntError                1b 1, 8              storage=ss5\n; stack _9    num::ParseIntError                1b 1, 8              storage=ss6\n; stack _10   num::ParseIntError                1b 1, 8              storage=ss7\n; ssa   _11   u128                             16b 8, 8\n; stack _12   num::ParseIntError                1b 1, 8              storage=ss8\n\n    ss0 = explicit_slot 16\n    ss1 = explicit_slot 16\n    ss2 = explicit_slot 24\n    ss3 = explicit_slot 24\n    ss4 = explicit_slot 16\n    ss5 = explicit_slot 1\n    ss6 = explicit_slot 1\n    ss7 = explicit_slot 1\n    ss8 = explicit_slot 1\n    gv0 = symbol colocated u1:22 ; trap at Instance { def: Item(DefId(0:11611 ~ core[5f76]::num[0]::{{impl}}[292]::from_str[0])), substs: [] } (_ZN61_$LT$core..num..NonZeroU128$u20$as$u20$core..str..FromStr$GT$8from_str17hc6d5a93f1d348c98E): [corruption] Hit unreachable code.\n    gv1 = symbol colocated u1:23 ; alloc32624\n    sig0 = (i64, i64, i64, i32) windows_fastcall\n    sig1 = (i64, i64) windows_fastcall\n    sig2 = (i128) -&gt; i128 windows_fastcall\n    sig3 = (i64) -&gt; i32 windows_fastcall\n    sig4 = (i8) -&gt; i8 windows_fastcall\n    sig5 = (i64, i8) windows_fastcall\n    sig6 = (i64, i128, i8) windows_fastcall\n    fn0 = u0:283 sig0 ; Instance { def: Item(DefId(0:677 ~ core[5f76]::num[0]::from_str_radix[0])), substs: [u128] }\n    fn1 = u0:284 sig1 ; Instance { def: Item(DefId(0:5800 ~ core[5f76]::result[0]::{{impl}}[36]::into_result[0])), substs: [u128, num::ParseIntError] }\n    fn2 = colocated u0:17 sig2 ; Instance { def: Item(DefId(0:11011 ~ core[5f76]::num[0]::{{impl}}[52]::new[0])), substs: [] }\n    fn3 = u0:263 sig3 ; puts\n    fn4 = u0:268 sig4 ; Instance { def: Item(DefId(0:1846 ~ core[5f76]::convert[0]::{{impl}}[4]::from[0])), substs: [num::ParseIntError] }\n    fn5 = u0:285 sig5 ; Instance { def: Item(DefId(0:5802 ~ core[5f76]::result[0]::{{impl}}[36]::from_error[0])), substs: [num::NonZeroU128, num::ParseIntError] }\n    fn6 = u0:286 sig6 ; Instance { def: Item(DefId(0:5279 ~ core[5f76]::option[0]::{{impl}}[0]::ok_or[0])), substs: [num::NonZeroU128, num::ParseIntError] }\n    jt0 = jump_table [block4, block6]\n\n                                block0(v0: i64, v1: i64, v2: i64):\n                                    nop\n; write_cvalue: Addr(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &amp;str &lt;- ByValPair(v1, v2): &amp;str\n                                    stack_store v1, ss0\n                                    stack_store v2, ss0+8\n                                    jump block1\n\n                                block1:\n                                    nop\n; write_cvalue: Addr(Pointer { base: Stack(ss4), offset: Offset32(0) }, None): &amp;str &lt;- ByRef(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &amp;str\n@0004                               v3 = stack_load.i64 ss0\n@0004                               v4 = stack_load.i64 ss0+8\n@0004                               stack_store v3, ss4\n@0004                               stack_store v4, ss4+8\n;\n; _5 = const num::from_str_radix::&lt;u128&gt;(move _6, const 10u32)\n@0003                               v5 = iconst.i32 10\n@0003                               v6 = stack_load.i64 ss4\n@0003                               v7 = stack_load.i64 ss4+8\n@0003                               v8 = stack_addr.i64 ss3\n@0003                               call fn0(v8, v6, v7, v5)\n@0003                               jump block2\n\n                                block2:\n@0003                               nop\n;\n; _4 = const &lt;result::Result&lt;u128, num::ParseIntError&gt; as ops::r#try::Try&gt;::into_result(move _5)\n@0002                               v9 = stack_addr.i64 ss3\n@0002                               v10 = stack_addr.i64 ss2\n@0002                               call fn1(v10, v9)\n@0002                               jump block3\n\n                                block3:\n@0002                               nop\n@0007                               v11 = stack_load.i8 ss2\n@0007                               v12 = uextend.i64 v11\n; write_cvalue: Var(_7): isize &lt;- ByVal(v12): isize\n;\n; switchInt(move _7)\n@0007                               jump block12\n\n                                block12:\n@0007                               br_table.i64 v12, block5, jt0\n\n                                block4:\n@0007                               nop\n; write_cvalue: Var(_11): u128 &lt;- ByRef(Pointer { base: Stack(ss2), offset: Offset32(8) }, None): u128\n@0001                               v13 = stack_addr.i64 ss2\n@0001                               v14 = load.i128 v13+8\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v14): u128\n;\n; _2 = const num::NonZeroU128::new(move _3)\n@0000                               v15 = call fn2(v14)\n; write_cvalue: Addr(Pointer { base: Stack(ss1), offset: Offset32(0) }, None): option::Option&lt;num::NonZeroU128&gt; &lt;- ByVal(v15): option::Option&lt;num::NonZeroU128&gt;\n@0000                               v16 = stack_addr.i64 ss1\n@0000                               store v15, v16\n@0000                               jump block9\n\n                                block5:\n@0000                               nop\n;\n; unreachable\n@0002                               v17 = global_value.i64 gv0\n@0002                               v18 = call fn3(v17)\n@0002                               trap unreachable\n\n                                block6:\n@0002                               nop\n; write_cvalue: Addr(Pointer { base: Stack(ss5), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Stack(ss2), offset: Offset32(1) }, None): num::ParseIntError\n@0007                               v19 = stack_load.i8 ss2+1\n@0007                               stack_store v19, ss5\n; write_cvalue: Addr(Pointer { base: Stack(ss7), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Stack(ss5), offset: Offset32(0) }, None): num::ParseIntError\n@000a                               v20 = stack_load.i8 ss5\n@000a                               stack_store v20, ss7\n;\n; _9 = const &lt;num::ParseIntError as convert::From&lt;num::ParseIntError&gt;&gt;::from(move _10)\n@000a                               v21 = stack_load.i8 ss7\n@000a                               v22 = call fn4(v21)\n; write_cvalue: Addr(Pointer { base: Stack(ss6), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByVal(v22): num::ParseIntError\n@000a                               stack_store v22, ss6\n@000a                               jump block7\n\n                                block7:\n@000a                               nop\n;\n; _0 = const &lt;result::Result&lt;num::NonZeroU128, num::ParseIntError&gt; as ops::r#try::Try&gt;::from_error(move _9)\n@000a                               v23 = stack_load.i8 ss6\n@000a                               call fn5(v0, v23)\n@000a                               jump block8\n\n                                block8:\n@000a                               nop\n;\n; goto\n@000e                               return\n\n                                block9:\n@000e                               nop\n@000f                               v24 = global_value.i64 gv1\n; write_cvalue: Addr(Pointer { base: Stack(ss8), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Addr(v24), offset: Offset32(0) }, None): num::ParseIntError\n@000f                               v25 = load.i8 v24\n@000f                               stack_store v25, ss8\n;\n; _0 = const option::Option::&lt;num::NonZeroU128&gt;::ok_or::&lt;num::ParseIntError&gt;(move _2, move _12)\n@0010                               v26 = stack_addr.i64 ss1\n@0010                               v27 = load.i128 v26\n@0010                               v28 = stack_load.i8 ss8\n@0010                               call fn6(v0, v27, v28)\n@0010                               jump block10\n\n                                block10:\n@0010                               nop\n;\n; goto\n@000e                               return\n\n                                block11:\n@000e                               nop\n;\n; return\n@000e                               return\n}\n</code></pre></div>\n\n\n<p>Backtrace (for release build)</p>\n<div class=\"codehilite\"><pre><span></span><code>#0  0x00005555557f5efb in cranelift_codegen::ir::layout::Layout::renumber_insts ()\n#1  0x00005555557f5719 in cranelift_codegen::ir::layout::Layout::assign_inst_seq ()\n#2  0x000055555578eb39 in &lt;&amp;mut cranelift_codegen::cursor::FuncCursor as cranelift_codegen::ir::builder::InstInserterBase&gt;::insert_built_inst ()\n#3  0x000055555579b468 in cranelift_codeg\n[message truncated]\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198680956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590421136
    },
    {
        "content": "<p>bjorn3 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752\">Issue #1752</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>test compile\nset is_pic\ntarget x86_64-pc-windows-gnu\n\nfunction u0:43(i64, i64, i64) windows_fastcall {\n; symbol _ZN61_$LT$core..num..NonZeroU128$u20$as$u20$core..str..FromStr$GT$8from_str17hc6d5a93f1d348c98E\n; instance Instance { def: Item(DefId(0:11611 ~ core[5f76]::num[0]::{{impl}}[292]::from_str[0])), substs: [] }\n; sig ([&amp;str]; c_variadic: false)-&gt;result::Result&lt;num::NonZeroU128, num::ParseIntError&gt;\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      = v0       ByRef { sized: true }                result::Result&lt;num::NonZeroU128, num::ParseIntError&gt;\n; arg   _1      = v1, v2   ByValPair(types::I64, types::I64)    &amp;str\n\n; kind  local ty                              size align (abi,pref)\n; stack _1    &amp;str                             16b 8, 8              storage=ss0\n; stack _2    option::Option&lt;num::NonZeroU128&gt;   16b 8, 8              storage=ss1\n; ssa   _3    u128                             16b 8, 8\n; stack _4    result::Result&lt;u128, num::ParseIntError&gt;   24b 8, 8              storage=ss2\n; stack _5    result::Result&lt;u128, num::ParseIntError&gt;   24b 8, 8              storage=ss3\n; stack _6    &amp;str                             16b 8, 8              storage=ss4\n; ssa   _7    isize                             8b 8, 8\n; stack _8    num::ParseIntError                1b 1, 8              storage=ss5\n; stack _9    num::ParseIntError                1b 1, 8              storage=ss6\n; stack _10   num::ParseIntError                1b 1, 8              storage=ss7\n; ssa   _11   u128                             16b 8, 8\n; stack _12   num::ParseIntError                1b 1, 8              storage=ss8\n\n    ss0 = explicit_slot 16\n    ss1 = explicit_slot 16\n    ss2 = explicit_slot 24\n    ss3 = explicit_slot 24\n    ss4 = explicit_slot 16\n    ss5 = explicit_slot 1\n    ss6 = explicit_slot 1\n    ss7 = explicit_slot 1\n    ss8 = explicit_slot 1\n    gv0 = symbol colocated u1:22 ; trap at Instance { def: Item(DefId(0:11611 ~ core[5f76]::num[0]::{{impl}}[292]::from_str[0])), substs: [] } (_ZN61_$LT$core..num..NonZeroU128$u20$as$u20$core..str..FromStr$GT$8from_str17hc6d5a93f1d348c98E): [corruption] Hit unreachable code.\n    gv1 = symbol colocated u1:23 ; alloc32624\n    sig0 = (i64, i64, i64, i32) windows_fastcall\n    sig1 = (i64, i64) windows_fastcall\n    sig2 = (i128) -&gt; i128 windows_fastcall\n    sig3 = (i64) -&gt; i32 windows_fastcall\n    sig4 = (i8) -&gt; i8 windows_fastcall\n    sig5 = (i64, i8) windows_fastcall\n    sig6 = (i64, i128, i8) windows_fastcall\n    fn0 = u0:283 sig0 ; Instance { def: Item(DefId(0:677 ~ core[5f76]::num[0]::from_str_radix[0])), substs: [u128] }\n    fn1 = u0:284 sig1 ; Instance { def: Item(DefId(0:5800 ~ core[5f76]::result[0]::{{impl}}[36]::into_result[0])), substs: [u128, num::ParseIntError] }\n    fn2 = colocated u0:17 sig2 ; Instance { def: Item(DefId(0:11011 ~ core[5f76]::num[0]::{{impl}}[52]::new[0])), substs: [] }\n    fn3 = u0:263 sig3 ; puts\n    fn4 = u0:268 sig4 ; Instance { def: Item(DefId(0:1846 ~ core[5f76]::convert[0]::{{impl}}[4]::from[0])), substs: [num::ParseIntError] }\n    fn5 = u0:285 sig5 ; Instance { def: Item(DefId(0:5802 ~ core[5f76]::result[0]::{{impl}}[36]::from_error[0])), substs: [num::NonZeroU128, num::ParseIntError] }\n    fn6 = u0:286 sig6 ; Instance { def: Item(DefId(0:5279 ~ core[5f76]::option[0]::{{impl}}[0]::ok_or[0])), substs: [num::NonZeroU128, num::ParseIntError] }\n    jt0 = jump_table [block4, block6]\n\n                                block0(v0: i64, v1: i64, v2: i64):\n                                    nop\n; write_cvalue: Addr(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &amp;str &lt;- ByValPair(v1, v2): &amp;str\n                                    stack_store v1, ss0\n                                    stack_store v2, ss0+8\n                                    jump block1\n\n                                block1:\n                                    nop\n; write_cvalue: Addr(Pointer { base: Stack(ss4), offset: Offset32(0) }, None): &amp;str &lt;- ByRef(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &amp;str\n@0004                               v3 = stack_load.i64 ss0\n@0004                               v4 = stack_load.i64 ss0+8\n@0004                               stack_store v3, ss4\n@0004                               stack_store v4, ss4+8\n;\n; _5 = const num::from_str_radix::&lt;u128&gt;(move _6, const 10u32)\n@0003                               v5 = iconst.i32 10\n@0003                               v6 = stack_load.i64 ss4\n@0003                               v7 = stack_load.i64 ss4+8\n@0003                               v8 = stack_addr.i64 ss3\n@0003                               call fn0(v8, v6, v7, v5)\n@0003                               jump block2\n\n                                block2:\n@0003                               nop\n;\n; _4 = const &lt;result::Result&lt;u128, num::ParseIntError&gt; as ops::r#try::Try&gt;::into_result(move _5)\n@0002                               v9 = stack_addr.i64 ss3\n@0002                               v10 = stack_addr.i64 ss2\n@0002                               call fn1(v10, v9)\n@0002                               jump block3\n\n                                block3:\n@0002                               nop\n@0007                               v11 = stack_load.i8 ss2\n@0007                               v12 = uextend.i64 v11\n; write_cvalue: Var(_7): isize &lt;- ByVal(v12): isize\n;\n; switchInt(move _7)\n@0007                               jump block12\n\n                                block12:\n@0007                               br_table.i64 v12, block5, jt0\n\n                                block4:\n@0007                               nop\n; write_cvalue: Var(_11): u128 &lt;- ByRef(Pointer { base: Stack(ss2), offset: Offset32(8) }, None): u128\n@0001                               v13 = stack_addr.i64 ss2\n@0001                               v14 = load.i128 v13+8\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v14): u128\n;\n; _2 = const num::NonZeroU128::new(move _3)\n@0000                               v15 = call fn2(v14)\n; write_cvalue: Addr(Pointer { base: Stack(ss1), offset: Offset32(0) }, None): option::Option&lt;num::NonZeroU128&gt; &lt;- ByVal(v15): option::Option&lt;num::NonZeroU128&gt;\n@0000                               v16 = stack_addr.i64 ss1\n@0000                               store v15, v16\n@0000                               jump block9\n\n                                block5:\n@0000                               nop\n;\n; unreachable\n@0002                               v17 = global_value.i64 gv0\n@0002                               v18 = call fn3(v17)\n@0002                               trap unreachable\n\n                                block6:\n@0002                               nop\n; write_cvalue: Addr(Pointer { base: Stack(ss5), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Stack(ss2), offset: Offset32(1) }, None): num::ParseIntError\n@0007                               v19 = stack_load.i8 ss2+1\n@0007                               stack_store v19, ss5\n; write_cvalue: Addr(Pointer { base: Stack(ss7), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Stack(ss5), offset: Offset32(0) }, None): num::ParseIntError\n@000a                               v20 = stack_load.i8 ss5\n@000a                               stack_store v20, ss7\n;\n; _9 = const &lt;num::ParseIntError as convert::From&lt;num::ParseIntError&gt;&gt;::from(move _10)\n@000a                               v21 = stack_load.i8 ss7\n@000a                               v22 = call fn4(v21)\n; write_cvalue: Addr(Pointer { base: Stack(ss6), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByVal(v22): num::ParseIntError\n@000a                               stack_store v22, ss6\n@000a                               jump block7\n\n                                block7:\n@000a                               nop\n;\n; _0 = const &lt;result::Result&lt;num::NonZeroU128, num::ParseIntError&gt; as ops::r#try::Try&gt;::from_error(move _9)\n@000a                               v23 = stack_load.i8 ss6\n@000a                               call fn5(v0, v23)\n@000a                               jump block8\n\n                                block8:\n@000a                               nop\n;\n; goto\n@000e                               return\n\n                                block9:\n@000e                               nop\n@000f                               v24 = global_value.i64 gv1\n; write_cvalue: Addr(Pointer { base: Stack(ss8), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Addr(v24), offset: Offset32(0) }, None): num::ParseIntError\n@000f                               v25 = load.i8 v24\n@000f                               stack_store v25, ss8\n;\n; _0 = const option::Option::&lt;num::NonZeroU128&gt;::ok_or::&lt;num::ParseIntError&gt;(move _2, move _12)\n@0010                               v26 = stack_addr.i64 ss1\n@0010                               v27 = load.i128 v26\n@0010                               v28 = stack_load.i8 ss8\n@0010                               call fn6(v0, v27, v28)\n@0010                               jump block10\n\n                                block10:\n@0010                               nop\n;\n; goto\n@000e                               return\n\n                                block11:\n@000e                               nop\n;\n; return\n@000e                               return\n}\n</code></pre></div>\n\n\n<p>Backtrace (for release build)</p>\n<div class=\"codehilite\"><pre><span></span><code>#0  0x00005555557f5efb in cranelift_codegen::ir::layout::Layout::renumber_insts ()\n#1  0x00005555557f5719 in cranelift_codegen::ir::layout::Layout::assign_inst_seq ()\n#2  0x000055555578eb39 in &lt;&amp;mut cranelift_codegen::cursor::FuncCursor as cranelift_codegen::ir::builder::InstInserterBase&gt;::insert_built_inst ()\n#3  0x000055555579b468 in cranelift_codeg\n[message truncated]\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198680957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590421136
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752#issuecomment-633626822\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752\">Issue #1752</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 198680969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590421147
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752#issuecomment-633626913\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752\">Issue #1752</a>:</p>\n<blockquote>\n<p>Found while trying to compile libcore for Windows using cg_clif.</p>\n</blockquote>",
        "id": 198680979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590421160
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752#issuecomment-633692639\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752\">Issue #1752</a>:</p>\n<blockquote>\n<p>This seems to have been caused by a problem in #1510 that is now fixed.</p>\n</blockquote>",
        "id": 198696277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590434829
    },
    {
        "content": "<p>bjorn3 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1752\">Issue #1752</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>test compile\nset is_pic\ntarget x86_64-pc-windows-gnu\n\nfunction u0:43(i64, i64, i64) windows_fastcall {\n; symbol _ZN61_$LT$core..num..NonZeroU128$u20$as$u20$core..str..FromStr$GT$8from_str17hc6d5a93f1d348c98E\n; instance Instance { def: Item(DefId(0:11611 ~ core[5f76]::num[0]::{{impl}}[292]::from_str[0])), substs: [] }\n; sig ([&amp;str]; c_variadic: false)-&gt;result::Result&lt;num::NonZeroU128, num::ParseIntError&gt;\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      = v0       ByRef { sized: true }                result::Result&lt;num::NonZeroU128, num::ParseIntError&gt;\n; arg   _1      = v1, v2   ByValPair(types::I64, types::I64)    &amp;str\n\n; kind  local ty                              size align (abi,pref)\n; stack _1    &amp;str                             16b 8, 8              storage=ss0\n; stack _2    option::Option&lt;num::NonZeroU128&gt;   16b 8, 8              storage=ss1\n; ssa   _3    u128                             16b 8, 8\n; stack _4    result::Result&lt;u128, num::ParseIntError&gt;   24b 8, 8              storage=ss2\n; stack _5    result::Result&lt;u128, num::ParseIntError&gt;   24b 8, 8              storage=ss3\n; stack _6    &amp;str                             16b 8, 8              storage=ss4\n; ssa   _7    isize                             8b 8, 8\n; stack _8    num::ParseIntError                1b 1, 8              storage=ss5\n; stack _9    num::ParseIntError                1b 1, 8              storage=ss6\n; stack _10   num::ParseIntError                1b 1, 8              storage=ss7\n; ssa   _11   u128                             16b 8, 8\n; stack _12   num::ParseIntError                1b 1, 8              storage=ss8\n\n    ss0 = explicit_slot 16\n    ss1 = explicit_slot 16\n    ss2 = explicit_slot 24\n    ss3 = explicit_slot 24\n    ss4 = explicit_slot 16\n    ss5 = explicit_slot 1\n    ss6 = explicit_slot 1\n    ss7 = explicit_slot 1\n    ss8 = explicit_slot 1\n    gv0 = symbol colocated u1:22 ; trap at Instance { def: Item(DefId(0:11611 ~ core[5f76]::num[0]::{{impl}}[292]::from_str[0])), substs: [] } (_ZN61_$LT$core..num..NonZeroU128$u20$as$u20$core..str..FromStr$GT$8from_str17hc6d5a93f1d348c98E): [corruption] Hit unreachable code.\n    gv1 = symbol colocated u1:23 ; alloc32624\n    sig0 = (i64, i64, i64, i32) windows_fastcall\n    sig1 = (i64, i64) windows_fastcall\n    sig2 = (i128) -&gt; i128 windows_fastcall\n    sig3 = (i64) -&gt; i32 windows_fastcall\n    sig4 = (i8) -&gt; i8 windows_fastcall\n    sig5 = (i64, i8) windows_fastcall\n    sig6 = (i64, i128, i8) windows_fastcall\n    fn0 = u0:283 sig0 ; Instance { def: Item(DefId(0:677 ~ core[5f76]::num[0]::from_str_radix[0])), substs: [u128] }\n    fn1 = u0:284 sig1 ; Instance { def: Item(DefId(0:5800 ~ core[5f76]::result[0]::{{impl}}[36]::into_result[0])), substs: [u128, num::ParseIntError] }\n    fn2 = colocated u0:17 sig2 ; Instance { def: Item(DefId(0:11011 ~ core[5f76]::num[0]::{{impl}}[52]::new[0])), substs: [] }\n    fn3 = u0:263 sig3 ; puts\n    fn4 = u0:268 sig4 ; Instance { def: Item(DefId(0:1846 ~ core[5f76]::convert[0]::{{impl}}[4]::from[0])), substs: [num::ParseIntError] }\n    fn5 = u0:285 sig5 ; Instance { def: Item(DefId(0:5802 ~ core[5f76]::result[0]::{{impl}}[36]::from_error[0])), substs: [num::NonZeroU128, num::ParseIntError] }\n    fn6 = u0:286 sig6 ; Instance { def: Item(DefId(0:5279 ~ core[5f76]::option[0]::{{impl}}[0]::ok_or[0])), substs: [num::NonZeroU128, num::ParseIntError] }\n    jt0 = jump_table [block4, block6]\n\n                                block0(v0: i64, v1: i64, v2: i64):\n                                    nop\n; write_cvalue: Addr(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &amp;str &lt;- ByValPair(v1, v2): &amp;str\n                                    stack_store v1, ss0\n                                    stack_store v2, ss0+8\n                                    jump block1\n\n                                block1:\n                                    nop\n; write_cvalue: Addr(Pointer { base: Stack(ss4), offset: Offset32(0) }, None): &amp;str &lt;- ByRef(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &amp;str\n@0004                               v3 = stack_load.i64 ss0\n@0004                               v4 = stack_load.i64 ss0+8\n@0004                               stack_store v3, ss4\n@0004                               stack_store v4, ss4+8\n;\n; _5 = const num::from_str_radix::&lt;u128&gt;(move _6, const 10u32)\n@0003                               v5 = iconst.i32 10\n@0003                               v6 = stack_load.i64 ss4\n@0003                               v7 = stack_load.i64 ss4+8\n@0003                               v8 = stack_addr.i64 ss3\n@0003                               call fn0(v8, v6, v7, v5)\n@0003                               jump block2\n\n                                block2:\n@0003                               nop\n;\n; _4 = const &lt;result::Result&lt;u128, num::ParseIntError&gt; as ops::r#try::Try&gt;::into_result(move _5)\n@0002                               v9 = stack_addr.i64 ss3\n@0002                               v10 = stack_addr.i64 ss2\n@0002                               call fn1(v10, v9)\n@0002                               jump block3\n\n                                block3:\n@0002                               nop\n@0007                               v11 = stack_load.i8 ss2\n@0007                               v12 = uextend.i64 v11\n; write_cvalue: Var(_7): isize &lt;- ByVal(v12): isize\n;\n; switchInt(move _7)\n@0007                               jump block12\n\n                                block12:\n@0007                               br_table.i64 v12, block5, jt0\n\n                                block4:\n@0007                               nop\n; write_cvalue: Var(_11): u128 &lt;- ByRef(Pointer { base: Stack(ss2), offset: Offset32(8) }, None): u128\n@0001                               v13 = stack_addr.i64 ss2\n@0001                               v14 = load.i128 v13+8\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v14): u128\n;\n; _2 = const num::NonZeroU128::new(move _3)\n@0000                               v15 = call fn2(v14)\n; write_cvalue: Addr(Pointer { base: Stack(ss1), offset: Offset32(0) }, None): option::Option&lt;num::NonZeroU128&gt; &lt;- ByVal(v15): option::Option&lt;num::NonZeroU128&gt;\n@0000                               v16 = stack_addr.i64 ss1\n@0000                               store v15, v16\n@0000                               jump block9\n\n                                block5:\n@0000                               nop\n;\n; unreachable\n@0002                               v17 = global_value.i64 gv0\n@0002                               v18 = call fn3(v17)\n@0002                               trap unreachable\n\n                                block6:\n@0002                               nop\n; write_cvalue: Addr(Pointer { base: Stack(ss5), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Stack(ss2), offset: Offset32(1) }, None): num::ParseIntError\n@0007                               v19 = stack_load.i8 ss2+1\n@0007                               stack_store v19, ss5\n; write_cvalue: Addr(Pointer { base: Stack(ss7), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Stack(ss5), offset: Offset32(0) }, None): num::ParseIntError\n@000a                               v20 = stack_load.i8 ss5\n@000a                               stack_store v20, ss7\n;\n; _9 = const &lt;num::ParseIntError as convert::From&lt;num::ParseIntError&gt;&gt;::from(move _10)\n@000a                               v21 = stack_load.i8 ss7\n@000a                               v22 = call fn4(v21)\n; write_cvalue: Addr(Pointer { base: Stack(ss6), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByVal(v22): num::ParseIntError\n@000a                               stack_store v22, ss6\n@000a                               jump block7\n\n                                block7:\n@000a                               nop\n;\n; _0 = const &lt;result::Result&lt;num::NonZeroU128, num::ParseIntError&gt; as ops::r#try::Try&gt;::from_error(move _9)\n@000a                               v23 = stack_load.i8 ss6\n@000a                               call fn5(v0, v23)\n@000a                               jump block8\n\n                                block8:\n@000a                               nop\n;\n; goto\n@000e                               return\n\n                                block9:\n@000e                               nop\n@000f                               v24 = global_value.i64 gv1\n; write_cvalue: Addr(Pointer { base: Stack(ss8), offset: Offset32(0) }, None): num::ParseIntError &lt;- ByRef(Pointer { base: Addr(v24), offset: Offset32(0) }, None): num::ParseIntError\n@000f                               v25 = load.i8 v24\n@000f                               stack_store v25, ss8\n;\n; _0 = const option::Option::&lt;num::NonZeroU128&gt;::ok_or::&lt;num::ParseIntError&gt;(move _2, move _12)\n@0010                               v26 = stack_addr.i64 ss1\n@0010                               v27 = load.i128 v26\n@0010                               v28 = stack_load.i8 ss8\n@0010                               call fn6(v0, v27, v28)\n@0010                               jump block10\n\n                                block10:\n@0010                               nop\n;\n; goto\n@000e                               return\n\n                                block11:\n@000e                               nop\n;\n; return\n@000e                               return\n}\n</code></pre></div>\n\n\n<p>Backtrace (for release build)</p>\n<div class=\"codehilite\"><pre><span></span><code>#0  0x00005555557f5efb in cranelift_codegen::ir::layout::Layout::renumber_insts ()\n#1  0x00005555557f5719 in cranelift_codegen::ir::layout::Layout::assign_inst_seq ()\n#2  0x000055555578eb39 in &lt;&amp;mut cranelift_codegen::cursor::FuncCursor as cranelift_codegen::ir::builder::InstInserterBase&gt;::insert_built_inst ()\n#3  0x000055555579b468 in cranelift_codege\n[message truncated]\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198696427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590434982
    }
]