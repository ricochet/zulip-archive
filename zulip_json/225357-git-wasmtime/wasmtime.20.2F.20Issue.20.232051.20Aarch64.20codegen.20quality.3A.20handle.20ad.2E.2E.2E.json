[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051#issuecomment-661348307\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">Issue #2051</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 204479743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595281279
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051#issuecomment-662053510\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">Issue #2051</a>:</p>\n<blockquote>\n<p>@julian-seward1 I reworked the negation/casting a bit as per our discussion -- PTAL!</p>\n</blockquote>",
        "id": 204589712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595358697
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051#issuecomment-662827970\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">Issue #2051</a>:</p>\n<blockquote>\n<p>Thanks for the simplification.  It is simpler, but tbh I am still unclear about the need for the masking.  I had in mind the following; would it work?</p>\n<div class=\"codehilite\"><pre><span></span><code>assert!(twos_complement_bits &lt;= 64);\nif let Some(imm_value) = input_to_const(ctx, input) {\n    let mut sign_extended =\n        ((imm_value as i64) &lt;&lt; (64 - twos_complement_bits)) &gt;&gt; (64 - twos_complement_bits);\n    if let Some(i) = Imm12::maybe_from_u64(sign_extended as u64) {\n        return (ResultRSEImm12::Imm12(i), false);\n    }\n    sign_extended = sign_extended.wrapping_neg();\n    if let Some(i) = Imm12::maybe_from_u64(sign_extended as u64) {\n        return (ResultRSEImm12::Imm12(i), true);\n    }\n}\n(\n    ResultRSEImm12::from_rse(put_input_in_rse(ctx, input, narrow_mode)),\n    false,\n)\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204762404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595482844
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051#issuecomment-663128715\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">Issue #2051</a>:</p>\n<blockquote>\n<p>Ah, yes, I just realized that the masking doesn't actually matter: the <code>Imm12</code>'s limit is lower than the maximum value for the masked-down width, so masking to the appropriate width first will not enable any additional constant values to be represented. (In the <code>i8</code> case where that's not true, any negative value would also fit without negation.)</p>\n</blockquote>",
        "id": 204826253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595524607
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051#issuecomment-663675080\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">Issue #2051</a>:</p>\n<blockquote>\n<p>Thanks! Updated naming to <code>put_input_in_rse_imm12_maybe_negated</code>; hopefully clearer.</p>\n<p>Re: the sign extension: one way to think of it is that the sign extension does not affect the correctness of the add/sub, because narrower-than-64-bit values have undefined high bits. (So even adding 127 == -128 in <code>i8</code>-world is safe, because it produces the correct lowest byte.) The high bytes only matter where <code>Imm12</code> is concerned -- it may falsely decide we can't use a 12-bit immediate because (actually ignored) high bits are set. So we need to sign extend before doing the 64-bit negation, so that we get a sign-extended positive value and can recognize small negative numbers as representable. (And why not mask the first, non-negated, case then? Because the constant with <code>iconst</code> should already be within range if positive.)</p>\n</blockquote>",
        "id": 204951025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595615507
    }
]