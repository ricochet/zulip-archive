[
    {
        "content": "<p><strong>feilongjiang</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>.</p>",
        "id": 404630443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701176367
    },
    {
        "content": "<p><strong>feilongjiang</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>.</p>",
        "id": 404630444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701176367
    },
    {
        "content": "<p>feilongjiang opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a> from <code>feilongjiang:fix_arm64_pcc_check_constant</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>PCC: Fix several aarch64 check_constant failures<br>\nThis patch fixes several aarch64 check_constant failures:</p>\n<ol>\n<li>\n<p><code>check_subsume</code> for <code>AluRRImmLogic</code> failed due to the mismatch of fact width</p>\n<p>isle rule for <code>orr_imm</code> always generates fact with bit_width 64 regardless of<br>\nimmediate type. So when Type is I32, <code>check_subsume</code> will be failed.<br>\nThis could be reproducedwith the simple iconst.i32 wasm module [1].</p>\n</li>\n<li>\n<p><code>MovN</code> generates incorrect fact range value when <code>first_is_inverted</code> is true</p>\n<p><code>running_value</code> should be calculated as !(((!imm16) &amp; 0xffff) &lt;&lt; shift) or<br>\n!(u64::from(imm.bits) &lt;&lt; shift)<br>\nThis could be reproduced with the simple iconst.i64 wasm module [2].</p>\n</li>\n</ol>\n<p>Added two test cases in cranelift/filetests/filetests/pcc/succeed/const.clif.</p>\n<p>Additional fix for <code>get_fact_or_default</code>:</p>\n<p><code>trace!</code> treats <code>reg</code> as VirtualReg and it will panic when \"reg\" is RealReg and<br>\n<code>trace-log</code> feature is enabled.</p>\n<p>[1]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_logic.wat\n(module\n  (func (export \"test_logic\") (result i32) (i32.const 0x100010))\n)\n</code></pre></div>\n<p>[2]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_const.wat\n(module\n  (func (export \"test_constant\") (result i64) (i64.const 0x0009ffffffff))\n)\n</code></pre></div>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 404630445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701176367
    },
    {
        "content": "<p>feilongjiang edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>:</p>\n<blockquote>\n<p>Hi team, please consider<br>\nThis patch fixes several aarch64 check_constant failures:</p>\n<ol>\n<li>\n<p><code>check_subsume</code> for <code>AluRRImmLogic</code> failed due to the mismatch of fact width</p>\n<p>isle rule for <code>orr_imm</code> always generates fact with bit_width 64 regardless of<br>\nimmediate type. So when Type is I32, <code>check_subsume</code> will be failed.<br>\nThis could be reproduced with the simple wasm module [1].</p>\n</li>\n<li>\n<p><code>MovN</code> generates incorrect fact range value when <code>first_is_inverted</code> is true</p>\n<p><code>running_value</code> should be calculated as !(((!imm16) &amp; 0xffff) &lt;&lt; shift) or<br>\n!(u64::from(imm.bits) &lt;&lt; shift)<br>\nThis could be reproduced with the simple wasm module [2].</p>\n</li>\n</ol>\n<p>Added two test cases in cranelift/filetests/filetests/pcc/succeed/const.clif.</p>\n<p>Additional fix for <code>get_fact_or_default</code>:</p>\n<p><code>trace!</code> treats <code>reg</code> as VirtualReg and it will panic when \"reg\" is RealReg and<br>\n<code>trace-log</code> feature is enabled.</p>\n<p>[1]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_logic.wat\n(module\n  (func (export \"test_logic\") (result i32) (i32.const 0x100010))\n)\n</code></pre></div>\n<p>[2]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_const.wat\n(module\n  (func (export \"test_constant\") (result i64) (i64.const 0x0009ffffffff))\n)\n</code></pre></div>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 404630514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701176394
    },
    {
        "content": "<p>feilongjiang edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>:</p>\n<blockquote>\n<p>Hi team, please consider:<br>\nThis patch fixes several aarch64 check_constant failures:</p>\n<ol>\n<li>\n<p><code>check_subsume</code> for <code>AluRRImmLogic</code> failed due to the mismatch of fact width</p>\n<p>isle rule for <code>orr_imm</code> always generates fact with bit_width 64 regardless of<br>\nimmediate type. So when Type is I32, <code>check_subsume</code> will be failed.<br>\nThis could be reproduced with the simple wasm module [1].</p>\n</li>\n<li>\n<p><code>MovN</code> generates incorrect fact range value when <code>first_is_inverted</code> is true</p>\n<p><code>running_value</code> should be calculated as !(((!imm16) &amp; 0xffff) &lt;&lt; shift) or<br>\n!(u64::from(imm.bits) &lt;&lt; shift)<br>\nThis could be reproduced with the simple wasm module [2].</p>\n</li>\n</ol>\n<p>Added two test cases in cranelift/filetests/filetests/pcc/succeed/const.clif.</p>\n<p>Additional fix for <code>get_fact_or_default</code>:</p>\n<p><code>trace!</code> treats <code>reg</code> as VirtualReg and it will panic when \"reg\" is RealReg and<br>\n<code>trace-log</code> feature is enabled.</p>\n<p>[1]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_logic.wat\n(module\n  (func (export \"test_logic\") (result i32) (i32.const 0x100010))\n)\n</code></pre></div>\n<p>[2]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_const.wat\n(module\n  (func (export \"test_constant\") (result i64) (i64.const 0x0009ffffffff))\n)\n</code></pre></div>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 404630554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701176403
    },
    {
        "content": "<p>feilongjiang edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>:</p>\n<blockquote>\n<p>Hi team, please consider:<br>\nThis patch fixes several aarch64 check_constant failures:</p>\n<ol>\n<li>\n<p><code>check_subsume</code> for <code>AluRRImmLogic</code> failed due to the mismatch of fact width</p>\n<p>isle rule for <code>orr_imm</code> always generates fact with bit_width 64 regardless of<br>\nimmediate type. So when Type is I32, <code>check_subsume</code> will be failed.<br>\nThis could be reproduced with the simple wasm module [1].</p>\n</li>\n<li>\n<p><code>MovN</code> generates incorrect fact range value when <code>first_is_inverted</code> is true</p>\n<p><code>running_value</code> should be calculated as <code>!(((!imm16) &amp; 0xffff) &lt;&lt; shift)</code> or<br>\n<code>!(u64::from(imm.bits) &lt;&lt; shift)</code><br>\nThis could be reproduced with the simple wasm module [2].</p>\n</li>\n</ol>\n<p>Added two test cases in cranelift/filetests/filetests/pcc/succeed/const.clif.</p>\n<p>Additional fix for <code>get_fact_or_default</code>:</p>\n<p><code>trace!</code> treats <code>reg</code> as VirtualReg and it will panic when \"reg\" is RealReg and<br>\n<code>trace-log</code> feature is enabled.</p>\n<p>[1]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_logic.wat\n(module\n  (func (export \"test_logic\") (result i32) (i32.const 0x100010))\n)\n</code></pre></div>\n<p>[2]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_const.wat\n(module\n  (func (export \"test_constant\") (result i64) (i64.const 0x0009ffffffff))\n)\n</code></pre></div>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 404630802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701176473
    },
    {
        "content": "<p>feilongjiang edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>:</p>\n<blockquote>\n<p>Hi team, please consider:<br>\nThis patch fixes several aarch64 check_constant failures:</p>\n<ol>\n<li>\n<p><code>check_subsume</code> for <code>AluRRImmLogic</code> failed due to the mismatch of fact width</p>\n<p>isle rule for <code>orr_imm</code> always generates fact with bit_width 64 regardless of<br>\nimmediate type. So when Type is I32, <code>check_subsume</code> will be failed.<br>\nThis could be reproduced with the simple wasm module [1].</p>\n</li>\n<li>\n<p><code>MovN</code> generates incorrect fact range value when <code>first_is_inverted</code> is true</p>\n<p><code>running_value</code> should be calculated as <code>!(((!imm16) &amp; 0xffff) &lt;&lt; shift)</code> or<br>\n<code>!(u64::from(imm.bits) &lt;&lt; shift)</code><br>\nThis could be reproduced with the simple wasm module [2].</p>\n</li>\n</ol>\n<p>Added two test cases in cranelift/filetests/filetests/pcc/succeed/const.clif.</p>\n<p>Additional fix for <code>get_fact_or_default</code>:</p>\n<p><code>trace!</code> treats <code>reg</code> as VirtualReg and it will panic when <code>reg</code> is RealReg and<br>\n<code>trace-log</code> feature is enabled.</p>\n<p>[1]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_logic.wat\n(module\n  (func (export \"test_logic\") (result i32) (i32.const 0x100010))\n)\n</code></pre></div>\n<p>[2]:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>;; test_const.wat\n(module\n  (func (export \"test_constant\") (result i64) (i64.const 0x0009ffffffff))\n)\n</code></pre></div>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 404818343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701249264
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593#issuecomment-1832219264\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>:</p>\n<blockquote>\n<p>Thanks for the PR!</p>\n<p>The two folks who are best to review this PR, @cfallin and @fitzgen, are both out on leave right now. They'll get to this PR when they get back though (@fitzgen's coming back mid-December). Thanks for your patience</p>\n</blockquote>",
        "id": 404901932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701274429
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>.</p>",
        "id": 404954972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701294256
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593#pullrequestreview-1776033303\">PR review</a>:</p>\n<blockquote>\n<p>LGTM with one suggestion to try before we merge this.</p>\n</blockquote>",
        "id": 407308065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702323720
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593#pullrequestreview-1776033303\">PR review</a>:</p>\n<blockquote>\n<p>LGTM with one suggestion to try before we merge this.</p>\n</blockquote>",
        "id": 407308066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702323720
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593#discussion_r1423039958\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this can be simplified to</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        \"get_fact_or_default: reg {reg:?} -&gt; {:?}\"\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 407308067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702323720
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593#pullrequestreview-1776033303\">PR review</a>:</p>\n<blockquote>\n<p>LGTM with one suggestion to try before we merge this. Thanks!</p>\n</blockquote>",
        "id": 407308132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702323731
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593#issuecomment-1850766980\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>:</p>\n<blockquote>\n<p>And thanks for your patience!</p>\n</blockquote>",
        "id": 407308164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702323750
    },
    {
        "content": "<p>feilongjiang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>.</p>",
        "id": 407434371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702374031
    },
    {
        "content": "<p>feilongjiang <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593#issuecomment-1851660452\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>:</p>\n<blockquote>\n<p>@fitzgen Thanks for the review and suggestions!</p>\n</blockquote>",
        "id": 407434440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702374063
    },
    {
        "content": "<p>feilongjiang updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>.</p>",
        "id": 407435424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702374409
    },
    {
        "content": "<p><strong>feilongjiang</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>.</p>",
        "id": 407470705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702386198
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593#pullrequestreview-1778306130\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 407550903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702409831
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7593\">PR #7593</a>.</p>",
        "id": 407558246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702412013
    }
]