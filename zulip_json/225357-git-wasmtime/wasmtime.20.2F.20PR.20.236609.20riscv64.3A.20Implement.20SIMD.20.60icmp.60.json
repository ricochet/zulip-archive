[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6609\">PR #6609</a> from <code>afonso360:riscv-simd-icmp</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>These are implemented as a combination of two steps, mask generation and mask expansion. Our comparison rules only return their results as a mask register, so we need to expand the mask into lane sized elements.</p>\n<p>We have 20 (!) comparison instructions, nearly the full table of all IntCC codes in VV, VX and VI formats. However there are some holes in this table.</p>\n<p>They are:</p>\n<ul>\n<li><code>vmsltu.vi</code> (Less than Unsigned (Vec-Imm))</li>\n<li><code>vmslt.vi</code> (Less than (Vec-Imm))</li>\n<li><code>vmsgtu.vv</code> (Greater than Unsigned (Vec-Vec))</li>\n<li><code>vmsgt.vv</code> (Greater than (Vec-Vec))</li>\n<li><code>vmsgeu.*</code> (Greater than or equal Unsigned (All formats))</li>\n<li><code>vmsge.*</code> (Greater than or equal (All formats))</li>\n</ul>\n<p>Most of these can be replaced with the inverted IntCC instruction. To minimize the size of this initial PR I've only implemented rules for the opcodes that we have a direct translation.</p>\n<p>However, in order to get all IntCC's working I've implemented some of the inverted instruction which are <code>vmsgtu.vv</code>, <code>vmsgt.vv</code>, <code>vmsgeu.vv</code>, <code>vmsge.vv</code>. These are implemented as alias to their inverted counterparts.</p>\n<p>I'm planning on adding a follow up commit with the rest of the VX and VI rules in both the LHS an RHS sides. We should end up with 5 rules per IntCC once this is all done.</p>\n<hr>\n<p>I've split the actual mask expansion into it's own separate rule since we are going to need it for the <code>fcmp</code> rules as well.</p>\n<p>The instruction selection for <code>icmp</code> is on a separate rule simply because the rules end up less verbose than if they were inlined directly into the <code>icmp</code> rule.</p>\n</blockquote>",
        "id": 368049740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687293748
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6609\">PR #6609</a>.</p>",
        "id": 368049742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687293749
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6609\">PR #6609</a>.</p>",
        "id": 368049744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687293749
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6609\">PR #6609</a>.</p>",
        "id": 368049746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687293750
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6609\">PR #6609</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR Implements SIMD <code>icmp</code> for RISC-V. These rules are implemented as a combination of two steps, mask generation and mask expansion. Our comparison rules only return their results as a mask register, so we need to expand the mask into lane sized elements.</p>\n<p>We have 20 (!) comparison instructions, nearly the full table of all IntCC codes in VV, VX and VI formats. However there are some holes in this table.</p>\n<p>They are:</p>\n<ul>\n<li><code>vmsltu.vi</code> (Less than Unsigned (Vec-Imm))</li>\n<li><code>vmslt.vi</code> (Less than (Vec-Imm))</li>\n<li><code>vmsgtu.vv</code> (Greater than Unsigned (Vec-Vec))</li>\n<li><code>vmsgt.vv</code> (Greater than (Vec-Vec))</li>\n<li><code>vmsgeu.*</code> (Greater than or equal Unsigned (All formats))</li>\n<li><code>vmsge.*</code> (Greater than or equal (All formats))</li>\n</ul>\n<p>Most of these can be replaced with the inverted IntCC instruction. To minimize the size of this initial PR I've only implemented rules for the opcodes that we have a direct translation.</p>\n<p>However, in order to get all IntCC's working I've implemented some of the inverted instruction which are <code>vmsgtu.vv</code>, <code>vmsgt.vv</code>, <code>vmsgeu.vv</code>, <code>vmsge.vv</code>. These are implemented as alias to their inverted counterparts.</p>\n<p>I'm planning on adding a follow up commit with the rest of the VX and VI rules in both the LHS an RHS sides. We should end up with 5 rules per IntCC once this is all done.</p>\n<hr>\n<p>I've split the actual mask expansion into it's own separate rule since we are going to need it for the <code>fcmp</code> rules as well.</p>\n<p>The instruction selection for <code>icmp</code> is on a separate rule simply because the rules end up less verbose than if they were inlined directly into the <code>icmp</code> rule.</p>\n</blockquote>",
        "id": 368049868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687293787
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6609\">PR #6609</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR Implements SIMD <code>icmp</code> for RISC-V. These rules are implemented as a combination of two steps, mask generation and mask expansion. Our comparison rules only return their results as a mask register, so we need to expand the mask into lane sized elements.</p>\n<p>We have 20 (!) comparison instructions, nearly the full table of all IntCC codes in VV, VX and VI formats. However there are some holes in this table.</p>\n<p>They are:</p>\n<ul>\n<li><code>vmsltu.vi</code> (Less than Unsigned (Vec-Imm))</li>\n<li><code>vmslt.vi</code> (Less than (Vec-Imm))</li>\n<li><code>vmsgtu.vv</code> (Greater than Unsigned (Vec-Vec))</li>\n<li><code>vmsgt.vv</code> (Greater than (Vec-Vec))</li>\n<li><code>vmsgeu.*</code> (Greater than or equal Unsigned (All formats))</li>\n<li><code>vmsge.*</code> (Greater than or equal (All formats))</li>\n</ul>\n<p>Most of these can be replaced with the inverted IntCC instruction. To minimize the size of this initial PR I've only implemented rules for the opcodes that we have a direct translation.</p>\n<p>However, in order to get all IntCC's working I've implemented some of the inverted instruction which are <code>vmsgtu.vv</code>, <code>vmsgt.vv</code>, <code>vmsgeu.vv</code>, <code>vmsge.vv</code>. These are implemented as alias to their inverted counterparts (with the inputs swapped).</p>\n<p>I'm planning on adding a follow up commit with the rest of the VX and VI rules in both the LHS an RHS sides. We should end up with 5 rules per IntCC once this is all done.</p>\n<hr>\n<p>I've split the actual mask expansion into it's own separate rule since we are going to need it for the <code>fcmp</code> rules as well.</p>\n<p>The instruction selection for <code>icmp</code> is on a separate rule simply because the rules end up less verbose than if they were inlined directly into the <code>icmp</code> rule.</p>\n</blockquote>",
        "id": 368051236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687294243
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6609#pullrequestreview-1489200564\">PR review</a>:</p>\n<blockquote>\n<p>Nice! I like the organization of the lowerings as it's quite clear to see what's going on and scan over things quickly if necessary.</p>\n</blockquote>",
        "id": 368066152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687300293
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6609\">PR #6609</a>.</p>",
        "id": 368201301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687346630
    }
]