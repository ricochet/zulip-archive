[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1194558058\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>Happy to merge once merge conflicts are resolved.</p>\n</blockquote>",
        "id": 290810686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658779216
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195667382\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>@cfallin I have also noticed that <code>x16</code> and <code>x17</code> are reserved as spill temporaries, hence not allocatable - is that still relevant for regalloc2?</p>\n</blockquote>",
        "id": 290914517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658851015
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195717857\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>@akirilov-arm yes, unfortunately... regalloc2 actually doesn't need any temporaries anymore, but aarch64 itself does. The reason is that a spillslot may be at a greater offset from <code>sp</code> or <code>fp</code> than we can reach with an <code>imm12</code>, so we need a sequence of instructions to synthesize the address of a spillslot before spilling or reloading. That sequence itself can't require spilling another register if all registers are full (as they are likely to be if we're spilling in the first place), so we need to set aside <code>x16</code> for that.</p>\n<p>If I recall correctly, <code>x17</code> is used in stack-limit check sequences, but my memory is less clear; I'd have to go look at the use-cases again.</p>\n</blockquote>",
        "id": 290920550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658853481
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195719582\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>To follow up on that, I guess an alternative approach would be to reserve a small-offset slot to spill another victim to if we need to compute a spillslot address at a large distance away -- so we can bootstrap our way there with no registers initially free. That's a little more complexity but I wouldn't be averse to reviewing a PR if someone wants to attempt that.</p>\n</blockquote>",
        "id": 290920821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658853577
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195736791\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>Another alternative is to reserve a vector register, which would give us the same space as 2 GPRs.</p>\n<p>One further idea - if the <code>preserve_frame_pointers</code> flag introduced by PR #4469 is true, then we should be able to use <code>lr</code>/<code>x30</code> as a temporary register instead of making it unallocatable as it is right now.</p>\n</blockquote>",
        "id": 290923103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658854488
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195746035\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<blockquote>\n<p>One further idea - if the preserve_frame_pointers flag introduced by PR <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469\">https://github.com/bytecodealliance/wasmtime/pull/4469</a> is true, then we should be able to use lr/x30 as a temporary register instead of making it unallocatable as it is right now.</p>\n</blockquote>\n<p>Ah, that's a really interesting idea actually. I guess it's not needed for unwind (that starts from <code>fp</code>), and in the middle of this sequence we won't be doing any calls, and it's otherwise usable as a regular GPR... I like it.</p>\n</blockquote>",
        "id": 290924423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658855035
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195750992\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>The optimal solution would be to adjust the set of allocatable registers on a per-function basis, so that we could do the same for non-leaf functions (or leaf functions that use the stack) when <code>preserve_frame_pointers</code> is false, but I don't think the backend plumbing is set to enable this.</p>\n</blockquote>",
        "id": 290925081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658855322
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195750992\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>The optimal solution would be to adjust the set of allocatable registers on a per-function basis, so that we could do the same for non-leaf functions (or leaf functions that use the stack) when <code>preserve_frame_pointers</code> is false, but I don't think the backend plumbing is set to enable this.</p>\n<p><strong>P.S.</strong> Actually I didn't mean to use <code>x30</code> as a spill temporary, but as a generic temporary register, i.e. put it in the set of preferred registers for allocation; calls would be set up to clobber it. Restricting it to a spill temporary is also an interesting idea because we would be able to reclaim either <code>x16</code> or <code>x17</code>.</p>\n</blockquote>",
        "id": 290925807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658855643
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195750992\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>The optimal solution would be to adjust the set of allocatable registers on a per-function basis, so that we could do the same for non-leaf functions (or leaf functions that use the stack) when <code>preserve_frame_pointers</code> is false, but I don't think the backend plumbing is set to enable this.</p>\n<p><strong>P.S.</strong> Actually I didn't mean to use <code>x30</code> as a spill temporary, but as a generic temporary register, i.e. put it in the set of preferred registers for allocation; calls would be set up to clobber it, so that regalloc would do the right thing. Restricting it to a spill temporary is also a viable idea because we would be able to reclaim either <code>x16</code> or <code>x17</code>; I suppose I am just ambituous and want all of them <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>\n</blockquote>",
        "id": 290926125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658855793
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195759992\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>I'm curious about the small-offset spillslot idea. I haven't looked at aarch64 details and don't know enough about Cranelift internals yet, but my assumptions are:</p>\n<ul>\n<li>The imm12 is a signed 12-bit immediate, so this challenge only happens if the stack frame is bigger than 2kB.</li>\n<li><code>sp</code> and <code>fp</code> point to opposite ends of the stack frame so if you pick whichever is closer as the base then you could avoid spilling for any frame smaller than 4kB.</li>\n<li>So I imagine there's an opportunity for a lot of functions to gain an extra register.</li>\n<li>But we don't know how big the stack frame is until after register allocation because it depends on how many spills are inserted.</li>\n<li>Still, we could decide after regalloc whether to add a small-offset spillslot; if we need it, making the stack frame bigger doesn't change the fact that we need it.</li>\n</ul>\n<p>Something along those lines?</p>\n</blockquote>",
        "id": 290926251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658855847
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195764857\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521\">issue #4521</a>:</p>\n<blockquote>\n<p>@jameysharp yep, that's more or less it.</p>\n<p>@akirilov-arm re:</p>\n<blockquote>\n<p>I don't think the backend plumbing is set to enable this</p>\n</blockquote>\n<p>we could definitely change that! The only thing I want to hold as a hard requirement is that we don't build it dynamically per-function (because there are lots of tiny functions and that would be a nontrivial cost); right now we build it once when the compiler backend is constructed. We could perhaps build a few versions of it though, and return the right one in the <code>regalloc2::Function</code> trait -- one for leaf functions and one without; and variations based on compiler flags.</p>\n<p>Anyway we're getting on quite a tangent here but if you're interested, please feel free to file an issue to \"reclaim spilltmp registers on aarch64\" as a future enhancement to track this!</p>\n</blockquote>",
        "id": 290926908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658856160
    }
]