[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934#issuecomment-1455231331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934\">issue #5934</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 339752079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678056283
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934#issuecomment-1456538045\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934\">issue #5934</a>:</p>\n<blockquote>\n<p>Yes, in that particular test case, the only reason I used <code>bindgen!</code> was to ensure that it doesn't choke on wildcards.  In a more realistic scenario, a world could contain a mix of non-wildcard interfaces and wildcard interfaces.  You'd still want generated bindings for the former even if you don't need them for the latter.</p>\n<p>Also, although <a href=\"https://github.com/WebAssembly/component-model/issues/172\">https://github.com/WebAssembly/component-model/issues/172</a> does not include \"mixed\" interfaces which contain both wildcard and non-wildcard functions, it would be pretty trivial to add support for that.  For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">wildcards</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">imports</span>: <span class=\"nc\">interface</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">*</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span>\n        <span class=\"nc\">foo</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span>\n<span class=\"w\">        </span><span class=\"n\">bar</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>BTW, my initial implementation (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925\">https://github.com/bytecodealliance/wasmtime/pull/5925</a>) _did_ generate code for wildcards, but that code ended up just being wrappers around the Wasmtime API which didn't add much value vs. using the API directly.  If you think there _is_ value to be added via code generation, we can revisit that.</p>\n</blockquote>",
        "id": 339922322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678122385
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934#issuecomment-1456734223\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934\">issue #5934</a>:</p>\n<blockquote>\n<p>In some sense the whole <code>bindgen!</code> macro is a pretty thin wrapper around the component embedding API, but I think the main value from it is that it gets all the types right and you don't have to think about it. From another perspective any type-level bugs are caught by <code>rustc</code> and aren't logic bugs in your own code. Manually calling linker functions, though, you can get past <code>rustc</code> but accidentally deviate from the <code>*.wit</code> which I think is nice to fix if we can. More-or-less I do think that it's wortwhile to generate typed bindings to <code>*</code>-imports/exports to make it idomatic with the rest of <code>*.wit</code>-generated bindings and otherwise make it so you don't have to think about the types.</p>\n</blockquote>",
        "id": 339941434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678127686
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934#issuecomment-1456741797\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934\">issue #5934</a>:</p>\n<blockquote>\n<p>Fair enough.  Would you mind taking a look at the diff for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925\">https://github.com/bytecodealliance/wasmtime/pull/5925</a> and provide feedback on that, then?  I can close this PR and reopen that one if desired.  I just want to make sure we're aligned about what the generated code should look like first.</p>\n</blockquote>",
        "id": 339942368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678127964
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934#issuecomment-1456786286\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934\">issue #5934</a>:</p>\n<blockquote>\n<p>For sure yeah, the main thing I'd consider on #5925 is sort of along the same lines of catching issues earlier rather than later. There it looks like the strategy is that <code>*</code>-imports bottom out into a <code>fn call(&amp;mut self, name: &amp;str, ...)</code> trait method but an alternative would be for the host to pass in some sort of configuration \"I support <code>call</code> with these names\" which then fails instantiation if enough names weren't supplied. My original idea here was to pass in a vector of named trait objects, but that may be too inefficient for the intended use cases (I'm not sure).</p>\n<p>I don't feel super strongly about this particular point though myself. It feels a little odd to pass around the component when you're adding something to a linker but that's probably just me needing to get over my preconceptions about this. In any case I do think that #5925 is better in the sense of \"everything is type-checked for you\" so I think that would be a better starting point than not generating bindings for <code>*</code></p>\n</blockquote>",
        "id": 339947416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678129538
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934#issuecomment-1457364838\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934\">issue #5934</a>:</p>\n<blockquote>\n<p>@alexcrichton I've implemented code generation per your feedback.  Please let me know what you think.</p>\n</blockquote>",
        "id": 340003211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678153874
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934#issuecomment-1459049033\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934\">issue #5934</a>:</p>\n<blockquote>\n<p>@alexcrichton Thanks for all your feedback.  I think I've addressed everything so far.</p>\n</blockquote>",
        "id": 340237675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678233289
    }
]