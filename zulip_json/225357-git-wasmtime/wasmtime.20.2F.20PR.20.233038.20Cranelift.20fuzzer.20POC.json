[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038\">PR #3038</a> from <code>fuzz-gen</code> to <code>main</code>:</p>\n<blockquote>\n<p>Hey! </p>\n<p>Here's an initial version of the cranelift fuzzer.</p>\n<p>We generate a random cranelift function based on input bytes from the fuzzer. Currently we can generate 7 instructions, but it is already enough to get us into trouble.</p>\n<p>There is also a <code>gen_testcase</code> util that grabs fuzzer artifacts and converts them into clif files for easier testing.</p>\n<p>In order for the fuzzer to be useful in testing DivByZero traps we need to disable overflow checks:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">RUSTFLAGS</span><span class=\"o\">=</span><span class=\"s\">\"-C overflow-checks=off\"</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">fuzzgen</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Otherwise, the interpreter crashes immediately with overflows (We also need to fix this).</p>\n<p>I've based my design a lot on @fitzgen 's <a href=\"https://fitzgeraldnick.com/2020/08/24/writing-a-test-case-generator.html\">blog post about wasm-smith</a>. Its what made me start thinking about building this for cranelift in the first place. Thanks!</p>\n<ul>\n<li>\n<p>Organization<br>\n    * I've created a new <code>cargo-fuzz</code> package for cranelift, should I merge the fuzzer with wasmtime's fuzzers?<br>\n    * Is there a way to keep track which cranelift features we are covering / not? It would be useful to keep track of this, so that we don't accidentally miss any feature.</p>\n</li>\n<li>\n<p>Design questions:<br>\n    * How do we deal with arbitrary memory accesses?<br>\n        * @cfallin suggested we <a href=\"#narrow/stream/217117-cranelift/topic/aarch64.20fuzzing/near/243585502\">run on the interpreter first and check for invalid memory accesses</a>.<br>\n        * @abrown <a href=\"#narrow/stream/217117-cranelift/topic/aarch64.20fuzzing/near/243586449\">mentioned</a> that we still need some work on the interpreter before being able to do this<br>\n    * How do we deal with traps?<br>\n        * This first version is also a POC for this, the idea being that the fuzzer will generate a div by zero or overflow.<br>\n        * We <em>should</em> be able to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc6f75107d03b50ef2bb5a9419e38680347a2909/cranelift/interpreter/src/step.rs#L651\">catch this in the interpreter</a><br>\n        * If the program traps, it would be useful to run it on the host and check for the same Trap. Can we do this?<br>\n    * How do we deal with infinite loops? <br>\n        * My idea here is to allow a fixed number of steps on the interpreter, and if we exceed those, we just ignore this program.<br>\n    * Is there any other <em>bad</em> behavior that we need to handle specially?</p>\n<p>* Should we distinguish between pointer types and i64's in the generator? We can just use any i64 and the program will crash until it does a valid thing, This might not be great in terms of fuzzing efficiency but it might generate more interesting programs.</p>\n</li>\n</ul>\n<p>CC: @cfallin, @andrewbrown, @fitzgen, @bjorn3 from the earlier <a href=\"#narrow/stream/217117-cranelift/topic/aarch64.20fuzzing\">fuzzer discussion</a></p>\n</blockquote>",
        "id": 244074273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624811666
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038\">PR #3038</a> from <code>fuzz-gen</code> to <code>main</code>.</p>",
        "id": 244074790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812467
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-693435345\">PR review</a>.</p>",
        "id": 244074997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812733
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659347887\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>use libfuzzer_sys::fuzz_target;\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 244074999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812733
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-693435345\">PR review</a>.</p>",
        "id": 244075000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812733
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659347566\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 244075001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812733
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659347587\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 244075002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812733
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659347613\">PR review comment</a>:</p>\n<blockquote>\n<p>This probably needs to be changed.</p>\n</blockquote>",
        "id": 244075003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812733
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659347998\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>use cranelift:codegen::ir::Function;\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 244075004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812733
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659347863\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>cranelift = { path = \"../umbrella\" }\ncranelift-filetests = { path = \"../filetests\" }\ncranelift-interpreter = { path = \"../interpreter\" }\ncranelift-fuzzgen = { path = \"../fuzzgen\" }\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 244075005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812733
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659347556\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you please move the doc comments above the attributes?</p>\n</blockquote>",
        "id": 244075006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624812733
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038\">PR #3038</a> from <code>fuzz-gen</code> to <code>main</code>.</p>",
        "id": 244075648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624813758
    }
]