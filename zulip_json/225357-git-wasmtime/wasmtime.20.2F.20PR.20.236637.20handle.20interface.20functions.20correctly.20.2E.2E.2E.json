[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637\">PR #6637</a> from <code>dicej:functions_in_instances</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Many months ago, I implemented <code>func_new</code>, but only supporting top-level function imports.  If you tried to link a host function under an imported interface, it would mistakenly treat it as a top-level function and either error out if it couldn't find a corresponding type definition in the passed <code>&amp;Component</code>; or, if it found a top-level function that happened to have the same name, it would use that type (which would coincidentally work if the type happens to match, but lead to a runtime error later on otherwise).</p>\n<p>This fixes the issue by looking up the correct component instance when necessary and getting the type from there.</p>\n<p>Note I've made no effort to optimize for performance here.  Happy to revisit that if there's a need.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 369034419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687559208
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637\">PR #6637</a>.</p>",
        "id": 369034421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687559209
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637\">PR #6637</a>.</p>",
        "id": 369034422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687559209
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637#pullrequestreview-1496155330\">PR review</a>:</p>\n<blockquote>\n<p>I've gone ahead and reviewed this because I want to better understand the component-model implementation, but I want to leave final approval to @alexcrichton.</p>\n<p>I think this does what you said it should do <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>.</p>\n<p>That said, I wonder if you can assign sequential integers to instances, somewhat like <code>Strings::intern</code> does for names. Then a <code>Linker</code> would have a single <code>Vec&lt;NameMap&gt;</code> indexed by this sequential instance ID; <code>Definition::Instance</code> would store this index instead of the full map; and a <code>LinkerInstance</code> would store only its instance index instead of a full path.</p>\n<p>If that's feasible, I think it's simpler than the reference-counted singly-linked-list. As a nice bonus, it's also asymptotically faster since <code>func_new</code> can find the right map in constant time instead of linear time.</p>\n</blockquote>",
        "id": 369042864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687563634
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637#pullrequestreview-1496155330\">PR review</a>:</p>\n<blockquote>\n<p>I've gone ahead and reviewed this because I want to better understand the component-model implementation, but I want to leave final approval to @alexcrichton.</p>\n<p>I think this does what you said it should do <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>.</p>\n<p>That said, I wonder if you can assign sequential integers to instances, somewhat like <code>Strings::intern</code> does for names. Then a <code>Linker</code> would have a single <code>Vec&lt;NameMap&gt;</code> indexed by this sequential instance ID; <code>Definition::Instance</code> would store this index instead of the full map; and a <code>LinkerInstance</code> would store only its instance index instead of a full path.</p>\n<p>If that's feasible, I think it's simpler than the reference-counted singly-linked-list. As a nice bonus, it's also asymptotically faster since <code>func_new</code> can find the right map in constant time instead of linear time.</p>\n</blockquote>",
        "id": 369042865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687563634
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637#discussion_r1240480077\">PR review comment</a>:</p>\n<blockquote>\n<p>Should these uses of <code>name</code> all be the string version of the name, rather than the interned usize?</p>\n</blockquote>",
        "id": 369042866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687563634
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637#discussion_r1240526322\">PR review comment</a>:</p>\n<blockquote>\n<p>Yup, good catch.</p>\n</blockquote>",
        "id": 369044356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687564640
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637\">PR #6637</a>.</p>",
        "id": 369044491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687564715
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637\">PR #6637</a>.</p>",
        "id": 369045008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687565000
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637#pullrequestreview-1496259244\">PR review</a>:</p>\n<blockquote>\n<p>Seems reasonable to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>I'd be slightly averse though to a custom <code>Rc</code>-based linked list, so I'd lean more towards something <code>Vec</code> like such as this (feel free to take it or leave it though)</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wasmtime/src/component/linker.rs b/crates/wasmtime/src/component/linker.rs</span>\n<span class=\"gh\">index 6665eccf7..db8daa89d 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/component/linker.rs</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/component/linker.rs</span>\n<span class=\"gu\">@@ -10,7 +10,6 @@ use std::future::Future;</span>\n<span class=\"w\"> </span>use std::marker;\n<span class=\"w\"> </span>use std::ops::Deref;\n<span class=\"w\"> </span>use std::pin::Pin;\n<span class=\"gd\">-use std::rc::Rc;</span>\n<span class=\"w\"> </span>use std::sync::Arc;\n<span class=\"w\"> </span>use wasmtime_environ::component::TypeDef;\n<span class=\"w\"> </span>use wasmtime_environ::PrimaryMap;\n<span class=\"gu\">@@ -25,6 +24,7 @@ pub struct Linker&lt;T&gt; {</span>\n<span class=\"w\"> </span>    engine: Engine,\n<span class=\"w\"> </span>    strings: Strings,\n<span class=\"w\"> </span>    map: NameMap,\n<span class=\"gi\">+    path: Vec&lt;usize&gt;,</span>\n<span class=\"w\"> </span>    allow_shadowing: bool,\n<span class=\"w\"> </span>    _marker: marker::PhantomData&lt;fn() -&gt; T&gt;,\n<span class=\"w\"> </span>}\n<span class=\"gu\">@@ -35,25 +35,15 @@ pub struct Strings {</span>\n<span class=\"w\"> </span>    strings: Vec&lt;Arc&lt;str&gt;&gt;,\n<span class=\"w\"> </span>}\n\n<span class=\"gd\">-struct PathCell {</span>\n<span class=\"gd\">-    name: usize,</span>\n<span class=\"gd\">-    next: Path,</span>\n<span class=\"gd\">-}</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-#[derive(Clone)]</span>\n<span class=\"gd\">-enum Path {</span>\n<span class=\"gd\">-    Nil,</span>\n<span class=\"gd\">-    Cell(Rc&lt;PathCell&gt;),</span>\n<span class=\"gd\">-}</span>\n<span class=\"gd\">-</span>\n<span class=\"w\"> </span>/// Structure representing an \"instance\" being defined within a linker.\n<span class=\"w\"> </span>///\n<span class=\"w\"> </span>/// Instances do not need to be actual [`Instance`]s and instead are defined by\n<span class=\"w\"> </span>/// a \"bag of named items\", so each [`LinkerInstance`] can further define items\n<span class=\"w\"> </span>/// internally.\n<span class=\"w\"> </span>pub struct LinkerInstance&lt;'a, T&gt; {\n<span class=\"gd\">-    engine: Engine,</span>\n<span class=\"gd\">-    path: Path,</span>\n<span class=\"gi\">+    engine: &amp;'a Engine,</span>\n<span class=\"gi\">+    path: &amp;'a mut Vec&lt;usize&gt;,</span>\n<span class=\"gi\">+    path_len: usize,</span>\n<span class=\"w\"> </span>    strings: &amp;'a mut Strings,\n<span class=\"w\"> </span>    map: &amp;'a mut NameMap,\n<span class=\"w\"> </span>    allow_shadowing: bool,\n<span class=\"gu\">@@ -78,6 +68,7 @@ impl&lt;T&gt; Linker&lt;T&gt; {</span>\n<span class=\"w\"> </span>            strings: Strings::default(),\n<span class=\"w\"> </span>            map: NameMap::default(),\n<span class=\"w\"> </span>            allow_shadowing: false,\n<span class=\"gi\">+            path: Vec::new(),</span>\n<span class=\"w\"> </span>            _marker: marker::PhantomData,\n<span class=\"w\"> </span>        }\n<span class=\"w\"> </span>    }\n<span class=\"gu\">@@ -100,8 +91,9 @@ impl&lt;T&gt; Linker&lt;T&gt; {</span>\n<span class=\"w\"> </span>    /// the root namespace.\n<span class=\"w\"> </span>    pub fn root(&amp;mut self) -&gt; LinkerInstance&lt;'_, T&gt; {\n<span class=\"w\"> </span>        LinkerInstance {\n<span class=\"gd\">-            engine: self.engine.clone(),</span>\n<span class=\"gd\">-            path: Path::Nil,</span>\n<span class=\"gi\">+            engine: &amp;self.engine,</span>\n<span class=\"gi\">+            path: &amp;mut self.path,</span>\n<span class=\"gi\">+            path_len: 0,</span>\n<span class=\"w\"> </span>            strings: &amp;mut self.strings,\n<span class=\"w\"> </span>            map: &amp;mut self.map,\n<span class=\"w\"> </span>            allow_shadowing: self.allow_shadowing,\n<span class=\"gu\">@@ -246,8 +238,9 @@ impl&lt;T&gt; Linker&lt;T&gt; {</span>\n<span class=\"w\"> </span>impl&lt;T&gt; LinkerInstance&lt;'_, T&gt; {\n<span class=\"w\"> </span>    fn as_mut(&amp;mut self) -&gt; LinkerInstance&lt;'_, T&gt; {\n<span class=\"w\"> </span>        LinkerInstance {\n<span class=\"gd\">-            engine: self.engine.clone(),</span>\n<span class=\"gd\">-            path: self.path.clone(),</span>\n<span class=\"gi\">+            engine: self.engine,</span>\n<span class=\"gi\">+            path: self.path,</span>\n<span class=\"gi\">+            path_len: self.path_len,</span>\n<span class=\"w\"> </span>            strings: self.strings,\n<span class=\"w\"> </span>            map: self.map,\n<span class=\"w\"> </span>            allow_shadowing: self.allow_shadowing,\n<span class=\"gu\">@@ -327,13 +320,6 @@ impl&lt;T&gt; LinkerInstance&lt;'_, T&gt; {</span>\n<span class=\"w\"> </span>        name: &amp;str,\n<span class=\"w\"> </span>        func: F,\n<span class=\"w\"> </span>    ) -&gt; Result&lt;()&gt; {\n<span class=\"gd\">-        let mut names = Vec::new();</span>\n<span class=\"gd\">-        let mut path = &amp;self.path;</span>\n<span class=\"gd\">-        while let Path::Cell(cell) = path {</span>\n<span class=\"gd\">-            names.push(cell.name);</span>\n<span class=\"gd\">-            path = &amp;cell.next;</span>\n<span class=\"gd\">-        }</span>\n<span class=\"gd\">-</span>\n<span class=\"w\"> </span>        let mut map = &amp;component\n<span class=\"w\"> </span>            .env_component()\n<span class=\"w\"> </span>            .import_types\n<span class=\"gu\">@@ -341,7 +327,7 @@ impl&lt;T&gt; LinkerInstance&lt;'_, T&gt; {</span>\n<span class=\"w\"> </span>            .map(|(k, v)| (k.clone(), *v))\n<span class=\"w\"> </span>            .collect::&lt;IndexMap&lt;_, _&gt;&gt;();\n\n<span class=\"gd\">-        while let Some(name) = names.pop() {</span>\n<span class=\"gi\">+        for name in self.path.iter().copied().take(self.path_len) {</span>\n<span class=\"w\"> </span>            let name = self.strings.strings[name].deref();\n<span class=\"w\"> </span>            if let Some(ty) = map.get(name) {\n<span class=\"w\"> </span>                if let TypeDef::ComponentInstance(index) = ty {\n<span class=\"gu\">@@ -409,10 +395,8 @@ impl&lt;T&gt; LinkerInstance&lt;'_, T&gt; {</span>\n<span class=\"w\"> </span>            Definition::Instance(map) =&gt; map,\n<span class=\"w\"> </span>            _ =&gt; unreachable!(),\n<span class=\"w\"> </span>        };\n<span class=\"gd\">-        self.path = Path::Cell(Rc::new(PathCell {</span>\n<span class=\"gd\">-            name,</span>\n<span class=\"gd\">-            next: self.path,</span>\n<span class=\"gd\">-        }));</span>\n<span class=\"gi\">+        self.path.truncate(self.path_len);</span>\n<span class=\"gi\">+        self.path.push(name);</span>\n<span class=\"w\"> </span>        Ok(self)\n<span class=\"w\"> </span>    }\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 369052558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687568457
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637\">PR #6637</a>.</p>",
        "id": 369062749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687573966
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6637\">PR #6637</a>.</p>",
        "id": 372731805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688600138
    }
]