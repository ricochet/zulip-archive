[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049\">issue #9049</a>:</p>\n<blockquote>\n<p>In a discussion of egraph-framework extensions today, the idea of path-sensitive constant propagation, or propagating a constant-value fact through the dom-subtree below a branch that tests that value, came up. I wanted to record the idea, some issues it will run into, and some subsequent ideas I had for how to solve them.</p>\n<p>In brief, the idea is that if we have a value <code>x</code>, it may not have a constant value overall, but past a branch <code>v0 := icmp_imm eq x, 0; brif v0, ...</code> we know that <code>x == 0</code> on the taken branch (precisely, the target block and any blocks it dominates). We can thus do a form of cprop that is specific to that region of code. (There are some Spectre-safety implications here that we need to consider, but I'll gloss over for now.)</p>\n<p>This is different than \"classical\" cprop because we don't have a constant fact about <code>x</code>; thus, we can't simply union it with <code>iconst 0</code> in an eclass in the aegraph framework. Rather we need some notion of \"true in this region\".</p>\n<p>The formulation of constant propagation in the aegraph framework provides both a nice property to help with this, and a significant problem:</p>\n<ul>\n<li>\n<p>Benefit: the immutable data structure representation of eclasses, with union nodes, means that we can have a handle to the \"original\" eclass that is true for <code>x</code> everywhere, and derived from that (unioned with it), another handle that represents the eclass just within the dominated-by-<code>x==0</code> region. So there's no need to \"unwind\" union operations when we leave the region, or anything like that.</p>\n</li>\n<li>\n<p>Significant problem: it is incompatible with the eager-rewrite strategy that we have, and requires revisiting nodes to rewrite again.</p>\n</li>\n</ul>\n<p>To see why the latter, consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp_imm</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">should</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">we</span><span class=\"w\"> </span><span class=\"n\">know</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"err\">`</span>\n\n<span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"o\">-</span><span class=\"n\">shift</span><span class=\"o\">-</span><span class=\"n\">by</span><span class=\"o\">-</span><span class=\"n\">nonzero</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">further</span><span class=\"w\"> </span><span class=\"n\">rewrites</span><span class=\"w\"> </span><span class=\"n\">here</span>\n</code></pre></div>\n<p>We process <code>v3</code>, and do all rewrites we can; this doesn't include the key simplification for left-shift-by-zero, because the shift amount <em>isn't</em> constant-zero at this program point. We have a final eclass for <code>v3</code>. Then, at some later time, we process the branch, we enter the subtree at block2, and here we have an additional assumption <code>v2 == 0</code>. What do we do?</p>\n<p>We can union <code>v2</code> with <code>iconst 0</code>; but then there may be an arbitrary number of other expression nodes built on top of <code>v2</code> that we also should rebuild, propagating the implications of that assumption through. Furthermore we might even have later branches with <em>other</em> values (say <code>v2 == 1</code>); generally, we may have an arbitrary number of \"sub-contexts\" in which we do rewrites on the same expression nodes over again. And we have to process these later -- visiting and re-visiting the nodes over and over again -- because the branch assumptions that cause further implications may come only deep in the domtree, after we've already eagerly processed all of these expression nodes at their original appearance.</p>\n<p>To say it another way: dominance, use-before-def processing order, and acyclicity do <em>not</em> save us here, because the branches are inputs to the rewrite reasoning but come much later than the things they affect. (Someone mentioned during this discussion that it had to do with pure enodes not having a notion of dominance or location, but this would be true even if they did.)</p>\n<hr>\n<p>What to do? I don't think adding back parent pointers to the aegraph is the right solution here: that implies mutating the original knowledge base, then we have to unwind it when we leave the subregion.</p>\n<p>I also briefly considered making all nodes in a given subtree dependent on the closest dominating branch (or just an identifier for the domtree node), but I suspect this would cause significantly more harm in compile-time blowup: it would mean we can no longer amortize the storage and work of optimizations on pure nodes in the common case when branch conditions don't affect them.</p>\n<p>One solution may be to add a notion of context to the original value -&gt; eclass mapping (so we have a mapping from \"original value in this context\" tuples to eclass handles). Then probably we shouldn't eagerly compute rewrites in all possible contexts; rather we should lazily query and memoize.</p>\n<p>In the above example imagine we have some context <code>c0</code> at the root, and <code>c1</code> at the dom-subtree at block2. Then when we use <code>v2</code> at the <code>return</code> we can query the hashmap for <code>(c1, v2)</code>; if not present, re-process in that context. We can short-circuit most cases: a value is different in a context and requires a reprocessing if the context updates its mapping directly (e.g. <code>c2</code> updates <code>v1</code> to the eclass union'd with <code>0</code>) or if any of its args require reprocessing. Otherwise, pass through from parent context. Perhaps there's also a way to filter processing down to only values that feed into any control dependency and their downstream dataflow (compute with prepass).</p>\n<p>That's a pretty handwavy pointer to a possible solution but I at least wanted to record the major issue/question to ensure there is no confusion! (cc @jameysharp, @fitzgen, @elliottt, @avanhatt, @mwillsey)</p>\n</blockquote>",
        "id": 455264036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722394249
    },
    {
        "content": "<p>avanhatt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049#issuecomment-2260795124\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049\">issue #9049</a>:</p>\n<blockquote>\n<p>Thanks for writing this out! </p>\n<p>The concrete example with the <code>ishl</code> <em>before</em> the branch makes the challenge here more obvious (though I think it has a typo: it should be <code>return v3;</code> before the rewrite, right?). </p>\n<p>I like the general idea of including the context in the eclass mapping. I don't fully follow the \"making all nodes in a given subtree dependent on the closest dominating branch\" alternative (dependent in what sense? How would that revisit <code>v2</code> in this case?). That's probably fine though if we think the  <code>(context, value)</code> key idea is a better one anyway. </p>\n</blockquote>",
        "id": 455405002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722439710
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049\">issue #9049</a>:</p>\n<blockquote>\n<p>In a discussion of egraph-framework extensions today, the idea of path-sensitive constant propagation, or propagating a constant-value fact through the dom-subtree below a branch that tests that value, came up. I wanted to record the idea, some issues it will run into, and some subsequent ideas I had for how to solve them.</p>\n<p>In brief, the idea is that if we have a value <code>x</code>, it may not have a constant value overall, but past a branch <code>v0 := icmp_imm eq x, 0; brif v0, ...</code> we know that <code>x == 0</code> on the taken branch (precisely, the target block and any blocks it dominates). We can thus do a form of cprop that is specific to that region of code. (There are some Spectre-safety implications here that we need to consider, but I'll gloss over for now.)</p>\n<p>This is different than \"classical\" cprop because we don't have a constant fact about <code>x</code>; thus, we can't simply union it with <code>iconst 0</code> in an eclass in the aegraph framework. Rather we need some notion of \"true in this region\".</p>\n<p>The formulation of constant propagation in the aegraph framework provides both a nice property to help with this, and a significant problem:</p>\n<ul>\n<li>\n<p>Benefit: the immutable data structure representation of eclasses, with union nodes, means that we can have a handle to the \"original\" eclass that is true for <code>x</code> everywhere, and derived from that (unioned with it), another handle that represents the eclass just within the dominated-by-<code>x==0</code> region. So there's no need to \"unwind\" union operations when we leave the region, or anything like that.</p>\n</li>\n<li>\n<p>Significant problem: it is incompatible with the eager-rewrite strategy that we have, and requires revisiting nodes to rewrite again.</p>\n</li>\n</ul>\n<p>To see why the latter, consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp_imm</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">should</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">we</span><span class=\"w\"> </span><span class=\"n\">know</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"err\">`</span>\n\n<span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"o\">-</span><span class=\"n\">shift</span><span class=\"o\">-</span><span class=\"n\">by</span><span class=\"o\">-</span><span class=\"n\">nonzero</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">further</span><span class=\"w\"> </span><span class=\"n\">rewrites</span><span class=\"w\"> </span><span class=\"n\">here</span>\n</code></pre></div>\n<p>We process <code>v3</code>, and do all rewrites we can; this doesn't include the key simplification for left-shift-by-zero, because the shift amount <em>isn't</em> constant-zero at this program point. We have a final eclass for <code>v3</code>. Then, at some later time, we process the branch, we enter the subtree at block2, and here we have an additional assumption <code>v2 == 0</code>. What do we do?</p>\n<p>We can union <code>v2</code> with <code>iconst 0</code>; but then there may be an arbitrary number of other expression nodes built on top of <code>v2</code> that we also should rebuild, propagating the implications of that assumption through. Furthermore we might even have later branches with <em>other</em> values (say <code>v2 == 1</code>); generally, we may have an arbitrary number of \"sub-contexts\" in which we do rewrites on the same expression nodes over again. And we have to process these later -- visiting and re-visiting the nodes over and over again -- because the branch assumptions that cause further implications may come only deep in the domtree, after we've already eagerly processed all of these expression nodes at their original appearance.</p>\n<p>To say it another way: dominance, use-before-def processing order, and acyclicity do <em>not</em> save us here, because the branches are inputs to the rewrite reasoning but come much later than the things they affect. (Someone mentioned during this discussion that it had to do with pure enodes not having a notion of dominance or location, but this would be true even if they did.)</p>\n<hr>\n<p>What to do? I don't think adding back parent pointers to the aegraph is the right solution here: that implies mutating the original knowledge base, then we have to unwind it when we leave the subregion.</p>\n<p>I also briefly considered making all nodes in a given subtree dependent on the closest dominating branch (or just an identifier for the domtree node), but I suspect this would cause significantly more harm in compile-time blowup: it would mean we can no longer amortize the storage and work of optimizations on pure nodes in the common case when branch conditions don't affect them.</p>\n<p>One solution may be to add a notion of context to the original value -&gt; eclass mapping (so we have a mapping from \"original value in this context\" tuples to eclass handles). Then probably we shouldn't eagerly compute rewrites in all possible contexts; rather we should lazily query and memoize.</p>\n<p>In the above example imagine we have some context <code>c0</code> at the root, and <code>c1</code> at the dom-subtree at block2. Then when we use <code>v2</code> at the <code>return</code> we can query the hashmap for <code>(c1, v2)</code>; if not present, re-process in that context. We can short-circuit most cases: a value is different in a context and requires a reprocessing if the context updates its mapping directly (e.g. <code>c2</code> updates <code>v1</code> to the eclass union'd with <code>0</code>) or if any of its args require reprocessing. Otherwise, pass through from parent context. Perhaps there's also a way to filter processing down to only values that feed into any control dependency and their downstream dataflow (compute with prepass).</p>\n<p>That's a pretty handwavy pointer to a possible solution but I at least wanted to record the major issue/question to ensure there is no confusion! (cc @jameysharp, @fitzgen, @elliottt, @avanhatt, @mwillsey)</p>\n</blockquote>",
        "id": 455417335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722441952
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049#issuecomment-2260875739\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049\">issue #9049</a>:</p>\n<blockquote>\n<p>Typo fixed, thanks!</p>\n<p>(The example I was trying to describe yesterday did have the ishl up at the top as well; maybe that wasn't clear and why folks were so confused...)</p>\n<blockquote>\n<p>dependent in what sense? How would that revisit v2 in this case?</p>\n</blockquote>\n<p>It's a little handwavy but the idea would be to make the branch an actual input to the operator -- or, when the def is above the branch, have another \"make control dependent\" pseudo-op that takes the original value and the control input, I guess. Now that I game that out further I like it even less so I think the context-dependent lookup table is definitely the right way to go.</p>\n</blockquote>",
        "id": 455417955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722442086
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049#issuecomment-2261023841\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049\">issue #9049</a>:</p>\n<blockquote>\n<p>Thanks for writing this up! I was so confused yesterday but I think I get it now.</p>\n<p>It might eventually be useful to also allow path-dependent optimizations based on instructions which are not block terminators, although we'd need other changes before that would matter. I think that probably still works with the \"context\" approach.</p>\n<ul>\n<li>Currently, <code>trapnz</code> is legalized to a branch instruction before the egraph pass, which means the above proposal works for that as-is. But if it weren't, we could conclude that its argument is 0 in instructions that it dominates. I'd like to stop legalizing it for other reasons someday, so I think that's worth thinking about.</li>\n<li>If we add support for optimizing using inequalities or range analysis, then after a division instruction we could conclude that its divisor is non-zero in instructions that it dominates.</li>\n<li>If we make both changes then <code>trapz</code> can also provide path-dependent optimization input.</li>\n</ul>\n<p>Also, there's something I think is interesting about what patterns we can collect information from around branch instructions. This:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp_imm</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n</code></pre></div>\n<p>could instead be written like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n</code></pre></div>\n<p>Certainly the same path-dependent optimizations should apply to this version, and similarly to <code>br_table</code> for everything but the default case; this form seems easier to reason about. Ideally we'll do that rewrite in the mid-end someday. Our mid-end notion of \"truthiness-preserving\" operations, including the related instruction <code>icmp_imm ne x, 0</code>, should let us rewrite those to this bare <code>brif</code> form as well.</p>\n<p>But I'm trying to figure out how to generalize the reasoning that applies to the version you wrote for non-zero constants. There's some kind of backward range analysis here, I think? Within the \"false\" block we know the branch condition was 0 so we can propagate that backward to the result of the <code>icmp</code>; if that instruction was <code>icmp_imm ne x, 23</code> then knowing it produced 0 allows us to conclude that <code>x</code> is 23. That in turn might propagate further backward and give us more constraints that we can conditionally assume. To do the same for the \"true\" branch in general we need an abstract domain supporting at least \"this value is non-zero\", such as a value range analysis, although we could go for something more specialized.</p>\n<p>I think it's interesting that this is exactly the same analysis and reasoning we want to apply to instructions within the scope of the conditional branch, only propagated backward from results to arguments.</p>\n</blockquote>",
        "id": 455443371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722447314
    },
    {
        "content": "<p>mwillsey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049#issuecomment-2261652554\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049\">issue #9049</a>:</p>\n<blockquote>\n<p>@altanh were just discussing this today, and it seems very connected to the fact that, despite ISLE being capable of top-down rewriting (if you allow recursive rules), Cranelift exclusively uses it in a bottom up way. This fundamentally means that doing something like path sensitivity will require that you either re-compute something, or pre-compute which context you'll be rewriting something under. In the setting of the above example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp_imm</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n</code></pre></div>\n<p>If you've already rewritten block2, you're pretty much out of luck; you'll have to redo because now you can do it with \"new knowledge\". If you instead did things top down:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">))</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"kd\">let</span>\n<span class=\"w\">            </span><span class=\"p\">((</span><span class=\"n\">b2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">)))</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"n\">b3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">)))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"n\">b2</span><span class=\"w\"> </span><span class=\"n\">b3</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>Here, <code>with</code> is an external constructor whose effects are <em>scoped</em>. This would likely involve an extension to ISLE (if you wanted to do it at the ISLE level, not necessary though). The semantics are to somehow \"process\" the boolean <code>v4</code> into new facts in the e-graph (only new unions at the moment, but could extend to range analysis for inequalities), and then evaluate <code>(simplify block2)</code> in the context of those new assumptions. The scoping aspect is necessary; you'd need to \"roll back\" the hashcons map to avoid leaking the fact that e.g. x = 0 or something. I agree with Chris that the functional nature of the aegraph data structures will help here.</p>\n<p>Even if you do all this outside of ISLE, you still need to ensure the same thing: that <code>block2</code> and <code>block3</code> are simplified (1) after <code>v4</code>, that way you actually get to learn something useful, and (2) they are simplified in separate \"contexts\" from one another, i.e., that the assumption of <code>v4</code> doesn't leak into the simplification of <code>block3</code>.</p>\n<p>re: how to solve this with a data structure, I think the way ISLE operates presents an opportunity to solve this problem in time rather than space. So simplification is only every executed in one context at a time (so you don't have to keep track of as much), but you need the ability to \"retract\" any assumptions when you leave a context so you don't leak anything. </p>\n</blockquote>",
        "id": 455505041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722468444
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049#issuecomment-2263837415\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049\">issue #9049</a>:</p>\n<blockquote>\n<p>@mwillsey When doing rewrites and populating e-classes, we already process blocks in an order that ensures that we visit dominating blocks before dominated blocks, defs before uses, and all that. We do rewrites as a forwards pass, in a <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bba5e681a7a688294b980314bbce12b35e59572a/cranelift/codegen/src/egraph.rs#L619\">pre-order traversal of the dom tree</a>.</p>\n<p>The twist is that our e-classes all represent pure instructions that are \"floating\" and aren't placed in the CFG skeleton until the \"elaboration\" pass that follows after the rewriting pass and after we've extracted the best e-node for each e-class.[^1] Elaboration tries to do code motion like floating value definitions up above loops (LICM) and down towards uses (to avoid partially-redundant computations). I say \"tries to do\" but it is more like \"is implemented in such a way that these things naturally occur\" because there is nowhere to push them up or down <em>from</em> because they are not in the CFG or located within any basic block until after elaboration.</p>\n<p>[^1]: FWIW, this elaboration pass is also a domtree preorder traversal, IIUC, but we delay placing values until they are demanded by used by a side-effecting instruction. And we effectively make loops demand values, so that LICM happens automatically, when possible.</p>\n<p>This separation between passes is nice, because we get all those code motion optimizations \"for free\" compared to if we were eagerly placing the best rewrite of a value at the same location as the original value while we did the rewrite pass. But it also means that if we aren't careful and keep track of the relationship between scopes and e-classes somehow <em>across the two separate passes rather than just via pushing and popping scopes while we do rewrites</em>, we might accidentally use the path-sensitive version of a value outside of its required scope.</p>\n<p>If we did egraph rewriting and code placement in a single pass, where we eagerly placed the best rewrite of an instruction at the same location as the original instruction, then what you've sketched out would work, I believe. We would need to add a separate, dedicated code motion pass, but maybe that wouldn't be too bad; the biggest concern would be compile time overhead of new passes vs folding that work into the existing egraph pass(es). But maybe that isn't a big deal because we are removing a pass from the egraphs phase and adding a code motion pass afterwards, so it all evens out? No idea.</p>\n<p>Does that make sense? Forgive me if you already understand all that and I misunderstood assumptions you were making in your comment.</p>\n</blockquote>",
        "id": 455740792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722541338
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049#issuecomment-2263961691\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9049\">issue #9049</a>:</p>\n<blockquote>\n<p>I think Max's suggestion is equivalent (as far as I can see) to switching from eager rewriting to a form of lazy rewriting, again. To restate what I think is the kernel of the problem with the example above: we see the expression for <code>v3</code> (the shift that we conditionally rewrite differently in the different contexts) <em>before</em> we see the branch and even realize the separate context exists. There may be many such contexts deeper in the domtree.</p>\n<p>I'm interpreting the functional-style \"<code>(with v4 (simplify block2))</code>\" as implying that within the dynamic scope of a context <code>v2==0</code>, we do rewrites on block2. But again block2 doesn't contain the operator that we want to rewrite differently; that operator was already seen above. So in an eager-eval world, we've already done all rewrites.</p>\n<p>(Important side-note here: the operator doesn't have a location once it's in the egraph, but it does have an original location in the input code, and that's relevant for this processing order.)</p>\n<p>If we defer applying any rewrites to a value until we use it, we could make use of all the context we have at the use-site, but many other aspects of the aegraph formulation have to change I think. At the very least, the GVN that naturally happens by deduping -- including deduping all of the nodes that are created as part of the rewrites -- breaks, because we will now only insert values into the scoped hashmap deep in the traversal.</p>\n<p>We are still not fully back to the world of conventional egraphs with batched rewrites, because on first use (in a given context) we get the final eclass handle for that context; so it's still eager in some important sense; but \"scoped-ly eager\". We'd need to carefully consider how this interacts with GVN, elab, and our domtree-based auto-subsume.</p>\n</blockquote>",
        "id": 455754734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722545422
    }
]