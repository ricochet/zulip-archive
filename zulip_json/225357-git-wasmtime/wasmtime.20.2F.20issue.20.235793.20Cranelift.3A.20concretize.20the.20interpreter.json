[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5793\">issue #5793</a>:</p>\n<blockquote>\n<p>Right now the interpreter is generic over the type of value we are interpreting, essentially allowing for abstract interpretation over symbolic values in theory. But we aren't using that functionality. And we have no plans ever to use it in the future: instead we have the egraphs pass and its support for forwards analyses, which is our framework for analyses moving forward.</p>\n<p>So can we simplify the interpreter by working with concrete values instead of a type parameter that is bounded by a trait?</p>\n<p>cc @abrown @afonso360 </p>\n</blockquote>",
        "id": 328092252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676489557
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5793\">issue #5793</a>:</p>\n<blockquote>\n<p>Right now the interpreter is generic over the type of value we are interpreting, essentially allowing for abstract interpretation over symbolic values in theory. But we aren't using that functionality. And we have no plans ever to use it in the future: instead we have the egraphs pass and its support for forwards analyses, which is our framework for analyses moving forward.</p>\n<p>So can we simplify the interpreter by working with concrete values instead of a type parameter that is bounded by a trait?</p>\n<p>cc @abrown @afonso360 </p>\n</blockquote>",
        "id": 328092253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676489557
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5793#issuecomment-1432137227\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5793\">issue #5793</a>:</p>\n<blockquote>\n<p>I had a working implementation of sparse conditional constant propagation (SCCP) that used the abstract interpreter. All of this was for another project and I recall sending @cfallin some notes on how I made it work because I was leaving on sabbatical and wasn't going to take it any further. I'm not familiar enough with the egraphs stuff yet to say whether it could do the equivalent of SCCP. If it could, I guess simplifying the interpreter makes sense; but if there's any interest in reviving that SCCP code we would want to continue to allow abstract interpretation.</p>\n</blockquote>",
        "id": 328119356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676499742
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5793#issuecomment-1435364177\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5793\">issue #5793</a>:</p>\n<blockquote>\n<p>Yup, I didn't end up finding the time to play more with @abrown's SCCP but it was pretty neat (sorry!). I think at this point, we're pretty close to being able to do the equivalent (branch folding plus constants-through-blockparams) in the egraph framework. (@jameysharp, @elliottt, @fitzgen and I have been talking some about this. Happy to discuss more at a Cranelift meeting if folks are interested!) In the meantime, this sounds like a reasonable simplification, IMHO.</p>\n</blockquote>",
        "id": 328577010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676673945
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5793#issuecomment-1489017366\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5793\">issue #5793</a>:</p>\n<blockquote>\n<p>Yeah, I think we have solid plans for branch folding in #6106, and for replacing single-definition block-params in #6109, and I think that means we can do SCCP in the egraph pass. Since we don't currently run the egraph pass to a fix-point, it isn't full SCCP in the presence of loops, but that's a deliberate design decision, and we've talked about making more aggressive optimization optional.</p>\n</blockquote>",
        "id": 345471212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680110991
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5793\">issue #5793</a>:</p>\n<blockquote>\n<p>Right now the interpreter is generic over the type of value we are interpreting, essentially allowing for abstract interpretation over symbolic values in theory. But we aren't using that functionality. And we have no plans ever to use it in the future: instead we have the egraphs pass and its support for forwards analyses, which is our framework for analyses moving forward.</p>\n<p>So can we simplify the interpreter by working with concrete values instead of a type parameter that is bounded by a trait?</p>\n<p>cc @abrown @afonso360 </p>\n</blockquote>",
        "id": 348437736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681213759
    }
]