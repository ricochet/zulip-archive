[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933\">issue #3933</a>:</p>\n<blockquote>\n<p>This will let us reuse <code>wasm-mutate</code>'s e-graph, if it constructed one, which is important since it can be expensive to construct and we want to amortize that.</p>\n<p>Will need to use thread locals or something though to stash the iterator between calls to the custom mutator though.</p>\n</blockquote>",
        "id": 275447074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647385170
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933\">issue #3933</a>:</p>\n<blockquote>\n<p>This will let us reuse <code>wasm-mutate</code>'s e-graph, if it constructed one, which is important since it can be expensive to construct and we want to amortize that.</p>\n<p>Will need to use thread locals or something though to stash the iterator between calls to the custom mutator though.</p>\n</blockquote>",
        "id": 275447075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647385170
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933#issuecomment-1068545012\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933\">issue #3933</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 275447126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647385199
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933#issuecomment-1083509268\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933\">issue #3933</a>:</p>\n<blockquote>\n<p>Hm actually every time that libfuzzer calls our custom mutate hook with a specific input and seed, it expects the hook to return the same mutation. That would kinda break if we are first checking \"do we have an existing iterator of mutations to draw from in thread local storage?\" first rather than computing a fresh mutation from scratch.</p>\n<p>Ideally libfuzzer would just let us return multiple mutations directly :-/</p>\n<p>Not 100% sure how to resolve this, since we really <em>do</em> want to take advantage of the iterator to amortize the cost of e-graph construction.</p>\n<p>Anyone have ideas?</p>\n<p>Maybe it is actually just fine if we don't obey the same-input-and-seed-leads-to-same-mutation invariant?</p>\n</blockquote>",
        "id": 277191368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648666755
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933#issuecomment-1083518922\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933\">issue #3933</a>:</p>\n<blockquote>\n<p>Would trying multiple wasm functions derived from the same wasm-mutate e-graph in a single libfuzzer fuzz round work? And then use a new e-graph for the next fuzz round.</p>\n</blockquote>",
        "id": 277192388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648667239
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933#issuecomment-1083554515\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3933\">issue #3933</a>:</p>\n<blockquote>\n<p>An e-graph is specific to a single expression, so the same expression would need to occur in multiple functions. And we would need to search and find all instances of that expression. I don't think this will be particularly fruitful.</p>\n</blockquote>",
        "id": 277196454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648669509
    }
]