[
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944#issuecomment-1255634777\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944\">issue #4944</a>:</p>\n<blockquote>\n<p>Hmm something is enabling <code>rayon</code> by default even with this. <code>cargo</code> doesn't provide great visibility into what is turning on what features here.</p>\n</blockquote>",
        "id": 300260528,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663886959
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944#issuecomment-1255684045\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944\">issue #4944</a>:</p>\n<blockquote>\n<p>I was just noticing earlier that <code>--no-default-features</code> isn't turning off rayon any more. Thanks for prompting me to dig deeper.</p>\n<p>I think the cause is that #4911 made <code>wasmtime-cli-flags</code> depend on the <code>wasmtime/parallel-compilation</code> feature.</p>\n<p>I'm very much in favor of disabling parallel compilation by default for benchmarking, so let's figure out how to get the web of features right.</p>\n<p>You can get cargo to tell you what's pulling in a particular dependency with e.g. <code>cargo tree -p wasmtime-bench-api -i rayon</code>. It also accepts the usual <code>--no-default-features</code> and <code>--features</code> flags so you can check different combinations.</p>\n</blockquote>",
        "id": 300271301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663892923
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944#issuecomment-1256371994\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944\">issue #4944</a>:</p>\n<blockquote>\n<p>@fitzgen, if a runtime flag is needed, I had submitted #4207 for that purpose (along with an <code>--engine-flags</code> flag in Sightglass, IIRC). Looks like something went wrong with #4207 but I can rebase that and figure out the CI error if that would help--what do you think? In the past I've also needed to benchmark single-threaded compilation but I think I used the <code>taskset</code> hammer instead, so I'm in favor of making either of these approaches work.</p>\n</blockquote>",
        "id": 300395298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663947566
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944#issuecomment-1256423824\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944\">issue #4944</a>:</p>\n<blockquote>\n<p>If I'm understanding #4207 correctly, it looks like it's worth merging but isn't necessary for non-WASI options like the recent <code>--disable-parallel-compilation</code>.</p>\n</blockquote>",
        "id": 300406398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663950720
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944#issuecomment-1256507570\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944\">issue #4944</a>:</p>\n<blockquote>\n<p>I think we don't want to rely on only a runtime flag because the stacks are still not great when profiling if we do the runtime flag.</p>\n<p>I think we will want to make the CLI flags crate not enable a bunch of features and maybe make <code>Config</code> always have methods for things like disabling parallelism even when the <code>rayon</code> dep isn't active (but document that it has no effect in that case or make it panic or return an error or something).</p>\n</blockquote>",
        "id": 300420359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663955460
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944#issuecomment-1256510150\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944\">issue #4944</a>:</p>\n<blockquote>\n<blockquote>\n<p>If I'm understanding <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4207\">https://github.com/bytecodealliance/wasmtime/pull/4207</a> correctly, it looks like it's worth merging but isn't necessary for non-WASI options like the recent --disable-parallel-compilation.</p>\n</blockquote>\n<p>No, it actually makes it possible to use any of the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/cli-flags/src/lib.rs#L106\"><code>CommonOptions</code></a>, of which <code>disable_parallel_compilation</code> is one.</p>\n</blockquote>",
        "id": 300420963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663955644
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944#issuecomment-1256511299\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944\">issue #4944</a>:</p>\n<blockquote>\n<blockquote>\n<p>because the stacks are still not great when profiling</p>\n</blockquote>\n<p>Could you expand on this? The flag is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bb6a8a717ab9dcf0594a577893fb31a6528ada1b/crates/wasmtime/src/engine.rs#L234-L240\">checked here</a> so this shouldn't affect stacks other than having a <code>run_maybe_parallel</code> frame which otherwise would probably get inlined if <code>rayon</code> is disabled (but whether or not the frame is present doesn't seem like a bad stack to me)</p>\n</blockquote>",
        "id": 300421230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663955733
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944#issuecomment-1256513405\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944\">issue #4944</a>:</p>\n<blockquote>\n<blockquote>\n<p>the stacks are still not great when profiling if we do the runtime flag</p>\n</blockquote>\n<p>I agree with that sentiment (not wanting to wade through <code>rayon</code> stacks) but I'm wondering how you're still seeing large stacks when you enable the flags: I see <code>self.config().parallel_compilation</code> as guarding against using <code>rayon</code> at all in a few places. Do you mean the <code>rayon</code> \"setup the environment\" functions?</p>\n</blockquote>",
        "id": 300421699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663955890
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944#issuecomment-1256522386\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4944\">issue #4944</a>:</p>\n<blockquote>\n<p>I guess the broken stacks that I'm seeing now are unrelated to rayon, its all in vec iter stuff but it isn't all the same so the flamegraphs and top down views such are kinda unusable. I guess we can close this PR tho.</p>\n</blockquote>",
        "id": 300424090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663956553
    }
]