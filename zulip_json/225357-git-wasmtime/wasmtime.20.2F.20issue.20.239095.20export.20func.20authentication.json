[
    {
        "content": "<p>itachaaa opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095\">issue #9095</a>:</p>\n<blockquote>\n<p>When the WASM plug-in calls back the host, is there a way to know which WASM plug-in is on the host side, so as to authenticate different WASM plug-ins, to ensure that the interface exposed by the host does not have the problem of permission leakage.</p>\n</blockquote>",
        "id": 459500525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723216120
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095#issuecomment-2278531739\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095\">issue #9095</a>:</p>\n<blockquote>\n<p>For this it's recommended to store state in the <code>T</code> of <code>Store&lt;T&gt;</code>. Does that work for you?</p>\n</blockquote>",
        "id": 459549781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723228805
    },
    {
        "content": "<p>itachaaa <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095#issuecomment-2278950431\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095\">issue #9095</a>:</p>\n<blockquote>\n<blockquote>\n<p>For this it's recommended to store state in the <code>T</code> of <code>Store&lt;T&gt;</code>. Does that work for you? 重试    错误原因</p>\n</blockquote>\n<p>We've tried that too, and it probably won't solve the problem. Because T is shared in the store, different instances in the same store may tamper with this T to bypass our authentication rules.<br>\nI'm curious if there's a way to automatically bring up the module name interface or capability when calling back the host method.<br>\n</p>\n</blockquote>",
        "id": 459620932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723258008
    },
    {
        "content": "<p>nerdachse <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095#issuecomment-2282888678\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095\">issue #9095</a>:</p>\n<blockquote>\n<blockquote>\n<p>For this it's recommended to store state in the <code>T</code> of <code>Store&lt;T&gt;</code>. Does that work for you?</p>\n</blockquote>\n<p>Could you elaborate a bit on this please?</p>\n<p>I don't see right now how that data could be relied on and have a very, very similar \"problem\"/question to the Op</p>\n</blockquote>",
        "id": 459944740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723410128
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095#issuecomment-2284403097\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095\">issue #9095</a>:</p>\n<blockquote>\n<p>I'm not really sure what \"authentication\" means in this context. My answer of using <code>T</code> is derived from the fact that as the embedder you're in control of what gets added to a <code>Linker</code>. In that sense I'm not sure how to authenticate one call over another because I would imagine that you could customize one closure being added vs another. Each closure could access some part of <code>T</code> and your own embedding could ensure that what's accessed is all disjoint.</p>\n<p>Basically what I'm saying is that the customization doesn't happen when the function is called, it happens when the function is defined. Whatever adds a function to the linker would customize what the host function does by accessing necessary parts of <code>T</code>, perhaps only passing a smaller borrow to disallow access to the whole state.</p>\n<p>Otherwise in terms of authentication I would need more of an example of what you're trying to achieve as it's not clear to me.</p>\n</blockquote>",
        "id": 460115586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723479590
    },
    {
        "content": "<p>itachaaa closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9095\">issue #9095</a>:</p>\n<blockquote>\n<p>When the WASM plug-in calls back the host, is there a way to know which WASM plug-in is on the host side, so as to authenticate different WASM plug-ins, to ensure that the interface exposed by the host does not have the problem of permission leakage.</p>\n</blockquote>",
        "id": 462494261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723707378
    }
]