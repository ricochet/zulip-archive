[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6600\">issue #6600</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>Currently we don't have any special lowerings for the <code>ExtAddPairwise</code> family of WASM instructions, so we generate a quite poor implementation.</p>\n<h4>Benefit</h4>\n<p>We can get better codegen on this backend for these instructions.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/77181024cade266d52ca8caaf412c1a4f9fcf261/cranelift/wasm/src/code_translator.rs#L2028-L2050\"><code>cranelift-wasm</code> translates these</a> as <code>iadd_pairwise(uwiden_low(x), uwiden_high(y))</code> and similar variations.</p>\n<p>We use the generic <code>iadd_pairwise</code> implementation which is quite large, however with the widening instructions as an input, we can generate much better codegen.</p>\n<p>Since we know we are going to discard half of the input register elements, we can use a single <code>vrgather.vv</code> on each input to reshuffle them and then use a <code>vwadd.vv</code> to do the sum.</p>\n<p>This is pretty much what <a href=\"https://github.com/v8/v8/blob/ad655dc0435b02f40b19dd9b091c2dcbc3aed5f2/src/compiler/backend/riscv/instruction-selector-riscv.h#L767-L772\">v8 emits for these instructions</a>.</p>\n<h4>Alternatives</h4>\n<p>We don't need to do this. I also don't know how often these instructions get used in real code.<br>\n</p>\n</blockquote>",
        "id": 367164010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687006281
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6600\">issue #6600</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>Currently we don't have any special lowerings for the <code>ExtAddPairwise</code> family of WASM instructions, so we generate a quite poor implementation.</p>\n<h4>Benefit</h4>\n<p>We can get better codegen on this backend for these instructions.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/77181024cade266d52ca8caaf412c1a4f9fcf261/cranelift/wasm/src/code_translator.rs#L2028-L2050\"><code>cranelift-wasm</code> translates these</a> as <code>iadd_pairwise(uwiden_low(x), uwiden_high(y))</code> and similar variations.</p>\n<p>We use the generic <code>iadd_pairwise</code> implementation which is quite large, however with the widening instructions as an input, we can generate much better codegen.</p>\n<p>Since we know we are going to discard half of the input register elements, we can use a single <code>vrgather.vv</code> on each input to reshuffle them and then use a <code>vwadd.vv</code> to do the sum.</p>\n<p>This is pretty much what <a href=\"https://github.com/v8/v8/blob/ad655dc0435b02f40b19dd9b091c2dcbc3aed5f2/src/compiler/backend/riscv/instruction-selector-riscv.h#L767-L772\">v8 emits for these instructions</a>.</p>\n<h4>Alternatives</h4>\n<p>We don't need to do this. I also don't know how often these instructions get used in real code.<br>\n</p>\n</blockquote>",
        "id": 367164011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687006281
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6600\">issue #6600</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>Currently we don't have any special lowerings for the <code>ExtAddPairwise</code> family of WASM instructions, so we generate a quite poor implementation.</p>\n<h4>Benefit</h4>\n<p>We can get better codegen on this backend for these instructions.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/77181024cade266d52ca8caaf412c1a4f9fcf261/cranelift/wasm/src/code_translator.rs#L2028-L2050\"><code>cranelift-wasm</code> translates these</a> as <code>iadd_pairwise(uwiden_low(x), uwiden_high(y))</code> and similar variations.</p>\n<p>We use the generic <code>iadd_pairwise</code> implementation which is quite large, however with the widening instructions as an input, we can generate much better codegen.</p>\n<p>Since we know we are going to discard half of the input register elements, we can use a single <code>vrgather.vv</code> on each input to reshuffle them and then use a <code>vwadd.vv</code> to do the sum.</p>\n<p>This is pretty much what <a href=\"https://github.com/v8/v8/blob/ad655dc0435b02f40b19dd9b091c2dcbc3aed5f2/src/compiler/backend/riscv/instruction-selector-riscv.h#L767-L772\">v8 emits for these instructions</a>.</p>\n<h4>Alternatives</h4>\n<p>We don't need to do this, the current lowerings are working as intended. I also don't know how often these instructions get used in real code.<br>\n</p>\n</blockquote>",
        "id": 367164843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687006502
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6600\">issue #6600</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>Currently we don't have any special lowerings for the <code>ExtAddPairwise</code> family of WASM instructions, so we generate a quite poor implementation.</p>\n<h4>Benefit</h4>\n<p>We can get better codegen on this backend for these instructions.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/77181024cade266d52ca8caaf412c1a4f9fcf261/cranelift/wasm/src/code_translator.rs#L2028-L2050\"><code>cranelift-wasm</code> translates these</a> as <code>iadd_pairwise(uwiden_low(x), uwiden_high(y))</code> and similar variations.</p>\n<p>We use the generic <code>iadd_pairwise</code> implementation which is quite large, however with the widening instructions as an input, we can generate much better codegen.</p>\n<p>Since we know we are going to discard half of the input register elements, we can use a single <code>vrgather.vv</code> on each input to reshuffle them and then use a <code>vwadd.vv</code> to do the sum.</p>\n<p>This is pretty much what <a href=\"https://github.com/v8/v8/blob/ad655dc0435b02f40b19dd9b091c2dcbc3aed5f2/src/compiler/backend/riscv/instruction-selector-riscv.h#L767-L772\">v8 emits for these instructions</a>.</p>\n<h4>Alternatives</h4>\n<p>We don't need to do this, the current lowerings are working as intended. I also don't know how often these instructions get used in real code.<br>\n</p>\n</blockquote>",
        "id": 368572688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687442901
    }
]