[
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281347912\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 304538375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666033897
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281383607\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>/bench_x64<br>\n</p>\n</blockquote>",
        "id": 304543524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666035625
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281399039\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>Change factor shows patch effect on x64 if merged compared to current head for main.</p>\n<p>Results are based on clocktick (CT) event cycles. Change Factor = (Patched_CT - Main_CT) / (Main_CT) <br>\nA negative change factor means clockticks are expected to be reduced by the patch.</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.008</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.006</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.004</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.008</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.009</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.009</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.007</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.022</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.018</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.013</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.007</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.027</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.011</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.043</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.013</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.004</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.011</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.051</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.018</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.002</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.013</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.035</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.012</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.065</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.017</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.020</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.062</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.022</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.057</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.030</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.021</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.034</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.083</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.036</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.019</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.013</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.007</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.042</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.021</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.040</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.025</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.023</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.002</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.014</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.008</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.110</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.014</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.014</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.037</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.015</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Averages (x64):</strong><br>\n|phase|change_factor|<br>\n |-|-|<br>\n|Compilation|0.001|<br>\n|Execution|0.004|<br>\n|Instantiation|0.001|</p>\n</blockquote>",
        "id": 304546079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036422
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281407325\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 304547079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036779
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281407503\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 304547106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036789
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281407602\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 304547130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036795
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281426217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>Two ideas for bounding stability:</p>\n<ul>\n<li>\n<p>We might want to exclude instantiation time altogether from these runs. I'd prefer not to, from first principles, but they seem to have significantly more variance than the other categories. I suspect this is because instantiation is so much faster (usually) than compilation or execution. It may just be that the platform is not noise-free enough to accurately measure instantiation, and we'll need to benchmark this locally if working to improve it. Curious what others think though (@fitzgen , @alexcrichton, @abrown ?).</p>\n</li>\n<li>\n<p>Could we run a \"no-change test\" as a control on every run? Basically, run the baseline twice, and show (i) the delta between the two baselines, and (ii)the delta between the baseline (either one) and the PR's change. We expect to see (in a perfect world) zero change in the control (baseline-to-baseline comparison) and whatever actual change in the diff run. If we see similar swings in both then we can conclude it's more likely noise. Thoughts?</p>\n</li>\n</ul>\n</blockquote>",
        "id": 304548687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666037328
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281451303\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>Change factor shows patch effect on x64 if merged compared to current head for main.</p>\n<p>Results are based on clocktick (CT) event cycles. Change Factor = (Patched_CT - Main_CT) / (Main_CT) <br>\nA negative change factor means clockticks are expected to be reduced by the patch.</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.013</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.004</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.004</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.016</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.010</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.007</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.023</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.015</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.003</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.008</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.026</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.033</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.002</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.014</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.011</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.017</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.015</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.011</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.017</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.085</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.024</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.007</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.029</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.010</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.071</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.044</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.017</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.015</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.022</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.036</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.030</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.024</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.035</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.059</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.004</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.023</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.014</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.049</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.026</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.004</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.009</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.007</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.003</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Averages (x64):</strong><br>\n|phase|change_factor|<br>\n |-|-|<br>\n|Compilation|0.001|<br>\n|Execution|0.002|<br>\n|Instantiation|0.008|</p>\n</blockquote>",
        "id": 304551651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666038408
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281483223\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>In my experience even with dedicated hardware I've always had a lot of noise in time-based measurements, so for long-term regression testing which this is intended for would it be possible to measure instructions retired instead of wall-time? (which I think clock-cycles is more-or-less equivalent to). That's what rust-lang/rust uses by deault and instructions are typically quite stable (although not 100% still).</p>\n<p>Also, as a minor thing, would it be possible to print the changes as %-based changes instead of factor-based changes?</p>\n</blockquote>",
        "id": 304556269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666040098
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281487974\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>Change factor shows patch effect on x64 if merged compared to current head for main.</p>\n<p>Results are based on clocktick (CT) event cycles. Change Factor = (Patched_CT - Main_CT) / (Main_CT) <br>\nA negative change factor means clockticks are expected to be reduced by the patch.</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.022</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.008</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.005</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.027</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.018</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.007</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.012</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.021</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.012</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.028</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.007</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.007</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.011</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.011</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.004</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.005</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.014</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.010</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.038</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.035</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.017</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.013</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.039</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.004</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.010</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.031</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.031</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.028</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.102</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.040</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.012</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.045</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.025</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.085</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.042</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.031</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.037</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.008</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.050</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.015</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.020</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.033</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.014</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.017</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.067</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.191</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.057</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.009</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Averages (x64):</strong><br>\n|phase|change_factor|<br>\n |-|-|<br>\n|Compilation|0.001|<br>\n|Execution|-0.007|<br>\n|Instantiation|0.007|</p>\n</blockquote>",
        "id": 304557083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666040400
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1281523501\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>Change factor shows patch effect on x64 if merged compared to current head for main.</p>\n<p>Results are based on clocktick (CT) event cycles. Change Factor = (Patched_CT - Main_CT) / (Main_CT) <br>\nA negative change factor means clockticks are expected to be reduced by the patch.</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.012</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.011</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.008</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.008</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.004</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.022</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.029</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.009</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.039</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.031</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.009</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.004</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.012</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.005</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.009</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.070</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.006</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.047</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.031</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.030</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.037</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.010</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.035</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.015</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.025</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.027</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.034</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.044</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.023</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.036</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.043</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.064</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.015</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.025</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.014</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.012</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.025</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.070</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.021</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.018</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.059</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.023</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.004</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.002</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.100</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.080</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.015</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.004</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.009</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.002</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Averages (x64):</strong><br>\n|phase|change_factor|<br>\n |-|-|<br>\n|Compilation|0.001|<br>\n|Execution|-0.000|<br>\n|Instantiation|0.002|</p>\n</blockquote>",
        "id": 304562699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666042386
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1282910371\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<blockquote>\n<p>Two ideas for bounding stability:</p>\n<div class=\"codehilite\"><pre><span></span><code>* We might want to exclude instantiation time altogether from these runs. I&#39;d prefer not to, from first principles, but they seem to have significantly more variance than the other categories. I suspect this is because instantiation is so much faster (usually) than compilation or execution. It may just be that the platform is not noise-free enough to accurately measure instantiation, and we&#39;ll need to benchmark this locally if working to improve it. Curious what others think though (@fitzgen , @alexcrichton, @abrown ?).\n</code></pre></div>\n\n</blockquote>\n<p>Seems fine to exclude instantiation. We have decent instantiation benchmarks in criterion anyways.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* Could we run a &quot;no-change test&quot; as a control on every run? Basically, run the baseline twice, and show (i) the delta between the two baselines, and (ii)the delta between the baseline (either one) and the PR&#39;s change. We expect to see (in a perfect world) zero change in the control (baseline-to-baseline comparison) and whatever actual change in the diff run. If we see similar swings in both then we can conclude it&#39;s more likely noise. Thoughts?\n</code></pre></div>\n\n</blockquote>\n<p>This is more something for the <code>sightglass-analysis</code> crate than the github bot, IMO. The github bot shouldn't be growing anything other than what is needed to run <code>sightglass</code> on the server, authenticate who is allowed to do that, and report the results back. All the details of actually running benchmarks and doing analysis on them should be in <code>sightglass</code> itself.</p>\n</blockquote>",
        "id": 304827347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666121859
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1282910371\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<blockquote>\n<p>Two ideas for bounding stability:</p>\n<ul>\n<li>We might want to exclude instantiation time altogether from these runs. I'd prefer not to, from first principles, but they seem to have significantly more variance than the other categories. I suspect this is because instantiation is so much faster (usually) than compilation or execution. It may just be that the platform is not noise-free enough to accurately measure instantiation, and we'll need to benchmark this locally if working to improve it. Curious what others think though (@fitzgen , @alexcrichton, @abrown ?).</li>\n</ul>\n</blockquote>\n<p>Seems fine to exclude instantiation. We have decent instantiation benchmarks in criterion anyways.</p>\n<blockquote>\n<ul>\n<li>Could we run a \"no-change test\" as a control on every run? Basically, run the baseline twice, and show (i) the delta between the two baselines, and (ii)the delta between the baseline (either one) and the PR's change. We expect to see (in a perfect world) zero change in the control (baseline-to-baseline comparison) and whatever actual change in the diff run. If we see similar swings in both then we can conclude it's more likely noise. Thoughts?</li>\n</ul>\n</blockquote>\n<p>This is more something for the <code>sightglass-analysis</code> crate than the github bot, IMO. The github bot shouldn't be growing anything other than what is needed to run <code>sightglass</code> on the server, authenticate who is allowed to do that, and report the results back. All the details of actually running benchmarks and doing analysis on them should be in <code>sightglass</code> itself.</p>\n</blockquote>",
        "id": 304827423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666121884
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1282952276\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<blockquote>\n<p>This is more something for the sightglass-analysis crate than the github bot, IMO. The github bot shouldn't be growing anything other than what is needed to run sightglass on the server, authenticate who is allowed to do that, and report the results back. All the details of actually running benchmarks and doing analysis on them should be in sightglass itself.</p>\n</blockquote>\n<p>Yeah, that's a good point actually; I agree. My main concern was that we have trustworthy results and actually using the confidence-interval computation is the best way of doing that.</p>\n</blockquote>",
        "id": 304833236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666124198
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1282954725\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>(And following on that a bit more, I guess what I really want is to sort of build up trust in the tool from first principles -- that's what I was trying to get at with the null-diff control; so perhaps this is a way we can validate the confidence interval reporting, when we get it integrated. If we submit an empty PR and benchmark it, we should see \"no statistical difference\" everywhere, or else we have a stats bug)</p>\n</blockquote>",
        "id": 304833541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666124324
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1282954725\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>(And following on that a bit more, I guess what I really want is to sort of build up trust in the tool from first principles -- that's what I was trying to get at with the null-diff control; so perhaps this is a way we can validate the confidence interval reporting, when we get it integrated. If we submit an empty PR and benchmark it, we should see \"no statistical difference\" everywhere, or else we have a stats or configuration/setup bug)</p>\n</blockquote>",
        "id": 304833603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666124348
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064#issuecomment-1282999165\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">issue #5064</a>:</p>\n<blockquote>\n<p>(Note that the probability of a false positive is 1% (due to our default significance level) but this is <em>per test</em> and we do 3 tests per Wasm input so we only need to have ~33 Wasm inputs to expect one false positive per benchmark run. One of the many reasons to choose our Wasm inputs carefully.)</p>\n</blockquote>",
        "id": 304840157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666126894
    }
]