[
    {
        "content": "<p>vigoo opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8845\">issue #8845</a>:</p>\n<blockquote>\n<p>Hi! In the past few days I've updated Golem (<a href=\"https://github.com/golemcloud/golem/pull/602\">https://github.com/golemcloud/golem/pull/602</a>) from <code>wasmtime</code> 17.0 to 21.0.1 (including some other dependencies and all the related tooling versions). </p>\n<p>It went a bit harder than I expected so I thought I open this ticket as an attempt to provide constructive feedback from the point of view of someone embedding wamtime. I found solutions and workarounds to all the problems I ran into so there is no specific need for any change or help, this is just an observation of the effects of some recent changes.</p>\n<h3>Context</h3>\n<p>Before describing the issues I ran into, a quick overview of how we are using wasmtime's WASI implementation. Golem uses the <code>wasmtime-wasi</code> crate but wraps all the host functions to implement durable execution. (We are using a fork of <code>wasmtime</code> but it only has minor patches, mostly enabling async bindings for more WASI host functions because we need that for our wrappers)</p>\n<p>So we have something like a </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">DurableWorkerCtx</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WorkerCtx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">wasi_http</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiHttpCtx</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here <code>Ctx</code> is the actual type used in <code>Linker</code>, <code>Store</code> etc, why it's separate from this <code>DurableWorkerCtx</code> type is irrelevant. </p>\n<p>Our WASI wrappers are host trait implementations on <code>DurableWorkerCtx</code> which are under the hood calling wasmtime's implementations:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">DurableWorkerCtxWasiView</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WorkerCtx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">DurableWorkerCtx</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WorkerCtx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DurableWorkerCtxWasiView</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WorkerCtx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DurableWorkerCtx</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_environment</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"n\">Host</span><span class=\"p\">::</span><span class=\"n\">get_environment</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">as_wasi_view</span><span class=\"p\">()).</span><span class=\"k\">await</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>All these wrappers were registered into the linker with a generic function that looked something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">create_linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">engine</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Engine</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">U</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"c1\">// ...</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">preview2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This is called with a closure that just returns a <code>&amp;mut DurableWorkerCtx&lt;Ctx&gt;</code> from <code>Ctx</code>, which implements all the host interfaces.</p>\n<p>This all worked well with wasmtime 17, so let's see what were the changes that made me open this ticket!</p>\n<h3>Dropping Sync constraints</h3>\n<p>The first change causing trouble was <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7802\">https://github.com/bytecodealliance/wasmtime/pull/7802</a></p>\n<p>Here by dropping <code>Sync</code> from <code>WasiCtx</code> and <code>ResourceTable</code> meant that we can no longer keep them as simple fields in our<code>DurableWorkerCtx</code> and had to apply the <code>Arc&lt;Mutex&lt;...&gt;&gt;</code> \"trick\" which is also used in the above PR with the comment that \"at least it is not blocking\". While this of course works it feels quite hacky and I wanted to point out that I believe anybody who is wrapping (some of) the WASI host implementations _and_ using wasmtime in async mode will run into the same problem and need to apply create these 'fake' mutexes.</p>\n<h3>The GetHost refactoring</h3>\n<p>The second thing that took many hours for me to figure out is <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8448\">https://github.com/bytecodealliance/wasmtime/pull/8448</a> which is already part of wasmtime 21 but as I understand just a part of all the planned changes (<a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">https://github.com/bytecodealliance/wasmtime/issues/8382</a>). Maybe all the difficulties are only caused by this intermediate state, but the combination of</p>\n<ul>\n<li>most of the changes are in the output of the <code>bindgen!</code> macro</li>\n<li>hard to understand temporary workarounds like <code>skip_mut_forwarding_impls</code></li>\n<li>very complex type constraints leading to very misleading compilation errors</li>\n</ul>\n<p>took hours to just understand what exactly the problem is, and then required me to write hundreds/thousands of lines of boilerplate to workaround it. Let me explain.</p>\n<p>As <code>add_to_linker</code> is gone, I had found there is a <code>add_to_linker_get_host</code> and naively rewrote the above <code>create_linker</code> function to use that. That eventually started to fail with an error for missing a <code>WasiView</code> constraint on the output type parameter which was very confusing, as none of the types involved, and nothing in the code generated by <code>bindgen!</code> contains anything related <code>WasiView</code>. The reason for it was how <code>GetHost</code> is defined, it now fixes the <code>O</code> to be the same as the result type of the closure it derives from, so in our case it was no longer looking for <code>Host</code> implementations on <code>DurableWorkerCtx&lt;Ctx&gt;</code> but <code>&amp;mut DurableWorkerCtx&lt;Ctx&gt;</code>. As this was not possible the next thing the compiler found was the </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>implementation in <code>wasmtime_wasi</code> which lead to the weird errors mentioning <code>WasiView</code> (finding all the <code>Host</code> implementations requiring <code>T: WasiView</code> through this). </p>\n<p>After understanding all this I realised that in this intermediate state where <code>wasmtime_wasi</code> sets <code>skip_mut_forwarding_impls</code> and uses the above trick to implement the type classes through <code>&amp;mut T</code> the only thing I can do is to manually implement these \"forwarding trait implementations\" for all the WASI host functions:</p>\n<ul>\n<li>I can't change <code>wasmtime_wasi</code> to <code>skip_mut_forwarding_impls: false</code> because that would mean doing the second part of your refactoring plans which I did not plan to :) </li>\n<li>but I need to use <code>wasmtime_wasi</code>'s bindings in order to be able to forward to the underlying implementation from our wrappers</li>\n</ul>\n<p>So I ended up manually writing wrappers for all our wrappers like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WorkerCtx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">DurableWorkerCtx</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_environment</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"n\">get_environment</span><span class=\"p\">().</span><span class=\"k\">await</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>With these wrappers finally the <code>GetHost</code> implementations started to work but I still had to drop the generality of our <code>create_linker</code> function where it previously worked with _anything_ implementing the required set of host functions, now it only works with <code>DurableWorkerCtx&lt;Ctx&gt;</code>. This is not an issue for us right now, and may be just my limited Rust experience, but that's the best I could came up with, something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">create_linker</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WorkerCtx</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">engine</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Engine</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">get</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">F</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">F</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">DurableWorkerCtx</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">F</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Conclusion</h3>\n<p>By showing these two examples I wanted to demonstrate what problems I ran into while upgrading to the latest version of <code>wasmtime</code>, with the only purpose of providing some feedback and examples of how we are using it.</p>\n<p>Thank you for the awesome wasm engine!</p>\n</blockquote>",
        "id": 445800376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718875715
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8845#issuecomment-2180978209\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8845\">issue #8845</a>:</p>\n<blockquote>\n<p>Wanted to drop a comment here saying thank you for taking the time to write this all down! Integration with WASI is definitely one of our weak points API-design-wise and is something I've long wanted to improve. I'll try to provide some more detailed feedback later today or in the coming days (and ideally fully address some of these pain points too)</p>\n</blockquote>",
        "id": 445880219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718897201
    }
]