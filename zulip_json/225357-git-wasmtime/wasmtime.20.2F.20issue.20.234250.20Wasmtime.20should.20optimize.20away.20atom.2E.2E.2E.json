[
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4250\">issue #4250</a>:</p>\n<blockquote>\n<p>Part of the threads proposal in wasm is to add a \"shared\" flag to memory. Wasmtime statically knows that if a memory is not shared then atomic operations are not necessary because the memory cannot be concurrently modified. The atomic rmw instructions added in the threads proposal work on all memories, however.</p>\n<p>Wasmtime should translate the atomic operations differently depending on whether the memory they're referencing is shared or not, automatically falling back to non-atomic operations on non-shared memories. While this isn't a huge concern today if threads become more prevalent in the wasm tooling ecosystem it might be more common to use atomic operations unconditionally regardless of whether memory is shared or not. For example the Rust <code>wasm32-wasi</code> target could perhaps one day use a real implementation for mutexes so whether or not memory is shared is a link-time flag rather than a build-time flag as it is today. In this situation it'll likely be faster for Wasmtime to use non-atomic operations instead of atomic operations when memory isn't shared.</p>\n</blockquote>",
        "id": 285544990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654785677
    }
]