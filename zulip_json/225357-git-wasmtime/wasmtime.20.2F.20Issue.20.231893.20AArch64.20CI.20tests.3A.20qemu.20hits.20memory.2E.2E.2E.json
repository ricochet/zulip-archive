[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893\">Issue #1893</a>:</p>\n<blockquote>\n<p>The AArch64 CI test that runs using QEMU fails consistently for PR #1871 and the reasons are not clear - here's the relevant excerpt from the log:</p>\n<div class=\"codehilite\"><pre><span></span><code>2020-06-13T16:29:49.3730503Z test wast::Cranelift::spec::simd::simd_i32x4_cmp ... ok\n2020-06-13T16:29:57.9345959Z test wast::Cranelift::spec::simd::simd_i8x16_sat_arith ... ignored\n2020-06-13T16:30:08.5287111Z test wast::Cranelift::spec::simd::simd_lane ... ignored\n2020-06-13T16:30:15.8261749Z test wast::Cranelift::spec::simd::simd_load ... ignored\n2020-06-13T16:49:23.7624987Z error: test failed, to rerun pass &#39;-p wasmtime-cli --test all&#39;\n2020-06-13T16:49:23.7648421Z\n2020-06-13T16:49:23.7651248Z Caused by:\n2020-06-13T16:49:23.7664954Z   process didn&#39;t exit successfully: `/home/runner/qemu/bin/qemu-aarch64 -L /usr/aarch64-linux-gnu /home/runner/work/wasmtime/wasmtime/target/aarch64-unknown-linux-gnu/release/deps/all-0af4aa3748ec4770` (signal: 9, SIGKILL: kill)\n2020-06-13T16:49:24.0613948Z ##[error]Process completed with exit code 101.\n2020-06-13T16:49:25.4620071Z Post job cleanup.\n</code></pre></div>\n\n\n<p>I have reproduced the test environment locally using the following commands:</p>\n<div class=\"codehilite\"><pre><span></span><code>rm -rf qemu-5.0.0 ${HOME}/qemu\ncurl https://download.qemu.org/qemu-5.0.0.tar.xz | tar xJf -\ncd qemu-5.0.0\n./configure --target-list=aarch64-linux-user --prefix=${HOME}/qemu --disable-tools --disable-slirp --disable-fdt --disable-capstone --disable-docs\nmake -j$(nproc) install\ncd ..\nRUSTFLAGS=&quot;-D warnings&quot; \\\n  CARGO_INCREMENTAL=0 \\\n  CARGO_PROFILE_DEV_DEBUG=1 \\\n  CARGO_PROFILE_TEST_DEBUG=1 \\\n  CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu \\\n  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER=&quot;${HOME}/qemu/bin/qemu-aarch64 -L /usr/aarch64-linux-gnu&quot; \\\n  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc \\\n  RUST_BACKTRACE=1 \\\n  cargo test \\\n  --features test-programs/test_programs \\\n  --release \\\n  --all \\\n  --exclude lightbeam \\\n  --exclude peepmatic \\\n  --exclude peepmatic-automata \\\n  --exclude peepmatic-fuzzing \\\n  --exclude peepmatic-macro \\\n  --exclude peepmatic-runtime \\\n  --exclude peepmatic-test \\\n  --exclude wasmtime-fuzz\n</code></pre></div>\n\n\n<p>However, I don't experience any test failures. In addition to that, I don't see any issues either when I run the test natively in an AArch64 environment. In that case the list of commands can be simplified to:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo test --release --all --exclude lightbeam\n</code></pre></div>\n\n\n<p>Note that the <code>--features test-programs/test_programs</code> parameter is omitted because it requires <code>rust-lld</code>, which appears not to be a part of the native AArch64 toolchain.</p>\n<p>This issue has also been discussed in PR #1802.</p>\n<p>cc @cfallin</p>\n</blockquote>",
        "id": 201205709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592430896
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893#issuecomment-645675389\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893\">Issue #1893</a>:</p>\n<blockquote>\n<p>@cfallin What is your preference with respect to opening PRs implementing AArch64 functionality - don't enable any relevant tests, but document their names in the description, so that people may run them manually, or enable all relevant tests, but disable them afterwards in case of CI failures (whose cause seems to be running out of memory)? I like the second option more - we have already merged a couple of changes after I had tried to push the first iteration of #1871, so evidently it works. Honestly, it's a little bit bizarre that the <code>spec::simd::simd_align</code> test triggers the issue because from a quick look at it there is nothing special about it, with one exception - it has the highest number of linear memory definitions of all SIMD tests (just run <code>grep -R '(memory' tests/spec_testsuite/proposals/simd | cut -d: -f1 | sort | uniq -c | sort -rn</code>), in fact it has more than the next 5 tests combined:</p>\n<div class=\"codehilite\"><pre><span></span><code>     92 tests/spec_testsuite/proposals/simd/simd_align.wast\n     22 tests/spec_testsuite/proposals/simd/simd_load.wast\n     20 tests/spec_testsuite/proposals/simd/simd_load_extend.wast\n     16 tests/spec_testsuite/proposals/simd/simd_bit_shift.wast\n     14 tests/spec_testsuite/proposals/simd/simd_load_splat.wast\n     12 tests/spec_testsuite/proposals/simd/simd_i32x4_arith2.wast\n</code></pre></div>\n\n\n<p>On the other hand I have the feeling that we may run out of luck soon and start seeing consistent failures with any test.</p>\n<p>cc @jgouly</p>\n</blockquote>",
        "id": 201212559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592435939
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893#issuecomment-645697889\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893\">Issue #1893</a>:</p>\n<blockquote>\n<blockquote>\n<p>enable all relevant tests, but disable them afterwards in case of CI failures (whose cause seems to be running out of memory)?</p>\n</blockquote>\n<p>Yes, I think this is the best option -- let's do this for now, and reference this issue when we have to disable a test to get a green CI to merge.</p>\n</blockquote>",
        "id": 201217256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592440246
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893#issuecomment-645703139\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893\">Issue #1893</a>:</p>\n<blockquote>\n<blockquote>\n<p>it has the highest number of linear memory definitions of all SIMD tests</p>\n</blockquote>\n<p>Whoa nice find, that <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1895\">gives me an idea</a> and testing locally it <em>drastically</em> reduces the memory usage of qemu (10GB -&gt; 600MB). I think that means we can fix our CI quite easily actually!</p>\n</blockquote>",
        "id": 201218343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592441429
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893\">Issue #1893</a>:</p>\n<blockquote>\n<p>The AArch64 CI test that runs using QEMU fails consistently for PR #1871 and the reasons are not clear - here's the relevant excerpt from the log:</p>\n<div class=\"codehilite\"><pre><span></span><code>2020-06-13T16:29:49.3730503Z test wast::Cranelift::spec::simd::simd_i32x4_cmp ... ok\n2020-06-13T16:29:57.9345959Z test wast::Cranelift::spec::simd::simd_i8x16_sat_arith ... ignored\n2020-06-13T16:30:08.5287111Z test wast::Cranelift::spec::simd::simd_lane ... ignored\n2020-06-13T16:30:15.8261749Z test wast::Cranelift::spec::simd::simd_load ... ignored\n2020-06-13T16:49:23.7624987Z error: test failed, to rerun pass &#39;-p wasmtime-cli --test all&#39;\n2020-06-13T16:49:23.7648421Z\n2020-06-13T16:49:23.7651248Z Caused by:\n2020-06-13T16:49:23.7664954Z   process didn&#39;t exit successfully: `/home/runner/qemu/bin/qemu-aarch64 -L /usr/aarch64-linux-gnu /home/runner/work/wasmtime/wasmtime/target/aarch64-unknown-linux-gnu/release/deps/all-0af4aa3748ec4770` (signal: 9, SIGKILL: kill)\n2020-06-13T16:49:24.0613948Z ##[error]Process completed with exit code 101.\n2020-06-13T16:49:25.4620071Z Post job cleanup.\n</code></pre></div>\n\n\n<p>I have reproduced the test environment locally using the following commands:</p>\n<div class=\"codehilite\"><pre><span></span><code>rm -rf qemu-5.0.0 ${HOME}/qemu\ncurl https://download.qemu.org/qemu-5.0.0.tar.xz | tar xJf -\ncd qemu-5.0.0\n./configure --target-list=aarch64-linux-user --prefix=${HOME}/qemu --disable-tools --disable-slirp --disable-fdt --disable-capstone --disable-docs\nmake -j$(nproc) install\ncd ..\nRUSTFLAGS=&quot;-D warnings&quot; \\\n  CARGO_INCREMENTAL=0 \\\n  CARGO_PROFILE_DEV_DEBUG=1 \\\n  CARGO_PROFILE_TEST_DEBUG=1 \\\n  CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu \\\n  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER=&quot;${HOME}/qemu/bin/qemu-aarch64 -L /usr/aarch64-linux-gnu&quot; \\\n  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc \\\n  RUST_BACKTRACE=1 \\\n  cargo test \\\n  --features test-programs/test_programs \\\n  --release \\\n  --all \\\n  --exclude lightbeam \\\n  --exclude peepmatic \\\n  --exclude peepmatic-automata \\\n  --exclude peepmatic-fuzzing \\\n  --exclude peepmatic-macro \\\n  --exclude peepmatic-runtime \\\n  --exclude peepmatic-test \\\n  --exclude wasmtime-fuzz\n</code></pre></div>\n\n\n<p>However, I don't experience any test failures. In addition to that, I don't see any issues either when I run the test natively in an AArch64 environment. In that case the list of commands can be simplified to:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo test --release --all --exclude lightbeam\n</code></pre></div>\n\n\n<p>Note that the <code>--features test-programs/test_programs</code> parameter is omitted because it requires <code>rust-lld</code>, which appears not to be a part of the native AArch64 toolchain.</p>\n<p>This issue has also been discussed in PR #1802.</p>\n<p>cc @cfallin</p>\n</blockquote>",
        "id": 201221497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592445923
    }
]