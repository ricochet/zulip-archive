[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a> from <code>aarch64-stack-frame</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR changes the aarch64 ABI implementation to use positive offsets<br>\nfrom SP, rather than negative offsets from FP, to refer to spill slots<br>\nand stack-local storage. This allows for better addressing-mode options,<br>\nand hence slightly better code: e.g., the unsigned scaled 12-bit offset<br>\nmode can be used to reach anywhere in a 32KB frame without extra<br>\naddress-construction instructions, whereas negative offsets are limited<br>\nto a signed 9-bit unscaled mode (-256 bytes).</p>\n<p>To enable this, the PR introduces a notion of \"nominal SP offsets\" as a<br>\nvirtual addressing mode, lowered during the emission pass. The offsets<br>\nare relative to \"SP after adjusting downward to allocate stack/spill<br>\nslots\", but before pushing clobbers. This allows the addressing-mode<br>\nexpressions to be generated before register allocation (or during it,<br>\nfor spill/reload sequences).</p>\n<p>To convert these offsets into <em>true</em> offsets from SP, we need to track<br>\nhow much further SP is moved downward, and compensate for this. We do so<br>\nwith \"virtual SP offset adjustment\" pseudo-instructions: these are seen<br>\nby the emission pass, and result in no instruction (0 byte output), but<br>\nupdate state that is now threaded through each instruction emission in<br>\nturn. In this way, we can push e.g. stack args for a call and adjust<br>\nthe virtual SP offset, allowing reloads from nominal-SP-relative<br>\nspillslots while we do the argument setup with \"real SP offsets\" at the<br>\nsame time.</p>\n<p>As part of this PR, I also adjust how temporaries are used: I realized<br>\n(thanks to a comment in @alexcrichton's stack-limit PR) that x16 and x17<br>\nare the \"interprocedural veneer temporaries\", free to use within a<br>\nfunction body. These are now are spilltmp and \"tmp2\".</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 195477545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588022949
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\" title=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a>.</p>",
        "id": 195477557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588022958
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\" title=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\" title=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a>.</p>",
        "id": 195477572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588022967
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-402767371\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-402767371\">PR Review</a>.</p>",
        "id": 195725388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588173411
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r417393809\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r417393809\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: between</p>\n</blockquote>",
        "id": 195725391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588173411
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-402767371\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-402767371\">PR Review</a>.</p>",
        "id": 195725392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588173411
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r417394070\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r417394070\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: something is off with this comment?</p>\n</blockquote>",
        "id": 195725393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588173411
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r417394300\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r417394300\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: this is using x17 here</p>\n</blockquote>",
        "id": 195725394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588173411
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/bnjbvr\" title=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\" title=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a>.</p>",
        "id": 195725480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588173448
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a> from <code>aarch64-stack-frame</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR changes the aarch64 ABI implementation to use positive offsets<br>\nfrom SP, rather than negative offsets from FP, to refer to spill slots<br>\nand stack-local storage. This allows for better addressing-mode options,<br>\nand hence slightly better code: e.g., the unsigned scaled 12-bit offset<br>\nmode can be used to reach anywhere in a 32KB frame without extra<br>\naddress-construction instructions, whereas negative offsets are limited<br>\nto a signed 9-bit unscaled mode (-256 bytes).</p>\n<p>To enable this, the PR introduces a notion of \"nominal SP offsets\" as a<br>\nvirtual addressing mode, lowered during the emission pass. The offsets<br>\nare relative to \"SP after adjusting downward to allocate stack/spill<br>\nslots\", but before pushing clobbers. This allows the addressing-mode<br>\nexpressions to be generated before register allocation (or during it,<br>\nfor spill/reload sequences).</p>\n<p>To convert these offsets into <em>true</em> offsets from SP, we need to track<br>\nhow much further SP is moved downward, and compensate for this. We do so<br>\nwith \"virtual SP offset adjustment\" pseudo-instructions: these are seen<br>\nby the emission pass, and result in no instruction (0 byte output), but<br>\nupdate state that is now threaded through each instruction emission in<br>\nturn. In this way, we can push e.g. stack args for a call and adjust<br>\nthe virtual SP offset, allowing reloads from nominal-SP-relative<br>\nspillslots while we do the argument setup with \"real SP offsets\" at the<br>\nsame time.</p>\n<p>As part of this PR, I also adjust how temporaries are used: I realized<br>\n(thanks to a comment in @alexcrichton's stack-limit PR) that x16 and x17<br>\nare the \"interprocedural veneer temporaries\", free to use within a<br>\nfunction body. These are now are spilltmp and \"tmp2\".</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 195732989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588176321
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a> from <code>aarch64-stack-frame</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR changes the aarch64 ABI implementation to use positive offsets<br>\nfrom SP, rather than negative offsets from FP, to refer to spill slots<br>\nand stack-local storage. This allows for better addressing-mode options,<br>\nand hence slightly better code: e.g., the unsigned scaled 12-bit offset<br>\nmode can be used to reach anywhere in a 32KB frame without extra<br>\naddress-construction instructions, whereas negative offsets are limited<br>\nto a signed 9-bit unscaled mode (-256 bytes).</p>\n<p>To enable this, the PR introduces a notion of \"nominal SP offsets\" as a<br>\nvirtual addressing mode, lowered during the emission pass. The offsets<br>\nare relative to \"SP after adjusting downward to allocate stack/spill<br>\nslots\", but before pushing clobbers. This allows the addressing-mode<br>\nexpressions to be generated before register allocation (or during it,<br>\nfor spill/reload sequences).</p>\n<p>To convert these offsets into <em>true</em> offsets from SP, we need to track<br>\nhow much further SP is moved downward, and compensate for this. We do so<br>\nwith \"virtual SP offset adjustment\" pseudo-instructions: these are seen<br>\nby the emission pass, and result in no instruction (0 byte output), but<br>\nupdate state that is now threaded through each instruction emission in<br>\nturn. In this way, we can push e.g. stack args for a call and adjust<br>\nthe virtual SP offset, allowing reloads from nominal-SP-relative<br>\nspillslots while we do the argument setup with \"real SP offsets\" at the<br>\nsame time.</p>\n<p>As part of this PR, I also adjust how temporaries are used: I realized<br>\n(thanks to a comment in @alexcrichton's stack-limit PR) that x16 and x17<br>\nare the \"interprocedural veneer temporaries\", free to use within a<br>\nfunction body. These are now are spilltmp and \"tmp2\".</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 195914578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588288912
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-405603293\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-405603293\">PR Review</a>.</p>",
        "id": 196286062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-405603293\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-405603293\">PR Review</a>.</p>",
        "id": 196286063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419958329\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419958329\">PR Review Comment</a>:</p>\n<blockquote>\n<p>stylistic nit: can you invert the order of the operands here, please? it's really an additional offset to the <code>fp_to_arg_offset</code>, and would read less Yoda-like.</p>\n</blockquote>",
        "id": 196286065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419958400\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419958400\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ditto</p>\n</blockquote>",
        "id": 196286066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419961230\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419961230\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Was it intentional to keep the <code>debug!</code> statements here? I imagine they were quite useful during development but would be spamming the console otherwise. (ditto a few times below)</p>\n</blockquote>",
        "id": 196286068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419959403\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419959403\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you add a doc-comment link to <code>MemArg::NominalSPOffset</code>, which ought to be the central place for documenting what a nominal-SP is?</p>\n<p>ditto twice below</p>\n</blockquote>",
        "id": 196286069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419965609\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419965609\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: remove <code>----</code> before and after text</p>\n</blockquote>",
        "id": 196286071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419965378\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419965378\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Since this comment will be largely read by everyone who runs into this kind of <code>MemArg</code>, it should be more precise. Can you explain what's above and below (closer to FP and further away from FP, to avoid the possible double interpretation of above/below)? Maybe draw some ASCII art to show a stack example and draw where the nominal SP is?</p>\n</blockquote>",
        "id": 196286072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419965642\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419965642\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ditto</p>\n</blockquote>",
        "id": 196286073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419970247\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419970247\">PR Review Comment</a>:</p>\n<blockquote>\n<p>As said below, I think this comment should be placed closer to <code>MemArg::NominalSPOffset</code>, with a drawing of what it should look like.</p>\n</blockquote>",
        "id": 196286074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419967463\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419967463\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: maybe remove this comment? the <code>MemArg</code> enum variant below + above comment make it pretty clear it's an offset from nominal-sp.</p>\n</blockquote>",
        "id": 196286075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419971368\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419971368\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: can you name this <code>sp_adjustment</code> and also rename <code>amt</code> into <code>amount</code>?</p>\n</blockquote>",
        "id": 196286076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419969063\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419969063\">PR Review Comment</a>:</p>\n<blockquote>\n<p>preexisting: while you're around, can you make this a doc comment please?</p>\n</blockquote>",
        "id": 196286077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419975348\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419975348\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This comment is less precise than the previous one, can you tweak it to tell what this number includes?</p>\n</blockquote>",
        "id": 196286078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419976385\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419976385\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: can you put this before the <code>emit</code> function which uses it, to make reading of this code more linear?</p>\n</blockquote>",
        "id": 196286079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671336
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-405634047\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-405634047\">PR Review</a>.</p>",
        "id": 196286505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671603
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419984021\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r419984021\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It can become a <code>trace!</code>.</p>\n</blockquote>",
        "id": 196286507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588671603
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a> from <code>aarch64-stack-frame</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR changes the aarch64 ABI implementation to use positive offsets<br>\nfrom SP, rather than negative offsets from FP, to refer to spill slots<br>\nand stack-local storage. This allows for better addressing-mode options,<br>\nand hence slightly better code: e.g., the unsigned scaled 12-bit offset<br>\nmode can be used to reach anywhere in a 32KB frame without extra<br>\naddress-construction instructions, whereas negative offsets are limited<br>\nto a signed 9-bit unscaled mode (-256 bytes).</p>\n<p>To enable this, the PR introduces a notion of \"nominal SP offsets\" as a<br>\nvirtual addressing mode, lowered during the emission pass. The offsets<br>\nare relative to \"SP after adjusting downward to allocate stack/spill<br>\nslots\", but before pushing clobbers. This allows the addressing-mode<br>\nexpressions to be generated before register allocation (or during it,<br>\nfor spill/reload sequences).</p>\n<p>To convert these offsets into <em>true</em> offsets from SP, we need to track<br>\nhow much further SP is moved downward, and compensate for this. We do so<br>\nwith \"virtual SP offset adjustment\" pseudo-instructions: these are seen<br>\nby the emission pass, and result in no instruction (0 byte output), but<br>\nupdate state that is now threaded through each instruction emission in<br>\nturn. In this way, we can push e.g. stack args for a call and adjust<br>\nthe virtual SP offset, allowing reloads from nominal-SP-relative<br>\nspillslots while we do the argument setup with \"real SP offsets\" at the<br>\nsame time.</p>\n<p>As part of this PR, I also adjust how temporaries are used: I realized<br>\n(thanks to a comment in @alexcrichton's stack-limit PR) that x16 and x17<br>\nare the \"interprocedural veneer temporaries\", free to use within a<br>\nfunction body. These are now are spilltmp and \"tmp2\".</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 196342923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588701480
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-406027054\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-406027054\">PR Review</a>.</p>",
        "id": 196343050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588701528
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r420301465\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r420301465\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done! Added a diagram in the main module comment for <code>abi.rs</code>; hopefully things are clearer now.</p>\n</blockquote>",
        "id": 196343051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588701528
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a> from <code>aarch64-stack-frame</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR changes the aarch64 ABI implementation to use positive offsets<br>\nfrom SP, rather than negative offsets from FP, to refer to spill slots<br>\nand stack-local storage. This allows for better addressing-mode options,<br>\nand hence slightly better code: e.g., the unsigned scaled 12-bit offset<br>\nmode can be used to reach anywhere in a 32KB frame without extra<br>\naddress-construction instructions, whereas negative offsets are limited<br>\nto a signed 9-bit unscaled mode (-256 bytes).</p>\n<p>To enable this, the PR introduces a notion of \"nominal SP offsets\" as a<br>\nvirtual addressing mode, lowered during the emission pass. The offsets<br>\nare relative to \"SP after adjusting downward to allocate stack/spill<br>\nslots\", but before pushing clobbers. This allows the addressing-mode<br>\nexpressions to be generated before register allocation (or during it,<br>\nfor spill/reload sequences).</p>\n<p>To convert these offsets into <em>true</em> offsets from SP, we need to track<br>\nhow much further SP is moved downward, and compensate for this. We do so<br>\nwith \"virtual SP offset adjustment\" pseudo-instructions: these are seen<br>\nby the emission pass, and result in no instruction (0 byte output), but<br>\nupdate state that is now threaded through each instruction emission in<br>\nturn. In this way, we can push e.g. stack args for a call and adjust<br>\nthe virtual SP offset, allowing reloads from nominal-SP-relative<br>\nspillslots while we do the argument setup with \"real SP offsets\" at the<br>\nsame time.</p>\n<p>As part of this PR, I also adjust how temporaries are used: I realized<br>\n(thanks to a comment in @alexcrichton's stack-limit PR) that x16 and x17<br>\nare the \"interprocedural veneer temporaries\", free to use within a<br>\nfunction body. These are now are spilltmp and \"tmp2\".</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 196345990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588702994
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a> from <code>aarch64-stack-frame</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR changes the aarch64 ABI implementation to use positive offsets<br>\nfrom SP, rather than negative offsets from FP, to refer to spill slots<br>\nand stack-local storage. This allows for better addressing-mode options,<br>\nand hence slightly better code: e.g., the unsigned scaled 12-bit offset<br>\nmode can be used to reach anywhere in a 32KB frame without extra<br>\naddress-construction instructions, whereas negative offsets are limited<br>\nto a signed 9-bit unscaled mode (-256 bytes).</p>\n<p>To enable this, the PR introduces a notion of \"nominal SP offsets\" as a<br>\nvirtual addressing mode, lowered during the emission pass. The offsets<br>\nare relative to \"SP after adjusting downward to allocate stack/spill<br>\nslots\", but before pushing clobbers. This allows the addressing-mode<br>\nexpressions to be generated before register allocation (or during it,<br>\nfor spill/reload sequences).</p>\n<p>To convert these offsets into <em>true</em> offsets from SP, we need to track<br>\nhow much further SP is moved downward, and compensate for this. We do so<br>\nwith \"virtual SP offset adjustment\" pseudo-instructions: these are seen<br>\nby the emission pass, and result in no instruction (0 byte output), but<br>\nupdate state that is now threaded through each instruction emission in<br>\nturn. In this way, we can push e.g. stack args for a call and adjust<br>\nthe virtual SP offset, allowing reloads from nominal-SP-relative<br>\nspillslots while we do the argument setup with \"real SP offsets\" at the<br>\nsame time.</p>\n<p>As part of this PR, I also adjust how temporaries are used: I realized<br>\n(thanks to a comment in @alexcrichton's stack-limit PR) that x16 and x17<br>\nare the \"interprocedural veneer temporaries\", free to use within a<br>\nfunction body. These are now are spilltmp and \"tmp2\".</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 196362377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588710395
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a> from <code>aarch64-stack-frame</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR changes the aarch64 ABI implementation to use positive offsets<br>\nfrom SP, rather than negative offsets from FP, to refer to spill slots<br>\nand stack-local storage. This allows for better addressing-mode options,<br>\nand hence slightly better code: e.g., the unsigned scaled 12-bit offset<br>\nmode can be used to reach anywhere in a 32KB frame without extra<br>\naddress-construction instructions, whereas negative offsets are limited<br>\nto a signed 9-bit unscaled mode (-256 bytes).</p>\n<p>To enable this, the PR introduces a notion of \"nominal SP offsets\" as a<br>\nvirtual addressing mode, lowered during the emission pass. The offsets<br>\nare relative to \"SP after adjusting downward to allocate stack/spill<br>\nslots\", but before pushing clobbers. This allows the addressing-mode<br>\nexpressions to be generated before register allocation (or during it,<br>\nfor spill/reload sequences).</p>\n<p>To convert these offsets into <em>true</em> offsets from SP, we need to track<br>\nhow much further SP is moved downward, and compensate for this. We do so<br>\nwith \"virtual SP offset adjustment\" pseudo-instructions: these are seen<br>\nby the emission pass, and result in no instruction (0 byte output), but<br>\nupdate state that is now threaded through each instruction emission in<br>\nturn. In this way, we can push e.g. stack args for a call and adjust<br>\nthe virtual SP offset, allowing reloads from nominal-SP-relative<br>\nspillslots while we do the argument setup with \"real SP offsets\" at the<br>\nsame time.</p>\n<p>As part of this PR, I also adjust how temporaries are used: I realized<br>\n(thanks to a comment in @alexcrichton's stack-limit PR) that x16 and x17<br>\nare the \"interprocedural veneer temporaries\", free to use within a<br>\nfunction body. These are now are spilltmp and \"tmp2\".</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 196365746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588711879
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-406596734\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-406596734\">PR Review</a>.</p>",
        "id": 196631848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588770760
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-406596734\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-406596734\">PR Review</a>.</p>",
        "id": 196631849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588770760
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r420778156\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r420778156\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is actually unused in this PR, so it could be removed? (unless you plan to use it soon later)</p>\n<p>(<code>pub(crate)</code> would show you a warning if it's effectively unused)</p>\n</blockquote>",
        "id": 196631850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588770760
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a> from <code>aarch64-stack-frame</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR changes the aarch64 ABI implementation to use positive offsets<br>\nfrom SP, rather than negative offsets from FP, to refer to spill slots<br>\nand stack-local storage. This allows for better addressing-mode options,<br>\nand hence slightly better code: e.g., the unsigned scaled 12-bit offset<br>\nmode can be used to reach anywhere in a 32KB frame without extra<br>\naddress-construction instructions, whereas negative offsets are limited<br>\nto a signed 9-bit unscaled mode (-256 bytes).</p>\n<p>To enable this, the PR introduces a notion of \"nominal SP offsets\" as a<br>\nvirtual addressing mode, lowered during the emission pass. The offsets<br>\nare relative to \"SP after adjusting downward to allocate stack/spill<br>\nslots\", but before pushing clobbers. This allows the addressing-mode<br>\nexpressions to be generated before register allocation (or during it,<br>\nfor spill/reload sequences).</p>\n<p>To convert these offsets into <em>true</em> offsets from SP, we need to track<br>\nhow much further SP is moved downward, and compensate for this. We do so<br>\nwith \"virtual SP offset adjustment\" pseudo-instructions: these are seen<br>\nby the emission pass, and result in no instruction (0 byte output), but<br>\nupdate state that is now threaded through each instruction emission in<br>\nturn. In this way, we can push e.g. stack args for a call and adjust<br>\nthe virtual SP offset, allowing reloads from nominal-SP-relative<br>\nspillslots while we do the argument setup with \"real SP offsets\" at the<br>\nsame time.</p>\n<p>As part of this PR, I also adjust how temporaries are used: I realized<br>\n(thanks to a comment in @alexcrichton's stack-limit PR) that x16 and x17<br>\nare the \"interprocedural veneer temporaries\", free to use within a<br>\nfunction body. These are now are spilltmp and \"tmp2\".</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 196659839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588782246
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-406789259\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#pullrequestreview-406789259\">PR Review</a>.</p>",
        "id": 196661174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588782861
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r420930153\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607#discussion_r420930153\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Removed, thanks!</p>\n</blockquote>",
        "id": 196661175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588782862
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1607\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1607\">PR #1607</a>.</p>",
        "id": 196669066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588786172
    }
]