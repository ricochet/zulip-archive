[
    {
        "content": "<p>marmistrz opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1358\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1358\">Issue #1358</a>:</p>\n<blockquote>\n<p>Windows distinguishes between file symlinks and directory symlinks. It's possible to create a dangling symlink, but the type (file/directory) has to be specified upfront, upon creation. </p>\n<p>The behavior in case of type mismatch is inconsistent. Precisely, suppose that a dangling file symlink is created <code>foo -&gt; bar</code> and later, a directory <code>bar</code> is created. Then:</p>\n<p>* under msys64 bash, <code>cd foo</code> succeeds and the directory view is the same when access either directly or through the symlink<br>\n   * under cmd (both windowed and as a child process from msys64 bash). <code>cd foo</code> fails with <code>The directory name is invalid</code><br>\n   * under Windows Explorer, the dangling symlink is invisible</p>\n<p>We should decide how WASI should handle a request to create a dangling symlink. Possible ideas:</p>\n<ol>\n<li>default to file symlinks, make sure that WASI can correctly handle them even in case of type mismatch and neglect the fact that they may be broken outside WASI</li>\n<li>as in 1., but correct the symlinks when encountered/upon close/etc.</li>\n<li>deny creating dangling symlinks altogether and modify the tests to disallow it (it may break existing code! so probably a bad idea)</li>\n</ol>\n<p>cc @kubkon @sunfishcode @peterhuene </p>\n</blockquote>",
        "id": 191032799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584560965
    },
    {
        "content": "<p>marmistrz labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1358\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1358\">Issue #1358</a>:</p>\n<blockquote>\n<p>Windows distinguishes between file symlinks and directory symlinks. It's possible to create a dangling symlink, but the type (file/directory) has to be specified upfront, upon creation. </p>\n<p>The behavior in case of type mismatch is inconsistent. Precisely, suppose that a dangling file symlink is created <code>foo -&gt; bar</code> and later, a directory <code>bar</code> is created. Then:</p>\n<p>* under msys64 bash, <code>cd foo</code> succeeds and the directory view is the same when access either directly or through the symlink<br>\n   * under cmd (both windowed and as a child process from msys64 bash). <code>cd foo</code> fails with <code>The directory name is invalid</code><br>\n   * under Windows Explorer, the dangling symlink is invisible</p>\n<p>We should decide how WASI should handle a request to create a dangling symlink. Possible ideas:</p>\n<ol>\n<li>default to file symlinks, make sure that WASI can correctly handle them even in case of type mismatch and neglect the fact that they may be broken outside WASI</li>\n<li>as in 1., but correct the symlinks when encountered/upon close/etc.</li>\n<li>deny creating dangling symlinks altogether and modify the tests to disallow it (it may break existing code! so probably a bad idea)</li>\n</ol>\n<p>cc @kubkon @sunfishcode @peterhuene </p>\n</blockquote>",
        "id": 191032800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584560965
    },
    {
        "content": "<p>marmistrz labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1358\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1358\">Issue #1358</a>:</p>\n<blockquote>\n<p>Windows distinguishes between file symlinks and directory symlinks. It's possible to create a dangling symlink, but the type (file/directory) has to be specified upfront, upon creation. </p>\n<p>The behavior in case of type mismatch is inconsistent. Precisely, suppose that a dangling file symlink is created <code>foo -&gt; bar</code> and later, a directory <code>bar</code> is created. Then:</p>\n<p>* under msys64 bash, <code>cd foo</code> succeeds and the directory view is the same when access either directly or through the symlink<br>\n   * under cmd (both windowed and as a child process from msys64 bash). <code>cd foo</code> fails with <code>The directory name is invalid</code><br>\n   * under Windows Explorer, the dangling symlink is invisible</p>\n<p>We should decide how WASI should handle a request to create a dangling symlink. Possible ideas:</p>\n<ol>\n<li>default to file symlinks, make sure that WASI can correctly handle them even in case of type mismatch and neglect the fact that they may be broken outside WASI</li>\n<li>as in 1., but correct the symlinks when encountered/upon close/etc.</li>\n<li>deny creating dangling symlinks altogether and modify the tests to disallow it (it may break existing code! so probably a bad idea)</li>\n</ol>\n<p>cc @kubkon @sunfishcode @peterhuene </p>\n</blockquote>",
        "id": 191032801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584560965
    },
    {
        "content": "<p>marmistrz labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1358\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1358\">Issue #1358</a>:</p>\n<blockquote>\n<p>Windows distinguishes between file symlinks and directory symlinks. It's possible to create a dangling symlink, but the type (file/directory) has to be specified upfront, upon creation. </p>\n<p>The behavior in case of type mismatch is inconsistent. Precisely, suppose that a dangling file symlink is created <code>foo -&gt; bar</code> and later, a directory <code>bar</code> is created. Then:</p>\n<p>* under msys64 bash, <code>cd foo</code> succeeds and the directory view is the same when access either directly or through the symlink<br>\n   * under cmd (both windowed and as a child process from msys64 bash). <code>cd foo</code> fails with <code>The directory name is invalid</code><br>\n   * under Windows Explorer, the dangling symlink is invisible</p>\n<p>We should decide how WASI should handle a request to create a dangling symlink. Possible ideas:</p>\n<ol>\n<li>default to file symlinks, make sure that WASI can correctly handle them even in case of type mismatch and neglect the fact that they may be broken outside WASI</li>\n<li>as in 1., but correct the symlinks when encountered/upon close/etc.</li>\n<li>deny creating dangling symlinks altogether and modify the tests to disallow it (it may break existing code! so probably a bad idea)</li>\n</ol>\n<p>cc @kubkon @sunfishcode @peterhuene </p>\n</blockquote>",
        "id": 191032802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584560965
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1358#issuecomment-600836401\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1358#issuecomment-600836401\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1358\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1358\">Issue #1358</a>:</p>\n<blockquote>\n<p>I think I'm leaning towards a preference to default to a file symlink and document that (Windows-specific) behavior.</p>\n</blockquote>",
        "id": 191035692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584562418
    }
]