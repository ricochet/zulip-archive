[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3934\">PR #3934</a> from <code>x64-fpcmp-fix</code> to <code>main</code>:</p>\n<blockquote>\n<p>The <code>fpcmp</code> helper in the x64 backend uses <code>put_in_xmm_mem</code> for one of<br>\nits operands, which allows the compiler to merge a load with the compare<br>\ninstruction (<code>ucomiss</code> or <code>ucomisd</code>).</p>\n<p>Unfortunately, as we saw in #2576 for the integer-compare case, this<br>\ndoes not work with our lowering algorithm because compares can be<br>\nlowered more than once (unlike all other instructions) to reproduce the<br>\nflags where needed. Merging a load into an op that executes more than<br>\nonce is invalid in general (the two loads may observe different values,<br>\nwhich violates the original program semantics because there was only one<br>\nload originally).</p>\n<p>This does not result in a miscompilation, but instead will cause a panic<br>\nat regalloc time because the register that should have been defined by<br>\nthe separate load is never written (the load is never emitted<br>\nseparately).</p>\n<p>I think this (very subtle, easy to miss) condition was unfortunately not<br>\nported over when we moved the logic in #3682.</p>\n<p>The existing fcmp-of-load test in <code>cmp-mem-bug</code> (from #2576) does not<br>\nseem to trigger it, for a reason I haven't fully deduced. I just added<br>\nthe verbatim function body (happens to come from <code>clang.wasm</code>) that<br>\ntriggers the bug as a test.</p>\n<p>Discovered while bringing up regalloc2 support. It's pretty unlikely to<br>\nhit by chance, which is why I think none of our fuzzing has hit it yet.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 275464861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647403041
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3934\">PR #3934</a>.</p>",
        "id": 275464862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647403041
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3934\">PR #3934</a>.</p>",
        "id": 275464863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647403041
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3934#pullrequestreview-911966964\">PR review</a>.</p>",
        "id": 275555591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647454607
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3934\">PR #3934</a>.</p>",
        "id": 275555602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647454612
    }
]