[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4130\">issue #4130</a>:</p>\n<blockquote>\n<p>As part of #4128, we will need a way to write ISLE rules that replace CLIF values with new CLIF values, insert new CLIF instructions, and delete old CLIF instructions. It might also make sense to allow replacement of single instructions with bounded (single-in, single-out) control-flow shapes, as in <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/hoopl-haskell10.pdf\">Hoopl</a>.</p>\n<p>This work will consist at least of:</p>\n<ul>\n<li>Developing a driver framework, similar to but distinct from the CLIF-to-MachInst lowering driver, for both forward and backward transform passes to traverse the input;</li>\n<li>Making the generated CLIF-instruction extractor prelude compatible with this framework as well;</li>\n<li>Generating CLIF-instruction constructors;</li>\n<li>Developing an idiomatic way of writing a toplevel constructor entry-point that replaces one input value/instruction with some output.</li>\n</ul>\n</blockquote>",
        "id": 281899642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652225340
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4130\">issue #4130</a>:</p>\n<blockquote>\n<p>As part of #4128, we will need a way to write ISLE rules that replace CLIF values with new CLIF values, insert new CLIF instructions, and delete old CLIF instructions. It might also make sense to allow replacement of single instructions with bounded (single-in, single-out) control-flow shapes, as in <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/hoopl-haskell10.pdf\">Hoopl</a>.</p>\n<p>This work will consist at least of:</p>\n<ul>\n<li>Developing a driver framework, similar to but distinct from the CLIF-to-MachInst lowering driver, for both forward and backward transform passes to traverse the input;</li>\n<li>Making the generated CLIF-instruction extractor prelude compatible with this framework as well;</li>\n<li>Generating CLIF-instruction constructors;</li>\n<li>Developing an idiomatic way of writing a toplevel constructor entry-point that replaces one input value/instruction with some output.</li>\n</ul>\n</blockquote>",
        "id": 281899644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652225340
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4130\">issue #4130</a>:</p>\n<blockquote>\n<p>As part of #4128, we will need a way to write ISLE rules that replace CLIF values with new CLIF values, insert new CLIF instructions, and delete old CLIF instructions. It might also make sense to allow replacement of single instructions with bounded (single-in, single-out) control-flow shapes, as in <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/hoopl-haskell10.pdf\">Hoopl</a>.</p>\n<p>This work will consist at least of:</p>\n<ul>\n<li>Developing a driver framework, similar to but distinct from the CLIF-to-MachInst lowering driver, for both forward and backward transform passes to traverse the input;</li>\n<li>Making the generated CLIF-instruction extractor prelude compatible with this framework as well;</li>\n<li>Generating CLIF-instruction constructors;</li>\n<li>Developing an idiomatic way of writing a toplevel constructor entry-point that replaces one input value/instruction with some output.</li>\n</ul>\n</blockquote>",
        "id": 281899645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652225340
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4130#issuecomment-1300811528\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4130\">issue #4130</a>:</p>\n<blockquote>\n<p>This is implemented in the recent e-graphs work. Closing.</p>\n</blockquote>",
        "id": 307563702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667405925
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4130\">issue #4130</a>:</p>\n<blockquote>\n<p>As part of #4128, we will need a way to write ISLE rules that replace CLIF values with new CLIF values, insert new CLIF instructions, and delete old CLIF instructions. It might also make sense to allow replacement of single instructions with bounded (single-in, single-out) control-flow shapes, as in <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/hoopl-haskell10.pdf\">Hoopl</a>.</p>\n<p>This work will consist at least of:</p>\n<ul>\n<li>Developing a driver framework, similar to but distinct from the CLIF-to-MachInst lowering driver, for both forward and backward transform passes to traverse the input;</li>\n<li>Making the generated CLIF-instruction extractor prelude compatible with this framework as well;</li>\n<li>Generating CLIF-instruction constructors;</li>\n<li>Developing an idiomatic way of writing a toplevel constructor entry-point that replaces one input value/instruction with some output.</li>\n</ul>\n</blockquote>",
        "id": 307563706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667405926
    }
]