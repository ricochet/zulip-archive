[
    {
        "content": "<p>sunfishcode opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6909\">PR #6909</a> from <code>sunfishcode:pch/backpressure_2</code> to <code>bytecodealliance:pch/backpressure_2</code>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 387171780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692916882
    },
    {
        "content": "<p><strong>sunfishcode</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6909\">PR #6909</a>.</p>",
        "id": 387171781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692916883
    },
    {
        "content": "<p><strong>sunfishcode</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6909\">PR #6909</a>.</p>",
        "id": 387171783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692916883
    },
    {
        "content": "<p>elliottt merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6909\">PR #6909</a>.</p>",
        "id": 387178598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692921698
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6909#pullrequestreview-1594775935\">PR review</a>.</p>",
        "id": 387201090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692934613
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6909#pullrequestreview-1594775935\">PR review</a>.</p>",
        "id": 387201091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692934613
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6909#discussion_r1305092178\">PR review comment</a>:</p>\n<blockquote>\n<p><code>streams::blocking-flush</code> takes care of this entire nested case, because I figured it would be common.</p>\n</blockquote>",
        "id": 387201093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692934613
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6909#discussion_r1305093384\">PR review comment</a>:</p>\n<blockquote>\n<p>this is <code>blocking-check-write</code> for the common case. Also, no loop is needed because check_write is guaranteed to give Some() after the pollable is ready.</p>\n</blockquote>",
        "id": 387201094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692934613
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6909#discussion_r1305093061\">PR review comment</a>:</p>\n<blockquote>\n<p>Incorrect- that is not the number written, that is the number permitted to write next. Since you already called <code>streams::check_write</code>, you can call <code>streams::write(output, slice_to_write)</code> and be assured all of those bytes will be written. If they will not be written, write will trap.</p>\n</blockquote>",
        "id": 387201095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692934613
    }
]