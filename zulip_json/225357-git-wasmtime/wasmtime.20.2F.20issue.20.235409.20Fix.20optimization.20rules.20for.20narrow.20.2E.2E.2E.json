[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409#issuecomment-1344735594\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409\">issue #5409</a>:</p>\n<blockquote>\n<blockquote>\n<p>This was producing iconsts with set high bits beyond their types' width, which is not legal.</p>\n</blockquote>\n<p>I thought backends were supposed to mask it. I believe cg_clif sometimes sign extends immediates.</p>\n</blockquote>",
        "id": 314973466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670616430
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409#issuecomment-1344741835\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409\">issue #5409</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>This was producing iconsts with set high bits beyond their types' width, which is not legal.</p>\n</blockquote>\n<p>I thought backends were supposed to mask it. I believe cg_clif sometimes sign extends immediates.</p>\n</blockquote>\n<p>Hmm, it seems we discussed this and filed #3059 a while ago, and haven't done any thinking about it since. I suspect that we aren't doing such masking everywhere we need to be, and requiring rules everywhere to do the masking (e.g., const-folding an <code>icmp eq</code> would require comparing only the relevant bits) seems cumbersome. I'd rather we have an invariant that values stay in range.</p>\n<p>For now I guess we can keep the status quo, but we should think about this some more (on that issue probably)!</p>\n</blockquote>",
        "id": 314974750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670616920
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409#issuecomment-1344818810\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409\">issue #5409</a>:</p>\n<blockquote>\n<p>BTW I'm curious if the new optimization rules have any impact on any benchmarks. Do these patterns show up in any CLIF we're generating from wasm, or do our current benchmarks compile to the same sequence of instructions either way? Not terribly important but if this is a significant win for some reason, that'd be nice to know.</p>\n</blockquote>",
        "id": 314989441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670623105
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409#issuecomment-1344827732\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409\">issue #5409</a>:</p>\n<blockquote>\n<p>That's a good question, re: the <code>icmp</code> folding; I didn't do tests on this. Honestly I'd be somewhat surprised if they did though, given that the benchmarks are optimized <code>.wasm</code>s and the sorts of redundancies that show up in the translated CLIF are not usually things that const-folding applies to.</p>\n</blockquote>",
        "id": 314991102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670623777
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409#issuecomment-1344838038\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5409\">issue #5409</a>:</p>\n<blockquote>\n<p>And, to follow up, a quick smoketest with <code>bz2</code> shows no runtime impact with the additional <code>icmp</code> folding roles.</p>\n</blockquote>",
        "id": 314992243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670624255
    }
]