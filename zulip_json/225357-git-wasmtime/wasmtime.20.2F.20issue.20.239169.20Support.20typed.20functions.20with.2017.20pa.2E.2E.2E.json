[
    {
        "content": "<p>jvff opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9169\">issue #9169</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><a href=\"https://docs.rs/wasmtime/24.0.0/wasmtime/trait.WasmParams.html\"><code>WasmParams</code> currently supports tuples with up to 16 elements</a>. However, <code>wit-bindgen</code> may generate imports for functions with up to 17 parameters, in scenarios where there are 16 flat types used for parameters plus an extra pointer for the return heap area. This is (AFAICT) according to the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md#flattening\">Canonical ABI</a>.</p>\n<h4>Benefit</h4>\n<p>This would allow using proper typing when exporting functions to Wasm modules following the WIT interface.</p>\n<h4>Implementation</h4>\n<p>I tested adding another line here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L356\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L356</a></p>\n<p>and it seemed to work for my use case. I'm not sure if there are tests that need to be updated or if there's a better approach before opening a PR.</p>\n<h4>Alternatives</h4>\n<p>I think this could be worked around by not using typed parameters.<br>\n</p>\n</blockquote>",
        "id": 464715136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724437420
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9169#issuecomment-2307700413\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9169\">issue #9169</a>:</p>\n<blockquote>\n<p>Makes sense to me to add, feel free to send a PR!</p>\n</blockquote>",
        "id": 464729127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724441702
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9169\">issue #9169</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><a href=\"https://docs.rs/wasmtime/24.0.0/wasmtime/trait.WasmParams.html\"><code>WasmParams</code> currently supports tuples with up to 16 elements</a>. However, <code>wit-bindgen</code> may generate imports for functions with up to 17 parameters, in scenarios where there are 16 flat types used for parameters plus an extra pointer for the return heap area. This is (AFAICT) according to the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md#flattening\">Canonical ABI</a>.</p>\n<h4>Benefit</h4>\n<p>This would allow using proper typing when exporting functions to Wasm modules following the WIT interface.</p>\n<h4>Implementation</h4>\n<p>I tested adding another line here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L356\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L356</a></p>\n<p>and it seemed to work for my use case. I'm not sure if there are tests that need to be updated or if there's a better approach before opening a PR.</p>\n<h4>Alternatives</h4>\n<p>I think this could be worked around by not using typed parameters.<br>\n</p>\n</blockquote>",
        "id": 464734143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724443323
    }
]