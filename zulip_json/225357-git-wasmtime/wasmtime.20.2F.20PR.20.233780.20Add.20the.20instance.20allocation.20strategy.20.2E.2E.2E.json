[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for generating configs with arbitrary instance<br>\nallocation strategies.</p>\n<p>With this, the pooling allocator will be fuzzed as part of the existing fuzz<br>\ntargets.</p>\n</blockquote>",
        "id": 271201910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644359858
    },
    {
        "content": "<p><strong>peterhuene</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a>.</p>",
        "id": 271201916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644359862
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-876738536\">PR review</a>.</p>",
        "id": 271203125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644360496
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-876737367\">PR review</a>.</p>",
        "id": 271203622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644360796
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-876737367\">PR review</a>.</p>",
        "id": 271203623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644360796
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r802123353\">PR review comment</a>:</p>\n<blockquote>\n<p>MAX_TABLES here?</p>\n<p>In general it seems maybe there should be a <code>MAX_*</code> constant for each kind of entity (functions, tables, memories, globals) and then imported_[entity] and [entity] both lie in that range -- or otherwise, maybe a comment why some limits have specific bounds and others are generic <code>MAXIMUM</code>?</p>\n</blockquote>",
        "id": 271203625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644360796
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-876750814\">PR review</a>.</p>",
        "id": 271205022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644361529
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r802133436\">PR review comment</a>:</p>\n<blockquote>\n<p>I'll make this more consistent.</p>\n</blockquote>",
        "id": 271205023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644361529
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>.</p>",
        "id": 271206280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362190
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-876758101\">PR review</a>.</p>",
        "id": 271206281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362191
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r802139051\">PR review comment</a>:</p>\n<blockquote>\n<p>I've added constants for each type to make it clearer.</p>\n<p>Note that for limits like <code>functions</code>, it denotes the _defined_ function limit and not the total function limit, thus <code>imported_functions</code> isn't bound in the range <code>(0..=MAX_FUNCTIONS)</code>, for example.</p>\n</blockquote>",
        "id": 271206283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362192
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>.</p>",
        "id": 271206414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362278
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>.</p>",
        "id": 271228971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644380198
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>.</p>",
        "id": 271229000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644380257
    },
    {
        "content": "<p><strong>peterhuene</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a>.</p>",
        "id": 271229071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644380321
    },
    {
        "content": "<p><strong>peterhuene</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a>.</p>",
        "id": 271229072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644380322
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for generating configs with arbitrary instance<br>\nallocation strategies.</p>\n<p>With this, the pooling allocator will be fuzzed as part of the existing fuzz<br>\ntargets and also with the new <code>pooling</code> fuzz target.</p>\n</blockquote>",
        "id": 271229467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644380779
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-877648519\">PR review</a>.</p>",
        "id": 271296218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644421096
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-877648519\">PR review</a>.</p>",
        "id": 271296219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644421096
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r802794409\">PR review comment</a>:</p>\n<blockquote>\n<p>Was this necessary to split out the memory configuration like this? I figured we'd just ignore irrelevant settings with the pooling allocator but I wouldn't be surprised if sanity checks prevented some of this</p>\n</blockquote>",
        "id": 271296220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644421096
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r802797307\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that we should be able to relatively easily control the limits on the wasm-smith-generated-module, could one of the methods on <code>Config</code> automatically apply the configuration of the pooling allocator to the wasm-smith module limits perhaps? </p>\n<p>(that'd avoid the need to duplicate this error handling below as well)</p>\n</blockquote>",
        "id": 271296221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644421096
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r802798003\">PR review comment</a>:</p>\n<blockquote>\n<p>I would naively expect that fuzzing here with the on-demand allocator would be fine, so could this be removed to naturally fuzz with both given the config generated above?</p>\n</blockquote>",
        "id": 271296222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644421097
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-877844956\">PR review</a>.</p>",
        "id": 271319169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644429001
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r802936595\">PR review comment</a>:</p>\n<blockquote>\n<p>The pooling allocator does check if <code>memory_pages</code> in the configured module limit exceeds the static memory bound and will fail the creation of the engine when that is the case.</p>\n<p>I can make this less verbose, at least, by only setting <code>static_memory_maximum_size</code> in either branch based on the strategy being on-demand.</p>\n</blockquote>",
        "id": 271319174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644429001
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-877951890\">PR review</a>.</p>",
        "id": 271333381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644434697
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r803013941\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to massage the configuration settings to be correct for cases like that? Such as tweaking the instantiation limit bounds or these arguments to be the minimum of each one or something like that. </p>\n</blockquote>",
        "id": 271333382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644434697
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-878150543\">PR review</a>.</p>",
        "id": 271360228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644447458
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r803160125\">PR review comment</a>:</p>\n<blockquote>\n<p>So we can't completely avoid this check as currently there's no way to constrain table type minimums in <code>wasm-smith</code> like we can with memory types. The pooling instance allocator may place limits on the maximum elements in a table and will error if a table type has a minimum that exceeds the allocator's limit.</p>\n<p>I have some changes that makes hitting this error much less likely where we constraint the generated module based on the arbitrary pooling limits (if arbitrarily configured to use pooling), but we'll need to update <code>wasm-smith</code> to fully remove these two checks, I believe.</p>\n</blockquote>",
        "id": 271360229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644447458
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r803160125\">PR review comment</a>.</p>",
        "id": 271361072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644447875
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r803160125\">PR review comment</a>.</p>",
        "id": 271361123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644447906
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r803177680\">PR review comment</a>:</p>\n<blockquote>\n<p>This will be removed and we'll fuzz on any arbitrary strategy (the target has subsequently been renamed to <code>instantiate-many</code>).</p>\n</blockquote>",
        "id": 271363686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644449505
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-878172956\">PR review</a>.</p>",
        "id": 271363687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644449505
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for generating configs with arbitrary instance<br>\nallocation strategies.</p>\n<p>With this, the pooling allocator will be fuzzed as part of the existing fuzz<br>\ntargets and also with the new <code>instantiate-many</code> fuzz target.</p>\n</blockquote>",
        "id": 271365243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644450504
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>.</p>",
        "id": 271386131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644468801
    },
    {
        "content": "<p><strong>peterhuene</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a>.</p>",
        "id": 271386177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644468843
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-878401323\">PR review</a>.</p>",
        "id": 271392466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644476243
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>.</p>",
        "id": 271395984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644478738
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-878991766\">PR review</a>.</p>",
        "id": 271445119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644506111
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r803781936\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm a little worried about this change in that above there's a <code>.min(0x1000..)</code> to I think make the cap still the same but randomly choosing a 64-bit number seems like it'll almost always use the 0x1000.. limit instead of something smaller? Overall I'm wondering if this 64-bit space heavily weights the fuzzing to always choose the same result and whether that has an affect.</p>\n</blockquote>",
        "id": 271445120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644506111
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-878991940\">PR review</a>.</p>",
        "id": 271445148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644506117
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-879267647\">PR review</a>.</p>",
        "id": 271473243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644517540
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r803982181\">PR review comment</a>:</p>\n<blockquote>\n<p>That's an excellent point. Let me fix that.</p>\n</blockquote>",
        "id": 271473244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644517541
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>.</p>",
        "id": 271478324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644519732
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#pullrequestreview-879315761\">PR review</a>.</p>",
        "id": 271478363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644519752
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#discussion_r804017288\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed with latest push.</p>\n</blockquote>",
        "id": 271478367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644519753
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a> from <code>fuzz-pooling-allocator</code> to <code>main</code>.</p>",
        "id": 271479410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644520206
    },
    {
        "content": "<p>peterhuene merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">PR #3780</a>.</p>",
        "id": 271485479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644522945
    }
]