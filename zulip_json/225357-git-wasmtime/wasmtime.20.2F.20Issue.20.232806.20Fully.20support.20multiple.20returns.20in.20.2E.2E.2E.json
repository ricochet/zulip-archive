[
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-813579754\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<p>If the wasm C ABI adopts multiple return values as a way to return small-ish structs, and if a hypothetical future Rust supports this when returning <code>repr(C)</code> structs to <code>extern \"C\"</code> functions, then we could optimize this feature without user-visible API changes, right?</p>\n<p>Ah, and as a minor bikeshed, rather than \"WasmtimeSystemV\" and \"WasmtimeFastcall\", what would you think of a more explicit name, like \"SingleRetSystemV\" and \"SingleRetFastcall\" or so, to help keep it clear what its purpose is?</p>\n</blockquote>",
        "id": 233214681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617649383
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-813591165\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<p>Can you clarify what you mean about the wasm C ABI? The current proposed wasm-c-api <code>wasm.h</code> header file provides no way to get a natively-callable function pointer which exposes ABI details, that's all internal to the engine. Currently we have no support to do so in the wasmtime extensions either afaik.</p>\n<p>For the naming bits, I would personally think that we should probably keep \"wasmtime\" in the name to give ourselves the liberty to easily change it in the future. For example baldrdash has a whole bunch of custom conventions and such throughout cranelift, and I could imagine us wanting to add something like that for wasmtime in the future to optimize various bits and pieces here and there.</p>\n</blockquote>",
        "id": 233216855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617650469
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-813599070\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<p>Ah, I meant <a href=\"https://github.com/WebAssembly/tool-conventions/blob/master/BasicCABI.md\">the toolchain C ABI</a> used by clang, where we've talked about adding multi-value for small structs once it's sufficiently supported in engines.</p>\n<p>If WasmtimeSystemV etc. are meant to adapt to other Wasmtime needs in the future, should we document that they aren't ABI-stable, similar to Fast and Cold?</p>\n</blockquote>",
        "id": 233217975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617651024
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-813606194\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<p>Ah I see! I think, yes, we're able to optimize this in the future without any user-visible changes. We don't expose anything about the ABI details from the <code>wasmtime</code> crate today (intentionally). We're limited in that we have to be able to define all wasm signatures as mapping to a particular Rust signature (which we previously weren't able to do so), but beyond that we can do whatever we want to the internals of the ABI.</p>\n<p>And sure, I can document that these are unstable ABIs.</p>\n</blockquote>",
        "id": 233219203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617651638
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-813617407\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"cranelift:wasm\", \"lightbeam\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 233221816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617652925
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-814415982\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<p>Ok I think I got everything working now! Since it was a very recent change, @cfallin can you confirm you saw <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806/commits/95f86be431557253e41baaef0da68ccf0b3bc0fd\">https://github.com/bytecodealliance/wasmtime/pull/2806/commits/95f86be431557253e41baaef0da68ccf0b3bc0fd</a>? That was necessary to fix some segfaults that were cropping up on windows since the 4-byte return values were getting stored as 8-byte results. The comment there makes me suspicious though...</p>\n<p>I made a stab at getting this implemented in the old backend but I ended up giving up. The old backend implements multi-value returns very differently than the new backend. The old backend spills everything to the stack if it doesn't all fit in registers, which isn't the behavior that we want here (one in registers everything else on the stack). I couldn't figure out how to update the old backend to do this but I figured it wasn't really that necessary. I just removed some trait impls for the old backend in the <code>wasmtime</code> crate so <code>wasmtime</code> is still usable but won't have some abilities. (technically not a valid use of Cargo features but who's enabling the feature anyway?)</p>\n<p>I'll tag @peterhuene for the review of the wasmtime bits, thanks for looking at the Cranelift bits @cfallin!</p>\n</blockquote>",
        "id": 233382710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617740716
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-814437743\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok I think I got everything working now! Since it was a very recent change, @cfallin can you confirm you saw <a href=\"https://github.com/bytecodealliance/wasmtime/commit/95f86be431557253e41baaef0da68ccf0b3bc0fd\">95f86be</a>? That was necessary to fix some segfaults that were cropping up on windows since the 4-byte return values were getting stored as 8-byte results. The comment there makes me suspicious though...</p>\n</blockquote>\n<p>That was indeed a suspicious comment. I am not sure exactly what the original intent was but I double-checked just now that this <code>store</code> helper is not being used to codegen stores; those directly produce correctly-sized instructions. I suspect this originally came from spill/reload helpers in which case \"always spill/reload the full reg\" is a reasonable conservative approach but even then we have the invariant that upper bits (beyond a type's width) in a register are undefined and extended when needed by an op so this should be fine I think. Thanks for calling it out!</p>\n</blockquote>",
        "id": 233388098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617742885
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-815022441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<p>I was a little worried about the unwind info myself (and kept switching it back and forth from <code>Fast</code> to the default to see if it ever fixed failing tests, it never did). In the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/traps.rs\">traps tests though</a> we do have a number of tests already with \"internal\" wasm function frames on the stack (such as <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/traps.rs#L365-L398\">this one</a>) so I think we're at least covering the basics of representing unwind information for varying abis. I'm not sure if this is guaranteed to work in the limit, though.</p>\n<p>@cfallin also were you thinking of more than the tests I added in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806/commits/5962d4c9118a8816afdfaa0a8a70f854d2ba60ab\">https://github.com/bytecodealliance/wasmtime/pull/2806/commits/5962d4c9118a8816afdfaa0a8a70f854d2ba60ab</a>? I tried to break things in various ways but I think it all seems to be working pretty well so far at least.</p>\n</blockquote>",
        "id": 233514178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617810502
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-815026295\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<blockquote>\n<p>@cfallin also were you thinking of more than the tests I added in <a href=\"https://github.com/bytecodealliance/wasmtime/commit/5962d4c9118a8816afdfaa0a8a70f854d2ba60ab\">5962d4c</a>? I tried to break things in various ways but I think it all seems to be working pretty well so far at least.</p>\n</blockquote>\n<p>@alexcrichton That's very thorough, thanks!</p>\n<p>I may be missing something but I don't see any <code>wasmtime_system_v</code> or <code>wasmtime_fastcall</code> signatures -- my main concern was the interleaving of those with externally-usable ABIs. I think it may be enough to just do a <code>wasmtime_system_v</code> + <code>system_v</code> set of tests instead of the SysV/Fastcall combos you have in that file now. Thanks!</p>\n</blockquote>",
        "id": 233515006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617810835
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-815095802\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<p>Ok I've managed to get all tests green and I think I've got all the various tests here in place. It's of course always easy though to use the same abi everywhere if any issues arise, but I'm gonna go ahead and merge this. If there are more tests desired though I'm happy to add some!</p>\n</blockquote>",
        "id": 233530689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617816863
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806#issuecomment-820643560\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2806\">Issue #2806</a>:</p>\n<blockquote>\n<p>Just a note for future reference that this commit has also caused another regression on our side, causing stack overflows on Windows in async tests. I unfortunately don't have more to share, because debugging doesn't work reliably: the called wasm function panics (which is the subject of the test, so it's supposed to do so). When running in the VSCode debugger I hit SIGILL and then the program aborts, while running outside of a debugger there's a stack overflow somewhere. I haven't managed to make an isolated test case either, since I don't have any clues about what's causing the failure.</p>\n</blockquote>",
        "id": 234728789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618511428
    }
]