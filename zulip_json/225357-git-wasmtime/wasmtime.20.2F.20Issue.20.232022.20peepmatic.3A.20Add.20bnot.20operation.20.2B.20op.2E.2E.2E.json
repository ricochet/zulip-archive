[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022#issuecomment-658710005\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022\">Issue #2022</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:peepmatic\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n<li>fitzgen: cranelift:area:peepmatic</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 203942119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594811922
    },
    {
        "content": "<p>MaxGraey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022#issuecomment-659058872\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022\">Issue #2022</a>:</p>\n<blockquote>\n<blockquote>\n<p>I do think that Peepmatic support for bnot instructions is useful, so if you<br>\nwould be interested in separating out just the changes required to support<br>\nbnot, then I would be happy to merge them.</p>\n</blockquote>\n<p>What if I just add support same transform also for <code>simple_preopt.rs</code> for parity?</p>\n</blockquote>",
        "id": 204023863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594854262
    },
    {
        "content": "<p>MaxGraey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022#issuecomment-659058872\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022\">Issue #2022</a>:</p>\n<blockquote>\n<blockquote>\n<p>I do think that Peepmatic support for bnot instructions is useful, so if you<br>\nwould be interested in separating out just the changes required to support<br>\nbnot, then I would be happy to merge them.</p>\n</blockquote>\n<p>What if I just add support same transform also for <code>simple_preopt.rs</code> for parity in this PR?</p>\n</blockquote>",
        "id": 204023880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594854286
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022#issuecomment-659082383\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022\">Issue #2022</a>:</p>\n<blockquote>\n<blockquote>\n<p>What if I just add support same transform also for <code>simple_preopt.rs</code> for parity in this PR?</p>\n</blockquote>\n<p><code>simple_preopt.rs</code> optimizations need to be careful to carry their weight (which is part of what peepmatic is trying to improve upon) and I'm not sure what the exact calculus is that makes an optimization worth it or not. Perhaps @sunfishcode or @bnjbvr could comment on whether this would be a welcome addition to <code>simple_preopt.rs</code>.</p>\n<p>If so, then yes let's add it  <code>preopt.peepmatic</code> as well!</p>\n</blockquote>",
        "id": 204030254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594858868
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022#issuecomment-659292717\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022\">Issue #2022</a>:</p>\n<blockquote>\n<p>Thanks for working on this!</p>\n<blockquote>\n<p><a href=\"http://simple_preopt.rs\">simple_preopt.rs</a> optimizations need to be careful to carry their weight (which is part of what peepmatic is trying to improve upon) and I'm not sure what the exact calculus is that makes an optimization worth it or not. Perhaps @sunfishcode or @bnjbvr could comment on whether this would be a welcome addition to <a href=\"http://simple_preopt.rs\">simple_preopt.rs</a>.</p>\n</blockquote>\n<p>The simple preopt pass was designed to catch frequent patterns that lead to better code generation and that were not directly produced by the wasm producer. We expect most of these optimizations to have already happened in e.g. LLVM. But the IR translation makes it so that some new pattern-matching opportunities on the CLIR arise. Most of simple preopt phase was mostly acting as an helper for instruction selection (legalization) that happened later in the pipeline, by selecting the <code>_imm</code> variants so that legalization would use machine instructions with immediates; the \"pre\" in preopt refers to the fact that it runs before legalization. However, instruction selection happens in a totally different place now, with the new target backends, so this part is becoming less useful.</p>\n<p>Integer transforms like could be valuable at the <code>speed</code> optimization level; there's some overhead for pattern-matching every single instruction, so we try to be careful to not put every optimization we can think of. Usually our line of thinking has been:</p>\n<ul>\n<li>is it reasonable that the CLIF producer already performed such an optimization? If yes, do no replicate it in Cranelift.</li>\n<li>data-driven approach: for large CLIF inputs (from large wasm programs), how many times is the optimization effective? if it's very frequent (there's no \"official\" threshold, so common sense is required here), then do it in Cranelift.</li>\n</ul>\n<p>For instance, constant propagation doesn't quite happen in Cranelift, because we really expect the producer to have done it. For other producers which don't have advanced optimization passes like this, there's an external crate for <code>cranelift-preopt</code> that does exactly this.</p>\n<p>So considering the answers to the two questions above, it might be worth putting it in simple_preopt, or implementing it in the <code>preopt</code> crate?</p>\n</blockquote>",
        "id": 204062196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594891643
    },
    {
        "content": "<p>MaxGraey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022#issuecomment-659297213\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022\">Issue #2022</a>:</p>\n<blockquote>\n<p>@bnjbvr thanks for explanation!<br>\nMain goal of this PR is speedup code produced by webassembly. As you know wasm doesn't have <code>not</code> operation and emulate it via <code>x ^ -1</code>. Also perhaps it could be useful even for LLVM code built with <a href=\"https://godbolt.org/z/1z9r16\"><code>-O0</code> for some reasons</a>.</p>\n</blockquote>",
        "id": 204062959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594892190
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022#issuecomment-659318415\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022\">Issue #2022</a>:</p>\n<blockquote>\n<p>Also, for something as simple as <code>x ^ -1</code>, the new backend(s) that are under development, could easily enough match that in their instruction selectors and directly emit a <code>not</code> insn as appropriate.  There's no requirement for any more heavyweight machinery to handle this particular case.</p>\n</blockquote>",
        "id": 204066193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594894699
    },
    {
        "content": "<p>MaxGraey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022#issuecomment-659342074\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2022\">Issue #2022</a>:</p>\n<blockquote>\n<p>Hmm, could you explain which kind of rules are preferable for peepmatic DSL? It would really help me.</p>\n</blockquote>",
        "id": 204070098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594897810
    }
]