[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-720546810\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<p>Oh dear, good catch! Instead of tweaking the lookup parameters it seems like we should tweak the keys in the map though? I think it might be clearer if the keys only spanned the member bytes of each function.</p>\n<p>Also, can you add a comment for the off-by-one arithmetic in the source too?</p>\n</blockquote>",
        "id": 215334498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604331358
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-720553678\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh dear, good catch! Instead of tweaking the lookup parameters it seems like we should tweak the keys in the map though? I think it might be clearer if the keys only spanned the member bytes of each function.</p>\n<p>Also, can you add a comment for the off-by-one arithmetic in the source too?</p>\n</blockquote>\n<p>It seems like this the place where the ranges are inserted:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allocated</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">traps</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">address_map</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">trap_information</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">allocated</span><span class=\"p\">).</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">allocated</span><span class=\"p\">).</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I guess we can set end to \"ptr + len - 1\" instead.   Do you know if we need to care about the len == 0 case here?</p>\n</blockquote>",
        "id": 215336233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604332048
    },
    {
        "content": "<p>uweigand edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-720553678\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh dear, good catch! Instead of tweaking the lookup parameters it seems like we should tweak the keys in the map though? I think it might be clearer if the keys only spanned the member bytes of each function.</p>\n<p>Also, can you add a comment for the off-by-one arithmetic in the source too?</p>\n</blockquote>\n<p>It seems like this is the place where the ranges are inserted:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allocated</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">traps</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">address_map</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">trap_information</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">allocated</span><span class=\"p\">).</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">allocated</span><span class=\"p\">).</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I guess we can set end to \"ptr + len - 1\" instead.   Do you know if we need to care about the len == 0 case here?</p>\n</blockquote>",
        "id": 215336619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604332216
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-720558867\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<p>I think if the length is zero we can either debug assert that doesn't happen (because I don't think it should) or we could skip it since we can't execute a zero-length function anyway.</p>\n</blockquote>",
        "id": 215337366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604332539
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-720566796\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<p>OK, updated the patch accordingly.  This also fixes the problems I was seeing.</p>\n</blockquote>",
        "id": 215339161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604333314
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-720571750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<p>Thanks! Would it be possible to add a test for this as well? (Maybe as an inline <code>#[test]</code>?)</p>\n</blockquote>",
        "id": 215340555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604333799
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-720580857\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<p>Hmm, not sure what the best way would be here.  Calling \"register\" even from a unit test requires having a full CompiledModule, and I'm not sure how to best create one of those with the property that two functions have immediately adjacent ranges.  That would seem to depend on the specific behavior of the back-end, and be a bit fragile w.r.t. changes in the compiler in general ...  Any suggestions?</p>\n</blockquote>",
        "id": 215342767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604334693
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-720584701\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 215343813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604335080
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-720781463\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<p>It sounds like you were seeing this locally, so could that be checked in as a test? Otherwise we could add a small test that compiles a <code>Module</code> from a wasm file and then reaches into the internals and iterates over every jit byte and asserts that we get the right function out?</p>\n</blockquote>",
        "id": 215392571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604359302
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-721014161\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<blockquote>\n<p>It sounds like you were seeing this locally, so could that be checked in as a test? </p>\n</blockquote>\n<p>I was seeing this with my out-of-tree IBM Z backend under development, so this wouldn't work in tree.</p>\n<blockquote>\n<p>Otherwise we could add a small test that compiles a <code>Module</code> from a wasm file and then reaches into the internals and iterates over every jit byte and asserts that we get the right function out?</p>\n</blockquote>\n<p>OK, added a test along those lines.   Looks a bit tautological to me, but let me know what you think ...</p>\n</blockquote>",
        "id": 215431449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604397190
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349#issuecomment-721342859\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">Issue #2349</a>:</p>\n<blockquote>\n<p>Looks good to me, thanks! It at least fails before the patch and succeeds after, and looks like it won't be the hardest thing in the world to maintain.</p>\n</blockquote>",
        "id": 215502500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604433264
    }
]