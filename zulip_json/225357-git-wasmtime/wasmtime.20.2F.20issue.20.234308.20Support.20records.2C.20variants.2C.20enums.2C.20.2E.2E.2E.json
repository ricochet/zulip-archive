[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>I'm splitting this issue out of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4185\">https://github.com/bytecodealliance/wasmtime/issues/4185</a> to write up some thoughts on how this can be done. Specifically today the current Wasmtime support for the component model has mappings for many component model types to Rust native types but not all of them. For example integers, strings, lists, tuples, etc, are all mapped directly to Rust types. Basically if the component model types equivalent in Rust is in the Rust standard library that's already implemented. What that leaves to implement, however, is Rust-defined mappings for component model types that are \"structural\" like records.</p>\n<p>This issue is intended to document the current thinking of how we're going to expose this. The general idea is that we'll create a <code>proc-macro</code> crate, probably named something like <code>wasmtime-component-macro</code>, which is an internal dependency of the <code>wasmtime</code> crate. The various macros would then get reexported at the <code>wasmtime::component::*</code> namespace.</p>\n<p>Currently the bindings for host types are navigated through three traits: <code>ComponentValue</code>, <code>Lift</code>, and <code>Lower</code>. We'll want a custom derive for all three of these traits. Deriving <code>Lift</code> and <code>Lower</code> require a <code>ComponentValue</code> derive as well, but users should be able to pick one of <code>Lift</code> and <code>Lower</code> without the other one.</p>\n<h2><code>record</code></h2>\n<p>Records in the component model correspond to <code>struct</code>s in Rust. The rough shape of this will be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(record)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>To typecheck correctly the <code>record</code> type must list fields in the same order as the fields listed in the Rust code for now. Field reordering may be implemented at a later date but for now we'll do strict matching. Fields must have both matching names and matching types.</p>\n<p>The <code>#[component(record)]</code> here may seem redundant but it's somewhat required below for variants/enums.</p>\n<p>The <code>#[component(name = \"...\")]</code> is intended to rename the field from the component model's perspective. The type-checking will test against the <code>name</code> specified.</p>\n<p>Using this derive on a tuple or empty struct will result in a compile-time error.</p>\n<h2><code>variant</code></h2>\n<p>Variants roughly correspond to Rust <code>enum</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(variant)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Typechecking, like records, will check cases in-order and all cases must match in both name and payload. A missing payload in Rust is automatically interpreted as the <code>unit</code> payload in the component model.</p>\n<p>Variants with named fields (<code>B { bar: u32 }</code>) will be disallowed. Variants with multiple payloads (<code>B(u32, u32)</code>) will also be disallowed.</p>\n<p>Note that <code>#[component(variant)]</code> here distinguishes it from...</p>\n<h2><code>enum</code></h2>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(enum)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Typechecking is similar to variants where the number/names of cases must all match. </p>\n<p>Variants with any payload are disallowed in this derive mode.</p>\n<h2><code>union</code></h2>\n<p>This will, perhaps surprisingly, still map to an <code>enum</code> in Rust since this is still a tagged union, not a literal C <code>union</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(union)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The number of cases and the types of each case must match a union definition to correctly typecheck. Union cases don't have names so renaming here isn't needed.</p>\n<p>A payload on each enum case in Rust is required, and like with <code>variant</code> it's required to be a tuple-variant with only one element. All other forms of payloads are disallowed. Note that the names in Rust are just informative in Rust, it doesn't affect the ABI or type-checking</p>\n<h2><code>flags</code></h2>\n<p>These will be a bit \"funkier\" than the above since there's not something obvious to attach a <code>#[derive]</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">flags</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[derive(Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"...\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The general idea here is to roughly take inspiration from the <a href=\"https://crates.io/crates/bitflags\"><code>bitflags</code> crate</a> in terms of what the generated code does. Ideally this should have a convenient <code>Debug</code> implementation along with various constants to OR-together and such in Rust. The exact syntax here is up for debate, this is just a strawman.</p>\n<h2>Implementation Details</h2>\n<p>One caveat is that the <code>ComponentValue</code>/<code>Lift</code>/<code>Lower</code> traits mention internal types in the <code>wasmtime</code> crate which aren't intended to be part of the public API. To solve this the macro will reference items in a path such as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">__internal</span>::<span class=\"n\">the_name</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>__internal</code> module will be <code>#[doc(hidden)]</code> and will only exist to reexport dependencies needed by the proc-macro. This crate may end up having a bland <code>pub use wasmtime_environ</code> or individual items, whatever works best.</p>\n<p>The actual generated trait impls will probably look very similar to the implementations that exist for <a href=\"https://github.com/bytecodealliance/wasmtime/blob/87007c58393813f0257f710a92006024c4909a67/crates/wasmtime/src/component/func/typed.rs#L1729-L1826\">tuples</a>, and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/87007c58393813f0257f710a92006024c4909a67/crates/wasmtime/src/component/func/typed.rs#L1582-L1727\"><code>Result&lt;T, E&gt;</code></a> already present in <code>typed.rs</code></p>\n<h2>Alternatives</h2>\n<p>One alternative to the above is to have <code>#[derive(ComponentRecord)]</code> instead of <code>#[derive(ComponentValue)] #[component(record)]</code> or something like that. While historically some discussions have leaned in this direction with the introduction of <code>Lift</code> and <code>Lower</code> traits I personally feel that the balance is now slightly in the other direction where it would be nice if we can keep <code>derive</code> targeted at the specific traits and then configuration for the derive happens afterwards.</p>\n</blockquote>",
        "id": 287261656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656020210
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>I'm splitting this issue out of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4185\">https://github.com/bytecodealliance/wasmtime/issues/4185</a> to write up some thoughts on how this can be done. Specifically today the current Wasmtime support for the component model has mappings for many component model types to Rust native types but not all of them. For example integers, strings, lists, tuples, etc, are all mapped directly to Rust types. Basically if the component model types equivalent in Rust is in the Rust standard library that's already implemented. What that leaves to implement, however, is Rust-defined mappings for component model types that are \"structural\" like records.</p>\n<p>This issue is intended to document the current thinking of how we're going to expose this. The general idea is that we'll create a <code>proc-macro</code> crate, probably named something like <code>wasmtime-component-macro</code>, which is an internal dependency of the <code>wasmtime</code> crate. The various macros would then get reexported at the <code>wasmtime::component::*</code> namespace.</p>\n<p>Currently the bindings for host types are navigated through three traits: <code>ComponentValue</code>, <code>Lift</code>, and <code>Lower</code>. We'll want a custom derive for all three of these traits. Deriving <code>Lift</code> and <code>Lower</code> require a <code>ComponentValue</code> derive as well, but users should be able to pick one of <code>Lift</code> and <code>Lower</code> without the other one.</p>\n<h2><code>record</code></h2>\n<p>Records in the component model correspond to <code>struct</code>s in Rust. The rough shape of this will be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(record)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>To typecheck correctly the <code>record</code> type must list fields in the same order as the fields listed in the Rust code for now. Field reordering may be implemented at a later date but for now we'll do strict matching. Fields must have both matching names and matching types.</p>\n<p>The <code>#[component(record)]</code> here may seem redundant but it's somewhat required below for variants/enums.</p>\n<p>The <code>#[component(name = \"...\")]</code> is intended to rename the field from the component model's perspective. The type-checking will test against the <code>name</code> specified.</p>\n<p>Using this derive on a tuple or empty struct will result in a compile-time error.</p>\n<h2><code>variant</code></h2>\n<p>Variants roughly correspond to Rust <code>enum</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(variant)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Typechecking, like records, will check cases in-order and all cases must match in both name and payload. A missing payload in Rust is automatically interpreted as the <code>unit</code> payload in the component model.</p>\n<p>Variants with named fields (<code>B { bar: u32 }</code>) will be disallowed. Variants with multiple payloads (<code>B(u32, u32)</code>) will also be disallowed.</p>\n<p>Note that <code>#[component(variant)]</code> here distinguishes it from...</p>\n<h2><code>enum</code></h2>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(enum)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Typechecking is similar to variants where the number/names of cases must all match. </p>\n<p>Variants with any payload are disallowed in this derive mode.</p>\n<h2><code>union</code></h2>\n<p>This will, perhaps surprisingly, still map to an <code>enum</code> in Rust since this is still a tagged union, not a literal C <code>union</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(union)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The number of cases and the types of each case must match a union definition to correctly typecheck. Union cases don't have names so renaming here isn't needed.</p>\n<p>A payload on each enum case in Rust is required, and like with <code>variant</code> it's required to be a tuple-variant with only one element. All other forms of payloads are disallowed. Note that the names in Rust are just informative in Rust, it doesn't affect the ABI or type-checking</p>\n<h2><code>flags</code></h2>\n<p>These will be a bit \"funkier\" than the above since there's not something obvious to attach a <code>#[derive]</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">flags</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[derive(Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"...\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The general idea here is to roughly take inspiration from the <a href=\"https://crates.io/crates/bitflags\"><code>bitflags</code> crate</a> in terms of what the generated code does. Ideally this should have a convenient <code>Debug</code> implementation along with various constants to OR-together and such in Rust. The exact syntax here is up for debate, this is just a strawman.</p>\n<h2>Implementation Details</h2>\n<p>One caveat is that the <code>ComponentValue</code>/<code>Lift</code>/<code>Lower</code> traits mention internal types in the <code>wasmtime</code> crate which aren't intended to be part of the public API. To solve this the macro will reference items in a path such as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">__internal</span>::<span class=\"n\">the_name</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>__internal</code> module will be <code>#[doc(hidden)]</code> and will only exist to reexport dependencies needed by the proc-macro. This crate may end up having a bland <code>pub use wasmtime_environ</code> or individual items, whatever works best.</p>\n<p>The actual generated trait impls will probably look very similar to the implementations that exist for <a href=\"https://github.com/bytecodealliance/wasmtime/blob/87007c58393813f0257f710a92006024c4909a67/crates/wasmtime/src/component/func/typed.rs#L1729-L1826\">tuples</a>, and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/87007c58393813f0257f710a92006024c4909a67/crates/wasmtime/src/component/func/typed.rs#L1582-L1727\"><code>Result&lt;T, E&gt;</code></a> already present in <code>typed.rs</code></p>\n<h2>Alternatives</h2>\n<p>One alternative to the above is to have <code>#[derive(ComponentRecord)]</code> instead of <code>#[derive(ComponentValue)] #[component(record)]</code> or something like that. While historically some discussions have leaned in this direction with the introduction of <code>Lift</code> and <code>Lower</code> traits I personally feel that the balance is now slightly in the other direction where it would be nice if we can keep <code>derive</code> targeted at the specific traits and then configuration for the derive happens afterwards.</p>\n</blockquote>",
        "id": 287261661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656020212
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1164903700\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>cc @dicej as I believe you were possibly interested in taking a stab at this</p>\n</blockquote>",
        "id": 287261697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656020241
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1164923396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Thanks, @alexcrichton -- this is extremely helpful.</p>\n<p>BTW, you refer to <code>ComponentValue</code> here and in some of the comments in <a href=\"http://typed.rs\">typed.rs</a>, but the trait is actually named <a href=\"https://github.com/bytecodealliance/wasmtime/blob/87007c58393813f0257f710a92006024c4909a67/crates/wasmtime/src/component/func/typed.rs#L577\"><code>ComponentType</code></a>, correct?</p>\n<p>Anyway, yes, I'll take a stab at this and post questions here as they arise.</p>\n</blockquote>",
        "id": 287264287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656021701
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1164923928\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Whoops sorry yes it's <code>ComponentType</code> (can't keep track of my own historical list of changes)</p>\n</blockquote>",
        "id": 287264394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656021754
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1164975597\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>I had started work on this, but I fully support somebody else taking this on as I've had to switch gears to something else.</p>\n<p>My first contribution here was in PR #4217; there's a little rationale discussion there. And my very work-in-progress branch might help in getting started: <a href=\"https://github.com/jameysharp/wasmtime/tree/component-derive\">https://github.com/jameysharp/wasmtime/tree/component-derive</a></p>\n<p>I'm happy to do code review or answer questions regarding this feature. I'm going to defer to Alex in case of any disagreements but I think I have a pretty good sense of where he wants this to go.</p>\n</blockquote>",
        "id": 287266956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656023381
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1170072029\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Support for record types has been merged.  I'm working on variants now and will move on to the others after that.</p>\n</blockquote>",
        "id": 287864382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656513746
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171347987\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>@alexcrichton How would you suggest I handle cases like these?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(union)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">C</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(union)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Should we throw an error in the first case or silently de-duplicate the types?  And should we simply disallow <code>#[component(union)]</code> on generic <code>enum</code>s?</p>\n</blockquote>",
        "id": 288043631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656602145
    },
    {
        "content": "<p>dicej edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171347987\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>@alexcrichton How would you suggest I handle cases like these?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(union)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">C</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(union)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Should we throw an error in the first case or silently de-duplicate the types?  And should we simply disallow <code>#[component(union)]</code> on generic <code>enum</code>s?</p>\n</blockquote>",
        "id": 288043722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656602177
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171350413\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Hm I'm not sure I understand, those both look pretty reasonable to me and like they should work. Could you clarify which part you're thinking probably needs an error?</p>\n</blockquote>",
        "id": 288043954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656602280
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171360741\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>I guess I assumed duplicate types (e.g. two <code>f32</code>s) in a union type with no way to distinguish between them would be a problem.  If not, then I guess <code>(union float32 float32)</code> is equivalent to <code>(union float32)</code> and both are equally valid?</p>\n</blockquote>",
        "id": 288045278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656602832
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171363755\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Ah ok, my impression is that <code>(union float32 float32)</code> is valid in the component model and because it's a tagged discriminant you can distinguish between the two cases, albeit it does seem a bit silly.</p>\n</blockquote>",
        "id": 288045642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656602986
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171366585\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Okay -- I guess I got thrown off by the fact that the cases aren't named.  Good point about them having separate discriminants, i.e. you can distinguish them based on the order in which they appear.</p>\n</blockquote>",
        "id": 288046066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656603145
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171373228\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Would it make sense to have a custom syntax for unions, like you suggested for flags?  With flags, only the names need to be specified.  With unions, only the types need to be specified.  Seems kind of awkward to make the programmer choose names that will be ignored anyway.</p>\n</blockquote>",
        "id": 288046899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656603497
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171378792\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>In general I'm happy to leave it to your discretion. My assumption was that a <code>union</code> in the component model is represented in Rust with an <code>enum</code> one way or another so I figured \"may as well let the input have the names\" but I don't really mind one way or another.</p>\n</blockquote>",
        "id": 288047597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656603801
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171378766\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Arguing with myself: the programmer will still use those names in Rust code, so they're not useless.  Nevermind my suggestion above.</p>\n</blockquote>",
        "id": 288047599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656603801
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171379890\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>I found it helpful to think of union cases as still being \"named\". There's a bit of text in the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#type-definitions\">Type Definitions section of the component model explainer</a> that describes union and enum as syntactic sugar for variants:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"p\">(</span><span class=\"k\">enum</span> <span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;+</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">↦</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"k\">union</span> <span class=\"o\">&lt;</span><span class=\"n\">valtype</span><span class=\"o\">&gt;+</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">↦</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"s\">\"𝒊\"</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">valtype</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">𝒊</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So the case names for unions are \"0\", \"1\", ...</p>\n<p>I've been tempted to suggest that we should expect a union type for any Rust enum where the cases are named <code>_0</code>, <code>_1</code>, ... But that might be too much magic.</p>\n</blockquote>",
        "id": 288047751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656603861
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171386731\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Thanks for the feedback, @alexcrichton and @jameysharp .  Let's stick with the original plan; being able to specify meaningful names can be nice for use in Rust code, even if they don't get carried over into the component interface.</p>\n</blockquote>",
        "id": 288048649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656604232
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171616633\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4359\">https://github.com/bytecodealliance/wasmtime/pull/4359</a> adds support for variant, enum, and union types.  I'll follow up with a separate PR for flags, since that will be a different kind of macro.</p>\n</blockquote>",
        "id": 288078994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656618792
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1171745125\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>This is excellent work, @dicej! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n</blockquote>",
        "id": 288097685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656629004
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1172977346\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>How should we handle <code>enum</code>s with explicit discriminants?  For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(enum)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Should we ignore them?  Throw an error?</p>\n<p>Similarly, should we pay any attention to e.g. <code>#[repr(u16)]</code> annotations on the target <code>enum</code>?</p>\n</blockquote>",
        "id": 288295068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656804089
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1173104118\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>I think <code>#[repr(u16)]</code> can be ignored. As for discriminants I think those can be ignored as well as only the name matters for the wasm component model. They might be used for interacting with native code through a C abi for example.</p>\n</blockquote>",
        "id": 288330866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656859424
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1173105310\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think <code>#[repr(u16)]</code> can be ignored. As for discriminants I think those can be ignored as well as only the name matters for the wasm component model. They might be used for interacting with native code through a C abi for example.</p>\n</blockquote>\n<p>Agreed.  I think the guiding principle here is: just because a type is annotated with <code>#[derive(ComponentValue)]</code> doesn't mean that the _only_ purpose of the type is for interop with Wasm components.  It could be used for C interop, among other things.</p>\n</blockquote>",
        "id": 288331182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656859855
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1174625477\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>My assumption had been that setting an explicit discriminant would be an error. But, I guess we already keep the Canonical ABI used on the wasm side entirely independent of whatever ABI happens to be used on the Rust side. So yes, you've convinced me that neither explicit discriminants nor <code>#[repr]</code> matter for this purpose.</p>\n</blockquote>",
        "id": 288479901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656998528
    },
    {
        "content": "<p>tsoutsman <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1177340968\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>How does <code>wit-bindgen</code> fit into this? I'm currently trying to create a <code>wasmtime::component::Component</code> from a wasm component with the following export interface file:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>record pci-device {\n    vendor-id: u16,\n    device-id: u16,\n}\n\ninit: func(dev: pci-device)\n</code></pre></div>\n<p>but have ran into <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7000b0a4cff1798b8e2fc5316b1be29b9fee2415/crates/environ/src/component/translate.rs#L737\">this <code>unimplemented!()</code> statement</a>.</p>\n<p>Is the idea that I would have a corresponding struct definition in my Rust i.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(record)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">PciDevice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"vendor-id\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vendor_id</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"device-id\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">device_id</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That I would use when interacting with the module (e.g. <code>TypedFunc</code> type parameters)?</p>\n<p>Also, as a side note, if someone could give me some pointers on implementing \"component type export\" to remove the <code>unimplemented!()</code> statement, I'd be happy to give it a shot.</p>\n</blockquote>",
        "id": 288785619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657187921
    },
    {
        "content": "<p>tsoutsman edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1177340968\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>How does <code>wit-bindgen</code> fit into this? I'm currently trying to create a <code>wasmtime::component::Component</code> from a wasm component with the following export interface file:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>record pci-device {\n    vendor-id: u16,\n    device-id: u16,\n}\n\ninit: func(dev: pci-device)\n</code></pre></div>\n<p>but have ran into <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7000b0a4cff1798b8e2fc5316b1be29b9fee2415/crates/environ/src/component/translate.rs#L737\">this <code>unimplemented!()</code> statement</a>.</p>\n<p>The wasm component is a separate Rust crate that uses <code>wit-bindgen</code> and <code>wit-component</code> to implement the <code>init</code> function.</p>\n<p>Is the idea that I would have a corresponding struct definition in my Rust i.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(record)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">PciDevice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"vendor-id\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vendor_id</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"device-id\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">device_id</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That I would use when interacting with the component (e.g. in <code>TypedFunc</code> type parameters)?</p>\n<p>Also, as a side note, if someone could give me some pointers on implementing \"component type export\" to remove the <code>unimplemented!()</code> statement, I'd be happy to give it a shot.</p>\n</blockquote>",
        "id": 288785829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657188044
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1178349357\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>#4414 should be the last PR for this issue :crossed_fingers: </p>\n</blockquote>",
        "id": 288877306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657235060
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1183422726\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>I believe this can be closed now that #4414 has been merged.</p>\n</blockquote>",
        "id": 289483704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657729097
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308#issuecomment-1183431694\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>Indeed, thanks so much @dicej!</p>\n</blockquote>",
        "id": 289484953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657729628
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4308\">issue #4308</a>:</p>\n<blockquote>\n<p>I'm splitting this issue out of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4185\">https://github.com/bytecodealliance/wasmtime/issues/4185</a> to write up some thoughts on how this can be done. Specifically today the current Wasmtime support for the component model has mappings for many component model types to Rust native types but not all of them. For example integers, strings, lists, tuples, etc, are all mapped directly to Rust types. Basically if the component model types equivalent in Rust is in the Rust standard library that's already implemented. What that leaves to implement, however, is Rust-defined mappings for component model types that are \"structural\" like records.</p>\n<p>This issue is intended to document the current thinking of how we're going to expose this. The general idea is that we'll create a <code>proc-macro</code> crate, probably named something like <code>wasmtime-component-macro</code>, which is an internal dependency of the <code>wasmtime</code> crate. The various macros would then get reexported at the <code>wasmtime::component::*</code> namespace.</p>\n<p>Currently the bindings for host types are navigated through three traits: <code>ComponentValue</code>, <code>Lift</code>, and <code>Lower</code>. We'll want a custom derive for all three of these traits. Deriving <code>Lift</code> and <code>Lower</code> require a <code>ComponentValue</code> derive as well, but users should be able to pick one of <code>Lift</code> and <code>Lower</code> without the other one.</p>\n<h2><code>record</code></h2>\n<p>Records in the component model correspond to <code>struct</code>s in Rust. The rough shape of this will be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(record)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>To typecheck correctly the <code>record</code> type must list fields in the same order as the fields listed in the Rust code for now. Field reordering may be implemented at a later date but for now we'll do strict matching. Fields must have both matching names and matching types.</p>\n<p>The <code>#[component(record)]</code> here may seem redundant but it's somewhat required below for variants/enums.</p>\n<p>The <code>#[component(name = \"...\")]</code> is intended to rename the field from the component model's perspective. The type-checking will test against the <code>name</code> specified.</p>\n<p>Using this derive on a tuple or empty struct will result in a compile-time error.</p>\n<h2><code>variant</code></h2>\n<p>Variants roughly correspond to Rust <code>enum</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(variant)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Typechecking, like records, will check cases in-order and all cases must match in both name and payload. A missing payload in Rust is automatically interpreted as the <code>unit</code> payload in the component model.</p>\n<p>Variants with named fields (<code>B { bar: u32 }</code>) will be disallowed. Variants with multiple payloads (<code>B(u32, u32)</code>) will also be disallowed.</p>\n<p>Note that <code>#[component(variant)]</code> here distinguishes it from...</p>\n<h2><code>enum</code></h2>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(enum)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Typechecking is similar to variants where the number/names of cases must all match. </p>\n<p>Variants with any payload are disallowed in this derive mode.</p>\n<h2><code>union</code></h2>\n<p>This will, perhaps surprisingly, still map to an <code>enum</code> in Rust since this is still a tagged union, not a literal C <code>union</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">ComponentValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(ComponentValue, Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[component(union)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The number of cases and the types of each case must match a union definition to correctly typecheck. Union cases don't have names so renaming here isn't needed.</p>\n<p>A payload on each enum case in Rust is required, and like with <code>variant</code> it's required to be a tuple-variant with only one element. All other forms of payloads are disallowed. Note that the names in Rust are just informative in Rust, it doesn't affect the ABI or type-checking</p>\n<h2><code>flags</code></h2>\n<p>These will be a bit \"funkier\" than the above since there's not something obvious to attach a <code>#[derive]</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">flags</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[derive(Lift, Lower)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"...\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The general idea here is to roughly take inspiration from the <a href=\"https://crates.io/crates/bitflags\"><code>bitflags</code> crate</a> in terms of what the generated code does. Ideally this should have a convenient <code>Debug</code> implementation along with various constants to OR-together and such in Rust. The exact syntax here is up for debate, this is just a strawman.</p>\n<h2>Implementation Details</h2>\n<p>One caveat is that the <code>ComponentValue</code>/<code>Lift</code>/<code>Lower</code> traits mention internal types in the <code>wasmtime</code> crate which aren't intended to be part of the public API. To solve this the macro will reference items in a path such as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">__internal</span>::<span class=\"n\">the_name</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>__internal</code> module will be <code>#[doc(hidden)]</code> and will only exist to reexport dependencies needed by the proc-macro. This crate may end up having a bland <code>pub use wasmtime_environ</code> or individual items, whatever works best.</p>\n<p>The actual generated trait impls will probably look very similar to the implementations that exist for <a href=\"https://github.com/bytecodealliance/wasmtime/blob/87007c58393813f0257f710a92006024c4909a67/crates/wasmtime/src/component/func/typed.rs#L1729-L1826\">tuples</a>, and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/87007c58393813f0257f710a92006024c4909a67/crates/wasmtime/src/component/func/typed.rs#L1582-L1727\"><code>Result&lt;T, E&gt;</code></a> already present in <code>typed.rs</code></p>\n<h2>Alternatives</h2>\n<p>One alternative to the above is to have <code>#[derive(ComponentRecord)]</code> instead of <code>#[derive(ComponentValue)] #[component(record)]</code> or something like that. While historically some discussions have leaned in this direction with the introduction of <code>Lift</code> and <code>Lower</code> traits I personally feel that the balance is now slightly in the other direction where it would be nice if we can keep <code>derive</code> targeted at the specific traits and then configuration for the derive happens afterwards.</p>\n</blockquote>",
        "id": 289484954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657729628
    }
]