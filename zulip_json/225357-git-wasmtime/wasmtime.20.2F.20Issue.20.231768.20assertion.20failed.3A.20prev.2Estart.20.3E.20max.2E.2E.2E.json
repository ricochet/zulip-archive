[
    {
        "content": "<p>roman-kashitsyn opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>This seems to be some race condition that happens quite rarely.</p>\n<p>We have a large test suite that creates many instances of Wasm modules in parallel, executes one function and destroys the instances. The instances don't share any state, each time we create a new Store, a new Module and then an Instance, call the function, and destroy everything.<br>\nThe code of the test suite is closed for now.</p>\n<p>This issue was only seen twice, so even if the test suite was openly available, it wouldn't be of much help.</p>\n<p>The version of Wasmtime we use is<br>\n ```<br>\nwasmtime 0.15.0 (git+https://github.com/bytecodealliance/wasmtime?rev=4fdc4349109721f3a3751fa4fedc4732ea5813f8)</p>\n<div class=\"codehilite\"><pre><span></span><code>Environment: Linux x86_64, Debug build.\n~~~\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198871842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590573978
    },
    {
        "content": "<p>roman-kashitsyn labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>This seems to be some race condition that happens quite rarely.</p>\n<p>We have a large test suite that creates many instances of Wasm modules in parallel, executes one function and destroys the instances. The instances don't share any state, each time we create a new Store, a new Module and then an Instance, call the function, and destroy everything.<br>\nThe code of the test suite is closed for now.</p>\n<p>This issue was only seen twice, so even if the test suite was openly available, it wouldn't be of much help.</p>\n<p>The version of Wasmtime we use is<br>\n ```<br>\nwasmtime 0.15.0 (git+https://github.com/bytecodealliance/wasmtime?rev=4fdc4349109721f3a3751fa4fedc4732ea5813f8)</p>\n<div class=\"codehilite\"><pre><span></span><code>Environment: Linux x86_64, Debug build.\n~~~\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198871843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590573979
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-634562501\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>Do you have a backtrace or full panic message (including assertion location)?</p>\n</blockquote>",
        "id": 198872082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590574144
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-634669724\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>FWIW I saw this happens if the same module is instantiated on different threads. I encountered and fixed that at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1761\">https://github.com/bytecodealliance/wasmtime/pull/1761</a></p>\n</blockquote>",
        "id": 198891617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590586970
    },
    {
        "content": "<p>lostman <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-634680897\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>@yurydelendik That's a very interesting looking PR. <code>SendableModule</code> looks like something that can be kept around in a cache to avoid re-JIT-ing modules. Is that correct?</p>\n</blockquote>",
        "id": 198894349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590588036
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-634718044\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<blockquote>\n<p>SendableModule looks like something that can be kept around in a cache to avoid re-JIT-ing modules. Is that correct?</p>\n</blockquote>\n<p>Correct. Keep in mind that it is a work-in-progress though.</p>\n</blockquote>",
        "id": 198903567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590591409
    },
    {
        "content": "<p>lostman <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-634771980\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>@bjorn3 here are the backtraces from some of the failed tests:</p>\n<p>This one points to the lock which gets poisoned:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/4fdc4349109721f3a3751fa4fedc4732ea5813f8/crates/api/src/frame_info.rs#L182\">https://github.com/bytecodealliance/wasmtime/blob/4fdc4349109721f3a3751fa4fedc4732ea5813f8/crates/api/src/frame_info.rs#L182</a></p>\n<div class=\"codehilite\"><pre><span></span><code>[2020-05-22 14:48:51] stack backtrace:\n[2020-05-22 14:48:51]    0: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n[2020-05-22 14:48:51]    1: core::fmt::write\n[2020-05-22 14:48:51]    2: std::io::Write::write_fmt\n[2020-05-22 14:48:51]    3: std::io::impls::&lt;impl std::io::Write for alloc::boxed::Box&lt;W&gt;&gt;::write_fmt\n[2020-05-22 14:48:51]    4: std::panicking::default_hook::{{closure}}\n[2020-05-22 14:48:51]    5: std::panicking::default_hook\n[2020-05-22 14:48:51]    6: std::panicking::rust_panic_with_hook\n[2020-05-22 14:48:51]    7: rust_begin_unwind\n[2020-05-22 14:48:51]    8: core::panicking::panic_fmt\n[2020-05-22 14:48:51]    9: core::result::unwrap_failed\n[2020-05-22 14:48:51]   10: core::result::Result&lt;T,E&gt;::unwrap\n[2020-05-22 14:48:51]              at /build/rustc-1.41.1-src/src/libcore/result.rs:956\n[2020-05-22 14:48:51]   11: wasmtime::frame_info::register\n[2020-05-22 14:48:51]              at /nix/store/hc8ml9nz5f0wpl8x0qf58z3ag5narmnb-crates-io/wasmtime-wasmtime-profiling-wasmtime-cli-wasmtime-fuzz-4fdc4349109721f3a3751fa4fedc4732ea5813f8/src/frame_info.rs:182\n[2020-05-22 14:48:51]   12: wasmtime::module::Module::register_frame_info\n[2020-05-22 14:48:51]              at /nix/store/hc8ml9nz5f0wpl8x0qf58z3ag5narmnb-crates-io/wasmtime-wasmtime-profiling-wasmtime-cli-wasmtime-fuzz-4fdc4349109721f3a3751fa4fedc4732ea5813f8/src/module.rs:494\n[2020-05-22 14:48:51]   13: wasmtime::instance::Instance::new\n[2020-05-22 14:48:51]              at /nix/store/hc8ml9nz5f0wpl8x0qf58z3ag5narmnb-crates-io/wasmtime-wasmtime-profiling-wasmtime-cli-wasmtime-fuzz-4fdc4349109721f3a3751fa4fedc4732ea5813f8/src/instance.rs:139\n</code></pre></div>\n\n\n<p>And this one to the assertion:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/4fdc4349109721f3a3751fa4fedc4732ea5813f8/crates/api/src/frame_info.rs#L186\">https://github.com/bytecodealliance/wasmtime/blob/4fdc4349109721f3a3751fa4fedc4732ea5813f8/crates/api/src/frame_info.rs#L186</a></p>\n<div class=\"codehilite\"><pre><span></span><code>[2020-05-22 14:48:51] stack backtrace:\n[2020-05-22 14:48:51]    0: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n[2020-05-22 14:48:51]    1: core::fmt::write\n[2020-05-22 14:48:51]    2: std::io::Write::write_fmt\n[2020-05-22 14:48:51]    3: std::io::impls::&lt;impl std::io::Write for alloc::boxed::Box&lt;W&gt;&gt;::write_fmt\n[2020-05-22 14:48:51]    4: std::panicking::default_hook::{{closure}}\n[2020-05-22 14:48:51]    5: std::panicking::default_hook\n[2020-05-22 14:48:51]    6: std::panicking::rust_panic_with_hook\n[2020-05-22 14:48:51]    7: std::panicking::begin_panic\n[2020-05-22 14:48:51]              at /build/rustc-1.41.1-src/src/libstd/panicking.rs:404\n[2020-05-22 14:48:51]    8: wasmtime::frame_info::register\n[2020-05-22 14:48:51]              at /nix/store/hc8ml9nz5f0wpl8x0qf58z3ag5narmnb-crates-io/wasmtime-wasmtime-profiling-wasmtime-cli-wasmtime-fuzz-4fdc4349109721f3a3751fa4fedc4732ea5813f8/src/frame_info.rs:186\n[2020-05-22 14:48:51]    9: wasmtime::module::Module::register_frame_info\n[2020-05-22 14:48:51]              at /nix/store/hc8ml9nz5f0wpl8x0qf58z3ag5narmnb-crates-io/wasmtime-wasmtime-profiling-wasmtime-cli-wasmtime-fuzz-4fdc4349109721f3a3751fa4fedc4732ea5813f8/src/module.rs:494\n[2020-05-22 14:48:51]   10: wasmtime::instance::Instance::new\n[2020-05-22 14:48:51]              at /nix/store/hc8ml9nz5f0wpl8x0qf58z3ag5narmnb-crates-io/wasmtime-wasmtime-profiling-wasmtime-cli-wasmtime-fuzz-4fdc4349109721f3a3751fa4fedc4732ea5813f8/src/instance.rs:139\n</code></pre></div>\n\n\n<blockquote>\n<p>the same module is instantiated on different threads</p>\n</blockquote>\n<p>@yurydelendik How can this happen though? We don't move anything between threads. Each test does everything from scratch: create Store, Engine, Instance, Module, etc. Nothing is shared.</p>\n</blockquote>",
        "id": 198914510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590595807
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-634879028\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<blockquote>\n<p>How can this happen though? We don't move anything between threads. Each test does everything from scratch: create Store, Engine, Instance, Module, etc. Nothing is shared.</p>\n</blockquote>\n<p>My guess, if <code>GlobalFrameInfoRegistration</code> is not dropped, e.g. <code>Module</code> (is not freed) but <code>Store</code> released its resources, and new compilation allocated <code>CodeMemory</code> in the same region -- you may see similar failure.</p>\n</blockquote>",
        "id": 198937743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590606530
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-634879028\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<blockquote>\n<p>How can this happen though? We don't move anything between threads. Each test does everything from scratch: create Store, Engine, Instance, Module, etc. Nothing is shared.</p>\n</blockquote>\n<p>My guess, if <code>GlobalFrameInfoRegistration</code> is not dropped (e.g. <code>Module</code> is not freed) but <code>Store</code> released its resources, and new compilation allocated <code>CodeMemory</code> in the same region -- you may see similar failure.</p>\n</blockquote>",
        "id": 198937795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590606557
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-636044071\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>I tried to reproduce this locally with some tests but wasn't able to get too too far. I think <a href=\"https://gist.github.com/alexcrichton/a9218ef41e9537ec92bbaede2c18a322\">this diff</a> may fix the issue since I think we're dropping fields in the wrong order by accident, but I'm not sure. @lostman if you're unable to reduce this to share a test case, can you test out that patch and see if it fixes the issue for you?</p>\n</blockquote>",
        "id": 199172240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590767089
    },
    {
        "content": "<p>lostman <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-636344188\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>@alexcrichton AFAIK this has only appeared twice when running our CI test suite. We've been on this version of Wasmtime since May 1st (and will update shortly).</p>\n<p>We have hundreds of tests and this error isn't specific to any single one of them. There were many backtraces like the above in the log for that build.</p>\n<p>Also, PR that triggered this error was only few lines long and had nothing to do with Wasmtime.</p>\n<p>As such I don't think I can provide any further insight into what happened.</p>\n<p>I hope the diff you linked fixes it!</p>\n</blockquote>",
        "id": 199261300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590851697
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-637685476\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>Ok no worries! In that case I think it's best to defer this fix to #1761 which should land soon anyway</p>\n</blockquote>",
        "id": 199523113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591117623
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-641364295\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>@roman-kashitsyn was the issue resolved by #1761 ?</p>\n</blockquote>",
        "id": 200244275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591715812
    },
    {
        "content": "<p>lostman <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-641411012\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>@yurydelendik @roman-kashitsyn and I work together. I’m just finishing updating our code to latest Wasmtime and will be testing this tomorrow</p>\n</blockquote>",
        "id": 200254298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591719564
    },
    {
        "content": "<p>lostman <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768#issuecomment-644592521\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>I think this could be closed now. I've updated to latest Wasmtime and we haven't experienced this error again. If it ever comes back we can reopen the issue.</p>\n</blockquote>",
        "id": 200981840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592293322
    },
    {
        "content": "<p>yurydelendik closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1768\">Issue #1768</a>:</p>\n<blockquote>\n<p>This seems to be some race condition that happens quite rarely.</p>\n<p>We have a large test suite that creates many instances of Wasm modules in parallel, executes one function and destroys the instances. The instances don't share any state, each time we create a new Store, a new Module and then an Instance, call the function, and destroy everything.<br>\nThe code of the test suite is closed for now.</p>\n<p>This issue was only seen twice, so even if the test suite was openly available, it wouldn't be of much help.</p>\n<p>The version of Wasmtime we use is<br>\n ```<br>\nwasmtime 0.15.0 (git+https://github.com/bytecodealliance/wasmtime?rev=4fdc4349109721f3a3751fa4fedc4732ea5813f8)</p>\n<div class=\"codehilite\"><pre><span></span><code>Environment: Linux x86_64, Debug build.\n~~~\n</code></pre></div>\n\n\n</blockquote>",
        "id": 201011566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592312856
    }
]