[
    {
        "content": "<p>dheaton-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276\">issue #3276</a>:</p>\n<blockquote>\n<p>Various opcodes (such as <code>SaddSat</code>) only make sense if SIMD vectors can contain negative values, however the IR parser raises an error if a negative immediate is supplied, requiring explicitly <code>u8</code> decimal immediates.</p>\n<p>By supplying the 2's complement of the negative value in a SIMD vector, converting the values lanewise to signed values, and then performing a signed operation on the converted values, the correct results can be achieved (albeit again returned as the 2's complement, as unsigned values).</p>\n<p>I would think given the existence of opcodes that rely on signed SIMD vectors, signed immediates should be allowed. Perhaps an unsigned variant (eg, <code>u64x2</code>) of each vector would make sense? These unsigned variants could behave as the current SIMD implementation does, but <code>i64x2</code> could behave as a vector of signed values, instead.</p>\n</blockquote>",
        "id": 251588589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630513732
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276#issuecomment-910456184\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276\">issue #3276</a>:</p>\n<blockquote>\n<p>Adding <code>u64x2</code> would require adding <code>u64</code> too. Cranelift IR currently doesn't distinguish between unsigned and signed integers, only between unsigned and signed instructions, with many instructions working on both due to the way 2s-complement works. I would like it to stay this way.</p>\n<p>I think it would be better to allow both unsigned and signed immediates just like for scalar operations.</p>\n</blockquote>",
        "id": 251589638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630514142
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276#issuecomment-910515997\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276\">issue #3276</a>:</p>\n<blockquote>\n<p>We discussed this somewhat in #3059, not specifically for SIMD, but allowing a range of negative and positive integers based on the size of the type. I think it would also make sense to apply those same rules for the lane type in SIMD consts.</p>\n<p>I agree with @bjorn3, keeping a single type, but allowing signed and unsigned immediates seems like the best way to go about this.</p>\n</blockquote>",
        "id": 251601192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630518714
    },
    {
        "content": "<p>dheaton-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276#issuecomment-911463058\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276\">issue #3276</a>:</p>\n<blockquote>\n<p>If the un/signed distinction occurs based on the instruction, then that makes sense.</p>\n</blockquote>",
        "id": 251690047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630575720
    },
    {
        "content": "<p>dheaton-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276#issuecomment-911772134\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276\">issue #3276</a>:</p>\n<blockquote>\n<p>Hi, sorry, after further testing, it turns out my description of this isn't entirely correct anyway. The problem here lies solely in <code>i8x16</code> vectors, as the parser specifically checks for <code>u8</code> immediates in vectors; if this is incorrect behaviour anyway, I'm happy to try fix that, but I wanted to check first if there was a specific reason for it. <code>i16x8</code> and above <strong>do</strong> support signed values.</p>\n</blockquote>",
        "id": 251728168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630594343
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276#issuecomment-911893108\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276\">issue #3276</a>:</p>\n<blockquote>\n<p>I think it is reasonable to parse <code>i8x16</code> as lanes of <code>i8</code>--I can't recall precisely why <code>u8</code> was used but it may have just been because it was available and <code>i8</code> parsing was not. Adding <code>i8</code> parsing makes sense to me.</p>\n</blockquote>",
        "id": 251750303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630602721
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3276\">issue #3276</a>:</p>\n<blockquote>\n<p>Various opcodes (such as <code>SaddSat</code>) only make sense if SIMD vectors can contain negative values, however the IR parser raises an error if a negative immediate is supplied, requiring explicitly <code>u8</code> decimal immediates.</p>\n<p>By supplying the 2's complement of the negative value in a SIMD vector, converting the values lanewise to signed values, and then performing a signed operation on the converted values, the correct results can be achieved (albeit again returned as the 2's complement, as unsigned values).</p>\n<p>I would think given the existence of opcodes that rely on signed SIMD vectors, signed immediates should be allowed. Perhaps an unsigned variant (eg, <code>u64x2</code>) of each vector would make sense? These unsigned variants could behave as the current SIMD implementation does, but <code>i64x2</code> could behave as a vector of signed values, instead.</p>\n</blockquote>",
        "id": 251909847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630687715
    }
]