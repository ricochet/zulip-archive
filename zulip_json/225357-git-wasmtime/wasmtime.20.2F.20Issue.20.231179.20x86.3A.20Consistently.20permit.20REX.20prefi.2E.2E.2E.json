[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1179#issuecomment-772722385\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1179\">Issue #1179</a>:</p>\n<blockquote>\n<p>Is this fixed with the new x64 backend?</p>\n</blockquote>",
        "id": 225058656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612376799
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1179#issuecomment-772725944\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1179\">Issue #1179</a>:</p>\n<blockquote>\n<p>This is very specific to the old backend, I vote we close it.</p>\n</blockquote>",
        "id": 225059559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612377138
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1179\">Issue #1179</a>:</p>\n<blockquote>\n<p>It looks like our SIMD encodings waver between permitting and not permitting the REX prefix: compare uses of <code>enc_32_64</code> and <code>enc_both</code> in <a href=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/isa/x86/encodings.rs#L1811-L2030\">x86/encoding.rs</a>.</p>\n<p>As a result, vector operations using <code>r8</code>-<code>r15</code> as parts of a memory operand, or <code>xmm8</code>-<code>xmm15</code> as a register operand, get rejected when searching for encodings and, I believe, result in Cranelift not using those xmm registers entirely in some circumstances (we're missing a rex-friendly <code>MOVUPS</code> encoding so I don't think we can encode a spill of <code>xmm8</code>-<code>xmm15</code>).</p>\n<p>I ran across this trying to emit <code>movups xmm7, [r11]</code> when <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378/files/3d12b9d201b4c62079beea4f91d31344b86ecb94#diff-08ef6b0c3d44ab300b5158dab40ea830R1047\">restoring SIMD registers in Windows prologues</a>. This currently results in a constraint violation panic when compiling. I believe this is because I specified the location after inserting the instruction, so Cranelift picked the <code>FPR8</code>/<code>GPR8</code>-constrained encoding, and I just gave it an impossible operand, whereas regalloc would have been unable to use <code>r11</code> as an operand and forced shuffling until a fitting register were available.</p>\n<p>I'm pretty sure we can make the blanket change from <code>enc_32_64</code> to <code>enc_both</code> for the region I linked above. However, I don't know the <code>maybe_isap</code> variants, and I figure it'd be better to confirm this before changing stuff around.</p>\n<p>cc @abrown and @bnjbvr as people who've recently touched these things, I think?</p>\n</blockquote>",
        "id": 225059560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612377138
    }
]