[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a> from <code>bytecodealliance:pch/wasi_io_crate</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Follow-on to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10016\">https://github.com/bytecodealliance/wasmtime/pull/10016</a></p>\n<p>This takes the bindings generation for the <code>wasi-io</code> crate, the definitions of the <code>Subscribe</code>, <code>HostInputStream</code>, and <code>HostOutputStream</code> traits, and the freshly separated <code>IoView</code> machinery, and puts it into its own crate <code>wasmtime-wasi-io</code>.</p>\n<p>Users of <code>wasmtime-wasi</code> and others never have to know or care about this change, the <code>wasmtime-wasi</code> crate re-exports everything now defined in<code>wasmtime-wasi-io</code> at the same names as prior to this PR.</p>\n<p>Optionally, crates which depend on <code>wasmtime-wasi</code> for just the wasi-io primitives May depend directly on wasmtime-wasi-io directly. I made changes in this PR so that <code>wasmtime-wasi-http</code> changes its imports to be from <code>wasmtime-wasi-io</code>. </p>\n<p><code>wasmtime-wasi-http</code> can't break its dep on <code>wasmtime-wasi</code> for two reasons: it depends on <code>wasmtime_wasi::runtime</code> to provide common code for <code>in_tokio</code> sync wrappers of async and task spawning, and its linker needs to provide the std{in,out,err} interfaces from the wasi-cli implementation in <code>wasmtime-wasi</code>.</p>\n<p>The big motivator of this change is to provide a common definition of wasi-io to be reusable by alternative (to <code>wasmtime-wasi</code>) implementations of the rest of WASI. In particular, this crate is compatible with <code>!#[no_std]</code> Rust.</p>\n<p>I had to make one minor functional change to <code>ResourceTable::iter_entries</code> and <code>impl poll::Host { fn poll(...) {...} }</code> to use a <code>BTreeMap</code> in place of a <code>HashMap</code> in order to enable building <code>wasmtime-wasi-io</code> without <code>std</code> enabled in the <code>wasmtime</code> crate features.</p>\n</blockquote>",
        "id": 494232200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737061429
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494232201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737061429
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494232203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737061429
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494232204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737061429
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494232441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737061536
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494248239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737068212
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494248391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737068283
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494249295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737068659
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494249784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737068912
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494250280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737069171
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494250918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737069525
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494251007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737069583
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494251556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737069857
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036#issuecomment-2597110555\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>:</p>\n<blockquote>\n<p>I updated and wrote a bunch of docs for this PR that were not included in #10016 - ready for review now @alexcrichton </p>\n</blockquote>",
        "id": 494251613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737069891
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494260618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737075236
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>:</p>\n<blockquote>\n<p>Follow-on to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10016\">https://github.com/bytecodealliance/wasmtime/pull/10016</a></p>\n<p>The big motivator of this change is to provide a common definition of wasi-io to be reusable by alternative (to <code>wasmtime-wasi</code>) implementations of the rest of WASI. In particular, this crate is compatible with <code>!#[no_std]</code> Rust.</p>\n<p>Additionally, it contains renames for things that have been bugging me for a year or two.</p>\n<h2>New wasmtime-wasi-io crate</h2>\n<p>This takes the bindings generation for the <code>wasi-io</code> crate, the definitions of the <code>Subscribe</code>, <code>HostInputStream</code>, and <code>HostOutputStream</code> traits, and the freshly separated <code>IoView</code> machinery, and puts it into its own crate <code>wasmtime-wasi-io</code>.</p>\n<p>Users of <code>wasmtime-wasi</code> and others never have to know or care about the change to the crate, the <code>wasmtime-wasi</code> crate re-exports everything now defined in<code>wasmtime-wasi-io</code> prior to the PR. However, names have changed! </p>\n<p>Optionally, crates which depend on <code>wasmtime-wasi</code> for just the wasi-io primitives May depend directly on wasmtime-wasi-io directly. I made changes in this PR so that <code>wasmtime-wasi-http</code> changes its imports to be from <code>wasmtime-wasi-io</code>. </p>\n<p><code>wasmtime-wasi-http</code> can't break its dep on <code>wasmtime-wasi</code> for two reasons: it depends on <code>wasmtime_wasi::runtime</code> to provide common code for <code>in_tokio</code> sync wrappers of async and task spawning, and its linker needs to provide the std{in,out,err} interfaces from the wasi-cli implementation in <code>wasmtime-wasi</code>.</p>\n<h2>Trait and type renaming</h2>\n<p>Programmers using the direct bindings got to see the wit <code>Pollable</code>, <code>InputStream</code>, and <code>OutputStream</code> names inside <code>Resource&lt;...&gt;</code>. However, mapping from the resources to the traits is a boring bit of boilerplate that most programmers only ever encounter very briefly, and then spend most of their time interacting with the traits. The traits are the inconsistently-named <code>Subscribe</code>, <code>HostInputStream</code>, and <code>HostOutputStream</code>. <code>Host...</code> prefix these days means bindgen-created, while back in wasi-common meant not-bindgen-created. And <code>Subscribe</code> doesn't describe that trait at all!</p>\n<p>So, I renamed according to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Pollable</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">DynPollable</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">InputStream</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">DynInputStream</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">OutputStream</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">DynOutputStream</span>\n\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Subscribe</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Pollable</span>\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HostInputStream</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">InputStream</span>\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HostOutputStream</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">OutputStream</span>\n\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">alias</span><span class=\"w\"> </span><span class=\"n\">PollableFuture</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">DynFuture</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">little</span><span class=\"o\">-</span><span class=\"n\">used</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">alias</span><span class=\"w\"> </span><span class=\"n\">ClosureFuture</span><span class=\"w\"> </span><span class=\"n\">deleted</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">never</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"p\">)</span>\n</code></pre></div>\n<h2>etc</h2>\n<p>I had to make one minor functional change to <code>ResourceTable::iter_entries</code> and <code>impl poll::Host { fn poll(...) {...} }</code> to use a <code>BTreeMap</code> in place of a <code>HashMap</code> in order to enable building <code>wasmtime-wasi-io</code> without <code>std</code> enabled in the <code>wasmtime</code> crate features.</p>\n</blockquote>",
        "id": 494261261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737075549
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">PR #10036</a>.</p>",
        "id": 494262655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737076281
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036#pullrequestreview-2559749658\">PR review</a>.</p>",
        "id": 494420062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737139913
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036#discussion_r1920611604\">PR review comment</a>:</p>\n<blockquote>\n<p>As a proof-of-concept would it be possible to not add the dependency here? Or is it required that those using <code>wasmtime-wasi</code> have to also depend on <code>wasmtime-wasi-io</code>?</p>\n</blockquote>",
        "id": 494420066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737139913
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036#pullrequestreview-2559812704\">PR review</a>.</p>",
        "id": 494425335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737141854
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036#discussion_r1920649620\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, its possible to not add the dependency and <code>use</code> everything through wasmtime-wasi. I'm happy to convert it over to that if you think that is valuable, I could go either way.</p>\n</blockquote>",
        "id": 494425336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737141854
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036#pullrequestreview-2560085722\">PR review</a>.</p>",
        "id": 494450803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737152742
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036#discussion_r1920828700\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah if you wouldn't mind doing that I think it'd be good to have an example and basically a test for that. In Spin for example I'd hope to ideally only need to refactor a bit and not have to explicitly pick up <code>wasmtime-wasi-io</code> (otherwise we might need to extend docs more to mention it)</p>\n</blockquote>",
        "id": 494450804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737152743
    }
]