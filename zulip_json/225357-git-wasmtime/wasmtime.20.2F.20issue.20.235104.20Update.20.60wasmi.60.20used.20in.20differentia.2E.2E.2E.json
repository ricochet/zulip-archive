[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104#issuecomment-1288308192\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104\">issue #5104</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 305736125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666577211
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104#issuecomment-1288498242\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104\">issue #5104</a>:</p>\n<blockquote>\n<p>We have not yet integrated full fuzz testing for the newest <code>wasmi</code> engine (just very basic fuzzing so far) so I am a bit worried that it might be a big noisy at start. If that's the case we will definitely fix found <code>wasmi</code> bugs asap.</p>\n<p>Concerning <code>cargo-vet</code> the following crates must be registered to your database:</p>\n<ul>\n<li><code>wasmi</code>: Well, this is a tough one tbh. I am the author of it but it contains plenty of unsafe code for optimization purposes. We (Parity) are going to use it in production very soon(TM).</li>\n<li><code>wasmi_core</code>: This is just a small utility crate and should be pretty boring. Also it has no <code>unsafe</code> code.</li>\n<li><code>wasmi_arena</code>: Similar to <code>wasmi_core</code>. Just defines some arena data structures for use in <code>wasmi</code>.</li>\n<li><code>memory-units</code>: Can be safely ignored since <code>wasmi</code> already removed it.</li>\n<li><code>indexmap-nostd</code>: This again is interesting. It is a reimlpementation of the API of the well-known <code>indexmap</code> crate. It uses no <code>unsafe</code> Rust code and is implemented as simple as it gets. We use it in the <code>wasmparser-nostd</code> fork of <code>wasmparser</code> and it passes all <code>wasm-tools</code> tests as well as all of <code>wasmi</code> tests but has no tests on its own.</li>\n<li><code>wasmparser-nostd</code>: More or less trivial fork of <code>wasmparser</code>. The most interesting difference is the use of the aforementioned <code>indexmap-nostd</code>.</li>\n</ul>\n</blockquote>",
        "id": 305756546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666594008
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104#issuecomment-1288498242\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104\">issue #5104</a>:</p>\n<blockquote>\n<p>Very cool to see <code>wasmi</code> update in the Wasmtime fuzzing.</p>\n<p>We have not yet integrated full fuzz testing for the newest <code>wasmi</code> engine (just very basic fuzzing so far) so I am a bit worried that it might be a big noisy at start. If that's the case we will definitely fix found <code>wasmi</code> bugs asap.</p>\n<p>Concerning <code>cargo-vet</code> the following crates must be registered to your database:</p>\n<ul>\n<li><code>wasmi</code>: Well, this is a tough one tbh. I am the author of it but it contains plenty of unsafe code for optimization purposes. We (Parity) are going to use it in production very soon(TM).</li>\n<li><code>wasmi_core</code>: This is just a small utility crate and should be pretty boring. Also it has no <code>unsafe</code> code.</li>\n<li><code>wasmi_arena</code>: Similar to <code>wasmi_core</code>. Just defines some arena data structures for use in <code>wasmi</code>.</li>\n<li><code>memory-units</code>: Can be safely ignored since <code>wasmi</code> already removed it.</li>\n<li><code>indexmap-nostd</code>: This again is interesting. It is a reimlpementation of the API of the well-known <code>indexmap</code> crate. It uses no <code>unsafe</code> Rust code and is implemented as simple as it gets. We use it in the <code>wasmparser-nostd</code> fork of <code>wasmparser</code> and it passes all <code>wasm-tools</code> tests as well as all of <code>wasmi</code> tests but has no tests on its own.</li>\n<li><code>wasmparser-nostd</code>: More or less trivial fork of <code>wasmparser</code>. The most interesting difference is the use of the aforementioned <code>indexmap-nostd</code>.</li>\n</ul>\n</blockquote>",
        "id": 305756595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666594056
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104#issuecomment-1288498242\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104\">issue #5104</a>:</p>\n<blockquote>\n<p>Very cool to see <code>wasmi</code> update in the Wasmtime fuzzing.</p>\n<p>We have not yet integrated full fuzz testing for the newest <code>wasmi</code> engine ourselves (just very basic fuzzing so far) so my main worry is that this new fuzzy test might be a big noisy at start. If that's the case we will definitely fix found <code>wasmi</code> bugs asap.</p>\n<p>Concerning <code>cargo-vet</code> the following crates must be registered to your database:</p>\n<ul>\n<li><code>wasmi</code>: Well, this is a tough one tbh. I am the author of it but it contains plenty of unsafe code for optimization purposes. We (Parity) are going to use it in production very soon(TM).</li>\n<li><code>wasmi_core</code>: This is just a small utility crate and should be pretty boring. Also it has no <code>unsafe</code> code.</li>\n<li><code>wasmi_arena</code>: Similar to <code>wasmi_core</code>. Just defines some arena data structures for use in <code>wasmi</code>.</li>\n<li><code>memory-units</code>: Can be safely ignored since <code>wasmi</code> already removed it.</li>\n<li><code>indexmap-nostd</code>: This again is interesting. It is a reimlpementation of the API of the well-known <code>indexmap</code> crate. It uses no <code>unsafe</code> Rust code and is implemented as simple as it gets. We use it in the <code>wasmparser-nostd</code> fork of <code>wasmparser</code> and it passes all <code>wasm-tools</code> tests as well as all of <code>wasmi</code> tests but has no tests on its own.</li>\n<li><code>wasmparser-nostd</code>: More or less trivial fork of <code>wasmparser</code>. The most interesting difference is the use of the aforementioned <code>indexmap-nostd</code>.</li>\n</ul>\n</blockquote>",
        "id": 305756680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666594094
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104#issuecomment-1288498242\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104\">issue #5104</a>:</p>\n<blockquote>\n<p>Very cool to see <code>wasmi</code> update in the Wasmtime fuzzing.</p>\n<p>We have not yet integrated full fuzz testing for the newest <code>wasmi</code> engine ourselves (just very basic fuzzing so far) so my main worry is that this new fuzzy test might be a big noisy at start. If that's the case we will definitely fix found <code>wasmi</code> bugs asap.</p>\n<p>Concerning <code>cargo-vet</code> the following crates must be registered to your database:</p>\n<ul>\n<li><code>wasmi</code>: Well, this is a tough one tbh. I am the author of it but it contains plenty of unsafe code for optimization purposes. We (Parity) are going to use it in production very soon(TM). I am the author of that crate.</li>\n<li><code>wasmi_core</code>: This is just a small utility crate and should be pretty boring. Also it has no <code>unsafe</code> code. I am the author of that crate.</li>\n<li><code>wasmi_arena</code>: Similar to <code>wasmi_core</code>. Just defines some arena data structures for use in <code>wasmi</code>. I am the author of that crate.</li>\n<li><code>memory-units</code>: Can be safely ignored since <code>wasmi</code> already removed it.</li>\n<li><code>indexmap-nostd</code>: This again is interesting. It is a reimlpementation of the API of the well-known <code>indexmap</code> crate. It uses no <code>unsafe</code> Rust code and is implemented as simple as it gets. We use it in the <code>wasmparser-nostd</code> fork of <code>wasmparser</code> and it passes all <code>wasm-tools</code> tests as well as all of <code>wasmi</code> tests but has no tests on its own. I am the author of that crate.</li>\n<li><code>wasmparser-nostd</code>: More or less trivial fork of <code>wasmparser</code>. The most interesting difference is the use of the aforementioned <code>indexmap-nostd</code>.</li>\n</ul>\n</blockquote>",
        "id": 305756732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666594139
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104#issuecomment-1288498242\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104\">issue #5104</a>:</p>\n<blockquote>\n<p>Very cool to see <code>wasmi</code> update in the Wasmtime fuzzing.</p>\n<p>We have not yet integrated full fuzz testing for the newest <code>wasmi</code> engine ourselves (just very basic fuzzing so far) so my main worry is that this new fuzzy test might be a big noisy at start. If that's the case we will definitely fix found <code>wasmi</code> bugs asap.</p>\n<p>Concerning <code>cargo-vet</code> the following crates must be registered to your database:</p>\n<ul>\n<li><code>wasmi</code>: Well, this is a tough one tbh. I am the author of it but it contains plenty of unsafe code for optimization purposes. We (Parity) are going to use it in production very soon(TM). I am the author of that crate.</li>\n<li><code>wasmi_core</code>: This is just a small utility crate and should be pretty boring. Also it has no <code>unsafe</code> code. I am the author of that crate.</li>\n<li><code>wasmi_arena</code>: Similar to <code>wasmi_core</code>. Just defines some arena data structures for use in <code>wasmi</code>. I am the author of that crate.</li>\n<li><code>memory-units</code>: Can be safely ignored since <code>wasmi</code> already removed it.</li>\n<li><code>indexmap-nostd</code>: This again is interesting. It is a reimlpementation of the API of the well-known <code>indexmap</code> crate. It uses no <code>unsafe</code> Rust code and is implemented as simple as it gets. We use it in the <code>wasmparser-nostd</code> fork of <code>wasmparser</code> and it passes all <code>wasm-tools</code> tests as well as all of <code>wasmi</code> tests but has no tests on its own. I am the author of that crate.</li>\n<li><code>wasmparser-nostd</code>: More or less trivial fork of <code>wasmparser</code>. The most interesting difference is the use of the aforementioned <code>indexmap-nostd</code>. I am the author of that fork.</li>\n</ul>\n</blockquote>",
        "id": 305757468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666594498
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104#issuecomment-1289203343\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104\">issue #5104</a>:</p>\n<blockquote>\n<p>I've added <code>cargo vet</code> entries for all new dependencies added here, except for the <code>wasmi</code> crate itself. I've updated the exemption from 0.11.0 to 0.19.0 so we're not necessarily in much worse of a position, but othewise I'm not in a position to provide a \"vet\" of that crate in the official sense but I believe it's safe to run for fuzzing for us.</p>\n<p>Otherwise thanks for the info @Robbepop, I've run the fuzzer for a number of hours locally and nothing has shown up, so if something pops up on oss-fuzz I'll forward along the issue.</p>\n</blockquote>",
        "id": 305844581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666624946
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104#issuecomment-1289626914\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5104\">issue #5104</a>:</p>\n<blockquote>\n<blockquote>\n<p>Otherwise thanks for the info @Robbepop, I've run the fuzzer for a number of hours locally and nothing has shown up, so if something pops up on oss-fuzz I'll forward along the issue.</p>\n</blockquote>\n<p>Oh wow, that's incredible news. Also looking forward to any forwarded bugs. :)</p>\n</blockquote>",
        "id": 305915056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666646156
    }
]