[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971\">PR #5971</a> from <code>fuzz-full-simd</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR adds all SIMD instructions currently supported by the interpreter to the fuzzer. There is a surprising amount of missing coverage even with all of these ones (i.e. lots of work to do in the interpreter)!</p>\n<p>I've also had to disable aligned loads/stores for &gt; 8 bytes. It's really hard to do this without support from cranelift, and I think its probably best to go add support for that before re-enabling it here.</p>\n<p>I gave this a bunch of fuzzing time, and it has stopped crashing on all arches. S390X was a little bit harder since I was only able to test it on QEMU and its quite a bit slower than native hardware though it ran about 12hours on 8 cores without crashing, so ¯\\\\\\_(ツ)\\_\\/¯. <br>\n</p>\n</blockquote>",
        "id": 340654353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678379404
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971\">PR #5971</a>.</p>",
        "id": 340654354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678379404
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#pullrequestreview-1333319379\">PR review</a>.</p>",
        "id": 340675148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678384406
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#discussion_r1131339865\">PR review comment</a>:</p>\n<blockquote>\n<p>What do you think of this style? (It may need help from <code>rustfmt</code>, I'm just typing things straight into this comment.)</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let unimplemented_cc = match (fgen.target_triple.architecture, cc) {\n            // Some FloatCC's are not implemented on AArch64, see:\n            // https://github.com/bytecodealliance/wasmtime/issues/4850\n            (Architecture::Aarch64(_),\n                FloatCC::OrderedNotEqual |\n                FloatCC::UnorderedOrEqual |\n                FloatCC::UnorderedOrLessThan |\n                FloatCC::UnorderedOrLessThanOrEqual |\n                FloatCC::UnorderedOrGreaterThan |\n                FloatCC::UnorderedOrGreaterThanOrEqual) =&gt; true,\n            (Architecture::X86_64, FloatCC::UnorderedOrEqual | FloatCC::OrderedNotEqual) if args[0].is_vector() =&gt; true,\n            _ =&gt; false,\n        };\n\n        if unimplemented_cc {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 340675151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678384406
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#discussion_r1131389720\">PR review comment</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/instructions/struct.OpcodeConstraints.html#method.requires_typevar_operand\">OpcodeConstraints::requires_typevar_operand</a> is most of what we need to avoid having to update this table:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    let ctrl_type = if opcode.constraints().requires_typevar_operand() {\n</code></pre></div>\n<p>Also please update the comment above.</p>\n<p>The rest of what we need is figuring out which operand is the typevar operand. It is _almost_ always operand 0, but it depends on the instruction format. For <code>Ternary</code> it's operand 1, and for <code>TernaryImm8</code> it's operand 2. (See <code>cranelift/codegen/meta/src/shared/formats.rs</code> and look for calls to <code>InstructionFormatBuilder::typevar_operand</code>.)</p>\n<p>Since <code>insert_opcode</code> is used for the <code>Ternary</code> format, this technically would look at the wrong typevar operand. Fortunately, all current <code>Ternary</code>-format opcodes have <code>requires_typevar_operand=false</code>, so we don't actually have to fix this today.</p>\n<p>As future work, I think we should provide a method to get the index of the typevar operand. I think it should be on <code>InstructionFormat</code>. There's an <code>InstructionData::typevar_operand</code> method today that gets the <code>Value</code> from the appropriate operand of an instruction, but here we need the operand index. (We could replace the existing <code>typevar_operand</code> method by calling this new one and indexing into <code>InstructionData::arguments</code>, I think.)</p>\n</blockquote>",
        "id": 340675152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678384406
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#pullrequestreview-1333319379\">PR review</a>.</p>",
        "id": 340675153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678384407
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#discussion_r1131335599\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm tempted to assert here that the provided opcode is <code>Opcode::Shuffle</code>, since this function will be called for any opcode that uses the <code>Shuffle</code> format. I mean, yes, there's only one such opcode today, but just in case...</p>\n</blockquote>",
        "id": 340675154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678384407
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#pullrequestreview-1333572363\">PR review</a>.</p>",
        "id": 340691006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678388965
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#discussion_r1131480493\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/instructions/struct.OpcodeConstraints.html#method.requires_typevar_operand\">OpcodeConstraints::requires_typevar_operand</a> is most of what we need to avoid having to update this table:</p>\n</blockquote>\n<p>Oh that's really nice! I didn't know that existed.</p>\n<blockquote>\n<p>As future work, I think we should provide a method to get the index of the typevar operand. I think it should be on InstructionFormat. There's an InstructionData::typevar_operand method today that gets the Value from the appropriate operand of an instruction, but here we need the operand index. (We could replace the existing typevar_operand method by calling this new one and indexing into InstructionData::arguments, I think.)</p>\n</blockquote>\n<p>I was thinking about this in a slightly different way. With the new fancy constraint based generation we always know the correct <code>ctrl_type</code>, so we could update the inserter signature to also receive that. There are a bunch of inserters that currently do something like <code>rets.first().unwrap()</code> which we can cleanup.</p>\n<p>Either way, this can definitely be improved!</p>\n</blockquote>",
        "id": 340691007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678388965
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971\">PR #5971</a> from <code>fuzz-full-simd</code> to <code>main</code>.</p>",
        "id": 340830908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678446930
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#pullrequestreview-1334626394\">PR review</a>.</p>",
        "id": 340830927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678446934
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#discussion_r1132247914\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't really mind that, but the rustfmt format for that makes it quite hard to parse for me, what do you think?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unimplemented_cc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fgen</span><span class=\"p\">.</span><span class=\"n\">target_triple</span><span class=\"p\">.</span><span class=\"n\">architecture</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// Some FloatCC's are not implemented on AArch64, see:</span>\n<span class=\"w\">            </span><span class=\"c1\">// https://github.com/bytecodealliance/wasmtime/issues/4850</span>\n<span class=\"w\">            </span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">Architecture</span>::<span class=\"n\">Aarch64</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">FloatCC</span>::<span class=\"n\">OrderedNotEqual</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FloatCC</span>::<span class=\"n\">UnorderedOrEqual</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FloatCC</span>::<span class=\"n\">UnorderedOrLessThan</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FloatCC</span>::<span class=\"n\">UnorderedOrLessThanOrEqual</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FloatCC</span>::<span class=\"n\">UnorderedOrGreaterThan</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FloatCC</span>::<span class=\"n\">UnorderedOrGreaterThanOrEqual</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">Architecture</span>::<span class=\"n\">X86_64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FloatCC</span>::<span class=\"n\">UnorderedOrEqual</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FloatCC</span>::<span class=\"n\">OrderedNotEqual</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">is_vector</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span>\n<span class=\"w\">            </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kc\">true</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">unimplemented_cc</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 340830931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678446934
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#pullrequestreview-1335692818\">PR review</a>.</p>",
        "id": 340974108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678486253
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971#discussion_r1132932013\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm, yeah, that's... not ideal? It's just that I'd prefer to use <code>match</code> instead of <code>slice::contains</code> to let the compiler decide how to implement this check. I guess for me that preference slightly outweighs style preferences, but I'm willing to be persuaded otherwise.</p>\n<p>Two things we could try which might improve the style:</p>\n<ul>\n<li>Put each arch/cc combination in a separate match arm, e.g. <code>(Architecture::Aarch64(_), FloatCC::OrderedNotEqual) =&gt; true</code> instead of using or-patterns</li>\n<li>Replace <code>if x =&gt; true</code> with <code>=&gt; x</code></li>\n</ul>\n</blockquote>",
        "id": 340974109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678486254
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971\">PR #5971</a> from <code>fuzz-full-simd</code> to <code>main</code>.</p>",
        "id": 341107504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678535993
    },
    {
        "content": "<p>afonso360 has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971\">PR #5971</a>.</p>",
        "id": 341107618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678536013
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5971\">PR #5971</a>.</p>",
        "id": 341118917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678539511
    }
]