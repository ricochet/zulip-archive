[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<p>Many instruction formats in the new x64 backend accept a <code>RegMem</code> parameter, implying that they may load from memory. This may cause a trap if the memory address is out-of-bounds and, in order to return the correct trap code, we should be registering the source location of the instruction, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">srcloc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">srcloc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sink</span><span class=\"p\">.</span><span class=\"n\">add_trap</span><span class=\"p\">(</span><span class=\"n\">srcloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TrapCode</span>::<span class=\"n\">HeapOutOfBounds</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Currently, some formats do accept a <code>RegMem</code> parameter but do not correctly register the possible trap location. This currently passes the spec tests because these formats are not used in their <code>Mem</code> variant, but for correctness and completeness we should register the trap locations any time it is possible that an instruction may load from memory.</p>\n<p>The current convention for doing so appends a <code>srcloc: Option&lt;SourceLoc&gt;</code> field to the format and expects the programmer to correctly choose between <code>None</code> and <code>Some(ctx.srcloc(insn))</code> when instatiating a new instruction format. I propose we change this: instead, attach the <code>Option&lt;SourceLoc&gt;</code>, or perhaps even a plain <code>SourceLoc</code>, to <code>SyntheticAmode</code>. This approach has advantages:</p>\n<ul>\n<li>any programmer attempting to do a load/store will be forced to decide how the trap will be reported (but not when only accessing registers)</li>\n<li>perhaps the helper functions in <code>lower.rs</code> can automatically attach a <code>SourceLoc</code> to any <code>SyntheticAmode</code>s created</li>\n<li>the <code>Inst</code> formats no longer need an extra field filled with <code>None</code> in many cases</li>\n</ul>\n<p>If we agree that the above approach is a good one, this issue should be closed not only </p>\n<ol>\n<li>when that refactoring is complete but</li>\n<li>also when any instruction formats that can load/store properly registers traps for their <code>RegMem::Mem</code> variants</li>\n</ol>\n</blockquote>",
        "id": 213185482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602608206
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290#issuecomment-707878372\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<p>cc: @julian-seward1, @bnjbvr, @cfallin </p>\n</blockquote>",
        "id": 213185533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602608232
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<p>Many instruction formats in the new x64 backend accept a <code>RegMem</code> parameter, implying that they may load from memory. This may cause a trap if the memory address is out-of-bounds and, in order to return the correct trap code, we should be registering the source location of the instruction, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">srcloc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">srcloc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sink</span><span class=\"p\">.</span><span class=\"n\">add_trap</span><span class=\"p\">(</span><span class=\"n\">srcloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TrapCode</span>::<span class=\"n\">HeapOutOfBounds</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Currently, some formats do accept a <code>RegMem</code> parameter but do not correctly register the possible trap location. This passes the spec tests because these formats are not used in their <code>RegMem::Mem</code> variant, but for correctness and completeness we should register the trap locations any time it is possible that an instruction may load from memory.</p>\n<p>The current convention for doing so appends a <code>srcloc: Option&lt;SourceLoc&gt;</code> field to the format and expects the programmer to correctly choose between <code>None</code> and <code>Some(ctx.srcloc(insn))</code> when instatiating a new instruction format. I propose we change this: instead, attach the <code>Option&lt;SourceLoc&gt;</code>, or perhaps even a plain <code>SourceLoc</code>, to <code>SyntheticAmode</code>. This approach has advantages:</p>\n<ul>\n<li>any programmer attempting to do a load/store will be forced to decide how the trap will be reported (but not when only accessing registers)</li>\n<li>perhaps the helper functions in <code>lower.rs</code> can automatically attach a <code>SourceLoc</code> to any <code>SyntheticAmode</code>s created</li>\n<li>the <code>Inst</code> formats no longer need an extra field filled with <code>None</code> in many cases</li>\n</ul>\n<p>If we agree that the above approach is a good one, this issue should be closed not only </p>\n<ol>\n<li>when that refactoring is complete but</li>\n<li>also when any instruction formats that can load/store properly registers traps for their <code>RegMem::Mem</code> variants</li>\n</ol>\n</blockquote>",
        "id": 213186358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602608621
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290#issuecomment-716592988\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<p>I agree that there's an issue with the current design, and indeed the <code>RegMem::Mem</code> variant could have its source location. (No need for <code>Option&lt;SourceLoc&gt;</code> in fact, since <code>SourceLoc</code> already has a default value meaning invalid that we could reuse to mean \"undefined\".) This would become a large issue when <code>input_to_reg_mem</code> can actually embed a load in an address-mode operand.</p>\n<p>Unfortunately, this also means that the SyntheticAmode would then become even much bigger, going against the general plan of making Vcode's inst data fit into 32 bytes or fewer. It would be nice to find a way to properly pack here without inflating the RegMem too much.</p>\n<p>To wit: these source locations are also only useful when <strong>not</strong> using implicit bounds checking (via signal handling and the 4GB memory page trick). When using implicit bounds checking, this data information has no use at all. We could imagine adding a trait to lowering, to decide whether we're using explicit bounds checks or not, and that trait would select a different type for <code>RegMem</code> and/or <code>SyntheticAmode</code>, but that lead to a lot of binary code duplication in the Cranelift-embedding binary, I expect...</p>\n</blockquote>",
        "id": 214582266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603723392
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290#issuecomment-717681468\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<p>So at a high level, I think this issue implies several sub-problems to solve:</p>\n<ul>\n<li>We want to design the API for creating <code>MachInst</code>s such that it is not possible to accidentally create an inst that should have a <code>SourceLoc</code> attached without that <code>SourceLoc</code>. I think that we can probably achieve this by auditing the helpers that we create.</li>\n<li>We want to be sure to register the trap-codes and trap-locations at the appropriate offsets in the sink </li>\n<li>We want to store the <code>SourceLoc</code>s efficiently, that is, ideally not inflate the size of every <code>RegMem</code> if we can help it.</li>\n</ul>\n<p>It occurred to me that we could solve the last two issues simultaneously by keeping source-location / trap info in a side-table, indexed by instruction (i.e., a sparse instruction-index to info map), and emitting this metadata to the sink as we iterate over the insts, outside of the machine backend's particular <code>MachInstEmit</code> method. We already have a notion of metadata outside the instruction, in the form of the \"is this a safepoint\" bit; perhaps this is another.</p>\n<p>(In a sense, both of these bits are orthogonal to, and outside the scope of, the machine instruction itself; the <code>MachInst</code> is some instruction/operation that updates machine state, and the safepoint bit and trap info are metadata carried by the emission pipeline out to side-tables on the machine code.)</p>\n<p>So perhaps we have a notion of <code>InsnMetadata</code> records; each instruction has zero or more such records; they are held by the VCode container in a sparse manner, sorted by instruction index (i.e., kept in the same order as the insts); and the VCode container promises to keep the order in sync, if e.g. it reorders or removes insts (e.g., move elision after RA).</p>\n<p>Then we have some trait that the <code>InsnMetadata</code> implements that \"emits\" the metadata to the <code>MachBuffer</code> sink; these emit-calls are interleaved with instruction emit calls as appropriate.</p>\n<p>Thoughts? I can sketch this in more detail if there's general agreement that we should have a framework something like this.</p>\n</blockquote>",
        "id": 214794376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603857777
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290#issuecomment-718048327\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<p>When we call <code>Inst::foo(...)</code>, how would <code>Inst</code> have a way to stuff the metadata into into <code>VCode</code>? I don't see how they reach one another.</p>\n<p>(As an aside about <code>Inst</code> size, I have wondered why we are not using <code>#[repr(u8)]</code> more liberally to fit stuff into 32 bytes: in the longest case I can think of, we would have an <code>Inst</code> with the following conceptual fields, <code>{bool, opcode, source loc, dst reg, src from shifted amode}</code>. If we applied <code>#[repr(u8)]</code>, we could get this case down to <code>inst tag/1 + bool/1 + opcode/2 + source loc/4 + dst reg/4 + src tag/1 + SytheticAMode tag/1 + Amode tag/1 + simm32/4, + base reg/4 + index reg/4 + shift/1</code> which equals 28 bytes. I'm not saying we shouldn't store stuff in a side table, that may still make sense, but why not pack things tighter? Or perhaps Rust won't pack things this way?)</p>\n</blockquote>",
        "id": 214861177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603902148
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290#issuecomment-718059784\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<p>Re: <code>#[repr(u8)]</code>: my understanding from @bnjbvr's explanation is that there are alignment/padding restrictions that come along with nested enums -- so if every field were in one <code>struct</code>, we could indeed pack more tightly, but we haven't gone there. (It could be an option if we have a way to keep the ergonomics somehow; maybe a \"packed\" and \"unpacked\" form; needs more thought.)</p>\n<blockquote>\n<p>When we call Inst::foo(...), how would Inst have a way to stuff the metadata into into VCode? I don't see how they reach one another.</p>\n</blockquote>\n<p>Indeed, the idea is that the creator of the <code>Inst</code> would attach the metadata as it passes the instruction to the <code>LowerCtx</code>. Right now we have (slightly hackishly) <code>ctx.emit()</code> and <code>ctx.emit_safepoint()</code>; perhaps instead we could have <code>ctx.emit_with_metadata()</code>, and then have various constructors for the metadata info/flags (<code>InsnMetadata::builder().with_mem_trap_loc(...).build()</code> maybe, and <code>.is_safepoint()</code> as well to set the safepoint bit?).</p>\n<p>Anyway, just a thought; perhaps it's too much infrastructure for just a few things; but it at least enables sparsity and gives the ability to only optionally include the data (with zero cost if not), which is good :-)</p>\n</blockquote>",
        "id": 214863753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603903229
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290#issuecomment-718067772\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<p>Makes sense to me. @bnjbvr, @julian-seward1?</p>\n</blockquote>",
        "id": 214865322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603903900
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290#issuecomment-718108122\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<blockquote>\n<p>Re: #[repr(u8)]: my understanding from @bnjbvr's explanation is that there are alignment/padding restrictions that come along with nested enums -- so if every field were in one struct, we could indeed pack more tightly, but we haven't gone there. (It could be an option if we have a way to keep the ergonomics somehow; maybe a \"packed\" and \"unpacked\" form; needs more thought.)</p>\n</blockquote>\n<p>Yes, exactly this: each different enum adds a new word for the discriminant (not sure if it applies under certain conditions like \"when the enum may be heap-allocated\" or not; this matches what I've observed with the Inst enum, though). Even if we flattened all the enums into a single one, and then used a newtype as suggested by @fitzgen, we'd not have enough space; the ideal packing would need the RegMem SIB shift offset (3 bits) to be on the same byte as the overall emulated discriminant, if I remember correctly my back-of-the-envelope computation.</p>\n<blockquote>\n<p>Indeed, the idea is that the creator of the Inst would attach the metadata as it passes the instruction to the LowerCtx. Right now we have (slightly hackishly) ctx.emit() and ctx.emit_safepoint(); perhaps instead we could have ctx.emit_with_metadata(), and then have various constructors for the metadata info/flags (InsnMetadata::builder().with_mem_trap_loc(...).build() maybe, and .is_safepoint() as well to set the safepoint bit?).</p>\n</blockquote>\n<p>The Metadata struct sounds good to me! If it has only two fields (is_safepoint + trap's sourceloc), and in no cases both are needed at the same time, the Builder pattern may be overhead, and it may increase Rustc compile times for the already-quite-large <code>lower</code> functions (but that's still another issue, that can be handled separately).</p>\n</blockquote>",
        "id": 214875070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603907839
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2290\">Issue #2290</a>:</p>\n<blockquote>\n<p>Many instruction formats in the new x64 backend accept a <code>RegMem</code> parameter, implying that they may load from memory. This may cause a trap if the memory address is out-of-bounds and, in order to return the correct trap code, we should be registering the source location of the instruction, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">srcloc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">srcloc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sink</span><span class=\"p\">.</span><span class=\"n\">add_trap</span><span class=\"p\">(</span><span class=\"n\">srcloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TrapCode</span>::<span class=\"n\">HeapOutOfBounds</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Currently, some formats do accept a <code>RegMem</code> parameter but do not correctly register the possible trap location. This passes the spec tests because these formats are not used in their <code>RegMem::Mem</code> variant, but for correctness and completeness we should register the trap locations any time it is possible that an instruction may load from memory.</p>\n<p>The current convention for doing so appends a <code>srcloc: Option&lt;SourceLoc&gt;</code> field to the format and expects the programmer to correctly choose between <code>None</code> and <code>Some(ctx.srcloc(insn))</code> when instatiating a new instruction format. I propose we change this: instead, attach the <code>Option&lt;SourceLoc&gt;</code>, or perhaps even a plain <code>SourceLoc</code>, to <code>SyntheticAmode</code>. This approach has advantages:</p>\n<ul>\n<li>any programmer attempting to do a load/store will be forced to decide how the trap will be reported (but not when only accessing registers)</li>\n<li>perhaps the helper functions in <code>lower.rs</code> can automatically attach a <code>SourceLoc</code> to any <code>SyntheticAmode</code>s created</li>\n<li>the <code>Inst</code> formats no longer need an extra field filled with <code>None</code> in many cases</li>\n</ul>\n<p>If we agree that the above approach is a good one, this issue should be closed not only </p>\n<ol>\n<li>when that refactoring is complete but</li>\n<li>also when any instruction formats that can load/store properly registers traps for their <code>RegMem::Mem</code> variants</li>\n</ol>\n</blockquote>",
        "id": 216296219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605056709
    }
]