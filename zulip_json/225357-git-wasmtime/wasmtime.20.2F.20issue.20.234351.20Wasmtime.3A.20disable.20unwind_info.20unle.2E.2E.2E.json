[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1169513043\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:config\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 287805621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656475929
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1169513151\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 287805623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656475942
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1170123740\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<p>Would you be up for adding a test which disables backtraces? I thought we had something along those lines but it sounds like your configuration is different which our current test suite isn't covering.</p>\n</blockquote>",
        "id": 287871953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656516459
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1170128037\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<p>Also, I'm a bit confused how this is coming up, this example program works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_backtrace</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"(module (func unreachable))\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"p\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">m2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so I'm also curious what configuration you're using to trigger the error coming out.</p>\n</blockquote>",
        "id": 287872571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656516668
    },
    {
        "content": "<p>Stebalien <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1170163866\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would you be up for adding a test which disables backtraces? I thought we had something along those lines but it sounds like your configuration is different which our current test suite isn't covering.</p>\n</blockquote>\n<p>There's a test:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/2034c8aa453d7114ef8acbe201bd4acec9117974/tests/all/traps.rs#L73-L97\">https://github.com/bytecodealliance/wasmtime/blob/2034c8aa453d7114ef8acbe201bd4acec9117974/tests/all/traps.rs#L73-L97</a></p>\n<p>But it doesn't test that unwind info isn't generated. I've just added a targeted one to make sure it's disabled at the compiler level, but there may be a better way.</p>\n</blockquote>",
        "id": 287876525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656518138
    },
    {
        "content": "<p>Stebalien <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1170168779\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<blockquote>\n<p>Also, I'm a bit confused how this is coming up, this example program works for me:</p>\n</blockquote>\n<p>It does work, however:</p>\n<ol>\n<li>In 0.38, unwind info won't be disabled unless you also disable reference types. If you disable reference types as well, that won't work.</li>\n<li>In 0.39 (dev), that will \"work\" simply because unwind info won't be disabled no matter what you do.</li>\n</ol>\n<p>The test I added should catch this.</p>\n</blockquote>",
        "id": 287877083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656518344
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1170174108\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<p>Ah ok that makes sense, thanks for clarifying. I had forgotten that the changes to <code>Config</code> and idempotency which would affect this were only on 0.39.0 and not 0.38.0.</p>\n<p>Otherwise though I think that the <code>unwind_info</code> flag still needs verification as you mentioned along the lines of safepoints. If <code>wasm_backtrace</code> or <code>wasm_reference_types</code> are enabled then <code>unwind_info</code> must be true, but otherwise the value of the flag does not matter.</p>\n</blockquote>",
        "id": 287877797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656518591
    },
    {
        "content": "<p>Stebalien <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1170285289\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<blockquote>\n<p>Otherwise though I think that the unwind_info flag still needs verification as you mentioned along the lines of safepoints.</p>\n</blockquote>\n<p>I was pointing out an inconsistency. It looks like that function is _primarily_ for validating that the config matches the current system, not for validating that the config matches the flags. That function isn't currently checking, e.g., enable_simd, enable_float, enable_verifier, etc. either. The enable_safepoints check is actually the exception.</p>\n<p>The config is checked against the compiler flags in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61312a9bf4b6a5d0922f77901f9b3f025de324ef/crates/wasmtime/src/config.rs#L1410\">https://github.com/bytecodealliance/wasmtime/blob/61312a9bf4b6a5d0922f77901f9b3f025de324ef/crates/wasmtime/src/config.rs#L1410</a></p>\n</blockquote>",
        "id": 287890922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656524344
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1170519676\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<p>This is needed for memory safety I believe. Without a check it's possible to load a wasm module which doesn't have <code>.eh_frame</code> and we're then unable to produce backtraces or backtraces crash at runtime if backtraces are required. The specific problem is compiling a module without <code>.eh_frame</code> as a precompiled artifact and then loading it into an engine that tries to do backtraces.</p>\n</blockquote>",
        "id": 287934121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656538868
    },
    {
        "content": "<p>Stebalien <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1170596880\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<p>Ah, because this is checking the _compiled_ module. Got it, thanks. That also explains why we don't care about enable_simd, enable_float, etc. (although the fact that the engine will happily deserialize a module that doesn't _quite_ match the engine's config is non-obvious).</p>\n<p>I've pushed a fix, but I think there's still _technically_ a bug. We're checking that we have unwind_info _if_ the flag is present, but we're not making sure the flag is actually present. I'm not sure if we really care, but I figured I'd mention it.</p>\n<hr>\n<p>Meta: would you like me to squash?</p>\n</blockquote>",
        "id": 287955906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656545977
    },
    {
        "content": "<p>Stebalien <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351#issuecomment-1171361460\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4351\">issue #4351</a>:</p>\n<blockquote>\n<p>@alexcrichton and @pchickey, thanks for guiding me through this!</p>\n</blockquote>",
        "id": 288045355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656602869
    }
]