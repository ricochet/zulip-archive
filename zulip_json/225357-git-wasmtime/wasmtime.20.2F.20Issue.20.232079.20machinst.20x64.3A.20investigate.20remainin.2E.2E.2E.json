[
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>Opening an issue as a placeholder for remaining issues observed during testing. Initial PR for landing excluded the following tests:</p>\n<ul>\n<li>[ ] implement proper stack unwinding for the new backend: codegen/src/isa/x86/unwind/{systemv, winx64}.rs, tests/all/traps.rs (also: this will require implementing the win64 fastcall ABI in x64)</li>\n<li>[ ] cranelift filetests. For those, we'd need to either make them dependent on the Cargo feature x64 being not present (for e.g. regalloc tests), or keep them enabled (e.g. run tests). It will require more triaging. One idea would be to create a new directory x64 in the filetests suite, and copy over the tests that can be ported there; then we'd need some kind of way to dispatch the x64 tests to the new backend only, and x86 to the old backend only.</li>\n<li>[ ] tests/all/gc.rs: investigate the gc-during-gc test failure. Probably a miscompilation in new-backend x64, since aarch64 doens't seem to fail this test.</li>\n<li>[ ] tests/all/iloop.rs, tests/all/stack_overflow.rs: probably require implementing probe stacks for both. The first file relates to interrupts, which might or might not be handled the same way as stack overflows in Wasmtime; I don't know.</li>\n</ul>\n</blockquote>",
        "id": 205376093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596038263
    },
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>Opening an issue as a placeholder for remaining issues observed during testing. Initial PR for landing excluded the following tests:</p>\n<ul>\n<li>[ ] implement proper stack unwinding for the new backend: codegen/src/isa/x86/unwind/{systemv, winx64}.rs, tests/all/traps.rs (also: this will require implementing the win64 fastcall ABI in x64)</li>\n<li>[ ] cranelift filetests. For those, we'd need to either make them dependent on the Cargo feature x64 being not present (for e.g. regalloc tests), or keep them enabled (e.g. run tests). It will require more triaging. One idea would be to create a new directory x64 in the filetests suite, and copy over the tests that can be ported there; then we'd need some kind of way to dispatch the x64 tests to the new backend only, and x86 to the old backend only.</li>\n<li>[ ] tests/all/gc.rs: investigate the gc-during-gc test failure. Probably a miscompilation in new-backend x64, since aarch64 doens't seem to fail this test.</li>\n<li>[ ] tests/all/iloop.rs, tests/all/stack_overflow.rs: probably require implementing probe stacks for both. The first file relates to interrupts, which might or might not be handled the same way as stack overflows in Wasmtime; I don't know.</li>\n</ul>\n</blockquote>",
        "id": 205376094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596038263
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>Opening an issue as a placeholder for remaining issues observed during testing. Initial PR for landing excluded the following tests:</p>\n<ul>\n<li>[ ] implement proper stack unwinding for the new backend: codegen/src/isa/x86/unwind/{systemv, winx64}.rs, tests/all/traps.rs (also: this will require implementing the win64 fastcall ABI in x64)</li>\n<li>[x] cranelift filetests. For those, we'd need to either make them dependent on the Cargo feature x64 being not present (for e.g. regalloc tests), or keep them enabled (e.g. run tests). It will require more triaging. One idea would be to create a new directory x64 in the filetests suite, and copy over the tests that can be ported there; then we'd need some kind of way to dispatch the x64 tests to the new backend only, and x86 to the old backend only.</li>\n<li>[ ] tests/all/gc.rs: investigate the gc-during-gc test failure. Probably a miscompilation in new-backend x64, since aarch64 doens't seem to fail this test.</li>\n<li>[ ] tests/all/iloop.rs, tests/all/stack_overflow.rs: probably require implementing probe stacks for both. The first file relates to interrupts, which might or might not be handled the same way as stack overflows in Wasmtime; I don't know.</li>\n</ul>\n</blockquote>",
        "id": 205429017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596068217
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>Opening an issue as a placeholder for remaining issues observed during testing. Initial PR for landing excluded the following tests:</p>\n<ul>\n<li>[ ] implement proper stack unwinding for the new backend: codegen/src/isa/x86/unwind/{systemv, winx64}.rs, tests/all/traps.rs (also: this will require implementing the win64 fastcall ABI in x64)</li>\n<li>[ ] cranelift filetests. For those, we'd need to either make them dependent on the Cargo feature x64 being not present (for e.g. regalloc tests), or keep them enabled (e.g. run tests). It will require more triaging. One idea would be to create a new directory x64 in the filetests suite, and copy over the tests that can be ported there; then we'd need some kind of way to dispatch the x64 tests to the new backend only, and x86 to the old backend only.</li>\n<li>[ ] tests/all/gc.rs: investigate the gc-during-gc test failure. Probably a miscompilation in new-backend x64, since aarch64 doens't seem to fail this test.</li>\n<li>[ ] tests/all/iloop.rs, tests/all/stack_overflow.rs: probably require implementing probe stacks for both. The first file relates to interrupts, which might or might not be handled the same way as stack overflows in Wasmtime; I don't know.</li>\n</ul>\n</blockquote>",
        "id": 205429020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596068220
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079#issuecomment-666001332\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>@bnjbvr Hi .. How do you test to see all the failures? If you run:</p>\n<blockquote>\n<p>cargo test --all  --features=experimental_x64</p>\n</blockquote>\n<p>or under the cranelift project:</p>\n<blockquote>\n<p>RUST_BACKTRACE=1` RUST_LOG=debug cargo test --all --features=experimental_x64 --package cranelift-codegen  -- --nocapture</p>\n</blockquote>\n<p>you see failures I believe related to the first bullet on stack onwinding .. but those are the only ones I can see fail. </p>\n</blockquote>",
        "id": 205429948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596069008
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079#issuecomment-666364933\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>A commit has now landed in CI with the right command line to use for running all the test cases; it's a bit long and requires Rust nightly (because of the way Cargo feature unification works in stable vs nightly):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span><span class=\"n\">Zfeatures</span><span class=\"o\">=</span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Zpackage</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">test_programs</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">experimental_x64</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">lightbeam</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"n\">automata</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"n\">fuzzing</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205478214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596115745
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079#issuecomment-666364933\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>A commit has now landed in CI with the right command line to use for running all the test cases; it's a bit long and requires Rust nightly (because of the way Cargo feature unification works in stable vs nightly):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span><span class=\"n\">Zfeatures</span><span class=\"o\">=</span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Zpackage</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">test_programs</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">experimental_x64</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">lightbeam</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"n\">automata</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"n\">fuzzing</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"n\">peepmatic</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205478244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596115764
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079#issuecomment-666733460\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>Thanks ... see this now after updating the version of nightly. Did not see any errors but will take a closer look at the tests that are disabled. </p>\n</blockquote>",
        "id": 205537850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596146587
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>Opening an issue as a placeholder for remaining issues observed during testing. Initial PR for landing excluded the following tests:</p>\n<ul>\n<li>[ ] implement proper stack unwinding for the new backend: codegen/src/isa/x86/unwind/{systemv, winx64}.rs, tests/all/traps.rs (also: this will require implementing the win64 fastcall ABI in x64)</li>\n<li>[ ] cranelift filetests. For those, we'd need to either make them dependent on the Cargo feature x64 being not present (for e.g. regalloc tests), or keep them enabled (e.g. run tests). It will require more triaging. One idea would be to create a new directory x64 in the filetests suite, and copy over the tests that can be ported there; then we'd need some kind of way to dispatch the x64 tests to the new backend only, and x86 to the old backend only.</li>\n<li>[ ] tests/all/gc.rs: investigate the gc-during-gc test failure. Probably a miscompilation in new-backend x64, since aarch64 doens't seem to fail this test.</li>\n<li>[ ] tests/all/iloop.rs, tests/all/stack_overflow.rs: probably require implementing probe stacks for both. The first file relates to interrupts, which might or might not be handled the same way as stack overflows in Wasmtime; I don't know.</li>\n</ul>\n</blockquote>",
        "id": 211135883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600956395
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079#issuecomment-698367866\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 211135914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600956416
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>Opening an issue as a placeholder for remaining issues observed during testing. Initial PR for landing excluded the following tests:</p>\n<ul>\n<li>[ ] implement proper stack unwinding for the new backend: codegen/src/isa/x86/unwind/{systemv, winx64}.rs, tests/all/traps.rs (also: this will require implementing the win64 fastcall ABI in x64)</li>\n<li>[ ] cranelift filetests. For those, we'd need to either make them dependent on the Cargo feature x64 being not present (for e.g. regalloc tests), or keep them enabled (e.g. run tests). It will require more triaging. One idea would be to create a new directory x64 in the filetests suite, and copy over the tests that can be ported there; then we'd need some kind of way to dispatch the x64 tests to the new backend only, and x86 to the old backend only.</li>\n<li>[ ] tests/all/gc.rs: investigate the gc-during-gc test failure. Probably a miscompilation in new-backend x64, since aarch64 doens't seem to fail this test.</li>\n<li>[x] tests/all/iloop.rs, tests/all/stack_overflow.rs: probably require implementing probe stacks for both. The first file relates to interrupts, which might or might not be handled the same way as stack overflows in Wasmtime; I don't know.</li>\n</ul>\n</blockquote>",
        "id": 211149563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600962007
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>Opening an issue as a placeholder for remaining issues observed during testing. Initial PR for landing excluded the following tests:</p>\n<ul>\n<li>[ ] implement proper stack unwinding for the new backend: codegen/src/isa/x86/unwind/{systemv, winx64}.rs, tests/all/traps.rs (also: this will require implementing the win64 fastcall ABI in x64)</li>\n<li>[x] cranelift filetests. For those, we'd need to either make them dependent on the Cargo feature x64 being not present (for e.g. regalloc tests), or keep them enabled (e.g. run tests). It will require more triaging. One idea would be to create a new directory x64 in the filetests suite, and copy over the tests that can be ported there; then we'd need some kind of way to dispatch the x64 tests to the new backend only, and x86 to the old backend only.</li>\n<li>[ ] tests/all/gc.rs: investigate the gc-during-gc test failure. Probably a miscompilation in new-backend x64, since aarch64 doens't seem to fail this test.</li>\n<li>[x] tests/all/iloop.rs, tests/all/stack_overflow.rs: probably require implementing probe stacks for both. The first file relates to interrupts, which might or might not be handled the same way as stack overflows in Wasmtime; I don't know.</li>\n</ul>\n</blockquote>",
        "id": 211149806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600962126
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079#issuecomment-803277437\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<blockquote>\n<p>implement proper stack unwinding for the new backend: codegen/src/isa/x86/unwind/{systemv, winx64}.rs, tests/all/traps.rs (also: this will require implementing the win64 fastcall ABI in x64)</p>\n</blockquote>\n<p>This is done.</p>\n<blockquote>\n<p>tests/all/gc.rs: investigate the gc-during-gc test failure. Probably a miscompilation in new-backend x64, since aarch64 doens't seem to fail this test.</p>\n</blockquote>\n<p>Is this done?</p>\n</blockquote>",
        "id": 231134317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616231955
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079#issuecomment-803458501\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>I think so; we don't have any excluded GC tests anymore.</p>\n</blockquote>",
        "id": 231169501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616271995
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2079\">Issue #2079</a>:</p>\n<blockquote>\n<p>Opening an issue as a placeholder for remaining issues observed during testing. Initial PR for landing excluded the following tests:</p>\n<ul>\n<li>[ ] implement proper stack unwinding for the new backend: codegen/src/isa/x86/unwind/{systemv, winx64}.rs, tests/all/traps.rs (also: this will require implementing the win64 fastcall ABI in x64)</li>\n<li>[x] cranelift filetests. For those, we'd need to either make them dependent on the Cargo feature x64 being not present (for e.g. regalloc tests), or keep them enabled (e.g. run tests). It will require more triaging. One idea would be to create a new directory x64 in the filetests suite, and copy over the tests that can be ported there; then we'd need some kind of way to dispatch the x64 tests to the new backend only, and x86 to the old backend only.</li>\n<li>[ ] tests/all/gc.rs: investigate the gc-during-gc test failure. Probably a miscompilation in new-backend x64, since aarch64 doens't seem to fail this test.</li>\n<li>[x] tests/all/iloop.rs, tests/all/stack_overflow.rs: probably require implementing probe stacks for both. The first file relates to interrupts, which might or might not be handled the same way as stack overflows in Wasmtime; I don't know.</li>\n</ul>\n</blockquote>",
        "id": 231169504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616272000
    }
]