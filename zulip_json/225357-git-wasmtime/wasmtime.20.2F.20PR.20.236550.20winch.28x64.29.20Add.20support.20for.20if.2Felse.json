[
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a> from <code>saulecabrera:winch-control-flow</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change adds the necessary building blocks to support control flow; this change also adds support for the <code>If</code> / <code>Else</code> operators.</p>\n<p>This change does not include multi-value support. The idea is to add support for multi-value across the compiler (functions and blocks) as a separate future change.</p>\n<p>The general gist of the change is to track the presence of control flow frames as part of the code generation context and emit the corresponding labels as and instructions as control flow blocks are found.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 364927552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686332487
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/itsrainy\">itsrainy</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a>.</p>",
        "id": 364927554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686332488
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a>.</p>",
        "id": 364927555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686332488
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a>.</p>",
        "id": 364927558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686332489
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a>.</p>",
        "id": 364927561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686332489
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a>.</p>",
        "id": 364927595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686332498
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a>.</p>",
        "id": 364930857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686333391
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550#pullrequestreview-1475239651\">PR review</a>:</p>\n<blockquote>\n<p>LGTM overall -- excited to have the beginning of control-flow handling, thanks!</p>\n<p>A few thoughts for refactors below; curious to know what you think.</p>\n</blockquote>",
        "id": 365608474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686585420
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550#pullrequestreview-1475239651\">PR review</a>:</p>\n<blockquote>\n<p>LGTM overall -- excited to have the beginning of control-flow handling, thanks!</p>\n<p>A few thoughts for refactors below; curious to know what you think.</p>\n</blockquote>",
        "id": 365608475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686585420
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550#discussion_r1226872043\">PR review comment</a>:</p>\n<blockquote>\n<p>s/doesnt/doesn't/</p>\n</blockquote>",
        "id": 365608477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686585420
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550#discussion_r1226871236\">PR review comment</a>:</p>\n<blockquote>\n<p>The naming here is a little confusing -- I would have expected this method to take a callback (closure) and call it for something, but I guess the idea is that this is actually meant to be called from within a callback, where we have an explicit borrow of <code>self.regalloc</code> and <code>self.frame</code>?</p>\n<p>Maybe <code>spill_impl</code> instead?</p>\n</blockquote>",
        "id": 365608478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686585420
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550#discussion_r1226882907\">PR review comment</a>:</p>\n<blockquote>\n<p>I kind of like what <code>cranelift-wasm</code> does: it has another frame type <code>Else</code>, and the <code>else</code> opcode pops the <code>If</code> and pushes an <code>Else</code>. This keeps a 1-to-1 correspondence between the control-flow stack and the position in the code (i.e., the full context is captured) which is a little less error-prone I think. In this design with the methods on the frame struct itself, the <code>emit_else</code> method could mutate <code>self</code> (<code>*self = ControlStackFrame::Else { ... }</code>). This also removes the need for the conditional in the <code>end</code> case below and the somewhat subtle invariant around the option-of-label. What do you think?</p>\n</blockquote>",
        "id": 365608479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686585420
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550#discussion_r1226884734\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't want to bikeshed SmallVec sizes too much (we should just profile) but I'm curious, was this derived from some samples? I've seen block nesting go quite a bit deeper in real wasms; if <code>ControlStackFrame</code> isn't too large, and given that this is just one context struct for the length of the compilation, I don't see the harm in something like <code>64</code> or thereabouts?</p>\n</blockquote>",
        "id": 365608480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686585420
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a>.</p>",
        "id": 365931847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686674831
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550#discussion_r1228428645\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah <code>spill_impl</code> makes sense to me. </p>\n</blockquote>",
        "id": 365931983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686674855
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550#discussion_r1228429470\">PR review comment</a>:</p>\n<blockquote>\n<p>The resulting code is definitely cleaner with this approach, thanks!</p>\n</blockquote>",
        "id": 365932201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686674899
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550#discussion_r1228430555\">PR review comment</a>:</p>\n<blockquote>\n<p>I didn't take any samples, so 6 was chosen arbitrarily, I'm not opposed to 64 though. I changed it to 64 and we can modify it later if needed. </p>\n</blockquote>",
        "id": 365932483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686674960
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a>.</p>",
        "id": 365933843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686675255
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6550\">PR #6550</a>.</p>",
        "id": 365954147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686679995
    }
]