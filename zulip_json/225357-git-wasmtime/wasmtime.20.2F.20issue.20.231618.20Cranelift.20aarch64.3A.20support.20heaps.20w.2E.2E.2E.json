[
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1618#issuecomment-920434367\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1618\">issue #1618</a>:</p>\n<blockquote>\n<p>@alexcrichton I haven't had a chance to review your Memory64 work yet, but it feels like it could have some relevance to this issue - shouldn't we already support explicit bounds checks for heap accesses?</p>\n</blockquote>",
        "id": 253498924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631745561
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1618#issuecomment-920441980\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1618\">issue #1618</a>:</p>\n<blockquote>\n<p>Yeah things should be working on aarch64 since we're enabling the memory64 tests there, and all memory64 accesses are explicitly bounds-checked. This should be handled by the legalization pass which lowers <code>heap_addr</code> instructions to appropriate if/else blocks and such. This may be stale in that case and/or fixed at some point in the interim?</p>\n</blockquote>",
        "id": 253499835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631746043
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1618#issuecomment-1117993931\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1618\">issue #1618</a>:</p>\n<blockquote>\n<p>This is an old issue and we currently do support explicit bounds-checks on aarch64; closing.</p>\n</blockquote>",
        "id": 281229155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651703472
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1618\">issue #1618</a>:</p>\n<blockquote>\n<p>The new backend supports heaps with implicit bounds check (using the large virtual memory allocation + segfault trick), but doesn't support generating explicit bounds checks when we don't want large virtual memory allocations (or can't do them, b/o containerization, etc.).</p>\n<p>Currently, an assertion triggers during lowering, when running for instance Spidermonkey's <code>memory.js</code> test case with <code>--disable-wasm-huge-memory</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hit</span><span class=\"w\"> </span><span class=\"n\">MOZ_CRASH</span><span class=\"p\">(</span><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">ben</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1894</span><span class=\"w\"></span>\n</code></pre></div>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 281229156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651703473
    }
]