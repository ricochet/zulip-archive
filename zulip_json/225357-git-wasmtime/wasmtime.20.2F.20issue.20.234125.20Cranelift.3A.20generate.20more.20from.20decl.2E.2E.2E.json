[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4125\">issue #4125</a>:</p>\n<blockquote>\n<p>We currently define an <code>enum</code> to represent machine instructions for each backend. This is fairly high-level and generally nice, allowing us to use Rust types to model arguments and modes, etc.</p>\n<p>However, there is a lot of \"glue\" in the layer of code that supports <em>doing things</em> with these enums that is very tedious and error-prone to write:</p>\n<ul>\n<li>Each instruction enum has a <code>get_operands</code> that must list every Reg as an early/late def/use/mod or tmp (and missing one is a bug);</li>\n<li>Each instruction enum has an <code>emit</code> that must use an <code>AllocationConsumer</code> to take regalloc results in the <em>same</em> order as <code>get_operands</code> provided vregs, and mismatching the two is a subtle and hard-to-catch bug;</li>\n<li>Each instruction enum has a pretty-printing implementation, with similar <code>AllocationConsumer</code> usage constraints, and also with very repetitive code (\"print the operand and these three regs\");</li>\n<li>There are a number of other kinds of metadata (is a move, is a safepoint) that are fairly mechanical <code>match</code>es over the enum;</li>\n<li>Possibly others (but the above are the main error-prone bits).</li>\n</ul>\n<p>Ideally, we could allow the backend author to define a new \"assembler library\" by:</p>\n<ul>\n<li>Writing the enum of instruction formats, with decorations/annotations for \"reg use/def\" and other metadata;</li>\n<li>Providing an implementation of a generated trait for emission with one method per instruction format (enum arm), with typesafe named arguments for registers (with generated code matching up allocations, avoiding any errors);</li>\n<li>Either specifying a \"default\" for pretty-printing (opcode, <code>Display</code> trait for other bits, registers?) or else using a similar trait approach as for emission.</li>\n</ul>\n<p>Then we could generate the rest: essentially the whole implementation of the <code>MachInst</code> trait, or at least most of it.</p>\n<p>There has been some informal discussion about whether expanded information about instructions should be in toml/yaml-type files or something else; I believe it might actually be better to keep this in the ISLE, with some sort of annotation syntax, both to reduce the cognitive load of languages that must be learnt, and to keep as few sources-of-truth around as possible.</p>\n</blockquote>",
        "id": 281894445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652221535
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4125\">issue #4125</a>:</p>\n<blockquote>\n<p>We currently define an <code>enum</code> to represent machine instructions for each backend. This is fairly high-level and generally nice, allowing us to use Rust types to model arguments and modes, etc.</p>\n<p>However, there is a lot of \"glue\" in the layer of code that supports <em>doing things</em> with these enums that is very tedious and error-prone to write:</p>\n<ul>\n<li>Each instruction enum has a <code>get_operands</code> that must list every Reg as an early/late def/use/mod or tmp (and missing one is a bug);</li>\n<li>Each instruction enum has an <code>emit</code> that must use an <code>AllocationConsumer</code> to take regalloc results in the <em>same</em> order as <code>get_operands</code> provided vregs, and mismatching the two is a subtle and hard-to-catch bug;</li>\n<li>Each instruction enum has a pretty-printing implementation, with similar <code>AllocationConsumer</code> usage constraints, and also with very repetitive code (\"print the operand and these three regs\");</li>\n<li>There are a number of other kinds of metadata (is a move, is a safepoint) that are fairly mechanical <code>match</code>es over the enum;</li>\n<li>Possibly others (but the above are the main error-prone bits).</li>\n</ul>\n<p>Ideally, we could allow the backend author to define a new \"assembler library\" by:</p>\n<ul>\n<li>Writing the enum of instruction formats, with decorations/annotations for \"reg use/def\" and other metadata;</li>\n<li>Providing an implementation of a generated trait for emission with one method per instruction format (enum arm), with typesafe named arguments for registers (with generated code matching up allocations, avoiding any errors);</li>\n<li>Either specifying a \"default\" for pretty-printing (opcode, <code>Display</code> trait for other bits, registers?) or else using a similar trait approach as for emission.</li>\n</ul>\n<p>Then we could generate the rest: essentially the whole implementation of the <code>MachInst</code> trait, or at least most of it.</p>\n<p>There has been some informal discussion about whether expanded information about instructions should be in toml/yaml-type files or something else; I believe it might actually be better to keep this in the ISLE, with some sort of annotation syntax, both to reduce the cognitive load of languages that must be learnt, and to keep as few sources-of-truth around as possible.</p>\n</blockquote>",
        "id": 281894446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652221535
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4125\">issue #4125</a>:</p>\n<blockquote>\n<p>We currently define an <code>enum</code> to represent machine instructions for each backend. This is fairly high-level and generally nice, allowing us to use Rust types to model arguments and modes, etc.</p>\n<p>However, there is a lot of \"glue\" in the layer of code that supports <em>doing things</em> with these enums that is very tedious and error-prone to write:</p>\n<ul>\n<li>Each instruction enum has a <code>get_operands</code> that must list every Reg as an early/late def/use/mod or tmp (and missing one is a bug);</li>\n<li>Each instruction enum has an <code>emit</code> that must use an <code>AllocationConsumer</code> to take regalloc results in the <em>same</em> order as <code>get_operands</code> provided vregs, and mismatching the two is a subtle and hard-to-catch bug;</li>\n<li>Each instruction enum has a pretty-printing implementation, with similar <code>AllocationConsumer</code> usage constraints, and also with very repetitive code (\"print the operand and these three regs\");</li>\n<li>There are a number of other kinds of metadata (is a move, is a safepoint) that are fairly mechanical <code>match</code>es over the enum;</li>\n<li>Possibly others (but the above are the main error-prone bits).</li>\n</ul>\n<p>Ideally, we could allow the backend author to define a new \"assembler library\" by:</p>\n<ul>\n<li>Writing the enum of instruction formats, with decorations/annotations for \"reg use/def\" and other metadata;</li>\n<li>Providing an implementation of a generated trait for emission with one method per instruction format (enum arm), with typesafe named arguments for registers (with generated code matching up allocations, avoiding any errors);</li>\n<li>Either specifying a \"default\" for pretty-printing (opcode, <code>Display</code> trait for other bits, registers?) or else using a similar trait approach as for emission.</li>\n</ul>\n<p>Then we could generate the rest: essentially the whole implementation of the <code>MachInst</code> trait, or at least most of it.</p>\n<p>There has been some informal discussion about whether expanded information about instructions should be in toml/yaml-type files or something else; I believe it might actually be better to keep this in the ISLE, with some sort of annotation syntax, both to reduce the cognitive load of languages that must be learnt, and to keep as few sources-of-truth around as possible.</p>\n</blockquote>",
        "id": 281894447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652221535
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4125\">issue #4125</a>:</p>\n<blockquote>\n<p>We currently define an <code>enum</code> to represent machine instructions for each backend. This is fairly high-level and generally nice, allowing us to use Rust types to model arguments and modes, etc.</p>\n<p>However, there is a lot of \"glue\" in the layer of code that supports <em>doing things</em> with these enums that is very tedious and error-prone to write:</p>\n<ul>\n<li>Each instruction enum has a <code>get_operands</code> that must list every Reg as an early/late def/use/mod or tmp (and missing one is a bug);</li>\n<li>Each instruction enum has an <code>emit</code> that must use an <code>AllocationConsumer</code> to take regalloc results in the <em>same</em> order as <code>get_operands</code> provided vregs, and mismatching the two is a subtle and hard-to-catch bug;</li>\n<li>Each instruction enum has a pretty-printing implementation, with similar <code>AllocationConsumer</code> usage constraints, and also with very repetitive code (\"print the operand and these three regs\");</li>\n<li>There are a number of other kinds of metadata (is a move, is a safepoint) that are fairly mechanical <code>match</code>es over the enum;</li>\n<li>Possibly others (but the above are the main error-prone bits).</li>\n</ul>\n<p>Ideally, we could allow the backend author to define a new \"assembler library\" by:</p>\n<ul>\n<li>Writing the enum of instruction formats, with decorations/annotations for \"reg use/def\" and other metadata;</li>\n<li>Providing an implementation of a generated trait for emission with one method per instruction format (enum arm), with typesafe named arguments for registers (with generated code matching up allocations, avoiding any errors);</li>\n<li>Either specifying a \"default\" for pretty-printing (opcode, <code>Display</code> trait for other bits, registers?) or else using a similar trait approach as for emission.</li>\n</ul>\n<p>Then we could generate the rest: essentially the whole implementation of the <code>MachInst</code> trait, or at least most of it.</p>\n<p>There has been some informal discussion about whether expanded information about instructions should be in toml/yaml-type files or something else; I believe it might actually be better to keep this in the ISLE, with some sort of annotation syntax, both to reduce the cognitive load of languages that must be learnt, and to keep as few sources-of-truth around as possible.</p>\n</blockquote>",
        "id": 281894448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652221535
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4125#issuecomment-1122995282\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4125\">issue #4125</a>:</p>\n<blockquote>\n<p>I think this would be a good idea (I've had it in the past but it seems like a lot of work). I think an advantage of this is that it would make it easier to refactor the x64 <code>Inst</code> variants to more closely align with the ISA instructions; IMO, it is not always clear how to encode an instruction given the current \"classes of instructions\" available. If this issue were implemented with a way to template the shapes of instructions (e.g., <code>&lt;hole&gt; xmm, xmm/m128</code>) then it would be possible to generate <code>Inst</code> variants that match the ISA.</p>\n</blockquote>",
        "id": 281897809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652223889
    }
]