[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[ ] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[ ] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[ ] Implement the alias section</li>\n<li>[ ] Implement the instance section</li>\n<li>[ ] Implement module export/import</li>\n<li>[ ] Implement instance export/import</li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?</li>\n</ul>\n</blockquote>",
        "id": 205948820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596568874
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[ ] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[ ] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[ ] Implement the alias section</li>\n<li>[ ] Implement the instance section</li>\n<li>[ ] Implement module export/import</li>\n<li>[ ] Implement instance export/import</li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?</li>\n</ul>\n</blockquote>",
        "id": 205948847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596568891
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094#issuecomment-721831616\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<blockquote>\n<p>Update wasmparser used by Wasmtime to understand module linking</p>\n</blockquote>\n<p>It seems like this is done?</p>\n</blockquote>",
        "id": 215604859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604506971
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[ ] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[ ] Implement the alias section</li>\n<li>[ ] Implement the instance section</li>\n<li>[ ] Implement module export/import</li>\n<li>[ ] Implement instance export/import</li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?</li>\n</ul>\n</blockquote>",
        "id": 215605099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604507057
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094#issuecomment-721832592\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>Indeed!</p>\n</blockquote>",
        "id": 215605119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604507065
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[ ] Implement the alias section</li>\n<li>[ ] Implement the instance section</li>\n<li>[ ] Implement module export/import</li>\n<li>[ ] Implement instance export/import</li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 217664958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606156111
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[ ] Implement the alias section</li>\n<li>[ ] Implement the instance section #2447</li>\n<li>[ ] Implement module export/import</li>\n<li>[ ] Implement instance export/import</li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 217697604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606174347
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[ ] Implement the alias section #2451</li>\n<li>[ ] Implement the instance section #2447</li>\n<li>[ ] Implement module export/import</li>\n<li>[ ] Implement instance export/import</li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 217911340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606323518
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[ ] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[ ] Implement module export/import #2461</li>\n<li>[ ] Implement instance export/import #2461 </li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218494075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606863494
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[ ] Implement module export/import #2461</li>\n<li>[ ] Implement instance export/import #2461 </li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218648176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606963726
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[ ] Implement instance export/import #2461 </li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218717007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607012338
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218717010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607012340
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API #2472</li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py}</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218741706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607023281
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[ ] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API #2472 </li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py} <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/47\">https://github.com/bytecodealliance/wasmtime-py/pull/47</a></li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218741960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607023399
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[x] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API #2472 </li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py} <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/47\">https://github.com/bytecodealliance/wasmtime-py/pull/47</a></li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218745419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607025098
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[x] Ensure the Rust API exposes module linking well</li>\n<li>[ ] Implement module linking in the C API #2472 </li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py} <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/47\">https://github.com/bytecodealliance/wasmtime-py/pull/47</a></li>\n<li>[ ] Implement fuzzing for module linking</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218745503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607025126
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[x] Ensure the Rust API exposes module linking well</li>\n<li>[x] Implement module linking in the C API #2472 </li>\n<li>[ ] Implement module linking for one of wasmtime-{go,dotnet,py} <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/47\">https://github.com/bytecodealliance/wasmtime-py/pull/47</a></li>\n<li>[ ] Implement fuzzing for module linking</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218759611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607032311
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[x] Ensure the Rust API exposes module linking well</li>\n<li>[x] Implement module linking in the C API #2472 </li>\n<li>[x] Implement module linking for one of wasmtime-{go,dotnet,py} <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/47\">https://github.com/bytecodealliance/wasmtime-py/pull/47</a></li>\n<li>[ ] Implement fuzzing for module linking</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218759618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607032312
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[x] Ensure the Rust API exposes module linking well</li>\n<li>[x] Implement module linking in the C API #2472 </li>\n<li>[x] Implement module linking for one of wasmtime-{go,dotnet,py} <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/47\">https://github.com/bytecodealliance/wasmtime-py/pull/47</a>, <a href=\"https://github.com/bytecodealliance/wasmtime-go/pull/46\">https://github.com/bytecodealliance/wasmtime-go/pull/46</a></li>\n<li>[ ] Implement fuzzing for module linking</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 218767461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607036681
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[x] Ensure the Rust API exposes module linking well</li>\n<li>[x] Implement module linking in the C API #2472 </li>\n<li>[x] Implement module linking for one of wasmtime-{go,dotnet,py} <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/47\">https://github.com/bytecodealliance/wasmtime-py/pull/47</a>, <a href=\"https://github.com/bytecodealliance/wasmtime-go/pull/46\">https://github.com/bytecodealliance/wasmtime-go/pull/46</a></li>\n<li>[x] Implement fuzzing for module linking</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 220400886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1608311727
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094#issuecomment-748213004\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>Ok this is all done now so I'm going to close this. I'm still wading through fuzz bugs at this point but the bulk of it is all there!</p>\n</blockquote>",
        "id": 220400933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1608311748
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2094\">Issue #2094</a>:</p>\n<blockquote>\n<p>I plan to use this as a tracking issue for the module linking proposal in Wasmtime. I'll be updating this description over time as I find time and as work is done:</p>\n<ul>\n<li>[x] Implement in wasm-tools (validation, text, binary, etc) <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/26\">https://github.com/bytecodealliance/wasm-tools/pull/26</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/30\">https://github.com/bytecodealliance/wasm-tools/pull/30</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/38\">https://github.com/bytecodealliance/wasm-tools/pull/38</a>, <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/40\">https://github.com/bytecodealliance/wasm-tools/pull/40</a>, ...</li>\n<li>[x] Update wasmparser used by Wasmtime to understand module linking <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a></li>\n<li>[x] Initial groundwork for compiling many modules at once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">https://github.com/bytecodealliance/wasmtime/pull/2093</a></li>\n<li>[x] Implement the alias section #2451</li>\n<li>[x] Implement the instance section #2447</li>\n<li>[x] Implement module export/import #2461</li>\n<li>[x] Implement instance export/import #2461 </li>\n<li>[x] Ensure the Rust API exposes module linking well</li>\n<li>[x] Implement module linking in the C API #2472 </li>\n<li>[x] Implement module linking for one of wasmtime-{go,dotnet,py} <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/47\">https://github.com/bytecodealliance/wasmtime-py/pull/47</a>, <a href=\"https://github.com/bytecodealliance/wasmtime-go/pull/46\">https://github.com/bytecodealliance/wasmtime-go/pull/46</a></li>\n<li>[x] Implement fuzzing for module linking</li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>Some miscenalleous notes on the implementation and how this is being implemented:</p>\n<ul>\n<li>Per-module data structures are intended to continue to be per-module, only <code>wasmtime::Module</code> will internally have a list of modules to select from.</li>\n<li>Aliases are expected to be implemented under the hood as imports. <ul>\n<li>It's expected that instantiation will pass in a <code>Resolver</code> for the actual imports, as well as the \"surrounding environment\" which is probably \"the list of all other modules that came from the original wasm file\". </li>\n<li>JIT code will call an aliased function from an imported instance as if it were an imported function. (similar for tables/globals/etc)</li>\n</ul>\n</li>\n</ul>\n<p>Open questions:</p>\n<ul>\n<li>What should <code>wasm2obj</code> do for multi-module wasm files?</li>\n<li>What should the runtime representation in <code>wasmtime-jit</code> be for imported instances and imported modules?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 220400935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1608311748
    }
]