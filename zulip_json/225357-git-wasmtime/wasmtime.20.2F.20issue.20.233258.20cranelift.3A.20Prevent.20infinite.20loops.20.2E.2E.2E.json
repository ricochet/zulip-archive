[
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3258#issuecomment-907383310\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3258\">issue #3258</a>:</p>\n<blockquote>\n<p>This fixes the case of a block branching back to itself, but this code will still infinite loop if it walks into a cycle containing multiple blocks and the entire cycle is unreachable from the entry block.<br>\n</p>\n</blockquote>",
        "id": 250971524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630087899
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3258#issuecomment-910153770\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3258\">issue #3258</a>:</p>\n<blockquote>\n<p>That's true! And running the fuzzer again with this fix found a example of the situation that you were mentioning.</p>\n<p>I've change the approach somewhat, we now do a sort of graph search over predecessors. It is not a full search over all blocks, because we stop searching once we find a block with multiple predecessors. This avoids the situation where we have to visit all blocks in the function for every non local var lookup, which should help a lot with performance.</p>\n<p>The original algorithm can deal with these cases where we have multiple predecessors somewhere down the line of predecessors.</p>\n<p>I've run the fuzzer on this for the last 2 hours, and it seems to be working as intended. </p>\n</blockquote>",
        "id": 251537069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630492330
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3258#issuecomment-910153770\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3258\">issue #3258</a>:</p>\n<blockquote>\n<p>That's true! And running the fuzzer again with this fix found a example of the situation that you were mentioning.</p>\n<p>I've change the approach somewhat, we now do a sort of graph search over predecessors. It is not a full search over all blocks, because we stop searching once we find a block with multiple predecessors. This avoids the situation where we have to visit all blocks in the function for every non local var lookup, which should help a lot with performance.</p>\n<p>The original algorithm can deal with these cases where we have multiple predecessors somewhere down the line of predecessors.</p>\n<p>I've run the fuzzer on this for the last 2 hours, and it seems to be working as intended. (The other examples were usually found within 5 min)</p>\n</blockquote>",
        "id": 251537567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630492667
    }
]