[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726#issuecomment-1021606844\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726\">issue #3726</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 269323931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643144655
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726#issuecomment-1028244443\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726\">issue #3726</a>:</p>\n<blockquote>\n<p>Any feedback on this?</p>\n</blockquote>",
        "id": 270436957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643827423
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726#issuecomment-1035416717\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726\">issue #3726</a>:</p>\n<blockquote>\n<p>The <code>--public-keys</code> has been renamed to <code>--experimental-public-keys</code>.</p>\n</blockquote>",
        "id": 271484515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644522481
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726#issuecomment-1041920348\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726\">issue #3726</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 272150320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645033148
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726#issuecomment-1048559983\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726\">issue #3726</a>:</p>\n<blockquote>\n<p>Ping?</p>\n<p>(no code changes in the rebases, these were just to fix merge conflicts introduced by the memfd work)</p>\n</blockquote>",
        "id": 272919145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645606215
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726#issuecomment-1049317711\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726\">issue #3726</a>:</p>\n<blockquote>\n<p>I believe that @tschneidereit was previously taking a look at this and I don't know where he left off. I also believe that he's away this week, but I can ping him about this next week when he's back.</p>\n</blockquote>",
        "id": 273026107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645658557
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726#issuecomment-1055728199\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726\">issue #3726</a>:</p>\n<blockquote>\n<p>Ok I talked with Till and it sounds like y'all mainly talked about the CLI interface and high-level concerns about this being experimental, so I'll focus more on the technical implementation.</p>\n<p>Overall I'm personally concerned about the implementation of this where very little is in this repository and 99% of this is in an external crate. We do that for crates like <code>wasmparser</code> and <code>wast</code> and such but it's pretty rare to outsource large implementation details from Wasmtime. This can run the risk of integration issues and also runs the risk of diluting the quality of code coming into Wasmtime because the external code is not reviewed in the same manner as code in this repository. Some specific things I noticed reading over the <code>wasmsign2</code> crate and the integration in this PR:</p>\n<ul>\n<li>\n<p>This is adding, in the Rust sense, a \"public\" dependency on <code>wasmsign2</code> because <code>wasmsign2</code>'s public types are appearing in Wasmtime's API. This is something we try to avoid to ensure that all APIs are well-audited, well documented, and well-tested. This is specifically the <code>wasmtime::Config::public_keys</code> method which takes <code>wasmsign2::PublicKeySet</code> where we're not reviewing or seeing changes to the <code>PublicKeySet</code> API over time. It would be better if Wasmtime had standalone configuration of this feature which only required standard library or otherwise very common types.</p>\n</li>\n<li>\n<p>The <code>wasmsign2</code> crate is making decisions about cryptography implementations and what to use, but I don't think we have project consensus about the right approach here. I'm no security expert myself but I do believe that selecting a crypto implementation is a pretty big decision, and additionally it's something we'd want to be consistent with. I don't think we historically considered this when <code>wasi-crypto</code> was added experimentally as well, but as this continues to grow this is something we need to consider before stabilization of any form.</p>\n</li>\n<li>\n<p>The <code>wasmsign2</code> crate currently duplicates parsing the WebAssembly module with Wasmtime. The signature-check step is entirely independent of Wasmtime's own parsing of the module, meaning that it's not only double-parsed but it's also parsed with an entirely different set of Rust functions. I don't personally think that this is the best way to integrate this feature. I would expect that a wasm binary is parsed precisely once and integration of a signature-checking feature would be interleaved with the existing parsing (or somehow integrated in the general vicinity)</p>\n</li>\n</ul>\n<p>These are some of the more major points at least but I figured it's at least a starting point. In some sense this PR matches how <code>wasi-crypto</code> was integrated where a large external dependency is added that's largely outside of this repository, but <code>wasi-crypto</code> is also much more opt-in in that it's not part of the <code>wasmtime</code> crate API and it's only about host functions rather than integrating into the flow of processing wasm modules. </p>\n<p>I think one possible way to improve the integration here would be to split the <code>wasmsign2</code> crate into a reader/writer half where Wasmtime would only depend on the reading portions and the <code>wasmsign2</code> crate would have APIs for creating the context used to process signatures and then have the ability to be fed individual sections as they're parsed in the main loop of parsing a wasm module with the <code>wasmparser</code> crate. Ideally the <code>wasmsign2</code> crate would not do any parsing itself, or would have a mode where when integrated into Wasmtime it doesn't do any of its own parsing.</p>\n</blockquote>",
        "id": 273686831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646158947
    }
]