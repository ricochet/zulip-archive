[
    {
        "content": "<p>al3xfischer opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684\">issue #3684</a>:</p>\n<blockquote>\n<p>Hey @all!</p>\n<p>I want to instantiate a module that has multiple import.<br>\nMy gotcha is that I'm only interested in one function of the module that does not need any of the imports.</p>\n<p>Is there a way to instantiate the module but ignore the fact that I'm not providing the imports?</p>\n<p>I used the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"s\">\"awam.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">,());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">say</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"s\">\"say\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"n\">length</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">say</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"n\">length</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But I get the error msg: <code>expected 3 import, found 0</code></p>\n<p>I also thought about the <code>Linker</code> but I was not able to find an API that might help.</p>\n<p>Thanks in advance!</p>\n</blockquote>",
        "id": 267769569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013662
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684#issuecomment-1011356094\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684\">issue #3684</a>:</p>\n<blockquote>\n<p>You could provide dummy functions that panic as imports. Or you could use a wasm parser to extract the function you need and produce a new wasm module with this function. A wasm module can only be instantiated as a unit, not in parts.</p>\n</blockquote>",
        "id": 267769983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013852
    },
    {
        "content": "<p>al3xfischer <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684#issuecomment-1011358833\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684\">issue #3684</a>:</p>\n<blockquote>\n<p>If I create a fake function does it have to match the types of the imports or is that not validated when instantiated?</p>\n</blockquote>",
        "id": 267770588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642014076
    },
    {
        "content": "<p>al3xfischer edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684#issuecomment-1011358833\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684\">issue #3684</a>:</p>\n<blockquote>\n<p>@bjorn3  If I create a fake function does it have to match the types of the imports or is that not validated when instantiated?</p>\n</blockquote>",
        "id": 267772434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642014905
    },
    {
        "content": "<p>al3xfischer deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684#issuecomment-1011358833\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684\">issue #3684</a>:</p>\n<blockquote>\n<p>@bjorn3  If I create a fake function does it have to match the types of the imports or is that not validated when instantiated?</p>\n</blockquote>",
        "id": 267774465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642016011
    },
    {
        "content": "<p>al3xfischer <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684#issuecomment-1011442020\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684\">issue #3684</a>:</p>\n<blockquote>\n<p>@bjorn3  Thanks for the help.</p>\n<p>I was able to instantiate the module by creating \"fake\" functions.</p>\n</blockquote>",
        "id": 267784500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642020775
    },
    {
        "content": "<p>al3xfischer closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684\">issue #3684</a>:</p>\n<blockquote>\n<p>Hey @all!</p>\n<p>I want to instantiate a module that has multiple import.<br>\nMy gotcha is that I'm only interested in one function of the module that does not need any of the imports.</p>\n<p>Is there a way to instantiate the module but ignore the fact that I'm not providing the imports?</p>\n<p>I used the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"s\">\"awam.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">,());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">say</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"s\">\"say\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"n\">length</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">say</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"n\">length</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But I get the error msg: <code>expected 3 import, found 0</code></p>\n<p>I also thought about the <code>Linker</code> but I was not able to find an API that might help.</p>\n<p>Thanks in advance!</p>\n</blockquote>",
        "id": 267784512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642020778
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684#issuecomment-1011442200\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684\">issue #3684</a>:</p>\n<blockquote>\n<p>As mentioned there's no way you can instantiate only some parts of a module, it's an all-or-nothing process. If your module only imports functions and you'd like to make them all \"dummy\" imports you can do so with something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">instantiate</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">imports</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ExternType</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"non-function import\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">unimplemented!</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">imports</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">imports</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Otherwise though you'll need to make sure that all imports are provided when instantiating a module, and when providing \"real\" imports it's recommended to use the <code>Linker</code> type.</p>\n<p>Also as a side node <code>@ALL</code> doesn't actually ping project members, it pings this user: <a href=\"https://github.com/ALL\">https://github.com/ALL</a></p>\n</blockquote>",
        "id": 267784532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642020791
    },
    {
        "content": "<p>al3xfischer <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684#issuecomment-1011444480\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3684\">issue #3684</a>:</p>\n<blockquote>\n<p>Thanks for the help.</p>\n<p>And also the side node!</p>\n</blockquote>",
        "id": 267784974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642020989
    }
]