[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1391#issuecomment-603360498\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1391#issuecomment-603360498\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1391\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1391\">Issue #1391</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>This issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>&lt;details&gt; &lt;summary&gt;Users Subscribed to \"wasmtime:api\"&lt;/summary&gt;</p>\n<ul>\n<li>@peterhuene</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" target=\"_blank\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a></p>\n</blockquote>",
        "id": 191639655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585068449
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1391#issuecomment-603454017\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1391#issuecomment-603454017\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1391\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1391\">Issue #1391</a>:</p>\n<blockquote>\n<p>Should it be possible to do this with this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">interposition</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">allow_shadowing</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">r#&quot;(module (func (export &quot;export&quot;) (result i32) (i32.const 7)))&quot;#</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"s\">&quot;red&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;green&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"s\">&quot;export&quot;</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">&quot;(module</span>\n<span class=\"s\">            (import &quot;</span><span class=\"n\">red</span><span class=\"s\">&quot; &quot;</span><span class=\"n\">green</span><span class=\"s\">&quot; (func (result i32)))</span>\n<span class=\"s\">            (func (export &quot;</span><span class=\"n\">export</span><span class=\"s\">&quot;) (result i32) (i32.mul (call 0) (i32.const 2)))</span>\n<span class=\"s\">        )&quot;</span><span class=\"err\">#</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"s\">&quot;export&quot;</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">func</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">get0</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">112</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>If so, can we add that as a test? If not, can you comment on what it would take to make this work?</p>\n</blockquote>",
        "id": 191659420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585077333
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1391#issuecomment-603457603\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1391#issuecomment-603457603\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1391\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1391\">Issue #1391</a>:</p>\n<blockquote>\n<p>@sunfishcode added the test, worked like a charm on the first try!</p>\n</blockquote>",
        "id": 191660365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585077806
    }
]