[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228#issuecomment-698594473\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228\">Issue #2228</a>:</p>\n<blockquote>\n<p>The default call call conv for aarch64 is systemv, not aapcs. There are some differences between the two in the float handling on at least arm32. For example <a href=\"https://github.com/rust-lang/rust/blob/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler/rustc_target/src/abi/call/arm.rs#L91\">https://github.com/rust-lang/rust/blob/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler/rustc_target/src/abi/call/arm.rs#L91</a>. I don't know if this is also the case on aarch64 and if so if this is one example.</p>\n</blockquote>",
        "id": 211191356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600982421
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228#issuecomment-698597042\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228\">Issue #2228</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 211191916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600982779
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228#issuecomment-698605150\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228\">Issue #2228</a>:</p>\n<blockquote>\n<p>AArch32 is a completely different case, in which there are many ABI variants indeed.</p>\n</blockquote>",
        "id": 211193478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600983843
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228#issuecomment-698606795\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228\">Issue #2228</a>:</p>\n<blockquote>\n<p>Thanks @akirilov-arm -- it seems you're right that we could save half of our stack space and memory traffic for FP/vec clobber-saves. This should be a straightforward change in the ABI code; I want to verify first that this won't break SpiderMonkey (I think not, as every register is caller-save, IIRC) then I'll create a PR.</p>\n</blockquote>",
        "id": 211193847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600984097
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228#issuecomment-698614870\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228\">Issue #2228</a>:</p>\n<blockquote>\n<p>@cfallin I might have misunderstood you, but let me rephrase: There are 2 issues - one on the caller and one on the callee side. You are talking about the latter, but I am more concerned about the former. Consider the test case in the PR - the compiler is stashing the vectors (and they are full, 128-bit vectors) before the call to <code>%g1</code> in <code>v8</code>, <code>v9</code>, and <code>v10</code>, respectively, which is not going to work in the general case, assuming AAPCS64 compliance.</p>\n<p>For comparison, <a href=\"https://godbolt.org/z/fWqeKo\">here</a> is what GCC and LLVM are doing in an equivalent situation.</p>\n</blockquote>",
        "id": 211195690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600985421
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228#issuecomment-699230000\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228\">Issue #2228</a>:</p>\n<blockquote>\n<p>Ah, right, this is a bigger issue with respect to callsites; I had missed that half of it, sorry. So because we don't reason about half-clobbers currently (or overlapping registers), we need to treat all vector registers as clobbers on the caller side. I'll create a patch for this first thing Monday.</p>\n</blockquote>",
        "id": 211330917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601078630
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228#issuecomment-700356935\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228\">Issue #2228</a>:</p>\n<blockquote>\n<p>So on further consideration (and after doing the one-line patch suggested and studying its effect), the solution is actually more complex than I had suggested above:</p>\n<ul>\n<li>We need to consider the \"half caller-saves\" as caller-saves when we generate calls, or else we incorrectly use registers that will be clobbered, as you say.</li>\n<li>At the same time, we need to consider the \"half caller-saves\" as callee-saves when we generate prologues and epilogues, because if we modify the low half we really do need to save them per the ABI.</li>\n</ul>\n<p>The problem is how these interact: any function call at all now forces a bunch of clobber saves/restores in the caller's prologue and epilogue, because the half-clobbers from the call become full-clobbers (due to the imprecision of not reasoning about half-registers).</p>\n<p>In essence, we need a way to \"pass through\" the half-clobbers from callsite to prologue/epilogue, as long as callee and caller have the same ABI; only true clobbers from the rest of the function body should alter the prologue/epilogue.</p>\n<p>I can think of a few hacks, e.g. add the full-clobbers at callsites (as defs) to avoid regalloc using the registers, but compute our own clobber-set by scanning over every instruction except callsites; but this feels very error-prone and fragile compared to simply doing the right thing and reasoning through overlapping registers.</p>\n<p>@julian-seward1, thoughts on this re: regalloc and how difficult it would be to support half-defs / half-clobbers?</p>\n</blockquote>",
        "id": 211568722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601340051
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228#issuecomment-701053523\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228\">Issue #2228</a>:</p>\n<blockquote>\n<p>@cfallin I realized that I should expand my changes and add test cases with <code>f32</code> and <code>f64</code> values, so do not merge anything, please.</p>\n<blockquote>\n<p>In essence, we need a way to \"pass through\" the half-clobbers from callsite to prologue/epilogue, as long as callee and caller have the same ABI...</p>\n</blockquote>\n<p>Do you mean that the caller lowering should pass somehow the clobber information to the callee lowering? I thought that lowering passes for different functions were more or less independent, and indeed happened in different worker threads...</p>\n<p>Unfortunately I can't say anything the rest of your comments because I am missing some information - in particular, your quick fix and its effects (expanding the test cases should help with the latter).</p>\n</blockquote>",
        "id": 211699547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601423543
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228#issuecomment-701055474\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2228\">Issue #2228</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do you mean that the caller lowering should pass somehow the clobber information to the callee lowering? I thought that lowering passes for different functions were more or less independent, and indeed happened in different worker threads...</p>\n</blockquote>\n<p>No, what I mean is more conceptual: if the callee clobbers some set of registers <code>C</code>, then by calling it, the caller clobbers at least <code>C</code> as well (that's what I meant by \"pass through\"; it's something that intrinsically happens, not something we are doing; sorry, it was unclear). So if the caller and callee have the same ABI, then I think we can effectively hack around this limitation by:</p>\n<ul>\n<li>\n<p>Adopting conservative definitions of caller- and callee-save registers at callsite generation and prologue generation respectively, so the half-and-half vector registers in question are <em>both</em> caller- and callee-save, BUT</p>\n</li>\n<li>\n<p>Ignoring the call instructions' defs/clobbers when computing the saved-clobbers list for prologue generation, because (if same ABI) anything it clobbers, we are also allowed to clobber without saving.</p>\n</li>\n</ul>\n<p>So this will require a small change to <code>regalloc.rs</code>, namely a single bit per instruction to indicate \"exclude mods/defs from clobbers\". @julian-seward1 and @bnjbvr, thoughts on this?</p>\n</blockquote>",
        "id": 211700042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601423906
    }
]