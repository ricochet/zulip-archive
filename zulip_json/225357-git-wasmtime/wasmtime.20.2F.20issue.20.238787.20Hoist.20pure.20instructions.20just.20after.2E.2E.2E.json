[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8787\">issue #8787</a>:</p>\n<blockquote>\n<p>When a pure instruction is the <em>only</em> use of the result of a side-effectful instruction, we should hoist the pure instruction to just after the side-effectful instruction.</p>\n<p>For example, given:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n\n<span class=\"n\">block42</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"n\">v123</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v36</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n\n<span class=\"n\">block53</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"n\">v199</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v123</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>We should hoist the <code>uextend</code> to just after the <code>load</code> and ensure that the two instructions are in the same block:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n\n<span class=\"n\">block42</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"n\">v123</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v36</span>\n<span class=\"w\">  </span><span class=\"n\">v199</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v123</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>This will ensure that when we decompose a Wasm instruction into smaller RISC-y bits, we can put them back together during instruction selection. If they are <em>not</em> in the same block, potentially because of the way that e-graph elaboration delays computing pure values until they are demanded, then we do not consider the <code>load</code> to be sinkable into the <code>uextend</code>, and we won't be able to put them back together anymore.</p>\n<p>cc #8785 and #6154 </p>\n</blockquote>",
        "id": 444337806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718228889
    }
]