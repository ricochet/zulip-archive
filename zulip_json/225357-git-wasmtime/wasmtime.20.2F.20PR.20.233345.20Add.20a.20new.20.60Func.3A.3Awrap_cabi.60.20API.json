[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3345\">PR #3345</a> from <code>add-c-api-func-wrap</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit adds a new API to the <code>wasmtime::Func</code> type for wrapping a<br>\nC-ABI function with a well-defined signature derived from a wasm type<br>\nsignature. The purpose of this API is to add the-most-optimized-we-can<br>\npath for using the C API and having wasm call host functions. Previously<br>\nwhen wasm called a host function it would perform these steps:</p>\n<ol>\n<li>\n<p>Using a trampoline, place all arguments into a <code>u128*</code> array on the<br>\n   stack.</p>\n</li>\n<li>\n<p>Call <code>Func::invoke</code> which uses the type of the function (dynamically)<br>\n   to read values from this <code>u128*</code>.</p>\n</li>\n<li>\n<p>Values are placed within a <code>Vec&lt;Val&gt;</code> after being read.</p>\n</li>\n<li>\n<p>The C API receives <code>&amp;[Val]</code> and translates this to<br>\n<code>&amp;[wasmtime_val_t]</code>, iterating over each value and copying its<br>\n   contents into a new vector.</p>\n</li>\n<li>\n<p>Then the host function is actually called.</p>\n</li>\n<li>The above argument-shuffling steps are all performed in reverse for<br>\n   the results, shipping everything through <code>wasmtime_val_t</code> and <code>Val</code>.</li>\n</ol>\n<p>PRs such as #3319 and related attempts have made this sequence faster,<br>\nbut the numbers on #3319 show that even after we get all the allocation<br>\nand such bits out of the way we're still spending quite a lot of time<br>\nshuffling arguments back-and-forth relative to the <code>Func::wrap</code> API that<br>\nRust can use.</p>\n<p>This commit fixes the issue by eliminating all steps except 1/5 above.<br>\nAlthough we still place all arguments on the stack and read them out<br>\nagain to call the C-defined function with it's much faster than pushing<br>\nthis all through the <code>Val</code> and <code>wasmtime_val_t</code> machinery. This overall<br>\ngets the cost of a wasm-&gt;host call basically on-par with <code>Func::wrap</code>,<br>\nalthough it's still not as optimized. Benchmarking the overhead of<br>\nwasm-&gt;host calls, where <code>i64</code> returns one i64 value and <code>many</code> takes 5<br>\n<code>i32</code> parameters and returns one <code>i64</code> value, the numbers I get are:</p>\n<table>\n<thead>\n<tr>\n<th>Import</th>\n<th>Rust</th>\n<th>C before</th>\n<th>C after</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>i64</code></td>\n<td>1ns</td>\n<td>40ns</td>\n<td>7ns</td>\n</tr>\n<tr>\n<td><code>many</code></td>\n<td>1ns</td>\n<td>91ns</td>\n<td>10ns</td>\n</tr>\n</tbody>\n</table>\n<p>This commit is a clear win over the previous implementation, but it's<br>\neven still somewhat far away from Rust. That being said I think I'm out<br>\nof ideas of how to make this better. Without open-coding much larger<br>\nportions of <code>wasmtime</code> I'm not sure how much better we can get here. The<br>\ntime in C after this commit is almost entirely spent in trampolines<br>\nstoring the arguments to the stack and loading them later, and at this<br>\npoint I'm not sure how much more optimized we can get than that since<br>\nRust needs to enter the picture here somehow to handle the Wasmtime<br>\nfiddly-bits of calling back into C. I'm hopeful, though, that this is<br>\nsuch a large improvement from before that the question of optimizing<br>\nthis further in C is best left for another day.</p>\n<p>The new <code>Func::wrap_cabi</code> method is unlikely to ever get used from Rust,<br>\nbut a <code>wasmtime_func_wrap</code> API was added to the C API to mirror<br>\n<code>Func::wrap</code> where if the host function pointer has a specific ABI this<br>\nfunction can be called instead of <code>wasmtime_func_new</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 253133711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631556324
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3345\">PR #3345</a> from <code>add-c-api-func-wrap</code> to <code>main</code>.</p>",
        "id": 253135110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631556954
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3345\">PR #3345</a> from <code>add-c-api-func-wrap</code> to <code>main</code>.</p>",
        "id": 253150297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631563107
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3345\">PR #3345</a> from <code>add-c-api-func-wrap</code> to <code>main</code>.</p>",
        "id": 253152304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631563844
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3345\">PR #3345</a>.</p>",
        "id": 253317170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631650696
    }
]