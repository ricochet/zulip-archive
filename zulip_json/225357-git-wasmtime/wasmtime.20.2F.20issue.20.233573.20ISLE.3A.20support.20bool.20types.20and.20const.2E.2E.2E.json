[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573\">issue #3573</a>:</p>\n<blockquote>\n<p>ISLE's prototype compiler was built with the simplifying assumption that all constants are integers. \"Symbolic constants\" (imported opaque values) like <code>$MYVALUE</code> were added later. It's possible to define <code>bool</code> as a primitive type, but the syntax for bool constants, <code>#t</code> and <code>#f</code>, results in generated code that uses integer values <code>1</code> and <code>0</code> because... everything is (was) an integer. This is clearly suboptimal! In #3572 @alexcrichton used the clever workaround of <code>$false</code>, leveraging the support for arbitrary passthrough of constant names to actually get a <code>false</code> in the code.</p>\n<p>We should (i) add a <code>ConstBool</code> alongside <code>ConstInt</code> in the IR (<code>PatternInst</code> and <code>ExprInst</code>), and (ii) codegen these properly as Rust bool types. We might also consider at some point making our \"primitive\" type hierarchy a bit richer and distinguishing ints and bools, but that's lower-priority.</p>\n</blockquote>",
        "id": 263190329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638298174
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573\">issue #3573</a>:</p>\n<blockquote>\n<p>ISLE's prototype compiler was built with the simplifying assumption that all constants are integers. \"Symbolic constants\" (imported opaque values) like <code>$MYVALUE</code> were added later. It's possible to define <code>bool</code> as a primitive type, but the syntax for bool constants, <code>#t</code> and <code>#f</code>, results in generated code that uses integer values <code>1</code> and <code>0</code> because... everything is (was) an integer. This is clearly suboptimal! In #3572 @alexcrichton used the clever workaround of <code>$false</code>, leveraging the support for arbitrary passthrough of constant names to actually get a <code>false</code> in the code.</p>\n<p>We should (i) add a <code>ConstBool</code> alongside <code>ConstInt</code> in the IR (<code>PatternInst</code> and <code>ExprInst</code>), and (ii) codegen these properly as Rust bool types. We might also consider at some point making our \"primitive\" type hierarchy a bit richer and distinguishing ints and bools, but that's lower-priority.</p>\n</blockquote>",
        "id": 263190330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638298174
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573#issuecomment-982919477\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573\">issue #3573</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 263190350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638298186
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573#issuecomment-983000804\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573\">issue #3573</a>:</p>\n<blockquote>\n<p>FWIW, we use <code>$true</code> and <code>$false</code> elsewhere, eg:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0580c84405cb5808518b187d1851dc17e7538108/cranelift/codegen/src/isa/x64/lower.isle#L24-L30\">https://github.com/bytecodealliance/wasmtime/blob/0580c84405cb5808518b187d1851dc17e7538108/cranelift/codegen/src/isa/x64/lower.isle#L24-L30</a></p>\n<p>Not convinced that <code>#t</code> and <code>#f</code> is really that much of an improvement.</p>\n</blockquote>",
        "id": 263204999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638304688
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573#issuecomment-983024385\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573\">issue #3573</a>:</p>\n<blockquote>\n<p>Yep, we'd want to clean up said uses all at the same time.</p>\n<p>I'm not as concerned about syntax; we could even just accept tokens <code>true</code> and <code>false</code>; my concern is more that <code>$true</code> and <code>$false</code> are abusing a feature meant for other things (externally-defined constants) and if we have bool values, we should represent them as such in the IR. Getting the type right there would also allow us to use them in the future in other DSL-compiler optimizations.</p>\n</blockquote>",
        "id": 263209433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638306723
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573\">issue #3573</a>:</p>\n<blockquote>\n<p>ISLE's prototype compiler was built with the simplifying assumption that all constants are integers. \"Symbolic constants\" (imported opaque values) like <code>$MYVALUE</code> were added later. It's possible to define <code>bool</code> as a primitive type, but the syntax for bool constants, <code>#t</code> and <code>#f</code>, results in generated code that uses integer values <code>1</code> and <code>0</code> because... everything is (was) an integer. This is clearly suboptimal! In #3572 @alexcrichton used the clever workaround of <code>$false</code>, leveraging the support for arbitrary passthrough of constant names to actually get a <code>false</code> in the code.</p>\n<p>We should (i) add a <code>ConstBool</code> alongside <code>ConstInt</code> in the IR (<code>PatternInst</code> and <code>ExprInst</code>), and (ii) codegen these properly as Rust bool types. We might also consider at some point making our \"primitive\" type hierarchy a bit richer and distinguishing ints and bools, but that's lower-priority.</p>\n</blockquote>",
        "id": 281212118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651694564
    }
]