[
    {
        "content": "<p>pchickey labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>PR #5065 got rid of a trait that \"splatted\" a type-level tuple of arguments into individual arguments to a closure. @alexcrichton and I feel this is a design choice which isn't worth its weight, and advocate for getting rid of the equivalent functionality for core wasm <code>wasmtime::Func</code>s.</p>\n<h4>Benefit</h4>\n<p>The current <code>Func::wrap</code> signature is hard to read, and the set of functions <code>Func::wrap{n}_async</code> is just unsightly. This should bring us down to a much simpler <code>Func::wrap</code> and a single <code>Func::wrap_async</code> constructor.</p>\n<p>Unfortunately, the benefits are tempered by this being a sorta annoying breaking change for downstream users. It won't break anyones use case, but all downstream users of <code>Func::wrap</code> will have to make some small syntactic adjustments to their code for it to build.</p>\n<h4>Implementation</h4>\n<p>You'll need to make the changes in <code>wasmtime</code>, then chase down the consequences in <code>wiggle</code>, the test suite, and any other places in the repository that invoke <code>Func::wrap</code>.</p>\n<p>We haven't dug deep into the exact way this will be implemented, but it should end up looking like #5065 if you squint. If that approach doesn't look like it will work, lets discuss why here and figure out an alternative.</p>\n</blockquote>",
        "id": 304577686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666048379
    },
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>PR #5065 got rid of a trait that \"splatted\" a type-level tuple of arguments into individual arguments to a closure. @alexcrichton and I feel this is a design choice which isn't worth its weight, and advocate for getting rid of the equivalent functionality for core wasm <code>wasmtime::Func</code>s.</p>\n<h4>Benefit</h4>\n<p>The current <code>Func::wrap</code> signature is hard to read, and the set of functions <code>Func::wrap{n}_async</code> is just unsightly. This should bring us down to a much simpler <code>Func::wrap</code> and a single <code>Func::wrap_async</code> constructor.</p>\n<p>Unfortunately, the benefits are tempered by this being a sorta annoying breaking change for downstream users. It won't break anyones use case, but all downstream users of <code>Func::wrap</code> will have to make some small syntactic adjustments to their code for it to build.</p>\n<h4>Implementation</h4>\n<p>You'll need to make the changes in <code>wasmtime</code>, then chase down the consequences in <code>wiggle</code>, the test suite, and any other places in the repository that invoke <code>Func::wrap</code>.</p>\n<p>We haven't dug deep into the exact way this will be implemented, but it should end up looking like #5065 if you squint. If that approach doesn't look like it will work, lets discuss why here and figure out an alternative.</p>\n</blockquote>",
        "id": 304577687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666048379
    },
    {
        "content": "<p>jwcesign <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-1318528502\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>Can I take this?</p>\n</blockquote>",
        "id": 310594615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668686212
    },
    {
        "content": "<p>jwcesign edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-1318528502\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>Can I take this?<br>\n/assign</p>\n</blockquote>",
        "id": 310594632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668686221
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-1319005443\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>Yes, please assign me as the reviewer for any PRs.</p>\n</blockquote>",
        "id": 310666329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668707978
    },
    {
        "content": "<p>pchickey assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a> (assigned to jwcesign):</p>\n<blockquote>\n<h4>Feature</h4>\n<p>PR #5065 got rid of a trait that \"splatted\" a type-level tuple of arguments into individual arguments to a closure. @alexcrichton and I feel this is a design choice which isn't worth its weight, and advocate for getting rid of the equivalent functionality for core wasm <code>wasmtime::Func</code>s.</p>\n<h4>Benefit</h4>\n<p>The current <code>Func::wrap</code> signature is hard to read, and the set of functions <code>Func::wrap{n}_async</code> is just unsightly. This should bring us down to a much simpler <code>Func::wrap</code> and a single <code>Func::wrap_async</code> constructor.</p>\n<p>Unfortunately, the benefits are tempered by this being a sorta annoying breaking change for downstream users. It won't break anyones use case, but all downstream users of <code>Func::wrap</code> will have to make some small syntactic adjustments to their code for it to build.</p>\n<h4>Implementation</h4>\n<p>You'll need to make the changes in <code>wasmtime</code>, then chase down the consequences in <code>wiggle</code>, the test suite, and any other places in the repository that invoke <code>Func::wrap</code>.</p>\n<p>We haven't dug deep into the exact way this will be implemented, but it should end up looking like #5065 if you squint. If that approach doesn't look like it will work, lets discuss why here and figure out an alternative.</p>\n</blockquote>",
        "id": 310666364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668707991
    },
    {
        "content": "<p>Weijun-H <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-1519113874\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>It appears that nobody is currently working on this task. Would it be possible for me to pick this up?</p>\n</blockquote>",
        "id": 352099467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682270180
    },
    {
        "content": "<p>Weijun-H deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-1519113874\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>It appears that nobody is currently working on this task. Would it be possible for me to pick this up?</p>\n</blockquote>",
        "id": 352105288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682272974
    },
    {
        "content": "<p>ssnover <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2127952549\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>@pchickey Is this issue still valid or is the API of <code>wasmtime</code> intended to be more static at this point? I have something working in the <code>wasmtime</code> crate, but it causes a lot of breaking API changes that look like this:</p>\n<p>Before:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"spectest\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"print_f64_f64\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">f1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">suppress</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}: f64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}: f64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>After: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"spectest\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"print_f64_f64\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">suppress</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}: f64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}: f64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Before I go through and modify examples, tests, and implementations of proc-macros like <code>from_witx</code>, I wanted to check that this refactor to the arguments is still desired.</p>\n</blockquote>",
        "id": 440392311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716495569
    },
    {
        "content": "<p>ssnover edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2127952549\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>@pchickey Is this issue still valid or is the API of <code>wasmtime</code> intended to be more static at this point? I have something working in the <code>wasmtime</code> crate, but it causes a lot of breaking API changes that look like this:</p>\n<p>Before:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"spectest\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"print_f64_f64\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">f1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">suppress</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}: f64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}: f64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>After: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"spectest\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"print_f64_f64\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">suppress</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}: f64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}: f64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Before I go through and modify examples, tests, and implementations of proc-macros like <code>from_witx</code>, I wanted to check that this refactor to the arguments is still desired.</p>\n</blockquote>",
        "id": 440393497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716496040
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2128499410\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>Honestly, I’m glad you asked because I’m less convinced than I was 18 months ago when I filed the issue. Getting rid of all of the trait stuff that lets the faux-variadic functions work is a nice cleanup for wasmtime, but it seems like a needless breaking change for our users, who haven’t complained about it ever afaik, and would be rightfully annoyed if it changed with no benefit to them. I’m glad we changed how it worked in wasmtime::component before it was stable enough to use, but I now feel like changing one of the oldest parts of the wasmtime crates API ought to have a bigger payoff than this does.</p>\n<p>@alexcrichton what do you think?</p>\n</blockquote>",
        "id": 440436993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716524920
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2129899227\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>I think that's a good point yeah that it's probably not worth breaking lots of code today. That being said there might still be something to be done here perhaps. Depending on how all the trait impls and such work out I think this would still be a great internal refactoring to have. For example implementing a trait-per-tuple and have the \"meat\" be a simple <code>F, P, R</code> generics type parameters would avoid having tons of code in macros as-is today.</p>\n<p>Ideally, if the traits work out in terms of coherence and overlapping, it'd be great to support both today's version of <code>Func::wrap</code> in addition to a \"tupled approach\", basically enabling both to work. I think it would be great to remove all the <code>func_wrapN_async</code> methods in favor of a single <code>wrap_async</code>. That'd break consumers calling <code>wrapN_async</code> but I think that's much rarer (outside of bindings generators) than the blocking versions.</p>\n</blockquote>",
        "id": 440537204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716566823
    },
    {
        "content": "<p>ssnover <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2130070610\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>Sounds good. I can back out some of the changes very easily in the public API. I'll go through some of the existing examples and tests and swap some of the calls to the new method so there is coverage on both. Should code generation in <code>from_witx</code> migrate to the new method or remain on the existing one?</p>\n<p>For the new method on on <code>Func</code> do you all have any preferences? Is <code>Func::wrap_tupled</code> too on the nose?</p>\n</blockquote>",
        "id": 440552084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716572744
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2130432031\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>I think it's reasonable to change <code>from_witx</code> yeah, but could the tuple-based impls also go through <code>Func::wrap</code>? That's got some weird trait bounds and everything is pretty carefully aligned there so I'm not sure if it'd work, but I'm not sure it's worth adding a new <code>*_tupled</code> method per se</p>\n</blockquote>",
        "id": 440584356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716588860
    },
    {
        "content": "<p>ssnover <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2130497350\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>Yeah, based on my tinkering that's totally possible; I think that means there won't be any changes required for sync APIs generated by <code>from_witx</code>, just async in order to do away with the <code>*N_async</code> methods.</p>\n</blockquote>",
        "id": 440589004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716592004
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2131624691\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>Sounds great to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, thanks again for helping to push on this!</p>\n</blockquote>",
        "id": 440669957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716678084
    },
    {
        "content": "<p>ssnover <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2142442078\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>I've been doing more investigation here and I can't figure out a way to make the two styles of parameters work together nicely. I either get down a path that requires a lot of code duplication or I run into conflicting trait implementations in <code>IntoFunc</code>.</p>\n</blockquote>",
        "id": 441727159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717167264
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2142575358\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>Want to open a PR with your work-in-progress or want to share a link here? Might be able to try to help sort this out and/or confirm it may not be possible</p>\n</blockquote>",
        "id": 441745933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717171840
    },
    {
        "content": "<p>ssnover <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2143658975\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>I actually managed to get something that seemed reasonable after some time away from the code, PR above ^</p>\n</blockquote>",
        "id": 441993384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717292216
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>PR #5065 got rid of a trait that \"splatted\" a type-level tuple of arguments into individual arguments to a closure. @alexcrichton and I feel this is a design choice which isn't worth its weight, and advocate for getting rid of the equivalent functionality for core wasm <code>wasmtime::Func</code>s.</p>\n<h4>Benefit</h4>\n<p>The current <code>Func::wrap</code> signature is hard to read, and the set of functions <code>Func::wrap{n}_async</code> is just unsightly. This should bring us down to a much simpler <code>Func::wrap</code> and a single <code>Func::wrap_async</code> constructor.</p>\n<p>Unfortunately, the benefits are tempered by this being a sorta annoying breaking change for downstream users. It won't break anyones use case, but all downstream users of <code>Func::wrap</code> will have to make some small syntactic adjustments to their code for it to build.</p>\n<h4>Implementation</h4>\n<p>You'll need to make the changes in <code>wasmtime</code>, then chase down the consequences in <code>wiggle</code>, the test suite, and any other places in the repository that invoke <code>Func::wrap</code>.</p>\n<p>We haven't dug deep into the exact way this will be implemented, but it should end up looking like #5065 if you squint. If that approach doesn't look like it will work, lets discuss why here and figure out an alternative.</p>\n</blockquote>",
        "id": 442356060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717444648
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066#issuecomment-2146009423\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5066\">issue #5066</a>:</p>\n<blockquote>\n<p>I believe that the work in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8732\">https://github.com/bytecodealliance/wasmtime/pull/8732</a> effectively completes this, so I'm going to close it. Thanks again @ssnover!</p>\n</blockquote>",
        "id": 442356066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717444649
    }
]