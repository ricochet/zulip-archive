[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1184542862\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>Thanks for this! I suspect many others on Wasmtime, like me, are pretty unfamiliar with <code>cargo vet</code>, so would you be up to adding a small <code>README.md</code> to the supply-chain directory describing the tool a little? (or otherwise mostly just leaving a link to the preexisting book).</p>\n<p>Additionally, what's the general \"next steps\" here? Should we start performing reviews of dependencies and updating the <code>exemptions</code> list to something that's not exempted? Should we wait for imports-from-other-projects to work before we start reviewing other things? For now if we add a dependency should we say it's ok to just add an exemption like has been done already?</p>\n<p>Currently some parts of our dependency tree are quite large and something we don't audit much. For example the off-by-default <code>wasi-crypto</code> feature pulls in a pretty large family of crates which are only used for that one feature and isn't something we necessarily want to sink too much time into auditing and reviewing at this point since it's an experimental feature anyway. Is there a way to have a separate configuration file with \"here's everything that <code>wasi-crypto</code> might need and we'll deal with this later\" to make it clear to us which are the most important crates to review?</p>\n</blockquote>",
        "id": 289601943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657810189
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1184722047\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>If I'm reading <a href=\"https://mozilla.github.io/cargo-vet/config.html#the-policy-table\">the cargo-vet documentation</a> correctly, it looks like we should be able to say something like this in <code>supply-chain/config.toml</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[policy.wasi-crypto]</span><span class=\"w\"></span>\n<span class=\"n\">criteria</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 289623929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657820143
    },
    {
        "content": "<p>bholley <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1184909541\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for this! I suspect many others on Wasmtime, like me, are pretty unfamiliar with <code>cargo vet</code>, so would you be up to adding a small <code>README.md</code> to the supply-chain directory describing the tool a little? (or otherwise mostly just leaving a link to the preexisting book).</p>\n</blockquote>\n<p>Sure, happy to do that.</p>\n<p>In case it's helpful context, I'll also link here to the <a href=\"https://groups.google.com/a/mozilla.org/g/dev-platform/c/j6cKDRP7jWY/m/2q2VgCGzAAAJ\">announcement</a> we made to Firefox engineers when we deployed this on mozilla-central. </p>\n<blockquote>\n<p>Additionally, what's the general \"next steps\" here? </p>\n</blockquote>\n<p>As a very first step, the wasmtime team should also determine a set of people who can approve audit submissions, similar to what Mozilla did <a href=\"https://groups.google.com/a/mozilla.org/g/governance/c/wMWBqkCnR34\">here</a>. I think this should be enforceable on github with a CODEOWNERS file.</p>\n<p>Once the group has been established, I might recommend we set up a call with the counterparts at Mozilla so that we can ensure we're aligned enough on expectations that we're comfortable sharing audits bidirectionally.</p>\n<blockquote>\n<p>Should we start performing reviews of dependencies and updating the <code>exemptions</code> list to something that's not exempted? Should we wait for imports-from-other-projects to work before we start reviewing other things? For now if we add a dependency should we say it's ok to just add an exemption like has been done already?</p>\n</blockquote>\n<p>There are various ways to approach this. The approach we've adopted at Mozilla, which I'd certainly recommend here, is to generally aim for \"no new unaudited code\" — so if somebody adds a new dependency, they have to audit it (absent some compelling extenuating circumstance). And if they update an existing dependency, they have to either audit the delta (even if the base version of the delta is an exemption entry) or audit the whole package and remove the corresponding exemption entry. In parallel, we're aiming to slowly burn down our exemptions backlog with the help of <code>cargo vet suggest</code>.</p>\n<blockquote>\n<p>Currently some parts of our dependency tree are quite large and something we don't audit much. For example the off-by-default <code>wasi-crypto</code> feature pulls in a pretty large family of crates which are only used for that one feature and isn't something we necessarily want to sink too much time into auditing and reviewing at this point since it's an experimental feature anyway. Is there a way to have a separate configuration file with \"here's everything that <code>wasi-crypto</code> might need and we'll deal with this later\" to make it clear to us which are the most important crates to review?</p>\n</blockquote>\n<p>As @jameysharp noted, cargo-vet allows you to configure different policies for difference subtrees in your build graph. So you can entirely exempt the wasi-crypto stuff if you want. Alternatively, for stuff that's not shipped but might reasonably be executed by a developer, you might want to require just <code>[safe-to-run](https://mozilla.github.io/cargo-vet/built-in-criteria.html#safe-to-run)</code>. This is the default for <code>dev-dependencies</code>, for example, since they're not shipped to users, but you also don't want a top-level <code>cargo test</code> to install malware on a developer's workstation.</p>\n</blockquote>",
        "id": 289651721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657833889
    },
    {
        "content": "<p>bholley edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1184909541\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for this! I suspect many others on Wasmtime, like me, are pretty unfamiliar with <code>cargo vet</code>, so would you be up to adding a small <code>README.md</code> to the supply-chain directory describing the tool a little? (or otherwise mostly just leaving a link to the preexisting book).</p>\n</blockquote>\n<p>Sure, happy to do that.</p>\n<p>In case it's helpful context, I'll also link here to the <a href=\"https://groups.google.com/a/mozilla.org/g/dev-platform/c/j6cKDRP7jWY/m/2q2VgCGzAAAJ\">announcement</a> we made to Firefox engineers when we deployed this on mozilla-central. </p>\n<blockquote>\n<p>Additionally, what's the general \"next steps\" here? </p>\n</blockquote>\n<p>As a very first step, the wasmtime team should also determine a set of people who can approve audit submissions, similar to what Mozilla did <a href=\"https://groups.google.com/a/mozilla.org/g/governance/c/wMWBqkCnR34\">here</a>. I think this should be enforceable on github with a CODEOWNERS file.</p>\n<p>Once the group has been established, I might recommend we set up a call with the counterparts at Mozilla so that we can ensure we're aligned enough on expectations that we're comfortable sharing audits bidirectionally.</p>\n<blockquote>\n<p>Should we start performing reviews of dependencies and updating the <code>exemptions</code> list to something that's not exempted? Should we wait for imports-from-other-projects to work before we start reviewing other things? For now if we add a dependency should we say it's ok to just add an exemption like has been done already?</p>\n</blockquote>\n<p>There are various ways to approach this. The approach we've adopted at Mozilla, which I'd certainly recommend here, is to generally aim for \"no new unaudited code\" — so if somebody adds a new dependency, they have to audit it (absent some compelling extenuating circumstance). And if they update an existing dependency, they have to either audit the delta (even if the base version of the delta is an exemption entry) or audit the whole package and remove the corresponding exemption entry. In parallel, we're aiming to slowly burn down our exemptions backlog with the help of <code>cargo vet suggest</code>.</p>\n<blockquote>\n<p>Currently some parts of our dependency tree are quite large and something we don't audit much. For example the off-by-default <code>wasi-crypto</code> feature pulls in a pretty large family of crates which are only used for that one feature and isn't something we necessarily want to sink too much time into auditing and reviewing at this point since it's an experimental feature anyway. Is there a way to have a separate configuration file with \"here's everything that <code>wasi-crypto</code> might need and we'll deal with this later\" to make it clear to us which are the most important crates to review?</p>\n</blockquote>\n<p>As @jameysharp noted, cargo-vet allows you to configure different policies for difference subtrees in your build graph. So you can entirely exempt the wasi-crypto stuff if you want. Alternatively, for stuff that's not shipped but might reasonably be executed by a developer, you might want to require just <a href=\"https://mozilla.github.io/cargo-vet/built-in-criteria.html#safe-to-run\">safe-to-run</a>. This is the default for <code>dev-dependencies</code>, for example, since they're not shipped to users, but you also don't want a top-level <code>cargo test</code> to install malware on a developer's workstation.</p>\n</blockquote>",
        "id": 289651870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657833964
    },
    {
        "content": "<p>bholley edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1184909541\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for this! I suspect many others on Wasmtime, like me, are pretty unfamiliar with <code>cargo vet</code>, so would you be up to adding a small <code>README.md</code> to the supply-chain directory describing the tool a little? (or otherwise mostly just leaving a link to the preexisting book).</p>\n</blockquote>\n<p>Sure, happy to do that.</p>\n<p>In case it's helpful context, I'll also link here to the <a href=\"https://groups.google.com/a/mozilla.org/g/dev-platform/c/j6cKDRP7jWY/m/2q2VgCGzAAAJ\">announcement</a> we made to Firefox engineers when we deployed this on mozilla-central. </p>\n<blockquote>\n<p>Additionally, what's the general \"next steps\" here? </p>\n</blockquote>\n<p>As a very first step, the wasmtime team should also determine a set of people who can approve audit submissions, similar to what Mozilla did <a href=\"https://groups.google.com/a/mozilla.org/g/governance/c/wMWBqkCnR34\">here</a>. I think this should be enforceable on github with a CODEOWNERS file.</p>\n<p>Once the group has been established, I might recommend we set up a call with the counterparts at Mozilla so that we can ensure we're aligned enough on expectations that we're comfortable sharing audits bidirectionally.</p>\n<blockquote>\n<p>Should we start performing reviews of dependencies and updating the <code>exemptions</code> list to something that's not exempted? Should we wait for imports-from-other-projects to work before we start reviewing other things? For now if we add a dependency should we say it's ok to just add an exemption like has been done already?</p>\n</blockquote>\n<p>There are various ways to approach this. The approach we've adopted at Mozilla, which I'd certainly recommend here, is to generally aim for \"no new unaudited code\" — so if somebody adds a new dependency, they have to audit it (absent some compelling extenuating circumstance). And if they update an existing dependency, they have to either audit the delta (even if the base version of the delta is an exemption entry) or audit the whole package and remove the corresponding exemption entry. In parallel, we're aiming to slowly burn down our exemptions backlog with the help of <code>cargo vet suggest</code>.</p>\n<blockquote>\n<p>Currently some parts of our dependency tree are quite large and something we don't audit much. For example the off-by-default <code>wasi-crypto</code> feature pulls in a pretty large family of crates which are only used for that one feature and isn't something we necessarily want to sink too much time into auditing and reviewing at this point since it's an experimental feature anyway. Is there a way to have a separate configuration file with \"here's everything that <code>wasi-crypto</code> might need and we'll deal with this later\" to make it clear to us which are the most important crates to review?</p>\n</blockquote>\n<p>As @jameysharp noted, cargo-vet allows you to configure different policies for difference subtrees in your build graph. So you can entirely exempt the wasi-crypto stuff if you want by requiring <code>[]</code>. Alternatively, for stuff that's not shipped but might reasonably be executed by a developer, you might want to require just <a href=\"https://mozilla.github.io/cargo-vet/built-in-criteria.html#safe-to-run\">safe-to-run</a>. This is the default for <code>dev-dependencies</code>, for example, since they're not shipped to users, but you also don't want a top-level <code>cargo test</code> to install malware on a developer's workstation.</p>\n</blockquote>",
        "id": 289651911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657833988
    },
    {
        "content": "<p>bholley edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1184909541\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for this! I suspect many others on Wasmtime, like me, are pretty unfamiliar with <code>cargo vet</code>, so would you be up to adding a small <code>README.md</code> to the supply-chain directory describing the tool a little? (or otherwise mostly just leaving a link to the preexisting book).</p>\n</blockquote>\n<p>Sure, happy to do that.</p>\n<p>In case it's helpful context, I'll also link here to the <a href=\"https://groups.google.com/a/mozilla.org/g/dev-platform/c/j6cKDRP7jWY/m/2q2VgCGzAAAJ\">announcement</a> we made to Firefox engineers when we deployed this on mozilla-central. </p>\n<blockquote>\n<p>Additionally, what's the general \"next steps\" here? </p>\n</blockquote>\n<p>As a very first step, the wasmtime team should also determine a set of people who can approve audit submissions, similar to what Mozilla did <a href=\"https://groups.google.com/a/mozilla.org/g/governance/c/wMWBqkCnR34\">here</a>. I think this should be enforceable on github with a CODEOWNERS file.</p>\n<p>Once the group has been established, I might recommend we set up a call with the counterparts at Mozilla so that we can ensure we're aligned enough on expectations that we're comfortable sharing audits bidirectionally.</p>\n<blockquote>\n<p>Should we start performing reviews of dependencies and updating the <code>exemptions</code> list to something that's not exempted? Should we wait for imports-from-other-projects to work before we start reviewing other things? For now if we add a dependency should we say it's ok to just add an exemption like has been done already?</p>\n</blockquote>\n<p>There are various ways to approach this. The approach we've adopted at Mozilla, which I'd certainly recommend here, is to generally aim for \"no new unaudited code\" — so if somebody adds a new dependency, they have to audit it (absent some compelling extenuating circumstance). And if they update an existing dependency, they have to either audit the delta (even if the base version of the delta is an exemption entry) or audit the whole package and remove the corresponding exemption entry. In parallel, we're aiming to slowly burn down our exemptions backlog with the help of <code>cargo vet suggest</code>.</p>\n<blockquote>\n<p>Currently some parts of our dependency tree are quite large and something we don't audit much. For example the off-by-default <code>wasi-crypto</code> feature pulls in a pretty large family of crates which are only used for that one feature and isn't something we necessarily want to sink too much time into auditing and reviewing at this point since it's an experimental feature anyway. Is there a way to have a separate configuration file with \"here's everything that <code>wasi-crypto</code> might need and we'll deal with this later\" to make it clear to us which are the most important crates to review?</p>\n</blockquote>\n<p>As @jameysharp noted, cargo-vet allows you to configure different policies for difference subtrees in your build graph. So you can entirely exempt the wasi-crypto stuff if you want by requiring the empty list. Alternatively, for stuff that's not shipped but might reasonably be executed by a developer, you might want to require just <a href=\"https://mozilla.github.io/cargo-vet/built-in-criteria.html#safe-to-run\">safe-to-run</a>. This is the default for <code>dev-dependencies</code>, for example, since they're not shipped to users, but you also don't want a top-level <code>cargo test</code> to install malware on a developer's workstation.</p>\n</blockquote>",
        "id": 289651955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657834020
    },
    {
        "content": "<p>bholley edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1184909541\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for this! I suspect many others on Wasmtime, like me, are pretty unfamiliar with <code>cargo vet</code>, so would you be up to adding a small <code>README.md</code> to the supply-chain directory describing the tool a little? (or otherwise mostly just leaving a link to the preexisting book).</p>\n</blockquote>\n<p>Sure, happy to do that.</p>\n<p>In case it's helpful context, I'll also link here to the <a href=\"https://groups.google.com/a/mozilla.org/g/dev-platform/c/j6cKDRP7jWY/m/2q2VgCGzAAAJ\">announcement</a> we made to Firefox engineers when we deployed this on mozilla-central. </p>\n<blockquote>\n<p>Additionally, what's the general \"next steps\" here? </p>\n</blockquote>\n<p>As a very first step, the wasmtime team should also determine a set of people who can approve audit submissions, similar to what Mozilla did <a href=\"https://groups.google.com/a/mozilla.org/g/governance/c/wMWBqkCnR34\">here</a>. I think this should be enforceable on github with a CODEOWNERS file.</p>\n<p>Once the group has been established, I might recommend we set up a call with the counterparts at Mozilla so that we can ensure we're aligned enough on expectations that we're comfortable sharing audits bidirectionally.</p>\n<blockquote>\n<p>Should we start performing reviews of dependencies and updating the <code>exemptions</code> list to something that's not exempted? Should we wait for imports-from-other-projects to work before we start reviewing other things? For now if we add a dependency should we say it's ok to just add an exemption like has been done already?</p>\n</blockquote>\n<p>There are various ways to approach this. The approach we've adopted at Mozilla, which I'd certainly recommend here, is to generally aim for \"no new unaudited code\" — so if somebody adds a new dependency, they have to audit it (absent some compelling extenuating circumstance). And if they update an existing dependency, they have to either audit the delta (even if the base version of the delta is an exemption entry) or audit the whole package and remove the corresponding exemption entry. In parallel, we're aiming to slowly burn down our exemptions backlog with the help of <code>cargo vet suggest</code>.</p>\n<blockquote>\n<p>Currently some parts of our dependency tree are quite large and something we don't audit much. For example the off-by-default <code>wasi-crypto</code> feature pulls in a pretty large family of crates which are only used for that one feature and isn't something we necessarily want to sink too much time into auditing and reviewing at this point since it's an experimental feature anyway. Is there a way to have a separate configuration file with \"here's everything that <code>wasi-crypto</code> might need and we'll deal with this later\" to make it clear to us which are the most important crates to review?</p>\n</blockquote>\n<p>As @jameysharp noted, cargo-vet allows you to configure different policies for difference subtrees in your build graph. So you can entirely exempt the wasi-crypto stuff if you want by setting the required criteria to the empty list. Alternatively, for stuff that's not shipped but might reasonably be executed by a developer, you might want to require just <a href=\"https://mozilla.github.io/cargo-vet/built-in-criteria.html#safe-to-run\">safe-to-run</a>. This is the default for <code>dev-dependencies</code>, for example, since they're not shipped to users, but you also don't want a top-level <code>cargo test</code> to install malware on a developer's workstation.</p>\n</blockquote>",
        "id": 289651993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657834041
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1185817281\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>Ok that all sounds great! With a small README I'm happy to merge this and get the ball rolling. I'm looking forward to exploring this!</p>\n<p>Currently I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">vet</span><span class=\"w\"> </span><span class=\"n\">suggest</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">estimated</span><span class=\"w\"> </span><span class=\"n\">audit</span><span class=\"w\"> </span><span class=\"n\">backlog</span>: <span class=\"mi\">9591434</span><span class=\"w\"> </span><span class=\"n\">lines</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so oof we have quite the backlog!</p>\n</blockquote>",
        "id": 289768006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657911131
    },
    {
        "content": "<p>bholley <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1185944388\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok that all sounds great! With a small README I'm happy to merge this and get the ball rolling.</p>\n</blockquote>\n<p>Done!</p>\n<blockquote>\n<p>Currently I get:</p>\n<p><code>\n$ cargo vet suggest\n...\nestimated audit backlog: 9591434 lines\n</code></p>\n<p>so oof we have quite the backlog!</p>\n</blockquote>\n<p>Note that it's an uneven distribution. About a third of that is v8, for example, which I don't think anyone has any intention of auditing. <code>cargo vet suggest</code> shows the smallest audits first, since it's generally higher ROI to knock out audits for 20 small crates than one big one.</p>\n</blockquote>",
        "id": 289783663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657919315
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1186728973\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>At the risk of somewhat complicating things (sorry! getting through backlog now and just catching this), a suggestion: would you (@bholley) be willing to write a Bytecode Alliance RFC for this?</p>\n<p>I personally fully support the goals of <code>cargo-vet</code> and think this is a great thing; but I worry that introducing it like this all at once in an \"enforcing mode\" (i.e. with a CI job) without much in the way of project-specific guidance or policy or documentation may be a bit confusing for some contributors. I personally wouldn't know what to do if I were to, say, need to bump the version of a utility crate (can that invalidate an audit?) or add a dependency on a new one. Do I just add an exemption for now? Is that our blanket policy until we have something better / more specific, like an organized audit effort? Or do we do something else? Are we implicitly shifting now to a policy where we prefer not to add new dependencies at all? Are we eventually actually going to audit various upstream crates?</p>\n<p>I may not be privy to various other conversations that have brought this effort here, and context they bring, but then if so, I guess I'm representative of other contributors also not in the loop. Some basic discussion on these points would be great, I think, to help educate and get everyone onboard with basic policies and procedures.</p>\n<p>So, a basic RFC that outlines what our (BA's) use of cargo-vet would look like, with basic workflows, policies and such, who can approve new deps (or other approval-gated actions I guess), how we might eventually actually audit code, etc., would I think be great to see before we turn this on. We've had RFCs for similar other refinements and updates to our policies, e.g. for example Wasmtime 1.0 scope/procedures, or a security-incident response runbook, and this seems at least as consequential as those. What do you think?</p>\n</blockquote>",
        "id": 289919260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658115402
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1186728973\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>At the risk of somewhat complicating things (sorry! getting through backlog now and just catching this), a suggestion: would you (@bholley) be willing to write a Bytecode Alliance RFC for this?</p>\n<p>I personally fully support the goals of <code>cargo-vet</code> and think this is a great thing; but I worry that introducing it like this all at once in an \"enforcing mode\" (i.e. with a CI job) without much in the way of project-specific guidance or policy or documentation may be a bit confusing for some contributors. I personally wouldn't know what to do if I were to, say, need to bump the version of a utility crate (can that invalidate an audit?) or add a dependency on a new one. Do I just add an exemption for now? Is that our blanket policy until we have something better / more specific, like an organized audit effort? Or do we do something else? Are we implicitly shifting now to a policy where we prefer not to add new dependencies at all? Are we eventually actually going to audit various upstream crates?</p>\n<p>I may not be privy to various other conversations that have brought this effort here, and context they bring, but then if so, I guess I'm representative of other contributors also not in the loop. Some basic discussion on these points would be great, I think, to help educate and get everyone onboard with basic policies and procedures.</p>\n<p>So, a basic RFC that outlines what our (BA's) use of cargo-vet would look like, with basic workflows, policies and such, who can approve new deps (or other approval-gated actions I guess), how we might eventually actually audit code, etc., would I think be great to see before we turn this on. We've had RFCs for similar other refinements and updates to our policies, e.g. Wasmtime 1.0 scope/procedures, or a security-incident response runbook, and this seems at least as consequential as those. What do you think?</p>\n</blockquote>",
        "id": 289919334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658115529
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1188276176\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>I think most procedural details are covered well enough by <a href=\"https://mozilla.github.io/cargo-vet/performing-audits.html\">https://mozilla.github.io/cargo-vet/performing-audits.html</a>. What we'd need is mostly policy. I'm only coming up with two such questions, which I hope is a small enough scope that an RFC wouldn't be too difficult. Specifically:</p>\n<ul>\n<li>Do we require contributors who change our dependencies to audit the changes themselves, and if so, do we trust every contributor to audit well enough? Or do we reject PRs modifying anything in <code>supply-chain/</code> unless the audit updates are in a (signed?) commit by a core contributor?</li>\n<li>How do we decide which other projects we trust enough to import their audits?</li>\n</ul>\n<p>@bholley, in thinking about those questions I'm now curious about other things:</p>\n<ul>\n<li>\n<p>What stops someone from adding things to <code>imports.lock</code> that didn't actually come from imports? Maybe there could be a variant of <code>cargo vet --locked</code> that checks that everything in the lock file corresponds to something from the current version of some import, so CI can catch this case. Better yet if it can check only those entries added in the current PR.</p>\n</li>\n<li>\n<p>When <code>cargo vet suggest</code> proposes adding an import, it'd be nice if it could offer a specific command to run. (e.g. <code>cargo vet import firefox</code>?)</p>\n</li>\n<li>\n<p>Can I easily figure out what diff/version somebody else was reviewing when they recorded a certification?</p>\n</li>\n</ul>\n</blockquote>",
        "id": 290019161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658176325
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1189607645\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>@cfallin, @jameysharp, @bholley and I all had a great chat today about cargo vet and its usage in Wasmtime. The current thinking is that we will bring up the usage of <code>cargo vet</code> in CI at the upcoming Wasmtime and Cranelift meetings. Assuming there's no objections and everyone's on board we'll go ahead and merge this PR. </p>\n<p>I think we'll also grow some documentation in the contributing section of the Wasmtime book for <code>cargo vet</code> around how we manage the <code>audits.toml</code> and such, but I think that's probably best added to after experience over time.</p>\n</blockquote>",
        "id": 290168681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658269187
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1190362809\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>I opened <a href=\"https://github.com/mozilla/cargo-vet/issues/271\">https://github.com/mozilla/cargo-vet/issues/271</a> and <a href=\"https://github.com/mozilla/cargo-vet/issues/272\">https://github.com/mozilla/cargo-vet/issues/272</a> from our discussion yesterday if others have other thoughts they'd like to contribute as well.</p>\n</blockquote>",
        "id": 290243013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658327514
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1194319882\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>Ok we've discussed this at both the Cranelift and Wasmtime meetings there were no objections to landing this, so @bholley if you wouldn't mind rebasing this I think it should be good to go!</p>\n</blockquote>",
        "id": 290784535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658766543
    },
    {
        "content": "<p>bholley <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1194525046\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>@alexcrichton done!</p>\n</blockquote>",
        "id": 290807442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658777483
    },
    {
        "content": "<p>bholley <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1194525329\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>@alexcrichton done!</p>\n</blockquote>",
        "id": 290807467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658777498
    },
    {
        "content": "<p>bholley deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444#issuecomment-1194525329\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4444\">issue #4444</a>:</p>\n<blockquote>\n<p>@alexcrichton done!</p>\n</blockquote>",
        "id": 290807478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658777504
    }
]