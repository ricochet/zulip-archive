[
    {
        "content": "<p>jlb6740 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 243857777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624576282
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 243858198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624576625
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 243872076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624591650
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244237721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624947701
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244376761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625027886
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244377263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625028556
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244377450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625028861
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244379021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625030764
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244379339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625031127
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244379907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625031895
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244380067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625032096
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244381504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625033814
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-696383242\">PR review</a>.</p>",
        "id": 244450644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625070344
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r661633475\">PR review comment</a>:</p>\n<blockquote>\n<p>An alternative approach is to introduce a binary pairwise addition IR operation, e.g. <code>iadd_pairwise</code>, which sounds like a more useful primitive operation - it could be used both by other existing Wasm instructions like <code>i32x4.dot_i16x8_s</code> and possible future additions (some of which have already been discussed - see <a href=\"https://github.com/WebAssembly/simd/pull/382\">here</a> for an example); in that case <code>extended_pairwise_add_signed</code> would become <code>iadd_pairwise(swiden_low, swiden_high)</code>. We need to do some pattern-matching for optimal AArch64 code generation (which is a single instruction), but I am not sure about other architectures - any thoughts from the people working on the backends?</p>\n<p>cc  @abrown @cfallin @uweigand </p>\n</blockquote>",
        "id": 244450645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625070344
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r661633475\">PR review comment</a>.</p>",
        "id": 244452031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625070972
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-696430002\">PR review</a>.</p>",
        "id": 244457854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625073343
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r661668805\">PR review comment</a>:</p>\n<blockquote>\n<p>A general comment: in the past we were implicitly following the \"make a new CLIF instruction for each Wasm SIMD instruction\" paradigm so a lot of existing CLIF instructions could be split up in the same way you describe above. I think this is a thing that should be done (it just seems to make sense to simplify CLIF even at the risk of a few extra cycles during lowering) but I don't feel very strongly about it so I would be fine with either:</p>\n<ul>\n<li>we do the pattern matching now AND we start a review of the existing SIMD instructions in a separate issue to clean up CLIF</li>\n<li>we just start the review of existing SIMD instructions now and eventually remove the unnecessary CLIF instructions and switch to more pattern matching; this would mean following the \"make a new CLIF instruction for each Wasm SIMD instruction\" for the last few outstanding instructions</li>\n</ul>\n<p>In summary, I don't mind if we do <code>iadd_pairwise</code> now or later, but I do think we need to commit to doing the same to the rest of SIMD CLIF.</p>\n</blockquote>",
        "id": 244457855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625073343
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r661684995\">PR review comment</a>:</p>\n<blockquote>\n<p>I forgot to link to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r651773002\">the discussion</a> in #2982 for context.</p>\n<p>@abrown While I don't have any strong feelings either, in #3044 I have already started with the first of your suggested approaches. In fact, the only Wasm SIMD operations that are not already covered by merged code or pull requests are the family of <code>i*.extmul_*_i*</code> operations, for which <a href=\"https://github.com/WebAssembly/simd/blob/main/proposals/simd/SIMD.md#extended-integer-multiplication\">the specification text</a> itself provides a simple way to express them in terms of other basic operations.</p>\n<p>I agree that opening an issue for CLIF clean-up is definitely one of the steps forward, no matter what we decide to do.</p>\n</blockquote>",
        "id": 244461169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625074777
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-696451037\">PR review</a>.</p>",
        "id": 244461170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625074777
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-696479986\">PR review</a>.</p>",
        "id": 244465793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625076795
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r661707209\">PR review comment</a>:</p>\n<blockquote>\n<p>Opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3045\">https://github.com/bytecodealliance/wasmtime/issues/3045</a> for this.</p>\n</blockquote>",
        "id": 244465794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625076795
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-696499246\">PR review</a>.</p>",
        "id": 244469177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625078174
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r661721900\">PR review comment</a>:</p>\n<blockquote>\n<p>Just commented over in #3045 with thoughts on the general question; for this specific case I think it does seem reasonable to split into the pairwise add with extends on the inputs. But let's see what we come to over there!</p>\n</blockquote>",
        "id": 244469179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625078174
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 244523725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625120763
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 245134846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625639696
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 245366848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625775694
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 245367213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625775869
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 245394451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625798557
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-702646907\">PR review</a>.</p>",
        "id": 245395614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625800050
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r666640878\">PR review comment</a>:</p>\n<blockquote>\n<p>@akirilov-arm @cfallin Hi .. so the suggestion here is to remove the new IR instructions <strong>extended_pairwise_add_signed</strong> and <strong>extended_pairwise_add_unsigned</strong> and instead create one called <strong>iadd_pairwise</strong>. When lowering .. we would keep the lowering code that is there now, but pattern match for the instruction and type during lowering in order to get the input, or is the suggestion to scrape that lowering code too, actually lower swiden_low and swiden_high where we then are using the output of those particular instructions to be input to <strong>iadd_pairwise</strong> which needs to then be a new implementation from what is there now, essentially creating a new patch? I look at the change made in #2982 and it really is just avoiding creating another IR instruction while maybe adding a little logic of doing the matching, but keeps the original sequence. Here I am not sure if the suggestion is to go even further?</p>\n</blockquote>",
        "id": 245395615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625800050
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r666640878\">PR review comment</a>.</p>",
        "id": 245395773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625800246
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r666640878\">PR review comment</a>.</p>",
        "id": 245396030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625800639
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 245522084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625879616
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-705389233\">PR review</a>.</p>",
        "id": 245848287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626192698
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r668913007\">PR review comment</a>:</p>\n<blockquote>\n<p>IMHO the handling should be equivalent to the one for the <code>fcvt_from_uint</code> operation in #2982 - that is, there should be a code path that handles <code>iadd_pairwise</code> irrespective of its inputs, to serve as a fallback. Then right before that path there should be a check if the inputs match the pattern; if they do, execution should proceed through your current lowering code for <code>extended_pairwise_add_*</code>.</p>\n<p>BTW @sparker-arm already has the common <code>iadd_pairwise</code> implementation and the AArch64-specific bits, but he is waiting for this pull request to get merged, so that you do not step on each other's toes. In the meantime, he may be able to offer some advice.</p>\n</blockquote>",
        "id": 245848288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626192698
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-705420284\">PR review</a>.</p>",
        "id": 245852347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626194530
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r668937043\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I don't mind posting this up if people are interested.</p>\n</blockquote>",
        "id": 245852348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626194530
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-705801214\">PR review</a>.</p>",
        "id": 245913715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626231071
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r669241898\">PR review comment</a>:</p>\n<blockquote>\n<p>Hi @spaker-arm .. can you post here?@akirilov-arm I still am not sure I understand what changes are in mind. Currently in code_translators there is this new instruction extended_pairwise_add_signed called here:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>    Operator::I16x8ExtAddPairwiseI8x16S =&gt; {\n        let a = pop1_with_bitcast(state, I8X16, builder);\n        state.push1(builder.ins().extended_pairwise_add_signed(a))\n    }\n</code></pre></div>\n\n</blockquote>\n<p>and new instruction extended_pairwise_add_unsigned called here:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>    Operator::I16x8ExtAddPairwiseI8x16U =&gt; {\n        let a = pop1_with_bitcast(state, I8X16, builder);\n        state.push1(builder.ins().extended_pairwise_add_unsigned(a))\n    }\n</code></pre></div>\n\n</blockquote>\n<p>You are saying to instead just call one instruction called iadd_pairwise and then lower from there? I think this is what you are saying and I'll go ahead and repush this. </p>\n</blockquote>",
        "id": 245913716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626231071
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r669241898\">PR review comment</a>.</p>",
        "id": 245913726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626231085
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r669241898\">PR review comment</a>.</p>",
        "id": 245913787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626231132
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r669241898\">PR review comment</a>.</p>",
        "id": 245913800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626231151
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r669241898\">PR review comment</a>.</p>",
        "id": 245913908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626231320
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r669241898\">PR review comment</a>.</p>",
        "id": 245913912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626231338
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r669241898\">PR review comment</a>.</p>",
        "id": 245913963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626231369
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-705996331\">PR review</a>.</p>",
        "id": 245932388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626251347
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r669403275\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, I'll post the whole thing up later today. But just to point out that we'll know the signedness because of the [u|s]widen inputs, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">Operator</span>::<span class=\"n\">I16x8ExtAddPairwiseI8x16S</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pop1_with_bitcast</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I8X16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">widen_low</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">swiden_low</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">widen_high</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">swiden_high</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">push1</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_pairwise</span><span class=\"p\">(</span><span class=\"n\">widen_low</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">widen_high</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This creates a bit more work in the AArch64 backend, but it does also mean that we can fallback to an ADDP when we don't successfully match the extending inputs. As a side queston, unless I'm mistaken wasm doesn't have a horizontal add - does anyone know why?</p>\n</blockquote>",
        "id": 245932390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626251348
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247626278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627585171
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247659323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627605927
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247668340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627618036
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/akirilov-arm\">akirilov-arm</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a>.</p>",
        "id": 247668425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627618161
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a>.</p>",
        "id": 247668426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627618163
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-718821226\">PR review</a>.</p>",
        "id": 247680971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627632780
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-718821226\">PR review</a>.</p>",
        "id": 247680972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627632780
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r679730096\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it would be good to have a clearer definition of the semantics, this currently doesn't tell me which elements make a pair.</p>\n</blockquote>",
        "id": 247680973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627632781
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r679735263\">PR review comment</a>:</p>\n<blockquote>\n<p>Sorry, I don't know anything about the ISA... but since you're using 'src' here, shouldn't you be checking that the input to the swiden_low and swiden_high is the same?</p>\n</blockquote>",
        "id": 247680974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627632781
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-718449416\">PR review</a>.</p>",
        "id": 247731305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662802
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680063733\">PR review comment</a>:</p>\n<blockquote>\n<p>These nested conditionals could be written together in one level, I think; this would also avoid the subtle asymmetry (possibly leading to a bug with later additions) that the <code>else if</code> attaches only to the outer <code>if</code>. Something like:</p>\n<p><code>if let (Some(swiden_low), Some(swiden_high)) = (matches_input(...), matches_input(...)) {</code></p>\n</blockquote>",
        "id": 247731306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662802
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-718449416\">PR review</a>.</p>",
        "id": 247731307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662802
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680066264\">PR review comment</a>:</p>\n<blockquote>\n<p>+1, this needs to be part of the condition above (where we check input opcodes) such that we fall back to generic codegen otherwise, as it's perfectly legal to pairwise-add extends of two different values.</p>\n</blockquote>",
        "id": 247731308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662802
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r679422357\">PR review comment</a>:</p>\n<blockquote>\n<p>At this point we can now remove <code>x64_should_panic</code> entirely, since it always returns false, right?</p>\n</blockquote>",
        "id": 247731309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662802
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680068282\">PR review comment</a>:</p>\n<blockquote>\n<p>Are these still the old opcodes?</p>\n</blockquote>",
        "id": 247731310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662803
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680067205\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we need an <code>else</code> branch here to handle a pairwise add without the extends, no? Or at least an <code>unimplemented!()</code> if we don't support that opcode by itself.</p>\n</blockquote>",
        "id": 247731311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662803
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719299002\">PR review</a>.</p>",
        "id": 247735011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627664418
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680094265\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes .. I was not sure if we wanted to leave it in for future instructions .. relaxed SIMD maybe? But at the very least I was going to remove the match here. I can just remove the function and find the call and remove that to.</p>\n</blockquote>",
        "id": 247735013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627664418
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719306756\">PR review</a>.</p>",
        "id": 247736209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627665028
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680099989\">PR review comment</a>:</p>\n<blockquote>\n<p>@sparker-arm @cfallin .. This is exactly what I was thinking about. This is the tension between treating a clif as a 1:1 wasm instruction mapping versus the decomposition approach. I didn't add the check because as noted, it is perfect legal for swiden_low and swiden_high to have to not be the same per the definition of iadd_pairwise. Here, we are not lowering ext_addpairwise which would require the condition that the input be the same ... we are lowering iadd_pairwise. I was concerned that some exercise or fuzz testing or something lowering just this cliff instruction could be invalidated incorrectly. I can add the check as I want this to merge, but I do think we need to think about or even audit the consistency of similar checks and whether they map to the clif instruction that we are actually lowering or the wasm instruction that we are intending to lower.</p>\n</blockquote>",
        "id": 247736211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627665028
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719308548\">PR review</a>.</p>",
        "id": 247736454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627665173
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680101314\">PR review comment</a>:</p>\n<blockquote>\n<p>Glad you caught this. Yes, was going to do one more once through but may have missed this. Surprised it doesn't warn? </p>\n</blockquote>",
        "id": 247736456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627665173
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680099989\">PR review comment</a>.</p>",
        "id": 247736757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627665328
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719319339\">PR review</a>.</p>",
        "id": 247738066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627666057
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680109653\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Here, we are not lowering ext_addpairwise which would require the condition that the input be the same ... we are lowering iadd_pairwise</p>\n</blockquote>\n<p>Well, that's true in the outer scope, but the instructions that this case is emitting are specifically for the same-input case, no?</p>\n<p>IMHO it's fine for now to fall back to <code>unimplemented!()</code> if we know for sure that we won't generate an <code>iadd_pairwise</code> with other (arbitrary) inputs, but at some point we should fill in that case too, for completeness.</p>\n<blockquote>\n<p>should audit ...</p>\n</blockquote>\n<p>I agree! I have lots of thoughts on verification that this text box is too small to contain :-) IMHO this is the next big effort after getting current projects (including some sort of isel DSL) landed.</p>\n</blockquote>",
        "id": 247738069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627666057
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719320420\">PR review</a>.</p>",
        "id": 247738199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627666130
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680110472\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yeah, I think it's fine to remove the whole helper and put it back later if we need it.</p>\n</blockquote>",
        "id": 247738200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627666130
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719320950\">PR review</a>.</p>",
        "id": 247738281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627666171
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680110924\">PR review comment</a>:</p>\n<blockquote>\n<p>Me too; @abrown I guess we're not building the CLIF interpreter by default in any CI target?</p>\n</blockquote>",
        "id": 247738282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627666171
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719444001\">PR review</a>.</p>",
        "id": 247758574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627677382
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680205415\">PR review comment</a>:</p>\n<blockquote>\n<p>I thought we were: there are <code>test interpret</code> filetest that should use it and @afonso360 has a fuzz target that should use it.</p>\n</blockquote>",
        "id": 247758575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627677382
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680205415\">PR review comment</a>.</p>",
        "id": 247758595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627677394
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247775497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627690893
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247776342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627692000
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247776573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627692302
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247777421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627693675
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247778313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627695131
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247778580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627695566
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247778644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627695621
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a>.</p>",
        "id": 247779966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627697840
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719537534\">PR review</a>.</p>",
        "id": 247780816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627699309
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719537534\">PR review</a>.</p>",
        "id": 247780817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627699309
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680293496\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think this is testing what we want to test -- this is just checking that we grabbed input 0 on each of the swiden ops (which is always true by construction, since we built <code>swiden_input</code> just above).</p>\n<p>What we really want is to <code>put_input_in_reg(ctx, swiden_input[1])</code>, and then assert that we have the same register, I think.</p>\n<p>Also, if the inputs do <em>not</em> match, we should fail more gracefully than with an assert, I think; asserts imply a compiler bug, whereas the different-inputs case is really just unimplemented behavior, right? So perhaps we could do (after getting <code>src0</code> and <code>src1</code> regs) <code>if src0 != src1 { unimplemented!(\"iadd_pairwise not implemented for general case with different inputs\"); }</code> or something like that?</p>\n</blockquote>",
        "id": 247780818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627699309
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680293242\">PR review comment</a>:</p>\n<blockquote>\n<p>s/adjcent/adjacent/</p>\n<p>and I think s/lines/lanes/</p>\n</blockquote>",
        "id": 247780819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627699309
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247818472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627756633
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719595916\">PR review</a>.</p>",
        "id": 247818536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627756714
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#discussion_r680394957\">PR review comment</a>:</p>\n<blockquote>\n<p>Sorry .. Yes. When I first did this I was not sure if that's what we wanted here and forgot to highlight that concern. Good catch. Also updated for the unimplemented vs assert comment.</p>\n</blockquote>",
        "id": 247818537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627756714
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a> from <code>extend-add-pairwise-x64</code> to <code>main</code>.</p>",
        "id": 247818559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627756781
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a>.</p>",
        "id": 247819987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627758755
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a>.</p>",
        "id": 247819989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627758768
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719621417\">PR review</a>.</p>",
        "id": 247839300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627791275
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031\">PR #3031</a>.</p>",
        "id": 247839303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627791290
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3031#pullrequestreview-719621417\">PR review</a>.</p>",
        "id": 247839315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627791311
    }
]