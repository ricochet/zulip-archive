[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1479\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1479\">Issue #1479</a>:</p>\n<blockquote>\n<p>Currently in the <code>wasmtime</code> crate a <code>Module</code> will <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/instance.rs#L135\" title=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/instance.rs#L135\">dynamically register</a> its unwinding information in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/frame_info.rs#L14\" title=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/frame_info.rs#L14\">a global</a> which is unregistered <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/frame_info.rs#L120-L126\" title=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/frame_info.rs#L120-L126\">when a module is dropped</a>. This global is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/trap.rs#L63-L65\" title=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/trap.rs#L63-L65\">used when inspecting a native backtrace</a> to figure out which frames are wasm frames and which frames are native frames.</p>\n<p>Unfortunately though instances and their exports can still be usable after a <code>Module</code> is dropped. For example you can continue to use a <code>Func</code> after the <code>Instance</code> and <code>Module</code> are dropped. This means, though, that traps aren't properly symbolicated and resolved to wasm modules after the <code>Module</code> is dropped though.</p>\n<p>To fix this I think we'll need to tie the trap info registration to the <code>wasmtime_runtime::InstanceHandle</code> somehow rather than the <code>Module</code>.</p>\n</blockquote>",
        "id": 193220503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586280077
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1479#issuecomment-610576756\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1479#issuecomment-610576756\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1479\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1479\">Issue #1479</a>:</p>\n<blockquote>\n<p>It doesn't seem safe to use a <code>Func</code> after its associated <code>Instance</code> has been dropped in general -- its <code>vmctx</code> parameter would dangle and any reference to memories, tables, or even imports would be unsafe. In what context does this come up?</p>\n</blockquote>",
        "id": 193236204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586287710
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1479#issuecomment-610625990\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1479#issuecomment-610625990\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1479\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1479\">Issue #1479</a>:</p>\n<blockquote>\n<p>This program shows the error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">r#&quot;(func (export &quot;foo&quot;) unreachable)&quot;#</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">func</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;asserting before we drop modules&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_trap</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">unwrap_err</span><span class=\"p\">().</span><span class=\"n\">downcast</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">drop</span><span class=\"p\">((</span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;asserting after drop&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_trap</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">unwrap_err</span><span class=\"p\">().</span><span class=\"n\">downcast</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">assert_trap</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">Trap</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">trace</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">trace</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">func_index</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>the first assertion there passes but the second fails.</p>\n<p>We keep an <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/func.rs#L139\" title=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/func.rs#L139\"><code>InstanceHandle</code> inside of <code>Func</code></a> which keeps the actual underlying instance alive even after you drop the <code>Instance</code> which keeps it at least memory safe.</p>\n</blockquote>",
        "id": 193249938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586294351
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1479\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1479\">Issue #1479</a>:</p>\n<blockquote>\n<p>Currently in the <code>wasmtime</code> crate a <code>Module</code> will <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/instance.rs#L135\" title=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/instance.rs#L135\">dynamically register</a> its unwinding information in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/frame_info.rs#L14\" title=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/frame_info.rs#L14\">a global</a> which is unregistered <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/frame_info.rs#L120-L126\" title=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/frame_info.rs#L120-L126\">when a module is dropped</a>. This global is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/trap.rs#L63-L65\" title=\"https://github.com/bytecodealliance/wasmtime/blob/1a2ecccbebb7e0aab8b292874c75734c5d058728/crates/api/src/trap.rs#L63-L65\">used when inspecting a native backtrace</a> to figure out which frames are wasm frames and which frames are native frames.</p>\n<p>Unfortunately though instances and their exports can still be usable after a <code>Module</code> is dropped. For example you can continue to use a <code>Func</code> after the <code>Instance</code> and <code>Module</code> are dropped. This means, though, that traps aren't properly symbolicated and resolved to wasm modules after the <code>Module</code> is dropped though.</p>\n<p>To fix this I think we'll need to tie the trap info registration to the <code>wasmtime_runtime::InstanceHandle</code> somehow rather than the <code>Module</code>.</p>\n</blockquote>",
        "id": 194351998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587063650
    }
]