[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4781\">issue #4781</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>This was brought up by @dheaton-arm on <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294881598\">zulip</a>. We should add a trap comparison operator to our CLIF test suite.</p>\n<h4>Benefit</h4>\n<p>As @cfallin <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294893024\">mentions in the thread</a> we already have reasonable coverage for traps via the wasm test suite.</p>\n<p>However, this is still useful to improve the CLIF interpreter, to ensure that we are consistent in emitting the appropriate traps at the right time.</p>\n<p>This could further be used in the fuzzer. The fuzzer currently stops executing any input, as soon as the interpreter traps.<br>\nThis is overly restrictive since we could allow a <code>DivByZero</code> to execute in the backend and ensure that it comes up with the same trap. Other traps are also useful to check, but not all! We don't want to let a stack overflow keep executing since that can overwrite some memory and do terrible things.</p>\n<p>I think this is also important if we want to start using the interpreter for const code execution, since we do need to ensure that we produce the same traps, and enabling it in the fuzzer is the best way I can think about it currently.</p>\n<h4>Implementation</h4>\n<p>We can add a trap handler either directly in <code>cranelift-jit</code> or the trampolines in the runtest suite. I'm not too familiar with how traps work in general to be able to expand on this.</p>\n<h4>Alternatives</h4>\n<p>So far I've been writing tests that trap in the interpreter test suite, and that is a viable option. But its not very scalable.</p>\n<p>A very out of the box option would be to run wasmtime with the clif interpreter and use the wasm test suite and fuzzers to do this! I would love to do this, but right now its a bit too out there.<br>\n</p>\n</blockquote>",
        "id": 295193017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661420419
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4781\">issue #4781</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>This was brought up by @dheaton-arm on <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294881598\">zulip</a>. We should add a trap comparison operator to our CLIF test suite.</p>\n<h4>Benefit</h4>\n<p>As @cfallin <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294893024\">mentions in the thread</a> we already have reasonable coverage for traps via the wasm test suite.</p>\n<p>However, this is still useful to improve the CLIF interpreter, to ensure that we are consistent in emitting the appropriate traps at the right time.</p>\n<p>This could further be used in the clif differential fuzzer. The fuzzer currently stops executing any input, as soon as the interpreter traps.<br>\nThis is overly restrictive since we could allow a <code>DivByZero</code> to execute in the backend and ensure that it comes up with the same trap. Other traps are also useful to check, but not all! We don't want to let a stack overflow keep executing since that can overwrite some memory and do terrible things.</p>\n<p>I think this is also important if we want to start using the interpreter for const code execution, since we do need to ensure that we produce the same traps, and enabling it in the fuzzer is the best way I can think about it currently.</p>\n<h4>Implementation</h4>\n<p>We can add a trap handler either directly in <code>cranelift-jit</code> or the trampolines in the runtest suite. I'm not too familiar with how traps work in general to be able to expand on this.</p>\n<h4>Alternatives</h4>\n<p>So far I've been writing tests that trap in the interpreter test suite, and that is a viable option. But its not very scalable.</p>\n<p>A very out of the box option would be to run wasmtime with the clif interpreter and use the wasm test suite and fuzzers to do this! I would love to do this, but right now its a bit too out there.<br>\n</p>\n</blockquote>",
        "id": 295193336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661420508
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4781\">issue #4781</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>This was brought up by @dheaton-arm on <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294881598\">zulip</a>. We should add a trap comparison operator to our CLIF test suite.</p>\n<h4>Benefit</h4>\n<p>As @cfallin <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294893024\">mentions in the thread</a> we already have reasonable coverage for traps via the wasm test suite.</p>\n<p>However, this is still useful to improve the CLIF interpreter, to ensure that we are consistent in emitting the appropriate traps at the right time.</p>\n<p>This could further be used in the clif differential fuzzer. The fuzzer currently stops executing any input, as soon as the interpreter traps.<br>\nThis is overly restrictive since we could allow a <code>DivByZero</code> to execute in the backend and ensure that it comes up with the same trap. Other traps are also useful to check, but not all! We don't want to let a stack overflow keep executing since that can overwrite some memory and do terrible things.</p>\n<p>I think this is also important if we want to start using the interpreter for const code execution, since we do need to ensure that we produce the same traps, and enabling it in the fuzzer is the best way I can think about it currently.</p>\n<h4>Implementation</h4>\n<p>We can add a trap handler either directly in <code>cranelift-jit</code> or the trampolines in the runtest suite. I'm not too familiar with how traps work in general to be able to expand on this.</p>\n<h4>Alternatives</h4>\n<p>So far I've been writing tests that trap in the interpreter test suite, and that is a viable option. But its not very scalable.</p>\n<p>A very out of the box option would be to run wasmtime with the clif interpreter and use the wasm test suite and fuzzers to do this! I would love to do this, but right now its a bit too out there.<br>\n</p>\n</blockquote>",
        "id": 296845706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662133235
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4781\">issue #4781</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>This was brought up by @dheaton-arm on <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294881598\">zulip</a>. We should add a trap comparison operator to our CLIF test suite.</p>\n<h4>Benefit</h4>\n<p>As @cfallin <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294893024\">mentions in the thread</a> we already have reasonable coverage for traps via the wasm test suite.</p>\n<p>However, this is still useful to improve the CLIF interpreter, to ensure that we are consistent in emitting the appropriate traps at the right time.</p>\n<p>This could further be used in the clif differential fuzzer. The fuzzer currently stops executing any input, as soon as the interpreter traps.<br>\nThis is overly restrictive since we could allow a <code>DivByZero</code> to execute in the backend and ensure that it comes up with the same trap. Other traps are also useful to check, but not all! We don't want to let a stack overflow keep executing since that can overwrite some memory and do terrible things.</p>\n<p>I think this is also important if we want to start using the interpreter for const code execution, since we do need to ensure that we produce the same traps, and enabling it in the fuzzer is the best way I can think about it currently.</p>\n<h4>Implementation</h4>\n<p>We can add a trap handler either directly in <code>cranelift-jit</code> or the trampolines in the runtest suite. I'm not too familiar with how traps work in general to be able to expand on this.</p>\n<h4>Alternatives</h4>\n<p>So far I've been writing tests that trap in the interpreter test suite, and that is a viable option. But its not very scalable.</p>\n<p>A very out of the box option would be to run wasmtime with the clif interpreter and use the wasm test suite and fuzzers to do this! I would love to do this, but right now its a bit too out there.<br>\n</p>\n</blockquote>",
        "id": 296845708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662133235
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4781\">issue #4781</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>This was brought up by @dheaton-arm on <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294881598\">zulip</a>. We should add a trap comparison operator to our CLIF test suite.</p>\n<h4>Benefit</h4>\n<p>As @cfallin <a href=\"#narrow/stream/217117-cranelift/topic/testing.20traps/near/294893024\">mentions in the thread</a> we already have reasonable coverage for traps via the wasm test suite.</p>\n<p>However, this is still useful to improve the CLIF interpreter, to ensure that we are consistent in emitting the appropriate traps at the right time.</p>\n<p>This could further be used in the clif differential fuzzer. The fuzzer currently stops executing any input, as soon as the interpreter traps.<br>\nThis is overly restrictive since we could allow a <code>DivByZero</code> to execute in the backend and ensure that it comes up with the same trap. Other traps are also useful to check, but not all! We don't want to let a stack overflow keep executing since that can overwrite some memory and do terrible things.</p>\n<p>I think this is also important if we want to start using the interpreter for const code execution, since we do need to ensure that we produce the same traps, and enabling it in the fuzzer is the best way I can think about it currently.</p>\n<h4>Implementation</h4>\n<p>We can add a trap handler either directly in <code>cranelift-jit</code> or the trampolines in the runtest suite. I'm not too familiar with how traps work in general to be able to expand on this.</p>\n<h4>Alternatives</h4>\n<p>So far I've been writing tests that trap in the interpreter test suite, and that is a viable option. But its not very scalable.</p>\n<p>A very out of the box option would be to run wasmtime with the clif interpreter and use the wasm test suite and fuzzers to do this! I would love to do this, but right now its a bit too out there.<br>\n</p>\n</blockquote>",
        "id": 296845709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662133235
    }
]