[
    {
        "content": "<p>jeffcharles opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Debug symbol transformation for AArch64. That is, when running <code>wasmtime compile -g &lt;path_to_wasm&gt;</code>, <code>wasmtime</code> does not exit with an error message and debug symbols are included in the resulting <code>.cwasm</code> file.</p>\n<h4>Benefit</h4>\n<p>It enables developers writing code targeting a Wasm environment to be able to step debug their code in a Wasm environment if they are using Apple Silicon.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/jeffcharles/wasmtime/pull/1/files\">https://github.com/jeffcharles/wasmtime/pull/1/files</a>. This uses a similar approach to how the symbols are mapped for x86_64. I can open that PR on this repo instead. The contribution guidelines mentioned I should open an issue here first to discuss.</p>\n<p>The PR above seems to work for a number of test cases that I've tried.</p>\n<h4>Alternatives</h4>\n<p>I'm not sure what the alternatives are.<br>\n</p>\n</blockquote>",
        "id": 288713542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657133309
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Debug symbol transformation for AArch64. That is, when running <code>wasmtime compile -g &lt;path_to_wasm&gt;</code>, <code>wasmtime</code> does not exit with an error message and debug symbols are included in the resulting <code>.cwasm</code> file.</p>\n<h4>Benefit</h4>\n<p>It enables developers writing code targeting a Wasm environment to be able to step debug their code in a Wasm environment if they are using Apple Silicon.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/jeffcharles/wasmtime/pull/1/files\">https://github.com/jeffcharles/wasmtime/pull/1/files</a>. This uses a similar approach to how the symbols are mapped for x86_64. I can open that PR on this repo instead. The contribution guidelines mentioned I should open an issue here first to discuss.</p>\n<p>The PR above seems to work for a number of test cases that I've tried.</p>\n<h4>Alternatives</h4>\n<p>I'm not sure what the alternatives are.<br>\n</p>\n</blockquote>",
        "id": 289215407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657556342
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Debug symbol transformation for AArch64. That is, when running <code>wasmtime compile -g &lt;path_to_wasm&gt;</code>, <code>wasmtime</code> does not exit with an error message and debug symbols are included in the resulting <code>.cwasm</code> file.</p>\n<h4>Benefit</h4>\n<p>It enables developers writing code targeting a Wasm environment to be able to step debug their code in a Wasm environment if they are using Apple Silicon.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/jeffcharles/wasmtime/pull/1/files\">https://github.com/jeffcharles/wasmtime/pull/1/files</a>. This uses a similar approach to how the symbols are mapped for x86_64. I can open that PR on this repo instead. The contribution guidelines mentioned I should open an issue here first to discuss.</p>\n<p>The PR above seems to work for a number of test cases that I've tried.</p>\n<h4>Alternatives</h4>\n<p>I'm not sure what the alternatives are.<br>\n</p>\n</blockquote>",
        "id": 289215408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657556342
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Debug symbol transformation for AArch64. That is, when running <code>wasmtime compile -g &lt;path_to_wasm&gt;</code>, <code>wasmtime</code> does not exit with an error message and debug symbols are included in the resulting <code>.cwasm</code> file.</p>\n<h4>Benefit</h4>\n<p>It enables developers writing code targeting a Wasm environment to be able to step debug their code in a Wasm environment if they are using Apple Silicon.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/jeffcharles/wasmtime/pull/1/files\">https://github.com/jeffcharles/wasmtime/pull/1/files</a>. This uses a similar approach to how the symbols are mapped for x86_64. I can open that PR on this repo instead. The contribution guidelines mentioned I should open an issue here first to discuss.</p>\n<p>The PR above seems to work for a number of test cases that I've tried.</p>\n<h4>Alternatives</h4>\n<p>I'm not sure what the alternatives are.<br>\n</p>\n</blockquote>",
        "id": 289215409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657556342
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Debug symbol transformation for AArch64. That is, when running <code>wasmtime compile -g &lt;path_to_wasm&gt;</code>, <code>wasmtime</code> does not exit with an error message and debug symbols are included in the resulting <code>.cwasm</code> file.</p>\n<h4>Benefit</h4>\n<p>It enables developers writing code targeting a Wasm environment to be able to step debug their code in a Wasm environment if they are using Apple Silicon.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/jeffcharles/wasmtime/pull/1/files\">https://github.com/jeffcharles/wasmtime/pull/1/files</a>. This uses a similar approach to how the symbols are mapped for x86_64. I can open that PR on this repo instead. The contribution guidelines mentioned I should open an issue here first to discuss.</p>\n<p>The PR above seems to work for a number of test cases that I've tried.</p>\n<h4>Alternatives</h4>\n<p>I'm not sure what the alternatives are.<br>\n</p>\n</blockquote>",
        "id": 289215410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657556342
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393#issuecomment-1185809524\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<p>Have you seen issue #2856? It documents some of the issues with full debugging support on non-x86 platforms (in fact, it subsumes the previous AArch64-specific issue, #1523) and is probably a better place to discuss any details that are not AArch64-specific.</p>\n</blockquote>",
        "id": 289766639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657910423
    },
    {
        "content": "<p>jeffcharles <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393#issuecomment-1187606047\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<p>I had not seen that issue. I can take a look at those details.</p>\n<p>Even without changes to the debug crate though, given my change, I'm currently able to get a reasonable debugging experience on AArch64 as opposed to an error message with the status quo.</p>\n</blockquote>",
        "id": 289977107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658156278
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393#issuecomment-1188295637\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<p>I see the PR just makes aarch64 do exactly what x64 and s390x already do. I don't know much yet about Cranelift's target backends, but it seems plausible to me that <code>inst::unwind::systemv::map_reg</code> would be the right choice for aarch64 as well. @akirilov-arm, is there any reason not to merge this?</p>\n<p>Also, maybe we should edit the contributor guidelines to say that if it's easier to explain your issue by just opening a pull request showing what you want changed, then you don't need to open an issue first? Anyway I'd say go ahead and open a PR here with your proposed changes.</p>\n</blockquote>",
        "id": 290021011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658177357
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393#issuecomment-1189035514\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<blockquote>\n<p>@akirilov-arm, is there any reason not to merge this?</p>\n</blockquote>\n<p>I don't know, usually I don't look at PRs that have not been opened in this repository. From a cursory glance it looks OK, but I am not really familiar with that part of the code.</p>\n</blockquote>",
        "id": 290096174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658236275
    },
    {
        "content": "<p>jeffcharles <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393#issuecomment-1189422056\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<p>I've opened a PR at #4468.</p>\n</blockquote>",
        "id": 290141375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658255435
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393#issuecomment-1189489010\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<p>Merged, thank you!</p>\n</blockquote>",
        "id": 290151726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658260239
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4393\">issue #4393</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Debug symbol transformation for AArch64. That is, when running <code>wasmtime compile -g &lt;path_to_wasm&gt;</code>, <code>wasmtime</code> does not exit with an error message and debug symbols are included in the resulting <code>.cwasm</code> file.</p>\n<h4>Benefit</h4>\n<p>It enables developers writing code targeting a Wasm environment to be able to step debug their code in a Wasm environment if they are using Apple Silicon.</p>\n<h4>Implementation</h4>\n<p><a href=\"https://github.com/jeffcharles/wasmtime/pull/1/files\">https://github.com/jeffcharles/wasmtime/pull/1/files</a>. This uses a similar approach to how the symbols are mapped for x86_64. I can open that PR on this repo instead. The contribution guidelines mentioned I should open an issue here first to discuss.</p>\n<p>The PR above seems to work for a number of test cases that I've tried.</p>\n<h4>Alternatives</h4>\n<p>I'm not sure what the alternatives are.<br>\n</p>\n</blockquote>",
        "id": 290151727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658260239
    }
]