[
    {
        "content": "<p>froydnj opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1283\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1283\">Issue #1283</a>:</p>\n<blockquote>\n<p>While trying to update lucet to the most recent cranelift, I ran into some issues that stemmed from <a href=\"https://github.com/bytecodealliance/cranelift/issues/1209\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1209\">bytecodealliance/cranelift#1209</a> changing the semantics of what zero-initialized data did.  Previously, zero-initialized data was essentially just like normal data, except that cranelift-module took care of generating the initial vector of zeros to modify.  After that PR, zero-initialized data now had special semantics of not actually existing in the generated object, but living in <code>.bss</code> (or similar) and being zero-initialized by the runtime loader.</p>\n<p>This was an excellent change!  However, <code>lucetc</code> depended on the old behavior, in particular the application of relocations to the declared data.  I think <code>lucetc</code>'s behavior is wrong, and I intend to write up a PR for that.</p>\n<p>I don't think relocations (<code>declare_func_in_data</code>, etc.) should actually apply to zero-initialized data...but cranelift-module happily lets you declare zero-initialized data and also declare that there should be various relocations applied to said data, which I don't think is going to translate well.  (If it is supposed to translate well, faerie, at least, currently has bugs in that area.)</p>\n<p>Is that line of thinking correct, i.e. there should be some additional checks around:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f76b36f73720508caa1a50ce4cf388b42855789a/cranelift/module/src/module.rs#L646-L652\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/f76b36f73720508caa1a50ce4cf388b42855789a/cranelift/module/src/module.rs#L646-L652\">https://github.com/bytecodealliance/wasmtime/blob/f76b36f73720508caa1a50ce4cf388b42855789a/cranelift/module/src/module.rs#L646-L652</a></p>\n<p>regarding zero-initialized data prior to handing things off to the backend?</p>\n</blockquote>",
        "id": 190297587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583941984
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1283\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1283\">Issue #1283</a>:</p>\n<blockquote>\n<p>While trying to update lucet to the most recent cranelift, I ran into some issues that stemmed from <a href=\"https://github.com/bytecodealliance/cranelift/issues/1209\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1209\">bytecodealliance/cranelift#1209</a> changing the semantics of what zero-initialized data did.  Previously, zero-initialized data was essentially just like normal data, except that cranelift-module took care of generating the initial vector of zeros to modify.  After that PR, zero-initialized data now had special semantics of not actually existing in the generated object, but living in <code>.bss</code> (or similar) and being zero-initialized by the runtime loader.</p>\n<p>This was an excellent change!  However, <code>lucetc</code> depended on the old behavior, in particular the application of relocations to the declared data.  I think <code>lucetc</code>'s behavior is wrong, and I intend to write up a PR for that.</p>\n<p>I don't think relocations (<code>declare_func_in_data</code>, etc.) should actually apply to zero-initialized data...but cranelift-module happily lets you declare zero-initialized data and also declare that there should be various relocations applied to said data, which I don't think is going to translate well.  (If it is supposed to translate well, faerie, at least, currently has bugs in that area.)</p>\n<p>Is that line of thinking correct, i.e. there should be some additional checks around:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f76b36f73720508caa1a50ce4cf388b42855789a/cranelift/module/src/module.rs#L646-L652\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/f76b36f73720508caa1a50ce4cf388b42855789a/cranelift/module/src/module.rs#L646-L652\">https://github.com/bytecodealliance/wasmtime/blob/f76b36f73720508caa1a50ce4cf388b42855789a/cranelift/module/src/module.rs#L646-L652</a></p>\n<p>regarding zero-initialized data prior to handing things off to the backend?</p>\n</blockquote>",
        "id": 190306762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583946626
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1283#issuecomment-597941721\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1283#issuecomment-597941721\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1283\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1283\">Issue #1283</a>:</p>\n<blockquote>\n<p>Yeah, <code>cranelift-object</code> won't handle this correctly either. If it had to, the best it could do is choose which section based on the number of relocs (similiar to what <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4a443e4f10f520cdd88f49fa96d180a5d28d6b54/cranelift/object/src/backend.rs#L312\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/4a443e4f10f520cdd88f49fa96d180a5d28d6b54/cranelift/object/src/backend.rs#L312\">read only data does</a>). But I don't see a problem with disallowing these relocations in <code>cranelift-module</code>.</p>\n</blockquote>",
        "id": 190345860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583971893
    }
]