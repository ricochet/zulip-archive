[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5846\">PR #5846</a> from <code>improve-fma</code> to <code>main</code>:</p>\n<blockquote>\n<p>The relaxed-simd proposal for WebAssembly adds a fused-multiply-add operation for <code>v128</code> types so I was poking around at Cranelift's existing support for its <code>fma</code> instruction. I was also poking around at the x86_64 ISA's offerings for the FMA operation and ended up with this PR that improves the lowering of the <code>fma</code> instruction on the x64 backend in a number of ways:</p>\n<ul>\n<li>\n<p>A libcall-based fallback is now provided for <code>f32x4</code> and <code>f64x2</code> types in preparation for eventual support of the relaxed-simd proposal. These encodings are horribly slow, but it's expected that if FMA semantics must be guaranteed then it's the best that can be done without the <code>fma</code> feature. Otherwise it'll be up to producers (e.g. Wasmtime embedders) whether wasm-level FMA operations should be FMA or multiply-then-add.</p>\n</li>\n<li>\n<p>In addition to the existing <code>vfmadd213*</code> instructions opcodes were added for <code>vfmadd132*</code>. The <code>132</code> variant is selected based on which argument can have a sinkable load.</p>\n</li>\n<li>\n<p>Any argument in the <code>fma</code> CLIF instruction can now have a <code>sinkable_load</code> and it'll generate a single FMA instruction.</p>\n</li>\n<li>\n<p>All <code>vfnmadd*</code> opcodes were added as well. These are pattern-matched where one of the arguments to the CLIF instruction is an <code>fneg</code>. I opted to not add a new CLIF instruction here since it seemed like pattern matching was easy enough but I'm also not intimately familiar with the semantics here so if that's the preferred approach I can do that too.</p>\n</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 329204022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676989517
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5846#pullrequestreview-1308082728\">PR review</a>.</p>",
        "id": 329279773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677009519
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5846\">PR #5846</a> from <code>improve-fma</code> to <code>main</code>.</p>",
        "id": 329285951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677011609
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5846\">PR #5846</a>.</p>",
        "id": 329286694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677011881
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5846\">PR #5846</a>.</p>",
        "id": 329296615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677015310
    }
]