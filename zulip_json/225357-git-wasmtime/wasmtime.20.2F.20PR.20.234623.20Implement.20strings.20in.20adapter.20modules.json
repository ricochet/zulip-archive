[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623\">PR #4623</a> from <code>adapt-string</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is a hefty addition to Wasmtime's support for the component<br>\nmodel. This implements the final remaining type (in the current type<br>\nhierarchy) unimplemented in adapter module trampolines: strings. Strings<br>\nare the most complicated type to implement in adapter trampolines<br>\nbecause they are highly structured chunks of data in memory (according<br>\nto specific encodings). Additionally each lift/lower operation can<br>\nchoose its own encoding for strings meaning that Wasmtime, the host, may<br>\nhave to convert between any pairwise ordering of string encodings.</p>\n<p>The <code>CanonicalABI.md</code> in the component-model repo in general specifies<br>\nall the fiddly bits of string encoding so there's not a ton of wiggle<br>\nroom for Wasmtime to get creative. This PR largely \"just\" implements<br>\nthat. The high-level architecture of this implementation is:</p>\n<ul>\n<li>\n<p>Fused adapters are first identified to determine src/dst string<br>\n  encodings. This statically fixes what transcoding operation is being<br>\n  performed.</p>\n</li>\n<li>\n<p>The generated adapter will be responsible for managing calls to<br>\n<code>realloc</code> and performing bounds checks. The adapter itself does not<br>\n  perform memory copies or validation of string contents, however.<br>\n  Instead each transcoding operation is modeled as an imported function<br>\n  into the adapter module.  This means that the adapter module<br>\n  dynamically, during compile time, determines what string transcoders<br>\n  are needed. Note that an imported transcoder is not only parameterized<br>\n  over the transcoding operation but additionally which memory is the<br>\n  source and which is the destination.</p>\n</li>\n<li>\n<p>The imported core wasm functions are modeled as a new<br>\n<code>CoreDef::Transcoder</code> structure. These transcoders end up being small<br>\n  Cranelift-compiled trampolines. The Cranelift-compiled trampoline will<br>\n  load the actual base pointer of memory and add it to the relative<br>\n  pointers passed as function arguments. This trampoline then calls a<br>\n  transcoder \"libcall\" which enters Rust-defined functions for actual<br>\n  transcoding operations.</p>\n</li>\n<li>\n<p>Each possible transcoding operation is implemented in Rust with a<br>\n  unique name and a unique signature depending on the needs of the<br>\n  transcoder. I've tried to document inline what each transcoder does.</p>\n</li>\n</ul>\n<p>This means that the <code>Module::translate_string</code> in adapter modules is by<br>\nfar the largest translation method. The main reason for this is due to<br>\nthe management around calling the imported transcoder functions in the<br>\nface of validating string pointer/lengths and performing the dance of<br>\n<code>realloc</code>-vs-transcode at the right time. I've tried to ensure that each<br>\nindividual case in transcoding is documented well enough to understand<br>\nwhat's going on as well.</p>\n<p>Additionally in this PR is a full implementation in the host for the<br>\n<code>latin1+utf16</code> encoding which means that both lifting and lowering host<br>\nstrings now works with this encoding.</p>\n<p>Currently the implementation of each transcoder function is likely far<br>\nfrom optimal. Where possible I've leaned on the standard library itself<br>\nand for latin1-related things I'm leaning on the <code>encoding_rs</code> crate. I<br>\ninitially tried to implement everything with <code>encoding_rs</code> but was<br>\nunable to uniformly do so easily. For now I settled on trying to get a<br>\nknown-correct (even in the face of endianness) implementation for all of<br>\nthese transcoders. If an when performance becomes an issue it should be<br>\npossible to implement more optimized versions of each of these<br>\ntranscoding operations.</p>\n<p>Testing this commit has been somewhat difficult and my general plan,<br>\nlike with the <code>(list T)</code> type, is to rely heavily on fuzzing to cover<br>\nthe various cases here. In this PR though I've added a simple test that<br>\npushes some statically known strings through all the pairs of encodings<br>\nbetween source and destination. I've attempted to pick \"interesting\"<br>\nstrings that one way or another stress the various paths in each<br>\ntranscoding operation to ideally get full branch coverage there.<br>\nAdditionally a suite of \"negative\" tests have also been added to ensure<br>\nthat validity of encoding is actually checked.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n<p>Closes #4309</p>\n</blockquote>",
        "id": 292167833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659712631
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623\">PR #4623</a>.</p>",
        "id": 292167834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659712631
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623\">PR #4623</a> from <code>adapt-string</code> to <code>main</code>.</p>",
        "id": 292170063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659713620
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623\">PR #4623</a> from <code>adapt-string</code> to <code>main</code>.</p>",
        "id": 292184399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659720394
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#discussion_r939045458\">PR review comment</a>:</p>\n<blockquote>\n<p>This isn't <em>us</em> being optimistic tho, right? This optimism is prescribed by the spec, correct?</p>\n</blockquote>",
        "id": 292189256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659722995
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#pullrequestreview-1063690281\">PR review</a>.</p>",
        "id": 292189257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659722995
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#pullrequestreview-1063690281\">PR review</a>.</p>",
        "id": 292189258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659722995
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#discussion_r939044514\">PR review comment</a>:</p>\n<blockquote>\n<p>I feel like this method is already super large, so adding a bunch of large closures into it is not helping. How much stuff is this really closing over? Can it and the other closures be a separate method?</p>\n</blockquote>",
        "id": 292189259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659722995
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#discussion_r939047482\">PR review comment</a>:</p>\n<blockquote>\n<p>I thought that we settled on bounds checks regardless if the string is empty or not?</p>\n</blockquote>",
        "id": 292189260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659722995
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623\">PR #4623</a> from <code>adapt-string</code> to <code>main</code>.</p>",
        "id": 292417383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659972565
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#pullrequestreview-1065379388\">PR review</a>.</p>",
        "id": 292417391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659972573
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#discussion_r940377173\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, I've split out everything now.</p>\n</blockquote>",
        "id": 292417393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659972573
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#pullrequestreview-1065379493\">PR review</a>.</p>",
        "id": 292417399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659972577
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#discussion_r940377247\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed!</p>\n</blockquote>",
        "id": 292417400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659972577
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#pullrequestreview-1065380290\">PR review</a>.</p>",
        "id": 292417503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659972609
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623#discussion_r940377765\">PR review comment</a>:</p>\n<blockquote>\n<p>This was written before the spec changed, and I was originally going to land this first and then fixup all our handling of zero-length arrays and things but I went ahead and updated this.</p>\n</blockquote>",
        "id": 292417505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659972609
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623\">PR #4623</a>.</p>",
        "id": 292417517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659972614
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4623\">PR #4623</a>.</p>",
        "id": 292421839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659974518
    }
]