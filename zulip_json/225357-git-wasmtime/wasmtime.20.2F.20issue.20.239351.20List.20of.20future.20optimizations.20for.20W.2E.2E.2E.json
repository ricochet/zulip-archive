[
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift<span aria-label=\"goal\" class=\"emoji emoji-1f945\" role=\"img\" title=\"goal\">:goal:</span>optimize-speed label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">Issue #9351</a>.</p>",
        "id": 474081568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727801646
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the performance label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">Issue #9351</a>.</p>",
        "id": 474081569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727801646
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the wasmtime:ref-types label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">Issue #9351</a>.</p>",
        "id": 474081571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727801647
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<ul>\n<li>[ ] Speed up getting and setting <code>funcref</code>s inside GC objects: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Type-based alias analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] Escape analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] Reuse linear memories and their optimized bounds checks for Wasm GC heaps: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n</ul>\n</blockquote>",
        "id": 474081578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727801648
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351#issuecomment-2386514321\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:ref-types\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: wasmtime:ref-types</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 474081801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727801693
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<ul>\n<li>[ ] Speed up getting and setting <code>funcref</code>s inside GC objects: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a><ul>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code></li>\n</ul>\n</li>\n<li>[ ] Type-based alias analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] Escape analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] Reuse linear memories and their optimized bounds checks for Wasm GC heaps: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n</ul>\n</blockquote>",
        "id": 474081975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727801723
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<ul>\n<li>[ ] Speed up getting and setting <code>funcref</code>s inside GC objects: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a><ul>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code></li>\n</ul>\n</li>\n<li>[ ] Type-based alias analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] Escape analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] Reuse linear memories and their optimized bounds checks for Wasm GC heaps: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a><br>\n```[tasklist]</li>\n</ul>\n<h3>Tasks</h3>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 474111891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727810879
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<ul>\n<li>[ ] Speed up getting and setting <code>funcref</code>s inside GC objects: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a><ul>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code></li>\n</ul>\n</li>\n<li>[ ] Type-based alias analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] Escape analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] Reuse linear memories and their optimized bounds checks for Wasm GC heaps: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a><br>\n```[tasklist]</li>\n</ul>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 474111944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727810886
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<ul>\n<li>[ ] Speed up getting and setting <code>funcref</code>s inside GC objects: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a><ul>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code></li>\n</ul>\n</li>\n<li>[ ] Type-based alias analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] Escape analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] Reuse linear memories and their optimized bounds checks for Wasm GC heaps: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a><br>\n```[tasklist]</li>\n</ul>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 474111968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727810897
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<ul>\n<li>[ ] Speed up getting and setting <code>funcref</code>s inside GC objects: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a><ul>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code></li>\n</ul>\n</li>\n<li>[ ] Type-based alias analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] Escape analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] Reuse linear memories and their optimized bounds checks for Wasm GC heaps: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a><br>\n```[tasklist]</li>\n</ul>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 474111995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727810911
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<ul>\n<li>[ ] Speed up getting and setting <code>funcref</code>s inside GC objects: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a><ul>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code></li>\n</ul>\n</li>\n<li>[ ] Type-based alias analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] Escape analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] Reuse linear memories and their optimized bounds checks for Wasm GC heaps: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a><br>\n```[tasklist]</li>\n</ul>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 474112012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727810919
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<ul>\n<li>[ ] Speed up getting and setting <code>funcref</code>s inside GC objects: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a><ul>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code></li>\n</ul>\n</li>\n<li>[ ] Type-based alias analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] Escape analysis for Wasm GC: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] Reuse linear memories and their optimized bounds checks for Wasm GC heaps: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a><br>\n```[tasklist]</li>\n</ul>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 474112058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727810932
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<p>This is a tracking issue collecting all of our ideas for improving Wasm GC performance and potential optimizations we could implement.</p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code>. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 474112672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727811149
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<p>This is a tracking issue collecting all of our ideas for improving Wasm GC performance and potential optimizations we could implement.</p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code>. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Use bulk <code>memcpy</code>-style APIs to implement <code>array.copy</code> when possible and do GC barriers inline when not possible</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 475370943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728327602
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<p>This is a tracking issue collecting all of our ideas for improving Wasm GC performance and potential optimizations we could implement.</p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code>. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Use bulk <code>memcpy</code>-style APIs to implement <code>array.copy</code> when possible and do GC barriers inline when not possible</li>\n<li>[ ] Expose type registry's supertypes arrays to Wasm, so it can do the O(1) subtype checks inline</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 475949396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728505045
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<p>This is a tracking issue collecting all of our ideas for improving Wasm GC performance and potential optimizations we could implement.</p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code>. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Use bulk <code>memcpy</code>-style APIs to implement <code>array.copy</code> when possible and do GC barriers inline when not possible</li>\n<li>[ ] Expose type registry's supertypes arrays to Wasm, so it can do the O(1) subtype checks inline</li>\n<li>[ ] Propagate <code>trapz</code> backwards from <code>ref.cast</code> into the branch-y instance-of check that it emits. Similar for the jumps inside a <code>br_on_cast[_fail]</code>'s instance-of check. See <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9437#discussion_r1795656924\">https://github.com/bytecodealliance/wasmtime/pull/9437#discussion_r1795656924</a> for details. Alternatively, clean this stuff up in the mid-end: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\">https://github.com/bytecodealliance/wasmtime/issues/6106</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476161308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728574021
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<p>This is a tracking issue collecting all of our ideas for improving Wasm GC performance and potential optimizations we could implement.</p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9347\">https://github.com/bytecodealliance/wasmtime/issues/9347</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9349\">https://github.com/bytecodealliance/wasmtime/issues/9349</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9348\">https://github.com/bytecodealliance/wasmtime/issues/9348</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Const fold through <code>uadd_overflow_trap</code>/<code>trap{z,nz}</code> insts that show up frequently in GC heap accesses. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Also add a mid-end rule like <code>(uadd_overflow_trap (uextend x) (uextend y)) ==&gt; (iadd (uextend x) (uextend y))</code>. Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></li>\n<li>[ ] Use bulk <code>memcpy</code>-style APIs to implement <code>array.copy</code> when possible and do GC barriers inline when not possible</li>\n<li>[ ] Expose type registry's supertypes arrays to Wasm, so it can do the O(1) subtype checks inline</li>\n<li>[ ] Propagate <code>trapz</code> backwards from <code>ref.cast</code> into the branch-y instance-of check that it emits. Similar for the jumps inside a <code>br_on_cast[_fail]</code>'s instance-of check. See <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9437#discussion_r1795656924\">https://github.com/bytecodealliance/wasmtime/pull/9437#discussion_r1795656924</a> for details. Alternatively, clean this stuff up in the mid-end: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\">https://github.com/bytecodealliance/wasmtime/issues/6106</a></li>\n<li>[ ] Speed up <code>call_indirect</code> in the face of subtyping. Much of this can be addressed by letting Wasm to the O(1) subtype checks inline, but it is still additional work to be done on every <code>call_indirect</code> vs MVP wasm. We should investigate inline caches and such again.</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476232079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728597346
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351#issuecomment-2406113887\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">issue #9351</a>:</p>\n<blockquote>\n<p>See also <a href=\"https://github.com/WebAssembly/gc/issues/565\">https://github.com/WebAssembly/gc/issues/565</a> for potential benchmarks.</p>\n</blockquote>",
        "id": 476232637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728597551
    }
]