[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805\">PR #6805</a> from <code>alexcrichton:aarch64-amode</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit moves the computation of the <code>AMode</code> enum for addressing<br>\nfrom Rust into ISLE. This enables deleting a good deal of Rust code in<br>\nfavor of (hopefully) more readable ISLE code.</p>\n<p>This does not mirror the preexisting logic exactly but instead takes a<br>\ndifferent approach for generating the <code>AMode</code>. Previously the entire<br>\nchain of <code>iadd</code>s input into an address were unfolded into 32-bit and<br>\n64-bit operations and then those were re-combined as possible into an<br>\n<code>AMode</code> (possibly emitting <code>add</code> instructions. Instead now pattern<br>\nmatching is used to represent this. The net result is that amodes are<br>\nemitted slightly differently here and there in a number of updated test<br>\ncases.</p>\n<p>I've tried to verify in all test cases that the number of instructions<br>\nhas not increased and the same logical operation is happening. The exact<br>\n<code>AMode</code> may differ but at least instruction-wise this shouldn't be a<br>\nregression. My hope is that if anything needs changing that can be<br>\nrepresented with updates to the rule precedence in ISLE or various other<br>\nspecial cases.</p>\n<p>One part I found a little surprising was that the immediate with a<br>\nload/store instruction is not actually used much of the time. I naively<br>\nthought that the mid-end optimizations would move iadd immediates into<br>\nthe load/store immediate but that is not the case. This necessitated two<br>\nextra ISLE rules to manually peel off immediates and fold them into the<br>\nload/store immediate.</p>\n<hr>\n<p>I'll also note here that there were a number of related refactorings and such to enable this change, so I'd recommend reading commit-by-commit to get a better idea of why things are changed and why what got updated go updated.</p>\n</blockquote>",
        "id": 381991964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691190829
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805\">PR #6805</a>.</p>",
        "id": 381991965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691190829
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805\">PR #6805</a>.</p>",
        "id": 381991966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691190829
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805\">PR #6805</a>.</p>",
        "id": 383146120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691556450
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#discussion_r1287930862\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a little odd -- we no longer fold the sign-extend into its two uses with builtin extend modes on the <code>add</code> and in the <code>AMode</code>; and also we have two separate adds of constants that don't get folded together. Any idea what's causing this?</p>\n</blockquote>",
        "id": 383146568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691556705
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#pullrequestreview-1568702283\">PR review</a>:</p>\n<blockquote>\n<p>I'll yoink this review from @abrown as I'm happy to take aarch64 stuff and am probably a little more familiar...</p>\n<p>Overall this PR is fantastic -- the pattern-matching is so much cleaner. Thanks for porting this over!</p>\n<p>I just spotted one possibly questionable regression below but if we can explain it and justify it as a rare case then I don't think it should prevent us from merging; just want to be sure.</p>\n</blockquote>",
        "id": 383146569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691556705
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#pullrequestreview-1568702283\">PR review</a>:</p>\n<blockquote>\n<p>I'll yoink this review from @abrown as I'm happy to take aarch64 stuff and am probably a little more familiar...</p>\n<p>Overall this PR is fantastic -- the pattern-matching is so much cleaner. Thanks for porting this over!</p>\n<p>I just spotted one possibly questionable regression below but if we can explain it and justify it as a rare case then I don't think it should prevent us from merging; just want to be sure.</p>\n</blockquote>",
        "id": 383146570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691556705
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#pullrequestreview-1570262605\">PR review</a>.</p>",
        "id": 383377833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691604169
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#discussion_r1288990731\">PR review comment</a>:</p>\n<blockquote>\n<p>For the constants I know those aren't combined because one is an <code>iconst</code> operand to an add and one is the offset listed on the <code>load</code> instruction. Those aren't currently combined with egraphs (or anywhere else I think) so it ends up coming out here as two constants. Looks like wasm translation doesn't use the offset on <code>load</code> and <code>store</code> though so this at least shouldn't affect that.</p>\n<p>The sign-extend I think doens't pattern-match here due to its depth in the <code>iadd</code> tree which looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"o\">+</span>\n<span class=\"w\">             </span><span class=\"o\">-------</span>\n<span class=\"w\">            </span><span class=\"o\">/</span><span class=\"w\">        </span><span class=\"err\">\\</span>\n\n<span class=\"w\">           </span><span class=\"o\">+</span><span class=\"w\">          </span><span class=\"o\">+</span>\n<span class=\"w\">          </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\">        </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n\n<span class=\"w\">         </span><span class=\"o\">+</span><span class=\"w\">  </span><span class=\"n\">v0</span><span class=\"w\">      </span><span class=\"o\">+</span><span class=\"w\">  </span><span class=\"n\">v0</span>\n<span class=\"w\">        </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\">        </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">       </span><span class=\"o\">/</span><span class=\"w\">   </span><span class=\"mi\">32</span><span class=\"w\">     </span><span class=\"o\">/</span><span class=\"w\">   </span><span class=\"mi\">32</span>\n<span class=\"w\">      </span><span class=\"o\">/</span><span class=\"w\">          </span><span class=\"o\">/</span>\n<span class=\"w\">  </span><span class=\"n\">sext</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"n\">sext</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>there the <code>sextend</code> nodes are so deep in the tree the pattern matching isn't picking them out.</p>\n<p>That's at least why it's not matching, but as to the impact of it I'm not really sure. I don't think this affects wasm much since wasm typically has one main sign-extend to pattern match, but I'm also not super-certain about that.</p>\n</blockquote>",
        "id": 383377835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691604170
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#pullrequestreview-1570291766\">PR review</a>.</p>",
        "id": 383383178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691605395
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#discussion_r1289018550\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, yeah, that makes sense. The old handwritten code would traverse the tree arbitrarily deep and gather all the constant offsets, extends, etc., which is why it can do better here I think. But it's possible that this doesn't matter too much in practice.</p>\n<p>If we can just spot-check performance (<code>bz2</code> and <code>spidermonkey</code> from Sightglass or whatnot) to make sure, I think I'm happy with this regression at the fringe.</p>\n</blockquote>",
        "id": 383383181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691605395
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#pullrequestreview-1570371574\">PR review</a>.</p>",
        "id": 383395626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691608414
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#discussion_r1289082671\">PR review comment</a>:</p>\n<blockquote>\n<p>Sightglass shows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">142380.50</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">5778.82</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"o\">-</span><span class=\"n\">amode</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">8232969</span><span class=\"w\"> </span><span class=\"mf\">8267115.57</span><span class=\"w\"> </span><span class=\"mi\">8308418</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">8072036</span><span class=\"w\"> </span><span class=\"mf\">8124735.07</span><span class=\"w\"> </span><span class=\"mi\">8159535</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"o\">-</span><span class=\"n\">amode</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1706947.06</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">1093497.57</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"o\">-</span><span class=\"n\">amode</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">151473126</span><span class=\"w\"> </span><span class=\"mf\">155506902.82</span><span class=\"w\"> </span><span class=\"mi\">158095691</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">145110211</span><span class=\"w\"> </span><span class=\"mf\">153799955.76</span><span class=\"w\"> </span><span class=\"mi\">160548952</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"o\">-</span><span class=\"n\">amode</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>\n<p>and everything else is \"No difference in performance.\"</p>\n<p>I haven't done much to make this machine super reliable about performance gathering, so I'd interpret this as \"no difference\" across the board and the 2% here is probably noise.</p>\n</blockquote>",
        "id": 383395628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691608414
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#discussion_r1289082671\">PR review comment</a>.</p>",
        "id": 383395629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691608414
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#pullrequestreview-1570410979\">PR review</a>.</p>",
        "id": 383399892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691609622
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805#discussion_r1289107352\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds good -- ship it!</p>\n</blockquote>",
        "id": 383399893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691609622
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805\">PR #6805</a>.</p>",
        "id": 383419513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691615821
    }
]