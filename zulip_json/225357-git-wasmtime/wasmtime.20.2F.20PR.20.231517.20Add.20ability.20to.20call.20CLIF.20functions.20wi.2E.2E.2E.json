[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194227576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586984785
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194229811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586986000
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194230768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586986475
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194556496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587232788
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194566319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587248132
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/bnjbvr\" title=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a>.</p>",
        "id": 194566387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587248208
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194567043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587249239
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194567097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587249318
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194963755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587576056
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194969504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587578661
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-400072537\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-400072537\">PR Review</a>.</p>",
        "id": 195219645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587748993
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-400072537\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-400072537\">PR Review</a>.</p>",
        "id": 195219646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587748993
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414684940\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414684940\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think we don't need to worry about the clone, this is an error path, so not perf sensitive. Could it be <code>e.to_string()</code> to avoid the macro use?</p>\n</blockquote>",
        "id": 195219649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587748994
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414686603\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414686603\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Instead, could this look if trimmed is exactly run or print? I don't see the value in the ambiguity. If you agree with this, then we could rename this function <code>is_run_or_print_command</code> (since otherwise, there's a \"run_command\" called \"run\" and another called \"print\", which is a bit confusing).</p>\n<p>In addition to this, could this return the command it found (so an <code>Option</code>, with <code>None</code> equivalent to current's false), instead of letting the caller clean up comments again and analyze the value?</p>\n</blockquote>",
        "id": 195219650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587748994
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414721804\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414721804\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Do we need to trim comments again here? There can't be a comment within a comment, so this would only removed spaces at the start of <code>comment.text</code>, right? If so, and if we want this, could we do it explicitly with <code>trim_start_matches(\" \")</code> instead?</p>\n</blockquote>",
        "id": 195219652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587748994
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414724315\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414724315\">PR Review Comment</a>:</p>\n<blockquote>\n<p>No need to worry about cloning here, it's not a perf-sensitive path. Can you use <code>e.to_string()</code> though?</p>\n</blockquote>",
        "id": 195219654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587748994
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414735576\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414735576\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could we just do a write here, using a transmute? It avoids the indirection through <code>Trampoline::write_value_to</code>, which is a bit unsettling.</p>\n<p>If we did the same for reads, then the need for the <code>Trampoline</code> data structure is much lower, and could probably be avoided. Or we could hide the writing and reading into a different new <code>UnboxedValues</code> struct type (that'd be a vec&lt;u128&gt;); then the <code>slot_size</code> could be an attribute of this struct, a const func returning the size of the values it's storing (and then we can remove a bunch of comments, and have more confidence in the size being sync'd with the storage type). What do you think?</p>\n</blockquote>",
        "id": 195219655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587748994
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414726262\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414726262\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could it also check that the host architecture is equal to the requested ISA's architecture?</p>\n</blockquote>",
        "id": 195219656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587748994
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414726985\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r414726985\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could we clone the function's signature before, since it's the only field that's used after (and it's cheap), and then pass the ownership to <code>compile</code>?</p>\n</blockquote>",
        "id": 195219657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587748994
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401230239\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401230239\">PR Review</a>.</p>",
        "id": 195459306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588013203
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416062084\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416062084\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Those checks should already exist at a higher level, e.g. <code>test_run.rs</code>, and I didn't want to limit this code too much because there are cases (x86 32-bit vs 64-bit) where multiple Cranelift ISAs could run on the same machine.</p>\n</blockquote>",
        "id": 195459307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588013204
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401230639\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401230639\">PR Review</a>.</p>",
        "id": 195459371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588013239
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416062433\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416062433\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good idea... done.</p>\n</blockquote>",
        "id": 195459372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588013239
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 195459875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588013476
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401236768\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401236768\">PR Review</a>.</p>",
        "id": 195460354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588013726
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416068146\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416068146\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah, this is a good direction. These weird <code>trimmed_comment_chars</code> and <code>is_potential_run_command</code> functions were trying to do some lookahead to see if we actually needed to really parse the comment. I moved that logic into <code>parse_run_command</code> (which is in the parser module, where this functionality should be) and made it return <code>ParseResult&lt;Option&lt;RunCommand&gt;&gt;</code> instead of <code>ParseResult&lt;RunCommand&gt;</code>. The signature is a bit more complex but I think it is headed more in the direction you are suggesting.</p>\n</blockquote>",
        "id": 195460356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588013726
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401245125\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401245125\">PR Review</a>.</p>",
        "id": 195461734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588014439
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416075808\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416075808\">PR Review Comment</a>:</p>\n<blockquote>\n<p>32bit x86 doesn't work in 64bit processes.</p>\n</blockquote>",
        "id": 195461735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588014439
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401255316\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-401255316\">PR Review</a>.</p>",
        "id": 195463407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588015330
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416085002\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r416085002\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I like having the <code>Trampoline</code> structure around to know what we are talking about; otherwise we have an <code>Mmap</code> floating around that is implicitly a trampoline. But that could be a type alias, I guess. I think your <code>UnboxedValues</code> makes sense and I started down this road but I'm not too confident about the transmute stuff--I will ping you on Zulip to see what you think.</p>\n</blockquote>",
        "id": 195463408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588015330
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 195646120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588120175
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/bnjbvr\" title=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a>.</p>",
        "id": 195721311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588171935
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-403601590\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-403601590\">PR Review</a>.</p>",
        "id": 195851188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588258688
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-403601590\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-403601590\">PR Review</a>.</p>",
        "id": 195851190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588258688
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r418073403\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r418073403\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: can we put the <code>unsafe</code> within the <code>push</code>, to make it clear that the push itself isn't an issue?</p>\n</blockquote>",
        "id": 195851191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588258688
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r418072865\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r418072865\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This will manifest as a panic when running a test, right? Is there a way to propagate this as an error to the test runner, with the right file location, instead?</p>\n</blockquote>",
        "id": 195851192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588258688
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r418184148\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#discussion_r418184148\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>Parser::parse_data_value</code> actually does that type checking before we ever get here; I'm going to change this to an <code>assert!</code> since that more clearly indicates the intent of this check.</p>\n</blockquote>",
        "id": 195876168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588268910
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-403744867\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517#pullrequestreview-403744867\">PR Review</a>.</p>",
        "id": 195876169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588268910
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a> from <code>run-clif</code> to <code>master</code>:</p>\n<blockquote>\n<p>This resolves the work started in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">https://github.com/bytecodealliance/cranelift/pull/1231</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1436\">https://github.com/bytecodealliance/wasmtime/pull/1436</a>. Cranelift filetests currently have the ability to run CLIF functions with a signature like <code>() -&gt; b*</code> and check that the result is true under the <code>test run</code> directive. This PR adds the ability to call functions with arbitrary arguments and non-boolean returns and either print the result or check against a list of expected results:</p>\n<ul>\n<li><code>run</code> commands look like <code>; run: %add(2, 2) == 4</code> or <code>; run: %add(2, 2) != 5</code> and verify that the executed CLIF function returns the expected value</li>\n<li><code>print</code> commands look like <code>; print: %add(2, 2)</code> and print the result of the function to stdout</li>\n</ul>\n<p>To make this work, this PR compiles a single Cranelift <code>Function</code> into a <code>CompiledFunction</code> using a <code>SingleFunctionCompiler</code>. Because we will not know the signature of the function until runtime, we use a <code>Trampoline</code> to place the values in the appropriate location for the calling convention; this should look a lot like what @alexcrichton is doing with <code>VMTrampoline</code> in wasmtime (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/api/src/func.rs#L510-L526</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\" title=\"https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260\">https://github.com/bytecodealliance/wasmtime/blob/3b7cb6ee64469470fcdd68e185abca8eb2a1b20a/crates/jit/src/compiler.rs#L260</a>). To avoid re-compiling <code>Trampoline</code>s for the same function signatures, <code>Trampoline</code>s are cached in the <code>SingleFunctionCompiler</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 195876535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588269076
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1517\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1517\">PR #1517</a>.</p>",
        "id": 195880562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588270863
    }
]