[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\">issue #6106</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We should allow the egraph pass to rewrite instructions which have no result values.</p>\n<p>This resembles #5908, in that no-result instructions have side effects and that currently prevents us from optimizing them. However the implementation details are quite different.</p>\n<h4>Benefit</h4>\n<p>Our current ISLE <code>simplify</code> term isn't usable for this because it can only rewrite an SSA value into other SSA values, so instructions without any value results have nothing to replace.</p>\n<p>The only rewrites which need to be in the egraph pass are those which either pattern-match on SSA values or replace SSA values. But instructions which don't produce value results can still be in both of those categories. For example, if we pattern match the condition operand to <code>brif</code> and find that it's a constant, we can rewrite it to an unconditional <code>jump</code>. Removing the unreachable edge from the CFG can then mean that some block parameter is always equivalent to another SSA value, enabling more simplification rules.</p>\n<p>The biggest benefits only come in combination with other optimizations that we haven't written yet. Notably, we need to integrate the \"remove constant phis\" pass into the egraph pass before branch-folding will change any later optimization results.</p>\n<h4>Implementation</h4>\n<p>Which no-result instructions can benefit from rewriting? I claim it's the ones which have no fixed value results, but have at least one fixed value operand. They could have variable operands, variable results, or block-call parameters, but we won't touch any of those.</p>\n<p>A rewrite pattern is always based on knowing something about the meaning of a value operand. For variable operands like the function parameters in a <code>call</code>, the return values in a <code>return</code>, or the block parameters in a <code>jump</code>, there isn't any generic pattern we can apply to them because we don't know what they mean. Put another way, we don't need any opcode-specific handling for instructions where all we can do is update their value operands to reflect other rewrites.</p>\n<p>Among those instructions, we also need to exclude store instructions, because we need alias analysis to rewrite those correctly.</p>\n<p>The current instructions which meet these criteria are:</p>\n<ul>\n<li>Brif</li>\n<li>BrTable</li>\n<li>Trapz</li>\n<li>Trapnz</li>\n<li>ResumableTrapnz</li>\n<li>CallIndirect</li>\n<li>ReturnCallIndirect</li>\n<li>SetPinnedReg</li>\n</ul>\n<p>Conditional branches, either as block terminators or conditional traps, are definitely interesting to rewrite.</p>\n<ul>\n<li><code>Brif</code> can turn into <code>Jump</code>;</li>\n<li><code>BrTable</code> can turn into either <code>Brif</code> or <code>Jump</code>;</li>\n<li>and <code>Trapz</code>/<code>Trapnz</code> can turn into either <code>Trap</code> or <code>Nop</code>.<br>\nRewriting traps resembles #6080 but in this case we're already replacing a no-result instruction so the mechanism looks pretty different.</li>\n</ul>\n<p>Indirect calls are interesting to rewrite if we can prove that the call target is a constant.</p>\n<p>I don't think SetPinnedReg has any useful rewrites based on the value operand, because it doesn't have any defined meaning in CLIF. It's just however the frontend wants to use it.</p>\n<h4>Alternatives</h4>\n<p>There are some implementation choices we haven't decided on.</p>\n<p>I'd like to do this in ISLE rules because we may want to pattern-match arbitrary subtrees of the data-flow graph. However @cfallin has argued for doing this in pure Rust until we have good reason to implement rewrite rules that are complicated enough to justify hooking up ISLE.</p>\n<p>We might find we have several alternative instructions to choose from, like we currently do for the <code>simplify</code> term. We could:</p>\n<ul>\n<li>Save a list of alternative instructions during the equality saturation phase, but that makes it difficult to do further optimizations based on simplifying the CFG.</li>\n<li>Defer rewriting these instructions until elaboration when we have the cost of every operand, but then it's not just difficult but impossible to make use of CFG simplifications during equality saturation.</li>\n<li>Compute instruction costs incrementally during equality saturation so we can pick the best option immediately and optimize the CFG based on the result. @cfallin says that's possible but had reasons for not doing it.</li>\n<li>Require these rewrite rules to pick a single alternative based on a static cost model. This is certainly easiest and may be good enough.</li>\n</ul>\n</blockquote>",
        "id": 344963727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679949566
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106#issuecomment-1486058337\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\">issue #6106</a>:</p>\n<blockquote>\n<p>Follow-on work for this would ideally update the CFG after each control-flow rewrite, including updating the post-order and dom-tree. This isn't necessary initially though.</p>\n<p>I believe the post-order can be updated incrementally as long as edges are only removed from the CFG, never added. I think the post-order remains valid without any changes unless blocks become unreachable. If they do, removing all the unreachable blocks from the post-order while preserving the order of the remaining blocks should produce a new valid post-order.</p>\n<p>I think that when CFG edges are only removed, a block can only move down the dom-tree. I think only the blocks which were the target of a removed edge can have their immediate dominators change. And I have a gut feeling that as long as the post-order is accurate, recomputing the immediate dominator of each block is a local operation that doesn't require re-doing the fixpoint.</p>\n<p>I'm not especially confident about any of the above though.</p>\n<p>Meanwhile, here are some examples of valid rewrites which are more complicated than just constant-propagation. I don't know if any of these specific patterns occur much or at all. It's just that since I can think of a bunch pretty quickly I'm inclined to guess that we will find patterns of this level of complexity in real code.</p>\n<p>For <code>brif</code>, <code>trapz</code>, or <code>trapnz</code>:</p>\n<ul>\n<li>when controlled by an <code>icmp</code> against zero, we can remove the <code>icmp</code> in many cases</li>\n<li>when controlled by a <code>bor</code> or <code>umax</code> against a non-zero value, or <code>smax</code> against a positive value, or <code>smin</code> against a negative value, we can treat the condition as always non-zero</li>\n</ul>\n<p>For <code>br_table</code>:</p>\n<ul>\n<li>when controlled by a <code>select</code> where both the true and false cases are constants, we can replace with <code>brif</code> controlled by the same input as the original <code>select</code></li>\n<li>when controlled by a <code>umin</code> with a constant, we can make its jump-table length equal the constant, and remove the <code>umin</code></li>\n<li>when controlled by an <code>icmp</code>, we can replace with <code>brif</code> since the result of <code>icmp</code> is either 0 or 1</li>\n<li>when controlled by a <code>urem</code> with a constant (or an equivalent <code>band</code>), we can truncate its jump-table</li>\n<li>when controlled by an <code>isub</code> with a small constant N, we can insert N copies of the default target at the beginning of the jump-table and remove the <code>isub</code></li>\n<li>when controlled by an <code>ishl</code> with a constant shift N, we can remove jump-table targets which aren't a multiple of 2^N and replace the <code>ishl</code> with a <code>band</code></li>\n<li>when controlled by a <code>umul</code> with a constant and we can prove the multiply doesn't overflow, we can remove jump-table targets which aren't a multiple of the constant and remove the <code>umul</code></li>\n</ul>\n<p>In many of these cases we can remove pure instructions, but only because of the context in which they're used, not because they're inherently equivalent to anything else. So purely value-based equality saturation can't implement these rules.</p>\n<p>Many of these <code>br_table</code> rules can produce new instructions which can match other rules. Some, like the <code>isub</code> rule, may not always be improvements but may expose other opportunities which are. In short, these look a lot like the sorts of cases we want equality saturation for in the first place.</p>\n<p>Some of these examples could be subsumed by either value range analysis or known-bits analysis, but not all.</p>\n</blockquote>",
        "id": 345002074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679965140
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\">issue #6106</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We should allow the egraph pass to rewrite instructions which have no result values.</p>\n<p>This resembles #5908, in that no-result instructions have side effects and that currently prevents us from optimizing them. However the implementation details are quite different.</p>\n<h4>Benefit</h4>\n<p>Our current ISLE <code>simplify</code> term isn't usable for this because it can only rewrite an SSA value into other SSA values, so instructions without any value results have nothing to replace.</p>\n<p>The only rewrites which need to be in the egraph pass are those which either pattern-match on SSA values or replace SSA values. But instructions which don't produce value results can still be in both of those categories. For example, if we pattern match the condition operand to <code>brif</code> and find that it's a constant, we can rewrite it to an unconditional <code>jump</code>. Removing the unreachable edge from the CFG can then mean that some block parameter is always equivalent to another SSA value, enabling more simplification rules.</p>\n<p>The biggest benefits only come in combination with other optimizations that we haven't written yet. Notably, we need to integrate the \"remove constant phis\" pass into the egraph pass before branch-folding will change any later optimization results.</p>\n<h4>Implementation</h4>\n<p>Which no-result instructions can benefit from rewriting? I claim it's the ones which have no fixed value results, but have at least one fixed value operand. They could have variable operands, variable results, or block-call parameters, but we won't touch any of those.</p>\n<p>A rewrite pattern is always based on knowing something about the meaning of a value operand. For variable operands like the function parameters in a <code>call</code>, the return values in a <code>return</code>, or the block parameters in a <code>jump</code>, there isn't any generic pattern we can apply to them because we don't know what they mean. Put another way, we don't need any opcode-specific handling for instructions where all we can do is update their value operands to reflect other rewrites.</p>\n<p>Among those instructions, we also need to exclude store instructions, because we need alias analysis to rewrite those correctly.</p>\n<p>The current instructions which meet these criteria are:</p>\n<ul>\n<li>Brif</li>\n<li>BrTable</li>\n<li>Trapz</li>\n<li>Trapnz</li>\n<li>ResumableTrapnz</li>\n<li>CallIndirect</li>\n<li>ReturnCallIndirect</li>\n<li>SetPinnedReg</li>\n</ul>\n<p>Conditional branches, either as block terminators or conditional traps, are definitely interesting to rewrite.</p>\n<ul>\n<li><code>Brif</code> can turn into <code>Jump</code>;</li>\n<li><code>BrTable</code> can turn into either <code>Brif</code> or <code>Jump</code>;</li>\n<li>and <code>Trapz</code>/<code>Trapnz</code> can turn into either <code>Trap</code> or <code>Nop</code>.<br>\nRewriting traps resembles #6080 but in this case we're already replacing a no-result instruction so the mechanism looks pretty different.</li>\n</ul>\n<p>Indirect calls are interesting to rewrite if we can prove that the call target is a constant.</p>\n<p>I don't think SetPinnedReg has any useful rewrites based on the value operand, because it doesn't have any defined meaning in CLIF. It's just however the frontend wants to use it.</p>\n<h4>Alternatives</h4>\n<p>There are some implementation choices we haven't decided on.</p>\n<p>I'd like to do this in ISLE rules because we may want to pattern-match arbitrary subtrees of the data-flow graph. However @cfallin has argued for doing this in pure Rust until we have good reason to implement rewrite rules that are complicated enough to justify hooking up ISLE.</p>\n<p>We might find we have several alternative instructions to choose from, like we currently do for the <code>simplify</code> term. We could:</p>\n<ul>\n<li>Save a list of alternative instructions during the equality saturation phase, but that makes it difficult to do further optimizations based on simplifying the CFG.</li>\n<li>Defer rewriting these instructions until elaboration when we have the cost of every operand, but then it's not just difficult but impossible to make use of CFG simplifications during equality saturation.</li>\n<li>Compute instruction costs incrementally during equality saturation so we can pick the best option immediately and optimize the CFG based on the result. @cfallin says that's possible but had reasons for not doing it.</li>\n<li>Require these rewrite rules to pick a single alternative based on a static cost model. This is certainly easiest and may be good enough.</li>\n</ul>\n</blockquote>",
        "id": 345813457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680223395
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\">issue #6106</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We should allow the egraph pass to rewrite instructions which have no result values.</p>\n<p>This resembles #5908, in that no-result instructions have side effects and that currently prevents us from optimizing them. However the implementation details are quite different.</p>\n<h4>Benefit</h4>\n<p>Our current ISLE <code>simplify</code> term isn't usable for this because it can only rewrite an SSA value into other SSA values, so instructions without any value results have nothing to replace.</p>\n<p>The only rewrites which need to be in the egraph pass are those which either pattern-match on SSA values or replace SSA values. But instructions which don't produce value results can still be in both of those categories. For example, if we pattern match the condition operand to <code>brif</code> and find that it's a constant, we can rewrite it to an unconditional <code>jump</code>. Removing the unreachable edge from the CFG can then mean that some block parameter is always equivalent to another SSA value, enabling more simplification rules.</p>\n<p>The biggest benefits only come in combination with other optimizations that we haven't written yet. Notably, we need to integrate the \"remove constant phis\" pass into the egraph pass before branch-folding will change any later optimization results.</p>\n<h4>Implementation</h4>\n<p>Which no-result instructions can benefit from rewriting? I claim it's the ones which have no fixed value results, but have at least one fixed value operand. They could have variable operands, variable results, or block-call parameters, but we won't touch any of those.</p>\n<p>A rewrite pattern is always based on knowing something about the meaning of a value operand. For variable operands like the function parameters in a <code>call</code>, the return values in a <code>return</code>, or the block parameters in a <code>jump</code>, there isn't any generic pattern we can apply to them because we don't know what they mean. Put another way, we don't need any opcode-specific handling for instructions where all we can do is update their value operands to reflect other rewrites.</p>\n<p>Among those instructions, we also need to exclude store instructions, because we need alias analysis to rewrite those correctly.</p>\n<p>The current instructions which meet these criteria are:</p>\n<ul>\n<li>Brif</li>\n<li>BrTable</li>\n<li>Trapz</li>\n<li>Trapnz</li>\n<li>ResumableTrapnz</li>\n<li>CallIndirect</li>\n<li>ReturnCallIndirect</li>\n<li>SetPinnedReg</li>\n</ul>\n<p>Conditional branches, either as block terminators or conditional traps, are definitely interesting to rewrite.</p>\n<ul>\n<li><code>Brif</code> can turn into <code>Jump</code>;</li>\n<li><code>BrTable</code> can turn into either <code>Brif</code> or <code>Jump</code>;</li>\n<li>and <code>Trapz</code>/<code>Trapnz</code> can turn into either <code>Trap</code> or <code>Nop</code>.<br>\nRewriting traps resembles #6080 but in this case we're already replacing a no-result instruction so the mechanism looks pretty different.</li>\n</ul>\n<p>Indirect calls are interesting to rewrite if we can prove that the call target is a constant.</p>\n<p>I don't think SetPinnedReg has any useful rewrites based on the value operand, because it doesn't have any defined meaning in CLIF. It's just however the frontend wants to use it.</p>\n<h4>Alternatives</h4>\n<p>There are some implementation choices we haven't decided on.</p>\n<p>I'd like to do this in ISLE rules because we may want to pattern-match arbitrary subtrees of the data-flow graph. However @cfallin has argued for doing this in pure Rust until we have good reason to implement rewrite rules that are complicated enough to justify hooking up ISLE.</p>\n<p>We might find we have several alternative instructions to choose from, like we currently do for the <code>simplify</code> term. We could:</p>\n<ul>\n<li>Save a list of alternative instructions during the equality saturation phase, but that makes it difficult to do further optimizations based on simplifying the CFG.</li>\n<li>Defer rewriting these instructions until elaboration when we have the cost of every operand, but then it's not just difficult but impossible to make use of CFG simplifications during equality saturation.</li>\n<li>Compute instruction costs incrementally during equality saturation so we can pick the best option immediately and optimize the CFG based on the result. @cfallin says that's possible but had reasons for not doing it.</li>\n<li>Require these rewrite rules to pick a single alternative based on a static cost model. This is certainly easiest and may be good enough.</li>\n</ul>\n</blockquote>",
        "id": 345813458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680223395
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\">issue #6106</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We should allow the egraph pass to rewrite instructions which have no result values.</p>\n<p>This resembles #5908, in that no-result instructions have side effects and that currently prevents us from optimizing them. However the implementation details are quite different.</p>\n<h4>Benefit</h4>\n<p>Our current ISLE <code>simplify</code> term isn't usable for this because it can only rewrite an SSA value into other SSA values, so instructions without any value results have nothing to replace.</p>\n<p>The only rewrites which need to be in the egraph pass are those which either pattern-match on SSA values or replace SSA values. But instructions which don't produce value results can still be in both of those categories. For example, if we pattern match the condition operand to <code>brif</code> and find that it's a constant, we can rewrite it to an unconditional <code>jump</code>. Removing the unreachable edge from the CFG can then mean that some block parameter is always equivalent to another SSA value, enabling more simplification rules.</p>\n<p>The biggest benefits only come in combination with other optimizations that we haven't written yet. Notably, we need to integrate the \"remove constant phis\" pass into the egraph pass before branch-folding will change any later optimization results.</p>\n<h4>Implementation</h4>\n<p>Which no-result instructions can benefit from rewriting? I claim it's the ones which have no fixed value results, but have at least one fixed value operand. They could have variable operands, variable results, or block-call parameters, but we won't touch any of those.</p>\n<p>A rewrite pattern is always based on knowing something about the meaning of a value operand. For variable operands like the function parameters in a <code>call</code>, the return values in a <code>return</code>, or the block parameters in a <code>jump</code>, there isn't any generic pattern we can apply to them because we don't know what they mean. Put another way, we don't need any opcode-specific handling for instructions where all we can do is update their value operands to reflect other rewrites.</p>\n<p>Among those instructions, we also need to exclude store instructions, because we need alias analysis to rewrite those correctly.</p>\n<p>The current instructions which meet these criteria are:</p>\n<ul>\n<li>Brif</li>\n<li>BrTable</li>\n<li>Trapz</li>\n<li>Trapnz</li>\n<li>ResumableTrapnz</li>\n<li>CallIndirect</li>\n<li>ReturnCallIndirect</li>\n<li>SetPinnedReg</li>\n</ul>\n<p>Conditional branches, either as block terminators or conditional traps, are definitely interesting to rewrite.</p>\n<ul>\n<li><code>Brif</code> can turn into <code>Jump</code>;</li>\n<li><code>BrTable</code> can turn into either <code>Brif</code> or <code>Jump</code>;</li>\n<li>and <code>Trapz</code>/<code>Trapnz</code> can turn into either <code>Trap</code> or <code>Nop</code>.<br>\nRewriting traps resembles #6080 but in this case we're already replacing a no-result instruction so the mechanism looks pretty different.</li>\n</ul>\n<p>Indirect calls are interesting to rewrite if we can prove that the call target is a constant.</p>\n<p>I don't think SetPinnedReg has any useful rewrites based on the value operand, because it doesn't have any defined meaning in CLIF. It's just however the frontend wants to use it.</p>\n<h4>Alternatives</h4>\n<p>There are some implementation choices we haven't decided on.</p>\n<p>I'd like to do this in ISLE rules because we may want to pattern-match arbitrary subtrees of the data-flow graph. However @cfallin has argued for doing this in pure Rust until we have good reason to implement rewrite rules that are complicated enough to justify hooking up ISLE.</p>\n<p>We might find we have several alternative instructions to choose from, like we currently do for the <code>simplify</code> term. We could:</p>\n<ul>\n<li>Save a list of alternative instructions during the equality saturation phase, but that makes it difficult to do further optimizations based on simplifying the CFG.</li>\n<li>Defer rewriting these instructions until elaboration when we have the cost of every operand, but then it's not just difficult but impossible to make use of CFG simplifications during equality saturation.</li>\n<li>Compute instruction costs incrementally during equality saturation so we can pick the best option immediately and optimize the CFG based on the result. @cfallin says that's possible but had reasons for not doing it.</li>\n<li>Require these rewrite rules to pick a single alternative based on a static cost model. This is certainly easiest and may be good enough.</li>\n</ul>\n</blockquote>",
        "id": 345813459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680223395
    }
]