[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2384\">PR #2384</a> from <code>endian-funcargs</code> to <code>main</code>:</p>\n<blockquote>\n<p>When invoking a WebAssembly routine from Rust code, arguments<br>\nare stored into an array of u128, and read from a piece of<br>\ngenerated trampoline code before calling the compiled target<br>\nfunction using the platform ABI calling convention.</p>\n<p>The WasmTy/WasmRet routines handle the conversion between Rust<br>\ndata types and those u128 buffers.  This currently works by<br>\nin effect converting the Rust object to a u128 and then storing<br>\nthis u128 into the buffer.  The generated trampoline code will<br>\nthen read an object of appropriate type from the beginning of<br>\nthat buffer.</p>\n<p>This does not work on big-endian platforms, since the above<br>\napproach causes the value to be stored into the rightmost<br>\nbytes of the u128 buffer, while the trampoline code reads<br>\nthe leftmost bytes.</p>\n<p>This patch fixes the problem by changing WasmTy/WasmRet to<br>\nuse the leftmost bytes as well, by casting the u128 pointer<br>\nto a pointer of the correct type before storing to it (or<br>\nreading from it).</p>\n<p>(Note that it is not necessary to actually byte-swap the<br>\nvalues since the trampoline code will not treat them like<br>\nWebAssembly little-endian memory, but simply access them<br>\nin native byte order.)</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 216108795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604939358
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2384#pullrequestreview-526439952\">PR Review</a>.</p>",
        "id": 216110025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604939908
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2384\">PR #2384</a>.</p>",
        "id": 216114891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604942093
    }
]