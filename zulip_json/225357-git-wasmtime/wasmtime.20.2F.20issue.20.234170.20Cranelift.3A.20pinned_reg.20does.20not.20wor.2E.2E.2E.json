[
    {
        "content": "<p>pepyakin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4170\">issue #4170</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">wasmtime_system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_pinned_reg</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">set_pinned_reg</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block1</span>:\n        <span class=\"nc\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ clif-util compile -D --target x86_64 pinned_reg.clif --set enable_pinned_reg\n.byte <span class=\"m\">85</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">229</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">236</span>, <span class=\"m\">16</span>, <span class=\"m\">76</span>, <span class=\"m\">137</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">15</span>, <span class=\"m\">73</span>, <span class=\"m\">131</span>, <span class=\"m\">199</span>, <span class=\"m\">1</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">196</span>, <span class=\"m\">16</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">236</span>, <span class=\"m\">93</span>, <span class=\"m\">195</span>\n\nDisassembly of <span class=\"m\">32</span> bytes:\n   <span class=\"m\">0</span>:   <span class=\"m\">55</span>                      push    rbp\n   <span class=\"m\">1</span>:   <span class=\"m\">48</span> <span class=\"m\">89</span> e5                mov     rbp, rsp\n   <span class=\"m\">4</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> ec <span class=\"m\">10</span>             sub     rsp, 0x10\n   <span class=\"m\">8</span>:   4c <span class=\"m\">89</span> 3c <span class=\"m\">24</span>             mov     qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>, r15\n   c:   4c 8b 0f                mov     r9, qword ptr <span class=\"o\">[</span>rdi<span class=\"o\">]</span>\n   f:   <span class=\"m\">49</span> <span class=\"m\">83</span> c7 <span class=\"m\">01</span>             add     r15, <span class=\"m\">1</span>\n  <span class=\"m\">13</span>:   4c 8b 3c <span class=\"m\">24</span>             mov     r15, qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>\n  <span class=\"m\">17</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> c4 <span class=\"m\">10</span>             add     rsp, 0x10\n  1b:   <span class=\"m\">48</span> <span class=\"m\">89</span> ec                mov     rsp, rbp\n  1e:   5d                      pop     rbp\n  1f:   c3                      ret\n</code></pre></div>\n<h3>Expected Results</h3>\n<p><code>get_pinned_reg</code> and <code>set_pinned_reg</code> either work in this situation or at least the verifier rejects the code.</p>\n<h3>Actual Results</h3>\n<p>r15, the pinned register, gets saved and restored as a CSR making it impossible to use as a pinned register.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f19d8cc85</p>\n<h3>Extra Info</h3>\n<p>Found this while hacking on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740\">https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740</a>. I've worked around it by setting this predicate in <code>gen_clobber_restore</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">call_conv</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span>::<span class=\"n\">WasmtimeSystemV</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">enable_pinned_reg</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">.</span><span class=\"n\">to_reg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">regs</span>::<span class=\"n\">r15</span><span class=\"p\">().</span><span class=\"n\">to_real_reg</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK: don't restore r15 if pinned_reg enabled.</span>\n<span class=\"w\">                </span><span class=\"c1\">// continue;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I am pretty sure that this is also the case for the aarch64 backend.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 283060296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653048969
    },
    {
        "content": "<p>pepyakin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4170\">issue #4170</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">wasmtime_system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_pinned_reg</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">set_pinned_reg</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block1</span>:\n        <span class=\"nc\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ clif-util compile -D --target x86_64 pinned_reg.clif --set enable_pinned_reg\n.byte <span class=\"m\">85</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">229</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">236</span>, <span class=\"m\">16</span>, <span class=\"m\">76</span>, <span class=\"m\">137</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">15</span>, <span class=\"m\">73</span>, <span class=\"m\">131</span>, <span class=\"m\">199</span>, <span class=\"m\">1</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">196</span>, <span class=\"m\">16</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">236</span>, <span class=\"m\">93</span>, <span class=\"m\">195</span>\n\nDisassembly of <span class=\"m\">32</span> bytes:\n   <span class=\"m\">0</span>:   <span class=\"m\">55</span>                      push    rbp\n   <span class=\"m\">1</span>:   <span class=\"m\">48</span> <span class=\"m\">89</span> e5                mov     rbp, rsp\n   <span class=\"m\">4</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> ec <span class=\"m\">10</span>             sub     rsp, 0x10\n   <span class=\"m\">8</span>:   4c <span class=\"m\">89</span> 3c <span class=\"m\">24</span>             mov     qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>, r15\n   c:   4c 8b 0f                mov     r9, qword ptr <span class=\"o\">[</span>rdi<span class=\"o\">]</span>\n   f:   <span class=\"m\">49</span> <span class=\"m\">83</span> c7 <span class=\"m\">01</span>             add     r15, <span class=\"m\">1</span>\n  <span class=\"m\">13</span>:   4c 8b 3c <span class=\"m\">24</span>             mov     r15, qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>\n  <span class=\"m\">17</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> c4 <span class=\"m\">10</span>             add     rsp, 0x10\n  1b:   <span class=\"m\">48</span> <span class=\"m\">89</span> ec                mov     rsp, rbp\n  1e:   5d                      pop     rbp\n  1f:   c3                      ret\n</code></pre></div>\n<h3>Expected Results</h3>\n<p><code>get_pinned_reg</code> and <code>set_pinned_reg</code> either work in this situation or at least the verifier rejects the code.</p>\n<h3>Actual Results</h3>\n<p>r15, the pinned register, gets saved and restored as a CSR making it impossible to use as a pinned register.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f19d8cc85</p>\n<h3>Extra Info</h3>\n<p>Found this while hacking on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740\">https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740</a>. I've worked around it by setting this predicate in <code>gen_clobber_restore</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">call_conv</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span>::<span class=\"n\">WasmtimeSystemV</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">enable_pinned_reg</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">.</span><span class=\"n\">to_reg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">regs</span>::<span class=\"n\">r15</span><span class=\"p\">().</span><span class=\"n\">to_real_reg</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK: don't restore r15 if pinned_reg enabled.</span>\n<span class=\"w\">                </span><span class=\"c1\">// continue;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I am pretty sure that this is also the case for the aarch64 backend.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 283060297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653048969
    },
    {
        "content": "<p>pepyakin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4170\">issue #4170</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">wasmtime_system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_pinned_reg</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">set_pinned_reg</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block1</span>:\n        <span class=\"nc\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ clif-util compile -D --target x86_64 pinned_reg.clif --set enable_pinned_reg\n.byte <span class=\"m\">85</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">229</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">236</span>, <span class=\"m\">16</span>, <span class=\"m\">76</span>, <span class=\"m\">137</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">15</span>, <span class=\"m\">73</span>, <span class=\"m\">131</span>, <span class=\"m\">199</span>, <span class=\"m\">1</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">196</span>, <span class=\"m\">16</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">236</span>, <span class=\"m\">93</span>, <span class=\"m\">195</span>\n\nDisassembly of <span class=\"m\">32</span> bytes:\n   <span class=\"m\">0</span>:   <span class=\"m\">55</span>                      push    rbp\n   <span class=\"m\">1</span>:   <span class=\"m\">48</span> <span class=\"m\">89</span> e5                mov     rbp, rsp\n   <span class=\"m\">4</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> ec <span class=\"m\">10</span>             sub     rsp, 0x10\n   <span class=\"m\">8</span>:   4c <span class=\"m\">89</span> 3c <span class=\"m\">24</span>             mov     qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>, r15\n   c:   4c 8b 0f                mov     r9, qword ptr <span class=\"o\">[</span>rdi<span class=\"o\">]</span>\n   f:   <span class=\"m\">49</span> <span class=\"m\">83</span> c7 <span class=\"m\">01</span>             add     r15, <span class=\"m\">1</span>\n  <span class=\"m\">13</span>:   4c 8b 3c <span class=\"m\">24</span>             mov     r15, qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>\n  <span class=\"m\">17</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> c4 <span class=\"m\">10</span>             add     rsp, 0x10\n  1b:   <span class=\"m\">48</span> <span class=\"m\">89</span> ec                mov     rsp, rbp\n  1e:   5d                      pop     rbp\n  1f:   c3                      ret\n</code></pre></div>\n<h3>Expected Results</h3>\n<p><code>get_pinned_reg</code> and <code>set_pinned_reg</code> either work in this situation or at least the verifier rejects the code.</p>\n<h3>Actual Results</h3>\n<p>r15, the pinned register, gets saved and restored as a CSR making it impossible to use as a pinned register.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f19d8cc85</p>\n<h3>Extra Info</h3>\n<p>Found this while hacking on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740\">https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740</a>. I've worked around it by setting this predicate in <code>gen_clobber_restore</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">call_conv</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span>::<span class=\"n\">WasmtimeSystemV</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">enable_pinned_reg</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">.</span><span class=\"n\">to_reg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">regs</span>::<span class=\"n\">r15</span><span class=\"p\">().</span><span class=\"n\">to_real_reg</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK: don't restore r15 if pinned_reg enabled.</span>\n<span class=\"w\">                </span><span class=\"c1\">// continue;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I am pretty sure that this is also the case for the aarch64 backend.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 283060298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653048969
    },
    {
        "content": "<p>pepyakin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4170\">issue #4170</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">wasmtime_system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_pinned_reg</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">set_pinned_reg</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block1</span>:\n        <span class=\"nc\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ clif-util compile -D --target x86_64 pinned_reg.clif --set enable_pinned_reg\n.byte <span class=\"m\">85</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">229</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">236</span>, <span class=\"m\">16</span>, <span class=\"m\">76</span>, <span class=\"m\">137</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">15</span>, <span class=\"m\">73</span>, <span class=\"m\">131</span>, <span class=\"m\">199</span>, <span class=\"m\">1</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">196</span>, <span class=\"m\">16</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">236</span>, <span class=\"m\">93</span>, <span class=\"m\">195</span>\n\nDisassembly of <span class=\"m\">32</span> bytes:\n   <span class=\"m\">0</span>:   <span class=\"m\">55</span>                      push    rbp\n   <span class=\"m\">1</span>:   <span class=\"m\">48</span> <span class=\"m\">89</span> e5                mov     rbp, rsp\n   <span class=\"m\">4</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> ec <span class=\"m\">10</span>             sub     rsp, 0x10\n   <span class=\"m\">8</span>:   4c <span class=\"m\">89</span> 3c <span class=\"m\">24</span>             mov     qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>, r15\n   c:   4c 8b 0f                mov     r9, qword ptr <span class=\"o\">[</span>rdi<span class=\"o\">]</span>\n   f:   <span class=\"m\">49</span> <span class=\"m\">83</span> c7 <span class=\"m\">01</span>             add     r15, <span class=\"m\">1</span>\n  <span class=\"m\">13</span>:   4c 8b 3c <span class=\"m\">24</span>             mov     r15, qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>\n  <span class=\"m\">17</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> c4 <span class=\"m\">10</span>             add     rsp, 0x10\n  1b:   <span class=\"m\">48</span> <span class=\"m\">89</span> ec                mov     rsp, rbp\n  1e:   5d                      pop     rbp\n  1f:   c3                      ret\n</code></pre></div>\n<h3>Expected Results</h3>\n<p><code>get_pinned_reg</code> and <code>set_pinned_reg</code> either work in this situation or at least the verifier rejects the code.</p>\n<h3>Actual Results</h3>\n<p>r15, the pinned register, gets saved and restored as a CSR making it impossible to use as a pinned register.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f19d8cc85</p>\n<h3>Extra Info</h3>\n<p>Found this while hacking on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740\">https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740</a>. I've worked around it by setting this predicate in <code>gen_clobber_restore</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">call_conv</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span>::<span class=\"n\">WasmtimeSystemV</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">enable_pinned_reg</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">.</span><span class=\"n\">to_reg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">regs</span>::<span class=\"n\">r15</span><span class=\"p\">().</span><span class=\"n\">to_real_reg</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK: don't restore r15 if pinned_reg enabled.</span>\n<span class=\"w\">                </span><span class=\"c1\">// continue;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I am pretty sure that this is also the case for the aarch64 backend.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 283060299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653048970
    },
    {
        "content": "<p>pepyakin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4170\">issue #4170</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">wasmtime_system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_pinned_reg</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">set_pinned_reg</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block1</span>:\n        <span class=\"nc\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ clif-util compile -D --target x86_64 pinned_reg.clif --set enable_pinned_reg\n.byte <span class=\"m\">85</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">229</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">236</span>, <span class=\"m\">16</span>, <span class=\"m\">76</span>, <span class=\"m\">137</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">15</span>, <span class=\"m\">73</span>, <span class=\"m\">131</span>, <span class=\"m\">199</span>, <span class=\"m\">1</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">196</span>, <span class=\"m\">16</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">236</span>, <span class=\"m\">93</span>, <span class=\"m\">195</span>\n\nDisassembly of <span class=\"m\">32</span> bytes:\n   <span class=\"m\">0</span>:   <span class=\"m\">55</span>                      push    rbp\n   <span class=\"m\">1</span>:   <span class=\"m\">48</span> <span class=\"m\">89</span> e5                mov     rbp, rsp\n   <span class=\"m\">4</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> ec <span class=\"m\">10</span>             sub     rsp, 0x10\n   <span class=\"m\">8</span>:   4c <span class=\"m\">89</span> 3c <span class=\"m\">24</span>             mov     qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>, r15\n   c:   4c 8b 0f                mov     r9, qword ptr <span class=\"o\">[</span>rdi<span class=\"o\">]</span>\n   f:   <span class=\"m\">49</span> <span class=\"m\">83</span> c7 <span class=\"m\">01</span>             add     r15, <span class=\"m\">1</span>\n  <span class=\"m\">13</span>:   4c 8b 3c <span class=\"m\">24</span>             mov     r15, qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>\n  <span class=\"m\">17</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> c4 <span class=\"m\">10</span>             add     rsp, 0x10\n  1b:   <span class=\"m\">48</span> <span class=\"m\">89</span> ec                mov     rsp, rbp\n  1e:   5d                      pop     rbp\n  1f:   c3                      ret\n</code></pre></div>\n<h3>Expected Results</h3>\n<p><code>get_pinned_reg</code> and <code>set_pinned_reg</code> either work in this situation or at least the verifier rejects the code.</p>\n<h3>Actual Results</h3>\n<p>r15, the pinned register, gets saved and restored as a CSR making it impossible to use as a pinned register.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f19d8cc85</p>\n<h3>Extra Info</h3>\n<p>Found this while hacking on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740\">https://github.com/bytecodealliance/wasmtime/issues/4109#issuecomment-1130527740</a>. I've worked around it by setting this predicate in <code>gen_clobber_restore</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">call_conv</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span>::<span class=\"n\">WasmtimeSystemV</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">enable_pinned_reg</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">.</span><span class=\"n\">to_reg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">regs</span>::<span class=\"n\">r15</span><span class=\"p\">().</span><span class=\"n\">to_real_reg</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK: don't restore r15 if pinned_reg enabled.</span>\n<span class=\"w\">                </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I am pretty sure that this is also the case for the aarch64 backend.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 283060324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653048988
    },
    {
        "content": "<p>pepyakin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4170\">issue #4170</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">wasmtime_system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_pinned_reg</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">set_pinned_reg</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block1</span>:\n        <span class=\"nc\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ clif-util compile -D --target x86_64 pinned_reg.clif --set enable_pinned_reg\n.byte <span class=\"m\">85</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">229</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">236</span>, <span class=\"m\">16</span>, <span class=\"m\">76</span>, <span class=\"m\">137</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">15</span>, <span class=\"m\">73</span>, <span class=\"m\">131</span>, <span class=\"m\">199</span>, <span class=\"m\">1</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">196</span>, <span class=\"m\">16</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">236</span>, <span class=\"m\">93</span>, <span class=\"m\">195</span>\n\nDisassembly of <span class=\"m\">32</span> bytes:\n   <span class=\"m\">0</span>:   <span class=\"m\">55</span>                      push    rbp\n   <span class=\"m\">1</span>:   <span class=\"m\">48</span> <span class=\"m\">89</span> e5                mov     rbp, rsp\n   <span class=\"m\">4</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> ec <span class=\"m\">10</span>             sub     rsp, 0x10\n   <span class=\"m\">8</span>:   4c <span class=\"m\">89</span> 3c <span class=\"m\">24</span>             mov     qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>, r15\n   c:   4c 8b 0f                mov     r9, qword ptr <span class=\"o\">[</span>rdi<span class=\"o\">]</span>\n   f:   <span class=\"m\">49</span> <span class=\"m\">83</span> c7 <span class=\"m\">01</span>             add     r15, <span class=\"m\">1</span>\n  <span class=\"m\">13</span>:   4c 8b 3c <span class=\"m\">24</span>             mov     r15, qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>\n  <span class=\"m\">17</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> c4 <span class=\"m\">10</span>             add     rsp, 0x10\n  1b:   <span class=\"m\">48</span> <span class=\"m\">89</span> ec                mov     rsp, rbp\n  1e:   5d                      pop     rbp\n  1f:   c3                      ret\n</code></pre></div>\n<h3>Expected Results</h3>\n<p><code>get_pinned_reg</code> and <code>set_pinned_reg</code> either work in this situation or at least the verifier rejects the code.</p>\n<h3>Actual Results</h3>\n<p>r15, the pinned register, gets saved and restored as a CSR making it impossible to use as a pinned register.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f19d8cc85</p>\n<h3>Extra Info</h3>\n<p>Found this while hacking on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4109\">https://github.com/bytecodealliance/wasmtime/issues/4109</a>. I've worked around it by setting this predicate in <code>gen_clobber_restore</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">call_conv</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span>::<span class=\"n\">WasmtimeSystemV</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">enable_pinned_reg</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">.</span><span class=\"n\">to_reg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">regs</span>::<span class=\"n\">r15</span><span class=\"p\">().</span><span class=\"n\">to_real_reg</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK: don't restore r15 if pinned_reg enabled.</span>\n<span class=\"w\">                </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I am pretty sure that this is also the case for the aarch64 backend.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 283060823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653049286
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4170#issuecomment-1133135010\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4170\">issue #4170</a>:</p>\n<blockquote>\n<p>I'll take a look at this, thanks! I think this is probably a result of only ever having used pinned registers with the SpiderMonkey (\"baldrdash\") calling convention support, so the SysV code doesn't account for it.</p>\n</blockquote>",
        "id": 283099924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653066763
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4170\">issue #4170</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">wasmtime_system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_pinned_reg</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">set_pinned_reg</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block1</span>:\n        <span class=\"nc\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ clif-util compile -D --target x86_64 pinned_reg.clif --set enable_pinned_reg\n.byte <span class=\"m\">85</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">229</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">236</span>, <span class=\"m\">16</span>, <span class=\"m\">76</span>, <span class=\"m\">137</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">15</span>, <span class=\"m\">73</span>, <span class=\"m\">131</span>, <span class=\"m\">199</span>, <span class=\"m\">1</span>, <span class=\"m\">76</span>, <span class=\"m\">139</span>, <span class=\"m\">60</span>, <span class=\"m\">36</span>, <span class=\"m\">72</span>, <span class=\"m\">131</span>, <span class=\"m\">196</span>, <span class=\"m\">16</span>, <span class=\"m\">72</span>, <span class=\"m\">137</span>, <span class=\"m\">236</span>, <span class=\"m\">93</span>, <span class=\"m\">195</span>\n\nDisassembly of <span class=\"m\">32</span> bytes:\n   <span class=\"m\">0</span>:   <span class=\"m\">55</span>                      push    rbp\n   <span class=\"m\">1</span>:   <span class=\"m\">48</span> <span class=\"m\">89</span> e5                mov     rbp, rsp\n   <span class=\"m\">4</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> ec <span class=\"m\">10</span>             sub     rsp, 0x10\n   <span class=\"m\">8</span>:   4c <span class=\"m\">89</span> 3c <span class=\"m\">24</span>             mov     qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>, r15\n   c:   4c 8b 0f                mov     r9, qword ptr <span class=\"o\">[</span>rdi<span class=\"o\">]</span>\n   f:   <span class=\"m\">49</span> <span class=\"m\">83</span> c7 <span class=\"m\">01</span>             add     r15, <span class=\"m\">1</span>\n  <span class=\"m\">13</span>:   4c 8b 3c <span class=\"m\">24</span>             mov     r15, qword ptr <span class=\"o\">[</span>rsp<span class=\"o\">]</span>\n  <span class=\"m\">17</span>:   <span class=\"m\">48</span> <span class=\"m\">83</span> c4 <span class=\"m\">10</span>             add     rsp, 0x10\n  1b:   <span class=\"m\">48</span> <span class=\"m\">89</span> ec                mov     rsp, rbp\n  1e:   5d                      pop     rbp\n  1f:   c3                      ret\n</code></pre></div>\n<h3>Expected Results</h3>\n<p><code>get_pinned_reg</code> and <code>set_pinned_reg</code> either work in this situation or at least the verifier rejects the code.</p>\n<h3>Actual Results</h3>\n<p>r15, the pinned register, gets saved and restored as a CSR making it impossible to use as a pinned register.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f19d8cc85</p>\n<h3>Extra Info</h3>\n<p>Found this while hacking on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4109\">https://github.com/bytecodealliance/wasmtime/issues/4109</a>. I've worked around it by setting this predicate in <code>gen_clobber_restore</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">call_conv</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span>::<span class=\"n\">WasmtimeSystemV</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">enable_pinned_reg</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">.</span><span class=\"n\">to_reg</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">regs</span>::<span class=\"n\">r15</span><span class=\"p\">().</span><span class=\"n\">to_real_reg</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK: don't restore r15 if pinned_reg enabled.</span>\n<span class=\"w\">                </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I am pretty sure that this is also the case for the aarch64 backend.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 283342368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653322734
    }
]