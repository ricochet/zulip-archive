[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5118#issuecomment-1290871347\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5118\">issue #5118</a>:</p>\n<blockquote>\n<p>In general, we have the invariant that high bits are undefined -- this is what allows us to, e.g., lower an 8-bit add to an <code>add</code> instruction with no masking afterward. And we account for this elsewhere by zero/sign-extending where necessary or using appropriate instruction widths (e.g. only using an 8-bit <code>cmp</code> when comparing i8s on x64). I suspect maybe what's going on here is that something in the compare-to-interpreter path is using a too-wide type and failing to mask the type of the compiled execution?</p>\n</blockquote>",
        "id": 306076421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666717307
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5118#issuecomment-1290910841\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5118\">issue #5118</a>:</p>\n<blockquote>\n<blockquote>\n<p>And we account for this elsewhere by zero/sign-extending where necessary or using appropriate instruction widths (e.g. only using an 8-bit cmp when comparing i8s on x64). I suspect maybe what's going on here is that something in the compare-to-interpreter path is using a too-wide type and failing to mask the type of the compiled execution?</p>\n</blockquote>\n<p>I'm not sure I understand, the runtests don't involve the interpreter (they do but not in <code>test run</code>) and both pass on s390x without any changes.</p>\n</blockquote>",
        "id": 306085829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666719413
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5118#issuecomment-1290928048\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5118\">issue #5118</a>:</p>\n<blockquote>\n<p>Ah, sorry, I had autocompleted that thought based on \"the fuzzer found...\" but I see now the issue is actually in the runtest harness code that compares expected and actual return values.</p>\n<p>Specifically, the masking introduced on the bmask lowering for aarch64 shouldn't be necessary to get the runtest passing, I think; if the low 8 bits of the returned value are correct, then the compiled code is doing the right thing. (A <code>zext</code> or <code>sext</code> on the return type would signify the opposite, i.e. that the whole register must be defined in the specified way.)</p>\n</blockquote>",
        "id": 306087047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666719831
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5118#issuecomment-1290930914\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5118\">issue #5118</a>:</p>\n<blockquote>\n<p>Actually, I take all the above back -- I was misunderstanding where the masking was required. On the <em>input</em> side of the compare, it is indeed necessary, exactly because of the undefined-upper-bits invariant. Sorry about that!</p>\n</blockquote>",
        "id": 306087394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666719963
    }
]