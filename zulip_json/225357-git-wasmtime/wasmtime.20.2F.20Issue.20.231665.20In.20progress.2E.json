[
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-624501595\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-624501595\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>@julian-seward1 <br>\nHi .. this current snapshot isn't much different than you saw earlier but it has been rebased against the latest merge which which forced a few updates to my beginnings.  </p>\n<p>I am testing the example:<br>\nRUST_BACKTRACE=1 RUST_LOG=debug cargo run -- wasm --target x86_64 --set use_new_backend=1 -dvTD ben_simple.wat</p>\n</blockquote>",
        "id": 196599617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588752181
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-624505533\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-624505533\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:meta\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 196600901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588752764
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-624549814\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-624549814\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>I should maybe add .. basically good, it looks like it's moving along the right lines.</p>\n</blockquote>",
        "id": 196610447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588758627
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-624572774\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-624572774\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>@jlb6740 I realised just now that you won't be able to use the <code>emit_REX_OPCODES_MODRM_SIB_IMM_*G_*E</code> and <code>emit_REX_OPCODES_MODRM_*G_*E</code> family of functions to do emission of XMM insns without some (minor) modifications.</p>\n<p>Specifically, these are currently only set up to produce a legacy prefix of (none) or 0x66.  But in your case, you now need to be able to generate the legacy prefixes</p>\n<p>(none)  or <code>66</code>  or <code>F2</code>  or  <code>F3</code></p>\n<p>(working from memory here).  I suggest the following:</p>\n<ul>\n<li>\n<p>delete <code>const F_PREFIX_66</code> (it's a kludge)</p>\n</li>\n<li>\n<p>create a new enum<br>\n<code>enum LegacyPrefix = { PfxNone, Pfx66, PfxF2, PfxF3 }</code></p>\n</li>\n<li>\n<p>add a new argument <code>prefix: LegacyPrefix</code> to <code>emit_REX_OPCODES_*</code>, in between <code>sink</code> and <code>opcodes</code></p>\n</li>\n<li>\n<p>at the place where the 66 byte would previously have been emitted (<code>sink.put1(0x66)</code>), instead inspect <code>prefix</code> and emit the relevant byte</p>\n</li>\n<li>\n<p>change all the places that specify <code>F_PREFIX_66</code> to pass <code>Pfx66</code> instead.  There aren't many.</p>\n</li>\n</ul>\n<p>Note that the Intel docs are a bit confusing about this.  In particular, the REX byte is silently omitted from the description.  For example, for <code>CVTPI2PD</code>, the encoding is shown in the docs as <code>66 0F 2A /r</code>, but what that actually means is <code>66 &lt;RexByte if necessary&gt; 0F 2A /r</code>.  <code>0F</code> is the first opcode byte and <code>2A</code> is the second.  <code>66</code> isn't an opcode byte but rather a prefix.  The fact that the Rex byte -- if needed -- goes between them explains why we couldn't just pass <code>0x660F2A</code> as the <code>opcodes</code> arg to <code>emit_REX_OPCODES_*</code> here.  Instead we would have to pass <code>0x0F2A</code> for <code>opcodes</code> and <code>Pfx66</code> for the proposed new <code>prefix</code> argument.</p>\n</blockquote>",
        "id": 196615687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588761573
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-627122475\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>Hi @julian-seward1 this is the 3rd update ... overwrote what was there yesterday. Is the proper way to push an insns similar to this in <a href=\"http://emit_test.rs\">emit_test.rs</a>:</p>\n<blockquote>\n<p>insns.push((<br>\n        Inst::mov64_m_r(Addr::imm_reg(0, rax), w_rdi),<br>\n        \"488B38\",<br>\n        \"movq    0(%rax), %rdi\",<br>\n    ));<br>\n</p>\n</blockquote>\n<p>Note, I modified the expected encoding here and from \"488B38\" to \"488B37\" and all tests still passed when running \"cargo test -- --nocapture\". I take it I did not run the test correctly or could this indicate some issue in testing?</p>\n</blockquote>",
        "id": 197235723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589262122
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-627176699\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>@jlb6740 thanks for the respin!  I'll have a look later today.</p>\n<p>That test should fail if you changed the expected output, so I suspect it isn't getting run.  Maybe try <code>cargo test --all</code> ?  Or <code>(cd cranelift &amp;&amp; cargo test --all)</code>?  I definitely had them running and failing before.</p>\n</blockquote>",
        "id": 197242817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589269981
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-627790937\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<blockquote>\n<p>I guess RM_R_Op should then be changed to INT_RM_R_Op</p>\n<p>Errr, this is tricky, for reasons to do with copy coalescing in regalloc. At least for now, I'd prefer to have an Xmm-to-Xmm move instruction that operates only on the entire register. We can come back and refine this later. So you'd drop the Scalar bit here, giving SSE_Mov_R_R. And correspondingly emit whatever Intel recommends for Xmm-to-Xmm moves .. is it movapd reg, reg perhaps?</p>\n</blockquote>\n<p>@julian-seward1 There are a couple of comments particularly around naming that I partially did or held off completely but you may prefer still need to be done. For example, I think the Intel manual describes cpuid features flags SSE, AVX, AVX512, etc that I think make good prefixes (we use SSE in this pull request to form SSE_RM_R_Op), but there is no corresponding INT cpuid requirement for the current RM_R_Op instructions. </p>\n</blockquote>",
        "id": 197375015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589353497
    }
]