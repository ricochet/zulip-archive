[
    {
        "content": "<p>jlb6740 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a> from <code>fix-issue-3327</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 261203241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636680966
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a>.</p>",
        "id": 261203411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636681224
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a>.</p>",
        "id": 261203416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636681232
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#pullrequestreview-805231235\">PR review</a>.</p>",
        "id": 261311421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636751597
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r748588818\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                ctx.emit(Inst::equals(types::I32X4, RegMem::from(tmp), tmp));\n</code></pre></div>\n<p>This change would avoid the extra instruction and might fix the NaN comparison issue.</p>\n</blockquote>",
        "id": 261311422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636751597
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#pullrequestreview-806139849\">PR review</a>.</p>",
        "id": 261503742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636986717
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749379373\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe this would fix the issue, yes, because this would avoid doing a floating-point-compare which runs the risk of doing NaN comparisons. I don't know about the performance implications of this, though, and whether it's better to do or not.</p>\n<p>Otherwise though I think that this <code>xor</code> is probably worth both a comment and a test, or otherwise somehow sharing code with the other spot in <code>f32x4.abs</code> which generates an all-ones mask.</p>\n</blockquote>",
        "id": 261503743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636986718
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#pullrequestreview-806322622\">PR review</a>.</p>",
        "id": 261525556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636995312
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749513116\">PR review comment</a>:</p>\n<blockquote>\n<p>@alexcrichton @abrown The xorps isn't a new idea. It's what we do in a couple of places. For example here is the sequence that prompted the bug:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v128</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f32x4</span><span class=\"p\">.</span><span class=\"n\">abs</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v128</span><span class=\"p\">.</span><span class=\"n\">not</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">movdqu</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\">        </span>#<span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">+</span><span class=\"mh\">0x30</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"mi\">00</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">c</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">13</span>:       <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">72</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">          </span><span class=\"n\">psrld</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">18</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">andps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">b</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">cmpeqps</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">f</span>:       <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                </span><span class=\"n\">xorps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">22</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">25</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">26</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The instruction at address \"c\" does an xorps instead of an integer compare and we do this because of the types. Is it really a good idea to override the types used? Should we override types for the abs as well?</p>\n</blockquote>",
        "id": 261525558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636995312
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749513116\">PR review comment</a>.</p>",
        "id": 261526467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636995698
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749513116\">PR review comment</a>.</p>",
        "id": 261526496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636995711
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#pullrequestreview-806430802\">PR review</a>.</p>",
        "id": 261541420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637002059
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749592910\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah I don't know myself which is better. I agree that both should do the same thing, but whether we do an integer compare then move that to floating-point-typed instructions or instead to xor/cmp both with a floating point type I dunno.</p>\n<p>FWIW for <code>f32x4.abs</code> LLVM generates this code for x86_64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">LCPI0_0</span>:\n        <span class=\"p\">.</span><span class=\"n\">long</span><span class=\"w\">   </span><span class=\"mh\">0x7fffffff</span><span class=\"w\">                      </span>#<span class=\"w\"> </span><span class=\"n\">float</span><span class=\"w\"> </span><span class=\"n\">NaN</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">long</span><span class=\"w\">   </span><span class=\"mh\">0x7fffffff</span><span class=\"w\">                      </span>#<span class=\"w\"> </span><span class=\"n\">float</span><span class=\"w\"> </span><span class=\"n\">NaN</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">long</span><span class=\"w\">   </span><span class=\"mh\">0x7fffffff</span><span class=\"w\">                      </span>#<span class=\"w\"> </span><span class=\"n\">float</span><span class=\"w\"> </span><span class=\"n\">NaN</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">long</span><span class=\"w\">   </span><span class=\"mh\">0x7fffffff</span><span class=\"w\">                      </span>#<span class=\"w\"> </span><span class=\"n\">float</span><span class=\"w\"> </span><span class=\"n\">NaN</span><span class=\"w\"></span>\n<span class=\"n\">foo</span>:                                    #<span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">andps</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmmword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rip</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">LCPI0_0</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and the rough <code>v128.not</code> equiavlent for LLVM seems to be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">foo</span>:                                    #<span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pcmpeqd</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pxor</span><span class=\"w\">    </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Although this is in isolation where it's not doing other float ops around there so this isn't necessarily definitive I think.</p>\n</blockquote>",
        "id": 261541422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637002060
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a> from <code>fix-issue-3327</code> to <code>main</code>.</p>",
        "id": 261545165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637003818
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#pullrequestreview-806459444\">PR review</a>.</p>",
        "id": 261545691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637004016
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749614440\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks @alexcrichton So looks like LLVM is using integer compare too. I've made that update. I didn't touch abs because I think that is a separate patch but looks like that could be more efficient as well. </p>\n</blockquote>",
        "id": 261545692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637004016
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#pullrequestreview-806495982\">PR review</a>.</p>",
        "id": 261551397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637006620
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749642984\">PR review comment</a>:</p>\n<blockquote>\n<p>I agree that from a Cranelift perspective it is a bit odd to use the <code>types::I32X4</code> since it may have nothing to do with the types we are lowering here, but I think that is a refactoring problem. We actually don't want to be writing <code>Inst::equals(...)</code> here (and in other places)--we want to write <code>construct_all_ones(...)</code> since that is actually what we are trying to do. <code>construct_all_ones</code> does not exist and I can't remember if there was some other helper that could do this type of thing (and the inverse, construct all zeroes, as well).</p>\n<p>Inside such a helper, I think the best x86 code to emit is probably <code>PCMPEQD</code> (the output of <code>Inst::equals(types::I32X4, ...</code>) since that fixes the NaN issue and avoids an extra instruction. I checked to see how much the extra instruction would affect things and my conclusion is that 1) in tight loops the extra instruction could be a factor and 2) the int-to-FP domain switching is not an issue. </p>\n</blockquote>",
        "id": 261551399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637006620
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#pullrequestreview-806526564\">PR review</a>.</p>",
        "id": 261556104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637008938
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749666354\">PR review comment</a>:</p>\n<blockquote>\n<p>I commented to @abrown offline .. but my concern was also about mixing integer and float instructions for SIMD. In real codes (not this fuzzing example) they'll likely be other floating point SIMD instructions operating on these registers and it's supposed to be a bad for performance to mix between integer and floating point operations. Not sure where in the manuals but it's mentioned here in this stack overflow on some older system: <a href=\"https://stackoverflow.com/questions/4996384/do-i-get-a-performance-penalty-when-mixing-sse-integer-float-simd-instructions\">https://stackoverflow.com/questions/4996384/do-i-get-a-performance-penalty-when-mixing-sse-integer-float-simd-instructions</a> . None-the-less I pushed the patch to hardcode the type. </p>\n</blockquote>",
        "id": 261556106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637008938
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749666354\">PR review comment</a>.</p>",
        "id": 261556165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637008983
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#pullrequestreview-806531327\">PR review</a>.</p>",
        "id": 261556733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637009298
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#discussion_r749669876\">PR review comment</a>:</p>\n<blockquote>\n<p>@abrown .. Yes construct all ones is exactly what we are inlining here. </p>\n</blockquote>",
        "id": 261556734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637009298
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a> from <code>fix-issue-3327</code> to <code>main</code>.</p>",
        "id": 261559552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637010633
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a> from <code>fix-issue-3327</code> to <code>main</code>.</p>",
        "id": 261575592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637018535
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a> from <code>fix-issue-3327</code> to <code>main</code>.</p>",
        "id": 261575646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637018574
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517#pullrequestreview-806658122\">PR review</a>.</p>",
        "id": 261578464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637020549
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a> from <code>fix-issue-3327</code> to <code>main</code>.</p>",
        "id": 261584879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637024645
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a> from <code>fix-issue-3327</code> to <code>main</code>.</p>",
        "id": 261588882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637028257
    },
    {
        "content": "<p>jlb6740 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3517\">PR #3517</a>.</p>",
        "id": 261591379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637030844
    }
]