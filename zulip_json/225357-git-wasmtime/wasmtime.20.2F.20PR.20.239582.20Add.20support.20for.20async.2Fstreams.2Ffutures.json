[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> from <code>dicej:async</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[ ] Avoid exposing global task IDs to guests and use per-instance IDs instead</li>\n<li>[ ] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and even polling</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 481186223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731007686
    },
    {
        "content": "<p>dicej assigned dicej to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a>.</p>",
        "id": 481186550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731007836
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 481197830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731012552
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[ ] Avoid exposing global task IDs to guests and use per-instance IDs instead</li>\n<li>[ ] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and even polling</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 481199481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731013281
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 481201781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731014377
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 481203086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731015016
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 481209262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731018121
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[ ] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[ ] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and even polling</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 481209541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731018265
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[ ] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[ ] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and even polling</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 481220222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731024871
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[ ] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[ ] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 482483049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731618441
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 483767416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732215316
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 483769802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732216114
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 483778001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732218787
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[ ] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 483778309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732218906
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 483815122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732235844
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 483816418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732236657
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add support and test coverage for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 483938446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732290549
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add support and test coverage for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results during async-&gt;sync calls</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 484402847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732574751
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[ ] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add support and test coverage for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 484404221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732575339
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 484634128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732677979
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[ ] Implement <code>{stream|future}.cancel-{read|write}</code> and <code>error-context.{new|debug-string}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add support and test coverage for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 484634334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732678150
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 484746765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732721337
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 486375109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733425432
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[x] Implement <code>{stream|future}.cancel-{read|write}</code></li>\n<li>[ ] Implement <code>error-context.{new|debug-string}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add support and test coverage for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 486375933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733425708
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 486566833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733507443
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 486607059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733525761
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 486609519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733527373
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[x] Implement <code>{stream|future}.cancel-{read|write}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[x] Add support for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add support and test coverage for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Implement <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 486610002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733527692
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 487113603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733783615
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[x] Implement <code>{stream|future}.cancel-{read|write}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[x] Add support for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[x] Add support for callback-less async functions (e.g. goroutines)</li>\n<li>[ ] Add integration test cases covering new functionality to tests/all/component_model (starting by porting over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Implement <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch to back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 487114792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733784110
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 487358658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733873748
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 487361827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733875597
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 487676409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733876462
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 487679916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733878665
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 488194173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733953409
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[x] Implement <code>{stream|future}.cancel-{read|write}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[x] Add support for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[x] Add support for callback-less async functions (e.g. goroutines)</li>\n<li>[x] Add end-to-end tests covering new functionality (i.e. port over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[ ] Add WAT-based tests covering new functionality to tests/all/component_model</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Implement <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n<li>[ ] Switch back to upstream <code>wit-bindgen</code> once <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1082\">https://github.com/bytecodealliance/wit-bindgen/pull/1082</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 488194977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733953719
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 488518043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733958208
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 488518983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733958671
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 490204491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734716258
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 490331355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734816172
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 490335238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734819764
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 491636764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735836689
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 491796737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735930046
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[x] Implement <code>{stream|future}.cancel-{read|write}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[x] Add support for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[x] Add support for callback-less async functions (e.g. goroutines)</li>\n<li>[x] Add end-to-end tests covering new functionality (i.e. port over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[x] Add WAT-based tests covering new functionality to tests/all/component_model</li>\n<li>[ ] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Implement <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n<li>[ ] Switch back to upstream <code>wit-bindgen</code> once <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1082\">https://github.com/bytecodealliance/wit-bindgen/pull/1082</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 491797623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735930481
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 491819510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735942709
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 491820650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735943509
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[x] Implement <code>{stream|future}.cancel-{read|write}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[x] Add support for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[x] Add support for callback-less async functions (e.g. goroutines)</li>\n<li>[x] Add end-to-end tests covering new functionality (i.e. port over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[x] Add WAT-based tests covering new functionality to tests/all/component_model</li>\n<li>[x] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Implement <code>error-context.{new|debug-string}</code></li>\n<li>[ ] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n<li>[ ] Switch back to upstream <code>wit-bindgen</code> once <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1082\">https://github.com/bytecodealliance/wit-bindgen/pull/1082</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 491820712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735943535
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 491827526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735948686
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 491830995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735951471
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 492172536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736192989
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 492199004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736202847
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[x] Implement <code>{stream|future}.cancel-{read|write}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[x] Add support for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[x] Add support for callback-less async functions (e.g. goroutines)</li>\n<li>[x] Add end-to-end tests covering new functionality (i.e. port over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[x] Add WAT-based tests covering new functionality to tests/all/component_model</li>\n<li>[x] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Implement <code>error-context.{new|debug-string}</code></li>\n<li>[x] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[ ] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n<li>[ ] Switch back to upstream <code>wit-bindgen</code> once <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1082\">https://github.com/bytecodealliance/wit-bindgen/pull/1082</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 492199071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736202870
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 492209228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736206890
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 492212314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736208369
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 492349424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736269170
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 492353332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736270533
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 492607919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736383036
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 493030269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736545489
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 493030693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736545734
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 493032586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736546721
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 493034400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736547818
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 493035655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736548491
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 493682397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736893938
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[x] Implement <code>{stream|future}.cancel-{read|write}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[x] Add support for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[x] Add support for callback-less async functions (e.g. goroutines)</li>\n<li>[x] Add end-to-end tests covering new functionality (i.e. port over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[x] Add WAT-based tests covering new functionality to tests/all/component_model</li>\n<li>[x] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Implement <code>error-context.{new|debug-string}</code></li>\n<li>[x] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[ ] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[x] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n<li>[ ] Switch back to upstream <code>wit-bindgen</code> once <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1082\">https://github.com/bytecodealliance/wit-bindgen/pull/1082</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 493682651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736894069
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 493683581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736894591
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 493978253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736961502
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 494038317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736985452
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 494039537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736986035
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej):</p>\n<blockquote>\n<p>This adds support for loading, compiling, linking, and running components which use the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">Async ABI</a> along with the <a href=\"https://github.com/WebAssembly/component-model/pull/405\"><code>stream</code>, <code>future</code>, and <code>error-context</code></a> types. It also adds support for generating host bindings such that multiple host functions can be run concurrently with guest tasks -- without monopolizing the <code>Store</code>.</p>\n<p>See the <a href=\"https://github.com/bytecodealliance/rfcs/pull/38\">implementation RFC</a> for details, as well as <a href=\"https://github.com/dicej/component-async-demo\">this repo</a> containing end-to-end smoke tests.</p>\n<p>This is very much a work-in progress, with a number of tasks remaining:</p>\n<ul>\n<li>[x] Avoid exposing global task IDs to guests and use per-instance IDs instead (and fix no_std build at the same time)</li>\n<li>[x] Track <code>task.return</code> type during compilation and assert the actual and expected types match at runtime</li>\n<li>[x] Implement <code>{stream|future}.cancel-{read|write}</code></li>\n<li>[x] Add support for <code>(Typed)Func::call_concurrent</code> per the RFC</li>\n<li>[x] Add support for multiplexing stream/future reads/writes and concurrent calls to guest exports per the RFC</li>\n<li>[x] Add support for dynamic APIs for async/streams/futures/error-contexts</li>\n<li>[x] Add support for callback-less async functions (e.g. goroutines)</li>\n<li>[x] Add end-to-end tests covering new functionality (i.e. port over the tests in <a href=\"https://github.com/dicej/component-async-demo\">https://github.com/dicej/component-async-demo</a>)</li>\n<li>[x] Add WAT-based tests covering new functionality to tests/all/component_model</li>\n<li>[x] Add binding generation test cases to crates/component-macro/tests</li>\n<li>[ ] Add WAST tests to tests/misc_testsuite/component-model</li>\n<li>[ ] Add doc and code comments to new, non-trivial code (especially <a href=\"http://concurrent.rs\">concurrent.rs</a> and <a href=\"http://futures_and_streams.rs\">futures_and_streams.rs</a>)</li>\n<li>[ ] Implement <code>error-context.{new|debug-string}</code></li>\n<li>[x] Ensure all guest pointers are bounds-checked when lifting, lowering, or copying values</li>\n<li>[x] Guard against reentrance where required (e.g. in certain fused adapter calls)</li>\n<li>[x] Call any post_return functions after lifting results</li>\n<li>[ ] Minimize and/or document the use of unsafe code</li>\n<li>[ ] Refactor, clean up, and unify handling of backpressure, yields, and event polling</li>\n<li>[ ] Reduce code duplication in <code>wasmtime_cranelift::compiler::component</code></li>\n<li>[ ] Reduce code duplication between <code>StoreContextMut::on_fiber</code> and <code>concurrent::on_fiber</code></li>\n<li>[ ] Switch back to upstream <code>wasm-tools</code> once <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1895\">https://github.com/bytecodealliance/wasm-tools/pull/1895</a> has been merged and released</li>\n<li>[ ] Switch back to upstream <code>wit-bindgen</code> once <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1082\">https://github.com/bytecodealliance/wit-bindgen/pull/1082</a> has been merged and released</li>\n</ul>\n</blockquote>",
        "id": 494039584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736986061
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 494229366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737060140
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 494230056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737060496
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 494434860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737145949
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 494438240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737147300
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">PR #9582</a> (assigned to dicej).</p>",
        "id": 494442706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737149082
    }
]