[
    {
        "content": "<p>lann opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480\">issue #5480</a>:</p>\n<blockquote>\n<p>Currently the <code>wasmtime::component::Val::Float32</code> and <code>::Float64</code> variants wrap <code>u32</code> and <code>u64</code> values:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/component/values.rs#L502-L503\">https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/component/values.rs#L502-L503</a></p>\n<p>I suspect this is just an oversight as typed functions do use <code>f32</code>/<code>f64</code>. I'm happy to make this update if it makes sense.</p>\n</blockquote>",
        "id": 316980294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671551215
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480#issuecomment-1359597900\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480\">issue #5480</a>:</p>\n<blockquote>\n<p>For the record, this floats-as-bits representation was copied from the equivalent API for modules: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/values.rs#L22-L32\">https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/values.rs#L22-L32</a>, which was added in this commit: <a href=\"https://github.com/bytecodealliance/wasmtime/commit/f88e92a57ce9654917193c88a55cb3de863653ee\">https://github.com/bytecodealliance/wasmtime/commit/f88e92a57ce9654917193c88a55cb3de863653ee</a>.  I imagine that if we're going to change this API, we should also change the module API as well.</p>\n</blockquote>",
        "id": 316981063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671551447
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480#issuecomment-1359712605\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480\">issue #5480</a>:</p>\n<blockquote>\n<p>We do this in Cranelift too. I don't know if it's for the same reason that Wasmtime's API works this way, but Cranelift's reason was discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2251#discussion_r498508646\">#2251</a>. In short, Rust doesn't make any guarantees about the bit-representation of NaN values being preserved in floating-point types. So if you care about that, you need to keep the raw bits in an integer type until the time when you want to do actual floating-point operations on them.</p>\n</blockquote>",
        "id": 316993837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671555190
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480#issuecomment-1359750740\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480\">issue #5480</a>:</p>\n<blockquote>\n<p>@jameysharp Thanks for that context. The component model requires canonicalization of NaNs so it seems like it makes sense to diverge from the copied API here.</p>\n</blockquote>",
        "id": 316996423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671555968
    },
    {
        "content": "<p>dicej edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480#issuecomment-1359597900\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480\">issue #5480</a>:</p>\n<blockquote>\n<p>For the record, this floats-as-bits representation was copied from the equivalent API for modules: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/values.rs#L22-L32\">https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/values.rs#L22-L32</a>, which was added in this commit: <a href=\"https://github.com/bytecodealliance/wasmtime/commit/f88e92a57ce9654917193c88a55cb3de863653ee\">https://github.com/bytecodealliance/wasmtime/commit/f88e92a57ce9654917193c88a55cb3de863653ee</a>.  <del>I imagine that if we're going to change this API, we should also change the module API as well.</del> Edit: As Lann pointed out, since the component model requires NaNs to be canonicalized, it may make sense to use a different representation for component values vs. core Wasm values.</p>\n</blockquote>",
        "id": 316999392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671556957
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480#issuecomment-1369908366\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480\">issue #5480</a>:</p>\n<blockquote>\n<p>I agree that while this matches the core wasm API it can be different for hte ocmponent model due to all NaN's being canonicalized. @lann would you be up for PR-ing this change?</p>\n</blockquote>",
        "id": 319220399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672760059
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480\">issue #5480</a>:</p>\n<blockquote>\n<p>Currently the <code>wasmtime::component::Val::Float32</code> and <code>::Float64</code> variants wrap <code>u32</code> and <code>u64</code> values:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/component/values.rs#L502-L503\">https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/component/values.rs#L502-L503</a></p>\n<p>I suspect this is just an oversight as typed functions do use <code>f32</code>/<code>f64</code>. I'm happy to make this update if it makes sense.</p>\n</blockquote>",
        "id": 319220417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672760065
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480#issuecomment-1369932462\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480\">issue #5480</a>:</p>\n<blockquote>\n<p>Sure, I can take it.</p>\n</blockquote>",
        "id": 319224584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672761284
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5480\">issue #5480</a>:</p>\n<blockquote>\n<p>Currently the <code>wasmtime::component::Val::Float32</code> and <code>::Float64</code> variants wrap <code>u32</code> and <code>u64</code> values:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/component/values.rs#L502-L503\">https://github.com/bytecodealliance/wasmtime/blob/b47e644c3dcd857221ef7163e780a0399a183966/crates/wasmtime/src/component/values.rs#L502-L503</a></p>\n<p>I suspect this is just an oversight as typed functions do use <code>f32</code>/<code>f64</code>. I'm happy to make this update if it makes sense.</p>\n</blockquote>",
        "id": 319273862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672777420
    }
]