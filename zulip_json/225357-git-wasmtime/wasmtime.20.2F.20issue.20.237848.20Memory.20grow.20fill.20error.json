[
    {
        "content": "<p>ZentsuGo opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<p>Hello,</p>\n<p>I'm trying to grow the memory of a Wasm module with <code>memory.grow(...)</code> method where the memory is from the exports of the instance, writing on it and reading at the end regions seems to be working on the host program. However, when I try to read an end region from the Wasm module I seem to be getting this error:</p>\n<p><code>error while executing at wasm backtrace:\n    0: 0x41fc4 - &lt;unknown&gt;!std::io::stdio::print_to_buffer_if_capture_used::h349c4cb436a0d078\n    1: 0x421e9 - &lt;unknown&gt;!std::io::stdio::_print::hed99a81f9f8d046f</code></p>\n<p>It should be noted that such behavior doesn't happen when I write a content (anywhere in the grown memory) that is less than the initial number of pages (which is 17 by default). So in order to trigger this kind of error I would fill a chunk of memory whether at the beginning or the end regions.<br>\nAs such, I think that I may probably have problems with reading inside the Wasm module or simply there is an error in the memory linking.</p>\n<p>I am accessing memory parts within the Wasm module this way:</p>\n<p><code>let memory = unsafe {\n        extern \"C\" {\n            static memory: [u8; 1246298112];\n        }\n        &amp;memory as *const _ as *const u8\n    };\n</code></p>\n<p>where I tried to put an large size for this memory.<br>\nApologies if this is no standard way to interact with memory, that is the only working thing for me so far.</p>\n</blockquote>",
        "id": 418930831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706653480
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848#issuecomment-1918250738\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<p>Thanks for the report! Are you able to reproduce this issue without using <code>unsafe</code>? That may be the cause of what's happening here.</p>\n<p>Otherwise though do you have a way to share to reproduce this? In lieu of that it's not clear what the <code>unsafe</code> code doing and the <code>unsafe</code> code could be causing the issue here.</p>\n</blockquote>",
        "id": 418955557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706667799
    },
    {
        "content": "<p>ZentsuGo edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<p>Hello,</p>\n<p>I'm trying to grow the memory of a Wasm module with <code>memory.grow(...)</code> method where the memory is from the exports of the instance, writing on it and reading at the end regions seems to be working on the host program. However, when I try to read an end region from the Wasm module I seem to be getting this error:</p>\n<p><code>error while executing at wasm backtrace:\n    0: 0x41fc4 - &lt;unknown&gt;!std::io::stdio::print_to_buffer_if_capture_used::h349c4cb436a0d078\n    1: 0x421e9 - &lt;unknown&gt;!std::io::stdio::_print::hed99a81f9f8d046f</code></p>\n<p>It should be noted that such behavior doesn't happen when I write a content (anywhere in the grown memory) that is less than the initial number of pages (which is 17 by default). So in order to trigger this kind of error I would fill a chunk of memory whether at the beginning or the end regions.<br>\nAs such, I think that I may probably have problems with reading inside the Wasm module or simply there is an error in the memory linking.</p>\n<p>I am accessing memory parts within the Wasm module this way:</p>\n<p><code>let memory = unsafe {\n        extern \"C\" {\n            static memory: [u8; 1246298112];\n        }\n        &amp;memory as *const _ as *const u8\n    };\n</code></p>\n<p>where I tried to put a large size for this memory.<br>\nApologies if this is no standard way to interact with memory, that is the only working thing for me so far.</p>\n</blockquote>",
        "id": 419040445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706708152
    },
    {
        "content": "<p>ZentsuGo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848#issuecomment-1919164297\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<p>Thanks for the answer.</p>\n<p>The unsafe block defines the memory access inside the Wasm module, the use of <code>extern static</code> requires an unsafe block unfortunately.</p>\n<p>I am working in the context of WASI-Wasmtime, here is some code to reproduce this.<br>\nThe main method code of the host program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">inherit_args</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">preopened_dir</span><span class=\"p\">(</span><span class=\"n\">Dir</span>::<span class=\"n\">from_std_file</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Instantiate our module with the imports we've created, and run it.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">20000</span><span class=\"p\">));</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory_type</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Define the memory in the linker</span>\n<span class=\"w\">  </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span>\n<span class=\"w\">      </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"s\">\"\"</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"s\">\"memory\"</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">memory</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Get the memory, to make sure it works as expected</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">get_memory</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"p\">).</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">  </span><span class=\"c1\">// We grow the memory.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">previous_nb_pages</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">grow</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">19000</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Previous number of pages: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">previous_nb_pages</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memory_data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"c1\">// Ensure enough space in memory</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">mem_size</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">14500000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Not enough space in memory to write string.\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"c1\">// Fill a chunk of memory.</span>\n<span class=\"w\">      </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">14200000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">      </span><span class=\"p\">}</span>\n\n<span class=\"w\">      </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"String written to memory.\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_to_write</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"print_string\"</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">into_func</span><span class=\"p\">())</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">read_string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">read_string</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"mi\">14100000</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"mi\">150</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"String read.\"</span><span class=\"p\">);</span>\n<span class=\"w\">              </span><span class=\"p\">},</span>\n<span class=\"w\">              </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Error while reading: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span>\n<span class=\"w\">              </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Error while looking for the function: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Here I simply filled with lots of a the memory, but I could have filled more than 17 pages of content in the Wasm module  anywhere in the memory.<br>\nI am guessing the <code>define</code> in the linker with the memory doesn't work as expected, I tried to define the memory with another name and the <code>get_memory</code> didn't find the value for this key name.</p>\n<p>Here is the code of the wasm module:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">read_string_from_memory</span><span class=\"p\">(</span><span class=\"n\">offset</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// Access the memory directly using the global memory object</span>\n<span class=\"w\">        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">memory</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1246298112</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Print memory ptr</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Memory ptr: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a slice from the memory pointer</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">slice</span>::<span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"o\">+</span><span class=\"n\">offset</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memory_slice</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">len</span><span class=\"p\">].</span><span class=\"n\">to_vec</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8_lossy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">).</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">print_string</span><span class=\"p\">(</span><span class=\"n\">offset</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">read_string_from_memory</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"String from memory: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If there is another way to get the memory through the Wasm module without using unsafe, I'd be happy to have it though.</p>\n</blockquote>",
        "id": 419045906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706709736
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848#issuecomment-1919231543\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<p>It looks like you are overwriting the entire linear memory from the host. This would overwrite both the stack of the wasm module (harmless while there is no wasm function active, but calling any wasm function will overwrite your stored data again) and any data stored by the wasm module (this is likely to lead to corruption for the wasm module, causing it to crash.) I did recommend having the wasm module itself allocate memory using it's memory allocator and then pass the address of this memory chunk to the host.</p>\n</blockquote>",
        "id": 419053691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706711777
    },
    {
        "content": "<p>ZentsuGo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848#issuecomment-1919382986\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<p>Thanks @bjorn3 for your answer.<br>\nIn this case it doesn't seem like memory.grow actually grows the memory's module or that it grows a separate memory, since I am writing only to a portion of the memory.</p>\n<p>Indeed I did not seem to be able to find clear instructions on the memory allocation of the wasm module, would you mind to redirect me to the appropriate documentation please?</p>\n</blockquote>",
        "id": 419069569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706716148
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848#issuecomment-1919454215\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<blockquote>\n<p>Indeed I did not seem to be able to find clear instructions on the memory allocation of the wasm module, would you mind to redirect me to the appropriate documentation please?</p>\n</blockquote>\n<p>You can export a function from your wasm module which calls <code>malloc</code> or whichever allocation function is used by the language you use. And then from the host you can call this function whenever you need to get some memory chunk to write to.</p>\n<blockquote>\n<p>In this case it doesn't seem like memory.grow actually grows the memory's module or that it grows a separate memory, since I am writing only to a portion of the memory.</p>\n</blockquote>\n<p>If it didn't grow the memory, the crash would happen right when writing. From what I can tell based on the backtrace snippet you gave, the crash happens much latter somewhere inside of the printing machinery of libstd, but not at a place where the value you are trying to print would be accessed. This indicates to me that there is memory corruption of some sort within the wasm module.</p>\n</blockquote>",
        "id": 419077710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706718283
    },
    {
        "content": "<p>ZentsuGo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848#issuecomment-1919533284\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<p>Now it seems to be working, considering the returned pointer refers to an offset to the memory pointer retrieved from the instance in the host program.<br>\nIt seems like the allocating function is enough, since the memory of the module seems to adapt its size upon the call of the function. At least it seems to be working without the use of memory.grow(...).</p>\n<p>However, when deallocating the memory chunk, the memory size seems to remain constant. However memory has indeed been freed since I can no longer write on it and read back causing a similar malloc error.</p>\n<p>Thank you both!</p>\n</blockquote>",
        "id": 419085257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706720692
    },
    {
        "content": "<p>ZentsuGo closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<p>Hello,</p>\n<p>I'm trying to grow the memory of a Wasm module with <code>memory.grow(...)</code> method where the memory is from the exports of the instance, writing on it and reading at the end regions seems to be working on the host program. However, when I try to read an end region from the Wasm module I seem to be getting this error:</p>\n<p><code>error while executing at wasm backtrace:\n    0: 0x41fc4 - &lt;unknown&gt;!std::io::stdio::print_to_buffer_if_capture_used::h349c4cb436a0d078\n    1: 0x421e9 - &lt;unknown&gt;!std::io::stdio::_print::hed99a81f9f8d046f</code></p>\n<p>It should be noted that such behavior doesn't happen when I write a content (anywhere in the grown memory) that is less than the initial number of pages (which is 17 by default). So in order to trigger this kind of error I would fill a chunk of memory whether at the beginning or the end regions.<br>\nAs such, I think that I may probably have problems with reading inside the Wasm module or simply there is an error in the memory linking.</p>\n<p>I am accessing memory parts within the Wasm module this way:</p>\n<p><code>let memory = unsafe {\n        extern \"C\" {\n            static memory: [u8; 1246298112];\n        }\n        &amp;memory as *const _ as *const u8\n    };\n</code></p>\n<p>where I tried to put a large size for this memory.<br>\nApologies if this is no standard way to interact with memory, that is the only working thing for me so far.</p>\n</blockquote>",
        "id": 419085299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706720708
    },
    {
        "content": "<p>ZentsuGo edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848#issuecomment-1919533284\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<p>Now it seems to be working, considering the returned pointer refers to an offset to the memory pointer retrieved from the instance in the host program.<br>\nIt seems like the allocating function is enough, since the memory of the module seems to adapt its size upon the call of the function. At least it seems to be working without the use of memory.grow(...).</p>\n<p>However, when deallocating the memory chunk, the memory size seems to remain constant. But memory has indeed been freed since I can no longer write on it and read back causing a similar malloc error.</p>\n<p>Thank you both!</p>\n</blockquote>",
        "id": 419098351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706724943
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848#issuecomment-1919678164\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7848\">issue #7848</a>:</p>\n<blockquote>\n<blockquote>\n<p>However, when deallocating the memory chunk, the memory size seems to remain constant.</p>\n</blockquote>\n<p>Correct. Wasm doesn't have a way to shrink the linear memory. Only to grow it. The memory allocator will still internally mark it as free and reuse it for a future memory allocation, but it doesn't have a way to tell the wasm runtime that it doesn't a chunk of memory anymore.</p>\n</blockquote>",
        "id": 419099481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706725348
    }
]