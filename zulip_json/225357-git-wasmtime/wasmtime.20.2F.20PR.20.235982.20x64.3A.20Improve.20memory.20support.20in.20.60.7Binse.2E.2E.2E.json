[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982\">PR #5982</a> from <code>pextr</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit improves adds support to Cranelift to emit <code>pextr{b,w,d,q}</code> with a memory destination, merging a store-of-extract operation into one instruction. Additionally AVX support is added for the <code>pextr*</code> instructions.</p>\n<p>I've additionally tried to ensure that codegen tests and runtests exist for all forms of these instructions too.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 340934614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678472537
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982\">PR #5982</a>.</p>",
        "id": 340934617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678472538
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#pullrequestreview-1335748555\">PR review</a>.</p>",
        "id": 340987619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678492371
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#pullrequestreview-1335748555\">PR review</a>.</p>",
        "id": 340987620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678492371
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#discussion_r1132973563\">PR review comment</a>:</p>\n<blockquote>\n<p>This is <code>0b11101110</code>... is that right?</p>\n</blockquote>",
        "id": 340987621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678492371
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#discussion_r1132975931\">PR review comment</a>:</p>\n<blockquote>\n<p>Looking at the other cases, I started to worry that one of these instructions actually zeroes bits we do not want to zero. I think it is this case; from the <code>MOVSD</code> documentation:</p>\n<blockquote>\n<p>Legacy version: When the source and destination operands are XMM registers, bits MAXVL:64 of the destination operand remains unchanged. When the source operand is a memory location and destination operand is an XMM registers, the quadword at bits 127:64 of the destination operand is cleared to all 0s, bits MAXVL:128 of the destination operand remains unchanged.</p>\n</blockquote>\n<blockquote>\n<p>VEX and EVEX encoded register-register syntax: Moves a scalar double precision floating-point value from the second source operand (the third operand) to the low quadword element of the destination operand (the first operand). Bits 127:64 of the destination operand are copied from the first source operand (the second operand). Bits (MAXVL-1:128) of the corresponding destination register are zeroed</p>\n</blockquote>\n<p>So it is the legacy SSE case where a <code>movsd 0(%rdi) ....</code> would zero too many bits but actually in the AVX code we could merge these two <code>vmovsd</code> into one. Is there a way to do that?</p>\n</blockquote>",
        "id": 340987622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678492371
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#discussion_r1132976182\">PR review comment</a>:</p>\n<blockquote>\n<p>Missing comma after <code>$1</code>?</p>\n</blockquote>",
        "id": 340987623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678492371
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#discussion_r1132972126\">PR review comment</a>:</p>\n<blockquote>\n<p>I checked and <code>u8_from_uimm8</code> does not guarantee that <code>n</code> is in the right range (e.g., 0 to 15 here). Did you see any validation that would prevent wrong <code>n</code> here at the CLIF level or do we rely exclusively on the Wasm-level construction? If there is nothing and it ends up being too tricky to do here in ISLE, maybe <code>emit.rs</code> could gain some <code>assert!</code>s or something like that.</p>\n</blockquote>",
        "id": 340987624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678492371
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#discussion_r1132976366\">PR review comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 340987625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678492372
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#pullrequestreview-1335798290\">PR review</a>.</p>",
        "id": 341002635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678501270
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#discussion_r1133012340\">PR review comment</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9ed441e6575685e3c795ab4a504e7f90be01ce3e/cranelift/codegen/src/verifier/mod.rs#L1663-L1687\">this is the block</a> in the verifier which validates that lanes are always inbounds, so I think we should be good on that front. I can add some extra asserts though to the backend too.</p>\n</blockquote>",
        "id": 341002636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678501270
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#pullrequestreview-1335798490\">PR review</a>.</p>",
        "id": 341002727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678501345
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#discussion_r1133012467\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed!</p>\n</blockquote>",
        "id": 341002728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678501346
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#pullrequestreview-1335799243\">PR review</a>.</p>",
        "id": 341003260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678501738
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982#discussion_r1133013295\">PR review comment</a>:</p>\n<blockquote>\n<p>Going by <a href=\"https://www.felixcloutier.com/x86/movsd\">this</a> which I realize isn't official but has been what I've been using so far, my read is that <code>VEX.128.F2.0F 11 /r: VMOVSD xmm1, xmm2, xmm3</code> has different semantics than <code>VEX.128.F2.0F 10 /r: VMOVSD xmm1, m64</code> so I think that AVX and SSE match here where if you use the register-to-register form it preserves the upper bits but if you use the memory-to-register form it always zeros the upper bits, so I don't think we can fuse?</p>\n<p>I'll admit though that this is all real subtle and if the official docs are different I wouldn't be too surprised.</p>\n</blockquote>",
        "id": 341003261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678501738
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982\">PR #5982</a> from <code>pextr</code> to <code>main</code>.</p>",
        "id": 341003629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678501879
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982\">PR #5982</a> from <code>pextr</code> to <code>main</code>.</p>",
        "id": 341511778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678724862
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5982\">PR #5982</a>.</p>",
        "id": 341565925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678738892
    }
]