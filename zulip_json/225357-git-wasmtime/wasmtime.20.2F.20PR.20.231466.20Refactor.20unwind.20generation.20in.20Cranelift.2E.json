[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 192862718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585947327
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 192862733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585947336
    },
    {
        "content": "<p><strong>peterhuene</strong> requested <a href=\"https://github.com/yurydelendik\" title=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a>.</p>",
        "id": 192862908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585947379
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 192864297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585948192
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 192867938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585950488
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 192871327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585952765
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 192872494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585953711
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention in Wasmtime, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 193361291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586371151
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r405795575\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r405795575\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think this might suffer from the same problem of #1471: when compiling for ARM, this block will be ignored and <code>map_reg</code> won't exist over in <code>wasmtime-environ</code> and <code>wasmtime-debug</code>. I guess we have the same options I mentioned in that issue:</p>\n<blockquote>\n<ol>\n<li>to just get the ARM building, I could remove the feature flag on x86; then users encounter a runtime error if they try to use this FDE functionality but at least it compiles</li>\n<li>to make map_reg functional on other platforms, we could either move map_reg out of the x86 module or create separate map_reg functions in all of the ISA modules.</li>\n</ol>\n</blockquote>\n</blockquote>",
        "id": 193374662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586377837
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-390308539\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-390308539\">PR Review</a>.</p>",
        "id": 193374663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586377837
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r405800591\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r405800591\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, I missed that it was in wasmtime-environ and not in the cranelift build.  I like the second solution, perhaps with a default implementation that errors with a new <code>RegisterMappingError</code> indicating the ISA doesn't support gimli register mapping?</p>\n</blockquote>",
        "id": 193375687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586378396
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-390314630\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-390314630\">PR Review</a>.</p>",
        "id": 193375688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586378396
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r405800591\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r405800591\">PR Review Comment</a>.</p>",
        "id": 193375749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586378417
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-390315409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-390315409\">PR Review</a>.</p>",
        "id": 193375820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586378466
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r405801228\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r405801228\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Going to resolve this and take the conversation back to #1471.</p>\n</blockquote>",
        "id": 193375823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586378466
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention in Wasmtime, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 193831848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586818562
    },
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> to yurydelendik.</p>",
        "id": 193958033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586898865
    },
    {
        "content": "<p><strong>peterhuene</strong> requested <a href=\"https://github.com/bnjbvr\" title=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/yurydelendik\" title=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a>.</p>",
        "id": 193958044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586898872
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-393921926\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-393921926\">PR Review</a>.</p>",
        "id": 194053958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586966810
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r408960504\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r408960504\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Here and near <code>map_reg</code> in this file, we need to avoid <code>panic</code>. It maybe reasonable to just skip the operation if register is unknown to DWARF (I don't think we can create a fallback <code>CallFrameInstruction</code>).</p>\n</blockquote>",
        "id": 194053959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586966811
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394061799\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394061799\">PR Review</a>.</p>",
        "id": 194214055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586978067
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409074598\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409074598\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good point.  We could also return an error instead of panicking since the creation function now returns <code>CodegenResult</code> from #1216.</p>\n</blockquote>",
        "id": 194214056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586978067
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394088449\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394088449\">PR Review</a>.</p>",
        "id": 194218763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586980481
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409096200\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409096200\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>map_reg</code> should now return a <code>Result</code> since #1451 so it should be a bit easier; prior to that PR <code>map_reg</code> panicked so when I added <code>RegisterMappingError</code> I kept the same behavior with this <code>expect</code> (and one other place I believe). I agree it would be better if we avoided panicking!</p>\n</blockquote>",
        "id": 194218764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586980481
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409108305\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409108305\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I missed that will all the merging.  I'll get that fixed.</p>\n</blockquote>",
        "id": 194221714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586981848
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394103580\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394103580\">PR Review</a>.</p>",
        "id": 194221715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586981848
    },
    {
        "content": "<p>peterhuene deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409108305\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409108305\">PR Review Comment</a>.</p>",
        "id": 194224668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586983403
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> (assigned to yurydelendik) from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention in Wasmtime, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 194227245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586984609
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394133440\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394133440\">PR Review</a>.</p>",
        "id": 194227266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586984620
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409132525\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409132525\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've pushed up a commit to remove the <code>expect</code> from <code>map_reg</code> calls.</p>\n</blockquote>",
        "id": 194227267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586984620
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> (assigned to yurydelendik) from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention in Wasmtime, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 194232397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586987430
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394164985\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394164985\">PR Review</a>.</p>",
        "id": 194233365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586987957
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409159036\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409159036\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Thanks. FWIW I think generating even incomplete FDE for backtrace outweighs maintainability/diagnostics of unwind generation code. That said, we may ignore map_reg errors in future.</p>\n</blockquote>",
        "id": 194233366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586987957
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394189146\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394189146\">PR Review</a>.</p>",
        "id": 194238525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586991196
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409180522\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409180522\">PR Review Comment</a>:</p>\n<blockquote>\n<p>IIRC that needs to happen after each FDE: GCC __register_frame walks until the end (if my understanding of source code right), though on MacOS everything goes through _unw_add_dynamic_fde (single FDE only).</p>\n</blockquote>",
        "id": 194238527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586991196
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409180522\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409180522\">PR Review Comment</a>.</p>",
        "id": 194238615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586991251
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394192514\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394192514\">PR Review</a>.</p>",
        "id": 194239257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586991694
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394204158\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394204158\">PR Review</a>.</p>",
        "id": 194241524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586993619
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409193858\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409193858\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ugh, you're right.  I think this is repeatedly going through the remaining part of the table each iteration to register the frame.  I'll fix.</p>\n</blockquote>",
        "id": 194241525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586993619
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> (assigned to yurydelendik) from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention in Wasmtime, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 194245982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586997554
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394291896\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394291896\">PR Review</a>.</p>",
        "id": 194257306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587011663
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409275968\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r409275968\">PR Review Comment</a>:</p>\n<blockquote>\n<p>So I put up a commit that calls <code>__register_frame</code> once for non-macOS and for macOS it iterates the table and calls <code>__register_frame</code> per FDE.  Judging from the libgcc source, this should work just fine.  Let me know what you think and I'll make any additional changes.</p>\n</blockquote>",
        "id": 194257307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587011663
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/bnjbvr\" title=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/yurydelendik\" title=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a>.</p>",
        "id": 194276121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587028379
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394663990\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-394663990\">PR Review</a>.</p>",
        "id": 194308488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587045744
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> (assigned to yurydelendik) from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention in Wasmtime, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 194345932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587060944
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a> (assigned to yurydelendik) from <code>fix-unwind-emit</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR makes the following changes to unwind information generation in<br>\nCranelift:</p>\n<ul>\n<li>\n<p>Remove frame layout change implementation in favor of processing the prologue<br>\n  and epilogue instructions when unwind information is requested.  This also<br>\n  means this work is no longer performed for Windows, which didn't utilize it.<br>\n  It also helps simplify the prologue and epilogue generation code.</p>\n</li>\n<li>\n<p>Remove the unwind sink implementation that required each unwind information<br>\n  to be represented in final form. For FDEs, this meant writing a<br>\n  complete frame table per function, which wastes 20 bytes or so for each<br>\n  function with duplicate CIEs.  This also enables Cranelift users to collect the<br>\n  unwind information and write it as a single frame table.</p>\n</li>\n<li>\n<p>For System V calling convention in Wasmtime, the unwind information is no longer stored<br>\n  in code memory (it's only a requirement for Windows ABI to do so).  This allows<br>\n  for more compact code memory for modules with a lot of functions.</p>\n</li>\n<li>\n<p>Deletes some duplicate code relating to frame table generation.  Users can<br>\n  now simply use gimli to create a frame table from each function's unwind<br>\n  information.</p>\n</li>\n</ul>\n<p>Fixes #1181.</p>\n</blockquote>",
        "id": 194353766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587064458
    },
    {
        "content": "<p>peterhuene merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466\">PR #1466</a>.</p>",
        "id": 194363840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587069266
    },
    {
        "content": "<p>philipc submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-401507622\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-401507622\">PR Review</a>.</p>",
        "id": 195502348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588051775
    },
    {
        "content": "<p>philipc created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r416337240\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r416337240\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FYI, <code>gimli::write::Expression</code> is no longer a simple <code>Vec&lt;u8&gt;</code> after <a href=\"https://github.com/gimli-rs/gimli/pull/479\" title=\"https://github.com/gimli-rs/gimli/pull/479\">https://github.com/gimli-rs/gimli/pull/479</a>, so this isn't going to work.</p>\n<p>It seems like you don't actually need <code>impl From&lt;gimli::write::CallFrameInstruction&gt; for CallFrameInstruction</code> though, so it would be possible to simply delete all the <code>Expression</code> support. If you do need to support expressions, then you'll need to come up with your own serializable version of them. gimli's expressions are used for other debug sections too, thus they potentially have references to DIEs and can't be individually serialized.</p>\n</blockquote>",
        "id": 195502349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588051775
    },
    {
        "content": "<p>philipc submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-401520362\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-401520362\">PR Review</a>.</p>",
        "id": 195521977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588053831
    },
    {
        "content": "<p>philipc created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r416349933\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r416349933\">PR Review Comment</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/philipc/wasmtime/commit/103d68d6c5e6201f76a17b14b29ddca82ad02350\" title=\"https://github.com/philipc/wasmtime/commit/103d68d6c5e6201f76a17b14b29ddca82ad02350\">https://github.com/philipc/wasmtime/commit/103d68d6c5e6201f76a17b14b29ddca82ad02350</a> for the changes I think are needed. I can open a PR once a new gimli version is released.</p>\n</blockquote>",
        "id": 195521978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588053831
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-403191195\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#pullrequestreview-403191195\">PR Review</a>.</p>",
        "id": 195797336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588220616
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r417745315\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1466#discussion_r417745315\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@philipc thanks for the heads up!  When we update gimli, I think we can work around this by removing expression support from this representation since we don't need it to describe our frames currently.</p>\n</blockquote>",
        "id": 195797338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588220617
    }
]