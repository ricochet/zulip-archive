[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183\">issue #3183</a>:</p>\n<blockquote>\n<p>As of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">https://github.com/bytecodealliance/wasmtime/pull/3180</a> Wasmtime will stop workong on AArch64 Linux with PAC enabled. Debugging this issue at <a href=\"#narrow/stream/217126-wasmtime/topic/arm64.2C.20pointer.20auth.2C.20unwinding\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/arm64.2C.20pointer.20auth.2C.20unwinding</a> seems to indicate that this is a libgcc bug which only accidentally worked before because the <code>DW_OP_lit0</code> we specify for register 34, the pointer auth enabling register, just happened to show up at an even address in memory. After #3180 the encoding of the FDE is changing just enough that some expressions show up at odd addresses, which tricks libgcc to thinking that pointer authentication is enabled, when it actually isn't.</p>\n<p>This commit is tracking improving this by either figuring out a workaround for gcc, implementing pointer authentication, or something similar.</p>\n</blockquote>",
        "id": 249287184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628799346
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183#issuecomment-1059176038\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183\">issue #3183</a>:</p>\n<blockquote>\n<p><a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104689\">An associated libgcc issue</a> has been created.</p>\n</blockquote>",
        "id": 274130347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646401625
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183\">issue #3183</a>:</p>\n<blockquote>\n<p>As of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">https://github.com/bytecodealliance/wasmtime/pull/3180</a> Wasmtime will stop workong on AArch64 Linux with PAC enabled. Debugging this issue at <a href=\"#narrow/stream/217126-wasmtime/topic/arm64.2C.20pointer.20auth.2C.20unwinding\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/arm64.2C.20pointer.20auth.2C.20unwinding</a> seems to indicate that this is a libgcc bug which only accidentally worked before because the <code>DW_OP_lit0</code> we specify for register 34, the pointer auth enabling register, just happened to show up at an even address in memory. After #3180 the encoding of the FDE is changing just enough that some expressions show up at odd addresses, which tricks libgcc to thinking that pointer authentication is enabled, when it actually isn't.</p>\n<p>This commit is tracking improving this by either figuring out a workaround for gcc, implementing pointer authentication, or something similar.</p>\n</blockquote>",
        "id": 281819188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652187233
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183\">issue #3183</a>:</p>\n<blockquote>\n<p>As of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">https://github.com/bytecodealliance/wasmtime/pull/3180</a> Wasmtime will stop workong on AArch64 Linux with PAC enabled. Debugging this issue at <a href=\"#narrow/stream/217126-wasmtime/topic/arm64.2C.20pointer.20auth.2C.20unwinding\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/arm64.2C.20pointer.20auth.2C.20unwinding</a> seems to indicate that this is a libgcc bug which only accidentally worked before because the <code>DW_OP_lit0</code> we specify for register 34, the pointer auth enabling register, just happened to show up at an even address in memory. After #3180 the encoding of the FDE is changing just enough that some expressions show up at odd addresses, which tricks libgcc to thinking that pointer authentication is enabled, when it actually isn't.</p>\n<p>This commit is tracking improving this by either figuring out a workaround for gcc, implementing pointer authentication, or something similar.</p>\n</blockquote>",
        "id": 281819189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652187233
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183#issuecomment-1122759960\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183\">issue #3183</a>:</p>\n<blockquote>\n<p>And <a href=\"https://gcc.gnu.org/pipermail/gcc-patches/2022-May/594414.html\">a patch</a> has been posted.</p>\n</blockquote>",
        "id": 281871061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652209456
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183#issuecomment-1141433769\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183\">issue #3183</a>:</p>\n<blockquote>\n<p>The fix has been <a href=\"https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=0d344b557604e966dc7f91739881f03e1f221efd\">committed</a>.</p>\n</blockquote>",
        "id": 284399788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653939036
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3183\">issue #3183</a>:</p>\n<blockquote>\n<p>As of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">https://github.com/bytecodealliance/wasmtime/pull/3180</a> Wasmtime will stop workong on AArch64 Linux with PAC enabled. Debugging this issue at <a href=\"#narrow/stream/217126-wasmtime/topic/arm64.2C.20pointer.20auth.2C.20unwinding\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/arm64.2C.20pointer.20auth.2C.20unwinding</a> seems to indicate that this is a libgcc bug which only accidentally worked before because the <code>DW_OP_lit0</code> we specify for register 34, the pointer auth enabling register, just happened to show up at an even address in memory. After #3180 the encoding of the FDE is changing just enough that some expressions show up at odd addresses, which tricks libgcc to thinking that pointer authentication is enabled, when it actually isn't.</p>\n<p>This commit is tracking improving this by either figuring out a workaround for gcc, implementing pointer authentication, or something similar.</p>\n</blockquote>",
        "id": 285541331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654784233
    }
]