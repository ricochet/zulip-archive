[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363\">PR #2363</a>.</p>",
        "id": 215633191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604519763
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363\">PR #2363</a> from <code>extend-only-if-abi</code> to <code>main</code>:</p>\n<blockquote>\n<p>There has been some confusion over the meaning of the \"sign-extend\"<br>\n(<code>sext</code>) and \"zero-extend\" (<code>uext</code>) attributes on parameters and return<br>\nvalues in signatures. According to the three implemented backends, these<br>\nattributes indicate that a value narrower than a full register should<br>\nalways be extended in the way specified. However, they are much more<br>\nuseful if they mean \"extend in this way if the ABI requires extending\":<br>\nonly the ABI backend knows whether or not a particular ABI (e.g., x64<br>\nSysV vs. x64 Baldrdash) requires extensions, while only the frontend<br>\n(CLIF generator) knows whether or not a value is signed, so the two have<br>\nto work in concert.</p>\n<p>This is the result of some very helpful discussion in #2354 (thanks to<br>\n@uweigand for raising the issue and @bjorn3 for helping to reason about<br>\nit).</p>\n<p>This change respects the extension attributes in the above way, rather<br>\nthan unconditionally extending, to avoid potential performance<br>\ndegradation as we introduce more extension attributes on signatures.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215633193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604519763
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363\">PR #2363</a> from <code>extend-only-if-abi</code> to <code>main</code>:</p>\n<blockquote>\n<p>There has been some confusion over the meaning of the \"sign-extend\"<br>\n(<code>sext</code>) and \"zero-extend\" (<code>uext</code>) attributes on parameters and return<br>\nvalues in signatures. According to the three implemented backends, these<br>\nattributes indicate that a value narrower than a full register should<br>\nalways be extended in the way specified. However, they are much more<br>\nuseful if they mean \"extend in this way if the ABI requires extending\":<br>\nonly the ABI backend knows whether or not a particular ABI (e.g., x64<br>\nSysV vs. x64 Baldrdash) requires extensions, while only the frontend<br>\n(CLIF generator) knows whether or not a value is signed, so the two have<br>\nto work in concert.</p>\n<p>This is the result of some very helpful discussion in #2354 (thanks to<br>\n@uweigand for raising the issue and @bjorn3 for helping to reason about<br>\nit).</p>\n<p>This change respects the extension attributes in the above way, rather<br>\nthan unconditionally extending, to avoid potential performance<br>\ndegradation as we introduce more extension attributes on signatures.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215765650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604606084
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#pullrequestreview-529413487\">PR Review</a>.</p>",
        "id": 216515190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605208892
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#pullrequestreview-529413487\">PR Review</a>.</p>",
        "id": 216515192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605208892
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#discussion_r522355758\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Why drop the other assertions? (Not saying we shouldn't, but is this enough to verify that the right extension (or absence) is performed?)</p>\n</blockquote>",
        "id": 216515193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605208892
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#discussion_r522356219\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Just to verify: this becomes a <code>check</code> because using the <code>baldrdash_system_v</code> adds some instructions we don't care about in this test?</p>\n</blockquote>",
        "id": 216515194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605208892
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#discussion_r522356996\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I sort of wish we had a similar ABI test for x64... not a blocker for this PR but it might come in handy to rule things out if we're troubleshooting in the future.</p>\n</blockquote>",
        "id": 216515195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605208892
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#pullrequestreview-529468691\">PR Review</a>.</p>",
        "id": 216522532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212632
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#discussion_r522401443\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That's actually literally the whole function body generated by Cranelift in this case! The Baldrdash ABI generates \"naked\" functions, without prologues or epilogues, because SpiderMonkey expects to generate those itself.</p>\n</blockquote>",
        "id": 216522533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212632
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#pullrequestreview-529469132\">PR Review</a>.</p>",
        "id": 216522649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212669
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#discussion_r522402087\">PR Review Comment</a>:</p>\n<blockquote>\n<p>More precisely, because it's the only instruction :-)</p>\n</blockquote>",
        "id": 216522651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212669
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#pullrequestreview-529469840\">PR Review</a>.</p>",
        "id": 216522791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212728
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363#discussion_r522403038\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For sure, I agree -- I'll try to do this if/when I touch the ABI code next.</p>\n</blockquote>",
        "id": 216522792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212728
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2363\">PR #2363</a>.</p>",
        "id": 216522950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212782
    }
]