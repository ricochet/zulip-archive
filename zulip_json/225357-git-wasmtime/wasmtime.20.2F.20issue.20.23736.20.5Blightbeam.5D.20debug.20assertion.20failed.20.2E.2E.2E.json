[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/736#issuecomment-928096146\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/736\">issue #736</a>:</p>\n<blockquote>\n<p>Lightbeam was removed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3390\">https://github.com/bytecodealliance/wasmtime/pull/3390</a> as explained in <a href=\"https://github.com/bytecodealliance/rfcs/pull/14\">RFC 14</a>, so I'm going to close this.</p>\n</blockquote>",
        "id": 255087189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632763779
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/736\">issue #736</a>:</p>\n<blockquote>\n<h1>Issue description</h1>\n<p>A call to <code>debug_assert_eq</code> make lightbeam to panic when compiled in debug mode.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ ./target/debug/debug_lightbeam debug_assert_type_min.wasm\nthread <span class=\"s1\">'main'</span> panicked at <span class=\"s1\">'assertion failed: `(left == right)`</span>\n<span class=\"s1\">  left: `Int(_32)`,</span>\n<span class=\"s1\"> right: `Int(_64)`'</span>,\nXXX/wasmtime/crates/lightbeam/src/microwasm.rs:1443:13\nnote: run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span> environment variable to display a backtrace.\n</code></pre></div>\n<p>This issue is related to the following piece of code:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/31472fbb5a6417ea3d9eb10417ff5ea49712998a/crates/lightbeam/src/microwasm.rs#L1442-L1444\">https://github.com/bytecodealliance/wasmtime/blob/31472fbb5a6417ea3d9eb10417ff5ea49712998a/crates/lightbeam/src/microwasm.rs#L1442-L1444</a></p>\n<h1>Reproduction</h1>\n<p>Download: <a href=\"https://github.com/bytecodealliance/wasmtime/files/3978177/debug_assert_type_min.zip\">debug_assert_type_min.zip</a></p>\n<p>or <code>wasm2wat --enable-sign-extension debug_assert_type_min.wasm\n</code>:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mi\">0</span>\n    <span class=\"kt\">i64</span><span class=\"err\">.ext</span><span class=\"k\">end</span><span class=\"mi\">8</span><span class=\"err\">_s</span>\n    <span class=\"kt\">i64</span><span class=\"err\">.ext</span><span class=\"k\">end</span><span class=\"mi\">16</span><span class=\"err\">_s</span>\n    <span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">1 1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"inc\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">start</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Testing program (need to be compiled in debug mode i.e. <code>RUSTFLAGS=-g cargo build</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"p\">{</span><span class=\"n\">File</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Read</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"n\">PathBuf</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_fuzzing</span>::<span class=\"n\">oracles</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_jit</span>::<span class=\"n\">CompilationStrategy</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">lightbeam</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Read the contents of a file</span>\n<span class=\"k\">fn</span> <span class=\"nf\">read_contents</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">PathBuf</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"n\">PathBuf</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_binary</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">read_contents</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_path</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_res_compile</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">oracles</span>::<span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_binary</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">CompilationStrategy</span>::<span class=\"n\">Lightbeam</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_res_instantiate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">oracles</span>::<span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_binary</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">CompilationStrategy</span>::<span class=\"n\">Lightbeam</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_res_translate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lightbeam</span>::<span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_binary</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>wasmtime commit: 31472fbb5a6417ea3d9eb10417ff5ea49712998a<br>\n</p>\n</blockquote>",
        "id": 255087191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632763779
    }
]