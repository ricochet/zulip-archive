[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469\">PR #4469</a> from <code>preserve-frame-pointers-flag</code> to <code>main</code>:</p>\n<blockquote>\n<p>This flag is optional, but when it is set then Cranelift backends must preserve frame pointers (or ISA equivalent).</p>\n<p>Preserving frame pointers -- even inside leaf functions -- makes it easy to capture the stack of a running program, without requiring any side tables or metadata (like <code>.eh_frame</code> sections). Many sampling profilers and similar tools walk frame pointers to capture stacks. Enabling this option will play nice with those tools.</p>\n<p>Our <code>x64</code> backend already unconditionally preserves frame pointers, so it is trivially conforming with this new flag.</p>\n<p>Our <code>aarch64</code> backend preserves frame pointers or not based on whether the <code>machinst</code> framework tells it to or not by calling <code>gen_prologue_frame_setup</code>, and the <code>machinst</code> framework looks at this new flag when deciding whether to call the backend's implementation of <code>gen_prologue_frame_setup</code>, so it is conforming with this new flag.</p>\n<p>However, our <code>s390x</code> backend has an empty implementation of <code>gen_prologue_frame_setup</code>, and so it is _not_ preserving frame pointers when this new flag is set. We will need a follow up PR that brings our <code>s390x</code> backend into conformance with this new flag.</p>\n<p>cc @uweigand, your help with this last bit would be very appreciated, as I'm not familiar with <code>s390x</code>.</p>\n<p>cc <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4431\">https://github.com/bytecodealliance/wasmtime/pull/4431</a></p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 290165402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658267167
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469\">PR #4469</a>.</p>",
        "id": 290165403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658267167
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#pullrequestreview-1044136614\">PR review</a>.</p>",
        "id": 290167927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658268700
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#discussion_r924996859\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add the equivalent of this \"preserves frame pointers\" test for x64 too? The flag won't actually matter now but it'd be good to have the test coverage if/when we add any omit-frame-pointers mode in the future.</p>\n</blockquote>",
        "id": 290167928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658268700
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#pullrequestreview-1044136614\">PR review</a>.</p>",
        "id": 290167929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658268700
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469\">PR #4469</a> from <code>preserve-frame-pointers-flag</code> to <code>main</code>.</p>",
        "id": 290169087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658269467
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#pullrequestreview-1044146890\">PR review</a>.</p>",
        "id": 290169136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658269510
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#discussion_r925003992\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 290169137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658269510
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469\">PR #4469</a>.</p>",
        "id": 290247248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658329343
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#pullrequestreview-1045335882\">PR review</a>.</p>",
        "id": 290259461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658334174
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#discussion_r925815651\">PR review comment</a>:</p>\n<blockquote>\n<p>LLVM has a tri-state value of \"always\", \"non-leaf\" and \"may-omit\". It would be nice if Cranelift could have the same so I don't have to use the equivalent of \"always\" if \"non-leaf\" was chosen by the rustc target. For example Apple AArch64 targets require \"non-leaf\".</p>\n</blockquote>",
        "id": 290259462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658334174
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#pullrequestreview-1045383012\">PR review</a>.</p>",
        "id": 290264328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658336227
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#discussion_r925847208\">PR review comment</a>:</p>\n<blockquote>\n<p>This is something we can do in the future as needed.</p>\n</blockquote>",
        "id": 290264329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658336227
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#discussion_r927678707\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually with the way the AArch64 backend works right now it is either \"always\" (i.e. <code>preserve_frame_pointers</code> being true) or \"non-leaf\" (i.e. false value). \"may-omit\" sounds as if it would be fine to treat it as \"non-leaf\".</p>\n</blockquote>",
        "id": 290508881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658498178
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#pullrequestreview-1047944089\">PR review</a>.</p>",
        "id": 290508882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658498178
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#discussion_r927678707\">PR review comment</a>.</p>",
        "id": 290509994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658498739
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#pullrequestreview-1047976047\">PR review</a>.</p>",
        "id": 290511702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658499555
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#discussion_r927700334\">PR review comment</a>:</p>\n<blockquote>\n<p>The name preserve_frame_pointers makes it seem like false means that frame pointers may always be omitted.</p>\n</blockquote>",
        "id": 290511703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658499555
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#pullrequestreview-1051339045\">PR review</a>.</p>",
        "id": 290924271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658854949
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4469#discussion_r930215673\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, thinking a bit more about this, actually the AArch64 backend always \"preserves\" the frame pointer (i.e. it always has a valid value - either 0 or an address that points to a frame record on the stack), since the respective register is not allocatable; it is just that some functions (simple leaf functions that do not use the stack) opt not to update it, and keep its value as set by their callers.</p>\n</blockquote>",
        "id": 290924272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658854949
    }
]