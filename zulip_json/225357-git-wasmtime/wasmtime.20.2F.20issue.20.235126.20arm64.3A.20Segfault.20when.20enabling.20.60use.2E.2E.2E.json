[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126\">issue #5126</a>:</p>\n<blockquote>\n<p>Given this input wasm module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (func (;0;) (type 0)\n    global.get 0\n    i32.eqz\n    if  ;; label = @1\n      unreachable\n    end\n    global.get 0\n    i32.const 1\n    i32.sub\n    global.set 0\n    i32.const -320017172\n    v128.load32_splat\n    i8x16.bitmask\n    v128.load32_zero align=1\n    i64x2.extend_high_i32x4_u\n    i64x2.extend_high_i32x4_u\n    v128.const i32x4 0x9bececec 0x00007171 0x00000000 0x00000000\n    drop\n    drop\n  )\n  (memory (;0;) 0 3)\n  (global (;0;) (mut i32) i32.const 1000)\n  (export \"\" (func 0))\n  (export \"1\" (memory 0))\n  (data (;0;) (i32.const 0) \"\")\n)\n</code></pre></div>\n<p>I get these results on a local arm64 marchine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">``</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x44</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">zsh</span>: <span class=\"nc\">segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The faulting instruction appears to be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">disas</span><span class=\"w\"> </span><span class=\"cp\">$pc</span><span class=\"p\">,</span><span class=\"cp\">$pc</span><span class=\"o\">+</span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"n\">Dump</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mh\">0xfffff7b25038</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mh\">0xfffff7b2504c</span>:\n<span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x0000fffff7b25038</span>:  <span class=\"nc\">ld1r</span><span class=\"w\">    </span><span class=\"p\">{</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">s</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x5</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b2503c</span>:  <span class=\"nc\">sshr</span><span class=\"w\">    </span><span class=\"n\">v25</span><span class=\"p\">.</span><span class=\"mi\">16</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">16</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b25040</span>:  <span class=\"nc\">mov</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x201</span><span class=\"w\">                      </span><span class=\"c1\">// #513</span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b25044</span>:  <span class=\"nc\">movk</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x804</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b25048</span>:  <span class=\"nc\">movk</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x2010</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">dump</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"o\">/</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"cp\">$x5</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xffff5cececec</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so I think this may be an alignment issue? I'm not 100% familiar with vector instructions on arm myself.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 306127776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666733593
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126#issuecomment-1291170795\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126\">issue #5126</a>:</p>\n<blockquote>\n<p>Oh actually reading over the code for more than half a second I realize that this is expected to be an out-of-bounds segfault, so the actual issue here may be that the metadata for \"this instruction is allowed to trap\" may be getting accidentally lost during the egraphs translation</p>\n</blockquote>",
        "id": 306128725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666733830
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126\">issue #5126</a>:</p>\n<blockquote>\n<p>Given this input wasm module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (func (;0;) (type 0)\n    global.get 0\n    i32.eqz\n    if  ;; label = @1\n      unreachable\n    end\n    global.get 0\n    i32.const 1\n    i32.sub\n    global.set 0\n    i32.const -320017172\n    v128.load32_splat\n    i8x16.bitmask\n    v128.load32_zero align=1\n    i64x2.extend_high_i32x4_u\n    i64x2.extend_high_i32x4_u\n    v128.const i32x4 0x9bececec 0x00007171 0x00000000 0x00000000\n    drop\n    drop\n  )\n  (memory (;0;) 0 3)\n  (global (;0;) (mut i32) i32.const 1000)\n  (export \"\" (func 0))\n  (export \"1\" (memory 0))\n  (data (;0;) (i32.const 0) \"\")\n)\n</code></pre></div>\n<p>I get these results on a local arm64 marchine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">``</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x44</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">zsh</span>: <span class=\"nc\">segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The faulting instruction appears to be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">disas</span><span class=\"w\"> </span><span class=\"cp\">$pc</span><span class=\"p\">,</span><span class=\"cp\">$pc</span><span class=\"o\">+</span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"n\">Dump</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mh\">0xfffff7b25038</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mh\">0xfffff7b2504c</span>:\n<span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x0000fffff7b25038</span>:  <span class=\"nc\">ld1r</span><span class=\"w\">    </span><span class=\"p\">{</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">s</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x5</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b2503c</span>:  <span class=\"nc\">sshr</span><span class=\"w\">    </span><span class=\"n\">v25</span><span class=\"p\">.</span><span class=\"mi\">16</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">16</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b25040</span>:  <span class=\"nc\">mov</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x201</span><span class=\"w\">                      </span><span class=\"c1\">// #513</span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b25044</span>:  <span class=\"nc\">movk</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x804</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b25048</span>:  <span class=\"nc\">movk</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x2010</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">dump</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"o\">/</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"cp\">$x5</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xffff5cececec</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so I think this may be an alignment issue? I'm not 100% familiar with vector instructions on arm myself.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 306128748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666733838
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126#issuecomment-1291175310\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126\">issue #5126</a>:</p>\n<blockquote>\n<p>Perhaps related, but <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=52721\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=52721</a> is an issue on x86_64 which also may be related to egraphs since the fuzz configuration there has egraphs enabled. The problem in the fuzz bug is that it's failing to execute <a href=\"https://github.com/WebAssembly/testsuite/blob/4f77306bb63151631d84f58dedf67958eb9911b9/simd_bitwise.wast#L513-L538\">this function</a> where it should be successful but a trap is showing up. The fuzz test case is using a <code>CustomUnaligned</code> memory which means that the base address of linear memory is forcibly unaligned. That may or may not be a valid thing to do at runtime, but it seems like it may be related to this egraphs issue?</p>\n</blockquote>",
        "id": 306129939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666734172
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126#issuecomment-1291222515\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126\">issue #5126</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n<p>I have a meta-thought here actually: we've had some discussions in the last few days about a way to restructure the egraph storage to be more directly integrated into the <code>DataFlowGraph</code> (core CLIF structure) which would alter the specific details leading to some of these recent fuzzbugs (storing types appropriately, storing trap metadata). We're pretty sure we want to do it, we just don't have the time quite yet (perhaps in the next few weeks). Rather than spending time chasing down these fuzzbugs and then refactoring again in a few weeks, I think it might make more sense to just turn off egraph mode in fuzzing for now; to be re-enabled later. I'll go ahead and create a PR for this and we can discuss further there...</p>\n</blockquote>",
        "id": 306139141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666738298
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126#issuecomment-1291260560\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126\">issue #5126</a>:</p>\n<blockquote>\n<p>Handled by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5128\">https://github.com/bytecodealliance/wasmtime/pull/5128</a> for now</p>\n</blockquote>",
        "id": 306144842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666742060
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5126\">issue #5126</a>:</p>\n<blockquote>\n<p>Given this input wasm module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (func (;0;) (type 0)\n    global.get 0\n    i32.eqz\n    if  ;; label = @1\n      unreachable\n    end\n    global.get 0\n    i32.const 1\n    i32.sub\n    global.set 0\n    i32.const -320017172\n    v128.load32_splat\n    i8x16.bitmask\n    v128.load32_zero align=1\n    i64x2.extend_high_i32x4_u\n    i64x2.extend_high_i32x4_u\n    v128.const i32x4 0x9bececec 0x00007171 0x00000000 0x00000000\n    drop\n    drop\n  )\n  (memory (;0;) 0 3)\n  (global (;0;) (mut i32) i32.const 1000)\n  (export \"\" (func 0))\n  (export \"1\" (memory 0))\n  (data (;0;) (i32.const 0) \"\")\n)\n</code></pre></div>\n<p>I get these results on a local arm64 marchine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">``</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x44</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">zsh</span>: <span class=\"nc\">segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The faulting instruction appears to be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">disas</span><span class=\"w\"> </span><span class=\"cp\">$pc</span><span class=\"p\">,</span><span class=\"cp\">$pc</span><span class=\"o\">+</span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"n\">Dump</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mh\">0xfffff7b25038</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mh\">0xfffff7b2504c</span>:\n<span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x0000fffff7b25038</span>:  <span class=\"nc\">ld1r</span><span class=\"w\">    </span><span class=\"p\">{</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">s</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x5</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b2503c</span>:  <span class=\"nc\">sshr</span><span class=\"w\">    </span><span class=\"n\">v25</span><span class=\"p\">.</span><span class=\"mi\">16</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">16</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b25040</span>:  <span class=\"nc\">mov</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x201</span><span class=\"w\">                      </span><span class=\"c1\">// #513</span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b25044</span>:  <span class=\"nc\">movk</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x804</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mh\">0x0000fffff7b25048</span>:  <span class=\"nc\">movk</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x2010</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">dump</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"o\">/</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"cp\">$x5</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xffff5cececec</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so I think this may be an alignment issue? I'm not 100% familiar with vector instructions on arm myself.</p>\n<p>cc @cfallin </p>\n</blockquote>",
        "id": 306144843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666742060
    }
]