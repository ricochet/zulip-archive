[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6623\">issue #6623</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently implement a bunch of rules to try to efficiently lower an <code>icmp</code> clif instruction into a single RISC-V vector instruction. We have a table with all of the cases where we know there is an equivalent instruction (see <code>gen_icmp_mask</code> in the RISC-V backend).</p>\n<p>However, we are still missing one set of cases. When we have a <code>icmp+splat+iconst</code> we can usually  emit a <code>*.vi</code> opcode. And we do that if the <code>icmp</code> and <code>splat</code> match exactly what the opcode does, but we can go further.</p>\n<p>Take this example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_icmp_sge_splat_const_rhs_i32</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">sge</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>While we don't have a <code>vmsge.vi</code> instruction we can use the <code>vmsgt.vi</code> instruction to essentially do the same thing by decrementing the immediate by 1.</p>\n<p>There 8 cases like this one that we can still improve in the backend. (See the godbolt link below)</p>\n<h4>Benefit</h4>\n<p>This improves the <code>icmp</code> codegen by generating fewer instructions for a select number of cases.</p>\n<h4>Implementation</h4>\n<p>Here's a <a href=\"https://godbolt.org/z/aeM6v1fMx\">godbolt link</a> of what LLVM does in each of the missing scenarios in <code>gen_icmp_mask</code>.</p>\n<p>For some of them, such as <code>icmp_ule_lhs_splat</code> it looks like we don't have any efficient implementation other than a separate splat and <code>.vv</code> instruction. In these cases, we can leave holes in the table and we'll automatically generate that code.</p>\n<p>However the more interesting cases are <code>icmp_ule_lhs_splat_const</code> (and similar) where we generate the reverse IntCC with an immediate that is <code>imm-1</code>. That gives us some range optimize these icmp's.</p>\n<h4>Alternatives</h4>\n<p>This is all optional, and these improvements only cover 8 cases (out of 50 possible), so they might be fairly rare.</p>\n</blockquote>",
        "id": 368551960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687439454
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6623\">issue #6623</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently implement a bunch of rules to try to efficiently lower an <code>icmp</code> clif instruction into a single RISC-V vector instruction. We have a table with all of the cases where we know there is an equivalent instruction (see <code>gen_icmp_mask</code> in the RISC-V backend).</p>\n<p>However, we are still missing one set of cases. When we have a <code>icmp+splat+iconst</code> we can usually  emit a <code>*.vi</code> opcode. And we do that if the <code>icmp</code> and <code>splat</code> match exactly what the opcode does, but we can go further.</p>\n<p>Take this example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_icmp_sge_splat_const_rhs_i32</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">sge</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>While we don't have a <code>vmsge.vi</code> instruction we can use the <code>vmsgt.vi</code> instruction to essentially do the same thing by decrementing the immediate by 1.</p>\n<p>There 8 cases like this one that we can still improve in the backend. (See the godbolt link below)</p>\n<h4>Benefit</h4>\n<p>This improves the <code>icmp</code> codegen by generating fewer instructions for a select number of cases.</p>\n<h4>Implementation</h4>\n<p>Here's a <a href=\"https://godbolt.org/z/aeM6v1fMx\">godbolt link</a> of what LLVM does in each of the missing scenarios in <code>gen_icmp_mask</code>.</p>\n<p>For some of them, such as <code>icmp_ule_lhs_splat</code> it looks like we don't have any efficient implementation other than a separate splat and <code>.vv</code> instruction. In these cases, we can leave holes in the table and we'll automatically generate that code.</p>\n<p>However the more interesting cases are <code>icmp_ule_lhs_splat_const</code> (and similar) where we generate the reverse IntCC with an immediate that is <code>imm-1</code>. That gives us some range optimize these icmp's.</p>\n<h4>Alternatives</h4>\n<p>This is all optional, and these improvements only cover 8 cases (out of 50 possible), so they might be fairly rare.</p>\n</blockquote>",
        "id": 368551961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687439454
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6623\">issue #6623</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently implement a bunch of rules to try to efficiently lower an <code>icmp</code> clif instruction into a single RISC-V vector instruction. We have a table with all of the cases where we know there is an equivalent instruction (see <code>gen_icmp_mask</code> in the RISC-V backend).</p>\n<p>However, we are still missing one set of cases. When we have a <code>icmp+splat+iconst</code> we can usually  emit a <code>*.vi</code> opcode. And we do that if the <code>icmp</code> and <code>splat</code> match exactly what the opcode does, but we can go further.</p>\n<p>Take this example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_icmp_sge_splat_const_rhs_i32</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">sge</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>While we don't have a <code>vmsge.vi</code> instruction we can use the <code>vmsgt.vi</code> instruction to essentially do the same thing by decrementing the immediate by 1.</p>\n<p>There 8 cases like this one that we can still improve in the backend. (See the godbolt link below)</p>\n<h4>Benefit</h4>\n<p>This improves the <code>icmp</code> codegen by generating fewer instructions for a select number of cases.</p>\n<h4>Implementation</h4>\n<p>Here's a <a href=\"https://godbolt.org/z/aeM6v1fMx\">godbolt link</a> of what LLVM does in each of the missing scenarios in <code>gen_icmp_mask</code>.</p>\n<p>For some of them, such as <code>icmp_ule_lhs_splat</code> it looks like we don't have any efficient implementation other than a separate splat and <code>.vv</code> instruction. In these cases, we can leave holes in the table and we'll automatically generate that code.</p>\n<p>However the more interesting cases are <code>icmp_ule_lhs_splat_const</code> (and similar) where we generate the reverse IntCC with an immediate that is <code>imm-1</code>. That gives us some range optimize these icmp's.</p>\n<h4>Alternatives</h4>\n<p>This is all optional, and these improvements only cover 8 cases (out of 50 possible), so they might be fairly rare.</p>\n</blockquote>",
        "id": 368572646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687442894
    }
]