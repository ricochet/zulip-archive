[
    {
        "content": "<p>softprops opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380\">Issue #2380</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<p>I've been struggling with a way to decompose chains of <code>linker.func</code> that delegate to closures into chains of  <code>linker.func</code> that delegate to methods</p>\n<p>from</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My best guess way to do that would be to decompose into methods that returned <code>impl IntoFunc</code> but its type signature proved cumbersome to make that work.</p>\n<p>My next thought was that I could just return <code>Func</code> objects from method but then realized <code>Func</code> doesn't implement <code>InfoFunc</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This seems trivial to add but I'm not sure what the type arguments for <code>IntoFunc</code> would look like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IntoFunc</span><span class=\"o\">&lt;?</span><span class=\"p\">,</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<p>A slightly more flexible linker api.</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<p>An open question above was what to fill in for type parameters</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IntoFunc</span><span class=\"o\">&lt;?</span><span class=\"p\">,</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;</p>\n<p>I could have a muting api which roughly implements what I started out with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">with_foo</span><span class=\"p\">(</span><span class=\"n\">linker</span>: <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">with_bar</span><span class=\"p\">(</span><span class=\"n\">linker</span>: <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">with_foo</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">with_bar</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This has the workaround-for-an-api feel to it. </p>\n</blockquote>",
        "id": 216093530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604933296
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380#issuecomment-724090530\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380\">Issue #2380</a>:</p>\n<blockquote>\n<p>Would <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Linker.html#method.define\"><code>Linker::define</code></a> work for you in this case?</p>\n<p>Otherwise we could probably add something like <code>IntoFunc&lt;(), ()&gt;</code> for <code>Func</code> perhaps?</p>\n</blockquote>",
        "id": 216100667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604936252
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380#issuecomment-724118157\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380\">Issue #2380</a>:</p>\n<blockquote>\n<p>ohhh nice. I could try that. since there's and into impl for Func =&gt; Extern that might tick the box for me. </p>\n</blockquote>",
        "id": 216107533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604938860
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380#issuecomment-724118338\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380\">Issue #2380</a>:</p>\n<blockquote>\n<p>also thanks for the extremely fast feedback</p>\n</blockquote>",
        "id": 216107575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604938878
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380#issuecomment-724201330\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380\">Issue #2380</a>:</p>\n<blockquote>\n<p><code>Linker::define</code> seems to work so I'm going to close this issue. Thanks again @alexcrichton for such an amazing project</p>\n</blockquote>",
        "id": 216126664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604947328
    },
    {
        "content": "<p>softprops closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2380\">Issue #2380</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<p>I've been struggling with a way to decompose chains of <code>linker.func</code> that delegate to closures into chains of  <code>linker.func</code> that delegate to methods</p>\n<p>from</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My best guess way to do that would be to decompose into methods that returned <code>impl IntoFunc</code> but its type signature proved cumbersome to make that work.</p>\n<p>My next thought was that I could just return <code>Func</code> objects from method but then realized <code>Func</code> doesn't implement <code>InfoFunc</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This seems trivial to add but I'm not sure what the type arguments for <code>IntoFunc</code> would look like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IntoFunc</span><span class=\"o\">&lt;?</span><span class=\"p\">,</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<p>A slightly more flexible linker api.</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<p>An open question above was what to fill in for type parameters</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IntoFunc</span><span class=\"o\">&lt;?</span><span class=\"p\">,</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Func</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;</p>\n<p>I could have a muting api which roughly implements what I started out with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">with_foo</span><span class=\"p\">(</span><span class=\"n\">linker</span>: <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">with_bar</span><span class=\"p\">(</span><span class=\"n\">linker</span>: <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Store</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"s\">\"module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">with_foo</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">with_bar</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This has the workaround-for-an-api feel to it. </p>\n</blockquote>",
        "id": 216126665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604947329
    }
]