[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490\">PR #2490</a>.</p>",
        "id": 219253979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607457389
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490\">PR #2490</a>.</p>",
        "id": 219253980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607457389
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490\">PR #2490</a> from <code>fix-popcnt-load-width</code> to <code>main</code>:</p>\n<blockquote>\n<p>As a subtle consequence of the recent load-op fusion, popcnt of a<br>\nvalue that came from a load.i32 was compiling into a 64-bit load. This<br>\nis a result of the way in which x86 infers the width of loads: it is a<br>\nconsequence of the instruction containing the memory reference, not the<br>\nmemory reference itself. So the <code>input_to_reg_mem()</code> helper (convert an<br>\ninstruction input into a register or memory reference) was providing the<br>\nappropriate memory reference for the result of a load.i32, but never<br>\nencoded the assumption that it would only be used in a 32-bit<br>\ninstruction. It turns out that popcnt.i32 uses a 64-bit instruction to<br>\nload this RM op, hence widening a 32-bit to 64-bit load (which is<br>\nproblematic when the offset is (memory_length - 4)).</p>\n<p>Separately, popcnt was using the RM operand twice, resulting in two<br>\nloads if we merged a load. This isn't a correctness bug in practice<br>\nbecause only a racy sequence (store interleaving between the loads)<br>\nwould produce incorrect results, but we decided earlier to treat loads<br>\nas effectful for now, neither reordering nor duplicating them, to<br>\ndeliberately reduce complexity.</p>\n<p>Because of the second issue, the fix is just to force the operand into a<br>\nregister always, so any source load will not be merged.</p>\n<p>Discovered via fuzzing with oss-fuzz.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 219253981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607457389
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490#pullrequestreview-547596337\">PR Review</a>.</p>",
        "id": 219256931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607458718
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490#discussion_r538777215\">PR Review Comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                // N.B.: explicitly put input in a reg here because the width of the instruction\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 219256932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607458718
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490#pullrequestreview-547600824\">PR Review</a>.</p>",
        "id": 219257776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607459089
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490#discussion_r538781277\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 219257777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607459089
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490\">PR #2490</a> from <code>fix-popcnt-load-width</code> to <code>main</code>:</p>\n<blockquote>\n<p>As a subtle consequence of the recent load-op fusion, popcnt of a<br>\nvalue that came from a load.i32 was compiling into a 64-bit load. This<br>\nis a result of the way in which x86 infers the width of loads: it is a<br>\nconsequence of the instruction containing the memory reference, not the<br>\nmemory reference itself. So the <code>input_to_reg_mem()</code> helper (convert an<br>\ninstruction input into a register or memory reference) was providing the<br>\nappropriate memory reference for the result of a load.i32, but never<br>\nencoded the assumption that it would only be used in a 32-bit<br>\ninstruction. It turns out that popcnt.i32 uses a 64-bit instruction to<br>\nload this RM op, hence widening a 32-bit to 64-bit load (which is<br>\nproblematic when the offset is (memory_length - 4)).</p>\n<p>Separately, popcnt was using the RM operand twice, resulting in two<br>\nloads if we merged a load. This isn't a correctness bug in practice<br>\nbecause only a racy sequence (store interleaving between the loads)<br>\nwould produce incorrect results, but we decided earlier to treat loads<br>\nas effectful for now, neither reordering nor duplicating them, to<br>\ndeliberately reduce complexity.</p>\n<p>Because of the second issue, the fix is just to force the operand into a<br>\nregister always, so any source load will not be merged.</p>\n<p>Discovered via fuzzing with oss-fuzz.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 219257802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607459098
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490#pullrequestreview-547841684\">PR Review</a>.</p>",
        "id": 219299142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607491112
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2490\">PR #2490</a>.</p>",
        "id": 219301835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607495323
    }
]