[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1249431669\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://github.com/bytecodealliance/wasmtime/blob/27435ae398bcce74bf990b9683e5c47c3f6c5d51/.github/workflows/performance.yml#L17\">this secret</a> may not be on this repo yet, do you have access to add it or would you like me to add one?</p>\n</blockquote>",
        "id": 299171602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663338339
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1249783628\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 299236813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663360148
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1250592131\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think <a href=\"https://github.com/bytecodealliance/wasmtime/blob/27435ae398bcce74bf990b9683e5c47c3f6c5d51/.github/workflows/performance.yml#L17\">this secret</a> may not be on this repo yet, do you have access to add it or would you like me to add one?</p>\n</blockquote>\n<p>@alexcrichton <br>\nForked branches don't have access to the secrets. Looks like a road block as neither clone or pushing will be authorized. </p>\n<p><a href=\"https://github.com/actions/checkout/issues/298\">https://github.com/actions/checkout/issues/298</a><br>\nI am wondering if the issue_comment trigger will allow reading the secret but the problem is the PR associated with the issue_comment is not made available via the event payload .. which is why we switched to using the pull_request_review event.</p>\n</blockquote>",
        "id": 299504018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663566084
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251091762\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>I'm not sure I understand, why would we want forked branches to have access to anything? I think what's in the repo works, but <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4919\">https://github.com/bytecodealliance/wasmtime/pull/4919</a> needs to merge so the <code>main</code> branch reflects correct secret configuration.</p>\n</blockquote>",
        "id": 299573730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663597256
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251323250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>I stumbled onto that link as the workflow/action was failing with the same error and I thought the conversation there made sense to apply here. However maybe I am wrong and that policy being referred to has nothing to do with the situation here. This is the line that I thought was relevant:</p>\n<blockquote>\n<p>Secrets are not passed to workflows that are triggered by a pull request from a fork. Learn more.</p>\n</blockquote>\n<p>It is written here: <a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow\">https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow</a></p>\n<p>Our workflow is triggered by pull_request_review and and the issue that I am seeing is that it appears that when the workflow, triggered that the secret is in fact not available. When I tested this I had to test on my own repo (forked from wasmtime), but the PR was not from a branch on a fork .. it was from a branch from the same repository that I was trying to merge as a PR into the default branch, so the secret was available. The patch is failing to run due to errors trying to access the private repo. Errors such as:</p>\n<blockquote>\n<p>fatal: could not read Username for '<a href=\"https://github.com/\">https://github.com/</a>': No such device or address</p>\n</blockquote>\n<blockquote>\n<p>Cloning into 'wasmtime-sightglass-benchmarking'...<br>\nfatal: could not read Password for 'https://***@github.com': No such device or address<br>\nError: Process completed with exit code 128.</p>\n</blockquote>\n<blockquote>\n<p>Cloning into 'wasmtime-sightglass-benchmarking'...<br>\nfatal: could not read Username for '<a href=\"https://github.com/\">https://github.com/</a>': No such device or address<br>\nError: Process completed with exit code 128.</p>\n</blockquote>\n<blockquote>\n<p>are seen when the token/secret is empty which is what I was seeing, or I am seeing:<br>\nremote: Invalid username or password.<br>\nfatal: Authentication failed for '<a href=\"https://github.com/bytecodealliance/wasmtime-sightglass-benchmarking.git/\">https://github.com/bytecodealliance/wasmtime-sightglass-benchmarking.git/</a>'</p>\n</blockquote>\n<p>Which error depends on the various things I tried where I've lost track of which error is from which change I tried. So, I can't remember which one, but I believe one of these is consistent with the token/secret string being empty. The bottom line is we currently can't clone or push to the performance repo due to lack of permission. The secret is either not available or not working. I need to put some test in to confirm that it is simply not available, but the line \"Secrets are not passed to workflows that are triggered by a pull request from a fork.\" I think  makes sense as the culprit.</p>\n</blockquote>",
        "id": 299611028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663608425
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251323250\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>@alexcrichton I stumbled onto that link as the workflow/action was failing with the same error and I thought the conversation there made sense to apply here. However maybe I am wrong and that policy being referred to has nothing to do with the situation here. This is the line that I thought was relevant:</p>\n<blockquote>\n<p>Secrets are not passed to workflows that are triggered by a pull request from a fork. Learn more.</p>\n</blockquote>\n<p>It is written here: <a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow\">https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow</a></p>\n<p>Our workflow is triggered by pull_request_review and and the issue that I am seeing is that it appears that when the workflow, triggered that the secret is in fact not available. When I tested this I had to test on my own repo (forked from wasmtime), but the PR was not from a branch on a fork .. it was from a branch from the same repository that I was trying to merge as a PR into the default branch, so the secret was available. The patch is failing to run due to errors trying to access the private repo. Errors such as:</p>\n<blockquote>\n<p>fatal: could not read Username for '<a href=\"https://github.com/\">https://github.com/</a>': No such device or address</p>\n</blockquote>\n<blockquote>\n<p>Cloning into 'wasmtime-sightglass-benchmarking'...<br>\nfatal: could not read Password for 'https://***@github.com': No such device or address<br>\nError: Process completed with exit code 128.</p>\n</blockquote>\n<blockquote>\n<p>Cloning into 'wasmtime-sightglass-benchmarking'...<br>\nfatal: could not read Username for '<a href=\"https://github.com/\">https://github.com/</a>': No such device or address<br>\nError: Process completed with exit code 128.</p>\n</blockquote>\n<blockquote>\n<p>are seen when the token/secret is empty which is what I was seeing, or I am seeing:<br>\nremote: Invalid username or password.<br>\nfatal: Authentication failed for '<a href=\"https://github.com/bytecodealliance/wasmtime-sightglass-benchmarking.git/\">https://github.com/bytecodealliance/wasmtime-sightglass-benchmarking.git/</a>'</p>\n</blockquote>\n<p>Which error depends on the various things I tried where I've lost track of which error is from which change I tried. So, I can't remember which one, but I believe one of these is consistent with the token/secret string being empty. The bottom line is we currently can't clone or push to the performance repo due to lack of permission. The secret is either not available or not working. I need to put some test in to confirm that it is simply not available, but the line \"Secrets are not passed to workflows that are triggered by a pull request from a fork.\" I think  makes sense as the culprit.</p>\n</blockquote>",
        "id": 299611057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663608438
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251347845\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>I think this \"just\" needs to merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4919\">https://github.com/bytecodealliance/wasmtime/pull/4919</a>, rebase this PR, and try again.</p>\n<p>The <code>pull_request_review</code> trigger runs the workflow as-defined on <code>main</code>. As-defined on <code>main</code> the workflow is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/562bb25360a2f366a482e15fc148bab7267a9266/.github/workflows/performance.yml#L17\">accessing <code>SIGHTGLASS_BENCHMARKING_TOKEN</code></a> which is not defined by the Wasmtime repo at this time. I believe this is why it's appearing that you don't have access to secrets.</p>\n<p>If my suspicions are correct then after merging #4919 this should work.</p>\n</blockquote>",
        "id": 299615207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663609839
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251366290\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think this \"just\" needs to merge #4919, rebase this PR, and try again.</p>\n<p>The <code>pull_request_review</code> trigger runs the workflow as-defined on <code>main</code>. As-defined on <code>main</code> the workflow is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/562bb25360a2f366a482e15fc148bab7267a9266/.github/workflows/performance.yml#L17\">accessing <code>SIGHTGLASS_BENCHMARKING_TOKEN</code></a> which is not defined by the Wasmtime repo at this time. I believe this is why it's appearing that you don't have access to secrets.</p>\n<p>If my suspicions are correct then after merging #4919 this should work.</p>\n</blockquote>\n<p>I wish it were more convenient to test these things with workflows and actions before merging but merging and just trying is probably the most efficient way to confirm. At least this doesn't run unless manually triggered so it should cause disruption even if it fails again.</p>\n</blockquote>",
        "id": 299617984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663610731
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251366290\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think this \"just\" needs to merge #4919, rebase this PR, and try again.</p>\n<p>The <code>pull_request_review</code> trigger runs the workflow as-defined on <code>main</code>. As-defined on <code>main</code> the workflow is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/562bb25360a2f366a482e15fc148bab7267a9266/.github/workflows/performance.yml#L17\">accessing <code>SIGHTGLASS_BENCHMARKING_TOKEN</code></a> which is not defined by the Wasmtime repo at this time. I believe this is why it's appearing that you don't have access to secrets.</p>\n<p>If my suspicions are correct then after merging #4919 this should work.</p>\n</blockquote>\n<p>I wish it were more convenient to test workflows and actions before merging but merging and just trying is probably the most efficient way to confirm. At least this doesn't run unless manually triggered so it should cause disruption even if it fails again.</p>\n</blockquote>",
        "id": 299618030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663610750
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251366290\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think this \"just\" needs to merge #4919, rebase this PR, and try again.</p>\n<p>The <code>pull_request_review</code> trigger runs the workflow as-defined on <code>main</code>. As-defined on <code>main</code> the workflow is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/562bb25360a2f366a482e15fc148bab7267a9266/.github/workflows/performance.yml#L17\">accessing <code>SIGHTGLASS_BENCHMARKING_TOKEN</code></a> which is not defined by the Wasmtime repo at this time. I believe this is why it's appearing that you don't have access to secrets.</p>\n<p>If my suspicions are correct then after merging #4919 this should work.</p>\n</blockquote>\n<p>I wish it were more convenient to test workflows and actions before merging but merging and just trying is probably the most efficient way to confirm. At least this doesn't run unless manually triggered so it shouldn't cause disruption even if it fails again.</p>\n</blockquote>",
        "id": 299618124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663610771
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251515912\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>I used an equivalent token from the account that <code>PERSONAL_ACCESS_TOKEN</code> is connected to and I locally ran <code>git clone ...</code> and it worked, so I don't think it's token permissions at this point. </p>\n<p>That the run is still failing seems to mean that <code>pull_request_review</code> actions don't have access to secrets. I... guess? That seems to confirm your hypothesis <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251323250\">above</a> which would unfortunately render most of this moot... To confirm that though, do you want to try sending a PR to this repo, from this repo, and see if the benchmarking works there?</p>\n</blockquote>",
        "id": 299639884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663619346
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251691029\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>I used an equivalent token from the account that <code>PERSONAL_ACCESS_TOKEN</code> is connected to and I locally ran <code>git clone ...</code> and it worked, so I don't think it's token permissions at this point.</p>\n<p>That the run is still failing seems to mean that <code>pull_request_review</code> actions don't have access to secrets. I... guess? That seems to confirm your hypothesis <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1251323250\">above</a> which would unfortunately render most of this moot... To confirm that though, do you want to try sending a PR to this repo, from this repo, and see if the benchmarking works there?</p>\n</blockquote>\n<p>You mean to just push a branch from origin <a href=\"https://github.com/bytecodealliance/wasmtime.git\">https://github.com/bytecodealliance/wasmtime.git</a> and try from a PR on that branch? I don't have permission to push new branches .. maybe you could try? That would confirm things. If it is confirmed there are a couple of other ideas we can maybe try.</p>\n</blockquote>",
        "id": 299664325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663632109
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1252405661\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>I've opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4928\">https://github.com/bytecodealliance/wasmtime/pull/4928</a> to test.</p>\n</blockquote>",
        "id": 299756344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663682720
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1252408437\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>While waiting for the CI runner it says:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Job</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">at</span>: <span class=\"nc\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">workflows</span><span class=\"o\">/</span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"n\">yml</span><span class=\"o\">@</span><span class=\"n\">refs</span><span class=\"o\">/</span><span class=\"n\">pull</span><span class=\"o\">/</span><span class=\"mi\">4928</span><span class=\"o\">/</span><span class=\"n\">merge</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so if it's using the <code>performance.yml</code> from the merge commit instead of <code>main</code> then it definitely isn't going to have access to secrets. (since PRs could arbitrarily put whatever they want in workflow configuration files).</p>\n<p>Other events like <code>issue_comment</code> may guarantee a run from <code>main</code> which would probably have access to secrets. Figuring out the PR context will be a bit nontrivial though.</p>\n</blockquote>",
        "id": 299756798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663682848
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1252772151\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>While waiting for the CI runner it says:</p>\n<p><code>\nJob defined at: bytecodealliance/wasmtime/.github/workflows/performance.yml@refs/pull/4928/merge \n</code></p>\n<p>so if it's using the <code>performance.yml</code> from the merge commit instead of <code>main</code> then it definitely isn't going to have access to secrets. (since PRs could arbitrarily put whatever they want in workflow configuration files).</p>\n<p>Other events like <code>issue_comment</code> may guarantee a run from <code>main</code> which would probably have access to secrets. Figuring out the PR context will be a bit nontrivial though.</p>\n</blockquote>\n<p>Looks like it ran (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4928\">https://github.com/bytecodealliance/wasmtime/pull/4928</a>) .. so that confirms things. Yes, it makes sense that forks should have access to those secrets. I was thinking either issue_comment and using github-script <a href=\"https://github.com/actions/github-script\">https://github.com/actions/github-script</a> (such as in this example <a href=\"https://lightrun.com/answers/actions-checkout-any-way-to-checkout-pr-from-issue_comment-event\">https://lightrun.com/answers/actions-checkout-any-way-to-checkout-pr-from-issue_comment-event</a>) to figure it out, could work. Or setting up a workflow dispatch trigger may work. <a href=\"https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/\">https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/</a> where the actor has to input their token or password into the gui and they'd need to have permission at the performance repo. I think the first option is the most desired.</p>\n</blockquote>",
        "id": 299825320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663699700
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1252772151\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>While waiting for the CI runner it says:</p>\n<p><code>\nJob defined at: bytecodealliance/wasmtime/.github/workflows/performance.yml@refs/pull/4928/merge \n</code></p>\n<p>so if it's using the <code>performance.yml</code> from the merge commit instead of <code>main</code> then it definitely isn't going to have access to secrets. (since PRs could arbitrarily put whatever they want in workflow configuration files).</p>\n<p>Other events like <code>issue_comment</code> may guarantee a run from <code>main</code> which would probably have access to secrets. Figuring out the PR context will be a bit nontrivial though.</p>\n</blockquote>\n<p>Looks like it ran (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4928\">https://github.com/bytecodealliance/wasmtime/pull/4928</a>) .. so that confirms things. Yes, it makes sense that forks should not have access to those secrets. I was thinking either issue_comment and using github-script <a href=\"https://github.com/actions/github-script\">https://github.com/actions/github-script</a> (such as in this example <a href=\"https://lightrun.com/answers/actions-checkout-any-way-to-checkout-pr-from-issue_comment-event\">https://lightrun.com/answers/actions-checkout-any-way-to-checkout-pr-from-issue_comment-event</a>) to figure it out, could work. Or setting up a workflow dispatch trigger may work. <a href=\"https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/\">https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/</a> where the actor has to input their token or password into the gui and they'd need to have permission at the performance repo. I think the first option is the most desired.</p>\n</blockquote>",
        "id": 299825382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663699722
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267317332\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 302309449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664903932
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267321146\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 302310097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664904137
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267322320\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>\n<p>@alexcrichton <br>\nThis needed to be rebased in order to use the latest yml. I've done that and submitted another test trigger.</p>\n</blockquote>",
        "id": 302310276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664904199
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267322985\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>Lol .. and accidently submitted another in my reply.</p>\n</blockquote>",
        "id": 302310376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664904234
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267345931\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>Shows pct_change on x64 for the patch if merged compared to current head for main.</p>\n<p>Pct_change is based on clocktick event cycles where the benchmarks are run with Sightglass. <br>\nA negative pct_change means clockticks are expected to be reduced for the benchmark, <br>\nfor that phase, and by that factor, if the patch were merged (i.e. negative is good).</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>pct_change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.034287</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.011487</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.076832</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.022895</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001343</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.134462</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.051869</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.008466</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.053237</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.000813</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000096</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.028721</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.007054</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001786</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.095982</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.009973</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.403306</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.007373</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.027008</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.016214</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.013706</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.035487</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.053356</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.001452</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.013889</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000187</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.006239</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.034853</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001521</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.014821</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.007662</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001859</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.125123</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.045457</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000295</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.023764</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.002144</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.018011</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.042722</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.019075</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000060</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.061197</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.003209</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001870</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.020665</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.012603</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.005769</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.004154</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.020977</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000839</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.007037</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.003152</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001506</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.053419</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.009232</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.023647</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.015899</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.009856</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000872</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.078992</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.023974</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.012502</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.022845</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.004471</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000565</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.000801</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.065953</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000828</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.030104</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.011299</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000224</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.002284</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.034352</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.015639</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.158237</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.003882</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.010573</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.051459</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.005556</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001852</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.004107</td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 302314256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664905487
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267347611\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>Oh .. guess it did work<br>\n</p>\n</blockquote>",
        "id": 302314524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664905578
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267364701\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>Shows pct_change on x64 for the patch if merged compared to current head for main.</p>\n<p>Pct_change is based on clocktick event cycles where the benchmarks are run with Sightglass. <br>\nA negative pct_change means clockticks are expected to be reduced for the benchmark, <br>\nfor that phase, and by that factor, if the patch were merged (i.e. negative is good).</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>pct_change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.030310</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.023858</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.032645</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.251867</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.111039</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.096104</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.044554</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001013</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.058163</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.007175</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001357</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.005574</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.004291</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000236</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.076082</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.051348</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.074605</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.104645</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.001547</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.002676</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.016475</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.077409</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.164519</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.038244</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.018951</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.003764</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.059158</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.044444</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001686</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.019625</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.007561</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000823</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.032482</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.004821</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001347</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.001049</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.063835</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.004247</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.082987</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.032375</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000662</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.028302</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.012330</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003932</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.046790</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.029146</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001596</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.022471</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.004290</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.006008</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.096753</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000926</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.026605</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.008242</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.017152</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.008496</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.017752</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000730</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.012865</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.002059</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.002869</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.019441</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.030591</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.002861</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.002807</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.001555</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001753</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.049312</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.030542</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.003779</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.046580</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.026218</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001472</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.101582</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.017953</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.014455</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.045538</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.025875</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000559</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.007227</td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 302317433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664906586
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267371779\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>Shows pct_change on x64 for the patch if merged compared to current head for main.</p>\n<p>Pct_change is based on clocktick event cycles where the benchmarks are run with Sightglass. <br>\nA negative pct_change means clockticks are expected to be reduced for the benchmark, <br>\nfor that phase, and by that factor, if the patch were merged (i.e. negative is good).</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>pct_change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.050030</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.010691</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.113561</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.018848</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.024774</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.038650</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.063704</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.021275</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.001148</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.019306</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.006286</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.066674</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.026582</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000714</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.116023</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.042627</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.083770</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.012709</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.066239</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.005557</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.011457</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.041132</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003190</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.049969</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.013453</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003252</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.022696</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.037390</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000918</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.027234</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.012902</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000566</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.003339</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.021018</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000560</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.012342</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.049840</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.021725</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.049550</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.008319</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001982</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.043471</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.011576</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.008654</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.003275</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.062111</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.011016</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.012293</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.045281</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001623</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.027841</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.029276</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000702</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.020804</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.016071</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.063317</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.055417</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.027010</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.002454</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.036361</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.039516</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.006016</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.001117</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.009882</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000350</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.009995</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.005880</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001220</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.033825</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.067979</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.002203</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.064441</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.049738</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000380</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.002152</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.005208</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.005069</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.004924</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.021401</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.002470</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.004928</td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 302318655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664906998
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267529717\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>@jlb6740 a question for you: does <code>pct_change</code> indicate a percent, as the column name implies, so e.g. <code>0.002470</code> means 0.00247% (i.e., 24.7 * 10^-6)? Or is it a raw ratio, so 0.247%?</p>\n<p>A few other comments on report formatting:</p>\n<ul>\n<li>It would be nice to sort overall by phase, so we have all the instantiation numbers together, and compilation together, and execution together. Generally if I'm testing a PR that e.g. updates the way instantiation is done, I want to look just at those numbers; I don't want to have to visually skip to every third row.</li>\n<li>Could we have a mean (geomean probably, rather than arithmetic) for each category?</li>\n</ul>\n<p>These would make the report a little easier to grok at a glance than the sea of numbers we currently have!</p>\n</blockquote>",
        "id": 302339750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664914687
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267553818\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>@jlb6740 a question for you: does <code>pct_change</code> indicate a percent, as the column name implies, so e.g. <code>0.002470</code> means 0.00247% (i.e., 24.7 * 10^-6)? Or is it a raw ratio, so 0.247%?<br>\n</p>\n</blockquote>\n<p>Pct_change is being calculated by pandas: <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pct_change.html\">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pct_change.html</a><br>\nSee the examples there. Pct can be confusing because you don't know if you are supposed to factor in the 100x or not but here pandas is printing out what is really a factor. Maybe we should call it factor change to avoid confusion even though they call it pct_change.</p>\n<ul>\n<li>Note, I cut down on the number of runs so there might be more variability here that we can reduce at the expense of time to execute. Currently we have:</li>\n</ul>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>      --processes 1 \\\n      --iterations-per-process 2 \\\n</code></pre></div>\n\n</blockquote>\n<p>while the defaults are 10 process and 10 iterations per process. </p>\n<blockquote>\n<p>A few other comments on report formatting:</p>\n<ul>\n<li>It would be nice to sort overall by phase, so we have all the instantiation numbers together, and compilation together, and execution together. Generally if I'm testing a PR that e.g. updates the way instantiation is done, I want to look just at those numbers; I don't want to have to visually skip to every third row.</li>\n</ul>\n</blockquote>\n<p>Yeah, I agree. .. will be easy to do. </p>\n<blockquote>\n<ul>\n<li>Could we have a mean (geomean probably, rather than arithmetic) for each category?</li>\n</ul>\n<p>These would make the report a little easier to grok at a glance than the sea of numbers we currently have!</p>\n</blockquote>\n<p>Yes .. that is a good idea. I have some concepts in an internal benchmark that we have called wasmbench that is based on sightglass. It does things like calculate geomean as you describe and a ratio to native performance to produce a final score. Eventually I'd like to donate these to sightglass potentially a separate benchmark to sightglass but I am digressing .. yes I agree we should apply geomeans here! </p>\n</blockquote>",
        "id": 302343562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664916134
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267560539\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<blockquote>\n<p>Maybe we should call it factor change to avoid confusion even though they call it pct_change.</p>\n</blockquote>\n<p>Yes, I'd favor that; or multiply all the numbers by 100 so it truly is a percentage. I would argue that calling this value as-is <code>pct_change</code> is a bug: percent literally means \"per hundred\" and so if it's missing that factor of a hundred, it is incorrect.</p>\n<p>Given that, I'm now seeing these numbers in a new light. I see a bunch of variation on the order of 3-5%... for a PR with no changes. That's a very concerning level of variability: if our PRs sometimes make optimizations with effects on the order of 1% or less (but stable, measurable effects), this variability will simply swamp any such change and so will make the measurements unusable.</p>\n<p>In order to trust these numbers to evaluate changes, I'd want to see a much lower noise floor -- something like +/- 0.1% at most. Or else we should filter any results out with a delta less than our known variability (i.e., not statistically significant). Could we try turning up the iteration count and see how that affects things?</p>\n</blockquote>",
        "id": 302344465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664916526
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1267572563\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>Yes, agreed we should do both .. crank up processes and iterations and print geo means.</p>\n</blockquote>",
        "id": 302346140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664917181
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1280297087\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p>|Test|Test|<br>\n|1|1|</p>\n</blockquote>",
        "id": 304380941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665983571
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1280297319\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>Test</th>\n<th>Test</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 304380958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665983590
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1280298011\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>Test</th>\n<th>Test</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Test2</th>\n<th>Test2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 304381045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665983647
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916#issuecomment-1281276094\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4916\">issue #4916</a>:</p>\n<blockquote>\n<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span><span aria-label=\"down\" class=\"emoji emoji-2b07\" role=\"img\" title=\"down\">:down:</span></p>\n</blockquote>",
        "id": 304525575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666030212
    }
]