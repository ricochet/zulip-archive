[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3132\">issue #3132</a>:</p>\n<blockquote>\n<p>This module, for example:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (memory 0)\n\n    (func\n        i32.const 0xffff_fff0\n        i32.atomic.load offset=16\n        drop\n    )\n    (start 0)\n)\n</code></pre></div>\n<p>should fail with a trap but succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 247730617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662461
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3132\">issue #3132</a>:</p>\n<blockquote>\n<p>This module, for example:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (memory 0)\n\n    (func\n        i32.const 0xffff_fff0\n        i32.atomic.load offset=16\n        drop\n    )\n    (start 0)\n)\n</code></pre></div>\n<p>should fail with a trap but succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 247730649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662473
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3132\">issue #3132</a>:</p>\n<blockquote>\n<p>This module, for example:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (memory 1)\n\n    (func\n        i32.const 0xffff_fff0\n        i32.atomic.load offset=16\n        drop\n    )\n    (start 0)\n)\n</code></pre></div>\n<p>should fail with a trap but succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 247730770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627662519
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3132#issuecomment-890035468\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3132\">issue #3132</a>:</p>\n<blockquote>\n<p>It appears that atomic loads handle their offset differently than others. In #2077 we introduced a new <code>LoadNoOffset</code> instruction class, and instead, the Wasm translator inserts a bare <code>iadd_imm</code> (with no overflow check): <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4632b6a816cf9344969a83c1a4bad2640972eab9/cranelift/wasm/src/code_translator.rs#L2357-L2359\">link</a>.</p>\n<p>@julian-seward1, do you recall why we didn't just take an offset on the atomic load/store ops like we do on regular ones? Was it in order to simplify the implementation or is there some other reason?</p>\n<p>IMHO the right fix (assuming the above question doesn't reveal a blocking reason) is to harmonize atomic loads/stores with regular ones and use the same offset handling / overflow checking logic.</p>\n</blockquote>",
        "id": 247736458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627665174
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3132\">issue #3132</a>:</p>\n<blockquote>\n<p>This module, for example:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (memory 1)\n\n    (func\n        i32.const 0xffff_fff0\n        i32.atomic.load offset=16\n        drop\n    )\n    (start 0)\n)\n</code></pre></div>\n<p>should fail with a trap but succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 248408060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628110677
    }
]