[
    {
        "content": "<p>rylev opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a> from <code>rylev:udp-perform-addr-checking</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Until now, the <code>remote-address</code> argument to <code>wasi:sockets/udp-socket#stream</code> was not checked against the <code>Pool</code> of allowed IP addresses. Now, we store the <code>Pool</code> from <code>network</code> into the <code>socket</code> object in <code>wasi:sockets/udp-socket#bind</code> and later use that <code>Pool</code> in <code>wasi:sockets/udp-socket#stream</code> to check that <code>remote-address</code> is allowed.</p>\n<p>The check itself is a bit hacky since <code>Pool</code> doesn't seem to expose a way to just check an address so we use <code>PoolExt</code> to create a <code>UdpConnecter</code> which we will fail if we don't have permission to connect to the remote address.</p>\n<p>I can add a test once I figure out the testing story in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7647\">https://github.com/bytecodealliance/wasmtime/pull/7647</a></p>\n</blockquote>",
        "id": 406350747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701882882
    },
    {
        "content": "<p><strong>rylev</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406350748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701882882
    },
    {
        "content": "<p><strong>rylev</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406350749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701882882
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1768466222\">PR review</a>.</p>",
        "id": 406371930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701890935
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1768466222\">PR review</a>.</p>",
        "id": 406371931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701890935
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1417882465\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be done after the state validation below? That'd help prevent odd situations such as calling this multiple times just to switch the network while having the method return an error.</p>\n</blockquote>",
        "id": 406371932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701890935
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1769687595\">PR review</a>.</p>",
        "id": 406507846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701943003
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1769687595\">PR review</a>.</p>",
        "id": 406507848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701943003
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1418693074\">PR review comment</a>:</p>\n<blockquote>\n<p>Might not be the prettiest solution, but: could we use this same workaround to validate the remote address in unconnected outgoing datagram streams?</p>\n</blockquote>",
        "id": 406507849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701943003
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1418690673\">PR review comment</a>:</p>\n<blockquote>\n<p>@rylev  Don't know if this was your intention, but this creates a full copy of the entire pool for each socket.</p>\n</blockquote>",
        "id": 406507850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701943003
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1769708802\">PR review</a>.</p>",
        "id": 406509406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701943497
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1418704190\">PR review comment</a>:</p>\n<blockquote>\n<p>Yea, the clone shouldn't be too expensive, but if we're worried about allocations here, I can wrap this in an <code>Arc</code>. </p>\n</blockquote>",
        "id": 406509407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701943497
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406513185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701944809
    },
    {
        "content": "<p>rylev <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#issuecomment-1845087140\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>:</p>\n<blockquote>\n<p>I've addressed the PR feedback:</p>\n<ul>\n<li>Pool is now wrapped in an <code>Arc</code> to make cloning cheaper.</li>\n<li><code>HostOutgoingDatagramStream</code> will check the provided addr against the <code>Pool</code> before sending a datagram.</li>\n</ul>\n<p>@alexcrichton I'm not sure what the testing story should look like here. I don't see where the wasi implementations are being tested against non-default <code>WasiCtx</code>s. I believe all tests are running with full network. I suppose whatever solution we decide on here should also work for #7647 as well.</p>\n</blockquote>",
        "id": 406513771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701945024
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406566959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701962953
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#issuecomment-1845554783\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>:</p>\n<blockquote>\n<p>I wrote up some thoughts <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7647#issuecomment-1845552342\">here</a> for how this might be tested (in case anyone lands on this PR in the future)</p>\n</blockquote>",
        "id": 406566961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701962954
    },
    {
        "content": "<p>alexcrichton reopened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406566969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701962957
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406617805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701981889
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1771255087\">PR review</a>.</p>",
        "id": 406633499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701989261
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1771255087\">PR review</a>.</p>",
        "id": 406633500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701989262
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1419740132\">PR review comment</a>:</p>\n<blockquote>\n<p>(same below too)</p>\n</blockquote>",
        "id": 406633501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701989262
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1419740010\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this start as <code>None</code> to represent that it's bound-late? That could also help overwriting it by accident by only writing to it if it's <code>None</code></p>\n</blockquote>",
        "id": 406633502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701989262
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406716505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702026256
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406718001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702026862
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1771900259\">PR review</a>.</p>",
        "id": 406718011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702026865
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1420153471\">PR review comment</a>:</p>\n<blockquote>\n<p>Pushed a change that does this, but I have a question about the exact desired semantics of <code>start-bind</code>. Take the following_example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// `bad_addr` is an address that is not permitted</span>\n<span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">.</span><span class=\"n\">start_bind</span><span class=\"p\">(</span><span class=\"n\">bad_addr</span><span class=\"p\">).</span><span class=\"n\">is_err</span><span class=\"p\">());</span>\n<span class=\"c1\">// `good_addr` is permitted</span>\n<span class=\"n\">sock</span><span class=\"p\">.</span><span class=\"n\">start_bind</span><span class=\"p\">(</span><span class=\"n\">good_addr</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>As currently written the second call to <code>start-bind</code> will fail with <code>InvalidState</code> since the pool has already been set on the socket. Is this right? Previously, this would have succeeded. I would imagine that <code>start_bind</code> should be allowed to be called multiple times as long as the socket has not successfully been bound before.</p>\n</blockquote>",
        "id": 406718013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702026865
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406773795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702046847
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406778045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702048128
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1772597627\">PR review</a>.</p>",
        "id": 406778964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702048406
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1420627596\">PR review comment</a>:</p>\n<blockquote>\n<p>I removed the check that the pool was not previously set as this broke some tests. Once we decide on what the semantics should be, I can adjust.</p>\n</blockquote>",
        "id": 406778966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702048407
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1772737577\">PR review</a>.</p>",
        "id": 406790781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702051870
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1420725107\">PR review comment</a>:</p>\n<blockquote>\n<p>cc @badeend on this you are probably best-equipped to answer this</p>\n</blockquote>",
        "id": 406790783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702051870
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#issuecomment-1847463376\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>:</p>\n<blockquote>\n<p>I'm gonna go ahead and queue this for merge, and @rylev says they're happy to follow-up on semantic changes in a follow-up.</p>\n</blockquote>",
        "id": 406791481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702052041
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648\">PR #7648</a>.</p>",
        "id": 406798409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702053674
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#pullrequestreview-1774015922\">PR review</a>.</p>",
        "id": 407054420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702207650
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7648#discussion_r1421732446\">PR review comment</a>:</p>\n<blockquote>\n<p>@rylev </p>\n<p>From the API's perspective, unbound sockets (<code>Default</code>) never need a pool, and all other states (<code>BindStarted</code>, <code>Bound</code>, <code>Connected</code>) could've only be reached by calling <code>bind</code> at some point, so they always have access to a pool. A way to codify this could be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">UdpState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nb\">Default</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">BindStarted</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Pool</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Bound</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Pool</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Connected</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Pool</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Also, OutgoingDatagramStream's <code>pool</code> field doesn't have to be optional, because you can never call <code>stream</code> on an unbound socket.</p>\n<hr>\n<blockquote>\n<p>As currently written the second call to start-bind will fail with InvalidState since the pool has already been set on the socket. Is this right?</p>\n</blockquote>\n<p>From the caller's perspective, the <code>start-bind</code> call should preferably succeed or fail atomically. Using the enum layout above would _automagically_ fix that.</p>\n</blockquote>",
        "id": 407054421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702207650
    }
]