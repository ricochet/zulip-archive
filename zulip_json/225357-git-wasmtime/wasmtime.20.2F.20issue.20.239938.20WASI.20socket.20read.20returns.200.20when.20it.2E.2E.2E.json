[
    {
        "content": "<p><a href=\"https://github.com/sunfishcode\">sunfishcode</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9938\">Issue #9938</a>.</p>",
        "id": 492201448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736203763
    },
    {
        "content": "<p>sunfishcode opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9938\">issue #9938</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Compile this Rust program with the wasm32-wasip2 target and the <code>wasi</code> crate as a dependency:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">network</span><span class=\"p\">::{</span><span class=\"n\">IpAddressFamily</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IpSocketAddress</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ipv4SocketAddress</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">streams</span><span class=\"p\">::</span><span class=\"n\">StreamError</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">net</span><span class=\"p\">::</span><span class=\"n\">Ipv4Addr</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">network</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">instance_network</span><span class=\"p\">::</span><span class=\"n\">instance_network</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">family</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">IpAddressFamily</span><span class=\"p\">::</span><span class=\"n\">Ipv4</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">socket</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">tcp_create_socket</span><span class=\"p\">::</span><span class=\"n\">create_tcp_socket</span><span class=\"p\">(</span><span class=\"n\">family</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pollable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">subscribe</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Ipv4Addr</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">127</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">octets</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">ip</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">ip</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">ip</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8080</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">local_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">IpSocketAddress</span><span class=\"p\">::</span><span class=\"n\">Ipv4</span><span class=\"p\">(</span><span class=\"n\">Ipv4SocketAddress</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">start_bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">network</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local_address</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">pollable</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">finish_bind</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">start_listen</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">pollable</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">finish_listen</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">pollable</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_socket</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_output</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">accept</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input_subscription</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">subscribe</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">input_subscription</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"c1\">// We blocked on our input before reading, so there should be</span>\n<span class=\"w\">                </span><span class=\"c1\">// at least one byte ready.</span>\n<span class=\"w\">                </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">\"read after blocking should return at least one byte\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">StreamError</span><span class=\"p\">::</span><span class=\"n\">Closed</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">StreamError</span><span class=\"p\">::</span><span class=\"n\">LastOperationFailed</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"fm\">unreachable!</span><span class=\"p\">(</span><span class=\"s\">\"error! {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"p\">::</span><span class=\"n\">other</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">to_debug_string</span><span class=\"p\">()));</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Run it with <code>wasmtime -Sinherit-network</code> and it'll start a server listening for input on port 8080.</p>\n<p>In another terminal, run <code>nc localhost 8080</code> and type some text and press enter. This causes the server to fail the \"read after blocking should return at least one byte\" assert.</p>\n<h3>Expected Results</h3>\n<p>The server should not panic. <code>read</code> after blocking should produce at least one byte, or fail.</p>\n<h3>Actual Results</h3>\n<p><code>read</code> returns 0 bytes, and trips the assert in the testcase.</p>\n<h3>Versions and Environment</h3>\n<p>I can reproduce this on Wasmtime 27.0.0 (8eefa236f 2024-11-20) and on a Wasmtime built from top-of-tree today.</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 492201449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736203764
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9938#issuecomment-2574064022\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9938\">issue #9938</a>:</p>\n<blockquote>\n<p>The relevant line in the spec is at <a href=\"https://github.com/WebAssembly/wasi-io/blob/main/wit/streams.wit#L51\">https://github.com/WebAssembly/wasi-io/blob/main/wit/streams.wit#L51</a>:</p>\n<blockquote>\n<p>The pollable given by <code>subscribe</code> will be ready when more bytes are available.</p>\n</blockquote>\n<p>The specific issue here is that the pollable reports being ready when zero bytes are available.<br>\n</p>\n</blockquote>",
        "id": 492201705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736203874
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9938#issuecomment-2574181281\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9938\">issue #9938</a>:</p>\n<blockquote>\n<p>Is this issue related? <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9691\">https://github.com/bytecodealliance/wasmtime/pull/9691</a></p>\n</blockquote>",
        "id": 492217113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736210788
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9938#issuecomment-2574214995\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9938\">issue #9938</a>:</p>\n<blockquote>\n<p>Yes, that looks very similar.</p>\n</blockquote>",
        "id": 492221012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736212996
    }
]