[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585#issuecomment-988220172\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585\">issue #3585</a>:</p>\n<blockquote>\n<p>Thanks @abrown! cc @fitzgen: context is that I was helping Andrew debug some ISLE lowerings and we hit a footgun where he was using <code>with_flags</code> rather than <code>with_flags_1</code>, returning a <code>ValueRegs</code> of zero registers, hence this new assertion. From that,</p>\n<ul>\n<li>We should have this assertion, and we should fix the assertion failure (I can take a look maybe tomorrow if someone else doesn't get there first)</li>\n<li>We should maybe name <code>with_flags_*</code> more descriptively... slightly lame suggestions could be <code>with_flags_return_producer</code>, <code>with_flags_return_consumer</code>, ..., but maybe there are better names?</li>\n</ul>\n</blockquote>",
        "id": 264061677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638906701
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585#issuecomment-988228208\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585\">issue #3585</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 264063720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638907486
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585#issuecomment-988343735\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585\">issue #3585</a>:</p>\n<blockquote>\n<blockquote>\n<p>We should maybe name <code>with_flags_*</code> more descriptively... slightly lame suggestions could be <code>with_flags_return_producer</code>, <code>with_flags_return_consumer</code>, ..., but maybe there are better names?</p>\n</blockquote>\n<p>Maybe without the \"return\" so it is</p>\n<ul>\n<li><code>with_flags_none</code>: gives zero regs</li>\n<li><code>with_flags_producer</code>: gives the producer result</li>\n<li><code>with_flags_consumer</code>: gives the consumer result</li>\n<li><code>with_flags_both</code>: gives <code>(producer, consumer)</code></li>\n</ul>\n<p>?</p>\n</blockquote>",
        "id": 264090523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638920325
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585#issuecomment-989135408\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585\">issue #3585</a>:</p>\n<blockquote>\n<p>It looks like an issue with <code>iadd_ifcout</code>; the lowering only returns the add result, but it's supposed to be both the add result and the carry flag.</p>\n<p>I pushed an update to the assertion to <a href=\"https://github.com/cfallin/wasmtime/tree/assert-tmp-dsts\">the same branch in my fork</a> (it was asserting just for one dst, not for all, but it's still a mismatch). Will look at the lowering, maybe it's simple to fix, otherwise we can just back out <code>iadd_ifcout</code> from ISLE for now to allow the release, I think.</p>\n</blockquote>",
        "id": 264208494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638992214
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585#issuecomment-989135614\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585\">issue #3585</a>:</p>\n<blockquote>\n<p>Further interesting twists: <code>iadd_ifcout</code> in the pre-ISLE world also wrote only to its first output (the add result) when lowered by itself. We have a separate pattern-match when <code>iadd_ifcout</code> is used by a <code>trapif</code> to explicltly do the right thing. As I recall, this special-casing is just enough to get the dynamic heap checks to work, and since we eventually want <code>iflags</code>-type values to be replaced by bools and pattern-matching, I don't think we want to fully reify the <code>iflags</code> in ISLE. Probably the best option is to just return a freshly-allocated second temp for the flags for now; anything that uses <code>iflags</code> will not be handled by ISLE so we will not be in danger of actually using it.</p>\n</blockquote>",
        "id": 264208530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638992233
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585#issuecomment-989142189\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3585\">issue #3585</a>:</p>\n<blockquote>\n<p>I pushed a fix to the <code>iadd_ifcout</code> lowering <a href=\"https://github.com/cfallin/wasmtime/commit/aed39a1a795fba9fa3e550d4376d1ecb45419471\">here</a>; please feel free to cherry-pick this and <a href=\"https://github.com/cfallin/wasmtime/commit/c9e66ce81169de17c30dc45651865f0123c9b8eb\">the assertion fix</a>!</p>\n</blockquote>",
        "id": 264209874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638992841
    }
]