[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7177\">PR #7177</a> from <code>afonso360:abi-tls-leaf</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>@bjorn3 reported an issue with TLS values in the RISC-V backend, when testing it with cg_clif. This presented as a segfault running the cg_clif testsuite.</p>\n<p>Digging into it, it looks like we would call the <code>elf_tls_getaddr</code> function, which would clobber the <code>ra</code> register and before returning from the current function we would <strong>not</strong> restore the correct <code>ra</code> value from the stack. This would cause the function to recurse back into the middle of itself and cause a segfault.</p>\n<p>This function met all criteria for us to avoid emitting a prologue and epilogue sequence, that would correctly restore the <code>ra</code> value. The check that was failing here is the <code>is_leaf</code> check. It assumes that a function will only call other functions if it contains any signatures itself.</p>\n<p>This PR adds an additional check for TLS values, and assumes that if such a value exists we will be calling a function to retrieve it's address. This is not necessarily true, but it is a good conservative estimate.</p>\n<p>More importantly I don't think this fully addresses the issue. I think we can still have a similar issue if we decide to use a libcall instead of native instruction during lowering. I'm not entirely sure how to fix that.</p>\n</blockquote>",
        "id": 395313571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696618547
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7177\">PR #7177</a>.</p>",
        "id": 395313573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696618548
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7177\">PR #7177</a>.</p>",
        "id": 395313574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696618548
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7177\">PR #7177</a>.</p>",
        "id": 395315558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696619466
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7177#pullrequestreview-1662680312\">PR review</a>.</p>",
        "id": 395317991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696620770
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7177\">PR #7177</a>.</p>",
        "id": 395318024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696620786
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7177\">PR #7177</a>.</p>",
        "id": 395323766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696623789
    }
]