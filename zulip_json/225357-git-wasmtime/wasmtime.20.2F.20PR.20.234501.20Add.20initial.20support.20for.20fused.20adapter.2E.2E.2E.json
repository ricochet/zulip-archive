[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a> from <code>trampoline-compiler</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit lands a significant new piece of functionality to Wasmtime's<br>\nimplementation of the component model in the form of the implementation<br>\nof fused adapter trampolines. Internally within a component core wasm<br>\nmodules can communicate with each other by having their exports<br>\n<code>canon lift</code>'d to get <code>canon lower</code>'d into a different component. This<br>\nsignifies that two components are communicating through a statically<br>\nknown interface via the canonical ABI at this time. Previously Wasmtime<br>\nwas able to identify that this communication was happening but it simply<br>\npanicked with <code>unimplemented!</code> upon seeing it. This commit is the<br>\nbeginning of filling out this panic location with an actual<br>\nimplementation.</p>\n<p>The implementation route chosen here for fused adapters is to use a<br>\nWebAssembly module itself for the implementation. This means that, at<br>\ncompile time of a component, Wasmtime is generating core WebAssembly<br>\nmodules which then get recursively compiled within Wasmtime as well. The<br>\nchoice to use WebAssembly itself as the implementation of fused adapters<br>\nstems from a few motivations:</p>\n<ul>\n<li>\n<p>This does not represent a significant increase in the \"trusted<br>\n  compiler base\" of Wasmtime. Getting the Wasm -&gt; CLIF translation<br>\n  correct once is hard enough much less for an entirely different IR to<br>\n  CLIF. By generating WebAssembly no new interactions with Cranelift are<br>\n  added which drastically reduces the possibilities for mistakes.</p>\n</li>\n<li>\n<p>Using WebAssembly means that component adapters are insulated from<br>\n  miscompilations and mistakes. If something goes wrong it's defined<br>\n  well within the WebAssembly specification how it goes wrong and what<br>\n  happens as a result. This means that the \"blast zone\" for a wrong<br>\n  adapter is the component instance but not the entire host itself.<br>\n  Accesses to linear memory are guaranteed to be in-bounds and otherwise<br>\n  handled via well-defined traps.</p>\n</li>\n<li>\n<p>A fully-finished fused adapter compiler is expected to be a<br>\n  significant and quite complex component of Wasmtime. Functionality<br>\n  along these lines is expected to be needed for Web-based polyfills of<br>\n  the component model and by using core WebAssembly it provides the<br>\n  opportunity to share code between Wasmtime and these polyfills for the<br>\n  component model.</p>\n</li>\n<li>\n<p>Finally the runtime implementation of managing WebAssembly modules is<br>\n  already implemented and quite easy to integrate with, so representing<br>\n  fused adapters with WebAssembly results in very little extra support<br>\n  necessary for the runtime implementation of instantiating and managing<br>\n  a component.</p>\n</li>\n</ul>\n<p>The compiler added in this commit is dubbed Wasmtime's Fused Adapter<br>\nCompiler of Trampolines (FACT) because who doesn't like deriving a name<br>\nfrom an acronym. Currently the trampoline compiler is limited in its<br>\nsupport for interface types and only supports a few primitives. I plan<br>\non filing future PRs to flesh out the support here for all the variants<br>\nof <code>InterfaceType</code>. For now this PR is primarily focused on all of the<br>\nother infrastructure for the addition of a trampoline compiler.</p>\n<p>With the choice to use core WebAssembly to implement fused adapters it<br>\nmeans that adapters need to be inserted into a module. Unfortunately<br>\nadapters cannot all go into a single WebAssembly module because adapters<br>\nthemselves have dependencies which may be provided transitively through<br>\ninstances that were instantiated with other adapters. This means that a<br>\nsignificant chunk of this PR (<code>adapt.rs</code>) is dedicated to determining<br>\nprecisely which adapters go into precisely which adapter modules. This<br>\npartitioning process attempts to make large modules wherever it can to<br>\ncut down on core wasm instantiations but is likely not optimal as<br>\nit's just a simple heuristic today.</p>\n<p>With all of this added together it's now possible to start writing<br>\n<code>*.wast</code> tests that internally have adapted modules communicating with<br>\none another. A <code>fused.wast</code> test suite was added as part of this PR<br>\nwhich is the beginning of tests for the support of the fused adapter<br>\ncompiler added in this PR. Currently this is primarily testing some<br>\nvarious topologies of adapters along with direct/indirect modes. This<br>\nwill grow many more tests over time as more types are supported.</p>\n<p>Overall I'm not 100% satisfied with the testing story of this PR. When a<br>\ntest fails it's very difficult to debug since everything is written in<br>\nthe text format of WebAssembly meaning there's no \"conveniences\" to<br>\nprint out the state of the world when things go wrong and easily debug.<br>\nI think this will become even more apparent as more tests are written<br>\nfor more types in subsequent PRs. At this time though I know of no<br>\nbetter alternative other than leaning pretty heavily on fuzz-testing to<br>\nensure this is all exercised.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 290423650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658432115
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a>.</p>",
        "id": 290423651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658432115
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a> from <code>trampoline-compiler</code> to <code>main</code>.</p>",
        "id": 290424689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658432698
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a> from <code>trampoline-compiler</code> to <code>main</code>.</p>",
        "id": 290426800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658433789
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a> from <code>trampoline-compiler</code> to <code>main</code>.</p>",
        "id": 290539444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658509579
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a> from <code>trampoline-compiler</code> to <code>main</code>.</p>",
        "id": 290800739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658774235
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501#pullrequestreview-1049986750\">PR review</a>.</p>",
        "id": 290811217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658779466
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501#pullrequestreview-1049986750\">PR review</a>.</p>",
        "id": 290811218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658779466
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501#discussion_r929246227\">PR review comment</a>:</p>\n<blockquote>\n<p>*imports</p>\n</blockquote>",
        "id": 290811219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658779466
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a> from <code>trampoline-compiler</code> to <code>main</code>.</p>",
        "id": 290822660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658785488
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a> from <code>trampoline-compiler</code> to <code>main</code>.</p>",
        "id": 290823060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658785703
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a>.</p>",
        "id": 290823067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658785708
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">PR #4501</a>.</p>",
        "id": 290831040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658790808
    }
]