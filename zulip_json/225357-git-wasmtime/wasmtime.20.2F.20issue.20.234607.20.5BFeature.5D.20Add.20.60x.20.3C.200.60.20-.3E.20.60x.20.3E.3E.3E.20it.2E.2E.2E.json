[
    {
        "content": "<p>MaxGraey opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Simple optimization which rewrite <code>x &lt; 0</code> (<code>icmp slt_imm x, 0</code>) to <code>x &gt;&gt;&gt; bit_size(ty) - 1</code> (<code>ushr_imm x, 31 | 63</code>).</p>\n<h4>Benefit</h4>\n<p><code>x &lt; 0</code> is pretty common operation. Although LLVM itself applies this rule, but some code generators / optimizers such as Binaryen (wasm-opt / wasm-pack use it) don't such peephole rewrites because replacing the constant <code>0</code> to <code>31</code> or <code>63</code> has a negative effect on entropy when compressing wasm module via gzip or brotli. </p>\n<p>Besides, such optimization will improve cranelift IR itself, because it will remove the finalizing <code>bint.i32</code> / <code>bint.i64</code> after <code>icmp</code>.<br>\nfor <code>ushr</code>/<code>ushr_imm</code> it is not needed.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Add necessary rewrite for simple_opt before <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L858\">this line</a></li>\n<li>Add tests for <code>filetests/simple_preopt/simplily32.clif</code> and <code>filetests/simple_preopt/simplily64.clif</code></li>\n</ul>\n</blockquote>",
        "id": 291989129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659608876
    }
]