[
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7188\">issue #7188</a>.</p>",
        "id": 395541333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696770924
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:area:riscv64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7188\">Issue #7188</a>.</p>",
        "id": 395541847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696771317
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7188\">issue #7188</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p><a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1631-vector-slideup-instructions\"><code>vslideup.vi</code></a> is a  very neat instruction that merges two vector registers by copying the bottom elements of one register into the top elements of another register.</p>\n<p>We currently only use it when we cannot perform an operation in a single register due to the register not being large enough.</p>\n<p>We should create a <code>ty_vec_fits_twice_in_reg</code> extractor that allows us to know that we can fit two vector values in a single register. That way we know we can place twice the elements in a single register.</p>\n<p>Instructions that use this operation are:</p>\n<h3><code>{s,u,uu}narrow</code></h3>\n<p>These operations do a 2x<code>vnclip</code> and 1x<code>vslideup</code>. We could instead do the <code>vslideup</code> first merging both values in the same register, and emit a single <code>vnclip</code>.</p>\n<h3><code>iadd_pairwise</code></h3>\n<p>We don't have a dedicated <code>iadd_pairwise</code> instruction. Instead we shuffle the elements in a register and do a regular <code>vadd.vv</code>.</p>\n<p>This works, but requires us two perform twice the instructions that we normally would have to.</p>\n<p>Ideally we would merge both registers in a single <code>vslideup</code>, use <code>vcompress</code> to extract each side of the addition, and emit a single <code>vadd</code> to sum both sides.</p>\n<p>The <a href=\"https://github.com/v8/v8/blob/df99ca37a9d02a3318d3e5487c7803f6230b8f5f/src/wasm/baseline/riscv/liftoff-assembler-riscv.h#L1445-L1460\">V8 lowering for <code>i32x4.dot_i16x8_s</code></a> pulls a similar trick by using LMUL2 which uses two registers. We can't use LMUL&gt;1 due to regalloc incompatibilities.</p>\n<h2>Alternatives</h2>\n<p>We don't actually need to do this. The RISC-V vector specification allows us to use LMUL &gt; 1 to treat a register as having more space than it actually does. </p>\n<p>The way this works is by combining multiple registers and having each instruction working on multiple registers at once.</p>\n<p>The reason we don't currently do this is that it adds a bunch of register allocation constraints that we can't describe to regalloc2.</p>\n</blockquote>",
        "id": 395541983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696771399
    }
]