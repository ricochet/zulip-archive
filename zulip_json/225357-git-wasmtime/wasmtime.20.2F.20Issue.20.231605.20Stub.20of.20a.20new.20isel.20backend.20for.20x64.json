[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620149639\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620149639\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:meta\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 195455802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588011406
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620421415\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620421415\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<p>Overall this looks fine to me.  My only real request is: I'd prefer that the instruction-fragment definitions (<code>args.rs</code>) not be split off from the main instruction definitions.  I found this something of a nuisance for the arm64 version, having to flip back and forth between two source files when looking at the overall structure of a new instruction. Also, the win is less here -- x64 has fewer argument-fragment kinds than arm64.</p>\n</blockquote>",
        "id": 195525493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588057445
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620528462\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620528462\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<blockquote>\n<p>My only real request is: I'd prefer that the instruction-fragment definitions (<a href=\"http://args.rs\" title=\"http://args.rs\">args.rs</a>) not be split off from the main instruction definitions.</p>\n</blockquote>\n<p>I did quite like the separation of it, since the <code>inst/mod.rs</code> file then only contains the overall <code>Inst</code> enum and associated helpers (more needs to be moved from <code>inst/mod</code> to <code>inst/args</code>). Eventually it'll even out the sizes of these files to around 600 or 700 lines each, which is nice too. It also cleanly separates concepts (instructions vs operands), and blackboxes the operands (which are unlikely to change much over time, compared with the instructions for which we might add more variants more frequently). Navigating between files doesn't seem like a strong annoyance in this case, since only two are involved (and LSP makes it really easy to jump-to-definitions, I'd expect text editors have then a feature to jump back to the previous position). Overall, it seems better to keep the two files separated.</p>\n</blockquote>",
        "id": 195545532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588070588
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620732272\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620732272\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<p>cc @jlb6740 </p>\n</blockquote>",
        "id": 195594178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588093113
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620732272\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-620732272\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<p>cc @jlb6740 @joshtriplett </p>\n</blockquote>",
        "id": 195594806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588093333
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-621558519\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-621558519\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>or add <code>--set use_new_backend</code> and this will use the new isel backend. (Expect panics, unimplemented errors, etc.)</li>\n</ul>\n</blockquote>\n<p>Hi @bnjbvr. Do you think any example should show some signs of life here? I tried a simple module that adds to numbers with the current isel and got what I assume is expected results but running through the new isel there were no error messages or panics .. it just hung. Is this expected?</p>\n</blockquote>",
        "id": 195790182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588210173
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-621881590\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-621881590\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<blockquote>\n<p>Hi @bnjbvr. Do you think any example should show some signs of life here? I tried a simple module that adds to numbers with the current isel and got what I assume is expected results but running through the new isel there were no error messages or panics .. it just hung. Is this expected?</p>\n</blockquote>\n<p>It's likely I went through compilation, but not actually running the code in wasmtime (since there seems to be no way to pass Cranelift CLI args through wasmtime runner).</p>\n<p>I have used the following simple wasm module:</p>\n<div class=\"codehilite\"><pre><span></span><code>    (module\n        (func (export &quot;add&quot;) (param i32) (result i32)\n            get_local 0\n            i32.const 42\n            i32.add\n        )\n</code></pre></div>\n\n\n<p>compiled to wasm binary, and then, from Cranelift's directory (so as to use <code>clif-util</code>), ran the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo run -- wasm --target x86_64 --set use_new_backend=1 -dvTD /tmp/a.wasm # shows assembly generated with new backend\ncargo run -- wasm --target x86_64 -dvTD /tmp/a.wasm # shows assembly generated with current backend\n</code></pre></div>\n\n\n</blockquote>",
        "id": 195845084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588256235
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-621940362\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-621940362\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<p>Thanks all for the first round of comments! Many things we could do later on so as to improve this code (especially with respect to naming, and respecting Rust standards in general).</p>\n<p>I just checked, and the simple module from the above comment works in Spidermonkey (with a few tweaks on the Spidermonkey side to make it use the new backend), which is a good sign.</p>\n</blockquote>",
        "id": 195859683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588261895
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-621964324\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-621964324\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<blockquote>\n<p>compiled to wasm binary, and then, from Cranelift's directory (so as to use <code>clif-util</code>), ran the following:</p>\n<p><code>\ncargo run -- wasm --target x86_64 --set use_new_backend=1 -dvTD /tmp/a.wasm # shows assembly generated with new backend\ncargo run -- wasm --target x86_64 -dvTD /tmp/a.wasm # shows assembly generated with current backend\n</code></p>\n</blockquote>\n<p>Ahh thanks ... this worked. The difference was the ordering of the parameters. </p>\n<p>This works:</p>\n<blockquote>\n<p>cargo run -- wasm --target x86_64 --set use_new_backend=1 -dvTD /tmp/a.wasm</p>\n</blockquote>\n<p>While this hung:</p>\n<blockquote>\n<p>cargo run -- wasm --target x86_64  -dvTD --set use_new_backend=1 /tmp/a.wasm</p>\n</blockquote>\n</blockquote>",
        "id": 195865651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588264402
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-622668238\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-622668238\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<p>What's the plan for supporting x86_32? The old backend was generic over the word size; this one doesn't seem to be.</p>\n</blockquote>",
        "id": 196033298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588394642
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-622668238\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-622668238\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<p>What's the plan for supporting x86_32? The old backend was generic over the word size; this one doesn't seem to be. Does the new approach allow to make such a generic backend, or is it necessary to duplicate all the shared code?</p>\n</blockquote>",
        "id": 196033399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588394796
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-624031863\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-624031863\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<blockquote>\n<p>What's the plan for supporting x86_32? The old backend was generic over the word size; this one doesn't seem to be. Does the new approach allow to make such a generic backend, or is it necessary to duplicate all the shared code?</p>\n</blockquote>\n<p>This question is still open for design. In my opinion, if it doesn't imply a huge cost on the x64 backend in terms of maintainability and readability, we should try to share and reuse as much as we can.</p>\n</blockquote>",
        "id": 196301732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588682505
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-624074196\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#issuecomment-624074196\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">Issue #1605</a>:</p>\n<blockquote>\n<p>Thanks for the reviews and new comments again! Will merge if CI passes.</p>\n</blockquote>",
        "id": 196311255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588687318
    }
]