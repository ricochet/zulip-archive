[
    {
        "content": "<p>CGamesPlay opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a> from <code>CGamesPlay:main</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This resolves #8890, and allows a rust project to use the <code>wasmtime-c-api</code> crate again.</p>\n<p>In #8642, the build process was changed but the rust build script was not changed to match. In addition, because the CMake configuration invokes cargo, it isn't possible for cargo to then invoke CMake (cylic dependency). To resolve this, we introduce a new CMake target that only produces the necessary files for the build to succeed, and then allow cargo to build the API as normal.</p>\n<p>I've tested that this works in my local copy of tree-sitter, which depends on the <code>wasmtime-c-api-impl</code> crate.</p>\n</blockquote>",
        "id": 454718111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722227664
    },
    {
        "content": "<p><strong>CGamesPlay</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 454718112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722227665
    },
    {
        "content": "<p><strong>CGamesPlay</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 454718115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722227665
    },
    {
        "content": "<p><strong>CGamesPlay</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 454718116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722227665
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2205138416\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Do you know if it's possible to have an install target which only installs header files? That way there wouldn't need to be two includes and only one would be necessary.</p>\n<p>Additionally can you forward along the <code>-D</code> flags for the features of Wasmtime? Otherwise the <code>conf.h</code> could report the wrong set of supported features.</p>\n</blockquote>",
        "id": 454852012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722263251
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2257245104\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Sure, we just need to use <code>COMPONENT Headers</code>, see <a href=\"https://cmake.org/cmake/help/latest/command/install.html\">docs</a>. I think only having one header would be ideal, especially if they are in different directories.</p>\n<p>Are you suggesting that instead of just generating the header, I install all the headers to the cargo output directory, and then report that as the sole include directory? That makes sense, I just want to confirm.</p>\n</blockquote>",
        "id": 454981441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722299672
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 454986217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722301296
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455001188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722307816
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2257357773\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Updated commits properly configure the headers, and install all headers to the right place, so we can get rid of the second metadata variable.</p>\n</blockquote>",
        "id": 455001339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722307886
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455001455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722307943
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2207849647\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 455136248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722349316
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455136999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722349421
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455137028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722349426
    },
    {
        "content": "<p>clason <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2258713304\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Can this be backported to release-23, too?</p>\n</blockquote>",
        "id": 455159475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722355802
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2258788598\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I think that would be reasonable yeah, just needs to land on <code>main</code> first and then the backport is a cherry-pick + new PR. </p>\n<p>I believe CI is failing here on MinGW for cmake-related reasons? (compiler detection not working presumbably because <code>cl.exe</code> is used when mingw flags are passed)</p>\n</blockquote>",
        "id": 455168352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722358176
    },
    {
        "content": "<p>maxbrunsfeld <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2258904910\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Is there any way we could avoid adding this <code>cmake</code> build dependency to <code>wasmtime-c-api-impl</code>?</p>\n<p>Could the <code>build.rs</code> just generate <code>conf.h</code>, instead of using cmake to do it? It looks like that <code>build.rs</code> file already has to explicitly list out a bunch of cargo features and convert them to C macro names. Could it just write that to a <code>conf.h</code> file directly, instead of passing them as arguments to cmake?</p>\n<p>Maybe I'm missing something, and the CMake build is doing something too significant to duplicate, but if not, it would be great to avoid the build-time dependency.</p>\n</blockquote>",
        "id": 455184876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722362301
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259073199\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Is the <code>cmake</code> dependency too heavy for end users to arrange? I do think it's nice to have the same logic not duplicated. It's already broken once now so keeping it synchronized seems like the best bet.</p>\n</blockquote>",
        "id": 455204860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722368263
    },
    {
        "content": "<p>maxbrunsfeld <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259144010\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I just anticipate that  consumers of the <code>tree-sitter</code> crate won't necessarily have <code>cmake</code> installed on their CI / dev machines, if they are mainly set up for Rust development.</p>\n<p>Just to double check, I think that if we wanted to avoid requiring Cmake, we'd change this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PathBuf</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">var_os</span><span class=\"p\">(</span><span class=\"s\">\"CARGO_MANIFEST_DIR\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cmake</span><span class=\"p\">::</span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">dir</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"s\">\"WASMTIME_DISABLE_ALL_FEATURES\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"ON\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">always_configure</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">build_target</span><span class=\"p\">(</span><span class=\"s\">\"headers\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">FEATURES</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">var_os</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"CARGO_FEATURE_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"WASMTIME_FEATURE_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"ON\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>into this (or something similar). </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"#ifndef WASMTIME_CONF_H</span><span class=\"se\">\\n</span><span class=\"s\">#define WASMTIME_CONF_H</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">suffix</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"#endif</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">FEATURES</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">var_os</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"CARGO_FEATURE_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"WASMTIME_FEATURE_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">suffix</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>And you wouldn't need to add the <code>headers</code> target to the cmake file. It doesn't seem any more brittle to me. Either way, the build script needs to know the set of features, and how they map to C macro names.</p>\n</blockquote>",
        "id": 455214262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722370922
    },
    {
        "content": "<p>maxbrunsfeld edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259144010\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I just anticipate that  consumers of the <code>tree-sitter</code> crate won't necessarily have <code>cmake</code> installed on their CI / dev machines, if they are mainly set up for Rust development. It's not the end of the world, but it adds one more gotcha and potentially dependency issue for users of the crate.</p>\n<p>Just to double check, I think that if we wanted to avoid requiring Cmake, we'd change this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PathBuf</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">var_os</span><span class=\"p\">(</span><span class=\"s\">\"CARGO_MANIFEST_DIR\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cmake</span><span class=\"p\">::</span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">dir</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"s\">\"WASMTIME_DISABLE_ALL_FEATURES\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"ON\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">always_configure</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">build_target</span><span class=\"p\">(</span><span class=\"s\">\"headers\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">FEATURES</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">var_os</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"CARGO_FEATURE_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"WASMTIME_FEATURE_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"ON\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>into this (or something similar). </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"#ifndef WASMTIME_CONF_H</span><span class=\"se\">\\n</span><span class=\"s\">#define WASMTIME_CONF_H</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">suffix</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"#endif</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">FEATURES</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">var_os</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"CARGO_FEATURE_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"WASMTIME_FEATURE_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">suffix</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>And you wouldn't need to add the <code>headers</code> target to the cmake file. It doesn't seem any more brittle to me. Either way, the build script needs to know the set of features, and how they map to C macro names.</p>\n</blockquote>",
        "id": 455214368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722370944
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259258701\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>The brittle part is that it's a duplication of copying over headers and there is no longer a single source of truth for how headers are created. Additionally there are no tests in this repository testing the header as-generated by the build script and without that there's also no tests that the duplicated logic for the header file generation is correct. What you're describing is correct as-is today but that may not hold true indefinitely into the future.</p>\n</blockquote>",
        "id": 455225886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722375629
    },
    {
        "content": "<p>maxbrunsfeld <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259405087\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Oh, I would have thought that if there are tests for <code>wasmtime-c-api</code>, then they would cover the correctness of the <code>wasmtime-c-api-impl</code> build script. Is there a tested code path that doesn't run this build script?</p>\n</blockquote>",
        "id": 455247989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722385100
    },
    {
        "content": "<p>maxbrunsfeld edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259405087\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Oh, I would have thought that if there are tests for <code>wasmtime-c-api</code>, then they would cover the correctness of the <code>wasmtime-c-api-impl</code> build script. Is there a tested code path that doesn't run this build script?</p>\n<p>Edit - Sorry never mind; I don't want to hold this up.</p>\n</blockquote>",
        "id": 455248398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722385355
    },
    {
        "content": "<p>maxbrunsfeld edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259405087\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>~Oh, I would have thought that if there are tests for <code>wasmtime-c-api</code>, then they would cover the correctness of the <code>wasmtime-c-api-impl</code> build script. Is there a tested code path that doesn't run this build script?~</p>\n<p>Edit - Sorry never mind, it doesn't matter that much, and I don't want to hold this up.</p>\n</blockquote>",
        "id": 455248442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722385385
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259437666\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Is there are test that mingw compilation is working at all presently? This invocation of cmake looks correct, but it detects MSVC anyways:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">running</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"cmake\"</span><span class=\"w\"> </span><span class=\"s\">\"D:</span><span class=\"se\">\\\\</span><span class=\"s\">a</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">crates</span><span class=\"se\">\\\\</span><span class=\"s\">c-api\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-G\"</span><span class=\"w\"> </span><span class=\"s\">\"MSYS Makefiles\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DWASMTIME_DISABLE_ALL_FEATURES=ON\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DWASMTIME_FEATURE_DISABLE_LOGGING=ON\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_SYSTEM_NAME=Windows\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_SYSTEM_PROCESSOR=AMD64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_INSTALL_PREFIX=D:</span><span class=\"se\">\\\\</span><span class=\"s\">a</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">target</span><span class=\"se\">\\\\</span><span class=\"s\">x86_64-pc-windows-gnu</span><span class=\"se\">\\\\</span><span class=\"s\">release</span><span class=\"se\">\\\\</span><span class=\"s\">build</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime-c-api-impl-dfbdb5120f123319</span><span class=\"se\">\\\\</span><span class=\"s\">out\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_C_FLAGS= -ffunction-sections -fdata-sections -m64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_CXX_FLAGS= -ffunction-sections -fdata-sections -m64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -m64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_BUILD_TYPE=MinSizeRel\"</span>\n<span class=\"w\">    </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">identification</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">MSVC</span><span class=\"w\"> </span><span class=\"mf\">19.40.33812.0</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 455252115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722387541
    },
    {
        "content": "<p>CGamesPlay edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259437666\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Is there are test that mingw compilation is working at all presently? This invocation of cmake looks correct, but it detects MSVC anyways:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">running</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"cmake\"</span><span class=\"w\"> </span><span class=\"s\">\"D:</span><span class=\"se\">\\\\</span><span class=\"s\">a</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">crates</span><span class=\"se\">\\\\</span><span class=\"s\">c-api\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-G\"</span><span class=\"w\"> </span><span class=\"s\">\"MSYS Makefiles\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DWASMTIME_DISABLE_ALL_FEATURES=ON\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DWASMTIME_FEATURE_DISABLE_LOGGING=ON\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_SYSTEM_NAME=Windows\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_SYSTEM_PROCESSOR=AMD64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_INSTALL_PREFIX=D:</span><span class=\"se\">\\\\</span><span class=\"s\">a</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">target</span><span class=\"se\">\\\\</span><span class=\"s\">x86_64-pc-windows-gnu</span><span class=\"se\">\\\\</span><span class=\"s\">release</span><span class=\"se\">\\\\</span><span class=\"s\">build</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime-c-api-impl-dfbdb5120f123319</span><span class=\"se\">\\\\</span><span class=\"s\">out\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_C_FLAGS= -ffunction-sections -fdata-sections -m64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_CXX_FLAGS= -ffunction-sections -fdata-sections -m64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -m64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_BUILD_TYPE=MinSizeRel\"</span>\n<span class=\"w\">    </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">identification</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">MSVC</span><span class=\"w\"> </span><span class=\"mf\">19.40.33812.0</span>\n</code></pre></div>\n<p>Looking at <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/10171658273/job/28133093090\">another mingw job</a> I see that <code>C:/msys64/usr/bin/pacman.exe -S --needed mingw-w64-x86_64-gcc --noconfirm</code> and possibly a few others are likely needed?</p>\n</blockquote>",
        "id": 455253068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722388130
    },
    {
        "content": "<p>CGamesPlay edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259437666\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>Is there are test that mingw compilation is working at all presently? This invocation of cmake looks correct, but it detects MSVC anyways:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">running</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"cmake\"</span><span class=\"w\"> </span><span class=\"s\">\"D:</span><span class=\"se\">\\\\</span><span class=\"s\">a</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">crates</span><span class=\"se\">\\\\</span><span class=\"s\">c-api\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-G\"</span><span class=\"w\"> </span><span class=\"s\">\"MSYS Makefiles\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DWASMTIME_DISABLE_ALL_FEATURES=ON\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DWASMTIME_FEATURE_DISABLE_LOGGING=ON\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_SYSTEM_NAME=Windows\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_SYSTEM_PROCESSOR=AMD64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_INSTALL_PREFIX=D:</span><span class=\"se\">\\\\</span><span class=\"s\">a</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime</span><span class=\"se\">\\\\</span><span class=\"s\">target</span><span class=\"se\">\\\\</span><span class=\"s\">x86_64-pc-windows-gnu</span><span class=\"se\">\\\\</span><span class=\"s\">release</span><span class=\"se\">\\\\</span><span class=\"s\">build</span><span class=\"se\">\\\\</span><span class=\"s\">wasmtime-c-api-impl-dfbdb5120f123319</span><span class=\"se\">\\\\</span><span class=\"s\">out\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_C_FLAGS= -ffunction-sections -fdata-sections -m64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_CXX_FLAGS= -ffunction-sections -fdata-sections -m64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -m64\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"-DCMAKE_BUILD_TYPE=MinSizeRel\"</span>\n<span class=\"w\">    </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">identification</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">MSVC</span><span class=\"w\"> </span><span class=\"mf\">19.40.33812.0</span>\n</code></pre></div>\n<h2>Updated</h2>\n<p>Looking at <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/10171658273/job/28133093090\">another mingw job</a> I see that <code>C:/msys64/usr/bin/pacman.exe -S --needed mingw-w64-x86_64-gcc --noconfirm</code> and possibly a few others are likely needed?</p>\n</blockquote>",
        "id": 455253120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722388171
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455256514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722390314
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259475595\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I've added a workflow change to include the commands that I suspect fix the issue.</p>\n</blockquote>",
        "id": 455256563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722390353
    },
    {
        "content": "<p>CGamesPlay edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2259475595\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I've added a workflow change to include the commands that I suspect fix the issue. And I rebased.</p>\n</blockquote>",
        "id": 455256610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722390363
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455392748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722437397
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2260744110\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I've added an extra commit to this PR which runs the full tests suite on this PR instead of waiting for the merge queue, and it looks like there may still be some CI issues</p>\n</blockquote>",
        "id": 455396828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722438327
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455527568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722479144
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455529719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722480085
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455555046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722490032
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2262084885\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>The one remaining CI failure is a network failure. Changes made to make CI happy:</p>\n<ul>\n<li>Force CC and CXX in mingw. Turns out the other mingw build configurations don't build the C API anyways.</li>\n<li>Use <code>cargo package --no-verify</code> on the C API since it is hard-coded to create an <code>artifact</code> directory in the source directory and it isn't possible to package that directory because cargo is hard-coded to exclude any directory with <code>Cargo.toml</code> in it.<ul>\n<li>By the way, the <code>--no-verify</code> on <code>wasi-nn</code> seems unnecessary (it worked fine on my machine).</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 455556166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722490907
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2213753742\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Given the possible fragility here with packaging and how you had to modify <code>include</code>, could verification via <code>publish.rs</code> be made to work? Basically could this be updated to undo the addition of <code>--no-verify</code>?</p>\n<p>As for wasi-nn, if you'd like I think it's reasonable to try dropping that here too (and verify it), but it's ok to defer that to a different PR as well.</p>\n</blockquote>",
        "id": 455740768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722541329
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2213753742\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Given the possible fragility here with packaging and how you had to modify <code>include</code>, could verification via <code>publish.rs</code> be made to work? Basically could this be updated to undo the addition of <code>--no-verify</code>?</p>\n<p>As for wasi-nn, if you'd like I think it's reasonable to try dropping that here too (and verify it), but it's ok to defer that to a different PR as well.</p>\n</blockquote>",
        "id": 455740769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722541329
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#discussion_r1700732498\">PR review comment</a>:</p>\n<blockquote>\n<p>Should the <code>BINARY_DIR</code> configuration be dropped entirely? That should probably be somewhere within <code>CMAKE_CURRENT_BINARY_DIR</code> if it's still being used to avoid modifying the source tree.</p>\n</blockquote>",
        "id": 455740771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722541329
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2213763216\">PR review</a>.</p>",
        "id": 455740966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722541431
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#discussion_r1700737463\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind leaving a comment as to why these steps are necessary? (this doesn't seem to directly follow from <a href=\"https://github.com/rust-lang/rust/issues/112368\">rust-lang/rust#112368</a> by my read</p>\n</blockquote>",
        "id": 455740967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722541431
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455782236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722557892
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455787326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722558995
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455796047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722561442
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2264333787\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<blockquote>\n<p>Given the possible fragility here with packaging and how you had to modify include, could verification via <a href=\"http://publish.rs\">publish.rs</a> be made to work? Basically could this be updated to undo the addition of --no-verify?</p>\n</blockquote>\n<p>Short answer: no. Longer answer: yes, but I probably can't do it in this PR. Any change I make here will at best be \"works on my machine\", and will likely involve knowing the details of all supported configurations and what went into <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8642\">https://github.com/bytecodealliance/wasmtime/pull/8642</a>. Plus, I'm not a core developer of this project, I'm trying to get access to the 1-line method I added in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8907\">https://github.com/bytecodealliance/wasmtime/pull/8907</a> so that I can update tree-sitter so that I can use wasm modules in my project. Basically, I'm already 2 projects deep in a rabbit hole <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Hopefully you'll appreciate that I've taken the rust c-api crate from definitely-not-working to working-but-not-thoroughly-tested, and can add a follow-up task to the backlog to improve the testing.</p>\n</blockquote>",
        "id": 455798561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722563081
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455943674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722607922
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455946592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722608499
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2265517797\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>That's fine yeah, I can try to help out here too. </p>\n<p>It's worth nothing though the other side of the coin here. Most of us working on Wasmtime know very little about cmake and don't expect the C API to be used through Rust like this. #6765 has some more discussion of the addition of this feature about how things might break without tests in the repository. I tried to make it clear at least that this current situation was a risk of happening.</p>\n<p>I understand you're short on time and don't want to maintain this here but at the same time as maintainers responsible for Wasmtime we need to make sure that introduction of features we don't fully understand don't hinder the development elsewhere. Here specifically our crate publication process is fully automated and only runs once a month so is at a very high risk of going wrong if we don't have protections in place. Explicitly passing <code>--no-verify</code> to new crates raises that risk even further. Failing publication due to errors with the c-api can then be difficult to understand without precise knowledge of everything working here.</p>\n<p>Basically what I'm trying to say is that I'm not trying to get this PR to a picture-perfect state but rather get it to a point where it (a) passes tests and (b) doesn't increase maintenance burden. Dealing with CMake isn't always fun and easy and I understand it can be a slog, but that's part of the reality of having a cross-platform project sometimes.</p>\n</blockquote>",
        "id": 455947582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722608825
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455949295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722609420
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455972194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722614114
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 455975556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722615105
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2265737104\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I'm losing steam on this and I don't know how best to proceed. Running a full <code>cmake</code> configure step has issues with needing extra CI configuration and new build dependencies (not just <code>cmake</code> but the build system like make/ninja as well). It additionally resurfaced android errors in <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/10217416984/job/28271193012\">https://github.com/bytecodealliance/wasmtime/actions/runs/10217416984/job/28271193012</a> which I don't know what's going on.</p>\n<p>I tried an alternate approach of installing headers with a <code>*.cmake</code> script to use <code>cmake -P</code> instead. That skips the whole configure step and only requires a single <code>cmake</code> invocation and should be pretty portable and more lightweight. That is causing all sorts of issues of having to install headers in a few places as part of the build for things like docs and examples. I don't know how to best handle that.</p>\n<p>Overall I don't know the best way forward on this. It might be to stop relying on cmake for features and use a rust-based script that can be shared between the normal cmake build and the build script. Unsure.</p>\n</blockquote>",
        "id": 455977296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722615572
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2265744702\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I’m not at my computer right now but about the Android failure, one thing I noticed is that the NDK is v27 on -min and v25 on the regular one, with a different rust toolchain and a different runner image version. I set <code>CMAKE_MAKE_PROGRAM</code> to <code>make</code> and I got a successful run, but I am suspicious that its actually a nondeterministic failure. </p>\n</blockquote>",
        "id": 455978506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722615863
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 457238167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723080970
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 457245789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723083753
    },
    {
        "content": "<p>CGamesPlay updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 457248086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723085030
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2274860590\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>The remaining 2 build failures were pretty simple tweaks, so I went ahead and made them. The CI is passing now, and I confirmed that it still works when referenced from a rust crate. There was a network failure int he build, but I rebased to trigger a test rerun.</p>\n<p>Do you think this is good to merge in its latest state?</p>\n</blockquote>",
        "id": 457249979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723086027
    },
    {
        "content": "<p>clason submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2229714730\">PR review</a>.</p>",
        "id": 459414247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723193978
    },
    {
        "content": "<p>clason created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#discussion_r1711090740\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code># When adding or removing a feature, make sure to keep the C API in sync by\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 459414248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723193978
    },
    {
        "content": "<p>clason submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2229717037\">PR review</a>.</p>",
        "id": 459414671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723194049
    },
    {
        "content": "<p>clason created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#discussion_r1711092674\">PR review comment</a>:</p>\n<blockquote>\n<p>unrelated changes?</p>\n</blockquote>",
        "id": 459414673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723194050
    },
    {
        "content": "<p>clason submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2229719490\">PR review</a>.</p>",
        "id": 459415091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723194126
    },
    {
        "content": "<p>clason created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#discussion_r1711094865\">PR review comment</a>:</p>\n<blockquote>\n<p>If you move this comment _above_ the list (here and elsewhere), then you can avoid the duplicate nonce (less noise when <code>grep</code>ping).</p>\n</blockquote>",
        "id": 459415094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723194126
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2230834998\">PR review</a>:</p>\n<blockquote>\n<p>Ah thanks for debugging that! This looks good to me yeah, so I'm going to go ahead and merge. I'm going to follow up with some responses to @clason as well and there can always be follow-ups too to handle things.</p>\n</blockquote>",
        "id": 459549230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723228568
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2230836702\">PR review</a>.</p>",
        "id": 459549395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723228643
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#discussion_r1711975042\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I like having this at the end because features are often added at the end and a comment only at the top might get missed. The amount of duplication here though is unfortunate across the codebase but that would probably be best fixed with a \"tidy\" script or something like that rather than relying on us humans to handle everything.</p>\n</blockquote>",
        "id": 459549396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723228643
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#discussion_r1711975563\">PR review comment</a>:</p>\n<blockquote>\n<p>I found this was necessary at one stage of testing to appease doxygen. That being said I barely understanding doxygen and we could very well be holding doxygen wrong where this should work when it doesn't.</p>\n</blockquote>",
        "id": 459549452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723228669
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2230837296\">PR review</a>.</p>",
        "id": 459549453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723228669
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>.</p>",
        "id": 459551392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723229503
    },
    {
        "content": "<p>clason submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#pullrequestreview-2230894983\">PR review</a>.</p>",
        "id": 459556330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723231026
    },
    {
        "content": "<p>clason created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#discussion_r1712026314\">PR review comment</a>:</p>\n<blockquote>\n<p>I just mean as a trivial way to halve the number of hits: no need to have the nonce both before _and_ after the list; once is enough (no matter where).</p>\n</blockquote>",
        "id": 459556332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723231026
    },
    {
        "content": "<p>clason <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2278592432\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>And also backport (24.0 is probably good enough) ;)</p>\n</blockquote>",
        "id": 459556419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723231057
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2282982948\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I'd definitely love to get this in 24 if possible. Link to @clason's backport PRs:</p>\n<ul>\n<li>#9101</li>\n<li>#9102</li>\n</ul>\n</blockquote>",
        "id": 459965821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723426368
    },
    {
        "content": "<p>CGamesPlay edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031#issuecomment-2282982948\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">PR #9031</a>:</p>\n<blockquote>\n<p>I'd definitely love to get this in 24, and 23 would be nice if possible. Link to @clason's backport PRs:</p>\n<ul>\n<li>#9101</li>\n<li>#9102</li>\n</ul>\n</blockquote>",
        "id": 459965856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723426398
    }
]