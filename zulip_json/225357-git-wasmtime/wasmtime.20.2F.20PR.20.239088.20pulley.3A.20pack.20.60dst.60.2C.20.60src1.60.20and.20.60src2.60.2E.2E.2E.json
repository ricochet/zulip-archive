[
    {
        "content": "<p>Kmeakin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a> from <code>Kmeakin:km/pulley-packed-binary-operands</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Pack the <code>dst</code>, <code>src1</code> and <code>src2</code> register operands of binary operators into 2 bytes. Solves the <code>TODO</code> at the top of <code>lib.rs</code></p>\n</blockquote>",
        "id": 457201596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723064625
    },
    {
        "content": "<p><strong>Kmeakin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 457201598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723064625
    },
    {
        "content": "<p><strong>Kmeakin</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 457201599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723064625
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 457204449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723065724
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#issuecomment-2274371846\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>:</p>\n<blockquote>\n<p>Reassigned @fitzgen to review, I'm not sure how this intersects with your other plans to add instructions with large offsets etc; happy to review this myself if you'd like otherwise.</p>\n</blockquote>",
        "id": 457204563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723065756
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 457208316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723067086
    },
    {
        "content": "<p>Kmeakin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>:</p>\n<blockquote>\n<p>Pack the <code>dst</code>, <code>src1</code> and <code>src2</code> register operands of binary operators into 2 bytes. Solves the <code>TODO</code> at the top of <code>lib.rs</code>.</p>\n<p>This required moving the special registers into their own register class, and adding <code>smov</code> and <code>spush</code>/<code>spop</code> to interact with SP/FP.</p>\n</blockquote>",
        "id": 457208482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723067159
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 457208801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723067341
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#pullrequestreview-2226312147\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! <code>BinaryOperands</code> is exactly what I was imagining!</p>\n<p>I'd prefer holding off on merging this until I can land the Cranelift backend for Pulley though, just so that I don't have to chase instruction set updates, and we can start evolving the backend and the instruction set together and keep them in sync.</p>\n</blockquote>",
        "id": 457219237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723071541
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#pullrequestreview-2226312147\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! <code>BinaryOperands</code> is exactly what I was imagining!</p>\n<p>I'd prefer holding off on merging this until I can land the Cranelift backend for Pulley though, just so that I don't have to chase instruction set updates, and we can start evolving the backend and the instruction set together and keep them in sync.</p>\n</blockquote>",
        "id": 457219239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723071541
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1708042337\">PR review comment</a>:</p>\n<blockquote>\n<p>I was indeed thinking that the special registers would only be accessed from special instructions, but I think we can do even more here by bundling the whole function prologue and epilogue up into instructions that just take the size to decrement the stack frame by:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">enter_frame</span><span class=\"w\"> </span><span class=\"mi\">16</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">exit_frame</span><span class=\"w\"> </span><span class=\"mi\">16</span>\n<span class=\"n\">ret</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">enter_frame</span><span class=\"w\"> </span><span class=\"n\">N</span>\n\n<span class=\"o\">==&gt;</span>\n\n<span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">lr</span>\n<span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">fp</span>\n<span class=\"n\">fp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sp</span>\n<span class=\"n\">sp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">N</span>\n</code></pre></div>\n<p>and the opposite for <code>exit_frame N</code>.</p>\n</blockquote>",
        "id": 457219240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723071541
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1708045495\">PR review comment</a>:</p>\n<blockquote>\n<p>Why all these changes? Seems unrelated?</p>\n</blockquote>",
        "id": 457219241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723071542
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1708057872\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we split this out into its own PR?</p>\n</blockquote>",
        "id": 457219243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723071542
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1708056792\">PR review comment</a>:</p>\n<blockquote>\n<p>We shouldn't need this, or any other general instructions for the special registers. They should only be manipulated by instructions that are doing other stuff as well, eg <code>call</code> will set <code>lr</code>. But these registers aren't allocated by our register allocator and are reserved for their special purpose, so we shouldn't need to have general instructions for them.</p>\n</blockquote>",
        "id": 457219245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723071542
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#issuecomment-2274800454\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"pulley\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: pulley</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 457243453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723082679
    },
    {
        "content": "<p>Kmeakin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#pullrequestreview-2230568934\">PR review</a>.</p>",
        "id": 459513545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723219539
    },
    {
        "content": "<p>Kmeakin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1711732495\">PR review comment</a>:</p>\n<blockquote>\n<p>Encodes the invariant that registers are always in the range <code>0..32</code>, so indexing into the registers array can never fail. The other option would be to use the <code>#[rustc_layout_scalar_valid_range_end(31)]</code> attribute, but that is nightly-only.</p>\n</blockquote>",
        "id": 459513546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723219539
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#pullrequestreview-2230606660\">PR review</a>.</p>",
        "id": 459517681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723220696
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1711761382\">PR review comment</a>:</p>\n<blockquote>\n<p>Are you saying we get better codegen with <code>enum</code>s here? That's neat, I wouldn't have expected the LLVM IR that rustc emits to change.</p>\n</blockquote>",
        "id": 459517683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723220696
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 459520757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723221642
    },
    {
        "content": "<p>Kmeakin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#pullrequestreview-2230645582\">PR review</a>.</p>",
        "id": 459521398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723221892
    },
    {
        "content": "<p>Kmeakin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1711791357\">PR review comment</a>:</p>\n<blockquote>\n<p><a href=\"https://godbolt.org/z/jPrq5bc45\">https://godbolt.org/z/jPrq5bc45</a></p>\n<p>rustc emits calls to <code>assume</code> for types that have niches, and starting from LLVM 19 function parameters can have <code>range</code> metadata attached directly</p>\n</blockquote>",
        "id": 459521399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723221892
    },
    {
        "content": "<p>Kmeakin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#pullrequestreview-2230651250\">PR review</a>.</p>",
        "id": 459521940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723222121
    },
    {
        "content": "<p>Kmeakin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1711796217\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm a bit confused about the purpose of the <code>N</code> to <code>enter_frame</code>/<code>exit_frame</code>. Each <code>push</code>/<code>pop</code> will itself automatically adjust the sp by <code>size_of&lt;*u8&gt;()</code>. So in the case of no other registers being stored on the stack, the argument will be zero. In the case where other registers need to be saved on the stack, <code>xpush{32,64}</code> and <code>xpop{32,64}</code> will also adjust the sp by 4/8 bytes. So in either case the argument is not needed? I don't think there is any scenario where you would need to adjust the stack pointer without also reading/writing from/to the stack </p>\n</blockquote>",
        "id": 459521941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723222121
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 459522060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723222184
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 459524018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723222830
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 459526796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723223419
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#pullrequestreview-2230690435\">PR review</a>.</p>",
        "id": 459527589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723223585
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1711830093\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm a bit confused about the purpose of the <code>N</code> to <code>enter_frame</code>/<code>exit_frame</code>.</p>\n</blockquote>\n<p>To allocate the stack frame for this function, including all of its regalloc spills and all that.</p>\n<p>That said, the way that Cranelift is organized and the abstraction boundaries it has might make doing the full function prologue in a single instruction difficult. We might have to settle for two instructions:</p>\n<ol>\n<li>a macro instruction for <code>push lr; push fp; fp = sp</code> (and the opposite for exiting the function, maybe just fold this into <code>ret</code>)</li>\n<li>an instruction for allocating and deallocating stack space: <code>sp = sp +/- imm32</code></li>\n</ol>\n<p>See <code>gen_prologue_frame_setup</code>, <code>gen_epilogue_frame_restore</code>, and <code>gen_sp_reg_adjust</code> in <code>../pulley_shared/abi.rs</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9089\">https://github.com/bytecodealliance/wasmtime/pull/9089</a> (or the equivalent methods in, e.g., <code>../aarch64/abi.rs</code>). I'm thinking that each of these should produce a single macro instruction because they otherwise always generate the exact same sequence of instructions modulo immediate constant values.</p>\n<p>The benefit of a single macro instruction, compared to a sequence of composable and more general instructions, is performance. The expensive part of an interpreter is roundtripping through the opcode loop, by using macro instructions we are amortizing that cost.</p>\n<p>Does that make sense?</p>\n</blockquote>",
        "id": 459527590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723223585
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 459540327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723226720
    },
    {
        "content": "<p>Kmeakin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#pullrequestreview-2230919523\">PR review</a>.</p>",
        "id": 459560229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723232151
    },
    {
        "content": "<p>Kmeakin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#discussion_r1712049325\">PR review comment</a>:</p>\n<blockquote>\n<p>Decided the extra argument was not needed after all:<br>\n<a href=\"#narrow/stream/217126-wasmtime/topic/Pulley.20registers/near/459533622\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/Pulley.20registers/near/459533622</a></p>\n</blockquote>",
        "id": 459560230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723232151
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 459580069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723239180
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 459580654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723239462
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#issuecomment-2294376958\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>:</p>\n<blockquote>\n<p>Heads up: the Pulley backend for Cranelift landed in #9089 and I think this can be rebased and landed now</p>\n</blockquote>",
        "id": 462863327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723846340
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 462865078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723847515
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 463400020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724072875
    },
    {
        "content": "<p><strong>Kmeakin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 463419985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724077529
    },
    {
        "content": "<p><strong>Kmeakin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 463419988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724077530
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 463419991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724077531
    },
    {
        "content": "<p>Kmeakin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>:</p>\n<blockquote>\n<p>Pack the <code>dst</code>, <code>src1</code> and <code>src2</code> register operands of binary operators into 2 bytes. Solves the <code>TODO</code> at the top of <code>lib.rs</code>.</p>\n<p>~This required moving the special registers into their own register class, and adding <code>smov</code> and <code>spush</code>/<code>spop</code> to interact with SP/FP.~<br>\nI held off on splitting special registers into their own <code>SReg</code> class because I'm not sure how to integrate it with ISLE/Regalloc</p>\n</blockquote>",
        "id": 463420303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724077620
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 463424644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724078864
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 463430266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724079944
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088#pullrequestreview-2246371649\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 463502624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724098211
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9088\">PR #9088</a>.</p>",
        "id": 463507008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724099221
    }
]