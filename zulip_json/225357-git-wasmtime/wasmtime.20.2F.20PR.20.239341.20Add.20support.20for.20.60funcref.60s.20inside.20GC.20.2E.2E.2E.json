[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a> from <code>fitzgen:funcrefs-in-gc-heap</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 473888992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727740899
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>.</p>",
        "id": 473888993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727740899
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>.</p>",
        "id": 473888994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727740899
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#issuecomment-2384645205\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:ref-types\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: wasmtime:ref-types</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 473912697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727748887
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>.</p>",
        "id": 474069039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727797627
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#issuecomment-2386374293\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>:</p>\n<blockquote>\n<p>Rebased to resolve conflicts.</p>\n</blockquote>",
        "id": 474069095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727797647
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#pullrequestreview-2340840947\">PR review</a>:</p>\n<blockquote>\n<p>I think this is all reasonable enough, but this is definitely further amplifying my worries about the cost of GC and runtime performance. Every write of a funcref  now requires at least a hash table lookup and reads can require taking a read lock on a global <code>RwLock</code>. On one hand I realize that the goal is to get GC working, but on the other hand I also have a hard time seeing how this is going to be a suitable performance profile for anyone actually using GC. I do realize though that improving on this is going to be significantly difficult to, for example, expose the slab to jit code or to implement a GC of the slab entries themselves.</p>\n<p>In that sense I'm going to go ahead and approve this as-is since I don't believe there are any correctness issues with it. (one minor worry is that the hash map isn't GC'd right now, but that mirrors the behavior of we don't implement instance-level GC within a <code>Store</code> so they're O(N) the same size more-or-less). Do you think it would be useful though to build up a list of the possible performance optimizations we can think of to keep track of things? I do still agree that this is the best route for getting things implemented and to a point where we can measure performance to see what to optimize, but I'm also afraid of losing context on the myriad of possible ways to optimize things as PRs land incrementally</p>\n</blockquote>",
        "id": 474073990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727799180
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#issuecomment-2386445135\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do you think it would be useful though to build up a list of the possible performance optimizations we can think of to keep track of things?</p>\n</blockquote>\n<p>Yeah, I can write up an issue with a list of these.</p>\n</blockquote>",
        "id": 474075058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727799538
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#issuecomment-2386456719\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>:</p>\n<blockquote>\n<p>I share your concerns. It certainly is not going to be performant as-is. My most-immediate thoughts are that we would do roughly the following to speed this up:</p>\n<ul>\n<li>Expose the slab to Wasm, allowing id-to-funcref conversion to happen fully within wasm code</li>\n<li>for funcref-to-id conversion, add an LRU/associative cache to the vmctx (or maybe runtime limits) to cache the results of the libcall and allow the happy path to stay within wasm code. the slow path would still fall back to a libcall however (I do not want to implement hashing in wasm code and try to keep it in sync with the Rust hashing)</li>\n</ul>\n<p>My hope is that the above would result in good enough perf for us to not have to revisit this for quite a while.</p>\n</blockquote>",
        "id": 474075974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727799880
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#issuecomment-2386482939\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>:</p>\n<blockquote>\n<p>Two questions actually:</p>\n<ul>\n<li>On the write side I was hoping we could do something purely in JIT code where it allocates space from the slab itself and the slab slots are managed by the normal GC. Would that be possible? For example during tracing we'd record which slab slots were in use and deallocation would be to iterate over the existing slab slots (and compaction may not be too hard either).</li>\n<li>On the read side is there any way to avoid the lock? That seems required currently for our threat model, but I'm basically wondering if there's any way we can get away with just an index comparison as opposed to a full subtype check.</li>\n</ul>\n</blockquote>",
        "id": 474078470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727800694
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>.</p>",
        "id": 474081060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727801519
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#issuecomment-2386711548\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>On the read side is there any way to avoid the lock?</li>\n</ul>\n</blockquote>\n<p>I think we solve this via the approach that we have talked about previously of having a shared, lock-free arena for the supertypes arrays, so that particular subtyping checks don't need to lock anything.</p>\n<p>Will write up an issue about this soon.</p>\n</blockquote>",
        "id": 474102976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727808106
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#issuecomment-2386719711\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>:</p>\n<blockquote>\n<blockquote>\n<p>On the write side I was hoping we could do something purely in JIT code where it allocates space from the slab itself and the slab slots are managed by the normal GC. Would that be possible? For example during tracing we'd record which slab slots were in use and deallocation would be to iterate over the existing slab slots (and compaction may not be too hard either).</p>\n</blockquote>\n<p>I think the tracing part is definitely doable. Compaction should also be possible. But the tricky part will be deduplicating funcrefs in the slab (i.e. the reason the hash map is in there now). Without that deduping, I fear that it will be too easy to fill the funcref table, require a GC, and end up thrashing the collector.</p>\n</blockquote>",
        "id": 474103730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727808377
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#issuecomment-2386819275\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>On the read side is there any way to avoid the lock?</li>\n</ul>\n</blockquote>\n<p>I think we solve this via the approach that we have talked about previously of having a shared, lock-free arena for the supertypes arrays, so that particular subtyping checks don't need to lock anything.</p>\n<p>Will write up an issue about this soon.</p>\n</blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9352\">https://github.com/bytecodealliance/wasmtime/issues/9352</a></p>\n</blockquote>",
        "id": 474112724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727811170
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341#issuecomment-2386822272\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9341\">PR #9341</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Do you think it would be useful though to build up a list of the possible performance optimizations we can think of to keep track of things?</p>\n</blockquote>\n<p>Yeah, I can write up an issue with a list of these.</p>\n</blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></p>\n</blockquote>",
        "id": 474112754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727811184
    }
]