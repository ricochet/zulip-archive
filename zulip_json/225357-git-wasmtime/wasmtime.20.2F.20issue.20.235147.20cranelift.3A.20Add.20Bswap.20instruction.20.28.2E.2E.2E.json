[
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1293994651\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<blockquote>\n<p>s390x: Bswap not implemented</p>\n</blockquote>\n<p>We do have bswap instructions, and they're already implemented in the backend: for <code>$I32</code> and <code>$I64</code>, <code>bswap_reg</code> can be used; for <code>$I16</code>, a 32-bit bswap followed by a 16-bit right shift is generally the most efficient solution.</p>\n<p>See e.g. the use as part of the <code>bitrev</code> implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bitrev_bytes</span><span class=\"w\"> </span><span class=\"cp\">$I16</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lshr_imm</span><span class=\"w\"> </span><span class=\"cp\">$I32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bswap_reg</span><span class=\"w\"> </span><span class=\"cp\">$I32</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bitrev_bytes</span><span class=\"w\"> </span><span class=\"cp\">$I32</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bswap_reg</span><span class=\"w\"> </span><span class=\"cp\">$I32</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bitrev_bytes</span><span class=\"w\"> </span><span class=\"cp\">$I64</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bswap_reg</span><span class=\"w\"> </span><span class=\"cp\">$I64</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 306526459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666900360
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1294035451\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<p>This is awesome! Thanks! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>I <a href=\"https://github.com/afonso360/wasmtime/commit/0dad48bb099e567ae974c7db19d2789930871f86\">added this to our fuzzer</a> (Feel free to add that to this PR if you want!) and It's been running for over an hour on aarch64 without any issues, however on x86 it reported an interesting failure.</p>\n<p>I've tried to minimize this as much as I could but it sometimes throws weird results.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mh\">0x9903_5204_d05f_abab</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bswap</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">6076657925176032359</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>You can run this testcase from the cranelift directory with <code>cargo run -- test ./the-above.clif</code></p>\n<p>Removing the v7 or v8 makes the test pass, which is interesting... but otherwise the test segfaults on my machine, most of the time but not always.</p>\n<p>Here is the disassembly, which you can get with <code>cargo run -- compile -D --target x86_64 ./the-above.clif</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">29</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">    </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d0</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">movabs</span><span class=\"w\">  </span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x99035204d05fabab</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">e</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">cb</span><span class=\"w\">                </span><span class=\"n\">bswap</span><span class=\"w\">   </span><span class=\"n\">rbx</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">11</span>:   <span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\">                   </span><span class=\"n\">xor</span><span class=\"w\">     </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">13</span>:   <span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"w\">                   </span><span class=\"n\">xor</span><span class=\"w\">     </span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">edx</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">15</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rdi</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">r11</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">18</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">b</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">     </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">c</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;details&gt;</p>\n<p>&lt;summary&gt;Here's a more reliable example that <em>always</em> fails with a wrong result, but never segfaults.&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mh\">0x9903_5204_d05f_abab</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bswap</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">6076657925176032359</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here's the disassembly of the above function</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">    </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rdx</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">7</span>:   <span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"n\">b8</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d0</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">movabs</span><span class=\"w\">  </span><span class=\"n\">r8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x99035204d05fabab</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">11</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">c8</span><span class=\"w\">                </span><span class=\"n\">bswap</span><span class=\"w\">   </span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">14</span>:   <span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\">                   </span><span class=\"n\">xor</span><span class=\"w\">     </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">16</span>:   <span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"w\">                   </span><span class=\"n\">xor</span><span class=\"w\">     </span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">edx</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">18</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">r9</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">r8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">b</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">e</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">     </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">f</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;<br>\n</p>\n</blockquote>",
        "id": 306536031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666902973
    },
    {
        "content": "<p>11evan <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1294047858\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<p>Thanks for the feedback everyone! I'll work on addressing everything, including adding runtests and investigating the fuzzer failure</p>\n</blockquote>",
        "id": 306537972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666903801
    },
    {
        "content": "<p>11evan <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1294360996\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<p>The x86_64 issue the fuzzer found was an incorrect REX encoding - I misunderstood the manual and was using REX.R instead of REX.B when encoding bswap access to r8-r15. Fixed locally and added those cases to the runtests, they pass now.</p>\n<p>I'll have an update out sometime in the next couple days once I address the other feedback and add s380x support</p>\n</blockquote>",
        "id": 306574048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666923649
    },
    {
        "content": "<p>11evan edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1294360996\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<p>The x86_64 issue the fuzzer found was an incorrect REX encoding - I misunderstood the manual and was using REX.R instead of REX.B when encoding bswap access to r8-r15. Fixed locally and added those cases to the runtests, they pass now.</p>\n<p>I'll have an update out sometime in the next couple days once I address the other feedback and add s390x support</p>\n</blockquote>",
        "id": 306574074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666923684
    },
    {
        "content": "<p>11evan <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1295640857\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<p>PR updated:</p>\n<ul>\n<li>fixed REX encoding bug found by fuzzer</li>\n<li>added runtests</li>\n<li>added s390x support</li>\n<li>other cleanups from feedback (remove extraneous comments, exclude 8-bit integers, use x64 <code>RexFlags</code> type, add bswap to fuzzgen)</li>\n</ul>\n</blockquote>",
        "id": 306766852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667000176
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1295853326\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<p>s390x parts LGTM, thanks for adding this.   (Seeing the discussion above, if consensus is to add I128 support, you can likewise copy the 128-bit byteswap implementation via vector permute from bitrev.)</p>\n</blockquote>",
        "id": 306847200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667053815
    },
    {
        "content": "<p>11evan <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1297363435\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<p>PR Updated - legalized 128-bit bswap, added runtest for interpreter. Didn't actually implement 128-bit swap in any of the backends yet.</p>\n</blockquote>",
        "id": 307150207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667234227
    },
    {
        "content": "<p>11evan <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1297494068\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<p>Looks like the CI run failed at <code>verify-publish</code> with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Run</span><span class=\"w\"> </span><span class=\"n\">cd</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">hostedtoolcache</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">Received</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">Xferd</span><span class=\"w\">  </span><span class=\"n\">Average</span><span class=\"w\"> </span><span class=\"n\">Speed</span><span class=\"w\">   </span><span class=\"n\">Time</span><span class=\"w\">    </span><span class=\"n\">Time</span><span class=\"w\">     </span><span class=\"n\">Time</span><span class=\"w\">  </span><span class=\"n\">Current</span><span class=\"w\"></span>\n<span class=\"w\">                                 </span><span class=\"n\">Dload</span><span class=\"w\">  </span><span class=\"n\">Upload</span><span class=\"w\">   </span><span class=\"n\">Total</span><span class=\"w\">   </span><span class=\"n\">Spent</span><span class=\"w\">    </span><span class=\"n\">Left</span><span class=\"w\">  </span><span class=\"n\">Speed</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"mi\">0</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"mi\">0</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"mi\">0</span><span class=\"w\">      </span><span class=\"mi\">0</span><span class=\"w\">      </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">--</span>:<span class=\"o\">--</span>:<span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span>:<span class=\"o\">--</span>:<span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span>:<span class=\"o\">--</span>:<span class=\"o\">--</span><span class=\"w\">     </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">.]</span><span class=\"w\"></span>\n<span class=\"mi\">100</span><span class=\"w\">   </span><span class=\"mi\">212</span><span class=\"w\">  </span><span class=\"mi\">100</span><span class=\"w\">   </span><span class=\"mi\">212</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"mi\">40</span><span class=\"w\">      </span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mi\">0</span>:<span class=\"mi\">00</span>:<span class=\"mi\">05</span><span class=\"w\">  </span><span class=\"mi\">0</span>:<span class=\"mi\">00</span>:<span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"o\">--</span>:<span class=\"o\">--</span>:<span class=\"o\">--</span><span class=\"w\">    </span><span class=\"mi\">54</span><span class=\"w\"></span>\n\n<span class=\"n\">gzip</span>: <span class=\"nc\">stdin</span>: <span class=\"nc\">not</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">gzip</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"></span>\n<span class=\"n\">tar</span>: <span class=\"nc\">Child</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">tar</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">recoverable</span>: <span class=\"nc\">exiting</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">Process</span><span class=\"w\"> </span><span class=\"n\">completed</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mf\">2.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like an issue with the tooling rather than an issue with my commit - what should I do here, does it just need a retry?</p>\n</blockquote>",
        "id": 307172696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667240656
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147#issuecomment-1297570953\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">issue #5147</a>:</p>\n<blockquote>\n<p>Apparently it did just need a retry. Merged now! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n</blockquote>",
        "id": 307185530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667244650
    }
]