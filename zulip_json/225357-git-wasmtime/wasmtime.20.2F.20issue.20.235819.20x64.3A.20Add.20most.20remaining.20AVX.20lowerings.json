[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819#issuecomment-1435316317\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819\">issue #5819</a>:</p>\n<blockquote>\n<p>Ok I think the two new commits should address the <code>produces_const</code> expansion in addition to the <code>Gpr</code>-vs-<code>Xmm</code> types. There's still more instructions that do conditional register allocation but I can try to tackle those separately.</p>\n</blockquote>",
        "id": 328569710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676670693
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819#issuecomment-1435368141\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819\">issue #5819</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 328577612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676674267
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819#issuecomment-1435386850\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819\">issue #5819</a>:</p>\n<blockquote>\n<p>Local fuzzing has found an issue so taking this out of the merge queue.</p>\n</blockquote>",
        "id": 328580878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676675890
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819#issuecomment-1435393287\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819\">issue #5819</a>:</p>\n<blockquote>\n<p>Turned out to be a benign mistake where I forgot to call <code>add_trap</code> for VEX-encoded instructions with memory operands. Before merging this though I'm going to let the fuzzer run overnight.</p>\n<p>I've intentionally introduced an encoding bug where <code>vsprad</code> is encoded as <code>vspraw</code> and I'm hoping to see the <code>differential</code> fuzzer find this bug eventually with differential execution against v8.</p>\n</blockquote>",
        "id": 328582026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676676612
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819#issuecomment-1435487767\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5819\">issue #5819</a>:</p>\n<blockquote>\n<p>Well score one for fuzzing. It took a few hours but the minimal test case was </p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (param v128 i32) (result v128)))\n  (func (;0;) (type 0) (param v128 i32) (result v128)\n    local.get 0\n    local.get 1\n    i32x4.shr_s\n  )\n  (export \"test\" (func 0))\n)\n</code></pre></div>\n<p>where the differential difference was between wasmtime with avx and wasmtime without avx. That's exactly the bug I wanted the fuzzer to find, so yay confidence that fuzzing can find real bugs! I'll still let it run overnight to make sure nothing else crops up.</p>\n</blockquote>",
        "id": 328609893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676697410
    }
]