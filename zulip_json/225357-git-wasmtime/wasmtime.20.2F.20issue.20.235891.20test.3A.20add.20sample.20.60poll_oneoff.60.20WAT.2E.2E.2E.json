[
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891#issuecomment-1447258643\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891\">issue #5891</a>:</p>\n<blockquote>\n<p>I expect this test to fail on the first CI pass since that is what I am seeing locally. Some logs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">RUST_LOG</span><span class=\"o\">=</span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">all</span><span class=\"o\">/</span><span class=\"n\">cli_tests</span><span class=\"o\">/</span><span class=\"n\">poll_oneoff</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">wasi_snapshot_preview1</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">wiggle</span><span class=\"w\"> </span><span class=\"n\">abi</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"o\">=</span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s\">\"poll_oneoff\"</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">tracing</span>::<span class=\"n\">span</span>::<span class=\"n\">active</span><span class=\"w\">                                     </span><span class=\"o\">&gt;</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wiggle</span><span class=\"w\"> </span><span class=\"n\">abi</span><span class=\"p\">;</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">wasi_snapshot_preview1</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">in_</span><span class=\"o\">=*</span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"mh\">0x64</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">=*</span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"mh\">0xc8</span><span class=\"w\"> </span><span class=\"n\">nsubscriptions</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">wasi_snapshot_preview1</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"o\">=</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span>: <span class=\"nc\">Inval</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">tracing</span>::<span class=\"n\">span</span>::<span class=\"n\">active</span><span class=\"w\">                                     </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">wiggle</span><span class=\"w\"> </span><span class=\"n\">abi</span><span class=\"p\">;</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">tracing</span>::<span class=\"n\">span</span><span class=\"w\">                                             </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">wiggle</span><span class=\"w\"> </span><span class=\"n\">abi</span><span class=\"p\">;</span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">traphandlers</span>::<span class=\"n\">backtrace</span><span class=\"w\">                 </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">======</span><span class=\"w\"> </span><span class=\"n\">Capturing</span><span class=\"w\"> </span><span class=\"n\">Backtrace</span><span class=\"w\"> </span><span class=\"o\">======</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>It seems clear that Wasmtime rejects this call as invalid, but it is difficult for me to figure what exactly is invalid about the call.</p>\n</blockquote>",
        "id": 338468977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677539533
    },
    {
        "content": "<p>yamt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891#issuecomment-1447854503\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891\">issue #5891</a>:</p>\n<blockquote>\n<blockquote>\n<p>Presumably the call works in other runtimes (i.e., WAMR) since it was upstreamed by a WAMR contributor. </p>\n</blockquote>\n<p>i'm sure it works for wamr and toywasm.</p>\n</blockquote>",
        "id": 338537464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677576803
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891#issuecomment-1448333393\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891\">issue #5891</a>:</p>\n<blockquote>\n<p>There are two issues here.</p>\n<p>One is that the <a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/witx/wasi_snapshot_preview1.witx#L457\">return type of <code>poll_oneoff</code></a> has multiple results, which Wasmtime interprets to mean that the core-wasm function should return the errno as its return value and return the number of events via an out parameter. This what <a href=\"https://github.com/WebAssembly/wasi-libc/blob/main/libc-bottom-half/headers/public/wasi/api.h#L1980\">wasi-libc expects</a> too. However, the test expects the number of events will be returned as the return value. I recognize that there's poor documentation. I propose Wasmtime's and wasi-libc's interpretation is preferable here, because otherwise there seems to be no way for <code>poll_oneoff</code> to indicate failure. It's been <a href=\"https://github.com/WebAssembly/wasi-poll/issues/9\">proposed elsewhere</a> that <code>poll_oneoff</code> ideally shouldn't fail itself, and should instead report failures on individual file descriptors as events, and I agree in principle, however in the Preview1 API, it's still expected that <code>poll_oneoff</code> as a whole can fail in some situations, such as <a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/witx/wasi_snapshot_preview1.witx#L448\">when <code>nsubscriptions</code> is 0</a>. If people agree, I'll volunteer to submit a PR to the WASI repo documenting that functions with multiple return values in witx return their first value as a return value and any other values via pointer arguments.</p>\n<p>The other is that the test passes the address <code>100</code> as the subscriptions parameter, however the alignment of <code>__wasi_subscription_t</code> on wasm32-wasi is 8, so the address is not aligned, and Wasmtime is checking the alignment.</p>\n<p>What should we do for misaligned addresses? I can see it both ways. On one hand, core Wasm load/store support misaligned addresses, with the caveat that they may be slow, so perhaps WASI calls should allow misaligned addresses for consistency with that. On the other, most producers do provide alignment, as evidenced by the fact that this issue hasn't been noticed until now, and requiring aligned addresses might help avoid subtle and bugs in host implementations.</p>\n</blockquote>",
        "id": 338609233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677596350
    },
    {
        "content": "<p>yamt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891#issuecomment-1448358197\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891\">issue #5891</a>:</p>\n<blockquote>\n<blockquote>\n<p>There are two issues here.</p>\n<p>One is that the <a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/witx/wasi_snapshot_preview1.witx#L457\">return type of <code>poll_oneoff</code></a> has multiple results, which Wasmtime interprets to mean that the core-wasm function should return the errno as its return value and return the number of events via an out parameter.</p>\n</blockquote>\n<p>the original code in wasi-threads doesn't have this issue.</p>\n<blockquote>\n<p>The other is that the test passes the address <code>100</code> as the subscriptions parameter, however the alignment of <code>__wasi_subscription_t</code> on wasm32-wasi is 8, so the address is not aligned, and Wasmtime is checking the alignment.</p>\n</blockquote>\n<p>good point. i will fix it in wasi-threads tests.</p>\n</blockquote>",
        "id": 338612507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677597124
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891#issuecomment-1448532615\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891\">issue #5891</a>:</p>\n<blockquote>\n<p>I've now submitted <a href=\"https://github.com/WebAssembly/WASI/pull/523\">https://github.com/WebAssembly/WASI/pull/523</a> to document how <code>expected</code> return types work in witx, as well as proposing a behavior for functions on misaligned pointers.</p>\n</blockquote>",
        "id": 338641148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677603718
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891#issuecomment-1449046907\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891\">issue #5891</a>:</p>\n<blockquote>\n<blockquote>\n<p>One is that the <a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/witx/wasi_snapshot_preview1.witx#L457\">return type of poll_oneoff</a> has multiple results, which Wasmtime interprets to mean that the core-wasm function should return the errno as its return value and return the number of events via an out parameter</p>\n</blockquote>\n<p>Sorry, this is my mistake for lifting the snippet from an entirely different context and tacking on some not-thought-through error checking. I can fix this if we want to keep this test. Do we want to keep this test (cc: @alexcrichton, @pchickey)? If you all want to include this, I will gladly fix this up. Otherwise I'll close this because the original issue &mdash; alignment &mdash; is now fixed in the testsuite.</p>\n<p>Thanks @sunfishcode and @yamt for looking into this!</p>\n</blockquote>",
        "id": 338707786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677624622
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891#issuecomment-1449046907\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5891\">issue #5891</a>:</p>\n<blockquote>\n<blockquote>\n<p>One is that the <a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/witx/wasi_snapshot_preview1.witx#L457\">return type of poll_oneoff</a> has multiple results, which Wasmtime interprets to mean that the core-wasm function should return the errno as its return value and return the number of events via an out parameter</p>\n</blockquote>\n<p>Sorry, this is my mistake for lifting the snippet from an entirely different context and tacking on some not-thought-through error checking. I can fix this if we want to keep this test. Do we want to keep this test (cc: @alexcrichton, @pchickey)? If you all want to include this, I will gladly fix this up (along with the alignment). Otherwise I'll close this because the original issue &mdash; alignment &mdash; is now fixed in the testsuite.</p>\n<p>Thanks @sunfishcode and @yamt for looking into this!</p>\n</blockquote>",
        "id": 338707855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677624651
    }
]