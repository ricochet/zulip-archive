[
    {
        "content": "<p>jeffcharles opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7443\">PR #7443</a> from <code>jeffcharles:winch-defined-locals-range-fix</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;<br>\nI noticed a differential fuzzing failure in Winch when running the following module:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i32.eqz</span>\n    <span class=\"k\">if</span> <span class=\"c1\">;; label = @1</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i32.sub</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.xor</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">0</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mf\">1000</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"</span><span class=\"se\">\\00\\01\\00</span><span class=\"s2\">\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"\"</span> <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>I was able to narrow a repro case down to:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"t\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>This strongly hinted that there was a potential issue with locals when there is a param present.</p>\n<p>In the area of code I have changed, <code>defined_locals.stack_size</code> may be an equal or lower value than <code>defined_locals_start</code> since <code>defined_locals_start</code> is set based on the number and type of parameters and <code>defined_locals.stack_size</code> is set based on the number and type of locals but not parameters. The range should be <code>defined_locals_start</code> to <code>defined_locals_start</code> plus <code>defined_locals.stack_size</code>.</p>\n</blockquote>",
        "id": 399752675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698853999
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7443\">PR #7443</a>.</p>",
        "id": 399752676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698854000
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7443\">PR #7443</a>.</p>",
        "id": 399752677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698854000
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7443#pullrequestreview-1708571769\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 399757955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698855669
    },
    {
        "content": "<p>saulecabrera has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7443\">PR #7443</a>.</p>",
        "id": 399757978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698855678
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7443\">PR #7443</a>.</p>",
        "id": 399765307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698858329
    }
]