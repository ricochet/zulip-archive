[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845\">Issue #1845</a>:</p>\n<blockquote>\n<p>In the .NET repo, there's a <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/blob/a580dfe6cfb15f7c265b21ba662e04ebaacf3101/tests/FunctionThunkingTests.cs#L23\">test</a> that defines a host function that throws a .NET exception.  The .NET API turns the exception into a C API <code>wasm_trap_t</code>.</p>\n<p>This results in the following trap message on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><code>Test error message for wasmtime dotnet unit tests.\nwasm backtrace:\n  0:   0xad - &lt;unknown&gt;!do_throw\n</code></pre></div>\n\n\n<p>However, on Linux and macOS, the Wasm frame is missing:</p>\n<div class=\"codehilite\"><pre><span></span><code>Test error message for wasmtime dotnet unit tests.\n</code></pre></div>\n\n\n<p>We should be able to properly capture the backtrace across all platforms and translate the wasm frames.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/16\">bytecodealliance/wasmtime-dotnet#16</a> for an example of the failure (ignore the <code>general I/O error encountered: Invalid argument (os error 22)</code> failures as that's fixed by a Wasmtime PR under review).</p>\n<p>cc @alexcrichton @yurydelendik</p>\n</blockquote>",
        "id": 200149625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591646933
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845\">Issue #1845</a>:</p>\n<blockquote>\n<p>In the .NET repo, there's a <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/blob/a580dfe6cfb15f7c265b21ba662e04ebaacf3101/tests/FunctionThunkingTests.cs#L23\">test</a> that defines a host function that throws a .NET exception.  The .NET API turns the exception into a C API <code>wasm_trap_t</code>.</p>\n<p>This results in the following trap message on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><code>Test error message for wasmtime dotnet unit tests.\nwasm backtrace:\n  0:   0xad - &lt;unknown&gt;!do_throw\n</code></pre></div>\n\n\n<p>However, on Linux and macOS, the Wasm frame is missing:</p>\n<div class=\"codehilite\"><pre><span></span><code>Test error message for wasmtime dotnet unit tests.\n</code></pre></div>\n\n\n<p>We should be able to properly capture the backtrace across all platforms and translate the wasm frames.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/16\">bytecodealliance/wasmtime-dotnet#16</a> for an example of the failure (ignore the <code>general I/O error encountered: Invalid argument (os error 22)</code> failures as that's fixed by a Wasmtime PR under review).</p>\n<p>cc @alexcrichton @yurydelendik</p>\n</blockquote>",
        "id": 200149626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591646933
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845#issuecomment-640859530\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845\">Issue #1845</a>:</p>\n<blockquote>\n<p>Note: I haven't investigated this at all, just noticed the discrepancy and filed the issue. </p>\n</blockquote>",
        "id": 200149759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591647001
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845\">Issue #1845</a>:</p>\n<blockquote>\n<p>In the .NET repo, there's a <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/blob/a580dfe6cfb15f7c265b21ba662e04ebaacf3101/tests/FunctionThunkingTests.cs#L23\">test</a> (see corresponding <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/blob/a580dfe6cfb15f7c265b21ba662e04ebaacf3101/tests/Modules/FunctionThunking.wat\">.wat file here</a>) that defines a host function that throws a .NET exception.  The .NET API turns the exception into a C API <code>wasm_trap_t</code>.</p>\n<p>This results in the following trap message on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><code>Test error message for wasmtime dotnet unit tests.\nwasm backtrace:\n  0:   0xad - &lt;unknown&gt;!do_throw\n</code></pre></div>\n\n\n<p>However, on Linux and macOS, the Wasm frame is missing:</p>\n<div class=\"codehilite\"><pre><span></span><code>Test error message for wasmtime dotnet unit tests.\n</code></pre></div>\n\n\n<p>We should be able to properly capture the backtrace across all platforms and translate the wasm frames.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/16\">bytecodealliance/wasmtime-dotnet#16</a> for an example of the failure (ignore the <code>general I/O error encountered: Invalid argument (os error 22)</code> failures as that's fixed by a Wasmtime PR under review).</p>\n<p>cc @alexcrichton @yurydelendik</p>\n</blockquote>",
        "id": 200150003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591647110
    },
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845\">Issue #1845</a>:</p>\n<blockquote>\n<p>In the .NET repo, there's a <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/blob/a580dfe6cfb15f7c265b21ba662e04ebaacf3101/tests/FunctionThunkingTests.cs#L23\">test</a> (see corresponding <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/blob/a580dfe6cfb15f7c265b21ba662e04ebaacf3101/tests/Modules/FunctionThunking.wat\">.wat file here</a>) that defines a host function that throws a .NET exception.  The .NET API turns the exception into a C API <code>wasm_trap_t</code>.</p>\n<p>This results in the following trap message on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><code>Test error message for wasmtime dotnet unit tests.\nwasm backtrace:\n  0:   0xad - &lt;unknown&gt;!do_throw\n</code></pre></div>\n\n\n<p>However, on Linux and macOS, the Wasm frame is missing:</p>\n<div class=\"codehilite\"><pre><span></span><code>Test error message for wasmtime dotnet unit tests.\n</code></pre></div>\n\n\n<p>We should be able to properly capture the backtrace across all platforms and translate the wasm frames.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/16\">bytecodealliance/wasmtime-dotnet#16</a> for an example of the failure (ignore the <code>general I/O error encountered: Invalid argument (os error 22)</code> failures as that's fixed by a Wasmtime PR under review).</p>\n<p>cc @alexcrichton @yurydelendik</p>\n</blockquote>",
        "id": 200150130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591647160
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845#issuecomment-641314784\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845\">Issue #1845</a>:</p>\n<blockquote>\n<p>Hm so my guess here is that the <code>backtrace</code> crate probably couldn't backtrace through .NET frames. Can you try confirming that with <code>println!(\"{:?}\", Backtrace::new())</code> inside of <code>wasm_trap_new</code>?</p>\n</blockquote>",
        "id": 200230997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591711071
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845#issuecomment-641660176\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845\">Issue #1845</a>:</p>\n<blockquote>\n<p>That would make sense.  Unfortunately the CLR <a href=\"https://github.com/dotnet/runtime/issues/13068#issuecomment-511714811\">doesn't register JIT frames with libunwind</a>, so I think we're probably out of luck here.</p>\n<p>An incomplete fix would be to replace an empty trace for a trap returned from invoking a  <code>wasm_func_callback_t</code> in <code>func.rs</code>, which would at least provide Wasm frames until the next CLR frame is encountered on the stack.</p>\n<p>This quick hack does produce the expected result since there are no other .NET frames between any of the Wasm frames for this particular test case:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">trap</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">.</span><span class=\"n\">trap</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">.</span><span class=\"n\">trace</span><span class=\"p\">().</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">trap</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">trap</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 200310000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591751340
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845#issuecomment-642054066\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1845\">Issue #1845</a>:</p>\n<blockquote>\n<p>That actually seems somewhat reasonable to me, it may be the case that libbacktrace can't backtrace through a number of native runtimes so having this may not be the worst thing in the world. Especially since we primarily want wasm stack frames the Rust code is guaranteed to see the same wasm frames that the CLR <em>would</em> have seen otherwise.</p>\n</blockquote>",
        "id": 200424814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591799988
    }
]