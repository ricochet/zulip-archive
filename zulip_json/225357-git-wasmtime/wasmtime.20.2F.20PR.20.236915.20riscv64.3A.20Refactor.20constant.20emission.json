[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915\">PR #6915</a> from <code>afonso360:riscv-fix-imm</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR fixes the RISC-V issues that #6850 exposed. It does a bit of a refactor in our constant emission infrastructure, and also moves some of it into ISLE. </p>\n<p>The issues that that PR exposed are that we sometimes would match or not match a particular constant generation strategy based on the upper bits that shouldn't really matter. The main fix is to sign extend constants before trying to match them. </p>\n<p>Moving the constant emission into ISLE also means that we have a bunch of neutral regalloc changes. There are a few cases where we have actual changes in the instructions emitted.</p>\n<p>This PR contains a lot of stuff, and I would recommend reviewing it commit by commit.</p>\n</blockquote>",
        "id": 387442606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693068903
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915\">PR #6915</a>.</p>",
        "id": 387442611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693068904
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915\">PR #6915</a>.</p>",
        "id": 387442612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693068904
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#pullrequestreview-1598871209\">PR review</a>:</p>\n<blockquote>\n<p>This looks great, for the most part! I feel much better about this infrastructure with these changes.</p>\n<p>I think <code>Imm20::maybe_from_u64</code> is incorrect and also unused, although I'd suggest using it from <code>generate_imm</code> so I think it's worth fixing it. However if you want to just delete it in this PR and maybe add a corrected version in a later PR, that's fine with me.</p>\n</blockquote>",
        "id": 387754371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693255786
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#pullrequestreview-1598871209\">PR review</a>:</p>\n<blockquote>\n<p>This looks great, for the most part! I feel much better about this infrastructure with these changes.</p>\n<p>I think <code>Imm20::maybe_from_u64</code> is incorrect and also unused, although I'd suggest using it from <code>generate_imm</code> so I think it's worth fixing it. However if you want to just delete it in this PR and maybe add a corrected version in a later PR, that's fine with me.</p>\n</blockquote>",
        "id": 387754372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693255786
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#discussion_r1307808287\">PR review comment</a>:</p>\n<blockquote>\n<p>It looks like this can only return either <code>None</code> or <code>Some(Imm20::from_bits(0))</code>. Perhaps it was supposed to say <code>(bits &amp; !0xF_FFFF) != 0</code>, with a <code>!</code> in front of the <code>0x</code>? Alternatively, <code>(bits &gt;&gt; 20) != 0</code> should work, although I kind of like the symmetry with <code>Imm20::from_bits</code>.</p>\n<p>It looks like <code>u64_to_imm20</code> is the only user of this method and is not used anywhere, which would explain this slipping through unnoticed.</p>\n</blockquote>",
        "id": 387754373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693255787
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#discussion_r1307848003\">PR review comment</a>:</p>\n<blockquote>\n<p>I appreciate that this is a pretty minimal change, but looking at the original function I kind of really want to rewrite the whole thing. Something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// sign-extend the low 12 bits: this is the value we can represent with an `addi` immediate operand</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SIGN_BITS</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imm12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">SIGN_BITS</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">SIGN_BITS</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// compute the inverse of `addi` to see what part we need to use `lui` for;</span>\n<span class=\"w\">    </span><span class=\"c1\">// note that by construction the low 12 bits are always 0 so it's safe to shift them out</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imm20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">wrapping_sub</span><span class=\"p\">(</span><span class=\"n\">imm12</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// check that the imm20 part fits; note that by construction the imm12 always fits</span>\n<span class=\"w\">    </span><span class=\"n\">Imm20</span>::<span class=\"n\">maybe_from_u64</span><span class=\"p\">(</span><span class=\"n\">imm20</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">imm20</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Imm12</span>::<span class=\"n\">from_bits</span><span class=\"p\">(</span><span class=\"n\">imm12</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>I think that should correctly replace everything, including the check for <code>imm_min</code>/<code>imm_max</code> and the check for whether an <code>imm12</code> is enough.</p>\n</blockquote>",
        "id": 387754374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693255787
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#discussion_r1307793932\">PR review comment</a>:</p>\n<blockquote>\n<p>I can't see from the diff of the \"Sign extend replicated_imm5 immediates\" commit why these rules needed a higher priority; I don't see another rule at priority 14 that these rules could conflict with.</p>\n</blockquote>",
        "id": 387754375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693255787
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#discussion_r1307790019\">PR review comment</a>:</p>\n<blockquote>\n<p>I think your <code>maybe_from_i64</code> is a simpler way to express exactly the same result that the existing <code>maybe_from_u64</code> would produce given the appropriate type conversion between <code>u64</code> and <code>i64</code>. Would you mind making <code>maybe_from_u64</code> just cast to <code>i64</code> and call the new function? Alternatively, is <code>maybe_from_u64</code> still actually used after the rest of these changes, or can it be deleted?</p>\n</blockquote>",
        "id": 387754377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693255787
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#pullrequestreview-1599783230\">PR review</a>.</p>",
        "id": 387830292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693296969
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#discussion_r1308395141\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't know why that overlap showed up either. But it does show up when I switch the definition of <code>replicated_imm5</code>. The overlaps that ISLE reports are:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">139</span>:<span class=\"mi\">7</span>: <span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">replicated_imm5</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">204</span>:<span class=\"mi\">7</span>: <span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uextend</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"n\">uext_ty</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">159</span>:<span class=\"mi\">7</span>: <span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sextend</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"n\">sext_ty</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">182</span>:<span class=\"mi\">7</span>: <span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sextend</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"n\">sext_ty</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">227</span>:<span class=\"mi\">7</span>: <span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uextend</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"n\">uext_ty</span><span class=\"p\">)))</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 387830293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693296969
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#pullrequestreview-1600207151\">PR review</a>.</p>",
        "id": 387864262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693309233
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#discussion_r1308686994\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I was trying to avoid changing that function since it ends up being slightly complicated to write. And that version is a lot cleaner.</p>\n<p>I think it might be failing in a couple edge cases since some tests stop working with it, and I don't really feel like looking into it now, but I'm going to file an issue to follow up on it later.</p>\n</blockquote>",
        "id": 387864263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693309233
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915\">PR #6915</a>.</p>",
        "id": 387864296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693309251
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#discussion_r1308686994\">PR review comment</a>.</p>",
        "id": 387868206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693310602
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#pullrequestreview-1600721909\">PR review</a>.</p>",
        "id": 387906419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693322848
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915#discussion_r1309009457\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, now I understand. Previously <code>replicated_imm5</code> matched <code>iconst</code> and ISLE could tell that's a different enum variant than <code>splat</code>. Now it matches an external constructor, which ISLE has to assume _could_ match <code>splat</code>, even though we know it doesn't. I don't see a reasonable way to rewrite that to give ISLE more information, so changing the priorities like you've done here is the only option.</p>\n</blockquote>",
        "id": 387906421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693322849
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6915\">PR #6915</a>.</p>",
        "id": 387946897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693336351
    }
]