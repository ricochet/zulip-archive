[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8137\">PR #8137</a> from <code>jameysharp:reorder-gc</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>We have some flexibility in what order we do steps in the GC write barrier for <code>table.set</code> on an <code>externref</code> table. We must:</p>\n<ul>\n<li>bounds-check the table index before incrementing the new refcount</li>\n<li>load the old ref before storing the new ref</li>\n<li>increment the new refcount before decrementing the old refcount</li>\n<li>store the new ref before calling drop_externref, which might GC</li>\n</ul>\n<p>But that leaves several valid orders for these steps.</p>\n<p>This commit moves the load and store as early as possible, so they're right after bounds-checking.</p>\n<p>I believe this should have no effect on the correctness of this write barrier. It enables an upcoming change I'm working on to let table bounds-checks trap in the memory access instruction, rather than during address computation. The invariants here are tricky though so I wanted to get this change reviewed in isolation first.</p>\n<p>For my purposes, I only need to move the load earlier; the store could stay where it was, right after incrementing the new refcount. However, moving both memory accesses shortens the range where the table entry address needs to be in a register, without lengthening the live range of any other value. Moving the load does lengthen the live range of the old ref, but as long as we move the store with it, register pressure should be unchanged.</p>\n<p>Moving the store before the corresponding refcount increment should be safe for two reasons. One is that there's no opportunity for GC to happen in between. The other is that the new value should already have a non-zero refcount.</p>\n</blockquote>",
        "id": 426613970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710444528
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8137\">PR #8137</a>.</p>",
        "id": 426613972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710444528
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8137\">PR #8137</a>.</p>",
        "id": 426613973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710444528
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8137#pullrequestreview-1937597523\">PR review</a>.</p>",
        "id": 426617095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710445732
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8137\">PR #8137</a>.</p>",
        "id": 426621210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710447427
    }
]