[
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462\">PR #7462</a> from <code>saulecabrera:winch-add-spec-tests-for-locals</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change is a follow up to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7443\">https://github.com/bytecodealliance/wasmtime/pull/7443</a>; after it landed I realized that Winch doesn't include spec tests for local.get and loca.set.</p>\n<p>Those tests uncovered a bug on the handling of the constant pool: given Winch's singlepass nature, there's very little room know all the constants ahead of time and to register them all at once at emission time; instead they are emitted when they are needed by an instruction. Even though Cranelift's machinery is capable of deuplicated constants in the pool, <code>register_constant</code> assumes and checks that each constat should only be pushed once. In Winch's case, since we emit as we go, we need to carefully check if the constant is one was not emitted before, and if that's the case, register it. Else we break the invariant that each constant should only be registered once.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 399993382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698947104
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462\">PR #7462</a>.</p>",
        "id": 399993383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698947104
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462\">PR #7462</a>.</p>",
        "id": 399993384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698947104
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462\">PR #7462</a>.</p>",
        "id": 399993385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698947105
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462#pullrequestreview-1710935452\">PR review</a>.</p>",
        "id": 399993637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698947187
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462#discussion_r1380578547\">PR review comment</a>:</p>\n<blockquote>\n<p>I decided to add this function here, but if there's a reason why this shouldn't be done, I could find a different mechanism guarantee the invariant that I'm after. </p>\n</blockquote>",
        "id": 399993638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698947187
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462#discussion_r1380578547\">PR review comment</a>.</p>",
        "id": 400032458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698967023
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462\">PR #7462</a>:</p>\n<blockquote>\n<p>This change is a follow up to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7443\">https://github.com/bytecodealliance/wasmtime/pull/7443</a>; after it landed I realized that Winch doesn't include spec tests for local.get and local.set.</p>\n<p>Those tests uncovered a bug on the handling of the constant pool: given Winch's singlepass nature, there's very little room know all the constants ahead of time and to register them all at once at emission time; instead they are emitted when they are needed by an instruction. Even though Cranelift's machinery is capable of deuplicated constants in the pool, <code>register_constant</code> assumes and checks that each constat should only be pushed once. In Winch's case, since we emit as we go, we need to carefully check if the constant is one was not emitted before, and if that's the case, register it. Else we break the invariant that each constant should only be registered once.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 400038562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698971275
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462#pullrequestreview-1713100774\">PR review</a>.</p>",
        "id": 400166527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699028513
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462#discussion_r1381944435\">PR review comment</a>:</p>\n<blockquote>\n<p>Seems like a reasonable method to me!</p>\n</blockquote>",
        "id": 400166529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699028513
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462#pullrequestreview-1713101555\">PR review</a>.</p>",
        "id": 400166634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699028540
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7462\">PR #7462</a>.</p>",
        "id": 400178031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699032522
    }
]