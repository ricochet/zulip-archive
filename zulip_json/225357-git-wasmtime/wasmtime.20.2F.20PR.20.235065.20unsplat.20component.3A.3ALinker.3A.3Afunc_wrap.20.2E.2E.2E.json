[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5065\">PR #5065</a> from <code>pch/unsplat_component_func_wrap</code> to <code>main</code>:</p>\n<blockquote>\n<p>retire the IntoComponentFunc trait, directly accept a closure in the type signature of Linker::func_wrap.</p>\n<p>This means \"unsplatting\" the arguments of the closure:</p>\n<ul>\n<li>instead of being able to write <code>func_wrap(\"\", || { ... })</code> for a function body which requires neither the StoreContextMut nor any arguments, you have to write <code>func_wrap(\"\", |_, _:()| {...})</code></li>\n<li>Instead of being able to accept a sequence of arguments, you need to take a tuple of arguments, including our awkward friend the 1-tuple, e.g.: <code>func_wrap(\"\", |_, (arg,): (u32,)| {...})</code>, <code>func_wrap(\"\", |_, (arg1, arg2): (u32, u64)| {...})</code></li>\n</ul>\n<p>We find that this makes the Linker::func_wrap type signature much easier to read. The IntoComponentFunc abstraction was adding a lot of weight to \"splat\" a set of arguments from a tuple of types into individual arguments to the closure. Additionally, making the StoreContextMut argument optional, or the Result&lt;return&gt; optional, wasn't required.</p>\n<p>This interface does end up being a little bit awkward for human authors, but we feel this is outweighed by making the type signature of func_wrap much nicer to read, and also mitigated by the fact that most reasonable people will be using wit-bindgen to write these func_wraps on their behalf.</p>\n</blockquote>",
        "id": 304576440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666047822
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5065\">PR #5065</a>.</p>",
        "id": 304576530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666047851
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5065\">PR #5065</a> from <code>pch/unsplat_component_func_wrap</code> to <code>main</code>:</p>\n<blockquote>\n<p>retire the <code>IntoComponentFunc</code> trait, directly accept a closure in the type signature of <code>component::Linker::func_wrap</code>.</p>\n<p>This means \"unsplatting\" the arguments of the closure:</p>\n<ul>\n<li>instead of being able to write <code>func_wrap(\"\", || { ... })</code> for a function body which requires neither the StoreContextMut nor any arguments, you have to write <code>func_wrap(\"\", |_, _:()| {...})</code></li>\n<li>Instead of being able to accept a sequence of arguments, you need to take a tuple of arguments, including our awkward friend the 1-tuple, e.g.: <code>func_wrap(\"\", |_, (arg,): (u32,)| {...})</code>, <code>func_wrap(\"\", |_, (arg1, arg2): (u32, u64)| {...})</code></li>\n</ul>\n<p>We find that this makes the Linker::func_wrap type signature much easier to read. The IntoComponentFunc abstraction was adding a lot of weight to \"splat\" a set of arguments from a tuple of types into individual arguments to the closure. Additionally, making the StoreContextMut argument optional, or the Result&lt;return&gt; optional, wasn't required.</p>\n<p>This interface does end up being a little bit awkward for human authors, but we feel this is outweighed by making the type signature of func_wrap much nicer to read, and also mitigated by the fact that most reasonable people will be using wit-bindgen to write these func_wraps on their behalf.</p>\n</blockquote>",
        "id": 304576574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666047872
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5065\">PR #5065</a> from <code>pch/unsplat_component_func_wrap</code> to <code>main</code>.</p>",
        "id": 304582294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666050537
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5065#pullrequestreview-1145932019\">PR review</a>.</p>",
        "id": 304690030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666103050
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5065\">PR #5065</a>.</p>",
        "id": 304690058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666103056
    }
]