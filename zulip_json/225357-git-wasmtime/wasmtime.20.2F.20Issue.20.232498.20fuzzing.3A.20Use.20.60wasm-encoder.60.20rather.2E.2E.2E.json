[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2497#discussion_r541118846\">https://github.com/bytecodealliance/wasmtime/pull/2497#discussion_r541118846</a> we added support for generating nested modules, and we generate these modules by concatenating strings of WAT and then passing it to <code>Module::new</code> which internally checks for WAT strings and assembles them into Wasm bytes if necessary.</p>\n<p>We can make this more efficient, improving the number of test cases we fuzz in a given amount of time, by generating Wasm bytes directly via the <a href=\"https://docs.rs/wasm-encoder/0.2.0/wasm_encoder/\"><code>wasm-encoder</code></a> crate, rather than generating a WAT string. The <code>wasm-encoder</code> crate has builder methods that should make it pretty straightforward to translate the <code>WatGenerator</code> into a <code>WasmGenerator</code>.</p>\n<p>If you want to work on this issue, leave a comment, and let me know whatever questions you have!</p>\n<p>Info for getting up and running with contributing: <a href=\"https://docs.wasmtime.dev/contributing.html\">https://docs.wasmtime.dev/contributing.html</a></p>\n</blockquote>",
        "id": 219638605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607709225
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2497#discussion_r541118846\">https://github.com/bytecodealliance/wasmtime/pull/2497#discussion_r541118846</a> we added support for generating nested modules, and we generate these modules by concatenating strings of WAT and then passing it to <code>Module::new</code> which internally checks for WAT strings and assembles them into Wasm bytes if necessary.</p>\n<p>We can make this more efficient, improving the number of test cases we fuzz in a given amount of time, by generating Wasm bytes directly via the <a href=\"https://docs.rs/wasm-encoder/0.2.0/wasm_encoder/\"><code>wasm-encoder</code></a> crate, rather than generating a WAT string. The <code>wasm-encoder</code> crate has builder methods that should make it pretty straightforward to translate the <code>WatGenerator</code> into a <code>WasmGenerator</code>.</p>\n<p>If you want to work on this issue, leave a comment, and let me know whatever questions you have!</p>\n<p>Info for getting up and running with contributing: <a href=\"https://docs.wasmtime.dev/contributing.html\">https://docs.wasmtime.dev/contributing.html</a></p>\n</blockquote>",
        "id": 219638606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607709225
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2497#discussion_r541118846\">https://github.com/bytecodealliance/wasmtime/pull/2497#discussion_r541118846</a> we added support for generating nested modules, and we generate these modules by concatenating strings of WAT and then passing it to <code>Module::new</code> which internally checks for WAT strings and assembles them into Wasm bytes if necessary.</p>\n<p>We can make this more efficient, improving the number of test cases we fuzz in a given amount of time, by generating Wasm bytes directly via the <a href=\"https://docs.rs/wasm-encoder/0.2.0/wasm_encoder/\"><code>wasm-encoder</code></a> crate, rather than generating a WAT string. The <code>wasm-encoder</code> crate has builder methods that should make it pretty straightforward to translate the <code>WatGenerator</code> into a <code>WasmGenerator</code>.</p>\n<p>If you want to work on this issue, leave a comment, and let me know whatever questions you have!</p>\n<p>Info for getting up and running with contributing: <a href=\"https://docs.wasmtime.dev/contributing.html\">https://docs.wasmtime.dev/contributing.html</a></p>\n</blockquote>",
        "id": 219638607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607709225
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-743337333\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 219638638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607709239
    },
    {
        "content": "<p>stevenbarragan <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-743691351\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>Hi @fitzgen I'd love to start contributing to wasmtime. Let me dive in and try to figure it out. I'll follow in here with questions.</p>\n</blockquote>",
        "id": 219685658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607742357
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-744615100\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>@stevenbarragan great! One thing to be aware of, that I forgot to mention when filing this issue, is that the WAT text format is a tiny bit higher level than Wasm is at the byte level. For example, WAT allows you to define a function and its signature type at the same time, while wasm bytes require you to pre-declare a function signature type and then reference that type via its index from the function.</p>\n<p>That is, this WAT snippet:</p>\n<div class=\"codehilite\" data-code-language=\"wat\"><pre><span></span><code>(func (param i32 i32) (result i32) ...)\n</code></pre></div>\n<p>desugars to basically this <code>wasm-encoder</code> usage:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Define a function signature in the `Type` section.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">TypeSection</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">ValType</span>::<span class=\"n\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">ValType</span>::<span class=\"n\">I32</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">ValType</span>::<span class=\"n\">I32</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Declare the function's type in the `Function` section.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">funcs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">FunctionSection</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">funcs</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// first type in type section</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">locals</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">.];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">locals</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// call `func.instruction(...)` to define instructions in this function body...</span>\n\n<span class=\"c1\">// Add the function body to the `Code` section.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">CodeSection</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">body</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Let me know if you aren't sure about how to translate any given snippet of WAT into <code>wasm-encoder</code> API calls and I can help you out.</p>\n</blockquote>",
        "id": 219879687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607969336
    },
    {
        "content": "<p>misapprehand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-752372335\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>Hi @fitzgen, I commit PR <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2535\">2535</a> about this issue. <br>\nBut I still have some questions</p>\n<ol>\n<li>I cannot find the functions \"dummy_instance\" and \"dummy_module\" is called.  So I just run fuzz_target  compile and instantiate. But I not sure whether it is the right to check the two functions which use wat generator</li>\n<li>Cannot find how to convert from wasm::ValType::V128 to wasm_encoder::ValType and wasm_encoder::Instruction<br>\nSee file <a href=\"http://wencoder_generator.rs\">wencoder_generator.rs</a> , commented by //TODO</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">In</span><span class=\"w\"> </span><span class=\"n\">wencoder_generator</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">value_to_instruction</span><span class=\"p\">(</span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ValType</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Instruction</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">....</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ValType</span>::<span class=\"n\">V128</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Instruction</span>::<span class=\"n\">F64Const</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// TODO Do not know the right Instrunction type</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">value_to_value</span><span class=\"p\">(</span><span class=\"n\">from</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ValType</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasm_encoder</span>::<span class=\"n\">ValType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ValType</span>::<span class=\"n\">V128</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">ValType</span>::<span class=\"n\">FuncRef</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// TODO Do not know the right value</span>\n<span class=\"w\">       </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>3 . The u32 value 0 in Export Type is right ?<br>\neg. Export::Function(0) ,Export::Global(0) . </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">extern_to_export</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span>::<span class=\"n\">ExternType</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasm_encoder</span>::<span class=\"n\">Export</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\">   </span><span class=\"o\">&lt;---</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Global</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Global</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 221197742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609316694
    },
    {
        "content": "<p>misapprehand edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-752372335\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>Hi @fitzgen, I commit PR <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2535\">2535</a> about this issue. <br>\nBut I still have some questions</p>\n<ol>\n<li>Cannot find how to convert from wasm::ValType::V128 to wasm_encoder::ValType and wasm_encoder::Instruction<br>\nSee file <a href=\"http://wencoder_generator.rs\">wencoder_generator.rs</a> , commented by //TODO</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">In</span><span class=\"w\"> </span><span class=\"n\">wencoder_generator</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">value_to_instruction</span><span class=\"p\">(</span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ValType</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Instruction</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">....</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ValType</span>::<span class=\"n\">V128</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Instruction</span>::<span class=\"n\">F64Const</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// TODO Do not know the right Instrunction type</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">value_to_value</span><span class=\"p\">(</span><span class=\"n\">from</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ValType</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasm_encoder</span>::<span class=\"n\">ValType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ValType</span>::<span class=\"n\">V128</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">ValType</span>::<span class=\"n\">FuncRef</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// TODO Do not know the right value</span>\n<span class=\"w\">       </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>2 . The u32 value 0 in Export Type is right ?<br>\neg. Export::Function(0) ,Export::Global(0) . </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">extern_to_export</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime</span>::<span class=\"n\">ExternType</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasm_encoder</span>::<span class=\"n\">Export</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\">   </span><span class=\"o\">&lt;---</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Global</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Global</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">ExternType</span>::<span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm_encoder</span>::<span class=\"n\">Export</span>::<span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 221207998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609330139
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-754823785\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>Re (1) we just haven't implemented <code>v128</code> support in <code>wasm-encoder</code>. I've opened <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/187\">https://github.com/bytecodealliance/wasm-tools/pull/187</a> to add enough support to unblock you here.</p>\n</blockquote>",
        "id": 221684698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609872075
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-754830404\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>Re (2) I think we want a <code>num_funcs</code> member and <code>num_globals</code> member of the <code>Wencoder</code> builder struct and then <code>export</code> should define the given item, let its index be the current <code>self.num_whatever</code> value, and then increment <code>self.num_whatever</code>. This index is then the thing that should be used instead of <code>0</code> in <code>wasm_encoder::Export::Whatever</code>.</p>\n<p>Does that make sense?</p>\n</blockquote>",
        "id": 221686200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609872818
    },
    {
        "content": "<p>misapprehand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-756672984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>self.num_whatever just list self.tmp in WatGenerator ?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">WatGenerator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tmp</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\">    </span><span class=\"o\">&lt;---</span><span class=\"w\">   </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">num_funcs</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dst</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 222055610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610100937
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-756944735\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>There needs to be a separate counter for each index space: one for globals, one for tables, one for functions, one for memories.</p>\n<p>The <code>tmp</code> member was a hack for generating unique names in WAT. Unlike WAT, raw Wasm doesn't have names, so we have to refer to things by the actual index.</p>\n</blockquote>",
        "id": 222113194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610133185
    },
    {
        "content": "<p>misapprehand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-758347775\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>Make sense. I will update PR after wasm_encoder has updated. :)</p>\n</blockquote>",
        "id": 222384448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610417648
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-758843337\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<blockquote>\n<p>after wasm_encoder has updated</p>\n</blockquote>\n<p>Already published :)</p>\n</blockquote>",
        "id": 222472171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610475250
    },
    {
        "content": "<p>misapprehand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-761520506\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>@fitzgen, I have updated PR <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2535\">2535</a></p>\n</blockquote>",
        "id": 222966402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610781337
    },
    {
        "content": "<p>misapprehand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498#issuecomment-772405902\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2498\">Issue #2498</a>:</p>\n<blockquote>\n<p>@fitzgen, I have updated PR 2535.  There are two questions.</p>\n<ol>\n<li>In function mudle_init, I am not sure the nth of type in embedded module. I use enumerate index. I think it may not correct.<br>\n    Current test case only import/export simple module.  Can you add more complex modules to test case?     </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">module_init</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item_type</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ModuleType</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">import_section</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ImportSection</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">item_type</span><span class=\"p\">.</span><span class=\"n\">imports</span><span class=\"p\">().</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">import_section</span><span class=\"p\">.</span><span class=\"n\">import</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">imp</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">imp</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">extern_to_entity</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">imp</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\">    </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">nth</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">type</span>\n            <span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">section</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">import_section</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">export_section</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ExportSection</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">item_type</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">().</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">export_section</span><span class=\"p\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">exp</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">extern_to_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">exp</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">));</span><span class=\"w\">     </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">nth</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">type</span>\n        <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">section</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">export_section</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ol start=\"2\">\n<li>I do not find the way to  instantiate which module.  My current solution is instantiate one by one from Vec _self.modules_for_instantiate_ which stores all the export module index.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">item_import</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ExternType</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"o\">....</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">ExternType</span>::<span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"c1\">// No sure following code is right</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">modules_for_instantiate</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instance_section</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">modules_for_instantiate</span><span class=\"p\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">extern_to_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">num_instances</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">num_instances</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 224997582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612348385
    }
]