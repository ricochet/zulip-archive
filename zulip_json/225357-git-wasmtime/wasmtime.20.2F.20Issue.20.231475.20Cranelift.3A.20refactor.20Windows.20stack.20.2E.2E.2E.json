[
    {
        "content": "<p>iximeow opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1475\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1475\">Issue #1475</a>:</p>\n<blockquote>\n<p>Cranelift should be able to compile x86 functions with stack frames requiring 240 bytes or more, when that also requires preserving a SIMD register. We've had to track an extension to the fastcall ABI that requires saving some, and due to Cranelift's choice in stack layout for these functions it's impossible to satisfy constraints required by Windows unwind information.</p>\n<h4>Benefit</h4>\n<p>Cranelift and its users can have unwind information for these functions.</p>\n<h4>Implementation</h4>\n<p>I _think_ what we'll want to do is move the location FPRs are preserved in up before stack locals, so they have small offsets from the function's stack frame base. See the diagram in @peterhuene's comment <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216#discussion_r387409892\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1216#discussion_r387409892\">here</a> and associated conversation for more.</p>\n<h4>Alternatives</h4>\n<p>Cranelift and its users don't have unwind information for some functions (currently witnessed as a panic, so users can't opt out for problematic functions)</p>\n<p>ed: currently we miscompile these functions with or without unwind information. After <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a> lands, we'll produce working code, but not unwind information, for these. Specifically, unwind information for functions that would require these out-of-range FPR save offsets.</p>\n</blockquote>",
        "id": 193116107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586216278
    },
    {
        "content": "<p>iximeow labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1475\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1475\">Issue #1475</a>:</p>\n<blockquote>\n<p>Cranelift should be able to compile x86 functions with stack frames requiring 240 bytes or more, when that also requires preserving a SIMD register. We've had to track an extension to the fastcall ABI that requires saving some, and due to Cranelift's choice in stack layout for these functions it's impossible to satisfy constraints required by Windows unwind information.</p>\n<h4>Benefit</h4>\n<p>Cranelift and its users can have unwind information for these functions.</p>\n<h4>Implementation</h4>\n<p>I _think_ what we'll want to do is move the location FPRs are preserved in up before stack locals, so they have small offsets from the function's stack frame base. See the diagram in @peterhuene's comment <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216#discussion_r387409892\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1216#discussion_r387409892\">here</a> and associated conversation for more.</p>\n<h4>Alternatives</h4>\n<p>Cranelift and its users don't have unwind information for some functions (currently witnessed as a panic, so users can't opt out for problematic functions)</p>\n<p>ed: currently we miscompile these functions with or without unwind information. After <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a> lands, we'll produce working code, but not unwind information, for these. Specifically, unwind information for functions that would require these out-of-range FPR save offsets.</p>\n</blockquote>",
        "id": 193614289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586550665
    },
    {
        "content": "<p>iximeow labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1475\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1475\">Issue #1475</a>:</p>\n<blockquote>\n<p>Cranelift should be able to compile x86 functions with stack frames requiring 240 bytes or more, when that also requires preserving a SIMD register. We've had to track an extension to the fastcall ABI that requires saving some, and due to Cranelift's choice in stack layout for these functions it's impossible to satisfy constraints required by Windows unwind information.</p>\n<h4>Benefit</h4>\n<p>Cranelift and its users can have unwind information for these functions.</p>\n<h4>Implementation</h4>\n<p>I _think_ what we'll want to do is move the location FPRs are preserved in up before stack locals, so they have small offsets from the function's stack frame base. See the diagram in @peterhuene's comment <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216#discussion_r387409892\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1216#discussion_r387409892\">here</a> and associated conversation for more.</p>\n<h4>Alternatives</h4>\n<p>Cranelift and its users don't have unwind information for some functions (currently witnessed as a panic, so users can't opt out for problematic functions)</p>\n<p>ed: currently we miscompile these functions with or without unwind information. After <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a> lands, we'll produce working code, but not unwind information, for these. Specifically, unwind information for functions that would require these out-of-range FPR save offsets.</p>\n</blockquote>",
        "id": 193614290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586550665
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1475#issuecomment-612204241\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1475#issuecomment-612204241\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1475\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1475\">Issue #1475</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 193614327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586550686
    },
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1475\">Issue #1475</a>:</p>\n<blockquote>\n<p>Cranelift should be able to compile x86 functions with stack frames requiring 240 bytes or more, when that also requires preserving a SIMD register. We've had to track an extension to the fastcall ABI that requires saving some, and due to Cranelift's choice in stack layout for these functions it's impossible to satisfy constraints required by Windows unwind information.</p>\n<h4>Benefit</h4>\n<p>Cranelift and its users can have unwind information for these functions.</p>\n<h4>Implementation</h4>\n<p>I _think_ what we'll want to do is move the location FPRs are preserved in up before stack locals, so they have small offsets from the function's stack frame base. See the diagram in @peterhuene's comment <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216#discussion_r387409892\">here</a> and associated conversation for more.</p>\n<h4>Alternatives</h4>\n<p>Cranelift and its users don't have unwind information for some functions (currently witnessed as a panic, so users can't opt out for problematic functions)</p>\n<p>ed: currently we miscompile these functions with or without unwind information. After <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a> lands, we'll produce working code, but not unwind information, for these. Specifically, unwind information for functions that would require these out-of-range FPR save offsets.</p>\n</blockquote>",
        "id": 198163281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589959975
    },
    {
        "content": "<p>peterhuene closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1475\">Issue #1475</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>Cranelift should be able to compile x86 functions with stack frames requiring 240 bytes or more, when that also requires preserving a SIMD register. We've had to track an extension to the fastcall ABI that requires saving some, and due to Cranelift's choice in stack layout for these functions it's impossible to satisfy constraints required by Windows unwind information.</p>\n<h4>Benefit</h4>\n<p>Cranelift and its users can have unwind information for these functions.</p>\n<h4>Implementation</h4>\n<p>I _think_ what we'll want to do is move the location FPRs are preserved in up before stack locals, so they have small offsets from the function's stack frame base. See the diagram in @peterhuene's comment <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216#discussion_r387409892\">here</a> and associated conversation for more.</p>\n<h4>Alternatives</h4>\n<p>Cranelift and its users don't have unwind information for some functions (currently witnessed as a panic, so users can't opt out for problematic functions)</p>\n<p>ed: currently we miscompile these functions with or without unwind information. After <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a> lands, we'll produce working code, but not unwind information, for these. Specifically, unwind information for functions that would require these out-of-range FPR save offsets.</p>\n</blockquote>",
        "id": 198482115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590174400
    }
]