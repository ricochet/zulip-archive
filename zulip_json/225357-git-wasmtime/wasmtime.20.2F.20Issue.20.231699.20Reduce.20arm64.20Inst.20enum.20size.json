[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699#issuecomment-628679543\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699\">Issue #1699</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 197564534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589467182
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699#issuecomment-629030093\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699\">Issue #1699</a>:</p>\n<blockquote>\n<p>A nice improvement.</p>\n<p>Do you have any insight into why it's still 48 bytes?  Given that an arm64 insn can mention at most 4 regs, and that each Reg is 4 bytes, that means that we need 16 bytes to represent the registers, which leaves 32 bytes left over for all the opcode-y info and auxiliary info.  Which still feels to me like a lot.  So I was wondering about the feasibility of reducing the struct size further, to 32 bytes.</p>\n</blockquote>",
        "id": 197648940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589519341
    },
    {
        "content": "<p>jgouly <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699#issuecomment-629150222\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699\">Issue #1699</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">JTSequence</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">targets</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">BranchTarget</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">targets_for_term</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">BlockIndex</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// needed for MachTerminator.</span>\n<span class=\"w\">        </span><span class=\"n\">ridx</span>: <span class=\"nc\">Reg</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">rtmp1</span>: <span class=\"nc\">Writable</span><span class=\"o\">&lt;</span><span class=\"n\">Reg</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">rtmp2</span>: <span class=\"nc\">Writable</span><span class=\"o\">&lt;</span><span class=\"n\">Reg</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This is 48 bytes. (3 * 4 bytes for Regs + 2 * 16 for Box&lt;[T]&gt; + padding).<br>\nWe could make this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">JTSequence</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">targets_info</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">NewTargetInfoStruct</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ridx</span>: <span class=\"nc\">Reg</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">rtmp1</span>: <span class=\"nc\">Writable</span><span class=\"o\">&lt;</span><span class=\"n\">Reg</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">rtmp2</span>: <span class=\"nc\">Writable</span><span class=\"o\">&lt;</span><span class=\"n\">Reg</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Which should make it 3 * 4 + 8 = 24 bytes. However <code>NewTargetInfoStruct</code> would have 2 Box&lt;[T]&gt; inside of it, so this would be introducing another allocation (could be fine, worth pointing out). It seems there is an <code>unsafe</code> way in we could could allocate space for <code>NewTargetInfoStruct</code> with trailing space for the <code>targets</code> and <code>targets_for_term</code>, but I think that might be overkill.</p>\n<p>Also 48 bytes:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">CondBr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">taken</span>: <span class=\"nc\">BranchTarget</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">not_taken</span>: <span class=\"nc\">BranchTarget</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">kind</span>: <span class=\"nc\">CondBrKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Surprising. Looks so simple! <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/isa/aarch64/inst/args.rs#L307\"><code>BranchTarget</code></a> is 16 bytes though.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">BranchTarget</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"n\">BlockIndex</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ResolvedOffset</span><span class=\"p\">(</span><span class=\"kt\">isize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I don't think we need the full isize range there (@cfallin ?), so we could encode this ourselves, using the top bit of the <code>isize</code> as the discriminant. Then <code>BranchTarget</code> could shrink to 8 bytes (the size of a single <code>isize</code>)</p>\n<p>Other than that, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L722\"><code>LoadExtName</code></a> is 39 bytes. This is because it has a field of <code>ExternalName</code> (20 bytes), using <code>Box&lt;ExternalName&gt;</code> would drop the size to 24 bytes.</p>\n<p>Otherwise everything is already 32-bytes.</p>\n</blockquote>",
        "id": 197670900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589537168
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699#issuecomment-629189802\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699\">Issue #1699</a>:</p>\n<blockquote>\n<blockquote>\n<p>However NewTargetInfoStruct would have 2 Box&lt;[T]&gt; </p>\n</blockquote>\n<p>Could NewTargetInfoStrust just contain the two fields without the boxes, avoiding the two supplementary Box allocations?</p>\n<blockquote>\n<p>I don't think we need the full isize range there (@cfallin ?), so we could encode this ourselves, using the top bit of the isize as the discriminant.</p>\n</blockquote>\n<p>Yep, we discussed this and Chris said a byte would be sufficient for this.</p>\n<blockquote>\n<p>Other than that, LoadExtName is 39 bytes. This is because it has a field of ExternalName (20 bytes), using Box&lt;ExternalName&gt; would drop the size to 24 bytes.</p>\n</blockquote>\n<p>Uh, it's silly: ExternalName is 20 bytes because it has variant apparently only used in test cases that contains 17 bytes rounded with padding to 20. If we made this really test-only (there's already a Cargo feature for this purpose in Cranelift), or reduce the TEST_NAME length by one unit, then we could make it only 16 bytes. Then putting it in a box would make sense too.</p>\n</blockquote>",
        "id": 197679239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589543163
    },
    {
        "content": "<p>jgouly <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699#issuecomment-629198663\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699\">Issue #1699</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>However NewTargetInfoStruct would have 2 Box&lt;[T]&gt;</p>\n</blockquote>\n<p>Could NewTargetInfoStrust just contain the two fields without the boxes, avoiding the two supplementary Box allocations?</p>\n</blockquote>\n<p>The Boxes it contains are Box&lt;[T]&gt;, which is produced from a Vec&lt;T&gt;. Not single values.</p>\n</blockquote>",
        "id": 197681148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589544504
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699#issuecomment-629340513\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699\">Issue #1699</a>:</p>\n<blockquote>\n<p>Converting a <code>Vec&lt;T&gt;</code> to a <code>Box&lt;[T]&gt;</code> may reallocate if the capacity is higher than the length.</p>\n</blockquote>",
        "id": 197713024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589558391
    },
    {
        "content": "<p>jgouly <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699#issuecomment-629355830\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1699\">Issue #1699</a>:</p>\n<blockquote>\n<blockquote>\n<p>Converting a <code>Vec&lt;T&gt;</code> to a <code>Box&lt;[T]&gt;</code> may reallocate if the capacity is higher than the length.</p>\n</blockquote>\n<p>I don't think that should happen in either of these two uses here, right?:  <a href=\"https://github.com/bytecodealliance/wasmtime/commit/f418b7a7006842437e75a584e353cdd6fc59d93d#diff-7d584cb8ba0adceef3f4e7c5eff08c05R2125\">https://github.com/bytecodealliance/wasmtime/commit/f418b7a7006842437e75a584e353cdd6fc59d93d#diff-7d584cb8ba0adceef3f4e7c5eff08c05R2125</a></p>\n</blockquote>",
        "id": 197716770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589560087
    }
]