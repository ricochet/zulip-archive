[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419378474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706845223
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419378475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706845223
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a> from <code>fitzgen:egraph-cost-fix-point</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Fixes #7857</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 419378477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706845224
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419378478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706845224
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1858220769\">PR review</a>:</p>\n<blockquote>\n<p>This looks great!</p>\n</blockquote>",
        "id": 419380328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706846514
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1858220769\">PR review</a>:</p>\n<blockquote>\n<p>This looks great!</p>\n</blockquote>",
        "id": 419380329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706846514
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1475493745\">PR review comment</a>:</p>\n<blockquote>\n<p>What do you think about making this check if the updated <code>best[value]</code> is infinity, rather than if it changed? Given the way that infinity saturates, I think we can assume that a finite result is the best we'll do here.</p>\n</blockquote>",
        "id": 419380330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706846514
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1475489756\">PR review comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n</blockquote>",
        "id": 419380331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706846514
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1475494766\">PR review comment</a>:</p>\n<blockquote>\n<p>Really glad you added this one!</p>\n</blockquote>",
        "id": 419380332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706846514
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1858244038\">PR review</a>.</p>",
        "id": 419381312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706847162
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1475500727\">PR review comment</a>:</p>\n<blockquote>\n<p>Though the change I suggested hinges on all values definitely becoming non-infinite, so I think looking for the change in best value is better. Never mind!</p>\n</blockquote>",
        "id": 419381314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706847162
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1858524648\">PR review</a>.</p>",
        "id": 419395393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706857945
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1475647982\">PR review comment</a>:</p>\n<blockquote>\n<p>Sorry for the drive-by from the sidelines, just a possible clarification request here though after thinking about cost updates during a long drive today:</p>\n<p>It's not immediately obvious to me why this (once finite, then final) property is the case; I'm curious what reasoning y'all have gone through on this and/or what you've observed? I think a node's cost can continue to decrease as we discover more finite costs (consider a union node: <code>min(20, infinity) == 20</code> in first pass, <code>min(20, 10) == 10</code> in second pass; then another node that uses that as an arg). Or is there an argument we can make why this shouldn't happen in practice?</p>\n</blockquote>",
        "id": 419395394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706857945
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1859234199\">PR review</a>.</p>",
        "id": 419456142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706880025
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1476053154\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a great point Chris! When @fitzgen and I were discussing the fixpoint change yesterday, we reasoned that it was okay to skip finite values because we were assuming two things:</p>\n<ul>\n<li>We would remove the behavior where <code>Cost</code> addition would saturate to <code>MAX_COST</code>, not <code>infinity()</code></li>\n<li>As we can't produce cycles, a fixpoint would cause everything to eventually settle out to finite cost</li>\n</ul>\n<p>As you pointed out, the flaw with this reasoning is that the handling of <code>Union</code> values will not behave this way, instead preferring finite values to infinite.</p>\n<p>Since addition now saturates to infinity which will ensure that <code>Result</code> nodes don't appear finite until all their dependencies have been processed, what do you think about only computing the min if both arguments to a <code>Union</code> are finite? I think that change would make more concrete our use of the <code>infinity()</code> cost: it's a marker for where all the arguments have not yet been processed.</p>\n</blockquote>",
        "id": 419456143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706880026
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1859583483\">PR review</a>.</p>",
        "id": 419485763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706889314
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1476238366\">PR review comment</a>:</p>\n<blockquote>\n<p>In order for a <code>union(a, b)</code> to be finite but not in its final form would require one of <code>a</code> or <code>b</code> to finite and the other infinite, but the only way we can still have an infinite cost for an operand value when computing the cost of the current value is if the operand value's index is larger than the current value's index. That <em>cannot</em> happen for union values, since they are only added to the DFG after their operands.</p>\n<p>This is, however, a pretty subtle argument, so I'd be fine skipping this early-<code>continue</code> optimization. I'll land this PR without it, because that is pretty obviously correct, and if we want to experiment with different approaches to optimizing the loop from there, we can open follow up PRs.</p>\n</blockquote>",
        "id": 419485765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706889314
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419486727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706889607
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419486996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706889698
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1859610532\">PR review</a>.</p>",
        "id": 419488344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706890120
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1476254284\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point Nick, sorry for muddying the waters there.</p>\n</blockquote>",
        "id": 419488345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706890120
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1859677024\">PR review</a>.</p>",
        "id": 419494093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706891969
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1476292218\">PR review comment</a>:</p>\n<blockquote>\n<p>Okay actually I was wrong, thanks Trevor for asking very pointed questions in private chat :-p</p>\n<p>The union's operand values are always defined before the union, but if one of <em>those</em> operand values is a funky one where <em>its</em> operands are out of order, then the operand could still be infinite by the time we get to the union, and then the union's <code>min</code> would drop the infinite. That would be a finite cost that is potentially not in its final form, depending on the cost we still need to compute for the still-infinite operand.</p>\n<p>So this \"optimization\" of early-continuing was not correct! Bullet dodged.</p>\n<p>This ae-graphs code is all very subtle, and we should spend some time thinking about what we can do to make things more obviously correct, even if it is just adding additional debug asserts and comments. It shouldn't take 3.5 engineers who are all intimately familiar with Cranelift a full day to diagnose and fix this kind of bug and <em>still</em> introduce subtle flaws in the fix.</p>\n</blockquote>",
        "id": 419494094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706891969
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1859683424\">PR review</a>.</p>",
        "id": 419494741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706892189
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1476296142\">PR review comment</a>:</p>\n<blockquote>\n<p>And for clarity: since we are doing the \"full\" fixpoint now, even if we \"drop\" an operand's infinite cost via <code>min</code> in one iteration of the loop, we will consider that operand's value again on the next iteration of the fix point, and eventually, as the fixpoint is reached, we will have the correct costs for everything.</p>\n</blockquote>",
        "id": 419494742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706892189
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#issuecomment-1924250668\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>:</p>\n<blockquote>\n<p>(Re-adding to merge queue after misunderstanding regarding <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1476296142\">https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1476296142</a>)</p>\n</blockquote>",
        "id": 419494993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706892274
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1860413183\">PR review</a>.</p>",
        "id": 419536870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706908926
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1476744864\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks @fitzgen and @elliottt (and @alexcrichton) for taking this on and sorry for not realizing this subtle case originally!</p>\n<p>A further optimization (which I can take on when I'm back) that occurred to me today: we could track whether we see any \"forward references\" (perhaps integrate this into the fixpoint loop itself, though it won't change between iterations), and exit the loop after one iteration if none exist. This is the common case, and it would avoid doing a second (no-changes) pass. This extra cost is totally fine for now IMHO (correctness first!).</p>\n<p>I agree the code is pretty subtle; to some degree I think that's inherent to the problem, and it's already pretty comment-dense in many (not all!) areas, but I can also try to add some more top-level documentation on invariants and the like when I'm back. I'd like to try to do some more semi-formal proofs too, similar to MachBuffer's comments, to convince us that we don't have any more issues lurking (and to help understanding).</p>\n</blockquote>",
        "id": 419536871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706908926
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1863342658\">PR review</a>.</p>",
        "id": 419887509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707152589
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1478587970\">PR review comment</a>:</p>\n<blockquote>\n<p>Agreed, and not trying to point fingers or anything, just trying to improve the situation for everyone. I think something like <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7856\">https://github.com/bytecodealliance/wasmtime/issues/7856</a> would help a lot too.</p>\n</blockquote>",
        "id": 419887511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707152590
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419889306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707153135
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419889421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707153184
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#issuecomment-1927628709\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>:</p>\n<blockquote>\n<p>Given that the same riscv64 failure happened twice in a row my guess is that it's probably a deterministic failure rather than a spurious failure. That may mean that a preexisting riscv64 lowering rule is buggy and this is starting to expose that. I'll note though that I haven't attempted to reproduce locally yet.</p>\n</blockquote>",
        "id": 419897426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707155869
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#issuecomment-1927681041\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>:</p>\n<blockquote>\n<p>Ah yes I can reproduce locally:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">wasi_http_hash_all_with_override</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi_http_hash_all_with_override</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">egraph</span><span class=\"o\">/</span><span class=\"n\">elaborate</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">296</span>:<span class=\"mi\">17</span>:\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">best</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">].</span><span class=\"mf\">0.</span><span class=\"n\">is_finite</span><span class=\"p\">()</span>\n\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">wasi_http_double_echo</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi_http_double_echo</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">egraph</span><span class=\"o\">/</span><span class=\"n\">elaborate</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">296</span>:<span class=\"mi\">17</span>:\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">best</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">].</span><span class=\"mf\">0.</span><span class=\"n\">is_finite</span><span class=\"p\">()</span>\n\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">wasi_http_hash_all</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi_http_hash_all</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">egraph</span><span class=\"o\">/</span><span class=\"n\">elaborate</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">296</span>:<span class=\"mi\">17</span>:\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">best</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">].</span><span class=\"mf\">0.</span><span class=\"n\">is_finite</span><span class=\"p\">()</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">wasi_http_echo</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi_http_echo</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">egraph</span><span class=\"o\">/</span><span class=\"n\">elaborate</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">296</span>:<span class=\"mi\">17</span>:\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">best</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">].</span><span class=\"mf\">0.</span><span class=\"n\">is_finite</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>No output on CI due to <a href=\"https://github.com/rayon-rs/rayon/issues/1066\">https://github.com/rayon-rs/rayon/issues/1066</a> I think, not that it's actually a bug in rayon but an unfortunate consequence.</p>\n</blockquote>",
        "id": 419899971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707156750
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#issuecomment-1927785504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>:</p>\n<blockquote>\n<p>I ran the <code>fuzzgen-icache</code> fuzzer to try and find a small reproducible example for the riscv bug, but it found a similar error for s390x:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">compile</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v27</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v57</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v27</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v27</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v27</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v27</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v27</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v27</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v58</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v60</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v61</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v58</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v58</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v28</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v61</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v60</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v57</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v60</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v62</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v28</span>\n<span class=\"w\">    </span><span class=\"n\">v63</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v62</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v62</span>\n<span class=\"w\">    </span><span class=\"n\">v65</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v66</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v63</span>\n<span class=\"w\">    </span><span class=\"n\">v29</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v66</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v65</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v62</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v65</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v67</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v29</span>\n<span class=\"w\">    </span><span class=\"n\">v68</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v67</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v67</span>\n<span class=\"w\">    </span><span class=\"n\">v70</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v71</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v68</span>\n<span class=\"w\">    </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v71</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v70</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v67</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v70</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v72</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v30</span>\n<span class=\"w\">    </span><span class=\"n\">v73</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v72</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v72</span>\n<span class=\"w\">    </span><span class=\"n\">v75</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v76</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v73</span>\n<span class=\"w\">    </span><span class=\"n\">v31</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v76</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v75</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v72</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v75</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v77</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v31</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v31</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v31</span>\n<span class=\"w\">    </span><span class=\"n\">v78</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v77</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v77</span>\n<span class=\"w\">    </span><span class=\"n\">v80</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v81</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v78</span>\n<span class=\"w\">    </span><span class=\"n\">v32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v81</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v77</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v80</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v82</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v32</span>\n<span class=\"w\">    </span><span class=\"n\">v83</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v82</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v82</span>\n<span class=\"w\">    </span><span class=\"n\">v85</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v86</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v83</span>\n<span class=\"w\">    </span><span class=\"n\">v33</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v85</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v82</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v85</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v87</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v33</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v33</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v33</span>\n<span class=\"w\">    </span><span class=\"n\">v88</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v87</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v87</span>\n<span class=\"w\">    </span><span class=\"n\">v90</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v91</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v88</span>\n<span class=\"w\">    </span><span class=\"n\">v34</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v91</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v90</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v87</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v90</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v34</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I'm still going to try to find a smaller one before trying to figure out which rule is causing issues</p>\n</blockquote>",
        "id": 419904936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707158532
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#issuecomment-1927836561\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>:</p>\n<blockquote>\n<p>Thanks Afonso!</p>\n</blockquote>",
        "id": 419907751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707159525
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#issuecomment-1927946674\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>:</p>\n<blockquote>\n<p>Here's another case that it found, this one for AArch64. </p>\n<p>&lt;details&gt;<br>\n  &lt;summary&gt;Testcase&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">compile</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"n\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u2</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">f64x2</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">fn0</span>\n<span class=\"w\">    </span><span class=\"n\">return_call_indirect</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span>\n\n<span class=\"n\">block1</span><span class=\"w\"> </span><span class=\"n\">cold</span>:\n    <span class=\"nc\">v62</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v63</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">v62</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v62</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v63</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v63</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v12</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v16</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v21</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v23</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v24</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v26</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v24</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v27</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v28</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v26</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v26</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v28</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v31</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v30</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v33</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v34</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v35</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v36</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v34</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v34</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v37</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v38</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v36</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v36</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v39</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v40</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v38</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v38</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v41</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v42</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v40</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v43</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v44</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v42</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v45</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v46</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v44</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v44</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v47</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v48</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v46</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v46</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v49</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v50</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v48</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v49</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v49</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This one is interesting to me because almost all of this is dead code, but if we minimize it, it no longer crashes <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> . The trace log states the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">context</span><span class=\"w\">              </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">About</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">optimize</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">egraph</span><span class=\"w\"> </span><span class=\"n\">phase</span>:\n<span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"n\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u2</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">f64x2</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">fn0</span>\n<span class=\"w\">    </span><span class=\"n\">return_call_indirect</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So it does optimize away the deadcode internally, but then still tries to elaborate some of the previously eliminated instructions. Which doesn't make sense to me, but I haven't kept up with the inner workings of the egraphs stuff.</p>\n<p>I'm not familiar enough with egraphs to be able to debug this, but if you need any help reworking one of the lowering rules let me know!</p>\n</blockquote>",
        "id": 419916063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707162454
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419937056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707170954
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419938042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707171415
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1863904841\">PR review</a>:</p>\n<blockquote>\n<p>Looks good to me! Just one optional suggestion.</p>\n</blockquote>",
        "id": 419938271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707171513
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1863904841\">PR review</a>:</p>\n<blockquote>\n<p>Looks good to me! Just one optional suggestion.</p>\n</blockquote>",
        "id": 419938272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707171513
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1478967579\">PR review comment</a>:</p>\n<blockquote>\n<p>Can I suggest adding the same assertion with the operands swapped? <code>b+a</code> should also be infinity.</p>\n</blockquote>",
        "id": 419938273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707171513
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419939124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707171930
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#pullrequestreview-1863939985\">PR review</a>.</p>",
        "id": 419939129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707171933
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859#discussion_r1478993537\">PR review comment</a>:</p>\n<blockquote>\n<p>Good idea! Done.</p>\n</blockquote>",
        "id": 419939130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707171933
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419939888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707172287
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">PR #7859</a>.</p>",
        "id": 419946474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707175344
    }
]