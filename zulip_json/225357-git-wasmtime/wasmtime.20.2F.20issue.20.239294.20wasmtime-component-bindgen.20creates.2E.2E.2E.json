[
    {
        "content": "<p><a href=\"https://github.com/parasyte\">parasyte</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294\">Issue #9294</a>.</p>",
        "id": 472327445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727124049
    },
    {
        "content": "<p>parasyte opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294\">issue #9294</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"p\">;</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"c1\">// WIT from https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#package-format</span>\n<span class=\"w\">    </span><span class=\"c1\">// Amendment: added the `world local` section to make bindgen happy.</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">        package local:demo;</span>\n\n<span class=\"s\">        interface types {</span>\n<span class=\"s\">          resource file {</span>\n<span class=\"s\">            read: func(off: u32, n: u32) -&gt; list&lt;u8&gt;;</span>\n<span class=\"s\">            write: func(off: u32, bytes: list&lt;u8&gt;);</span>\n<span class=\"s\">          }</span>\n<span class=\"s\">        }</span>\n\n<span class=\"s\">        interface namespace {</span>\n<span class=\"s\">          use types.{file};</span>\n<span class=\"s\">          open: func(name: string) -&gt; file;</span>\n<span class=\"s\">        }</span>\n\n<span class=\"s\">        world local {</span>\n<span class=\"s\">          export namespace;</span>\n<span class=\"s\">        }</span>\n<span class=\"s\">    \"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">include_generated_code_from_file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>bindgen!</code> generates a <a href=\"https://doc.rust-lang.org/reference/items/enumerations.html#zero-variant-enums\">zero-variant enum</a> for each resource in a WIT. I.e. the type is impossible to instantiate. To verify I'm not insane, I tried using a WIT from documentation, which is shown above, and the source of the WIT is <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#package-format\">the linked documentation</a>.</p>\n<p>The Rust code output by <code>bindgen</code> includes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>A <code>File</code> cannot be instantiated, so how is the <code>namespace.open()</code> function supposed to return one? And for that matter, how are the <code>File.read()</code> and <code>File.write()</code> implementations supposed to accept a reference to a <code>File</code> that can't be created?</p>\n<p>This never type is created here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/eb0428ebadf90429c167ec29e9bb25252de85acc/crates/wit-bindgen/src/lib.rs#L1634\">https://github.com/bytecodealliance/wasmtime/blob/eb0428ebadf90429c167ec29e9bb25252de85acc/crates/wit-bindgen/src/lib.rs#L1634</a></p>\n<h3>Expected Results</h3>\n<p>I would like the ability to construct the resources I'm defining in WIT.</p>\n<h3>Actual Results</h3>\n<p><code>File</code> cannot be constructed.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>25.0.0</code></p>\n<p>Operating system: Windows 11</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>Shouldn't this be a compile time error instead of an unusable type?<br>\n</p>\n</blockquote>",
        "id": 472327449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727124049
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294#issuecomment-2369433364\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294\">issue #9294</a>:</p>\n<blockquote>\n<p>Thanks for the report! <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/_4_imported_resources/index.html\">This example in the documentation</a> might help you here, the key thing being the <code>with</code> key indicating your own type to use instead of the empty enum type.</p>\n<p>This is something where the defaults of <code>bindgen!</code> aren't great where we should probably require <code>with: { ... }</code> by default rather than generating this empty enum which is more-or-less unusable.</p>\n</blockquote>",
        "id": 472334547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727126883
    },
    {
        "content": "<p>parasyte <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294#issuecomment-2369553746\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294\">issue #9294</a>:</p>\n<blockquote>\n<p>That could be exactly what I'm missing! I saw the other code path in <code>bindgen!</code> that imports an existing type by path but had no idea how to trigger it.</p>\n</blockquote>",
        "id": 472337797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727128182
    },
    {
        "content": "<p>vados-cosmonic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294#issuecomment-2510737852\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294\">issue #9294</a>:</p>\n<blockquote>\n<p>Hey @parasyte a bit late here, but were you able to get past this?</p>\n</blockquote>",
        "id": 485557521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733123382
    },
    {
        "content": "<p>parasyte <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294#issuecomment-2510749944\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294\">issue #9294</a>:</p>\n<blockquote>\n<p>Yes. I still don't think the default should be creating an unusable zero-variant enum, though.</p>\n</blockquote>",
        "id": 485558388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733123875
    },
    {
        "content": "<p>vados-cosmonic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294#issuecomment-2510755941\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294\">issue #9294</a>:</p>\n<blockquote>\n<p>My understanding that the zero variant enum was there because there's just not much else that \"makes sense\" if the resource isn't being implemented by the embedding/bindgen target -- resources do not have a generic representation/transmission or even identification mechanism outside of the embedder (whether guest or host) that defines them.</p>\n<p>What would you suggest instead? Maybe there's a better default to have!</p>\n</blockquote>",
        "id": 485558752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733124079
    },
    {
        "content": "<p>parasyte <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294#issuecomment-2511989796\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294\">issue #9294</a>:</p>\n<blockquote>\n<p>Raise an error with an appropriate suggestion. Such as \"Did you meant to use <code>with { ... }</code>?\" and link to relevant documentation.</p>\n<p>That would be a much better experience than the <code>bindgen!</code> macro seemingly being accepted, but then you can't make any further progress.</p>\n</blockquote>",
        "id": 485660587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733156109
    },
    {
        "content": "<p>vados-cosmonic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294#issuecomment-2512315686\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9294\">issue #9294</a>:</p>\n<blockquote>\n<p>Ah yeah that would be much more ergonomic, so maybe rather than generating the struct we could add in a <code>compile_error</code> if we hit this case -- would you be open to submitting that improvement to <code>wit-bindgen</code> ?</p>\n</blockquote>",
        "id": 485681548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733162779
    }
]