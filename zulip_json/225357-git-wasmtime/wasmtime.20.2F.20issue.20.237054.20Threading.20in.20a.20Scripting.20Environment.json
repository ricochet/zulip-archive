[
    {
        "content": "<p>WireWhiz opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>The title basically says it, I've been attempting to block out a scripting system for a game engine the past few weeks and the current feature I've been attempting to figure out is multi-threading. And I can't seem to find any way to run two threads at once, that have access to the same data. This is the only requirement I'm trying to fulfill by any method. </p>\n<p>The engine runs on ECS, so you have big shared arrays of data, operated upon by a bunch of scripts containing functions that interact with those arrays. </p>\n<p>Ideally I'd like to accomplish two things, have systems/jobs called from separate threads be able to act on the shared data at the same time. And possibly multi thread access to data arrays within those systems/jobs.</p>\n<p>My current setup is multiple wasm modules (one for each job/system, though I'm undecided if I need to segment them that much), with an imported shared array buffer so they're able to access each other's memory through pointers. Ideally built to raw wasm, not wasi, since I want to keep my experimental dependencies down, but for this threading exploration I switched to building wasi targets without entry points. </p>\n<p>Initially I tried figuring out a way to multi-thread calls into the wasm runtime, but with the <code>&amp;mut store</code> requirement that's not possible unless I want to risk some unsafe skirt around the borrow checker stuff.</p>\n<p>So then I decided to try to build the job scheduling/thread pooling system inside of wasm, If I can't use threads outside I might as well use them inside right? After researching this, upgrading to wasi since I found out you need too, I looked into the wasmtime_wasi_threading crate and it seems intended (as all things wasi) for the entire application to be embedded in a wasm module. This doesn't really vibe with my \"host runtime calling scripts\" end goal. So that path of exploration has kind of ended as well. It also seems that an entirely different store is created for each thread (unverified through testing, but the source looks that way), and my understanding is that stores can't interact with each other, and that's my basic requirement. </p>\n<p>I'm fully aware you can instantiate clones of a module in different stores, but again, the memory cant interact. I also know you can copy data but I just cringe instantly at that because with a game engine you really need that performance. </p>\n<p>My question/issue is how do I access shared data from multiple threads. Does the wasi threading runtime do some black magic behind the scenes to share data and I just need to write my job scheduling system as a program that lives on another thread? Even then how would I interact with it while it's running?</p>\n<p>My thoughts are that since SharedMemoryBuffer is already supposed to be thread-safe, threaded function calls modifying that should be fine, even for calls that would cause a memory allocation behind the scenes, so the &amp;mut store lock is only really needed for loading or unloading new modules. I can totally see a system where I have the job scheduling system create multiple (unsafe) references to the store to be able to call functions from multiple threads, then periodically pause so that modules may be loaded or unloaded before continuing to make sure that no functions bug out while stuff is changing. </p>\n<p>Is there an intended way to do this? Or is my use case unexplored territory? I'm also more than happy to get involved with the project and try to get something working if it's not possible currently.</p>\n</blockquote>",
        "id": 391600234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695001803
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1723548522\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p><a href=\"https://bytecodealliance.org/articles/wasi-threads\">This blog post</a> might be interesting for you, but I can try to help fill in some other gaps here:</p>\n<ul>\n<li>As you've discovered the only way to have multithreading with wasm today and is through <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.SharedMemory.html\"><code>SharedMemory</code></a> as the linear memory for wasm. This is the WebAssembly <code>threads</code> proposal (which actually mostly just adds atomic-related instructions).</li>\n<li>Multithreading via the WebAssembly <code>threads</code> proposal is modeled as an instance-per-thread. This means that your module should likely import a <code>shared</code> memory which will then be instantiated once per thread.</li>\n<li>Wasmtime's design requires a <code>Store</code>-per-thread, which means for your application you'll have a <code>Store</code> per thread, each with a single <code>Instance</code>, all of which instantiate the same module (<code>Module</code> can be shared across threads).</li>\n</ul>\n<p>This should all work today if you enable the right features and flags in both LLVM and Wasmtime, but it's unlikely to be easy. The developer experience story here is pretty underbaked and you're very much on your own unfortunately. There's spec work for threads however which is intended to provide a better story here in the future, but that's far out.</p>\n<p>That I hope is at least some basic information to help clear up a few things. Whether or not you use small modules or one large module is up to you and your embedding and I won't have much guidance on that myself. Or I should also ask, does that help clear things up? Are there other Wasmtime questions I can help with?</p>\n</blockquote>",
        "id": 391713249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695047481
    },
    {
        "content": "<p>WireWhiz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1723799725\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>It clears up the intended set up for threads, so that's more clear. My last question would be, if I were to create a separate store per thread, and separate model instances, would I be able to share a single SharedMemoryBuffer between them? My understanding currently is that memory allocated in one store cannot be used by a module in a different store. </p>\n</blockquote>",
        "id": 391731052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695052710
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1723834980\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p><code>Memory::new</code> requires a reference to a <code>Store</code> as argument. <code>SharedMemory::new</code> merely requires a references to an <code>Engine</code> which is not bound to a single thread and generally shared between all <code>Store</code>s in the process.</p>\n</blockquote>",
        "id": 391734530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695053864
    },
    {
        "content": "<p>WireWhiz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1723909411\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>OH I don't know how I missed that, I've just been creating shared memory buffer by passing in the type to the Memory constructor: <code>Memory::new(&amp;mut store, MemoryType::shared(32, 32768)).unwrap()</code> </p>\n<p>I'll look into this and see if I can get it working, this probably provides a route for me. </p>\n</blockquote>",
        "id": 391737460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695054843
    },
    {
        "content": "<p>WireWhiz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1728890433\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>Ok, after some testing I've run into a super weird bug. Before everything was fine, I could load several different wasm modules into the same shared memory and they coexisted fine. But changing to SharedMemory::new with no other significant changes from what I was doing before causes the first memory allocation within wasm to throw an error. </p>\n<p>I suspected it might be different modules not coexisting well so I removed all but one and that fixed it.</p>\n<p>So it looks like for some reason memory allocation gets messed up but the presence of differing modules.</p>\n<p>Could this be some variables to do with malloc not being synced between them? Do they not sync in the first place? If that's the case would I need to look into maybe writing a custom allocator that can handle memory allocation for multiple modules together? </p>\n</blockquote>",
        "id": 392252567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695275086
    },
    {
        "content": "<p>WireWhiz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1730068215\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>I attempted switching from <code>wasm32-unknown-unknown</code> to using the <code>wasm32-wasi-preview1-threads</code> build target, though and appears to be throwing the same error. At the moment the two modules I have are spawned on the same thread (different code in each), and the error is triggered before any threads and thus module instances on other threads are spawned. Would shadow stacks still be something worth looking into? Or do those only apply for multi-threaded scenarios?</p>\n</blockquote>",
        "id": 392372359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695319819
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1730077250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>If on a single thread, shadow-stack interference wouldn't be a factor, no.</p>\n<p>Another thing that could be going wrong: perhaps the memory is just missing the initial heap image entirely? How are you providing the shared-memory -- did you change the exported memory 0 to an imported memory instead? Are there still data segments in the module to initialize it?</p>\n</blockquote>",
        "id": 392373164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695320209
    },
    {
        "content": "<p>WireWhiz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1730107559\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>Here's the shell script I currently use to build, to give an idea of the flags/options I'm using</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">RUSTFLAGS</span><span class=\"o\">=</span><span class=\"s\">\"--cfg=web_sys_unstable_apis -C target-feature=+atomics,+bulk-memory,+mutable-globals -C link-arg=--no-entry -C link-arg=--shared-memory -C link-arg=--import-memory -C link-arg=--max-memory=2147483648\"</span>\n<span class=\"n\">echo</span><span class=\"w\"> </span><span class=\"s\">\"Compiling scripts with flags:\"</span><span class=\"w\"> </span><span class=\"cp\">$RUSTFLAGS</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">preview1</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">=</span><span class=\"n\">std</span><span class=\"p\">,</span><span class=\"n\">panic_abort</span>\n</code></pre></div>\n<p>running wasm2wat it seems that memory is both imported and exported, I'm unsure if this is by design. My intent is to allocate the shared memory in the runtime and then provide it to modules for them to import.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"env\"</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"mi\">32768</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"p\">))</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>If I print out imports and exports after loading the module with wasmtime it appears to both export and import the same shared memory (excuse my command line formatting):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Imports</span>\n<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">MemoryType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">Memory</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">minimum</span>: <span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">maximum</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">32768</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">shared</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory64</span>: <span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">})</span>: <span class=\"nc\">env</span><span class=\"p\">.</span><span class=\"n\">memory</span>\n<span class=\"n\">Exports</span>\n<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">MemoryType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">Memory</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">minimum</span>: <span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">maximum</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">32768</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">shared</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory64</span>: <span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">})</span>: <span class=\"nc\">env</span><span class=\"p\">.</span><span class=\"n\">memory</span>\n</code></pre></div>\n<p>I'm unsure where to look for data initialization but I'd guess it'd have something to do with this portion of the file?<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/43615314/9776ea63-ca9b-441e-ba29-3f3d90c4c8ac\">https://github.com/bytecodealliance/wasmtime/assets/43615314/9776ea63-ca9b-441e-ba29-3f3d90c4c8ac</a>)</p>\n</blockquote>",
        "id": 392376296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695321477
    },
    {
        "content": "<p>WireWhiz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1730115261\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>Here's that init memory function, I assume that's useful as well. I should note I never call this, and I'm directly calling functions from a wasmtime::Linker so I don't know if it would be called automatically.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_init_memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">block</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">1</span>\n<span class=\"w\">      </span><span class=\"n\">block</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"n\">block</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">3</span>\n<span class=\"w\">          </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1097564</span>\n<span class=\"w\">          </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">          </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">          </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">rmw</span><span class=\"p\">.</span><span class=\"n\">cmpxchg</span>\n<span class=\"w\">          </span><span class=\"n\">br_table</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"o\">@</span><span class=\"mi\">3</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"o\">@</span><span class=\"mi\">2</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"o\">@</span><span class=\"mi\">1</span><span class=\"p\">;)</span>\n<span class=\"w\">        </span><span class=\"n\">end</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1048576</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1048576</span>\n<span class=\"w\">        </span><span class=\"n\">global</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"cp\">$__tls_base</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">148</span>\n<span class=\"w\">        </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"p\">.</span><span class=\"n\">tdata</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1048736</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">48153</span>\n<span class=\"w\">        </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"p\">.</span><span class=\"n\">rodata</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1096892</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span>\n<span class=\"w\">        </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1096904</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">660</span>\n<span class=\"w\">        </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">fill</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1097564</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1097564</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">notify</span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span>\n<span class=\"w\">        </span><span class=\"n\">br</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"o\">@</span><span class=\"mi\">1</span><span class=\"p\">;)</span>\n<span class=\"w\">      </span><span class=\"n\">end</span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1097564</span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">      </span><span class=\"kt\">i64</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">      </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">wait32</span>\n<span class=\"w\">      </span><span class=\"nb\">drop</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"p\">.</span><span class=\"n\">rodata</span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>",
        "id": 392377218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695321818
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1730129587\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p><code>__wasm_init_memory</code> shouldn't be in the start section. That will cause every spawned thread to overwrite the shared memory. Instead it should be called once on the main thread and then the function for initializing TLS should be called once per thread.</p>\n</blockquote>",
        "id": 392378733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695322440
    },
    {
        "content": "<p>WireWhiz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1730147573\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>Is there a link option I can use to set that? Or should I write a script to modify it? Also does linker.module auto call any functions if wasi has been added to it? Or am I in charge of calling those functions. I'm not currently using WasiThreadsCtx either. I'm also not seeing an explicit init tls function, but I am seeing a wasi_thread_start function, does that serve a similar purpose?</p>\n</blockquote>",
        "id": 392380780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695323283
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1730152123\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm also not seeing an explicit init tls function, but I am seeing a wasi_thread_start function, does that serve a similar purpose?</p>\n</blockquote>\n<p>I believe that is one of the things <code>wasi_thread_start</code> does.</p>\n<blockquote>\n<p>Is there a link option I can use to set that?</p>\n</blockquote>\n<p>The wasm32-wasi-preview1-threads target uses <code>--import-memory --export-memory --shared-memory</code>, but I don't think the extra <code>--export-memory</code> argument would help.</p>\n</blockquote>",
        "id": 392381282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695323511
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1730457269\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>cc: @g0djan, who worked on the Rust <code>wasm32-wasi-preview1-threads</code> target you're using. That target uses the wasi-libc implemetation IIRC, which boils down to <a href=\"https://github.com/WebAssembly/wasi-libc/blob/ce2f157d46e04f323edf93f02c8f60069d88df96/libc-top-half/musl/src/thread/wasm32/wasi_thread_start.s#L13\"><code>wasi_thread_start</code></a> and <a href=\"https://github.com/WebAssembly/wasi-libc/blob/ce2f157d46e04f323edf93f02c8f60069d88df96/libc-top-half/musl/src/thread/pthread_create.c#L308\"><code>__wasi_thread_start_C</code></a>. It could very well be that there is a bug here somewhere; remember this target is still a work in progress.</p>\n</blockquote>",
        "id": 392407214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695336976
    },
    {
        "content": "<p>WireWhiz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1730967955\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>But thread start shouldn't need to be called for single threaded instantiation of multiple modules, maybe I should create a new issue over in the rust or wasm repos for the memory issue and then come back to this once that's fixed since it is technically a separate issue that most likely isn't in wasmtime. </p>\n</blockquote>",
        "id": 392460205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695369124
    },
    {
        "content": "<p>g0djan <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1731450955\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<blockquote>\n<p>running wasm2wat it seems that memory is both imported and exported, I'm unsure if this is by design. <br>\nYes it was by design but idk remember the exact reasoning for that as it was done just the same way as it's done in C by <code>wasi-sdk</code>. And also wasmtime didn't allow to run it until it's compiled with <code>--export-memory</code> .</p>\n</blockquote>\n</blockquote>",
        "id": 392521874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695390432
    },
    {
        "content": "<p>g0djan edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1731450955\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<blockquote>\n<p>running wasm2wat it seems that memory is both imported and exported, I'm unsure if this is by design. </p>\n</blockquote>\n<p>Yes it was by design but idk remember the exact reasoning for that as it was done just the same way as it's done in C by <code>wasi-sdk</code>. And also wasmtime didn't allow to run it until it's compiled with <code>--export-memory</code> .</p>\n</blockquote>",
        "id": 392521901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695390439
    },
    {
        "content": "<p>g0djan edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1731450955\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<blockquote>\n<p>running wasm2wat it seems that memory is both imported and exported, I'm unsure if this is by design. </p>\n</blockquote>\n<p>Yes it was by design but idk remember the exact reasoning for that as it was done just the same way as it's done in C by <code>wasi-sdk</code>. And also wasmtime didn't allow to run it until it's compiled with <code>--export-memory</code> .</p>\n<p>I'll take a look at your example next week.</p>\n</blockquote>",
        "id": 392521975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695390464
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054#issuecomment-1731688087\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7054\">issue #7054</a>:</p>\n<blockquote>\n<p>Wasi requires exporting the memory for the wasi runtime to know where to read and write, but multi threading requires importing the memory to aboid each module getting it's own distinct memory.</p>\n</blockquote>",
        "id": 392556396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695399293
    }
]