[
    {
        "content": "<p>TerrorJack opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6239\">issue #6239</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;errno.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;fcntl.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/stat.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/types.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">argc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"/dev/random\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_RDONLY</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">fd_set</span><span class=\"w\"> </span><span class=\"n\">readfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">writefds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">errorfds</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">readfds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">readfds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">writefds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">errorfds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">readfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">writefds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">errorfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Use wasi-sdk to compile the example above and run it:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>clang<span class=\"w\"> </span>random.c<span class=\"w\"> </span>-o<span class=\"w\"> </span>random.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--mapdir<span class=\"w\"> </span>/::/<span class=\"w\"> </span>--<span class=\"w\"> </span>random.wasm\nInvalid<span class=\"w\"> </span>argument:<span class=\"w\"> </span>Invalid<span class=\"w\"> </span>argument\n</code></pre></div>\n<p>If the same program is compiled by host gcc, it runs fine. Also, it works with nodejs/uvwasi.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 7.0.0</p>\n<p>Operating system: Ubuntu 22.10</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 350907157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681862474
    },
    {
        "content": "<p>TerrorJack labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6239\">issue #6239</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;errno.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;fcntl.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/stat.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/types.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">argc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"/dev/random\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_RDONLY</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">fd_set</span><span class=\"w\"> </span><span class=\"n\">readfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">writefds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">errorfds</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">readfds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">readfds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">writefds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">errorfds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">readfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">writefds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">errorfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Use wasi-sdk to compile the example above and run it:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>clang<span class=\"w\"> </span>random.c<span class=\"w\"> </span>-o<span class=\"w\"> </span>random.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--mapdir<span class=\"w\"> </span>/::/<span class=\"w\"> </span>--<span class=\"w\"> </span>random.wasm\nInvalid<span class=\"w\"> </span>argument:<span class=\"w\"> </span>Invalid<span class=\"w\"> </span>argument\n</code></pre></div>\n<p>If the same program is compiled by host gcc, it runs fine. Also, it works with nodejs/uvwasi.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 7.0.0</p>\n<p>Operating system: Ubuntu 22.10</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 350907160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681862475
    },
    {
        "content": "<p>TerrorJack <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6239#issuecomment-1515189205\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6239\">issue #6239</a>:</p>\n<blockquote>\n<p>Likewise for <code>/dev/null</code>. Reading from it should always return an EOF instead of failing with \"invalid argument\".</p>\n</blockquote>",
        "id": 351126372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681929166
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6239#issuecomment-1517043644\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6239\">issue #6239</a>:</p>\n<blockquote>\n<p>This is a bug in system-interface. I'm working on a fix.</p>\n</blockquote>",
        "id": 351474755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682031971
    },
    {
        "content": "<p>sunfishcode closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6239\">issue #6239</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;errno.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;fcntl.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/stat.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sys/types.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">argc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"/dev/random\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_RDONLY</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">fd_set</span><span class=\"w\"> </span><span class=\"n\">readfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">writefds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">errorfds</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">readfds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">FD_SET</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">readfds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">writefds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">FD_ZERO</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">errorfds</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">readfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">writefds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">errorfds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Use wasi-sdk to compile the example above and run it:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>clang<span class=\"w\"> </span>random.c<span class=\"w\"> </span>-o<span class=\"w\"> </span>random.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--mapdir<span class=\"w\"> </span>/::/<span class=\"w\"> </span>--<span class=\"w\"> </span>random.wasm\nInvalid<span class=\"w\"> </span>argument:<span class=\"w\"> </span>Invalid<span class=\"w\"> </span>argument\n</code></pre></div>\n<p>If the same program is compiled by host gcc, it runs fine. Also, it works with nodejs/uvwasi.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 7.0.0</p>\n<p>Operating system: Ubuntu 22.10</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 351487370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682039585
    }
]