[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<p>OSS-Fuzz: <a href=\"https://oss-fuzz.com/testcase-detail/4625103710715904\">https://oss-fuzz.com/testcase-detail/4625103710715904</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">interpreter</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"n\">StepError</span><span class=\"p\">(</span><span class=\"n\">UnknownFunction</span><span class=\"p\">(</span><span class=\"n\">fn0</span><span class=\"p\">)))</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">fuzz</span><span class=\"o\">/</span><span class=\"n\">fuzz_targets</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">93</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/blob/d620705a323e3da59bd90473b4e627c8502b1255/fuzz/fuzz_targets/cranelift-fuzzgen.rs#L93):36</span>\n</code></pre></div>\n<p>input:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">/////wH/////AP8B64L/</span>\n</code></pre></div>\n<p>cc @afonso360 </p>\n</blockquote>",
        "id": 294896698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661269908
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758#issuecomment-1224297161\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<p>Formatted: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ubuntu</span><span class=\"o\">@</span><span class=\"n\">instance</span><span class=\"o\">-</span><span class=\"mi\">20220805</span><span class=\"o\">-</span><span class=\"mi\">0848</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">fuzz</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"n\">fmt</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"mf\">4758.</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"></span>\n\n<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"err\">`</span>:\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Fuzzgen</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"w\"></span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_llvm_abi_extensions</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Note</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">below</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">simply</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">placeholder</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">probably</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think this was introduced in #4155, and at the time I didn't think it would cause issues. I think the optimal fix for this is #4667 and subsequently adding support for generating multiple functions in fuzzgen (ensuring that we only produce valid references). </p>\n<p>That way we don't have to disable important features for the <code>cranelift-icache</code> fuzzer.</p>\n</blockquote>",
        "id": 294901941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661271446
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758#issuecomment-1224297161\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<p>Formatted: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ubuntu</span><span class=\"o\">@</span><span class=\"n\">instance</span><span class=\"o\">-</span><span class=\"mi\">20220805</span><span class=\"o\">-</span><span class=\"mi\">0848</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">fuzz</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"n\">fmt</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"mf\">4758.</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"></span>\n\n<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"err\">`</span>:\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Fuzzgen</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"w\"></span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_llvm_abi_extensions</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Note</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">below</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">simply</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">placeholder</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">probably</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think this was introduced in #4155, and at the time I didn't think it would cause issues. I think the optimal fix for this is #4667 and subsequently adding support for generating multiple functions in fuzzgen (and ensuring that we only produce valid references). </p>\n<p>That way we don't have to disable important features for the <code>cranelift-icache</code> fuzzer.</p>\n</blockquote>",
        "id": 294901977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661271462
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758#issuecomment-1224305299\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<p>Oh! I was just looking at that part of the function generator last week, and wondering how that ever worked. I didn't realize it was introduced in the icache PR.</p>\n</blockquote>",
        "id": 294903156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661271826
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758#issuecomment-1227521380\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<p>@bnjbvr and @cfallin: The incremental cache PR added support to cranelift_fuzzgen for generating random function calls. This is fine for the icache fuzz target which only compiles functions, so it doesn't care if the target of the call exists. But the fuzzgen target tries to run the generated functions so it needs the callee to exist.</p>\n<p>How important is testing function calls to our confidence that the incremental cache is working? If we just turn off that part of the function generator, would that significantly reduce our confidence that we can detect bugs in the incremental cache?</p>\n<p>Maybe we can parameterize the function generator over a list of other functions and libcalls that it can use. In the fuzzgen target we'd currently pass an empty list, and as work like #4667 develops we can add support there later. Then we'd move the current implementation of <code>generate_funcrefs</code> into the icache target and pass its output into the function generator. Does that seem sensible?</p>\n</blockquote>",
        "id": 295269873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661446207
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758#issuecomment-1227523654\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<blockquote>\n<p>How important is testing function calls to our confidence that the incremental cache is working?</p>\n</blockquote>\n<p>One of my main worries with a previous version of the incremental cache PR was that it would misbehave around function calls, so I did say pretty important.</p>\n</blockquote>",
        "id": 295270251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661446347
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758#issuecomment-1227533723\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<p>I think we should be able to disable function calls by altering the <code>funcrefs_per_func</code> config on the fuzzer. I think if we don't generate function references we also never generate <code>call</code>'s. And its already a control that's built in so we just need to alter it slightly</p>\n</blockquote>",
        "id": 295271593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661446776
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758#issuecomment-1227534471\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<p>Yes, one of two (IIRC?) ways that we are \"resilient\" in the incremental cache is when specific function references change but the shape of the CLIF remains the same; so we definitely want to test this. Luckily it sounds from above like it's pretty easy to parameterize this differently in different fuzz targets!</p>\n</blockquote>",
        "id": 295271807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661446828
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758#issuecomment-1227535394\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<p>This has the same issue as the other PR's that it changes the input format, so we won't be able to merge it, but its a pretty easy solution for now.</p>\n</blockquote>",
        "id": 295272001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661446894
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">issue #4758</a>:</p>\n<blockquote>\n<p>OSS-Fuzz: <a href=\"https://oss-fuzz.com/testcase-detail/4625103710715904\">https://oss-fuzz.com/testcase-detail/4625103710715904</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">interpreter</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"n\">StepError</span><span class=\"p\">(</span><span class=\"n\">UnknownFunction</span><span class=\"p\">(</span><span class=\"n\">fn0</span><span class=\"p\">)))</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">fuzz</span><span class=\"o\">/</span><span class=\"n\">fuzz_targets</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">93</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/blob/d620705a323e3da59bd90473b4e627c8502b1255/fuzz/fuzz_targets/cranelift-fuzzgen.rs#L93):36</span>\n</code></pre></div>\n<p>input:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">/////wH/////AP8B64L/</span>\n</code></pre></div>\n<p>cc @afonso360 </p>\n</blockquote>",
        "id": 296003985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661808628
    }
]