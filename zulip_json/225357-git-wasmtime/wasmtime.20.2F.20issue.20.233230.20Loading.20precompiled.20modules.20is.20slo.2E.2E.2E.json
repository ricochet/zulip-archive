[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p>Currently today loading a precompiled module from disk or some other location is actually a relatively slow task in Wasmtime. While much faster than compiling a module, we can do much better! I'm going to open this meta-issue for those interested in tracking some progress I'm doing here. Over the next week or so I'm going to open PRs which migrate Wasmtime towards a more \"mmap-and-go\" approach where all we need to do to load a module is to mmap it into memory, no copies necessary.</p>\n<p>Currently as-is of the time of this opening we're pretty far away from this world. On my quick-and-dirty branch to implement this I'm seeing a roughly 10x improvement in load times for precompiled modules. While this doesn't have every possible improvement, it's a lot further than where we are today!</p>\n<p>My general goal for where I'm going to go with this refactoring is:</p>\n<ul>\n<li>Decode far less data with <code>bincode</code> itself</li>\n<li>Most data is usable as-is from the on-disk format, no deserialization necessary</li>\n<li>Heavy usage of <code>object</code> as a crate and the ELF file format. While not strictly necessary the <code>object</code> crate has lots of nice utilities and I think this also makes us more amenable in some possible future to generate raw object files usable for linking. Additionally I think it's extremely useful to be able to inspect the raw output of compliation with standard tools like <code>objdump</code>, which cannot be done today.</li>\n<li>Far fewer copies of data between places. The main goal is that there should be one \"source of truth\" for a module which is the only location a module's data resides in.</li>\n</ul>\n<p>Lots more details will be apparent as I open PRs and we debate the finer points, of course. For those intersted in the existence of PRs feel free to subscribe to this issue and I'll post individual PRs here, and that way you don't have to get all the review noise necessarily.</p>\n<p>cc @fitzgen, @peterhuene, @cfallin </p>\n</blockquote>",
        "id": 250405120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629749600
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-904181410\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3231\">https://github.com/bytecodealliance/wasmtime/pull/3231</a> is the first PR down this road.</p>\n</blockquote>",
        "id": 250421285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629758333
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-904671208\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3235\">https://github.com/bytecodealliance/wasmtime/pull/3235</a> is the next</p>\n</blockquote>",
        "id": 250489363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629813794
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-904737122\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3236\">https://github.com/bytecodealliance/wasmtime/pull/3236</a> is removing most of the need to parse symbol names at runtime</p>\n</blockquote>",
        "id": 250500908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629818413
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-905531726\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3239\">https://github.com/bytecodealliance/wasmtime/pull/3239</a> is converting compliation artifacts to purely a list of bytes</p>\n</blockquote>",
        "id": 250625013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629900368
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-905585015\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3240\">https://github.com/bytecodealliance/wasmtime/pull/3240</a> is a custom encoding of address maps into a section of the final image</p>\n</blockquote>",
        "id": 250632617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629903751
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-905607779\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3241\">https://github.com/bytecodealliance/wasmtime/pull/3241</a> is moving trap information into an image section</p>\n</blockquote>",
        "id": 250635411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629905126
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-906456099\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3246\">https://github.com/bytecodealliance/wasmtime/pull/3246</a> is reducing dependencies on <code>finished_functions</code>, a map we build at load-time</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3247\">https://github.com/bytecodealliance/wasmtime/pull/3247</a> is in the same vein</p>\n</blockquote>",
        "id": 250779246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629987569
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-906767470\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3253\">https://github.com/bytecodealliance/wasmtime/pull/3253</a> is the replacement for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3236\">https://github.com/bytecodealliance/wasmtime/pull/3236</a>, removing symbol name parsing in <code>CodeMemory</code></p>\n</blockquote>",
        "id": 250845769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630014683
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-906779330\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">https://github.com/bytecodealliance/wasmtime/pull/3254</a> is the removal of relocations from the final image, and also optimizing all existing wasm modules with intra-module function calls to use more predictable <code>call</code> instructions which CPUs should optimize better.</p>\n</blockquote>",
        "id": 250848839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630016076
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-907279933\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257\">https://github.com/bytecodealliance/wasmtime/pull/3257</a> changes the serialization format to be mmap-friendly and also a native ELF file</p>\n</blockquote>",
        "id": 250947327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630077546
    },
    {
        "content": "<p>alexcrichton assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p>Currently today loading a precompiled module from disk or some other location is actually a relatively slow task in Wasmtime. While much faster than compiling a module, we can do much better! I'm going to open this meta-issue for those interested in tracking some progress I'm doing here. Over the next week or so I'm going to open PRs which migrate Wasmtime towards a more \"mmap-and-go\" approach where all we need to do to load a module is to mmap it into memory, no copies necessary.</p>\n<p>Currently as-is of the time of this opening we're pretty far away from this world. On my quick-and-dirty branch to implement this I'm seeing a roughly 10x improvement in load times for precompiled modules. While this doesn't have every possible improvement, it's a lot further than where we are today!</p>\n<p>My general goal for where I'm going to go with this refactoring is:</p>\n<ul>\n<li>Decode far less data with <code>bincode</code> itself</li>\n<li>Most data is usable as-is from the on-disk format, no deserialization necessary</li>\n<li>Heavy usage of <code>object</code> as a crate and the ELF file format. While not strictly necessary the <code>object</code> crate has lots of nice utilities and I think this also makes us more amenable in some possible future to generate raw object files usable for linking. Additionally I think it's extremely useful to be able to inspect the raw output of compliation with standard tools like <code>objdump</code>, which cannot be done today.</li>\n<li>Far fewer copies of data between places. The main goal is that there should be one \"source of truth\" for a module which is the only location a module's data resides in.</li>\n</ul>\n<p>Lots more details will be apparent as I open PRs and we debate the finer points, of course. For those intersted in the existence of PRs feel free to subscribe to this issue and I'll post individual PRs here, and that way you don't have to get all the review noise necessarily.</p>\n<p>cc @fitzgen, @peterhuene, @cfallin </p>\n</blockquote>",
        "id": 251245926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630336974
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-908446255\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3265\">https://github.com/bytecodealliance/wasmtime/pull/3265</a> is the final substantive step which removes the copy we have from an ELF image into executable memory, instead just using the executable memory as-is in the ELF image.</p>\n</blockquote>",
        "id": 251248174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630337805
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-908462154\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3266\">https://github.com/bytecodealliance/wasmtime/pull/3266</a> is the actual final addition, a <code>deserialize_file</code> method</p>\n<p>After everything lands we should have gone from ~300ms to load a module I was looking at to ~1ms, yay!</p>\n</blockquote>",
        "id": 251251091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630339044
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-910431912\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3275\">https://github.com/bytecodealliance/wasmtime/pull/3275</a> is take 2 of #3254 </p>\n</blockquote>",
        "id": 251584950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630512407
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230#issuecomment-910528582\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a>:</p>\n<blockquote>\n<p>This is a table of the speedups we'll be getting once #3275 lands. Each row is a different wasm (found via the internet) file compiled by Wasmtime either on AArch64 or x86_64. The v0.29.0 numbers are measured using that commit deserializing a slice of bytes, and then there's two columns for after #3275: one for deserializing from memory (as before) and another for deserializing from a file (which isn't implemented in v0.29.0 but is on <code>main</code>).</p>\n<p>The tl;dr; is that we're around 100x faster than before, yay! Given that I'm happy with where this is at, so I'm going to close this, and I'll take care of final bits and pieces on #3275.</p>\n<p>&lt;img width=\"695\" alt=\"Screen Shot 2021-09-01 at 1 03 16 PM\" src=\"<a href=\"https://user-images.githubusercontent.com/64996/131721185-993478c0-4fb4-4e3f-a599-aad51b9ac4a4.png\">https://user-images.githubusercontent.com/64996/131721185-993478c0-4fb4-4e3f-a599-aad51b9ac4a4.png</a>\"&gt;</p>\n</blockquote>",
        "id": 251603457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630519606
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3230\">issue #3230</a> (assigned to alexcrichton):</p>\n<blockquote>\n<p>Currently today loading a precompiled module from disk or some other location is actually a relatively slow task in Wasmtime. While much faster than compiling a module, we can do much better! I'm going to open this meta-issue for those interested in tracking some progress I'm doing here. Over the next week or so I'm going to open PRs which migrate Wasmtime towards a more \"mmap-and-go\" approach where all we need to do to load a module is to mmap it into memory, no copies necessary.</p>\n<p>Currently as-is of the time of this opening we're pretty far away from this world. On my quick-and-dirty branch to implement this I'm seeing a roughly 10x improvement in load times for precompiled modules. While this doesn't have every possible improvement, it's a lot further than where we are today!</p>\n<p>My general goal for where I'm going to go with this refactoring is:</p>\n<ul>\n<li>Decode far less data with <code>bincode</code> itself</li>\n<li>Most data is usable as-is from the on-disk format, no deserialization necessary</li>\n<li>Heavy usage of <code>object</code> as a crate and the ELF file format. While not strictly necessary the <code>object</code> crate has lots of nice utilities and I think this also makes us more amenable in some possible future to generate raw object files usable for linking. Additionally I think it's extremely useful to be able to inspect the raw output of compliation with standard tools like <code>objdump</code>, which cannot be done today.</li>\n<li>Far fewer copies of data between places. The main goal is that there should be one \"source of truth\" for a module which is the only location a module's data resides in.</li>\n</ul>\n<p>Lots more details will be apparent as I open PRs and we debate the finer points, of course. For those intersted in the existence of PRs feel free to subscribe to this issue and I'll post individual PRs here, and that way you don't have to get all the review noise necessarily.</p>\n<p>cc @fitzgen, @peterhuene, @cfallin </p>\n</blockquote>",
        "id": 251603468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630519610
    }
]