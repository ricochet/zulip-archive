[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1209996371\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 292674552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660088349
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1217799706\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<p>@jameysharp @cfallin I think this is ready, would you guys be able to review it?</p>\n</blockquote>",
        "id": 293866976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660730602
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1217799706\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<p>@jameysharp @cfallin I think this is ready, would you be able to review it?</p>\n</blockquote>",
        "id": 293867800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660730953
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1218316575\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<blockquote>\n<p>So far my only complaint is that the 16-character limit on function names forces changing a lot of tests, when I would think it'd be better to just increase the limit on name length</p>\n</blockquote>\n<p>Historically at least, the limit was to keep the size of <code>ExternalName</code> reasonable; these are embedded and carried in the ir::Function and in \"production\" use, are two <code>u32</code>s only (the <code>u0:0</code> format) because the embedder is supposed to own names and Cranelift handles indices only. I wasn't around for that design decision and I'm not sure if it would make sense to support a boxed variant for the \"one-off test function with an owned name\" case; that would be the way to go, IMHO, rather than bumping the limit and inflating the fixed-size field.</p>\n</blockquote>",
        "id": 293945192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660758165
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1218325505\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<p>Maybe the test-runner should keep a mapping between heap-allocated names and the \"pair of u32\" representation, just like an embedder would?</p>\n</blockquote>",
        "id": 293946855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660758765
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1218328143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<blockquote>\n<p>Maybe the test-runner should keep a mapping between heap-allocated names and the \"pair of u32\" representation, just like an embedder would?</p>\n</blockquote>\n<p>I think this would be a good idea, if we can remove <code>TestCase</code> from <code>ExternalName</code> I think the struct size goes down, so it could potentially reduce memory usage and speedup some stuff!</p>\n</blockquote>",
        "id": 293947318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660758949
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1218328143\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<blockquote>\n<p>Maybe the test-runner should keep a mapping between heap-allocated names and the \"pair of u32\" representation, just like an embedder would?</p>\n</blockquote>\n<p>I think this would be a good idea, if we can remove <code>TestCase</code> from <code>ExternalName</code> I think the struct size goes down, so it could potentially reduce memory usage and speedup some stuff!</p>\n<p>Edit: Had a look around the code, and we probably also need to change the parser and a few other things for this.<br>\nI think it would be best if it was a separate PR, I can put this on hold while I try to figure it out.</p>\n</blockquote>",
        "id": 293950729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660760252
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1219673349\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think this would be a good idea, if we can remove <code>TestCase</code> from <code>ExternalName</code> I think the struct size goes down, so it could potentially reduce memory usage and speedup some stuff!</p>\n</blockquote>\n<p>I can confirm it's currently 20 bytes with <code>TestCase</code>, and only 8 bytes without, so that sounds good!</p>\n<p>I've just done an experiment, reducing the length limit of test-case names to 6 bytes, so it fits inside an 8-byte <code>ExternalName</code> without having to make all the changes needed to actually remove <code>TestCase</code>. I'm running <code>valgrind --tool=dhat target/release/wasmtime compile</code> on the pulldown-cmark benchmark from Sightglass, with the wasmtime CLI built with <code>--no-default-features</code> to disable parallel compilation and other sources of nondeterminism.</p>\n<p>With that experimental setup, the smaller <code>ExternalName</code> makes a positive difference, but it's... small. Total bytes allocated drops by 40,504 bytes out of about 171MiB. Maximum heap size drops by 1,096 bytes out of about 12MiB. And the program executes about 1 million fewer instructions, out of close to 2 billion.</p>\n<p>So I think this is totally worth doing, but... don't get your hopes up for much improvement in memory usage or compile speed. :grin: I was really curious which way this would go, and it was fun doing the quick experiment.</p>\n</blockquote>",
        "id": 294117513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660838729
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1224514737\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<blockquote>\n<p>With that experimental setup, the smaller ExternalName makes a positive difference, but it's... small. Total bytes allocated drops by 40,504 bytes out of about 171MiB. Maximum heap size drops by 1,096 bytes out of about 12MiB. And the program executes about 1 million fewer instructions, out of close to 2 billion.</p>\n</blockquote>\n<p>That's... not as much as I hoped for <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>. Thanks for checking anyway!</p>\n<p>I started working on this refactor a couple days ago (<a href=\"https://github.com/afonso360/wasmtime/tree/remove-testnames\">in progress branch</a>), but it's going to touch a lot of stuff and I don't think its going to be ready anytime soon.</p>\n<p>@jameysharp Would it be ok to merge this with the test renames? I'd like to build on this to fix <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">https://github.com/bytecodealliance/wasmtime/issues/4758</a> but its going to take a while if I have to do the refactor first and I'd prefer to use that time to fix the other fuzz issues.</p>\n</blockquote>",
        "id": 294921502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661278264
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1224754766\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<p>I was hesitant, but actually yeah, renaming the test functions to fit within the limit is fine. Let's just plan that later we'll do a partial revert to get the more descriptive test names back.</p>\n<p>One alternative that comes to mind is to leave the <code>TestCase</code> option in <code>ExternalName</code>, but make it a <code>Box&lt;[u8]&gt;</code> instead. Then <code>ExternalName</code> has the same size as it does now but hopefully it's easier to switch things over.</p>\n<p>I'm happy enough either way though.</p>\n<p>That said, I haven't had a chance to review this more carefully yet, so I'm not ready to merge it. Maybe @cfallin can get it into his review queue but he's got a lot on his plate. So maybe we can chat in #4758 about whether there are easier ways to fix the immediate bug there.</p>\n</blockquote>",
        "id": 294936952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661284438
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1225451906\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<p>I've filed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4766\">https://github.com/bytecodealliance/wasmtime/issues/4766</a> to track this refactor.</p>\n<blockquote>\n<p>One alternative that comes to mind is to leave the TestCase option in ExternalName, but make it a Box&lt;[u8]&gt; instead. Then ExternalName has the same size as it does now but hopefully it's easier to switch things over.</p>\n</blockquote>\n<p>Thanks for picking this up! I didn't even consider that as an option, but its a great middle step and solves the immediate issue.</p>\n<blockquote>\n<p>That said, I haven't had a chance to review this more carefully yet, so I'm not ready to merge it. Maybe @cfallin can get it into his review queue but he's got a lot on his plate. So maybe we can chat in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4758\">https://github.com/bytecodealliance/wasmtime/issues/4758</a> about whether there are easier ways to fix the immediate bug there.</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 295007013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661332434
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1228992383\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<p>Well, darn. This seems to have broken <code>cranelift-fuzzgen</code>, and I don't understand why. But 20 out of 50 cases I tested from my existing corpus crash now, and it looks like they're all with one of these two messages:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Undeclared</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">referenced</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">1</span><span class=\"o\">!'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"o\">/</span><span class=\"n\">fuzz_targets</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">73</span>:<span class=\"mi\">53</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Duplicate</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"o\">!'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"o\">/</span><span class=\"n\">fuzz_targets</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">76</span>:<span class=\"mi\">10</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 295518622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661550811
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667#issuecomment-1229025813\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4667\">issue #4667</a>:</p>\n<blockquote>\n<p>Okay, I'm reasonably convinced that \"Undeclared function u0:0 is referenced by u0:1\" has the same root cause as #4757 and #4758, although it's a different symptom. Previously these undefined functions caused failures if the interpreter tried to actually call them, or if the JIT tried to compile a call instruction referencing them. Now the new code also fails if there's a function signature declared, even if that function is never called.</p>\n<p>I've opened PR #4795 for the other error. It's a small fix.</p>\n</blockquote>",
        "id": 295525479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661554610
    }
]