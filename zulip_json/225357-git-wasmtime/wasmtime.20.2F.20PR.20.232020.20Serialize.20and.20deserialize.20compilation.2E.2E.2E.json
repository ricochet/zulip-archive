[
    {
        "content": "<p>yurydelendik opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020\">PR #2020</a> from <code>serde-module-example</code> to <code>main</code>:</p>\n<blockquote>\n<p>Fixes #1779 </p>\n<p>This is final patch in series to allow direct access to the compiled code.</p>\n<ul>\n<li>Added <code>compile_and_serialize</code> API function that allows to save <code>CompilationArtifacts</code> object in binary format (+target/config fingerprint)</li>\n<li>Added unsafe <code>Module::deserialize</code> API function that allows to read the above data and create <code>Module</code> object. Marked unsafe since it does not provide any guarantees for safety of the ingested code.</li>\n<li>Portability limitation is that producer and consumer's<code>Config</code>s must have the same host triple, codegen flags, and <code>Tunables</code>. (Can we ignore <code>CompilerStrategy</code>?)</li>\n</ul>\n<p>PR opened for feedback.</p>\n</blockquote>",
        "id": 203895339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594765163
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020\">PR #2020</a> from <code>serde-module-example</code> to <code>main</code>:</p>\n<blockquote>\n<p>Fixes #1779 </p>\n<p>This is final patch in series to allow direct access to the compiled code.</p>\n<ul>\n<li>Added <code>compile_and_serialize</code> API function that allows to save <code>CompilationArtifacts</code> object in binary format (+target/config fingerprint)</li>\n<li>Added unsafe <code>Module::deserialize</code> API function that allows to read the above data and create <code>Module</code> object. Marked unsafe since it does not provide any guarantees for safety of the ingested code.</li>\n<li>Portability limitation is that producer and consumer's<code>Config</code>s must have the same host triple, codegen flags, and <code>Tunables</code>. (Can we ignore <code>CompilerStrategy</code>?)</li>\n</ul>\n<p>PR opened for feedback.</p>\n</blockquote>",
        "id": 203996734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594838994
    },
    {
        "content": "<p><strong>yurydelendik</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020\">PR #2020</a> as ready for review.</p>",
        "id": 204000064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594840590
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-449266678\">PR Review</a>.</p>",
        "id": 204002440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594841827
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-449266678\">PR Review</a>.</p>",
        "id": 204002442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594841827
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455291377\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Would it be possible to add this as a method as <code>Module::serialize</code> instead of a top-level function?</p>\n<p>Additionally, I think it may be best to stick to in-memory buffers for now since the entire <code>Module</code> has to be resident in memory anyway. Using <code>Read</code> and <code>Write</code> can be somewhat tricky so I'm not sure we want to go there just yet (we could always add support later though if needed)</p>\n</blockquote>",
        "id": 204002443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594841827
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455292972\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also like serialize I think it may be best to be conservative and start out with a byte slice instead of a <code>Read</code></p>\n</blockquote>",
        "id": 204002444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594841828
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455291845\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this include <code>env!(\"CARGO_PKG_VERSION\")</code> as well to catch accidental bugs of reusing across wasmtime versions?</p>\n</blockquote>",
        "id": 204002445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594841828
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455292320\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is this intended to be <code>unsafe</code>? Ideally we'd have this be a safe function I think.</p>\n</blockquote>",
        "id": 204002446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594841828
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455292095\">PR Review Comment</a>:</p>\n<blockquote>\n<p>s/tripple/triple/</p>\n</blockquote>",
        "id": 204002448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594841828
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455293464\">PR Review Comment</a>:</p>\n<blockquote>\n<p>IIRC the C API already has <code>wasm_module_{serialize,deserialize}</code> so could those be implemented instead? (although these may also be good to keep around for better error messages)</p>\n</blockquote>",
        "id": 204002449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594841828
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-449283816\">PR Review</a>.</p>",
        "id": 204004593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594842966
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455305292\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would it be possible to add this as a method as Module::serialize instead of a top-level function?</p>\n</blockquote>\n<p>Currently, I'm discarding some artifacts once <code>CompiledModule</code> is created due to memory usage. Keeping them around maybe wasteful at the moment. Also it is why I chose <code>wasmtime_compile_and_serialize</code> instead of <code>wasmtime_module_serialize</code>.</p>\n</blockquote>",
        "id": 204004594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594842966
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-449285807\">PR Review</a>.</p>",
        "id": 204004944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594843146
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455306857\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is this intended to be <code>unsafe</code>? Ideally we'd have this be a safe function I think.</p>\n</blockquote>\n<p>I mentioned that it is marked unsafe since it does not provide any guarantees for safety of the ingested code. We don't want deal with code signing and currently rely on caller to that.</p>\n</blockquote>",
        "id": 204004945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594843146
    },
    {
        "content": "<p>tschneidereit submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-449739186\">PR Review</a>.</p>",
        "id": 204069133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594897061
    },
    {
        "content": "<p>tschneidereit created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455701948\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I wonder if we really want to mark this as unsafe. I get the intent behind it, but it's worth noting that the current API that transparently loads a cache entry if that exists has the same issue: since anybody could put whatever they want into the cache, the same \"unsafety\" exists.</p>\n<p>@sunfishcode what's your take on this, do we have enough of a secure setup in place for the case where we are fully in control of the pipeline from compiling a wasm file to running it that we should call out the gap in safety like this?</p>\n</blockquote>",
        "id": 204069134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594897061
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-449995591\">PR Review</a>.</p>",
        "id": 204105026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594915457
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455899553\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh sorry I missed the comment in the PR description! I would personally feel though that we shouldn't have <code>unsafe</code> here. I think it's a good point to document that arbitrary bytes here is not truly safe and this shouldn't be fed untrusted code, but that feels like such a far away enough use case that it's not worth making this <code>unsafe</code> as a result.</p>\n</blockquote>",
        "id": 204105027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594915457
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-449996306\">PR Review</a>.</p>",
        "id": 204105105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594915499
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455900020\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could you expand a bit on what's not kept in memory? What's the scale of the memory usage improvement as well?</p>\n</blockquote>",
        "id": 204105106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594915500
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-450011707\">PR Review</a>.</p>",
        "id": 204107478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594916550
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455912109\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could you expand a bit on what's not kept in memory?</p>\n</blockquote>\n<p>Currently the answer is ELF image is modified by fixing relocation, so I'm just patching data directly. That makes image non-serializable as is. It needs to be re-cloned and \"unpatched\" to be serializable. Also there unwind_info we don't need to keep after <code>CompiledModule</code>. FWIW I'm currently working on both of these problems, but there are require some time and code to address.</p>\n</blockquote>",
        "id": 204107479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594916550
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r455912109\">PR Review Comment</a>.</p>",
        "id": 204107620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594916618
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-450157731\">PR Review</a>.</p>",
        "id": 204132319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594928173
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r456028114\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hm ok from an API perspective I think it'd be best to have <code>Module::serialize</code> for now, and perhaps we can address the performance issues later?</p>\n</blockquote>",
        "id": 204132320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594928173
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020\">PR #2020</a> from <code>serde-module-example</code> to <code>main</code>:</p>\n<blockquote>\n<p>Fixes #1779 </p>\n<p>This is final patch in series to allow direct access to the compiled code.</p>\n<ul>\n<li>Added <code>compile_and_serialize</code> API function that allows to save <code>CompilationArtifacts</code> object in binary format (+target/config fingerprint)</li>\n<li>Added unsafe <code>Module::deserialize</code> API function that allows to read the above data and create <code>Module</code> object. Marked unsafe since it does not provide any guarantees for safety of the ingested code.</li>\n<li>Portability limitation is that producer and consumer's<code>Config</code>s must have the same host triple, codegen flags, and <code>Tunables</code>. (Can we ignore <code>CompilerStrategy</code>?)</li>\n</ul>\n<p>PR opened for feedback.</p>\n</blockquote>",
        "id": 204146195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594935253
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020\">PR #2020</a> from <code>serde-module-example</code> to <code>main</code>:</p>\n<blockquote>\n<p>Fixes #1779 </p>\n<p>This is final patch in series to allow direct access to the compiled code.</p>\n<ul>\n<li>Added <code>compile_and_serialize</code> API function that allows to save <code>CompilationArtifacts</code> object in binary format (+target/config fingerprint)</li>\n<li>Added unsafe <code>Module::deserialize</code> API function that allows to read the above data and create <code>Module</code> object. Marked unsafe since it does not provide any guarantees for safety of the ingested code.</li>\n<li>Portability limitation is that producer and consumer's<code>Config</code>s must have the same host triple, codegen flags, and <code>Tunables</code>. (Can we ignore <code>CompilerStrategy</code>?)</li>\n</ul>\n<p>PR opened for feedback.</p>\n</blockquote>",
        "id": 204150767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594938087
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-450256916\">PR Review</a>.</p>",
        "id": 204150952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594938222
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#discussion_r456111901\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I took shortcut and start keeping data in <code>CompiledModule</code> that allows implement <code>Module::serialize</code>. I'll continue working on optimizing this part independent of this PR.</p>\n</blockquote>",
        "id": 204150954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594938222
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020\">PR #2020</a> from <code>serde-module-example</code> to <code>main</code>:</p>\n<blockquote>\n<p>Fixes #1779 </p>\n<p>This is final patch in series to allow direct access to the compiled code.</p>\n<ul>\n<li>Added <code>compile_and_serialize</code> API function that allows to save <code>CompilationArtifacts</code> object in binary format (+target/config fingerprint)</li>\n<li>Added unsafe <code>Module::deserialize</code> API function that allows to read the above data and create <code>Module</code> object. Marked unsafe since it does not provide any guarantees for safety of the ingested code.</li>\n<li>Portability limitation is that producer and consumer's<code>Config</code>s must have the same host triple, codegen flags, and <code>Tunables</code>. (Can we ignore <code>CompilerStrategy</code>?)</li>\n</ul>\n<p>PR opened for feedback.</p>\n</blockquote>",
        "id": 204154989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594941656
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020\">PR #2020</a> from <code>serde-module-example</code> to <code>main</code>:</p>\n<blockquote>\n<p>Fixes #1779 </p>\n<p>This is final patch in series to allow direct access to the compiled code.</p>\n<ul>\n<li>Added <code>compile_and_serialize</code> API function that allows to save <code>CompilationArtifacts</code> object in binary format (+target/config fingerprint)</li>\n<li>Added unsafe <code>Module::deserialize</code> API function that allows to read the above data and create <code>Module</code> object. Marked unsafe since it does not provide any guarantees for safety of the ingested code.</li>\n<li>Portability limitation is that producer and consumer's<code>Config</code>s must have the same host triple, codegen flags, and <code>Tunables</code>. (Can we ignore <code>CompilerStrategy</code>?)</li>\n</ul>\n<p>PR opened for feedback.</p>\n</blockquote>",
        "id": 204155042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594941699
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020#pullrequestreview-452741918\">PR Review</a>.</p>",
        "id": 204587761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595357719
    },
    {
        "content": "<p>yurydelendik merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2020\">PR #2020</a>.</p>",
        "id": 204596745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595361952
    }
]