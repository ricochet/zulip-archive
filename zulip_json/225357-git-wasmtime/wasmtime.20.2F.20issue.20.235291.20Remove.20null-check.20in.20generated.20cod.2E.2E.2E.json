[
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291\">issue #5291</a>:</p>\n<blockquote>\n<p>Currently when translating the <code>call_indirect</code> instruction Wasmtime will <a href=\"https://github.com/bytecodealliance/wasmtime/blob/56daa8a199ab9a79b6404c5a9cd551497594f31b/crates/cranelift/src/func_environ.rs#L1551-L1554\">insert a null-check</a> to ensure that we're not calling a null function pointer. Because our representation of a null function pointer is literally a null pointer, however, I think we can actually skip this check entirely due to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/56daa8a199ab9a79b6404c5a9cd551497594f31b/crates/cranelift/src/func_environ.rs#L1556-L1563\">next instruction</a> being guaranteed to segfault if it's actually a null pointer.</p>\n<p>I don't think this is necessarily as easy as simply removing the null pointer check, however, since I think the <code>load</code> needs to at least somehow be annotated with the proper trap code and probably \"this can segfault\", which I'm not precisely sure how to do. This could be a nice way to clean up the generated code for <code>call_indirect</code> slightly thought which is already somewhat large I believe.</p>\n</blockquote>",
        "id": 310641988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668701122
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291\">issue #5291</a>:</p>\n<blockquote>\n<p>Currently when translating the <code>call_indirect</code> instruction Wasmtime will <a href=\"https://github.com/bytecodealliance/wasmtime/blob/56daa8a199ab9a79b6404c5a9cd551497594f31b/crates/cranelift/src/func_environ.rs#L1551-L1554\">insert a null-check</a> to ensure that we're not calling a null function pointer. Because our representation of a null function pointer is literally a null pointer, however, I think we can actually skip this check entirely due to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/56daa8a199ab9a79b6404c5a9cd551497594f31b/crates/cranelift/src/func_environ.rs#L1556-L1563\">next instruction</a> being guaranteed to segfault if it's actually a null pointer.</p>\n<p>I don't think this is necessarily as easy as simply removing the null pointer check, however, since I think the <code>load</code> needs to at least somehow be annotated with the proper trap code and probably \"this can segfault\", which I'm not precisely sure how to do. This could be a nice way to clean up the generated code for <code>call_indirect</code> slightly thought which is already somewhat large I believe.</p>\n</blockquote>",
        "id": 310641989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668701122
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291\">issue #5291</a>:</p>\n<blockquote>\n<p>Currently when translating the <code>call_indirect</code> instruction Wasmtime will <a href=\"https://github.com/bytecodealliance/wasmtime/blob/56daa8a199ab9a79b6404c5a9cd551497594f31b/crates/cranelift/src/func_environ.rs#L1551-L1554\">insert a null-check</a> to ensure that we're not calling a null function pointer. Because our representation of a null function pointer is literally a null pointer, however, I think we can actually skip this check entirely due to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/56daa8a199ab9a79b6404c5a9cd551497594f31b/crates/cranelift/src/func_environ.rs#L1556-L1563\">next instruction</a> being guaranteed to segfault if it's actually a null pointer.</p>\n<p>I don't think this is necessarily as easy as simply removing the null pointer check, however, since I think the <code>load</code> needs to at least somehow be annotated with the proper trap code and probably \"this can segfault\", which I'm not precisely sure how to do. This could be a nice way to clean up the generated code for <code>call_indirect</code> slightly thought which is already somewhat large I believe.</p>\n</blockquote>",
        "id": 310641990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668701122
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291#issuecomment-1319126748\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291\">issue #5291</a>:</p>\n<blockquote>\n<p>Not sure if we have a bit free in <code>MemFlags</code> but if so, we could have a bit that means \"the trap code should be indirect-call-to-null-rather-than-heap-out-of-bounds\".</p>\n</blockquote>",
        "id": 310687608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668714764
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291#issuecomment-1319169074\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291\">issue #5291</a>:</p>\n<blockquote>\n<p><code>MemFlags</code> is a u8 and already has 8 flags defined.</p>\n<p>But several flags are mutually exclusive, so we could encode them more concisely. In particular, the <code>Heap</code>, <code>Table</code>, and <code>Vmctx</code> flags represent four states (counting \"other\") which could be encoded in two bits instead of three.</p>\n</blockquote>",
        "id": 310694498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668717230
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291#issuecomment-2002537861\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291\">issue #5291</a>:</p>\n<blockquote>\n<p>At some point we widened <code>MemFlags</code> to 16 bits, and in #8134 we added a <code>MemFlags</code> bit for indicating another trap-code, so we could do something similar for this case too.</p>\n<p>That means there are four cases (can't trap, or could trap with one of three different trap codes). I would kind of like to start packing these enumeration flags into groups of bits, so that this wouldn't change how many bits we're using in <code>MemFlags</code>.</p>\n<p>It wouldn't be the end of the world to add another bit for this though.</p>\n</blockquote>",
        "id": 427166529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710694583
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5291\">issue #5291</a>:</p>\n<blockquote>\n<p>Currently when translating the <code>call_indirect</code> instruction Wasmtime will <a href=\"https://github.com/bytecodealliance/wasmtime/blob/56daa8a199ab9a79b6404c5a9cd551497594f31b/crates/cranelift/src/func_environ.rs#L1551-L1554\">insert a null-check</a> to ensure that we're not calling a null function pointer. Because our representation of a null function pointer is literally a null pointer, however, I think we can actually skip this check entirely due to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/56daa8a199ab9a79b6404c5a9cd551497594f31b/crates/cranelift/src/func_environ.rs#L1556-L1563\">next instruction</a> being guaranteed to segfault if it's actually a null pointer.</p>\n<p>I don't think this is necessarily as easy as simply removing the null pointer check, however, since I think the <code>load</code> needs to at least somehow be annotated with the proper trap code and probably \"this can segfault\", which I'm not precisely sure how to do. This could be a nice way to clean up the generated code for <code>call_indirect</code> slightly thought which is already somewhat large I believe.</p>\n</blockquote>",
        "id": 427564229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710791731
    }
]