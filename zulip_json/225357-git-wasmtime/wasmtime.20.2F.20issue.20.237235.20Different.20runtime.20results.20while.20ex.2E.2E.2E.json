[
    {
        "content": "<p><a href=\"https://github.com/luxinyi0105\">luxinyi0105</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7235\">Issue #7235</a>.</p>",
        "id": 396461424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697187642
    },
    {
        "content": "<p>luxinyi0105 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7235\">issue #7235</a>:</p>\n<blockquote>\n<h3>Describe the bug</h3>\n<p>While executing the given testcase with wasmtime and other runtime tools, the result are different.</p>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/luxinyi0105/wasm_runtime_test/raw/main/10-13.zip\">The given testcase</a> was simply mutated a wasm file, which was obtained by compiling C program generated with <code>Csmith</code> using <code>Emscripten Compiler</code>(Emcc). </p>\n<p>The original C program is <code>c_file.c</code>, the compilation results with Emscripten is <code>wasm_file.wasm</code>, and its wat format is <code>wat_file.wat</code>. </p>\n<p>We mutated the wat file to:<br>\n-- change all its <code>i32/i64/f64.sub</code> with <code>i32/i64/f64.add</code>;<br>\n-- change all its <code>i32/i64.and</code> with <code>i32/i64.xor</code>;<br>\n-- change all its <code>i32/i64.lt_s</code> with <code>i32/i64.ge_u</code>;<br>\n-- change all its <code>i32/i64.mul</code> with <code>i32/i64.div_u/div_s</code>;<br>\nThe result after mutation is <code>mutated_file.wat</code>, and its wasm format is <code>mutated_file.wasm</code>.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>~/Wasm_Runtime_Tools/wasmtime_13.0.0/target/debug/wasmtime<span class=\"w\"> </span>mutated_file.wasm\nError:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>run<span class=\"w\"> </span>main<span class=\"w\"> </span>module<span class=\"w\"> </span><span class=\"sb\">`</span>mutated_file.wasm<span class=\"sb\">`</span>\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span><span class=\"m\">0</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>invoke<span class=\"w\"> </span><span class=\"nb\">command</span><span class=\"w\"> </span>default\n<span class=\"w\">    </span><span class=\"m\">1</span>:<span class=\"w\"> </span>error<span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span>executing<span class=\"w\"> </span>at<span class=\"w\"> </span>wasm<span class=\"w\"> </span>backtrace:\n<span class=\"w\">           </span><span class=\"m\">0</span>:<span class=\"w\"> </span>0xb52e<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">67</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">1</span>:<span class=\"w\"> </span>0xb4b8<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">66</span>&gt;\n<span class=\"w\">    </span><span class=\"m\">2</span>:<span class=\"w\"> </span>Pointer<span class=\"w\"> </span>not<span class=\"w\"> </span>aligned<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"m\">4</span>:<span class=\"w\"> </span>Region<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>start:<span class=\"w\"> </span><span class=\"m\">65527</span>,<span class=\"w\"> </span>len:<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>I tried to use other runtime tools, such as wasmer, wasmedge, and wamr to run the same testcase, their running results are as follows:</p>\n<p>![截图 2023-10-13 16-26-52](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/92167273/cbbc6296-f4ec-427b-b2b0-eec4d89438ea\">https://github.com/bytecodealliance/wasmtime/assets/92167273/cbbc6296-f4ec-427b-b2b0-eec4d89438ea</a>)</p>\n<p>From the picture, we can see that tools like wasmer and wasmedge will output runtime error due to <code>integer divide by zero</code>. I wonder whether wasmtime should also output the same runtime error, and when there are multiple errors in the testcase, what the priority of runtime error output in the terminal is.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 13.0.0<br>\nOperating system: Ubuntu 22.04.1<br>\nArchitecture: x86_64</p>\n</blockquote>",
        "id": 396461427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697187643
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7235#issuecomment-1761437502\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7235\">issue #7235</a>:</p>\n<blockquote>\n<p>Wasmtime outputs \"Pointer not aligned to 4\". According to wasi pointers need to be aligned and wasmtime checks for this. Several other wasi implementations don't check for it however and thus hits the \"integer divide by zero\" at a later point.</p>\n</blockquote>",
        "id": 396496239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697200175
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7235#issuecomment-1761836240\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7235\">issue #7235</a>:</p>\n<blockquote>\n<p>This is the exact same behavior we closed as not a bug in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7081\">https://github.com/bytecodealliance/wasmtime/issues/7081</a>. This issue is also filed using the exact same language. Because these issues take more of our time to triage than they take for you to file, please try to filter out these duplicates on your end so that we can spend our attention on valid issues.</p>\n</blockquote>",
        "id": 396543966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697216885
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7235\">issue #7235</a>:</p>\n<blockquote>\n<h3>Describe the bug</h3>\n<p>While executing the given testcase with wasmtime and other runtime tools, the result are different.</p>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/luxinyi0105/wasm_runtime_test/raw/main/10-13.zip\">The given testcase</a> was simply mutated a wasm file, which was obtained by compiling C program generated with <code>Csmith</code> using <code>Emscripten Compiler</code>(Emcc). </p>\n<p>The original C program is <code>c_file.c</code>, the compilation results with Emscripten is <code>wasm_file.wasm</code>, and its wat format is <code>wat_file.wat</code>. </p>\n<p>We mutated the wat file to:<br>\n-- change all its <code>i32/i64/f64.sub</code> with <code>i32/i64/f64.add</code>;<br>\n-- change all its <code>i32/i64.and</code> with <code>i32/i64.xor</code>;<br>\n-- change all its <code>i32/i64.lt_s</code> with <code>i32/i64.ge_u</code>;<br>\n-- change all its <code>i32/i64.mul</code> with <code>i32/i64.div_u/div_s</code>;<br>\nThe result after mutation is <code>mutated_file.wat</code>, and its wasm format is <code>mutated_file.wasm</code>.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>~/Wasm_Runtime_Tools/wasmtime_13.0.0/target/debug/wasmtime<span class=\"w\"> </span>mutated_file.wasm\nError:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>run<span class=\"w\"> </span>main<span class=\"w\"> </span>module<span class=\"w\"> </span><span class=\"sb\">`</span>mutated_file.wasm<span class=\"sb\">`</span>\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span><span class=\"m\">0</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>invoke<span class=\"w\"> </span><span class=\"nb\">command</span><span class=\"w\"> </span>default\n<span class=\"w\">    </span><span class=\"m\">1</span>:<span class=\"w\"> </span>error<span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span>executing<span class=\"w\"> </span>at<span class=\"w\"> </span>wasm<span class=\"w\"> </span>backtrace:\n<span class=\"w\">           </span><span class=\"m\">0</span>:<span class=\"w\"> </span>0xb52e<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">67</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">1</span>:<span class=\"w\"> </span>0xb4b8<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">66</span>&gt;\n<span class=\"w\">    </span><span class=\"m\">2</span>:<span class=\"w\"> </span>Pointer<span class=\"w\"> </span>not<span class=\"w\"> </span>aligned<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"m\">4</span>:<span class=\"w\"> </span>Region<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>start:<span class=\"w\"> </span><span class=\"m\">65527</span>,<span class=\"w\"> </span>len:<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>I tried to use other runtime tools, such as wasmer, wasmedge, and wamr to run the same testcase, their running results are as follows:</p>\n<p>![截图 2023-10-13 16-26-52](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/92167273/cbbc6296-f4ec-427b-b2b0-eec4d89438ea\">https://github.com/bytecodealliance/wasmtime/assets/92167273/cbbc6296-f4ec-427b-b2b0-eec4d89438ea</a>)</p>\n<p>From the picture, we can see that tools like wasmer and wasmedge will output runtime error due to <code>integer divide by zero</code>. I wonder whether wasmtime should also output the same runtime error, and when there are multiple errors in the testcase, what the priority of runtime error output in the terminal is.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 13.0.0<br>\nOperating system: Ubuntu 22.04.1<br>\nArchitecture: x86_64</p>\n</blockquote>",
        "id": 396543975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697216885
    }
]