[
    {
        "content": "<p>kubkon opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255\">PR #1255</a> from <code>filetime-in-yanix</code> to <code>master</code>:</p>\n<blockquote>\n<p>I've noticed that we could replace every occurrence of <code>crate::Result</code><br>\nin <code>filetime</code> mods with <code>io::Result</code>, so I thought why not move it<br>\nto <code>yanix</code> and get rid off a lot of unnecessary code duplication<br>\nwithin <code>wasi-common</code>. Now, ideally I'd have our <code>filetime</code> modifications<br>\nbackported to @alexcrichton's [<code>filetime</code>] crate, but one step at a time<br>\n(apologies @alexcrichton, I was meant to backport this ages ago, just didn't<br>\nfind the time yet... :-().</p>\n<p>Anyway, this commit does just that; i.e., moves the <code>filetime</code> modules<br>\ninto <code>yanix</code> which seems a better fit for this type of code.</p>\n<p>[<code>filetime</code>]: <a href=\"https://github.com/alexcrichton/filetime\" target=\"_blank\" title=\"https://github.com/alexcrichton/filetime\">https://github.com/alexcrichton/filetime</a></p>\n<p>There is one caveat here. On Emscripten, converting between <code>filetime::Filetime</code><br>\nand <code>libc::timespec</code> appears to be lossy, at least as far as the<br>\ntypes are concerned. Now, <code>filetime::Filetime</code>'s seconds field is<br>\n<code>i64</code> while nanoseconds field is <code>u32</code>, while Emscripten's<br>\n<code>libc::timespec</code> requires both to be <code>i32</code> width. This might actually<br>\nnot be a problem since I don't think it's possible to fill <code>filetime::Filetime</code><br>\nstruct with values of width wider than <code>i32</code> since Emscripten is 32bit<br>\nbut just to be on the safe side, we do a <code>TryInto</code> conversion, log<br>\nthe error (if any), and return <code>libc::EOVERFLOW</code>.</p>\n<p>Lemme know what you guys reckon!</p>\n</blockquote>",
        "id": 189979754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583603943
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" target=\"_blank\" title=\"https://github.com/alexcrichton\">alexcrichton</a>, and <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255\">PR #1255</a>.</p>",
        "id": 189979755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583603943
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" target=\"_blank\" title=\"https://github.com/alexcrichton\">alexcrichton</a>, and <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255\">PR #1255</a>.</p>",
        "id": 189979757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583603943
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255\">PR #1255</a> from <code>filetime-in-yanix</code> to <code>master</code>:</p>\n<blockquote>\n<p>I've noticed that we could replace every occurrence of <code>crate::Result</code><br>\nin <code>filetime</code> mods with <code>io::Result</code>, so I thought why not move it<br>\nto <code>yanix</code> and get rid off a lot of unnecessary code duplication<br>\nwithin <code>wasi-common</code>. Now, ideally I'd have our <code>filetime</code> modifications<br>\nbackported to @alexcrichton's [<code>filetime</code>] crate, but one step at a time<br>\n(apologies @alexcrichton, I was meant to backport this ages ago, just didn't<br>\nfind the time yet... :-().</p>\n<p>Anyway, this commit does just that; i.e., moves the <code>filetime</code> modules<br>\ninto <code>yanix</code> which seems a better fit for this type of code.</p>\n<p>[<code>filetime</code>]: <a href=\"https://github.com/alexcrichton/filetime\" target=\"_blank\" title=\"https://github.com/alexcrichton/filetime\">https://github.com/alexcrichton/filetime</a></p>\n<p>There is one caveat here. On Emscripten, converting between <code>filetime::Filetime</code><br>\nand <code>libc::timespec</code> appears to be lossy, at least as far as the<br>\ntypes are concerned. Now, <code>filetime::Filetime</code>'s seconds field is<br>\n<code>i64</code> while nanoseconds field is <code>u32</code>, while Emscripten's<br>\n<code>libc::timespec</code> requires both to be <code>i32</code> width. This might actually<br>\nnot be a problem since I don't think it's possible to fill <code>filetime::Filetime</code><br>\nstruct with values of width wider than <code>i32</code> since Emscripten is 32bit<br>\nbut just to be on the safe side, we do a <code>TryInto</code> conversion, log<br>\nthe error (if any), and return <code>libc::EOVERFLOW</code>.</p>\n<p>Lemme know what you guys reckon!</p>\n</blockquote>",
        "id": 189979821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583604041
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255#pullrequestreview-370786459\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255#pullrequestreview-370786459\">PR Review</a>.</p>",
        "id": 189985302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583613494
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255#pullrequestreview-370786459\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255#pullrequestreview-370786459\">PR Review</a>.</p>",
        "id": 189985303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583613494
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255#discussion_r389308715\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255#discussion_r389308715\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Slightly more verbose, but avoids the need for a two-line comment: <code>i64::from(ft.nanoseconds())</code> :-).</p>\n</blockquote>",
        "id": 189985304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583613494
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255#pullrequestreview-370820441\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255#pullrequestreview-370820441\">PR Review</a>.</p>",
        "id": 190009334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583664308
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255#discussion_r389356894\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255#discussion_r389356894\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Excellent, thanks!</p>\n</blockquote>",
        "id": 190009335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583664308
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255\">PR #1255</a> from <code>filetime-in-yanix</code> to <code>master</code>:</p>\n<blockquote>\n<p>I've noticed that we could replace every occurrence of <code>crate::Result</code><br>\nin <code>filetime</code> mods with <code>io::Result</code>, so I thought why not move it<br>\nto <code>yanix</code> and get rid off a lot of unnecessary code duplication<br>\nwithin <code>wasi-common</code>. Now, ideally I'd have our <code>filetime</code> modifications<br>\nbackported to @alexcrichton's [<code>filetime</code>] crate, but one step at a time<br>\n(apologies @alexcrichton, I was meant to backport this ages ago, just didn't<br>\nfind the time yet... :-().</p>\n<p>Anyway, this commit does just that; i.e., moves the <code>filetime</code> modules<br>\ninto <code>yanix</code> which seems a better fit for this type of code.</p>\n<p>[<code>filetime</code>]: <a href=\"https://github.com/alexcrichton/filetime\" target=\"_blank\" title=\"https://github.com/alexcrichton/filetime\">https://github.com/alexcrichton/filetime</a></p>\n<p>There is one caveat here. On Emscripten, converting between <code>filetime::Filetime</code><br>\nand <code>libc::timespec</code> appears to be lossy, at least as far as the<br>\ntypes are concerned. Now, <code>filetime::Filetime</code>'s seconds field is<br>\n<code>i64</code> while nanoseconds field is <code>u32</code>, while Emscripten's<br>\n<code>libc::timespec</code> requires both to be <code>i32</code> width. This might actually<br>\nnot be a problem since I don't think it's possible to fill <code>filetime::Filetime</code><br>\nstruct with values of width wider than <code>i32</code> since Emscripten is 32bit<br>\nbut just to be on the safe side, we do a <code>TryInto</code> conversion, log<br>\nthe error (if any), and return <code>libc::EOVERFLOW</code>.</p>\n<p>Lemme know what you guys reckon!</p>\n</blockquote>",
        "id": 190009508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583664666
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255\">PR #1255</a> from <code>filetime-in-yanix</code> to <code>master</code>:</p>\n<blockquote>\n<p>I've noticed that we could replace every occurrence of <code>crate::Result</code><br>\nin <code>filetime</code> mods with <code>io::Result</code>, so I thought why not move it<br>\nto <code>yanix</code> and get rid off a lot of unnecessary code duplication<br>\nwithin <code>wasi-common</code>. Now, ideally I'd have our <code>filetime</code> modifications<br>\nbackported to @alexcrichton's [<code>filetime</code>] crate, but one step at a time<br>\n(apologies @alexcrichton, I was meant to backport this ages ago, just didn't<br>\nfind the time yet... :-().</p>\n<p>Anyway, this commit does just that; i.e., moves the <code>filetime</code> modules<br>\ninto <code>yanix</code> which seems a better fit for this type of code.</p>\n<p>[<code>filetime</code>]: <a href=\"https://github.com/alexcrichton/filetime\" target=\"_blank\" title=\"https://github.com/alexcrichton/filetime\">https://github.com/alexcrichton/filetime</a></p>\n<p>There is one caveat here. On Emscripten, converting between <code>filetime::Filetime</code><br>\nand <code>libc::timespec</code> appears to be lossy, at least as far as the<br>\ntypes are concerned. Now, <code>filetime::Filetime</code>'s seconds field is<br>\n<code>i64</code> while nanoseconds field is <code>u32</code>, while Emscripten's<br>\n<code>libc::timespec</code> requires both to be <code>i32</code> width. This might actually<br>\nnot be a problem since I don't think it's possible to fill <code>filetime::Filetime</code><br>\nstruct with values of width wider than <code>i32</code> since Emscripten is 32bit<br>\nbut just to be on the safe side, we do a <code>TryInto</code> conversion, log<br>\nthe error (if any), and return <code>libc::EOVERFLOW</code>.</p>\n<p>Lemme know what you guys reckon!</p>\n</blockquote>",
        "id": 190052461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583746802
    },
    {
        "content": "<p>kubkon merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1255\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1255\">PR #1255</a>.</p>",
        "id": 190078665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583766431
    }
]