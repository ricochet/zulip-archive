[
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397579443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697750603
    },
    {
        "content": "<p>rockwotj opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a> from <code>rockwotj:fuel2</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Fixes: #7255</p>\n<p>I've implemented the APIs as documented in the strawman there, but I used <code>Option&lt;NonZeroU64&gt;</code> for the yield interval instead of trying to figure out what to do if the yield interval is <code>0</code>.</p>\n<p>I also took a stab in the second commit in being able to support the full range of <code>u64</code> so that you can <code>set_fuel(u64::MAX)</code> then <code>get_fuel() == u64::MAX</code>. This makes accounting externally less tricky since we're removing that functionality from wasmtime directly.<br>\n</p>\n</blockquote>",
        "id": 397579444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697750603
    },
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397579446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697750603
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397579775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697750780
    },
    {
        "content": "<p>rockwotj edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>:</p>\n<blockquote>\n<p>Fixes: #7255</p>\n<p>I've implemented the APIs as documented in the strawman there, but I used <code>Option&lt;NonZeroU64&gt;</code> for the yield interval instead of trying to figure out what to do if the yield interval is <code>0</code>.</p>\n<p>I also took a stab in the second commit in being able to support the full range of <code>u64</code> so that you can <code>set_fuel(u64::MAX)</code> then <code>get_fuel() == u64::MAX</code>. This makes accounting externally less tricky since we're removing that functionality from wasmtime directly.</p>\n<p>prtest:full</p>\n</blockquote>",
        "id": 397580013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697750915
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397580057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697750945
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397730134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697814297
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397730640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697814457
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397731717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697814814
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397735115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697815869
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397742716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697818773
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397762899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697828944
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397772737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697834059
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397781286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697839389
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397792630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697848341
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397792642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697848352
    },
    {
        "content": "<p>rockwotj edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>:</p>\n<blockquote>\n<p>In an effort to simplify the many fuel related APIs, simplify the<br>\ninterface here to a single counter with get and set methods.<br>\nAdditionally the async yield is reduced to an interval of the total fuel<br>\ninstead of injecting fuel, so it's easy to still reason about how much<br>\nfuel is left even with yielding turned on.</p>\n<p>Internally this works by keeping two counters - one the VM uses to<br>\nincrement towards 0 for fuel, the other to track how much is in<br>\n\"reserve\". Then when we're out of gas, we pull from the reserve to<br>\nrefuel and continue. We use the reserve in two cases: one for overflow<br>\nof the fuel (which is an i64 and the API expresses fuel as u64) and the<br>\nother for async yieling, which then the yield interval acts as a cap to<br>\nhow much we can refuel with.</p>\n<p>This also means that <code>get_fuel</code> can return the full range of <code>u64</code><br>\nbefore this change it could only return up to <code>i64::MAX</code>. This is<br>\nimportant because this PR is removing the functionality to track fuel<br>\nconsumption, and this makes the API less error prone for embedders to<br>\ntrack consumption themselves.</p>\n<p>Careful to note that the VM counter that is stored as <code>i64</code> can be<br>\npositive if an instruction \"costs\" multiple units of fuel when the fuel<br>\nran out.</p>\n<p>Fixes: #7255</p>\n<p>I've implemented the APIs as documented in the strawman from the issue, but I used <code>Option&lt;NonZeroU64&gt;</code> for the yield interval instead of trying to figure out what to do if the yield interval is <code>0</code>.</p>\n</blockquote>",
        "id": 397792691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697848402
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1691027397\">PR review</a>.</p>",
        "id": 397793162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697848684
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1691027397\">PR review</a>.</p>",
        "id": 397793163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697848684
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#discussion_r1367573085\">PR review comment</a>:</p>\n<blockquote>\n<p>I wanted to make sure to write unit tests for the methods standalone from the rest to ensure I got all the overflow cases correct, so hence pulling these methods out as standalone so they can be tested directly. I don't know if this is a \"normal\" pattern or not, but it did help me catch a couple of bugs.</p>\n</blockquote>",
        "id": 397793166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697848684
    },
    {
        "content": "<p>rockwotj edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>:</p>\n<blockquote>\n<p>In an effort to simplify the many fuel related APIs, simplify the<br>\ninterface here to a single counter with get and set methods.<br>\nAdditionally the async yield is reduced to an interval of the total fuel<br>\ninstead of injecting fuel, so it's easy to still reason about how much<br>\nfuel is left even with yielding turned on.</p>\n<p>Internally this works by keeping two counters - one the VM uses to<br>\nincrement towards 0 for fuel, the other to track how much is in<br>\n\"reserve\". Then when we're out of gas, we pull from the reserve to<br>\nrefuel and continue. We use the reserve in two cases: one for overflow<br>\nof the fuel (which is an i64 and the API expresses fuel as u64) and the<br>\nother for async yieling, which then the yield interval acts as a cap to<br>\nhow much we can refuel with.</p>\n<p>This also means that <code>get_fuel</code> can return the full range of <code>u64</code><br>\nbefore this change it could only return up to <code>i64::MAX</code>. This is<br>\nimportant because this PR is removing the functionality to track fuel<br>\nconsumption, and this makes the API less error prone for embedders to<br>\ntrack consumption themselves.</p>\n<p>Careful to note that the VM counter that is stored as <code>i64</code> can be<br>\npositive if an instruction \"costs\" multiple units of fuel when the fuel<br>\nran out.</p>\n<p>Fixes: #7255</p>\n<p>I've implemented the APIs as documented in the strawman from the issue, <br>\nbut I used <code>Option&lt;NonZeroU64&gt;</code> for the yield interval instead of trying<br>\nto figure out what to do if the yield interval is <code>0</code>.</p>\n</blockquote>",
        "id": 397794058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697849228
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397983858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698021574
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 397987373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698023525
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1692809899\">PR review</a>:</p>\n<blockquote>\n<p>Wow I really like how this all turned out, thank you for pushing on this!</p>\n<p>I've got a few cosmetic-related concerns but otherwise I think this is good to go. If you're up for it as well it might be good to do a once-over of fuel-related documentation not only on <code>Store</code> but also <code>Config</code> and perhaps other locations since this is a somewhat significant departure from the prior model (but well worth it). For example running out of fuel now unconditionally panics and that cannot be configured, which may be lingering in a few locations (and if not then nothing to do yay!)</p>\n</blockquote>",
        "id": 398106404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698073756
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1692809899\">PR review</a>:</p>\n<blockquote>\n<p>Wow I really like how this all turned out, thank you for pushing on this!</p>\n<p>I've got a few cosmetic-related concerns but otherwise I think this is good to go. If you're up for it as well it might be good to do a once-over of fuel-related documentation not only on <code>Store</code> but also <code>Config</code> and perhaps other locations since this is a somewhat significant departure from the prior model (but well worth it). For example running out of fuel now unconditionally panics and that cannot be configured, which may be lingering in a few locations (and if not then nothing to do yay!)</p>\n</blockquote>",
        "id": 398106405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698073756
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#discussion_r1368838198\">PR review comment</a>:</p>\n<blockquote>\n<p>While I think it definitely makes sense to store this as <code>Option&lt;NonZeroU64&gt;</code> taking that as a function parameter here may be a bit overkill in the sense that it's somewhat unergonomic to call. Could this instead take <code>Option&lt;u64&gt;</code> and return an error for <code>Some(0)</code>?</p>\n</blockquote>",
        "id": 398106406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698073756
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#discussion_r1368828298\">PR review comment</a>:</p>\n<blockquote>\n<p>Nah while this isn't common right now I think this is a good idea, so thanks for adding these tests!</p>\n</blockquote>",
        "id": 398106407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698073756
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#discussion_r1368836634\">PR review comment</a>:</p>\n<blockquote>\n<p>Reader over this I realize that the term \"consumed\" here is inherited from the <code>StoreLimits</code> but in isolation I think it's somewhat confusing because it's not actually consumed fuel, it's actually \"negating this gives you some remaining fuel\".</p>\n<p>I'm curious, do you have an idea of a better name for this? Not a blocker for the PR of course, but if you've got an idea for a better name it'd definitely be ok to rename here.</p>\n</blockquote>",
        "id": 398106409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698073756
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 398126947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698081087
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1693050980\">PR review</a>:</p>\n<blockquote>\n<blockquote>\n<p>If you're up for it as well it might be good to do a once-over of fuel-related documentation not only on Store but also Config and perhaps other locations since this is a somewhat significant departure from the prior model (but well worth it). For example running out of fuel now unconditionally panics and that cannot be configured, which may be lingering in a few locations (and if not then nothing to do yay!)</p>\n</blockquote>\n<p>I found one place in Config::consume_fuel so nice suggestion! A quick glance over the project via <code>git grep fuel</code> did not show any other usages.</p>\n</blockquote>",
        "id": 398127091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698081141
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#discussion_r1368981947\">PR review comment</a>:</p>\n<blockquote>\n<p>I've been thinking about this in terms of \"active fuel\" or \"injected fuel\". I'll use the term \"injected\" unless you prefer \"active\"</p>\n</blockquote>",
        "id": 398127092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698081141
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1693050980\">PR review</a>:</p>\n<blockquote>\n<blockquote>\n<p>If you're up for it as well it might be good to do a once-over of fuel-related documentation not only on Store but also Config and perhaps other locations since this is a somewhat significant departure from the prior model (but well worth it). For example running out of fuel now unconditionally panics and that cannot be configured, which may be lingering in a few locations (and if not then nothing to do yay!)</p>\n</blockquote>\n<p>I found one place in Config::consume_fuel so nice suggestion! A quick glance over the project via <code>git grep fuel</code> did not show any other usages.</p>\n</blockquote>",
        "id": 398127093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698081141
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#discussion_r1368983115\">PR review comment</a>:</p>\n<blockquote>\n<p>Thoughts on what to do for the C API in that case? Do we just translate the 0 there into <code>None</code>?</p>\n</blockquote>",
        "id": 398127094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698081141
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 398127224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698081217
    },
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 398127621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698081376
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1693261237\">PR review</a>.</p>",
        "id": 398138301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698086407
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1693264343\">PR review</a>.</p>",
        "id": 398138396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698086464
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#discussion_r1369112622\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I think that's reasonable to do for the C API as magical numbers like that are relatively common in C</p>\n</blockquote>",
        "id": 398138397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698086464
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 398140501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698087452
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1693324833\">PR review</a>.</p>",
        "id": 398140614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698087490
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#discussion_r1369144440\">PR review comment</a>:</p>\n<blockquote>\n<p>Okay I've made this change then.</p>\n</blockquote>",
        "id": 398140615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698087490
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 398140721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698087537
    },
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 398140749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698087543
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298#pullrequestreview-1693347323\">PR review</a>.</p>",
        "id": 398141449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698087812
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 398141462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698087818
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7298\">PR #7298</a>.</p>",
        "id": 398153487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698093832
    }
]