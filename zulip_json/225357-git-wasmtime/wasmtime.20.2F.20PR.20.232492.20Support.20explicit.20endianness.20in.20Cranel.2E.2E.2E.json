[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2492\">PR #2492</a> from <code>endian-memory-v5</code> to <code>main</code>:</p>\n<blockquote>\n<p>WebAssembly memory operations are by definition little-endian even on<br>\nbig-endian target platforms.  However, other memory accesses will require<br>\nnative target endianness (e.g. to access parts of the VMContext that is<br>\nalso accessed by VM native code).  This means on big-endian targets,<br>\nthe code generator will have to handle both little- and big-endian<br>\nmemory accesses.  However, there is currently no way to encode that<br>\ndistinction into the Cranelift IR that describes memory accesses.</p>\n<p>This patch provides such a way by adding an (optional) explicit<br>\nendianness marker to an instance of MemFlags.  Since each Cranelift IR<br>\ninstruction that describes memory accesses already has an instance of<br>\nMemFlags attached, this can now be used to provide endianness<br>\ninformation.</p>\n<p>Note that by default, memory accesses will continue to use the native<br>\ntarget ISA endianness.  To override this to specify an explicit<br>\nendianness, a MemFlags value that was built using the set_endianness<br>\nroutine must be used.  This patch does so for accesses that implement<br>\nWebAssembly memory operations.</p>\n<p>This patch addresses issue #2124.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 219351709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607527824
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2492#pullrequestreview-551779200\">PR Review</a>.</p>",
        "id": 219884745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607971636
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2492#discussion_r542628106\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Add to comment here that if no endianness is specified, then the native endianness is returned? We might also include a small note about why we have this native-endian option: it allows code generators to produce performant CLIF without requiring access to the target machine's endianness.</p>\n</blockquote>",
        "id": 219884746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607971636
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2492#pullrequestreview-551779200\">PR Review</a>.</p>",
        "id": 219884747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607971637
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2492#discussion_r542617992\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Outdated comment, I think?</p>\n<p>To the point about endianness at construction: perhaps we could have, still, a separate constructor (used just where explicit, possibly non-native, endianness is needed, e.g. in the Wasm translator). I don't think that ensuring their immutability is a huge concern though: adding other flags can also break program semantics (e.g., promising a value is \"readonly\" when it's not might break optimizations relying on alias analysis), so I don't think we have to worry too much about distinguishing endianness flags (other than ensuring they're mutually exclusive, as you've done).</p>\n</blockquote>",
        "id": 219884748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607971637
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2492\">PR #2492</a> from <code>endian-memory-v5</code> to <code>main</code>:</p>\n<blockquote>\n<p>WebAssembly memory operations are by definition little-endian even on<br>\nbig-endian target platforms.  However, other memory accesses will require<br>\nnative target endianness (e.g. to access parts of the VMContext that is<br>\nalso accessed by VM native code).  This means on big-endian targets,<br>\nthe code generator will have to handle both little- and big-endian<br>\nmemory accesses.  However, there is currently no way to encode that<br>\ndistinction into the Cranelift IR that describes memory accesses.</p>\n<p>This patch provides such a way by adding an (optional) explicit<br>\nendianness marker to an instance of MemFlags.  Since each Cranelift IR<br>\ninstruction that describes memory accesses already has an instance of<br>\nMemFlags attached, this can now be used to provide endianness<br>\ninformation.</p>\n<p>Note that by default, memory accesses will continue to use the native<br>\ntarget ISA endianness.  To override this to specify an explicit<br>\nendianness, a MemFlags value that was built using the set_endianness<br>\nroutine must be used.  This patch does so for accesses that implement<br>\nWebAssembly memory operations.</p>\n<p>This patch addresses issue #2124.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 219888693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607973380
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2492\">PR #2492</a>.</p>",
        "id": 219907922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607983150
    }
]