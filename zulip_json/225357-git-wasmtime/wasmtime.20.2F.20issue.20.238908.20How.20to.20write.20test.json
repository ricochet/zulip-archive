[
    {
        "content": "<p>Shyam-Raghuwanshi opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8908\">issue #8908</a>:</p>\n<blockquote>\n<p>I have a project similar to this how can I test it ? I am able to run the guest from host but unable to figure out how to test or How to write test</p>\n<p><code> guest/src/lib.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">complex</span><span class=\"p\">::</span><span class=\"n\">Num</span><span class=\"p\">;</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">wit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"s\">\"reactor\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Guest</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Guest</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wit</span><span class=\"p\">::</span><span class=\"n\">Request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wit</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Request {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">req</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">operation</span><span class=\"p\">::</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">55</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">        </span><span class=\"c1\">// let sum = wit::demo::utils::operation::add(</span>\n<span class=\"w\">        </span><span class=\"c1\">//     wit::demo::utils::complex::Num { real: 1, imag: 1 },</span>\n<span class=\"w\">        </span><span class=\"c1\">//     wit::demo::utils::complex::Num { real: 2, imag: 2 },</span>\n<span class=\"w\">        </span><span class=\"c1\">// );</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Sum is = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>host/src/main.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// use wasmtime_wasi::WasiCtx;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">path</span><span class=\"p\">::</span><span class=\"n\">PathBuf</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::{</span><span class=\"bp\">self</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">pipe</span><span class=\"p\">::</span><span class=\"n\">MemoryOutputPipe</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">wit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"s\">\"reactor\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// impl wit::demo::utils::host::Host for Host {</span>\n<span class=\"c1\">//     fn greet(&amp;mut self) -&gt; wasmtime::Result&lt;u8&gt; {</span>\n<span class=\"c1\">//         Ok(10)</span>\n<span class=\"c1\">//     }</span>\n<span class=\"c1\">// }</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">complex</span><span class=\"p\">::</span><span class=\"n\">Num</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">http_types</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">operation</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">inbound_http</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">complex</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Num</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Num</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a</span><span class=\"p\">.</span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">real</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a</span><span class=\"p\">.</span><span class=\"n\">imag</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">imag</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// #[tokio::main]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// let engine = wasmtime::Engine::default();</span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut store = wasmtime::Store::new(&amp;engine, ());</span>\n<span class=\"w\">    </span><span class=\"c1\">// let bytes = std::fs::read(\"../target/wasm32-wasi/debug/guest.wasm\")?;</span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut linker: wasmtime::component::Linker&lt;WasiCtx&gt; = wasmtime::component::Linker::new(&amp;engine);</span>\n<span class=\"w\">    </span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">set_var</span><span class=\"p\">(</span><span class=\"s\">\"WASMTIME_BACKTRACE_DETAILS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//In the context of wasmtime, Engine is a struct that represents the configuration and context for compiling WebAssembly modules. It is a central part of the Wasmtime API, responsible for managing the lifecycle of compiled WebAssembly code and providing the necessary environment for execution.</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"guest.wasm\"</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"guest.wasm not found\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create our wasi context.</span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut builder = WasiCtxBuilder::new();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let stdout = MemoryOutputPipe::new(4096);</span>\n<span class=\"w\">    </span><span class=\"c1\">// let stderr = MemoryOutputPipe::new(4096);</span>\n<span class=\"w\">    </span><span class=\"c1\">// builder.stdout(stdout.clone()).stderr(stderr.clone());</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add environment\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">exit</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">error</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io error\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// bindings::sync::io::streams::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .expect(\"Unable to add io streams\");</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sync_io</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">streams</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io streams\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdin\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdout\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stderr\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">wall_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add clocks wallclock\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// bindings::sync::filesystem::types::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .expect(\"Unable to add filesystem types\");</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sync_io</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem types\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem preopens\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// let guest = reactor.demo_utils_guest();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"p\">.</span><span class=\"n\">demo_utils_inbound_http</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"c1\">// let result = guest.call_get_data(&amp;mut store)?;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"n\">Request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">uri</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"http://google.com\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[(</span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"method\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"get\"</span><span class=\"p\">))],</span>\n<span class=\"w\">        </span><span class=\"n\">params</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[],</span>\n<span class=\"w\">        </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_handle_request</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">request</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Response : {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Error occured : {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"c1\">// let linker = wasmtime::Linker::new(&amp;engine);</span>\n<span class=\"w\">    </span><span class=\"c1\">// let module_instance = linker</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .instantiate(&amp;mut store, &amp;module)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .expect(\"Unable to get module instance\");</span>\n<span class=\"w\">    </span><span class=\"c1\">// let bye = module_instance.get_typed_func::&lt;(), u32&gt;(&amp;mut store, \"bye\")?;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let bye_result = bye.call(&amp;mut store, ()).expect(\"Function run failed\");</span>\n<span class=\"w\">    </span><span class=\"c1\">// println!(\"From bye {}\",bye_result);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let callme = instance.get_typed_func::&lt;(), ()&gt;(&amp;mut store, \"getData\")?;</span>\n<span class=\"w\">    </span><span class=\"c1\">// callme.call(&amp;mut store, ())?;</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Wit files</h3>\n<p><code>demo.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">demo</span><span class=\"p\">:</span><span class=\"nc\">utils</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">inbound</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>complex.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">complex</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u16</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>http-types.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"o\">-</span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">headers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">uri</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">method</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">post</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">put</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">delete</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">patch</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">head</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">options</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">method</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">uri</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">uri</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">headers</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">params</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">params</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"o\">-</span><span class=\"n\">status</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">headers</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">success</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">destination</span><span class=\"o\">-</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">allowed</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">invalid</span><span class=\"o\">-</span><span class=\"n\">url</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">request</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">too</span><span class=\"o\">-</span><span class=\"n\">many</span><span class=\"o\">-</span><span class=\"n\">requests</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>inbound-http</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">inbound</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"p\">.{</span><span class=\"n\">request</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">handle</span><span class=\"o\">-</span><span class=\"n\">request</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">response</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>sum.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">complex</span><span class=\"p\">.{</span><span class=\"n\">num</span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"nc\">num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nc\">num</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">num</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 449607796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720330338
    },
    {
        "content": "<p>Shyam-Raghuwanshi edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8908\">issue #8908</a>:</p>\n<blockquote>\n<p>I have a project similar to this how can I test it ? I am able to run the guest from host but unable to figure out how to test or How to write test</p>\n<p><code> guest/src/lib.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">complex</span><span class=\"p\">::</span><span class=\"n\">Num</span><span class=\"p\">;</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">wit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"s\">\"reactor\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Guest</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Guest</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wit</span><span class=\"p\">::</span><span class=\"n\">Request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wit</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Request {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">req</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">operation</span><span class=\"p\">::</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">55</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">        </span><span class=\"c1\">// let sum = wit::demo::utils::operation::add(</span>\n<span class=\"w\">        </span><span class=\"c1\">//     wit::demo::utils::complex::Num { real: 1, imag: 1 },</span>\n<span class=\"w\">        </span><span class=\"c1\">//     wit::demo::utils::complex::Num { real: 2, imag: 2 },</span>\n<span class=\"w\">        </span><span class=\"c1\">// );</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Sum is = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>host/src/main.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// use wasmtime_wasi::WasiCtx;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">path</span><span class=\"p\">::</span><span class=\"n\">PathBuf</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::{</span><span class=\"bp\">self</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">pipe</span><span class=\"p\">::</span><span class=\"n\">MemoryOutputPipe</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">wit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"s\">\"reactor\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// impl wit::demo::utils::host::Host for Host {</span>\n<span class=\"c1\">//     fn greet(&amp;mut self) -&gt; wasmtime::Result&lt;u8&gt; {</span>\n<span class=\"c1\">//         Ok(10)</span>\n<span class=\"c1\">//     }</span>\n<span class=\"c1\">// }</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">complex</span><span class=\"p\">::</span><span class=\"n\">Num</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">http_types</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">operation</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">inbound_http</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">complex</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Num</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Num</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a</span><span class=\"p\">.</span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">real</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a</span><span class=\"p\">.</span><span class=\"n\">imag</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">imag</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// #[tokio::main]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// let engine = wasmtime::Engine::default();</span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut store = wasmtime::Store::new(&amp;engine, ());</span>\n<span class=\"w\">    </span><span class=\"c1\">// let bytes = std::fs::read(\"../target/wasm32-wasi/debug/guest.wasm\")?;</span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut linker: wasmtime::component::Linker&lt;WasiCtx&gt; = wasmtime::component::Linker::new(&amp;engine);</span>\n<span class=\"w\">    </span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">set_var</span><span class=\"p\">(</span><span class=\"s\">\"WASMTIME_BACKTRACE_DETAILS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//In the context of wasmtime, Engine is a struct that represents the configuration and context for compiling WebAssembly modules. It is a central part of the Wasmtime API, responsible for managing the lifecycle of compiled WebAssembly code and providing the necessary environment for execution.</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"guest.wasm\"</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"guest.wasm not found\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create our wasi context.</span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut builder = WasiCtxBuilder::new();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let stdout = MemoryOutputPipe::new(4096);</span>\n<span class=\"w\">    </span><span class=\"c1\">// let stderr = MemoryOutputPipe::new(4096);</span>\n<span class=\"w\">    </span><span class=\"c1\">// builder.stdout(stdout.clone()).stderr(stderr.clone());</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add environment\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">exit</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">error</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io error\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// bindings::sync::io::streams::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .expect(\"Unable to add io streams\");</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sync_io</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">streams</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io streams\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdin\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdout\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stderr\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">wall_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add clocks wallclock\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// bindings::sync::filesystem::types::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .expect(\"Unable to add filesystem types\");</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sync_io</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem types\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem preopens\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// let guest = reactor.demo_utils_guest();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"p\">.</span><span class=\"n\">demo_utils_inbound_http</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"c1\">// let result = guest.call_get_data(&amp;mut store)?;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"n\">Request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">uri</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"http://google.com\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[(</span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"method\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"get\"</span><span class=\"p\">))],</span>\n<span class=\"w\">        </span><span class=\"n\">params</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[],</span>\n<span class=\"w\">        </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_handle_request</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">request</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Response : {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Error occured : {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"c1\">// let linker = wasmtime::Linker::new(&amp;engine);</span>\n<span class=\"w\">    </span><span class=\"c1\">// let module_instance = linker</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .instantiate(&amp;mut store, &amp;module)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .expect(\"Unable to get module instance\");</span>\n<span class=\"w\">    </span><span class=\"c1\">// let bye = module_instance.get_typed_func::&lt;(), u32&gt;(&amp;mut store, \"bye\")?;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let bye_result = bye.call(&amp;mut store, ()).expect(\"Function run failed\");</span>\n<span class=\"w\">    </span><span class=\"c1\">// println!(\"From bye {}\",bye_result);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let callme = instance.get_typed_func::&lt;(), ()&gt;(&amp;mut store, \"getData\")?;</span>\n<span class=\"w\">    </span><span class=\"c1\">// callme.call(&amp;mut store, ())?;</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Wit files</h3>\n<p><code>demo.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">demo</span><span class=\"p\">:</span><span class=\"nc\">utils</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">inbound</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>complex.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">complex</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u16</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>http-types.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"o\">-</span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">headers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">uri</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">method</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">post</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">put</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">delete</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">patch</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">head</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">options</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">method</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">uri</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">uri</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">headers</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">params</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">params</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"o\">-</span><span class=\"n\">status</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">headers</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">success</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">destination</span><span class=\"o\">-</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">allowed</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">invalid</span><span class=\"o\">-</span><span class=\"n\">url</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">request</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">too</span><span class=\"o\">-</span><span class=\"n\">many</span><span class=\"o\">-</span><span class=\"n\">requests</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>inbound-http</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">inbound</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"p\">.{</span><span class=\"n\">request</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">handle</span><span class=\"o\">-</span><span class=\"n\">request</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">response</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>sum.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">complex</span><span class=\"p\">.{</span><span class=\"n\">num</span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"nc\">num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nc\">num</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">num</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 449608920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720331456
    },
    {
        "content": "<p>Shyam-Raghuwanshi edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8908\">issue #8908</a>:</p>\n<blockquote>\n<p>I have a project similar to this how can I test it ? I am able to run the guest from host but unable to figure out how to test or How to write test</p>\n<p><code> guest/src/lib.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">complex</span><span class=\"p\">::</span><span class=\"n\">Num</span><span class=\"p\">;</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">wit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"s\">\"reactor\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Guest</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Guest</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wit</span><span class=\"p\">::</span><span class=\"n\">Request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wit</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Request {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">req</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">operation</span><span class=\"p\">::</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">55</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">        </span><span class=\"c1\">// let sum = wit::demo::utils::operation::add(</span>\n<span class=\"w\">        </span><span class=\"c1\">//     wit::demo::utils::complex::Num { real: 1, imag: 1 },</span>\n<span class=\"w\">        </span><span class=\"c1\">//     wit::demo::utils::complex::Num { real: 2, imag: 2 },</span>\n<span class=\"w\">        </span><span class=\"c1\">// );</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Sum is = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>host/src/main.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// use wasmtime_wasi::WasiCtx;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">path</span><span class=\"p\">::</span><span class=\"n\">PathBuf</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::{</span><span class=\"bp\">self</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">pipe</span><span class=\"p\">::</span><span class=\"n\">MemoryOutputPipe</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">wit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"s\">\"reactor\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// impl wit::demo::utils::host::Host for Host {</span>\n<span class=\"c1\">//     fn greet(&amp;mut self) -&gt; wasmtime::Result&lt;u8&gt; {</span>\n<span class=\"c1\">//         Ok(10)</span>\n<span class=\"c1\">//     }</span>\n<span class=\"c1\">// }</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">complex</span><span class=\"p\">::</span><span class=\"n\">Num</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">http_types</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">operation</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">inbound_http</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">complex</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">demo</span><span class=\"p\">::</span><span class=\"n\">utils</span><span class=\"p\">::</span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Num</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Num</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a</span><span class=\"p\">.</span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">real</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a</span><span class=\"p\">.</span><span class=\"n\">imag</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">imag</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// #[tokio::main]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// let engine = wasmtime::Engine::default();</span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut store = wasmtime::Store::new(&amp;engine, ());</span>\n<span class=\"w\">    </span><span class=\"c1\">// let bytes = std::fs::read(\"../target/wasm32-wasi/debug/guest.wasm\")?;</span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut linker: wasmtime::component::Linker&lt;WasiCtx&gt; = wasmtime::component::Linker::new(&amp;engine);</span>\n<span class=\"w\">    </span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">set_var</span><span class=\"p\">(</span><span class=\"s\">\"WASMTIME_BACKTRACE_DETAILS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//In the context of wasmtime, Engine is a struct that represents the configuration and context for compiling WebAssembly modules. It is a central part of the Wasmtime API, responsible for managing the lifecycle of compiled WebAssembly code and providing the necessary environment for execution.</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"guest.wasm\"</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"guest.wasm not found\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create our wasi context.</span>\n<span class=\"w\">    </span><span class=\"c1\">// let mut builder = WasiCtxBuilder::new();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let stdout = MemoryOutputPipe::new(4096);</span>\n<span class=\"w\">    </span><span class=\"c1\">// let stderr = MemoryOutputPipe::new(4096);</span>\n<span class=\"w\">    </span><span class=\"c1\">// builder.stdout(stdout.clone()).stderr(stderr.clone());</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add environment\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">exit</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">error</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io error\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// bindings::sync::io::streams::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .expect(\"Unable to add io streams\");</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sync_io</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">streams</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io streams\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdin\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdout\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stderr\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">wall_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add clocks wallclock\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// bindings::sync::filesystem::types::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .expect(\"Unable to add filesystem types\");</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sync_io</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem types\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem preopens\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// let guest = reactor.demo_utils_guest();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"p\">.</span><span class=\"n\">demo_utils_inbound_http</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"c1\">// let result = guest.call_get_data(&amp;mut store)?;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"n\">Request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">uri</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"http://google.com\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[(</span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"method\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"get\"</span><span class=\"p\">))],</span>\n<span class=\"w\">        </span><span class=\"n\">params</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[],</span>\n<span class=\"w\">        </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_handle_request</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">request</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Response : {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Error occured : {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"c1\">// let linker = wasmtime::Linker::new(&amp;engine);</span>\n<span class=\"w\">    </span><span class=\"c1\">// let module_instance = linker</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .instantiate(&amp;mut store, &amp;module)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     .expect(\"Unable to get module instance\");</span>\n<span class=\"w\">    </span><span class=\"c1\">// let bye = module_instance.get_typed_func::&lt;(), u32&gt;(&amp;mut store, \"bye\")?;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let bye_result = bye.call(&amp;mut store, ()).expect(\"Function run failed\");</span>\n<span class=\"w\">    </span><span class=\"c1\">// println!(\"From bye {}\",bye_result);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let callme = instance.get_typed_func::&lt;(), ()&gt;(&amp;mut store, \"getData\")?;</span>\n<span class=\"w\">    </span><span class=\"c1\">// callme.call(&amp;mut store, ())?;</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Wit files</h3>\n<p><code>demo.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">demo</span><span class=\"p\">:</span><span class=\"nc\">utils</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">inbound</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>complex.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">complex</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">real</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">imag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u16</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>http-types.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"o\">-</span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">headers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">uri</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">method</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">post</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">put</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">delete</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">patch</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">head</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">options</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">method</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">uri</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">uri</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">headers</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">params</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">params</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">status</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"o\">-</span><span class=\"n\">status</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">headers</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">success</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">destination</span><span class=\"o\">-</span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">allowed</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">invalid</span><span class=\"o\">-</span><span class=\"n\">url</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">request</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">too</span><span class=\"o\">-</span><span class=\"n\">many</span><span class=\"o\">-</span><span class=\"n\">requests</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>inbound-http</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">inbound</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"p\">.{</span><span class=\"n\">request</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">handle</span><span class=\"o\">-</span><span class=\"n\">request</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">response</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>sum.wit</code></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">complex</span><span class=\"p\">.{</span><span class=\"n\">num</span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"nc\">num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nc\">num</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">num</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 449608933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720331467
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8908#issuecomment-2214866103\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8908\">issue #8908</a>:</p>\n<blockquote>\n<p>\"how to write test\" is a pretty general and broad question, do you have something more specific you'd like to ask? For example one way to test would be to take <code>fn main()</code> and wrap it up in a helper function and then invoke that in individual tests. Whether or not that solves your use case though I'm not sure.</p>\n</blockquote>",
        "id": 449945696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720462399
    }
]