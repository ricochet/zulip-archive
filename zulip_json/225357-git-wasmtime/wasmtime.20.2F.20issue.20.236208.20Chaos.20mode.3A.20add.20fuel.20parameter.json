[
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208#issuecomment-1506727488\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208\">issue #6208</a>:</p>\n<blockquote>\n<p>@cfallin I don't think I've done it the way you expected me to. I might need a little more help.</p>\n<p>In my mind, the fuel parameter cannot be constructed in the same way as the other flags (see <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208/files#diff-9f8713532f083ee092c7cab400ea98fa38f6dbf2f5c0134daab0f1ee8b60cb5cR242\">here</a>). The other flags are generated by the fuzzer, but we specifically don't want that for the fuel parameter. That will pretty much always be manually set, right?</p>\n<p>I also don't see a way to explicitly pass the fuel parameter to the construction of control planes (or cranelift flags for that matter) in the <code>Arbitrary</code> implementation of <code>TestCase</code>... so I simply set the fuel manually after construction.</p>\n<p>I've tried to add a new cranelift flag but it's not even being used at this stage.</p>\n</blockquote>",
        "id": 349066906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681381706
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208#issuecomment-1506912285\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208\">issue #6208</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:meta\", \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 349100036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681390271
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208#issuecomment-1525734598\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208\">issue #6208</a>:</p>\n<blockquote>\n<p>Hi @cfallin , we've added the control plane to the printed test case output, example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_table_access_spectre_mitigation</span><span class=\"o\">=</span><span class=\"kc\">false</span>\n<span class=\"w\">        </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">has_sse42</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"n\">has_avx2</span><span class=\"w\"> </span><span class=\"n\">has_fma</span><span class=\"w\"> </span><span class=\"n\">has_popcnt</span><span class=\"w\"> </span><span class=\"n\">has_bmi1</span><span class=\"w\"> </span><span class=\"n\">has_bmi2</span><span class=\"w\"> </span><span class=\"n\">has_lzcnt</span>\n\n<span class=\"w\">        </span><span class=\"n\">control</span><span class=\"w\"> </span><span class=\"n\">plane</span>:\n            <span class=\"nc\">data</span>: <span class=\"nc\">true</span>\n<span class=\"w\">            </span><span class=\"n\">fuel</span>: <span class=\"nb\">None</span>\n\n        <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"nc\">system_v</span>\n</code></pre></div>\n<p>I'll try to add some context about what we've done so far in this PR.</p>\n<p>The fuel parameter is manually set when fuzzing via a command line argument, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">chaos</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">fuel</span><span class=\"o\">=</span><span class=\"mi\">16</span>\n</code></pre></div>\n<p>This is read (very crudely) in the fuzz target (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208/files#diff-7e77f700326e887cf8ef8327df2692daeb869db9116fb0c44eb80e3f18f1c987R362-R368\">here</a>). The same fuel parameter is set for all control planes, but I think that should be fine if functions compile independently from each other.</p>\n<p>The fuel is <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208/files#diff-bc2425bdebb47e989e5252570c7140043bbe03ead4a69b935b2c5595ea6e6745R10\">stored in the control plane</a> alongside the data received from the fuzzer. It's represented as an <code>Option&lt;u32&gt;</code> to indicate if the fuel parameter has even been activated. Calling a control plane method <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208/files#diff-bc2425bdebb47e989e5252570c7140043bbe03ead4a69b935b2c5595ea6e6745R50\">consumes one unit of fuel</a>.</p>\n<p>With the default value of the fuel parameter (<code>None</code>) <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208/files#diff-bc2425bdebb47e989e5252570c7140043bbe03ead4a69b935b2c5595ea6e6745R26-R33\">consuming fuel always succeeds</a>.</p>\n<p>The crate documentation now includes <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208/files#diff-44e629d62ffdb48dc3adbab88819739995f85234978e97af290db578d14e91f8R19-R30\">a section about the fuel parameter</a>.</p>\n<p>What do you think about this?</p>\n</blockquote>",
        "id": 353306137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682603532
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208#issuecomment-1526058346\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208\">issue #6208</a>:</p>\n<blockquote>\n<p>To provide a little context to Chris' comments, the reason he suggested printing the control-plane info like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">chaos</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"kc\">false</span>\n</code></pre></div>\n<p>is because the <code>Debug</code> output for these fuzz cases is supposed to be valid input for <code>clif-util test</code>, which helps us to reproduce and diagnose fuzz failures. (I usually run this as <code>cargo run -p cranelift-tools test</code> and you can find it in <code>cranelift/src/</code>.)</p>\n<p>Adding text like this in the middle won't parse:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">control</span><span class=\"w\"> </span><span class=\"n\">plane</span>:\n            <span class=\"nc\">data</span>: <span class=\"nc\">true</span>\n<span class=\"w\">            </span><span class=\"n\">fuel</span>: <span class=\"nb\">None</span>\n</code></pre></div>\n<p>I'm not sure his suggested syntax of <code>chaos=...</code> will parse right now either, but it's more consistent with how we've done other things. We can certainly discuss other choices of syntax, but we should pick something with a structure that we can parse easily, not just something for human consumption.</p>\n<p>That said, personally I think it would be fine to print this information in a comment (each line starting with <code>;</code>) at first, and figure out the syntax details later.</p>\n</blockquote>",
        "id": 353404165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682615837
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208#issuecomment-1526111426\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208\">issue #6208</a>:</p>\n<blockquote>\n<p>That makes sense! I added a <code>;</code> at the start of each line.</p>\n<p>output:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_table_access_spectre_mitigation</span><span class=\"o\">=</span><span class=\"kc\">false</span>\n<span class=\"w\">        </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">has_sse42</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"n\">has_avx2</span><span class=\"w\"> </span><span class=\"n\">has_fma</span><span class=\"w\"> </span><span class=\"n\">has_popcnt</span><span class=\"w\"> </span><span class=\"n\">has_bmi1</span><span class=\"w\"> </span><span class=\"n\">has_bmi2</span><span class=\"w\"> </span><span class=\"n\">has_lzcnt</span>\n\n<span class=\"w\">        </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">control</span><span class=\"w\"> </span><span class=\"n\">plane</span>:\n        <span class=\"p\">;</span><span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"nc\">true</span>\n<span class=\"w\">        </span><span class=\"p\">;</span><span class=\"w\">    </span><span class=\"n\">fuel</span>: <span class=\"nb\">None</span>\n\n        <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"nc\">system_v</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 353424123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682618607
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208#issuecomment-1535654248\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208\">issue #6208</a>:</p>\n<blockquote>\n<p>Still missing from the parsing:</p>\n<ul>\n<li>[ ] using the cranelift setting to set the fuel limit on all parsed control planes</li>\n<li>[ ] making the parsing logic less barbaric / fit with the rest</li>\n</ul>\n<p>I might not get around to that before the weekend.</p>\n</blockquote>",
        "id": 355928273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683257186
    },
    {
        "content": "<p>remlse edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208#issuecomment-1535654248\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6208\">issue #6208</a>:</p>\n<blockquote>\n<p>Still missing from the parsing:</p>\n<ul>\n<li>[ ] using the cranelift setting to set the fuel limit on all parsed control planes</li>\n<li>[ ] making the parsing logic less barbaric / fit with the rest</li>\n<li>[ ] fix tests</li>\n</ul>\n<p>I might not get around to that before the weekend.</p>\n</blockquote>",
        "id": 355928324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683257202
    }
]