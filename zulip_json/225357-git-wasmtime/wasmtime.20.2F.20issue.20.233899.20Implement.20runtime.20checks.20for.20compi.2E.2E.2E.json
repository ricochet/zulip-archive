[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#issuecomment-1062151104\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899\">issue #3899</a>:</p>\n<blockquote>\n<p>This actually ended up catching a preexisting bug in our spectests implementation during <code>cargo test</code> where reference types are enabled but by calling <code>Config::strategy</code> it overwrites the compiler builder meaning existing settings are removed (such as <code>enable_safepoints</code>) and later when a module is instantiated reference types are enabled but safepoints aren't. Previously this was allowed but now it's rejected at <code>Module</code>-creation time. For now the fix I implemented was to avoid calling <code>Config::strategy</code>, but now that I say this out loud it might be better to simply remove the <code>Config::strategy</code> method since it doesn't do anything anyway and is sort of dangerous to blow away existing settings.</p>\n</blockquote>",
        "id": 274597414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646769415
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#issuecomment-1062162032\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899\">issue #3899</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 274598971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646769993
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#issuecomment-1118481968\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899\">issue #3899</a>:</p>\n<blockquote>\n<p>I just noticed that this seems to have broken the test suite on IBM Z when running on z15 or later.  All <code>wasi_tokio</code> tests now fail with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"mi\">0</span>: <span class=\"nc\">compilation</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">compatible</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">-</span><span class=\"n\">specific</span><span class=\"w\"> </span><span class=\"n\">flag</span><span class=\"w\"> </span><span class=\"s\">\"has_mie2\"</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">available</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like the JIT auto-detects the availability of the MIE2 feature (from cranelift-native), but then wasmtime checks again but now thinks that feature is unsupported (since there is no IBM Z support in <code>check_compatible_with_isa_flag</code> yet).</p>\n<p>What's the right approach here?   Just re-implement the feature check?   (I must admit I'm not sure what the point of the double checking here is, in particular with a duplicated code base ...)<br>\n</p>\n</blockquote>",
        "id": 281290286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651753202
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#issuecomment-1118629504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899\">issue #3899</a>:</p>\n<blockquote>\n<p>Yeah in this case implementing the check is good. The purpose of this is to guard against loading precompiled modules with the wrong configuration settings. The duplication is unfortunate but I didn't see any obvious way to unify things (one says \"activate the right features for the host\" and the other says \"verify each feature against the host\", different enough I couldn't figure out how to abstract).</p>\n</blockquote>",
        "id": 281307153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651761225
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#issuecomment-1118671028\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899\">issue #3899</a>:</p>\n<blockquote>\n<p>OK, I've now implemented this here: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4101\">https://github.com/bytecodealliance/wasmtime/pull/4101</a></p>\n</blockquote>",
        "id": 281311975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651763227
    }
]