[
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398740826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698343590
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398740827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698343590
    },
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a> from <code>elliottt:trevor/fallible-fields-operations</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Add the ability to return errors when calls to <code>fields.set</code> or <code>fields.append</code> contain headers that are forbidden, and add the validation functions to <code>WasiHttpView</code> for extensibility. This change also necessitates tracking the intended use of <code>fields</code> values, implicitly set when the <code>fields</code> is constructed from an <code>incoming-request</code> or <code>incoming-response</code>, or explicitly set when using <code>fields.constructor</code>.<br>\n</p>\n</blockquote>",
        "id": 398740829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698343590
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>:</p>\n<blockquote>\n<p>Add the ability to return errors when calls to <code>fields.set</code> or <code>fields.append</code> contain headers that are forbidden, and add the validation functions to <code>WasiHttpView</code> for extensibility. This change also necessitates tracking the intended use of <code>fields</code> values, implicitly set when the <code>fields</code> is constructed from an <code>incoming-request</code> or <code>incoming-response</code>, or explicitly set when using <code>fields.constructor</code>.</p>\n<p>Fixes #7270</p>\n</blockquote>",
        "id": 398740913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698343620
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398740937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698343631
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1700230076\">PR review</a>.</p>",
        "id": 398741544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698343843
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#discussion_r1373553915\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't like this trap when the fields provided aren't meant for a request. This pushes me towards thinking that we shouldn't use a <code>constructor</code> here, but instead a static method for making a request that can fail.</p>\n</blockquote>",
        "id": 398741548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698343844
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#discussion_r1373554872\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd appreciate some input on what a good default set of forbidden headers is for requests and responses.</p>\n</blockquote>",
        "id": 398741658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698343888
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1700231677\">PR review</a>.</p>",
        "id": 398741660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698343888
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398779471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698361176
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1700766448\">PR review</a>.</p>",
        "id": 398780250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698361471
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#discussion_r1373908087\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be useful to add the <code>HeaderMap</code> that's being added to as an argument here as well?</p>\n</blockquote>",
        "id": 398780252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698361472
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398794923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698369518
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398799030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698371687
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>:</p>\n<blockquote>\n<p>This PR includes two approaches to handling fallible <code>fields</code> methods. Both make the return values of <code>fields.set</code> and <code>fields.append</code> fallible, though they differ in what they consider errors to report at that point.</p>\n<ol>\n<li>Adds the ability to return errors when calls to <code>fields.set</code> or <code>fields.append</code> contain headers that are forbidden, and add the validation functions to <code>WasiHttpView</code> for extensibility. This change also necessitates tracking the intended use of <code>fields</code> values, implicitly set when the <code>fields</code> is constructed from an <code>incoming-request</code> or <code>incoming-response</code>, or explicitly set when using <code>fields.constructor</code>.</li>\n<li>Rejects malformed header names in <code>fields.set</code> and <code>fields.append</code>, but allows forbidden headers at that point. Instead of plumbing through the intended ultimate use in the <code>fields</code> type, validation of forbidden headers is done in the consumer of the <code>outbound-response</code> or <code>outbound-request</code> values (<code>response-outparam.set</code> or the <code>outgoing-handler.handle</code> functions).</li>\n</ol>\n<p>The last commit implements approach 2, and approach 1 can be seen by reverting it.</p>\n<p>Fixes #7270</p>\n</blockquote>",
        "id": 398800007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698372156
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398800126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698372227
    },
    {
        "content": "<p>lukewagner submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1700967570\">PR review</a>.</p>",
        "id": 398815954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698379701
    },
    {
        "content": "<p>lukewagner created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#discussion_r1374050496\">PR review comment</a>:</p>\n<blockquote>\n<p>I think in the case of header errors, the set of failure reasons is disjoint from all the other places that produce <code>error</code>s, which I think makes it worth having a separate variant just for header errors such as:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>variant header-error {\n  invalid-syntax,\n  forbidden\n}\n</code></pre></div>\n<p>(I know we don't usually maximally-specialize error variants, but it seems like in cases where they're fully disjoint like this, it's worthwhile.)</p>\n</blockquote>",
        "id": 398815955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698379701
    },
    {
        "content": "<p>lukewagner submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1700969068\">PR review</a>.</p>",
        "id": 398816234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698379857
    },
    {
        "content": "<p>lukewagner created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#discussion_r1374051526\">PR review comment</a>:</p>\n<blockquote>\n<p>If we reject invalid headers eagerly, then I think there shouldn't be any error possible here.  In particular, the <code>set</code> operation shouldn't be describing the actual sending of the response over the network (that kind of error would be reflecting in the streaming operations for writing to and finishing the response body); this operation should be the equivalent of <code>*outparam = result;</code>.  Or am I missing something else that can happen here?</p>\n</blockquote>",
        "id": 398816236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698379857
    },
    {
        "content": "<p>lukewagner submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1700976876\">PR review</a>.</p>",
        "id": 398817490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698380619
    },
    {
        "content": "<p>lukewagner created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#discussion_r1374057025\">PR review comment</a>:</p>\n<blockquote>\n<p>Note also that if we expand the WASI HTTP spec to distinguish \"definitely-forbidden\" headers (listed by the WASI HTTP spec) and \"host-forbidden\" headers (that's purely up to the current running host), we'd probably split <code>forbidden</code> into two cases to reflect the difference.</p>\n</blockquote>",
        "id": 398817491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698380619
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1702104454\">PR review</a>.</p>",
        "id": 398925504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698422275
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#discussion_r1374772237\">PR review comment</a>:</p>\n<blockquote>\n<p>I like that specific error type more than extending the more general <code>error</code> variant, thanks! I'm not sure about differentiating between definitely forbidden and host forbidden though: what would a guest do differently if it knew the difference between definitely forbidden and host forbidden?</p>\n</blockquote>",
        "id": 398925506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698422276
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398939922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698427270
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1702242242\">PR review</a>.</p>",
        "id": 398940075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698427329
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#discussion_r1374859449\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point. Switching to having forbidden headers rejected at <code>fields.set</code> and <code>fields.append</code> removes the need to allow validation here.</p>\n</blockquote>",
        "id": 398940076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698427329
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398940482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698427555
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>:</p>\n<blockquote>\n<p>This PR makes the <code>fields.set</code> and <code>fields.append</code> methods fallible, and introduces a new error type for describing the ways in which those operations can fail. Additionally it adds a notion of forbidden headers, which will always include the following:</p>\n<ul>\n<li>Connection</li>\n<li>Keep-Alive</li>\n<li>Proxy-Authenticate</li>\n<li>Proxy-Authorization</li>\n<li>Proxy-Connection</li>\n<li>TE</li>\n<li>Transfer-Encoding</li>\n<li>Upgrade</li>\n<li>HTTP2-Settings</li>\n</ul>\n<p>There's an embedder-defined hook for adding additional header name validation, but that underlying set of headers can't be altered.</p>\n<p>Fixes #7270</p>\n</blockquote>",
        "id": 398940823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698427694
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398940908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698427742
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398941372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698427939
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398941890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698428171
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398942621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698428473
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398945618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698429713
    },
    {
        "content": "<p>lukewagner created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#discussion_r1374929541\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    unexpected-error(string)\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 398950644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698431973
    },
    {
        "content": "<p>lukewagner submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1702351680\">PR review</a>.</p>",
        "id": 398950645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698431973
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398951046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698432143
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 398952224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698432706
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383#pullrequestreview-1704740302\">PR review</a>:</p>\n<blockquote>\n<p>Looks great overall - rather than trap in the fields constructor, lets make the constructor create an empty set of fields, and have a static function that takes the list&lt;tuple&lt;...&gt;&gt; repr and returns result&lt;fields, header-error&gt;</p>\n</blockquote>",
        "id": 399349204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698687577
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 399353289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698689258
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 399353510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698689338
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 399360206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698692207
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7383\">PR #7383</a>.</p>",
        "id": 399379576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698701240
    }
]