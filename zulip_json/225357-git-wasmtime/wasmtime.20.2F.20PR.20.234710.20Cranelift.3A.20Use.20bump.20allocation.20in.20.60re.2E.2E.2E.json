[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710\">PR #4710</a>.</p>",
        "id": 293601692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660589533
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710\">PR #4710</a> from <code>bump-alloc-in-remove-constant-phis</code> to <code>main</code>:</p>\n<blockquote>\n<p>This makes compilation 2-6% faster for Sightglass's bz2 benchmark:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">7290648.36</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">4245152.07</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">bump</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.06</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">166388177</span><span class=\"w\"> </span><span class=\"mf\">183238542.98</span><span class=\"w\"> </span><span class=\"mi\">214732518</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">bump</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">172836648</span><span class=\"w\"> </span><span class=\"mf\">190529191.34</span><span class=\"w\"> </span><span class=\"mi\">217514271</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">182220055</span><span class=\"w\"> </span><span class=\"mf\">225793551.12</span><span class=\"w\"> </span><span class=\"mi\">277857575</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">bump</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">193212613</span><span class=\"w\"> </span><span class=\"mf\">227784078.61</span><span class=\"w\"> </span><span class=\"mi\">277175335</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">3848442474</span><span class=\"w\"> </span><span class=\"mf\">4295214144.37</span><span class=\"w\"> </span><span class=\"mi\">4665127241</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">bump</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">3969505457</span><span class=\"w\"> </span><span class=\"mf\">4262415290.10</span><span class=\"w\"> </span><span class=\"mi\">4563869974</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 293601693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660589533
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#discussion_r946037730\">PR review comment</a>:</p>\n<blockquote>\n<p>While we're here, is <code>blocks_reverse_postorder.len()</code> the only remaining reason we need to collect RPO into a <code>Vec</code> above? Or can we iterate on the iterator chain (postorder ... <code>.rev()</code>) below, and get the length from that somehow too?</p>\n</blockquote>",
        "id": 293603375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660590130
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#pullrequestreview-1073068211\">PR review</a>.</p>",
        "id": 293603376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660590130
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#pullrequestreview-1073068211\">PR review</a>.</p>",
        "id": 293603377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660590130
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#discussion_r946039088\">PR review comment</a>:</p>\n<blockquote>\n<p>Does <code>summaries</code> still need to be a hashmap? It seems to me like it should be dense. If we can have a default state (either <code>Option&lt;BlockSummary&lt;'a&gt;&gt;</code> or a zero-alloc and cloneable empty <code>BlockSummary</code>) we could use a <code>SecondaryMap</code> here I think.</p>\n</blockquote>",
        "id": 293603378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660590130
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#discussion_r946060794\">PR review comment</a>:</p>\n<blockquote>\n<p>You can get the length of an iterator using <code>.count()</code>. This avoids the intermediate allocation of a <code>Vec</code>.</p>\n</blockquote>",
        "id": 293607955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660591913
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#pullrequestreview-1073110693\">PR review</a>.</p>",
        "id": 293607956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660591913
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#pullrequestreview-1073111914\">PR review</a>.</p>",
        "id": 293608155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660591991
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#discussion_r946061678\">PR review comment</a>:</p>\n<blockquote>\n<p>However we do iterate over it below: <code>for &amp;&amp;b in &amp;blocks_reverse_postorder {</code>.</p>\n</blockquote>",
        "id": 293608156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660591991
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#pullrequestreview-1073121050\">PR review</a>.</p>",
        "id": 293609608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660592577
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#discussion_r946068231\">PR review comment</a>:</p>\n<blockquote>\n<p>Right, the idea is that we could iterate over <code>domtree.cfg_postorder().iter().rev()</code> (with that expression directly in the <code>for</code>). And I see <code>cfg_postorder</code> returns a slice so we can do <code>domtree.cfg_postorder().len()</code> here I think.</p>\n</blockquote>",
        "id": 293609609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660592578
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#pullrequestreview-1073149674\">PR review</a>.</p>",
        "id": 293613696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660594340
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#discussion_r946087911\">PR review comment</a>:</p>\n<blockquote>\n<p>About 30-35% of blocks don't get a block summary (no parameters themselves and no successors have params either) so it isn't a clear win since the hash map miiiiight end up using less space. I'll do a quick test and see if there is anything I can measure.</p>\n</blockquote>",
        "id": 293613697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660594340
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#discussion_r946088288\">PR review comment</a>:</p>\n<blockquote>\n<p>Did this and wasn't able to measure any difference in perf, but its a nice change (good eye!) so I'll push it up soon.</p>\n</blockquote>",
        "id": 293613765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660594374
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#pullrequestreview-1073150236\">PR review</a>.</p>",
        "id": 293613766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660594374
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#pullrequestreview-1073153730\">PR review</a>.</p>",
        "id": 293614270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660594601
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#discussion_r946090714\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah OK, in that case it seems totally fine to stick with the hashmap, unless we're surprised by your results!</p>\n</blockquote>",
        "id": 293614271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660594601
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710\">PR #4710</a> from <code>bump-alloc-in-remove-constant-phis</code> to <code>main</code>.</p>",
        "id": 293617265,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660595930
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#pullrequestreview-1073176171\">PR review</a>.</p>",
        "id": 293617430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660596003
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710#discussion_r946106634\">PR review comment</a>:</p>\n<blockquote>\n<p>I didn't get any measurable perf benefits from switching to a <code>SecondaryMap</code> but it did actually clean up a bit of <code>unwrap</code>s and such, so I do think I'll keep it.</p>\n</blockquote>",
        "id": 293617431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660596003
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710\">PR #4710</a>.</p>",
        "id": 293617460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660596014
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4710\">PR #4710</a>.</p>",
        "id": 293624644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660599363
    }
]