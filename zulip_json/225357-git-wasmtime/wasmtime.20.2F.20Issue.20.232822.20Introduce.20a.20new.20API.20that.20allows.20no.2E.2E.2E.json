[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822#issuecomment-816721250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822\">Issue #2822</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 233829749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617978355
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822#issuecomment-817201826\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822\">Issue #2822</a>:</p>\n<blockquote>\n<p>I wonder if we should be invoking <code>init_traps</code> automatically when we're about to resume a fiber inside of the async machinery just in case the future moved threads. It would reduce the use case of this to only times when users explicitly move a <code>Store</code> and related components to another thread.</p>\n</blockquote>",
        "id": 233987369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618088620
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822#issuecomment-817595687\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822\">Issue #2822</a>:</p>\n<blockquote>\n<p>It's a good point, and in fact it's already done automatically by wasmtime after resuming from a suspended fiber: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/traphandlers.rs#L436\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/traphandlers.rs#L436</a></p>\n<p>Your remark makes me notice that this new API would also create a double standard: the runtime may automatically manage switching to a different thread in one case (async import causing wasm execution resuming on a different thread) when in another case one has to explicitly call the new API. The ubiquity of multithreaded future executors makes it justified in my opinion, but that's open to discussion!</p>\n</blockquote>",
        "id": 234120429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618215454
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822#issuecomment-820447586\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822\">Issue #2822</a>:</p>\n<blockquote>\n<p>Thanks for this! I agree that it's a little odd that this might automatically happen as part of a future execution but then it doesn't automatically happen otherwise, but I agree that it's probably ok for now. Can you add documentation about this function on the multithreading page and also link the documentation on this function to the multithreading page?</p>\n</blockquote>",
        "id": 234681063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618495439
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822#issuecomment-821004712\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2822\">Issue #2822</a>:</p>\n<blockquote>\n<p>Done, thanks!</p>\n</blockquote>",
        "id": 234813113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618560942
    }
]