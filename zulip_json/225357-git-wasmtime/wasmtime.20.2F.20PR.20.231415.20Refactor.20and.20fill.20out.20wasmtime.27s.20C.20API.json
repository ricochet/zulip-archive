[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415\">PR #1415</a> from <code>refactor-c-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a pretty huge PR which refactors and rewrites a large part of the C API's internals. The goals from  this PR are:</p>\n<ul>\n<li>Fill out more C API surface area</li>\n<li>Organize the C API Rust source code to be easier to read/write</li>\n<li>Improve safety of the C API to avoid resorting to using <code>unsafe</code> everywhere</li>\n</ul>\n<p>These are each tackled in a variety of the commits below, and I'm willing to go into anything in more detail of course!</p>\n<p>Very few functional changes are intended as part of this PR. The only one I know of is that <code>wasm_functype_new</code> changed semantics where it takes ownership of the param/result vector memory <em>and</em> the types that the vectors point to. Previously it would only free the vector memory and it would not free the types that the vector memory points to.</p>\n<p>Reviewing this as a whole is unfortunately going to be relatively difficult. We don't have a huge amount of tests for the C API but I'm hoping that we can use what we have to get some coverage at least. In addition to the .NET extension in-tree using the C API I'm working on a python extension rewrite out of tree, and I've gotten all those current tests passing with this which gives me some degree of confidence at least. In theory though all the C API functions are pretty bite-sized and should be easy to skim over, but I may have to also mostly be trusted that I didn't change too too much while I was moving things around here.</p>\n</blockquote>",
        "id": 191958373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585262599
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\" title=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415\">PR #1415</a>.</p>",
        "id": 191958376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585262602
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\" title=\"https://github.com/peterhuene\">peterhuene</a> and <a href=\"https://github.com/yurydelendik\" title=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415\">PR #1415</a>.</p>",
        "id": 191958379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585262606
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415\">PR #1415</a> from <code>refactor-c-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a pretty huge PR which refactors and rewrites a large part of the C API's internals. The goals from  this PR are:</p>\n<ul>\n<li>Fill out more C API surface area</li>\n<li>Organize the C API Rust source code to be easier to read/write</li>\n<li>Improve safety of the C API to avoid resorting to using <code>unsafe</code> everywhere</li>\n</ul>\n<p>These are each tackled in a variety of the commits below, and I'm willing to go into anything in more detail of course!</p>\n<p>Very few functional changes are intended as part of this PR. The only one I know of is that <code>wasm_functype_new</code> changed semantics where it takes ownership of the param/result vector memory <em>and</em> the types that the vectors point to. Previously it would only free the vector memory and it would not free the types that the vector memory points to.</p>\n<p>Reviewing this as a whole is unfortunately going to be relatively difficult. We don't have a huge amount of tests for the C API but I'm hoping that we can use what we have to get some coverage at least. In addition to the .NET extension in-tree using the C API I'm working on a python extension rewrite out of tree, and I've gotten all those current tests passing with this which gives me some degree of confidence at least. In theory though all the C API functions are pretty bite-sized and should be easy to skim over, but I may have to also mostly be trusted that I didn't change too too much while I was moving things around here.</p>\n</blockquote>",
        "id": 191960214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585263938
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415#pullrequestreview-382489694\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415#pullrequestreview-382489694\">PR Review</a>.</p>",
        "id": 191964734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585268014
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415#pullrequestreview-382489694\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415#pullrequestreview-382489694\">PR Review</a>.</p>",
        "id": 191964735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585268014
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398952876\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398952876\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Same comment as above regarding returning <code>bool</code> for this function.</p>\n</blockquote>",
        "id": 191964736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585268014
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398952510\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398952510\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I wonder if this API should return <code>bool</code> to indicate it was successful rather than dropping the result?</p>\n</blockquote>",
        "id": 191964737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585268014
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398955960\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398955960\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm off the opinion that we should probably just close <a href=\"https://github.com/WebAssembly/wasm-c-api/issues/126\" title=\"https://github.com/WebAssembly/wasm-c-api/issues/126\">WebAssembly/wasm-c-api#126</a> and remove this FIXME.</p>\n</blockquote>",
        "id": 191964738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585268014
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398961287\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398961287\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I know the C API is thoroughly undocumented regarding return values, but it does seem to lean towards returning null in situations like this, rather than panic.</p>\n</blockquote>",
        "id": 191964739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585268014
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398955698\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398955698\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should we file a bug on the C API repo for this?  Seems like if there's a type mismatch or if the global isn't mutable that there should be a way of communicating the problem to the caller.</p>\n</blockquote>",
        "id": 191964740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585268014
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398961905\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398961905\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I doubt there would ever be more than 0 and 1 as values, but do we want symbolic representation of the C enum rather than the hardcoded values here and in <code>wasm_globaltype_mutability</code>?</p>\n</blockquote>",
        "id": 191964741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585268014
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398955960\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415#discussion_r398955960\">PR Review Comment</a>.</p>",
        "id": 191964757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585268037
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415\">PR #1415</a> from <code>refactor-c-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a pretty huge PR which refactors and rewrites a large part of the C API's internals. The goals from  this PR are:</p>\n<ul>\n<li>Fill out more C API surface area</li>\n<li>Organize the C API Rust source code to be easier to read/write</li>\n<li>Improve safety of the C API to avoid resorting to using <code>unsafe</code> everywhere</li>\n</ul>\n<p>These are each tackled in a variety of the commits below, and I'm willing to go into anything in more detail of course!</p>\n<p>Very few functional changes are intended as part of this PR. The only one I know of is that <code>wasm_functype_new</code> changed semantics where it takes ownership of the param/result vector memory <em>and</em> the types that the vectors point to. Previously it would only free the vector memory and it would not free the types that the vector memory points to.</p>\n<p>Reviewing this as a whole is unfortunately going to be relatively difficult. We don't have a huge amount of tests for the C API but I'm hoping that we can use what we have to get some coverage at least. In addition to the .NET extension in-tree using the C API I'm working on a python extension rewrite out of tree, and I've gotten all those current tests passing with this which gives me some degree of confidence at least. In theory though all the C API functions are pretty bite-sized and should be easy to skim over, but I may have to also mostly be trusted that I didn't change too too much while I was moving things around here.</p>\n</blockquote>",
        "id": 192021731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585318091
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415\">PR #1415</a> from <code>refactor-c-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a pretty huge PR which refactors and rewrites a large part of the C API's internals. The goals from  this PR are:</p>\n<ul>\n<li>Fill out more C API surface area</li>\n<li>Organize the C API Rust source code to be easier to read/write</li>\n<li>Improve safety of the C API to avoid resorting to using <code>unsafe</code> everywhere</li>\n</ul>\n<p>These are each tackled in a variety of the commits below, and I'm willing to go into anything in more detail of course!</p>\n<p>Very few functional changes are intended as part of this PR. The only one I know of is that <code>wasm_functype_new</code> changed semantics where it takes ownership of the param/result vector memory <em>and</em> the types that the vectors point to. Previously it would only free the vector memory and it would not free the types that the vector memory points to.</p>\n<p>Reviewing this as a whole is unfortunately going to be relatively difficult. We don't have a huge amount of tests for the C API but I'm hoping that we can use what we have to get some coverage at least. In addition to the .NET extension in-tree using the C API I'm working on a python extension rewrite out of tree, and I've gotten all those current tests passing with this which gives me some degree of confidence at least. In theory though all the C API functions are pretty bite-sized and should be easy to skim over, but I may have to also mostly be trusted that I didn't change too too much while I was moving things around here.</p>\n</blockquote>",
        "id": 192028054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585320624
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1415\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1415\">PR #1415</a>.</p>",
        "id": 192028073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585320634
    }
]