[
    {
        "content": "<p>bkolobara opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695\">issue #3695</a>:</p>\n<blockquote>\n<p>I'm running into some troubles with the <code>Engine</code> configuration settings around memories in <code>wasmtime = \"0.33\"</code>. There may be a few different issues here, but because everything is entangled together I will post them all here.</p>\n<p>I'm trying to spawn 100k wasm instances and am hitting a few problems that I assume are related around virtual memory exhaustion.</p>\n<p>This is a minimal example that demonstrates the first issue:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My reasoning here is:</p>\n<ol>\n<li><code>config.static_memory_forced(true)</code> will force the engine to always use static memory.</li>\n<li><code>config.static_memory_maximum_size(15 * 65536)</code> will allocate up to 15 wasm pages of virtual memory.</li>\n<li><code>config.static_memory_guard_size(65536)</code> will add one more wasm page of virtual memory.</li>\n<li>There is also going to be one extra OS page (4kb?) of virtual memory as a guard before the memory.</li>\n</ol>\n<p>This works fine on <code>64bit MacOs</code>, but fails to finish on <code>64bit linux</code> with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>:\n<span class=\"nc\">Insufficient</span><span class=\"w\"> </span><span class=\"n\">resources</span>: <span class=\"nc\">System</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span>:<span class=\"mi\">60</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have also unsuccessfully tried to use dynamic memories instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">dynamic_memory_reserved_for_growth</span><span class=\"p\">(</span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I assume this should force all memories to be dynamic (<code>static_memory_maximum_size(0)</code>), but only allocate up to 15 wasm pages of virtual memory. However, this fails again with an <code>Insufficient resources</code> error on <code>Linux</code>, but works on <code>MacOs</code>.</p>\n<p>What would be a correct approach here that lets me specify a maximum virtual memory size, but also works on <code>Linux</code> so I can spawn more than 16k memories?</p>\n<p>While experimenting with this, I also noticed another inconsistency. If we change the <code>config.static_memory_maximum_size</code> to a lower value than the wasm module is requesting:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// 5 Wasm pages</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// 10 Wasm pages requested</span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>Engine</code> is going to use a <code>dynamic</code> memory, even it was configured with <code>static_memory_forced(true)</code>. This previous example will be failing also on <code>MacOs</code> too with an <code>Insufficient resources</code> error. Only if we add a <code>config.dynamic_memory_reserved_for_growth(65536);</code> it will work.</p>\n<h3>Personal thoughts</h3>\n<p>There is a lot of documentation around these settings, but I have read multiple times through it and somehow still can't figure it out. The most annoying issue is that the documentation only lists defaults for <code>32 bit</code> and <code>64 bit</code> machines, but the behaviour also seems to differ depending on the OS you are running.</p>\n<p>With <code>memory64</code> and <code>dynamic_memory_reserved_for_growth </code> the lines are even more blured between <code>static</code> and <code>dynamic</code> memory. I'm wondering if maybe we could get away with just one memory model that makes it clearer what is happening in the background?</p>\n<p>It would be a <code>dynamic</code> memory with the following settings:<br>\n1. <code>memory_initial_virtual_size(u64)</code> - The dynamic memory can grow until this point without copying.<br>\n2. <code>memory_virtual_resize(bool)</code> - This would turn it into a static memory.<br>\n3. <code>memory_guard_size(u64)</code> - The guard page.</p>\n<p>The defaults (64bit systems) would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">memory_initial_virtual_size</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"n\">G</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">memory_virtual_resize</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">G</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Resulting in the same properties the current defaults have.</p>\n<p>This model is less feature rich, but I feel like the current system is so complicated that it's almost impossible to reason about what is going to be happening when you mix multiple settings.</p>\n</blockquote>",
        "id": 268295652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642439395
    },
    {
        "content": "<p>bkolobara labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695\">issue #3695</a>:</p>\n<blockquote>\n<p>I'm running into some troubles with the <code>Engine</code> configuration settings around memories in <code>wasmtime = \"0.33\"</code>. There may be a few different issues here, but because everything is entangled together I will post them all here.</p>\n<p>I'm trying to spawn 100k wasm instances and am hitting a few problems that I assume are related around virtual memory exhaustion.</p>\n<p>This is a minimal example that demonstrates the first issue:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My reasoning here is:</p>\n<ol>\n<li><code>config.static_memory_forced(true)</code> will force the engine to always use static memory.</li>\n<li><code>config.static_memory_maximum_size(15 * 65536)</code> will allocate up to 15 wasm pages of virtual memory.</li>\n<li><code>config.static_memory_guard_size(65536)</code> will add one more wasm page of virtual memory.</li>\n<li>There is also going to be one extra OS page (4kb?) of virtual memory as a guard before the memory.</li>\n</ol>\n<p>This works fine on <code>64bit MacOs</code>, but fails to finish on <code>64bit linux</code> with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>:\n<span class=\"nc\">Insufficient</span><span class=\"w\"> </span><span class=\"n\">resources</span>: <span class=\"nc\">System</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span>:<span class=\"mi\">60</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have also unsuccessfully tried to use dynamic memories instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">dynamic_memory_reserved_for_growth</span><span class=\"p\">(</span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I assume this should force all memories to be dynamic (<code>static_memory_maximum_size(0)</code>), but only allocate up to 15 wasm pages of virtual memory. However, this fails again with an <code>Insufficient resources</code> error on <code>Linux</code>, but works on <code>MacOs</code>.</p>\n<p>What would be a correct approach here that lets me specify a maximum virtual memory size, but also works on <code>Linux</code> so I can spawn more than 16k memories?</p>\n<p>While experimenting with this, I also noticed another inconsistency. If we change the <code>config.static_memory_maximum_size</code> to a lower value than the wasm module is requesting:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// 5 Wasm pages</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// 10 Wasm pages requested</span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>Engine</code> is going to use a <code>dynamic</code> memory, even it was configured with <code>static_memory_forced(true)</code>. This previous example will be failing also on <code>MacOs</code> too with an <code>Insufficient resources</code> error. Only if we add a <code>config.dynamic_memory_reserved_for_growth(65536);</code> it will work.</p>\n<h3>Personal thoughts</h3>\n<p>There is a lot of documentation around these settings, but I have read multiple times through it and somehow still can't figure it out. The most annoying issue is that the documentation only lists defaults for <code>32 bit</code> and <code>64 bit</code> machines, but the behaviour also seems to differ depending on the OS you are running.</p>\n<p>With <code>memory64</code> and <code>dynamic_memory_reserved_for_growth </code> the lines are even more blured between <code>static</code> and <code>dynamic</code> memory. I'm wondering if maybe we could get away with just one memory model that makes it clearer what is happening in the background?</p>\n<p>It would be a <code>dynamic</code> memory with the following settings:<br>\n1. <code>memory_initial_virtual_size(u64)</code> - The dynamic memory can grow until this point without copying.<br>\n2. <code>memory_virtual_resize(bool)</code> - This would turn it into a static memory.<br>\n3. <code>memory_guard_size(u64)</code> - The guard page.</p>\n<p>The defaults (64bit systems) would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">memory_initial_virtual_size</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"n\">G</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">memory_virtual_resize</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">G</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Resulting in the same properties the current defaults have.</p>\n<p>This model is less feature rich, but I feel like the current system is so complicated that it's almost impossible to reason about what is going to be happening when you mix multiple settings.</p>\n</blockquote>",
        "id": 268295653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642439395
    },
    {
        "content": "<p>bkolobara edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695\">issue #3695</a>:</p>\n<blockquote>\n<p>I'm running into some troubles with the <code>Engine</code> configuration settings around memories in <code>wasmtime = \"0.33\"</code>. There may be a few different issues here, but because everything is entangled together I will post them all here.</p>\n<p>I'm trying to spawn 100k wasm instances and am hitting a few problems that I assume are related around virtual memory exhaustion.</p>\n<p>This is a minimal example that demonstrates the first issue:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My reasoning here is:</p>\n<ol>\n<li><code>config.static_memory_forced(true)</code> will force the engine to always use static memory.</li>\n<li><code>config.static_memory_maximum_size(15 * 65536)</code> will allocate up to 15 wasm pages of virtual memory.</li>\n<li><code>config.static_memory_guard_size(65536)</code> will add one more wasm page of virtual memory.</li>\n<li>There is also going to be one extra OS page (4kb?) of virtual memory as a guard before the memory.</li>\n</ol>\n<p>This works fine on <code>64bit MacOs</code>, but fails to finish on <code>64bit linux</code> with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>:\n<span class=\"nc\">Insufficient</span><span class=\"w\"> </span><span class=\"n\">resources</span>: <span class=\"nc\">System</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span>:<span class=\"mi\">60</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have also unsuccessfully tried to use dynamic memories instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">dynamic_memory_reserved_for_growth</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I assume this should force all memories to be dynamic (<code>static_memory_maximum_size(0)</code>), but only allocate up to 15 wasm pages of virtual memory. However, this fails again with an <code>Insufficient resources</code> error on <code>Linux</code>, but works on <code>MacOs</code>.</p>\n<p>What would be a correct approach here that lets me specify a maximum virtual memory size, but also works on <code>Linux</code> so I can spawn more than 16k memories?</p>\n<p>While experimenting with this, I also noticed another inconsistency. If we change the <code>config.static_memory_maximum_size</code> to a lower value than the wasm module is requesting:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// 5 Wasm pages</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// 10 Wasm pages requested</span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>Engine</code> is going to use a <code>dynamic</code> memory, even it was configured with <code>static_memory_forced(true)</code>. This previous example will be failing also on <code>MacOs</code> too with an <code>Insufficient resources</code> error. Only if we add a <code>config.dynamic_memory_reserved_for_growth(65536);</code> it will work.</p>\n<h3>Personal thoughts</h3>\n<p>There is a lot of documentation around these settings, but I have read multiple times through it and somehow still can't figure it out. The most annoying issue is that the documentation only lists defaults for <code>32 bit</code> and <code>64 bit</code> machines, but the behaviour also seems to differ depending on the OS you are running.</p>\n<p>With <code>memory64</code> and <code>dynamic_memory_reserved_for_growth </code> the lines are even more blured between <code>static</code> and <code>dynamic</code> memory. I'm wondering if maybe we could get away with just one memory model that makes it clearer what is happening in the background?</p>\n<p>It would be a <code>dynamic</code> memory with the following settings:<br>\n1. <code>memory_initial_virtual_size(u64)</code> - The dynamic memory can grow until this point without copying.<br>\n2. <code>memory_virtual_resize(bool)</code> - This would turn it into a static memory.<br>\n3. <code>memory_guard_size(u64)</code> - The guard page.</p>\n<p>The defaults (64bit systems) would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">memory_initial_virtual_size</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"n\">G</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">memory_virtual_resize</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">G</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Resulting in the same properties the current defaults have.</p>\n<p>This model is less feature rich, but I feel like the current system is so complicated that it's almost impossible to reason about what is going to be happening when you mix multiple settings.</p>\n</blockquote>",
        "id": 268371156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642501877
    },
    {
        "content": "<p>bkolobara edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695\">issue #3695</a>:</p>\n<blockquote>\n<p>I'm running into some troubles with the <code>Engine</code> configuration settings around memories in <code>wasmtime = \"0.33\"</code>. There may be a few different issues here, but because everything is entangled together I will post them all here.</p>\n<p>I'm trying to spawn 100k wasm instances and am hitting a few problems that I assume are related around virtual memory exhaustion.</p>\n<p>This is a minimal example that demonstrates the first issue:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My reasoning here is:</p>\n<ol>\n<li><code>config.static_memory_forced(true)</code> will force the engine to always use static memory.</li>\n<li><code>config.static_memory_maximum_size(15 * 65536)</code> will allocate up to 15 wasm pages of virtual memory.</li>\n<li><code>config.static_memory_guard_size(65536)</code> will add one more wasm page of virtual memory.</li>\n<li>There is also going to be one extra OS page (4kb?) of virtual memory as a guard before the memory.</li>\n</ol>\n<p>This works fine on <code>64bit MacOs</code>, but fails to finish on <code>64bit linux</code> with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>:\n<span class=\"nc\">Insufficient</span><span class=\"w\"> </span><span class=\"n\">resources</span>: <span class=\"nc\">System</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span>:<span class=\"mi\">60</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have also unsuccessfully tried to use dynamic memories instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">dynamic_memory_reserved_for_growth</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I assume this should force all memories to be dynamic (<code>static_memory_maximum_size(0)</code>), but only allocate up to 15 wasm pages of virtual memory initially. However, this fails again with an <code>Insufficient resources</code> error on <code>Linux</code>, but works on <code>MacOs</code>.</p>\n<p>What would be a correct approach here that lets me specify a maximum virtual memory size, but also works on <code>Linux</code> so I can spawn more than 16k memories?</p>\n<p>While experimenting with this, I also noticed another inconsistency. If we change the <code>config.static_memory_maximum_size</code> to a lower value than the wasm module is requesting:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// 5 Wasm pages</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// 10 Wasm pages requested</span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>Engine</code> is going to use a <code>dynamic</code> memory, even it was configured with <code>static_memory_forced(true)</code>. This previous example will be failing also on <code>MacOs</code> too with an <code>Insufficient resources</code> error. Only if we add a <code>config.dynamic_memory_reserved_for_growth(65536);</code> it will work.</p>\n<h3>Personal thoughts</h3>\n<p>There is a lot of documentation around these settings, but I have read multiple times through it and somehow still can't figure it out. The most annoying issue is that the documentation only lists defaults for <code>32 bit</code> and <code>64 bit</code> machines, but the behaviour also seems to differ depending on the OS you are running.</p>\n<p>With <code>memory64</code> and <code>dynamic_memory_reserved_for_growth </code> the lines are even more blured between <code>static</code> and <code>dynamic</code> memory. I'm wondering if maybe we could get away with just one memory model that makes it clearer what is happening in the background?</p>\n<p>It would be a <code>dynamic</code> memory with the following settings:<br>\n1. <code>memory_initial_virtual_size(u64)</code> - The dynamic memory can grow until this point without copying.<br>\n2. <code>memory_virtual_resize(bool)</code> - This would turn it into a static memory.<br>\n3. <code>memory_guard_size(u64)</code> - The guard page.</p>\n<p>The defaults (64bit systems) would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">memory_initial_virtual_size</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"n\">G</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">memory_virtual_resize</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">G</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Resulting in the same properties the current defaults have.</p>\n<p>This model is less feature rich, but I feel like the current system is so complicated that it's almost impossible to reason about what is going to be happening when you mix multiple settings.</p>\n</blockquote>",
        "id": 268371192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642501905
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695#issuecomment-1015696494\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695\">issue #3695</a>:</p>\n<blockquote>\n<p>Thanks for the report on this! I completely agree the settings are confusing, even as the one who tried to document them all originally I still struggle and reread the docs every time... I think what you've proposed actually makes a lot more sense and would be great to implement. I think we can probably keep wasmtime's internals the same they are now but it should be much easier to consume with the API you've proposed (or something similar). Would you be up for making a PR for this?</p>\n<p>For the first example of yours, though, I think Wasmtime is performing as expected. AFAIK there's no OS-specific behavior of Wasmtime itself but I think you're running into OS-specific limitations and behavior of <code>mmap</code> itself. Using <code>strace</code> to follow the programs:</p>\n<ul>\n<li>The first program (forced static, 15 page maximum) I see virtual memory reservations of 17 wasm pages, which corresponds to one page before, one page after, and 15 for the static memory. This is followed by an mprotect for 10 pages which makes the first 10 pages accessible.</li>\n<li>The second program (forced dynamic, 15 pages growth) I see virtual memory reservations of 27 wasm pages which corresponds to 1 page guard at the front, 1 at the end, 10 for the initial memory, and 15 to grow into. There's then an mprotect for 10 pages to initialize the memory.</li>\n<li>For the third program (\"forced static\", 5 page maximum) I see virtual memory reservations of 2GB + 12 wasm pages. You're right in that this is mistakenly selecting the dynamic strategy so the 2GB is the default amount of room to grow into and otherwise there's a guard in front, guard at the end, and 10 pages for the initial memory.</li>\n</ul>\n<p>So for the first two programs I think that Wasmtime is actually behaving as expected, although perhaps the OS is not behaving as you expect? I am not personally very familiar with the nuances of <code>mmap</code> on OS-es and how it relates to overcomit and such. For Linux I see that the failing syscall is <code>mprotect</code> where we make the initial pages read/write. Otherwise though fixing the issue where a static memory is \"forced\" but we still pick dynamic I think would be fixed with an easier-to-understand configuration scheme like you're proposing. The specific bug here is that instantiation of a 10-page memory into a 5-page-maximum config should simply fail, not accidentally fall back to dynamic allocation.</p>\n</blockquote>",
        "id": 268435698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642530668
    },
    {
        "content": "<p>bkolobara <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695#issuecomment-1016258932\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695\">issue #3695</a>:</p>\n<blockquote>\n<p>Thank you Alex for investigating this!</p>\n<p>You are right, this is a linux specific setting and Wasmtime is behaving as expected. The setting is <code>vm.max_map_count</code> and can be increased (until the next reboot) with <code>sysctl -w vm.max_map_count=262144</code>.</p>\n<p>I can try to contribute both PRs, one fixing the actual bug:</p>\n<blockquote>\n<p>The specific bug here is that instantiation of a 10-page memory into a 5-page-maximum config should simply fail, not accidentally fall back to dynamic allocation.</p>\n</blockquote>\n<p>And one for the memory config simplification.</p>\n</blockquote>",
        "id": 268513703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642585508
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695#issuecomment-1016555326\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695\">issue #3695</a>:</p>\n<blockquote>\n<p>Awesome, sounds great, and thanks!</p>\n</blockquote>",
        "id": 268551946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642604616
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695\">issue #3695</a>:</p>\n<blockquote>\n<p>I'm running into some troubles with the <code>Engine</code> configuration settings around memories in <code>wasmtime = \"0.33\"</code>. There may be a few different issues here, but because everything is entangled together I will post them all here.</p>\n<p>I'm trying to spawn 100k wasm instances and am hitting a few problems that I assume are related around virtual memory exhaustion.</p>\n<p>This is a minimal example that demonstrates the first issue:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">65536</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My reasoning here is:</p>\n<ol>\n<li><code>config.static_memory_forced(true)</code> will force the engine to always use static memory.</li>\n<li><code>config.static_memory_maximum_size(15 * 65536)</code> will allocate up to 15 wasm pages of virtual memory.</li>\n<li><code>config.static_memory_guard_size(65536)</code> will add one more wasm page of virtual memory.</li>\n<li>There is also going to be one extra OS page (4kb?) of virtual memory as a guard before the memory.</li>\n</ol>\n<p>This works fine on <code>64bit MacOs</code>, but fails to finish on <code>64bit linux</code> with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span>\n<span class=\"nc\">Insufficient</span><span class=\"w\"> </span><span class=\"n\">resources</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">System</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">60</span>\n</code></pre></div>\n<p>I have also unsuccessfully tried to use dynamic memories instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">dynamic_memory_reserved_for_growth</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I assume this should force all memories to be dynamic (<code>static_memory_maximum_size(0)</code>), but only allocate up to 15 wasm pages of virtual memory initially. However, this fails again with an <code>Insufficient resources</code> error on <code>Linux</code>, but works on <code>MacOs</code>.</p>\n<p>What would be a correct approach here that lets me specify a maximum virtual memory size, but also works on <code>Linux</code> so I can spawn more than 16k memories?</p>\n<p>While experimenting with this, I also noticed another inconsistency. If we change the <code>config.static_memory_maximum_size</code> to a lower value than the wasm module is requesting:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"c1\">// 5 Wasm pages</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_maximum_size</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">static_memory_forced</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100_000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"c1\">// 10 Wasm pages requested</span>\n<span class=\"w\">        </span><span class=\"n\">Memory</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">hold</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The <code>Engine</code> is going to use a <code>dynamic</code> memory, even it was configured with <code>static_memory_forced(true)</code>. This previous example will be failing also on <code>MacOs</code> too with an <code>Insufficient resources</code> error. Only if we add a <code>config.dynamic_memory_reserved_for_growth(65536);</code> it will work.</p>\n<h3>Personal thoughts</h3>\n<p>There is a lot of documentation around these settings, but I have read multiple times through it and somehow still can't figure it out. The most annoying issue is that the documentation only lists defaults for <code>32 bit</code> and <code>64 bit</code> machines, but the behaviour also seems to differ depending on the OS you are running.</p>\n<p>With <code>memory64</code> and <code>dynamic_memory_reserved_for_growth </code> the lines are even more blured between <code>static</code> and <code>dynamic</code> memory. I'm wondering if maybe we could get away with just one memory model that makes it clearer what is happening in the background?</p>\n<p>It would be a <code>dynamic</code> memory with the following settings:<br>\n1. <code>memory_initial_virtual_size(u64)</code> - The dynamic memory can grow until this point without copying.<br>\n2. <code>memory_virtual_resize(bool)</code> - This would turn it into a static memory.<br>\n3. <code>memory_guard_size(u64)</code> - The guard page.</p>\n<p>The defaults (64bit systems) would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">memory_initial_virtual_size</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"n\">G</span><span class=\"p\">);</span>\n<span class=\"n\">memory_virtual_resize</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"n\">memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">G</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Resulting in the same properties the current defaults have.</p>\n<p>This model is less feature rich, but I feel like the current system is so complicated that it's almost impossible to reason about what is going to be happening when you mix multiple settings.</p>\n</blockquote>",
        "id": 494015210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736974698
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695#issuecomment-2593921169\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3695\">issue #3695</a>:</p>\n<blockquote>\n<p>This was refactored and updated in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9545\">https://github.com/bytecodealliance/wasmtime/pull/9545</a>, so I think this is largely done now.</p>\n</blockquote>",
        "id": 494015211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736974699
    }
]