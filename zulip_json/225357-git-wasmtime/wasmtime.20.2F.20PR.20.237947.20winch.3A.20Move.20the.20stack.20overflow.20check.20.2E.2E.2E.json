[
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 421733737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708028392
    },
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a> from <code>elliottt:trevor/winch-stack-check-in-prologue</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Move the stack check to the function prologue in winch generated code by adding the final stack maximum to the stack min bound before comparing against the current SP.</p>\n<p>This new approach is more accurate than the previous implementation that would only check the size of <code>locals</code>, but does require that we patch the function during <code>MacroAssembler::finalize</code>, as we don't know the stack high water mark until then. Enabling the patching required the addition of the <code>start_patchable</code>/<code>end_patchable</code> api to <code>MachBuffer</code>, which gives a way to name sections of the code buffer (with some restrictions) that can be edited later. We use this then to modify an add-with-immediate instruction to add the used stack space to the lower bound, when finalizing the function.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 421733738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708028392
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 421733740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708028392
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/saulecabrera\">saulecabrera</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 421733856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708028433
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 421734462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708028658
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>:</p>\n<blockquote>\n<p>Move the stack check to the function prologue in winch generated code by adding the final stack maximum to the stack min bound before comparing against the current SP.</p>\n<p>This new approach is more accurate than the previous implementation that would only check the size of <code>locals</code>, but does require that we patch the function during <code>MacroAssembler::finalize</code>, as we don't know the stack high water mark until then. Enabling the patching required the addition of the <code>start_patchable</code>/<code>end_patchable</code> api to <code>MachBuffer</code>, which gives a way to name sections of the code buffer (with some restrictions) that can be edited later. We use this then to modify an add-with-immediate instruction to add the used stack space to the stack lower bound from <code>vmctx</code>, when finalizing the function.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 421734567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708028713
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1883846247\">PR review</a>:</p>\n<blockquote>\n<p>Overall approach seems fine; some thoughts on the x64 machine-code patching specifically:</p>\n</blockquote>",
        "id": 421739131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708030566
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1883846247\">PR review</a>:</p>\n<blockquote>\n<p>Overall approach seems fine; some thoughts on the x64 machine-code patching specifically:</p>\n</blockquote>",
        "id": 421739133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708030567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1491649116\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add a bit more doc here? \"Represents an editable region that is currently being emitted in the <code>MachBuffer</code>. When closed, this becomes a <code>PatchRegion</code> and allows editing the machine code post-emission.\" or something like that?</p>\n</blockquote>",
        "id": 421739134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708030567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1491649410\">PR review comment</a>:</p>\n<blockquote>\n<p>Likewise here; note what it's for.</p>\n</blockquote>",
        "id": 421739135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708030567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1491657994\">PR review comment</a>:</p>\n<blockquote>\n<p>This and the asserts on opcode bytes below feel a little fragile. For example if we change the way immediates are emitted in the future, this might break (we're tying masm's lowering strategy to a specific assumption about its output here). Also the REX byte is pinned by an assert, and might change if the regalloc picks a register in the other half of the 16-reg bank (!). Perhaps what we could do instead is something like:</p>\n<ul>\n<li>Have a <code>PatchableValueLoad</code> abstraction (either an <code>MInst</code> case or a little struct here that does its own encoding, to nail down the length-invariance); ensure that it always produces machine code of the same length. <code>::new(value: u32, reg: Reg)</code>, <code>::update_value(value: u32)</code> and <code>::emit_to_slice(&amp;mut [u8])</code> or something like that.</li>\n<li>Use it here to initially put a placeholder in; we can avoid using a magic value and magic knowledge about immediate encoding then. Perhaps we can even write a wrapper <code>::emit_to_buffer(&amp;mut MachBuffer) -&gt; PatchRegion</code>.</li>\n<li>Later, patch using this; perhaps with <code>::emit_to_region(&amp;mut MachBuffer, PatchRegion)</code>.</li>\n</ul>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 421739136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708030567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1491650969\">PR review comment</a>:</p>\n<blockquote>\n<p>I think branches are the only case actually; and at the <code>MachBuffer</code> layer all that matters are branches that we tell the <code>MachBuffer</code> about, via <code>add_cond_branch</code> and <code>add_uncond_branch</code>. So I think we can make this more concrete by saying \"It must not introduce any MachBuffer-visible branches (i.e., you must not call <code>add_cond_branch</code> or <code>add_uncond_branch</code> between <code>start_patchable</code> and <code>end_patchable</code>).\"</p>\n</blockquote>",
        "id": 421739137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708030567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1491651243\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we add this assert in <code>add_cond_branch</code> and <code>add_uncond_branch</code> as well?</p>\n</blockquote>",
        "id": 421739139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708030567
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#issuecomment-1947338161\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>:</p>\n<blockquote>\n<p>The tests are failing due to the addition of stack checking to one of the trampolines (as the vmctx isn't setup yet in one case). I might roll those back so that this can be debugged separately.</p>\n</blockquote>",
        "id": 421740682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708031141
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 421740811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708031181
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#issuecomment-1947517932\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:machinst\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 421760850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708040669
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1884357841\">PR review</a>.</p>",
        "id": 421795371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708062783
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1491987203\">PR review comment</a>:</p>\n<blockquote>\n<p>I agree that it's fragile as-is, and something a bit more robust would be good here.</p>\n<p>Adding a special <code>PatchableValueLoad</code> type sounds good to me, as long as you don't mind the more specific \"add patched immediate to register\" behavior. I wanted to avoid using an additional register here, so that the sequence of loading the stack lower bound and adding the immediate for the final stack value could be done with only the scratch register.</p>\n<p>I'll experiment with adding a <code>PatchableAddRegImm</code> struct in the x64 backend in cranelift, as that would make it easy to reuse logic from the existing emit implemetation for add.</p>\n</blockquote>",
        "id": 421795373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708062784
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 421796857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708063605
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 421798541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708064917
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 421799078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708065335
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1883913082\">PR review</a>:</p>\n<blockquote>\n<p>The Winch pieces look good to me. Left a small question and a comment. I'm going to defer the final approval to Chris, given that I'm not as familiar with the <code>MachBuffer</code> implementation. </p>\n</blockquote>",
        "id": 422262616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708358315
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1883913082\">PR review</a>:</p>\n<blockquote>\n<p>The Winch pieces look good to me. Left a small question and a comment. I'm going to defer the final approval to Chris, given that I'm not as familiar with the <code>MachBuffer</code> implementation. </p>\n</blockquote>",
        "id": 422262617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708358315
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1491688803\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Regions where the addition of the used stack must be fixed up.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422262619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708358315
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1494765113\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we add a comment here on why we're using <code>.max</code>? The reason why I bring this up is that we currently don't have a way to track the \"canonical stack pointer offset\" across the compiler, which is what we'd probably want to use here instead (that's what <code>.max</code> is doing here if I'm understanding correctly). We currently use the <code>sp_offset</code> as the single source of truth, but lately I've been thinking that it might be a good idea to change that (but not a blocker for this change!). This is mostly relevant in control flow, where we have to  soft-reset the stack pointer in some situations.  </p>\n</blockquote>",
        "id": 422262620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708358315
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1493005638\">PR review comment</a>:</p>\n<blockquote>\n<p>One clarification question here: why the <code>2</code>? Unless I'm missing something, I'm only able to spot a single <code>push</code> (via <code>add_stack_max</code>). </p>\n</blockquote>",
        "id": 422262621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708358315
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1888937575\">PR review</a>.</p>",
        "id": 422282133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708364051
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1494875783\">PR review comment</a>:</p>\n<blockquote>\n<p>This could definitely be <code>1</code> or even an optional. Given that we could possibly call <code>check_stack</code> multiple times, I wanted to make sure that we would still generate valid code. Perhaps the right solution is an <code>Option&lt;PatchRegion&gt;</code> and an assert?</p>\n</blockquote>",
        "id": 422282135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708364051
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1888944892\">PR review</a>.</p>",
        "id": 422282735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708364366
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1494880937\">PR review comment</a>:</p>\n<blockquote>\n<p>The intent was to track the largest stack offset throughout code generation, so that we had an upper bound for the stack space needed. As push and reserve_stack both use <code>increment_sp</code>, this felt like a pretty good proxy for tracking the maximum seen stack allocation, but maybe I'm missing something here?</p>\n</blockquote>",
        "id": 422282736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708364366
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1888977016\">PR review</a>.</p>",
        "id": 422286043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708366057
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1494901400\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>this felt like a pretty good proxy for tracking the maximum seen stack allocation</p>\n</blockquote>\n<p>I think it is! I was just thinking that maybe it makes sense to have a comment stating that we do this (<code>.max</code>) given that we currently don't explicitly track the maximum amount of stack generated anywhere in the compiler yet, which I think we could as an optimization. </p>\n</blockquote>",
        "id": 422286044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708366057
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1888978867\">PR review</a>.</p>",
        "id": 422286282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708366167
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1494902724\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh that makes sense, thanks for explaining. Yeah perhaps we could try going with <code>Option&lt;PatchRegion&gt;</code> + assert. </p>\n</blockquote>",
        "id": 422286283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708366167
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1889146093\">PR review</a>.</p>",
        "id": 422304709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708375517
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1495000126\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah! I'll add a comment to clarify the intent here. I can also put some more documentation into the <code>sp_max</code> field itself <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 422304710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708375517
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 422469312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708450810
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 422494541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460346
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 422494617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460388
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1891514393\">PR review</a>.</p>",
        "id": 422494897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460521
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1496445193\">PR review comment</a>:</p>\n<blockquote>\n<p>Would you mind taking a look at the changes in x64/asm.rs? I had to copy some details over from cranelift's emit module for rex encoding, but I believe that this approach should be much more resilient: it doesn't assume anything about how cranelift would encode an instruction; it records the offset into the patch region where the immediate starts, so it should also be resilient to local changes.</p>\n<p>The downside is that it brought a lot of details into the asm module, but I think that's somewhat unavoidable at this  point.</p>\n</blockquote>",
        "id": 422494898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460521
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1891515751\">PR review</a>.</p>",
        "id": 422495027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460579
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1496446451\">PR review comment</a>:</p>\n<blockquote>\n<p>I added some more comments to this point in <code>increment_sp</code>, and to the definition of <code>sp_max</code>, would you mind taking another look?</p>\n</blockquote>",
        "id": 422495031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460579
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 422495373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460729
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1891519715\">PR review</a>.</p>",
        "id": 422495393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460737
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1496450110\">PR review comment</a>:</p>\n<blockquote>\n<p>I've updated the language on this comment, what do you think?</p>\n</blockquote>",
        "id": 422495394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460737
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1891519362\">PR review</a>:</p>\n<blockquote>\n<p>Looks great, thanks! Just one code-reuse nit below, otherwise good to go.</p>\n</blockquote>",
        "id": 422495684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460860
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1891519362\">PR review</a>:</p>\n<blockquote>\n<p>Looks great, thanks! Just one code-reuse nit below, otherwise good to go.</p>\n</blockquote>",
        "id": 422495685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460860
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1496449779\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we use the version of this struct and of <code>encode_modrm</code> below in <code>cranelift_codegen::isa::x64::encoding</code>? It looks like most of that path is already <code>pub</code>; only the <code>RexFlags</code> and <code>encode_modrm</code> items themselves are not. (It's a bit suboptimal to export over the public interface, but then we already reserve the right via semver to change at each release and this is the sort of thing I'd have no reservations refactoring later)</p>\n</blockquote>",
        "id": 422495688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708460861
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1891528841\">PR review</a>.</p>",
        "id": 422496289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708461106
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1496458723\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// shrink as space is reserved and freed during compilation), but once all instructions have\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422496291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708461106
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1891529538\">PR review</a>.</p>",
        "id": 422496373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708461134
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1496459365\">PR review comment</a>:</p>\n<blockquote>\n<p>Looks great, thanks!</p>\n</blockquote>",
        "id": 422496374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708461134
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 422512233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708468263
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 422512258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708468283
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1891712764\">PR review</a>.</p>",
        "id": 422512393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708468355
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1496623996\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep! My original worry was needing to compute the offset for what was written to the <code>MachBuffer</code>, but that's done easily enough with <code>MachBuffer::cur_offset</code>. It's much nicer not duplicating this!</p>\n</blockquote>",
        "id": 422512394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708468356
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#pullrequestreview-1891713140\">PR review</a>.</p>",
        "id": 422512436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708468378
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947#discussion_r1496624414\">PR review comment</a>:</p>\n<blockquote>\n<p>Amazing spelling mistake, thank you for catching that!</p>\n</blockquote>",
        "id": 422512437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708468378
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 422512449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708468383
    },
    {
        "content": "<p>elliottt merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7947\">PR #7947</a>.</p>",
        "id": 422517480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708471047
    }
]