[
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258635007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634859828
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258635323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634860001
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Moves <code>ResourceLimiter</code>'s definition from <code>wasmtime_runtime</code> to <code>wasmtime</code></li>\n<li>Adds an additional <code>ResourceLimiterAsync</code>, which is just like a <code>ResourceLimiter</code> except the <code>memory_growing</code> and <code>table_growing</code> methods are <code>async</code> (via <code>async_trait</code>). This is so that async embeddings of wasmtime to yield execution while they await for a resource to be available.</li>\n<li>In order for the <code>ResourceLimiterAsync</code> methods to await inside memory &amp; table grows, we need to add async variants of <code>Memory::new</code>, <code>Memory::grow</code>, <code>Table::new</code>, and <code>Table::grow</code>. These variants are not required for all async <code>Store</code>s, only for stores which are given a <code>Store::limiter_async</code>. So, this won't break any existing code.</li>\n</ul>\n<p>I had to restructure a fair bit of the interface between runtime and wasmtime for this PR, including extending the <code>wasmtime_runtime::Store</code> trait, and changing the error type passed between them to <code>anyhow::Error</code> instead of <code>Box&lt;dyn std::error::Error + Send + Sync&gt;</code>.</p>\n<p>Additionally, both <code>ResourceLimiter</code>s are now safer: wasmtime_runtime now catches any panics that occur from the user's impl of the traits.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 258635874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634860362
    },
    {
        "content": "<p><strong>pchickey</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> as ready for review.</p>",
        "id": 258635890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634860372
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Moves <code>ResourceLimiter</code>'s definition from <code>wasmtime_runtime</code> to <code>wasmtime</code></li>\n<li>Adds an additional <code>ResourceLimiterAsync</code>, which is just like a <code>ResourceLimiter</code> except the <code>memory_growing</code> and <code>table_growing</code> methods are <code>async</code> (via <code>async_trait</code>). This is so that async embeddings of wasmtime to yield execution while they await for a resource to be available.</li>\n<li>In order for the <code>ResourceLimiterAsync</code> methods to await inside memory &amp; table grows, we need to add async variants of <code>Memory::new</code>, <code>Memory::grow</code>, <code>Table::new</code>, and <code>Table::grow</code>. These variants are not required for all async <code>Store</code>s, only for stores which are given a <code>Store::limiter_async</code>. So, this won't break any existing code.</li>\n<li>Both <code>ResourceLimiter</code> traits now get <code>table_grow_failed</code>, which corresponds to <code>memory_grow_failed</code>. Better to just get this over with now than have to add it in later.</li>\n<li>Test suite covers table limiting and async and panics now.</li>\n</ul>\n<p>I had to restructure a fair bit of the interface between runtime and wasmtime for this PR, including extending the <code>wasmtime_runtime::Store</code> trait, and changing the error type passed between them to <code>anyhow::Error</code> instead of <code>Box&lt;dyn std::error::Error + Send + Sync&gt;</code>.</p>\n<p>Additionally, both <code>ResourceLimiter</code>s are now safer: wasmtime_runtime now catches any panics that occur from the user's impl of the traits.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 258636139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634860553
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Moves <code>ResourceLimiter</code>'s definition from <code>wasmtime_runtime</code> to <code>wasmtime</code></li>\n<li>Adds an additional <code>ResourceLimiterAsync</code>, which is just like a <code>ResourceLimiter</code> except the <code>memory_growing</code> and <code>table_growing</code> methods are <code>async</code> (via <code>#[async_trait]</code>). This is so that async embeddings of wasmtime to yield execution while they await for a resource to be available.</li>\n<li>In order for the <code>ResourceLimiterAsync</code> methods to await inside memory &amp; table grows, we need to add async variants of <code>Memory::new</code>, <code>Memory::grow</code>, <code>Table::new</code>, and <code>Table::grow</code>. These variants are not required for all async <code>Store</code>s, only for stores which are given a <code>Store::limiter_async</code>. So, this won't break any existing code.</li>\n<li>Both <code>ResourceLimiter</code> traits now get <code>table_grow_failed</code>, which corresponds to <code>memory_grow_failed</code>. Better to just get this over with now than have to add it in later.</li>\n<li>Test suite covers table limiting and async and panics now.</li>\n</ul>\n<p>I had to restructure a fair bit of the interface between runtime and wasmtime for this PR, including extending the <code>wasmtime_runtime::Store</code> trait, and changing the error type passed between them to <code>anyhow::Error</code> instead of <code>Box&lt;dyn std::error::Error + Send + Sync&gt;</code>.</p>\n<p>Additionally, both <code>ResourceLimiter</code>s are now safer: wasmtime_runtime now catches any panics that occur from the user's impl of the traits.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 258636210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634860584
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Moves <code>ResourceLimiter</code>'s definition from <code>wasmtime_runtime</code> to <code>wasmtime</code></li>\n<li>Adds an additional <code>ResourceLimiterAsync</code>, which is just like a <code>ResourceLimiter</code> except the <code>memory_growing</code> and <code>table_growing</code> methods are <code>async</code> (via <code>#[async_trait]</code>). This is so that async embeddings of wasmtime can handle memory or table growing by <code>await</code>ing for a resource to be available.</li>\n<li>In order for the <code>ResourceLimiterAsync</code> methods to await inside memory &amp; table grows, we need to add async variants of <code>Memory::new</code>, <code>Memory::grow</code>, <code>Table::new</code>, and <code>Table::grow</code>. These variants are not required for all async <code>Store</code>s, only for stores which are given a <code>Store::limiter_async</code>. So, this won't break any existing code.</li>\n<li>Both <code>ResourceLimiter</code> traits now get <code>table_grow_failed</code>, which corresponds to <code>memory_grow_failed</code>. Better to just get this over with now than have to add it in later.</li>\n<li>Test suite covers table limiting and async and panics now.</li>\n</ul>\n<p>I had to restructure a fair bit of the interface between runtime and wasmtime for this PR, including extending the <code>wasmtime_runtime::Store</code> trait, and changing the error type passed between them to <code>anyhow::Error</code> instead of <code>Box&lt;dyn std::error::Error + Send + Sync&gt;</code>.</p>\n<p>Additionally, both <code>ResourceLimiter</code>s are now safer: wasmtime_runtime now catches any panics that occur from the user's impl of the traits.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 258636266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634860636
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-786938804\">PR review</a>.</p>",
        "id": 258722562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634914327
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r734605173\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd be a little uneasy actually using setjmp to sail past a <code>catch_unwind</code> frame, so could this be transmitted through the return value and outside of this closure the <code>raise_user_trap</code> happens?</p>\n</blockquote>",
        "id": 258722563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634914327
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-786938804\">PR review</a>.</p>",
        "id": 258722564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634914327
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r734606445\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the indentation here may be a bit off?</p>\n</blockquote>",
        "id": 258722565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634914327
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r734610540\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this and the panic test below be updated to grow through wasm? I think that's the more interesting path to test b/c otherwise there's already only Rust code on the stack which didn't necessitate adding a <code>catch_unwind</code> or anything like that.</p>\n</blockquote>",
        "id": 258722566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634914327
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258731684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634918180
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-787118917\">PR review</a>.</p>",
        "id": 258746767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634924578
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r734733330\">PR review comment</a>:</p>\n<blockquote>\n<p>I didn't think of that, thanks! Easy fix</p>\n</blockquote>",
        "id": 258746768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634924578
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-787119511\">PR review</a>.</p>",
        "id": 258746848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634924620
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r734733760\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah rustfmt gave up because its in a macro.</p>\n</blockquote>",
        "id": 258746851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634924620
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258746872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634924634
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258750420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634926111
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a>.</p>",
        "id": 258750443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634926125
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258755300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634928301
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258757715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634929267
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-787255634\">PR review</a>.</p>",
        "id": 258771592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634935391
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258774310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634936617
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258788311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634945044
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258989432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1635181496
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-788474301\">PR review</a>.</p>",
        "id": 259000777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1635186599
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a>.</p>",
        "id": 259003231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1635187669
    }
]