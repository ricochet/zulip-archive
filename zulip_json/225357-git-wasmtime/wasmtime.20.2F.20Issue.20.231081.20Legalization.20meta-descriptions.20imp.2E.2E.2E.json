[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1081#issuecomment-772672538\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1081\">Issue #1081</a>:</p>\n<blockquote>\n<p>The new backend framework doesn't use legalizations.</p>\n</blockquote>",
        "id": 225047340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612372362
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1081#issuecomment-772687279\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1081\">Issue #1081</a>:</p>\n<blockquote>\n<p>While we still use some skeletal remains of legalizations (e.g. lowering heap accesses to primitive address computation ops and load/store ops), the specific issues described here mostly don't apply anymore, I agree.</p>\n</blockquote>",
        "id": 225050581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612373592
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1081\">Issue #1081</a>:</p>\n<blockquote>\n<p>I'll use this issue as a dump for things that I've noticed could be enhanced for the legalization module in the Rust meta crate, probably better to do later once we've ported all of the meta code to Rust.</p>\n<ul>\n<li>[ ] Remove the ordering hack in the <code>x86</code> legalizer file, which was needed because we want to ensure the same ordering of transform groups as the Python module does (for encodings).</li>\n<li>[x] When there are several legalizations available for a given Cranelift opcode (e.g. when the opcode is type-dependent), the generated code does unwrap the arguments from the instruction several times, and generates a predicate too. We could unwrap the arguments at the top once and for all, and then generate predicates for each type the legalization affects.</li>\n<li>[x] Remove the condition when the value of <code>predicate</code> is a plain <code>true</code>.</li>\n<li>[x] Try to gather the predicate conditions together, instead of refining the predicate (e.g. <code>let predicate = value_type == I64; let predicate = predicate &amp;&amp; type_sets[42].contains(something);</code> etc).</li>\n<li>[ ] Allow to bind several times in the <code>def!</code> macro.</li>\n<li>[ ] Consider adding a <code>ToRustCode</code> and <code>ToRustComment</code> trait that structs can implement.</li>\n</ul>\n</blockquote>",
        "id": 225050584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612373592
    }
]