[
    {
        "content": "<p>zhuxiujia edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<p>How do I enable JIT compilation in the code under Example?</p>\n<p>Hi, I'm trying to use the code in Example to perform a JIT operation，But the performance is very slow</p>\n<ul>\n<li>toml</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"k\">[\"jitdump\", \"wasmtime/wat\", \"wasmtime/parallel-compilation\",\"experimental_x64\"]</span>\n</code></pre></div>\n<ul>\n<li>wat</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"wat\"><pre><span></span><code>(module\n  (func $sum_f (param $x i32) (param $y i32) (result i32)\n    local.get $x\n    local.get $y\n    i32.add)\n(export \"run\" (func $sum_f)))\n</code></pre></div>\n<ul>\n<li>example/hello.rs</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Instantiating module...\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Next we poke around a bit to extract the `run` function from the module.</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Extracting export...\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"s\">\"run\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"n\">anyhow</span>::<span class=\"n\">format_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"failed to find `run` function export\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get2</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"o\">=</span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">1000000</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">total</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"use Time: {:?} ,each:{} ns/op\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">time</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">as_nanos</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u128</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>cargo run result(This is very slow, even though I'm using --release,it should be 1ns/op) </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"log\"><pre><span></span><code>cargo run --release  --example hello\n//use Time: 852.04292ms ,each:852 ns/op\n</code></pre></div>\n</blockquote>",
        "id": 225450351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612682896
    },
    {
        "content": "<p>zhuxiujia edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<p>Runtime invocation overhead 800ns/op</p>\n<p>Hi, I'm trying to use the code in Example to perform a JIT operation，But the performance is very slow</p>\n<ul>\n<li>toml</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"k\">[\"jitdump\", \"wasmtime/wat\", \"wasmtime/parallel-compilation\",\"experimental_x64\"]</span>\n</code></pre></div>\n<ul>\n<li>wat</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"wat\"><pre><span></span><code>(module\n  (func $sum_f (param $x i32) (param $y i32) (result i32)\n    local.get $x\n    local.get $y\n    i32.add)\n(export \"run\" (func $sum_f)))\n</code></pre></div>\n<ul>\n<li>example/hello.rs</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Instantiating module...\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Next we poke around a bit to extract the `run` function from the module.</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Extracting export...\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"s\">\"run\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"n\">anyhow</span>::<span class=\"n\">format_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"failed to find `run` function export\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get2</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"o\">=</span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">1000000</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">total</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"use Time: {:?} ,each:{} ns/op\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">time</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">as_nanos</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u128</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>cargo run result(This is very slow, even though I'm using --release,it should be 1ns/op) </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"log\"><pre><span></span><code>cargo run --release  --example hello\n//use Time: 852.04292ms ,each:852 ns/op\n</code></pre></div>\n</blockquote>",
        "id": 225450355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612682925
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-775250135\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<p>Thanks for the report! Can you clarify what platform you're using?</p>\n<p>Entry/exit into wasm isn't entirely trivial because we need to set up infrastructure to catch traps and such. Locally on x86_64 macOS I also get ~700ns overhead, but some time profiling shows that ~80% of that time is spent in <code>setjmp</code> which is how we implement traps in WebAssembly (using <code>longjmp</code> back to the start). I posted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2645\">https://github.com/bytecodealliance/wasmtime/pull/2645</a> which helps there, but there's possibly other low-hanging fruit here too.</p>\n<p>In any case it'd be good to see what platform you're running on!</p>\n</blockquote>",
        "id": 225564637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612799970
    },
    {
        "content": "<p>zhuxiujia <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-775253650\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for the report! Can you clarify what platform you're using?</p>\n<p>Entry/exit into wasm isn't entirely trivial because we need to set up infrastructure to catch traps and such. Locally on x86_64 macOS I also get ~700ns overhead, but some time profiling shows that ~80% of that time is spent in <code>setjmp</code> which is how we implement traps in WebAssembly (using <code>longjmp</code> back to the start). I posted #2645 which helps there, but there's possibly other low-hanging fruit here too.</p>\n<p>In any case it'd be good to see what platform you're running on!</p>\n</blockquote>\n<p>Hi:<br>\n   Locally on x86_64 macOS</p>\n<p>I tried to use WASM to implement the interpreter crate(for example:'1+1'=2, \"'1'+'1'\"=\"11\" ), so both WASM and the host were called frequently</p>\n<p>Frequent comings and goings in and out of WASM can take a long time</p>\n</blockquote>",
        "id": 225565502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612800312
    },
    {
        "content": "<p>zhuxiujia edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-775253650\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for the report! Can you clarify what platform you're using?</p>\n<p>Entry/exit into wasm isn't entirely trivial because we need to set up infrastructure to catch traps and such. Locally on x86_64 macOS I also get ~700ns overhead, but some time profiling shows that ~80% of that time is spent in <code>setjmp</code> which is how we implement traps in WebAssembly (using <code>longjmp</code> back to the start). I posted #2645 which helps there, but there's possibly other low-hanging fruit here too.</p>\n<p>In any case it'd be good to see what platform you're running on!</p>\n</blockquote>\n<p>Hi:<br>\n   Locally on x86_64 macOS<br>\n   But it's fast on Windows10</p>\n<p>I tried to use WASM to implement the interpreter crate(for example:'1+1'=2, \"'1'+'1'\"=\"11\" ), so both WASM and the host were called frequently</p>\n<p>Frequent comings and goings in and out of WASM can take a long time</p>\n</blockquote>",
        "id": 225565655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612800370
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-775264623\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<p>Oh great! Then we're running on the same platform :)</p>\n<p>Is the 55ns overhead I recorded in #2645 still too larger for your use case?</p>\n</blockquote>",
        "id": 225568036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612801303
    },
    {
        "content": "<p>zhuxiujia <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-775267666\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh great! Then we're running on the same platform :)</p>\n<p>Is the 55ns overhead I recorded in #2645 still too larger for your use case?</p>\n</blockquote>\n<p>Maybe that's why, anyway, it's on my Mac Book</p>\n</blockquote>",
        "id": 225568650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612801552
    },
    {
        "content": "<p>zhuxiujia edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-775267666\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh great! Then we're running on the same platform :)</p>\n<p>Is the 55ns overhead I recorded in #2645 still too larger for your use case?</p>\n</blockquote>\n<p>Maybe that's why, anyway, it's on my Mac Book<br>\nThe same issue arose with <a href=\"https://github.com/wasmerio/wasmer\">Wasmer</a> crate<br>\n</p>\n</blockquote>",
        "id": 225569261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612801678
    },
    {
        "content": "<p>zhuxiujia edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-775267666\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh great! Then we're running on the same platform :)</p>\n<p>Is the 55ns overhead I recorded in #2645 still too larger for your use case?</p>\n</blockquote>\n<p>Maybe that's why, anyway, it's on my Mac Book<br>\nThe same issue arose with <a href=\"https://github.com/wasmerio/wasmer\">Wasmer</a> crate</p>\n</blockquote>",
        "id": 225569504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612801739
    },
    {
        "content": "<p>zhuxiujia <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-775269982\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<p>Is it possible to have something to do with Cranelift？？</p>\n</blockquote>",
        "id": 225569509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612801743
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-775285838\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<p>Sorry but to clarify, can you benchmark with #2645 applied? Is wasmtime with that patch fast enough for your use case or is it still too slow?</p>\n<p>Also, are you saying that Windows is fast locally for you? If so, what is the overhead you're seeing on Windows?</p>\n<p>As for other sources of overhead, the main source seems to be accessing thread locals at this point (after #2645), I don't think Cranelift needs to be improved in any regards here.</p>\n</blockquote>",
        "id": 225573047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612803144
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644#issuecomment-803041399\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<p>I believe the original issue has been fixed so I'm going to close this.</p>\n</blockquote>",
        "id": 231072366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616179851
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2644\">Issue #2644</a>:</p>\n<blockquote>\n<p>Runtime invocation overhead 800ns/op</p>\n<p>Hi, I'm trying to use the code in Example to perform a JIT operation，But the performance is very slow</p>\n<ul>\n<li>toml</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"k\">[\"jitdump\", \"wasmtime/wat\", \"wasmtime/parallel-compilation\",\"experimental_x64\"]</span>\n</code></pre></div>\n<ul>\n<li>wat</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"wat\"><pre><span></span><code>(module\n  (func $sum_f (param $x i32) (param $y i32) (result i32)\n    local.get $x\n    local.get $y\n    i32.add)\n(export \"run\" (func $sum_f)))\n</code></pre></div>\n<ul>\n<li>example/hello.rs</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Instantiating module...\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Next we poke around a bit to extract the `run` function from the module.</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Extracting export...\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"s\">\"run\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"n\">anyhow</span>::<span class=\"n\">format_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"failed to find `run` function export\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get2</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"o\">=</span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">1000000</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">total</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"use Time: {:?} ,each:{} ns/op\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">time</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">as_nanos</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u128</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>cargo run result(This is very slow, even though I'm using --release,it should be 1ns/op) </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"log\"><pre><span></span><code>cargo run --release  --example hello\n//use Time: 852.04292ms ,each:852 ns/op\n</code></pre></div>\n</blockquote>",
        "id": 231072367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616179851
    }
]