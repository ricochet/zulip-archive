[
    {
        "content": "<p>JeremyRubin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>This is an issue where wasmtime seems to read a const pointer as a function pointer, when it is actually a pointer to a constant. Wasmer does not have this issue, which suggests it's a defect in wasmtime as opposed to the library being used.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>Create a new crate bin with <a href=\"http://main.rs\">main.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">secp256k1</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world! {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Secp256k1</span>::<span class=\"n\">default</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And Cargo.toml</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">secp256k1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.20.1\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Build in either release or debug mode for --target wasm32-wasi, and run the resulting binary using wasmtime.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Running under Wasmer, it will print:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">secp256k1</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"mh\">0x1100b0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">capabilities</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Running under Wasmtime it will print:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">secp</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-wasi/debug/test-wasm-secp.wasm\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">command</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">rustsecp256k1_v0_4_0_context_no_precomp</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>wasmtime 0.22.0</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>rustc 1.48.0 (7eac88abb 2020-11-16)</p>\n<p>Distributor ID: Ubuntu<br>\nDescription:    Ubuntu 20.04.1 LTS<br>\nRelease:        20.04<br>\nCodename:       focal</p>\n<p>Architecture:                    x86_64<br>\nCPU op-mode(s):                  32-bit, 64-bit<br>\nByte Order:                      Little Endian<br>\nAddress sizes:                   43 bits physical, 48 bits virtual<br>\nCPU(s):                          16<br>\nOn-line CPU(s) list:             0-15<br>\nThread(s) per core:              2<br>\nCore(s) per socket:              8<br>\nSocket(s):                       1<br>\nNUMA node(s):                    1<br>\nVendor ID:                       AuthenticAMD<br>\nCPU family:                      23<br>\nModel:                           1<br>\nModel name:                      AMD Ryzen 7 1800X Eight-Core Processor<br>\n</p>\n</blockquote>",
        "id": 222930848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610747790
    },
    {
        "content": "<p>JeremyRubin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>This is an issue where wasmtime seems to read a const pointer as a function pointer, when it is actually a pointer to a constant. Wasmer does not have this issue, which suggests it's a defect in wasmtime as opposed to the library being used.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>Create a new crate bin with <a href=\"http://main.rs\">main.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">secp256k1</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world! {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Secp256k1</span>::<span class=\"n\">default</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And Cargo.toml</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">secp256k1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.20.1\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Build in either release or debug mode for --target wasm32-wasi, and run the resulting binary using wasmtime.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Running under Wasmer, it will print:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">secp256k1</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"mh\">0x1100b0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">capabilities</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Running under Wasmtime it will print:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">secp</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-wasi/debug/test-wasm-secp.wasm\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">command</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">rustsecp256k1_v0_4_0_context_no_precomp</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>wasmtime 0.22.0</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>rustc 1.48.0 (7eac88abb 2020-11-16)</p>\n<p>Distributor ID: Ubuntu<br>\nDescription:    Ubuntu 20.04.1 LTS<br>\nRelease:        20.04<br>\nCodename:       focal</p>\n<p>Architecture:                    x86_64<br>\nCPU op-mode(s):                  32-bit, 64-bit<br>\nByte Order:                      Little Endian<br>\nAddress sizes:                   43 bits physical, 48 bits virtual<br>\nCPU(s):                          16<br>\nOn-line CPU(s) list:             0-15<br>\nThread(s) per core:              2<br>\nCore(s) per socket:              8<br>\nSocket(s):                       1<br>\nNUMA node(s):                    1<br>\nVendor ID:                       AuthenticAMD<br>\nCPU family:                      23<br>\nModel:                           1<br>\nModel name:                      AMD Ryzen 7 1800X Eight-Core Processor<br>\n</p>\n</blockquote>",
        "id": 222930849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610747790
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-761233792\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<blockquote>\n<p>command export 'rustsecp256k1_v0_4_0_context_no_precomp' is not a function</p>\n</blockquote>\n<p>This is the reason. Wasmer doesn't care about this, but I believe the WASI spec doesn't allow it.</p>\n</blockquote>",
        "id": 222935808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610750257
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-761233792\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<blockquote>\n<p>command export 'rustsecp256k1_v0_4_0_context_no_precomp' is not a function</p>\n</blockquote>\n<p>This is the reason. Wasmer doesn't care about this, but I believe the WASI spec doesn't allow it. (not sure though)</p>\n</blockquote>",
        "id": 222935843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610750280
    },
    {
        "content": "<p>JeremyRubin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-761240207\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>Wasi doesn't allow for const pointers? (offending line in rust library <a href=\"https://github.com/rust-bitcoin/rust-secp256k1/blob/a24e27e94b0485a711bfa06cc331d0af7f090244/secp256k1-sys/src/lib.rs#L275\">https://github.com/rust-bitcoin/rust-secp256k1/blob/a24e27e94b0485a711bfa06cc331d0af7f090244/secp256k1-sys/src/lib.rs#L275</a>)</p>\n</blockquote>",
        "id": 222937918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610751507
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-761241348\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>It does allow it, just not exported from the executable itself. It must be private.</p>\n</blockquote>",
        "id": 222938277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610751736
    },
    {
        "content": "<p>JeremyRubin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-761242120\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>Interesting -- I might be missing something, but I am not re-exporting the symbol from the executable. I am only linking against a library which does, which should be static linked?</p>\n</blockquote>",
        "id": 222938493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610751874
    },
    {
        "content": "<p>JeremyRubin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-761256016\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>@bjorn3 do you have a link to the spec you mentioned? I couldn't find a reference for it.</p>\n</blockquote>",
        "id": 222941490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610753925
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-761516412\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>It can be found at <a href=\"https://github.com/webassembly/wasi\">https://github.com/webassembly/wasi</a></p>\n</blockquote>",
        "id": 222964179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610778850
    },
    {
        "content": "<p>JeremyRubin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-761738434\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>I couldn't find anything mentioning this restriction there -- do you have a more specific link or text section to point at?</p>\n</blockquote>",
        "id": 223026114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610862173
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-764146909\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>The closest we have right now is <a href=\"https://github.com/WebAssembly/WASI/blob/main/design/application-abi.md#current-unstable-abi\">this</a>, though indeed there's no mention of what to do about unexpected exports.</p>\n<p>Wasmtime's interpretation here comes from a desire to be conservative, since we expect the WASI ABI to expand and have a much richer set of things that you can do with exports in the future, and we don't want to get into a situation where a program has exports that it expects will just be ignored, where we would otherwise try to do something with them.</p>\n<p>Are you using --export-dynamic, --export-all, or any directives to cause these symbols to be exported? I haven't tried it, but I wouldn't expect an <code>extern \"C\"</code> section to get a wasm export by default. If something like that is in play here, there may be things we can do here to help the toolchain not emit that export.</p>\n</blockquote>",
        "id": 223458924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611191524
    },
    {
        "content": "<p>JeremyRubin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-764813271\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>Yeah I think everything is under extern \"C\" in the secp256k1 crate; I'm not setting any additional flags on my crate.</p>\n</blockquote>",
        "id": 223542791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611250206
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-765001537\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>A bunch of wasm toolchains happen to export random extra crap. I understand our desire to be conservative here, but maybe emitting a warning, rather than refusing to execute the module, is a better balance?</p>\n</blockquote>",
        "id": 223584514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611270866
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-765003509\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>What about only disallowing exports of unknown <code>__wasi_*</code> functions and globals?</p>\n</blockquote>",
        "id": 223584979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611271163
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-765027002\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>rustc is adding <code>--export-dynamic</code>. I've now submitted <a href=\"https://github.com/rust-lang/rust/pull/81255\">https://github.com/rust-lang/rust/pull/81255</a> to fix that.</p>\n<p>A warning might be ok, however I do think it's worth looking investigating this where it does come up. Some of the cases we've seen in the past of toolchains emitting extra exports were symptoms of bigger problems -- toolchains emitting wasm files which expected their exports to be used in certain ways which don't happen in a pure WASI execution environment.</p>\n<p>Wasmtime does have a modest allowlist for exports to ignore, however most of them were added to work around the <code>--export-dynamic</code> issue. Hopefully perhaps after <a href=\"https://github.com/rust-lang/rust/pull/81255\">https://github.com/rust-lang/rust/pull/81255</a> is in wide use we'll eventually be able to tidy that up.</p>\n</blockquote>",
        "id": 223589658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611274962
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-765386694\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>We could also consider adding a command line flag / config parameter along the lines of <code>--allow-unknown-exports</code> or perhaps <code>--unstable-allow-unknown-exports</code> as an escape hatch: I do share the concern of a warning being ignored, and hard-to-fix de-facto standards being established that tie our hands later on.</p>\n</blockquote>",
        "id": 223638774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611321090
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-765584720\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<blockquote>\n<p>--allow-unknown-exports</p>\n</blockquote>\n<p>This sounds like a great solution to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 223675691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611338095
    },
    {
        "content": "<p>peterhuene closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">Issue #2587</a>:</p>\n<blockquote>\n<p>This is an issue where wasmtime seems to read a const pointer as a function pointer, when it is actually a pointer to a constant. Wasmer does not have this issue, which suggests it's a defect in wasmtime as opposed to the library being used.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>Create a new crate bin with <a href=\"http://main.rs\">main.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">secp256k1</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world! {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Secp256k1</span>::<span class=\"n\">default</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And Cargo.toml</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">secp256k1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.20.1\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Build in either release or debug mode for --target wasm32-wasi, and run the resulting binary using wasmtime.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Running under Wasmer, it will print:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">secp256k1</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"mh\">0x1100b0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">capabilities</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Running under Wasmtime it will print:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">secp</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-wasi/debug/test-wasm-secp.wasm\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">command</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">rustsecp256k1_v0_4_0_context_no_precomp</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>wasmtime 0.22.0</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>rustc 1.48.0 (7eac88abb 2020-11-16)</p>\n<p>Distributor ID: Ubuntu<br>\nDescription:    Ubuntu 20.04.1 LTS<br>\nRelease:        20.04<br>\nCodename:       focal</p>\n<p>Architecture:                    x86_64<br>\nCPU op-mode(s):                  32-bit, 64-bit<br>\nByte Order:                      Little Endian<br>\nAddress sizes:                   43 bits physical, 48 bits virtual<br>\nCPU(s):                          16<br>\nOn-line CPU(s) list:             0-15<br>\nThread(s) per core:              2<br>\nCore(s) per socket:              8<br>\nSocket(s):                       1<br>\nNUMA node(s):                    1<br>\nVendor ID:                       AuthenticAMD<br>\nCPU family:                      23<br>\nModel:                           1<br>\nModel name:                      AMD Ryzen 7 1800X Eight-Core Processor<br>\n</p>\n</blockquote>",
        "id": 238371072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620762350
    }
]