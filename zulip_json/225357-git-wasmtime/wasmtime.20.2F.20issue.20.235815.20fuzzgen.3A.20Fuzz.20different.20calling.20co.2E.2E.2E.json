[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815\">issue #5815</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>Our <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/fuzzgen\"><code>cranelift-fuzzgen</code></a> fuzzer currently <a href=\"https://github.com/bytecodealliance/wasmtime/blob/db9efcb099e07dbb3b433668a5404deefc0eb709/cranelift/fuzzgen/src/function_generator.rs#L1376-L1379\">always uses the <code>system_v</code> calling convention</a> on all functions.</p>\n<p>We should change this so that we can explore other calling conventions!</p>\n<h4>Benefit</h4>\n<p>This increases coverage for the cranelift fuzzers. The cranelift fuzzer can reach a bit further into the ABI code since it generates a broader number of types (i.e. I8/I16/I128).</p>\n<h4>Implementation</h4>\n<p>We now have a <code>Target</code> in the <code>FunctionGenerator</code> so we can make decisions based on that. </p>\n<p>We have a number of calling conventions that are applicable to <em>all</em> <code>Targets</code> such as <code>SystemV</code>/<code>Cold</code>/<code>Fast</code>, those are always available to be selected. But there are some that should be somewhat restricted such as <code>AppleAarch64</code> which we should only select on <code>aarch64</code> and <code>macosx</code>.</p>\n<h4>Alternatives</h4>\n<p>Some of these calling conventions are already fuzzed via the wasmtime fuzzers, so we could keep relying on that.<br>\n</p>\n</blockquote>",
        "id": 328466392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676639470
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815\">issue #5815</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>Our <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/fuzzgen\"><code>cranelift-fuzzgen</code></a> fuzzer currently <a href=\"https://github.com/bytecodealliance/wasmtime/blob/db9efcb099e07dbb3b433668a5404deefc0eb709/cranelift/fuzzgen/src/function_generator.rs#L1376-L1379\">always uses the <code>system_v</code> calling convention</a> on all functions.</p>\n<p>We should change this so that we can explore other calling conventions!</p>\n<h4>Benefit</h4>\n<p>This increases coverage for the cranelift fuzzers. The cranelift fuzzer can reach a bit further into the ABI code since it generates a broader number of types (i.e. I8/I16/I128).</p>\n<h4>Implementation</h4>\n<p>We now have a <code>Target</code> in the <code>FunctionGenerator</code> so we can make decisions based on that. </p>\n<p>We have a number of calling conventions that are applicable to <em>all</em> <code>Targets</code> such as <code>SystemV</code>/<code>Cold</code>/<code>Fast</code>, those are always available to be selected. But there are some that should be somewhat restricted such as <code>AppleAarch64</code> which we should only select on <code>aarch64</code> and <code>macosx</code>.</p>\n<h4>Alternatives</h4>\n<p>Some of these calling conventions are already fuzzed via the wasmtime fuzzers, so we could keep relying on that.<br>\n</p>\n</blockquote>",
        "id": 328466393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676639470
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815\">issue #5815</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>Our <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/fuzzgen\"><code>cranelift-fuzzgen</code></a> fuzzer currently <a href=\"https://github.com/bytecodealliance/wasmtime/blob/db9efcb099e07dbb3b433668a5404deefc0eb709/cranelift/fuzzgen/src/function_generator.rs#L1376-L1379\">always uses the <code>system_v</code> calling convention</a> on all functions.</p>\n<p>We should change this so that we can explore other calling conventions!</p>\n<h4>Benefit</h4>\n<p>This increases coverage for the cranelift fuzzers. The cranelift fuzzer can reach a bit further into the ABI code since it generates a broader number of types (i.e. I8/I16/I128).</p>\n<h4>Implementation</h4>\n<p>We now have a <code>Target</code> in the <code>FunctionGenerator</code> so we can make decisions based on that. </p>\n<p>We have a number of calling conventions that are applicable to <em>all</em> <code>Targets</code> such as <code>SystemV</code>/<code>Cold</code>/<code>Fast</code>, those are always available to be selected. But there are some that should be somewhat restricted such as <code>AppleAarch64</code> which we should only select on <code>aarch64</code> and <code>macosx</code>.</p>\n<h4>Alternatives</h4>\n<p>Some of these calling conventions are already fuzzed via the wasmtime fuzzers, so we could keep relying on that.<br>\n</p>\n</blockquote>",
        "id": 328466394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676639470
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815\">issue #5815</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>Our <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/fuzzgen\"><code>cranelift-fuzzgen</code></a> fuzzer currently <a href=\"https://github.com/bytecodealliance/wasmtime/blob/db9efcb099e07dbb3b433668a5404deefc0eb709/cranelift/fuzzgen/src/function_generator.rs#L1376-L1379\">always uses the <code>system_v</code> calling convention</a> on all functions.</p>\n<p>We should change this so that we can explore other calling conventions!</p>\n<h4>Benefit</h4>\n<p>This increases coverage for the cranelift fuzzers. The cranelift fuzzer can reach a bit further into the ABI code since it generates a broader number of types (i.e. I8/I16/I128).</p>\n<h4>Implementation</h4>\n<p>We now have a <code>Target</code> in the <code>FunctionGenerator</code> so we can make decisions based on that. </p>\n<p>We have a number of calling conventions that are applicable to <em>all</em> <code>Targets</code> such as <code>SystemV</code>/<code>Cold</code>/<code>Fast</code>, those are always available to be selected. But there are some that should be somewhat restricted such as <code>AppleAarch64</code> which we should only select on <code>aarch64</code> and <code>macosx</code>.</p>\n<p>If anyone would like to take this on and needs some further help/clarification let me know!</p>\n<h4>Alternatives</h4>\n<p>Some of these calling conventions are already fuzzed via the wasmtime fuzzers, so we could keep relying on that.<br>\n</p>\n</blockquote>",
        "id": 328466537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676639522
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815\">issue #5815</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>Our <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/fuzzgen\"><code>cranelift-fuzzgen</code></a> fuzzer currently <a href=\"https://github.com/bytecodealliance/wasmtime/blob/db9efcb099e07dbb3b433668a5404deefc0eb709/cranelift/fuzzgen/src/function_generator.rs#L1376-L1379\">always uses the <code>system_v</code> calling convention</a> on all functions.</p>\n<p>We should change this so that we can explore other calling conventions!</p>\n<h4>Benefit</h4>\n<p>This increases coverage for the cranelift fuzzers. The cranelift fuzzer can reach a bit further into the ABI code since it generates a broader number of types (i.e. I8/I16/I128).</p>\n<h4>Implementation</h4>\n<p>We now have a <code>Target</code> in the <code>FunctionGenerator</code> so we can make decisions based on that. </p>\n<p>We have a number of calling conventions that are applicable to <em>all</em> <code>Targets</code> such as <code>SystemV</code>/<code>Cold</code>/<code>Fast</code>, those are always available to be selected. But there are some that should be somewhat restricted such as <code>AppleAarch64</code> which we should only select on <code>aarch64</code> and <code>macosx</code>.</p>\n<p>If anyone would like to take this on and needs some further help/clarification let me know!</p>\n<h4>Alternatives</h4>\n<p>Some of these calling conventions are already fuzzed via the wasmtime fuzzers, so we could keep relying on that.<br>\n</p>\n</blockquote>",
        "id": 328556310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676665248
    },
    {
        "content": "<p>littlebenlittle <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815#issuecomment-1595279831\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815\">issue #5815</a>:</p>\n<blockquote>\n<p>Started a PR for this. Are there any calling conventions other than <code>AppleAarch64</code> that should be contextually supported based on target triple?</p>\n<p>Also I'm not sure if generators should be zero-allocation for efficiency.</p>\n</blockquote>",
        "id": 366941531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686947713
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815#issuecomment-1595462715\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815\">issue #5815</a>:</p>\n<blockquote>\n<p>I think this might have actually been fixed already, by #6579, which just merged a couple of days ago.</p>\n<p>I'm a little confused about the state of this issue though. There are two places we pick calling conventions in fuzzgen right now. #6579 only changed one of them, and your PR #6594 changes the other. But I think maybe we can't actually change the latter place without breaking things.</p>\n<p>Specifically, your PR extends <code>FunctionGenerator::system_callconv</code>, which is only used to decide how to call libcalls. If I'm not mistaken, these libcalls are provided by libc, so they use the system's native C calling convention. If I have that right then we only have one choice for calling convention there, but that choice depends on the target OS.</p>\n<p>@afonso360, could you clarify whether there's more to do in this issue or whether it should be closed?</p>\n</blockquote>",
        "id": 367020721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686957703
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815#issuecomment-1595696527\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815\">issue #5815</a>:</p>\n<blockquote>\n<p>Oh, I forgot to close this issue, I'm sorry!</p>\n<p>Yeah, that's pretty much right, we have to choose the right calling convention according to the platform we are currently executing. I think <code>cargo-fuzz</code> supports MacOS, however I'm not sure anyone is currently running it there, so we haven't had the need to add any other system calling conventions.</p>\n<p>I don't think there is anything else missing here, but thanks for looking into this @littlebenlittle! </p>\n</blockquote>",
        "id": 367114647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686995708
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5815\">issue #5815</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>Our <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/fuzzgen\"><code>cranelift-fuzzgen</code></a> fuzzer currently <a href=\"https://github.com/bytecodealliance/wasmtime/blob/db9efcb099e07dbb3b433668a5404deefc0eb709/cranelift/fuzzgen/src/function_generator.rs#L1376-L1379\">always uses the <code>system_v</code> calling convention</a> on all functions.</p>\n<p>We should change this so that we can explore other calling conventions!</p>\n<h4>Benefit</h4>\n<p>This increases coverage for the cranelift fuzzers. The cranelift fuzzer can reach a bit further into the ABI code since it generates a broader number of types (i.e. I8/I16/I128).</p>\n<h4>Implementation</h4>\n<p>We now have a <code>Target</code> in the <code>FunctionGenerator</code> so we can make decisions based on that. </p>\n<p>We have a number of calling conventions that are applicable to <em>all</em> <code>Targets</code> such as <code>SystemV</code>/<code>Cold</code>/<code>Fast</code>, those are always available to be selected. But there are some that should be somewhat restricted such as <code>AppleAarch64</code> which we should only select on <code>aarch64</code> and <code>macosx</code>.</p>\n<p>If anyone would like to take this on and needs some further help/clarification let me know!</p>\n<h4>Alternatives</h4>\n<p>Some of these calling conventions are already fuzzed via the wasmtime fuzzers, so we could keep relying on that.<br>\n</p>\n</blockquote>",
        "id": 367114649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686995708
    }
]