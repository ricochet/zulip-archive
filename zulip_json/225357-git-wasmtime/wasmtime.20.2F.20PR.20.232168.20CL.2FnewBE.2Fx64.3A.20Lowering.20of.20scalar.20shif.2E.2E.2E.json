[
    {
        "content": "<p>julian-seward1 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2168\">PR #2168</a> from <code>fix-no-shift-by-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>The logic for generation of shifts-by-immediate was not quite right.  The result was that even<br>\nshifts by an amount known at compile time were being done by moving the shift immediate into %cl<br>\nand then doing a variable shift by %cl.  The effect is worse than it sounds, because all of<br>\nthose shift constants are small and often used in multiple places, so they were GVN'd up and<br>\noften ended up at the entry block of the function.  Hence these were connected to the use points<br>\nby long live ranges which got spilled.  So all in all, most of the win here comes from avoiding<br>\nspilling.</p>\n<p>The problem was caused by this line, in the <code>Opcode::Ishl | Opcode::Ushr ..</code> case:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">cst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">get_constant</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">insn</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><code>inputs[]</code> appears to refer to this CLIF instruction's inputs, and bizarrely <code>inputs[].insn</code> all<br>\nrefer to the instruction (the shift) itself.  Hence <code>ctx.get_constant(inputs[1].insn)</code> asks<br>\n\"does this shift instruction produce a constant\" to which the answer is always \"no\", so the<br>\nshift-by-unknown amount code is always generated.  The fix here is to change that expression to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">cst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">get_input</span><span class=\"p\">(</span><span class=\"n\">insn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><code>get_input</code>'s result conveniently includes a <code>constant</code> field of type <code>Option&lt;u64&gt;</code>, so we just<br>\nuse that instead.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208188129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598515467
    },
    {
        "content": "<p><strong>julian-seward1</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2168\">PR #2168</a>.</p>",
        "id": 208188241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598515568
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2168#pullrequestreview-476557802\">PR Review</a>.</p>",
        "id": 208196085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598521610
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2168\">PR #2168</a>.</p>",
        "id": 208196225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598521717
    }
]