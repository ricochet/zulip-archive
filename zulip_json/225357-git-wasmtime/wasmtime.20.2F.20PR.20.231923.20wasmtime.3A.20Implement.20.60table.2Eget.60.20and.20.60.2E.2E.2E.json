[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">PR #1923</a>.</p>",
        "id": 202008466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593110532
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">PR #1923</a> from <code>table-get-and-table-set</code> to <code>master</code>:</p>\n<blockquote>\n<p>These instructions have fast, inline JIT paths for the common cases, and only<br>\ncall out to host VM functions for the slow paths. This required some changes to<br>\n<code>cranelift-wasm</code>'s <code>FuncEnvironment</code>: instead of taking a <code>FuncCursor</code> to insert<br>\nan instruction sequence within the current basic block,<br>\n<code>FuncEnvironment::translate_table_{get,set}</code> now take a <code>&amp;mut FunctionBuilder</code><br>\nso that they can create whole new basic blocks. This is necessary for<br>\nimplementing GC read/write barriers that involve branching (e.g. checking for<br>\nnull, or whether a store buffer is at capacity).</p>\n<p>Furthermore, it required that the <code>load</code>, <code>load_complex</code>, and <code>store</code><br>\ninstructions handle loading and storing through an <code>r{32,64}</code> rather than just<br>\n<code>i{32,64}</code> addresses. This involved making <code>r{32,64}</code> types acceptable<br>\ninstantiations of the <code>iAddr</code> type variable, plus a few new instruction<br>\nencodings.</p>\n<p>Part of #929</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202008467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593110532
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">PR #1923</a> from <code>table-get-and-table-set</code> to <code>main</code>:</p>\n<blockquote>\n<p>These instructions have fast, inline JIT paths for the common cases, and only<br>\ncall out to host VM functions for the slow paths. This required some changes to<br>\n<code>cranelift-wasm</code>'s <code>FuncEnvironment</code>: instead of taking a <code>FuncCursor</code> to insert<br>\nan instruction sequence within the current basic block,<br>\n<code>FuncEnvironment::translate_table_{get,set}</code> now take a <code>&amp;mut FunctionBuilder</code><br>\nso that they can create whole new basic blocks. This is necessary for<br>\nimplementing GC read/write barriers that involve branching (e.g. checking for<br>\nnull, or whether a store buffer is at capacity).</p>\n<p>Furthermore, it required that the <code>load</code>, <code>load_complex</code>, and <code>store</code><br>\ninstructions handle loading and storing through an <code>r{32,64}</code> rather than just<br>\n<code>i{32,64}</code> addresses. This involved making <code>r{32,64}</code> types acceptable<br>\ninstantiations of the <code>iAddr</code> type variable, plus a few new instruction<br>\nencodings.</p>\n<p>Part of #929</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202009154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593110889
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-437789081\">PR Review</a>.</p>",
        "id": 202014150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593113374
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-437789081\">PR Review</a>.</p>",
        "id": 202014151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593113374
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r445787316\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This seems like it may not be right, we don't have a <code>*mut VMExternRef</code> here I thought but rather <code>*mut VMExternData</code>? Should this be <code>VMExternData::drop_and_dealloc</code>?</p>\n</blockquote>",
        "id": 202014152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593113374
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r445784768\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think technically this is memory unsafe since the destructor can run arbitrary code which can poke at the table. Perhaps the third statement could be <code>let current_elem = replace(&amp;mut table[index], value)</code>, and I think that'd fix any issues here?</p>\n</blockquote>",
        "id": 202014153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593113374
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r445788626\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(also does this mean that a test should be added for this too?</p>\n</blockquote>",
        "id": 202014155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593113374
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r445812106\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This isn't a <code>*mut VMExternData</code> (which is indeed what a <code>VMExternRef</code> is represented with) but actually a pointer to a <code>VMExternRef</code>. The <code>table_addr</code> instruction evaluates to a pointer to the table element, not the table element itself, and it is the result of the <code>table_addr</code> that we pass as an argument to the call to this function.</p>\n</blockquote>",
        "id": 202018969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593116060
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-437825011\">PR Review</a>.</p>",
        "id": 202018970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593116060
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-437827273\">PR Review</a>.</p>",
        "id": 202019349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593116261
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r445813758\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>(also does this mean that a test should be added for this too?</p>\n</blockquote>\n<p>I am 99% sure the spec tests exercise this path, but I can double check, and it might make sense to explicitly ensure that we test this, since it requires <code>ref_count == 1</code> on the current table element that will be overridden.</p>\n</blockquote>",
        "id": 202019350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593116262
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-437828450\">PR Review</a>.</p>",
        "id": 202019567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593116370
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r445814684\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah sorry I assuming the pseudocode a bit too literally, if that's the case then this is all good!</p>\n<p>(although I think this still runs afoul of the issue where the dtor tries to touch the table, so we may not be able to implement it as this for long)</p>\n</blockquote>",
        "id": 202019568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593116370
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-437829271\">PR Review</a>.</p>",
        "id": 202019701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593116443
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r445815319\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This whole thing is sort of an inline destructor, the <code>table[index] = ...</code> bit of pseudocode isn't intended to convey that we are running destructors on the old <code>table[index]</code> within this assignment.</p>\n</blockquote>",
        "id": 202019702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593116443
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-437844243\">PR Review</a>.</p>",
        "id": 202022368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593117828
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r445826996\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>(although I think this still runs afoul of the issue where the dtor tries to touch the table, so we may not be able to implement it as this for long)</p>\n</blockquote>\n<p>Hm this is a good point!</p>\n<p>Normally, we would be safe because the table elements are in a <code>RefCell</code>, but the JIT code doesn't set the <code>RefCell</code>'s borrow flags :-/</p>\n<p>The only way I see to avoid this would be to either</p>\n<ul>\n<li>\n<p>Make a custom version of <code>RefCell</code> where the JIT knows how to poke at the borrow flags (not great to add this extra overhead if we can avoid it, plus duplicating a bunch of <code>std</code> code)</p>\n</li>\n<li>\n<p>Do some kind of deferred destruction, where we queue up ready-to-die references and drain them at known safe points (opens the door for even more confusing/unexpected drop times).</p>\n</li>\n</ul>\n<p>Of the two, I think deferred destruction is probably the more promising approach.</p>\n</blockquote>",
        "id": 202022369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593117829
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-437858197\">PR Review</a>.</p>",
        "id": 202024906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593119142
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r445837876\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We talked a bit on Zulip about how I think by swapping pointers we can sidestep the issue here, but this also makes me think that we should stop using <code>RefCell</code> in <code>Table</code> internals, instead switching to <code>UnsafeCell</code> because the JIT doesn't know about it.</p>\n</blockquote>",
        "id": 202024907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593119142
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">PR #1923</a> from <code>table-get-and-table-set</code> to <code>main</code>:</p>\n<blockquote>\n<p>These instructions have fast, inline JIT paths for the common cases, and only<br>\ncall out to host VM functions for the slow paths. This required some changes to<br>\n<code>cranelift-wasm</code>'s <code>FuncEnvironment</code>: instead of taking a <code>FuncCursor</code> to insert<br>\nan instruction sequence within the current basic block,<br>\n<code>FuncEnvironment::translate_table_{get,set}</code> now take a <code>&amp;mut FunctionBuilder</code><br>\nso that they can create whole new basic blocks. This is necessary for<br>\nimplementing GC read/write barriers that involve branching (e.g. checking for<br>\nnull, or whether a store buffer is at capacity).</p>\n<p>Furthermore, it required that the <code>load</code>, <code>load_complex</code>, and <code>store</code><br>\ninstructions handle loading and storing through an <code>r{32,64}</code> rather than just<br>\n<code>i{32,64}</code> addresses. This involved making <code>r{32,64}</code> types acceptable<br>\ninstantiations of the <code>iAddr</code> type variable, plus a few new instruction<br>\nencodings.</p>\n<p>Part of #929</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202038874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593129008
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">PR #1923</a> from <code>table-get-and-table-set</code> to <code>main</code>:</p>\n<blockquote>\n<p>These instructions have fast, inline JIT paths for the common cases, and only<br>\ncall out to host VM functions for the slow paths. This required some changes to<br>\n<code>cranelift-wasm</code>'s <code>FuncEnvironment</code>: instead of taking a <code>FuncCursor</code> to insert<br>\nan instruction sequence within the current basic block,<br>\n<code>FuncEnvironment::translate_table_{get,set}</code> now take a <code>&amp;mut FunctionBuilder</code><br>\nso that they can create whole new basic blocks. This is necessary for<br>\nimplementing GC read/write barriers that involve branching (e.g. checking for<br>\nnull, or whether a store buffer is at capacity).</p>\n<p>Furthermore, it required that the <code>load</code>, <code>load_complex</code>, and <code>store</code><br>\ninstructions handle loading and storing through an <code>r{32,64}</code> rather than just<br>\n<code>i{32,64}</code> addresses. This involved making <code>r{32,64}</code> types acceptable<br>\ninstantiations of the <code>iAddr</code> type variable, plus a few new instruction<br>\nencodings.</p>\n<p>Part of #929</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202134589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593201089
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-438559660\">PR Review</a>.</p>",
        "id": 202136246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593201883
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-438559660\">PR Review</a>.</p>",
        "id": 202136248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593201883
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r446382414\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Technically this comment applies to <code>let current_elem</code> above, right?</p>\n</blockquote>",
        "id": 202136249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593201883
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r446384545\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If GC/wasm happens multiple times, will this property always hold though? This seems like it'd need to both set next == end but also some sort of flag saying \"always take the slow path, never reset next/end\"</p>\n</blockquote>",
        "id": 202136250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593201883
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r446383581\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh wow nice find <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 202136251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593201883
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r446382970\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FITZGEN!!!</p>\n</blockquote>",
        "id": 202136253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593201883
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-438569202\">PR Review</a>.</p>",
        "id": 202137404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593202559
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r446389944\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If you try to insert into the activations table, and <code>next == end</code>, then you do a gc (which will be re-entrant in this case, and exit early) and then insert into the over-approximized hash set. So, yes this relies on no one but the GC resetting next/end, but that property does hold right now.</p>\n</blockquote>",
        "id": 202137405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593202559
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-438570076\">PR Review</a>.</p>",
        "id": 202137590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593202662
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r446390612\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Woops, yeah I moved things around a bit.</p>\n</blockquote>",
        "id": 202137591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593202662
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">PR #1923</a> from <code>table-get-and-table-set</code> to <code>main</code>:</p>\n<blockquote>\n<p>These instructions have fast, inline JIT paths for the common cases, and only<br>\ncall out to host VM functions for the slow paths. This required some changes to<br>\n<code>cranelift-wasm</code>'s <code>FuncEnvironment</code>: instead of taking a <code>FuncCursor</code> to insert<br>\nan instruction sequence within the current basic block,<br>\n<code>FuncEnvironment::translate_table_{get,set}</code> now take a <code>&amp;mut FunctionBuilder</code><br>\nso that they can create whole new basic blocks. This is necessary for<br>\nimplementing GC read/write barriers that involve branching (e.g. checking for<br>\nnull, or whether a store buffer is at capacity).</p>\n<p>Furthermore, it required that the <code>load</code>, <code>load_complex</code>, and <code>store</code><br>\ninstructions handle loading and storing through an <code>r{32,64}</code> rather than just<br>\n<code>i{32,64}</code> addresses. This involved making <code>r{32,64}</code> types acceptable<br>\ninstantiations of the <code>iAddr</code> type variable, plus a few new instruction<br>\nencodings.</p>\n<p>Part of #929</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202137774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593202773
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-438573211\">PR Review</a>.</p>",
        "id": 202138169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593203022
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r446393024\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh right sorry I thought this happened somewhere in <code>try_insert</code> or similar, but it actually happens in this function! In that case the recursive guard on <code>gc</code> should be good enough <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 202138170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593203022
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">PR #1923</a> from <code>table-get-and-table-set</code> to <code>main</code>:</p>\n<blockquote>\n<p>These instructions have fast, inline JIT paths for the common cases, and only<br>\ncall out to host VM functions for the slow paths. This required some changes to<br>\n<code>cranelift-wasm</code>'s <code>FuncEnvironment</code>: instead of taking a <code>FuncCursor</code> to insert<br>\nan instruction sequence within the current basic block,<br>\n<code>FuncEnvironment::translate_table_{get,set}</code> now take a <code>&amp;mut FunctionBuilder</code><br>\nso that they can create whole new basic blocks. This is necessary for<br>\nimplementing GC read/write barriers that involve branching (e.g. checking for<br>\nnull, or whether a store buffer is at capacity).</p>\n<p>Furthermore, it required that the <code>load</code>, <code>load_complex</code>, and <code>store</code><br>\ninstructions handle loading and storing through an <code>r{32,64}</code> rather than just<br>\n<code>i{32,64}</code> addresses. This involved making <code>r{32,64}</code> types acceptable<br>\ninstantiations of the <code>iAddr</code> type variable, plus a few new instruction<br>\nencodings.</p>\n<p>Part of #929</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202154878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593213932
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-440278118\">PR Review</a>.</p>",
        "id": 202475891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593541548
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-440278118\">PR Review</a>.</p>",
        "id": 202475892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593541548
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">PR #1923</a> from <code>table-get-and-table-set</code> to <code>main</code>:</p>\n<blockquote>\n<p>These instructions have fast, inline JIT paths for the common cases, and only<br>\ncall out to host VM functions for the slow paths. This required some changes to<br>\n<code>cranelift-wasm</code>'s <code>FuncEnvironment</code>: instead of taking a <code>FuncCursor</code> to insert<br>\nan instruction sequence within the current basic block,<br>\n<code>FuncEnvironment::translate_table_{get,set}</code> now take a <code>&amp;mut FunctionBuilder</code><br>\nso that they can create whole new basic blocks. This is necessary for<br>\nimplementing GC read/write barriers that involve branching (e.g. checking for<br>\nnull, or whether a store buffer is at capacity).</p>\n<p>Furthermore, it required that the <code>load</code>, <code>load_complex</code>, and <code>store</code><br>\ninstructions handle loading and storing through an <code>r{32,64}</code> rather than just<br>\n<code>i{32,64}</code> addresses. This involved making <code>r{32,64}</code> types acceptable<br>\ninstantiations of the <code>iAddr</code> type variable, plus a few new instruction<br>\nencodings.</p>\n<p>Part of #929</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202480330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593543733
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#pullrequestreview-440304223\">PR Review</a>.</p>",
        "id": 202480368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593543753
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923#discussion_r447914275\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good idea -- done!</p>\n</blockquote>",
        "id": 202480369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593543753
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">PR #1923</a>.</p>",
        "id": 202486209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593546746
    }
]