[
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510#issuecomment-1370140897\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510\">issue #5510</a>:</p>\n<blockquote>\n<p>I failed to mention: this removes the <code>#[derive(Eq)]</code> from <code>Val</code> and some related structs because <code>f{32,64}</code> aren't <code>Eq</code>. I think this makes sense in this context but its technically a breaking change.</p>\n</blockquote>",
        "id": 319264521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672773792
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510#issuecomment-1370140897\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510\">issue #5510</a>:</p>\n<blockquote>\n<p>I failed to mention: this removes the <code>#[derive(Eq)]</code> from <code>Val</code> and some related structs because <code>f{32,64}</code> aren't <code>Eq</code>. I think this makes sense in this context but it's technically a breaking change.</p>\n</blockquote>",
        "id": 319264900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672773940
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510#issuecomment-1370143273\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510\">issue #5510</a>:</p>\n<blockquote>\n<p>Yeah that's ok and I think it makes sense as well due to the usage of floats it shouldn't be applicable for <code>Val</code> anyway.</p>\n</blockquote>",
        "id": 319264917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672773958
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510#issuecomment-1370168206\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510\">issue #5510</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen, @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 319269568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672775760
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510#issuecomment-1372719177\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510\">issue #5510</a>:</p>\n<blockquote>\n<p>It looks like this <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e5bdfd0ec207bbfb1da79725ac37c7cbc331d0/crates/fuzzing/src/oracles.rs#L829\">broke fuzzing here</a> because nan is no longer equal to nan. @lann would you be up for helping to fix this? I think the way to fix it would be to write a custom equality function which considers two NaN values to be equal.</p>\n</blockquote>",
        "id": 319668845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672951205
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510#issuecomment-1372784586\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510\">issue #5510</a>:</p>\n<blockquote>\n<p>Would it make sense to change the test code? e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actual</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// NaNs never compare equal</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Val</span>::<span class=\"n\">Float32</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Val</span>::<span class=\"n\">Float32</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">.</span><span class=\"n\">is_nan</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">.</span><span class=\"n\">is_nan</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Val</span>::<span class=\"n\">Float64</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Val</span>::<span class=\"n\">Float64</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">.</span><span class=\"n\">is_nan</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">.</span><span class=\"n\">is_nan</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actual</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actual</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 319674327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672953511
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510#issuecomment-1372793525\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5510\">issue #5510</a>:</p>\n<blockquote>\n<p>More-or-less that's what needs to happen, but floats can appear recursively as well so the equality change there would need to be applied deeply through types like lists and recors too</p>\n</blockquote>",
        "id": 319674887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672953778
    }
]