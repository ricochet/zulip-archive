[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/722#issuecomment-928096052\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/722\">issue #722</a>:</p>\n<blockquote>\n<p>Lightbeam was removed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3390\">https://github.com/bytecodealliance/wasmtime/pull/3390</a> as explained in <a href=\"https://github.com/bytecodealliance/rfcs/pull/14\">RFC 14</a>, so I'm going to close this.</p>\n</blockquote>",
        "id": 255087166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632763769
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/722\">issue #722</a>:</p>\n<blockquote>\n<h1>Issue description</h1>\n<p>When calling the <code>translate</code> function of lightbeam, an index out of bound error occurs in function <code>func_type_index</code> because argument <code>func_idx</code> is not checked.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/77bf76897c276f110d3f98ff4df48fe4103e1dff/crates/lightbeam/src/module.rs#L395-L397\">https://github.com/bytecodealliance/wasmtime/blob/77bf76897c276f110d3f98ff4df48fe4103e1dff/crates/lightbeam/src/module.rs#L395-L397</a></p>\n<p>This function is called when handling <code>WasmOperator::Call</code>:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/77bf76897c276f110d3f98ff4df48fe4103e1dff/crates/lightbeam/src/microwasm.rs#L1165-L1168\">https://github.com/bytecodealliance/wasmtime/blob/77bf76897c276f110d3f98ff4df48fe4103e1dff/crates/lightbeam/src/microwasm.rs#L1165-L1168</a></p>\n<h1>Fix proposal</h1>\n<p>2 potentials solutions:</p>\n<ul>\n<li>Check if <code>func_index</code> is in the range inside <code>func_type_index</code> function otherwise return an Error.</li>\n<li>Check if <code>func_index</code> is in the range each time before calling <code>func_type_index</code> and <code>func_type</code> functions.</li>\n</ul>\n<h1>Reproduction</h1>\n<p>wasmtime commit: 77bf76897c276f110d3f98ff4df48fe4103e1dff</p>\n<p>Download <br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/3968104/index_oob_func_type.zip\">index_oob_func_type.zip</a></p>\n<p>Just create a basic testing program calling lightbeam <code>translate</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"p\">{</span><span class=\"n\">File</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Read</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"n\">PathBuf</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">lightbeam</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Read the contents of a file</span>\n<span class=\"k\">fn</span> <span class=\"nf\">read_contents</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">PathBuf</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"n\">PathBuf</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_binary</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">read_contents</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_path</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_res_translate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lightbeam</span>::<span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_binary</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h1>RUST_BACKTRACE</h1>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread <span class=\"s1\">'main'</span> panicked at <span class=\"s1\">'index out of bounds: the len is 83 but the index is 84'</span>, /rustc/2d1a551e144335e0d60a637d12f410cf65849876/src/libcore/slice/mod.rs:2704:10\nstack backtrace:\n   <span class=\"m\">0</span>: backtrace::backtrace::libunwind::trace\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/libunwind.rs:88\n   <span class=\"m\">1</span>: backtrace::backtrace::trace_unsynchronized\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/mod.rs:66\n   <span class=\"m\">2</span>: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:47\n   <span class=\"m\">3</span>: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:36\n   <span class=\"m\">4</span>: std::panicking::default_hook::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n             at src/libstd/panicking.rs:200\n   <span class=\"m\">5</span>: std::panicking::default_hook\n             at src/libstd/panicking.rs:214\n   <span class=\"m\">6</span>: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:477\n   <span class=\"m\">7</span>: std::panicking::continue_panic_fmt\n             at src/libstd/panicking.rs:384\n   <span class=\"m\">8</span>: rust_begin_unwind\n             at src/libstd/panicking.rs:311\n   <span class=\"m\">9</span>: core::panicking::panic_fmt\n             at src/libcore/panicking.rs:85\n  <span class=\"m\">10</span>: core::panicking::panic_bounds_check\n             at src/libcore/panicking.rs:61\n  <span class=\"m\">11</span>: &lt;usize as core::slice::SliceIndex&lt;<span class=\"o\">[</span>T<span class=\"o\">]</span>&gt;&gt;::index\n             at /rustc/2d1a551e144335e0d60a637d12f410cf65849876/src/libcore/slice/mod.rs:2704\n  <span class=\"m\">12</span>: core::slice::&lt;impl core::ops::index::Index&lt;I&gt; <span class=\"k\">for</span> <span class=\"o\">[</span>T<span class=\"o\">]</span>&gt;::index\n             at /rustc/2d1a551e144335e0d60a637d12f410cf65849876/src/libcore/slice/mod.rs:2555\n  <span class=\"m\">13</span>: &lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index\n             at /rustc/2d1a551e144335e0d60a637d12f410cf65849876/src/liballoc/vec.rs:1791\n  <span class=\"m\">14</span>: &lt;lightbeam::module::SimpleContext as lightbeam::module::ModuleContext&gt;::func_type_index\n             at XXX/wasmtime/crates/lightbeam/src/module.rs:396\n  <span class=\"m\">15</span>: lightbeam::module::ModuleContext::func_type\n             at XXX/wasmtime/crates/lightbeam/src/module.rs:374\n  <span class=\"m\">16</span>: lightbeam::microwasm::MicrowasmConv&lt;M&gt;::op_sig\n             at XXX/wasmtime/crates/lightbeam/src/microwasm.rs:1166\n  <span class=\"m\">17</span>: &lt;lightbeam::microwasm::MicrowasmConv&lt;M&gt; as core::iter::traits::iterator::Iterator&gt;::next\n             at XXX/wasmtime/crates/lightbeam/src/microwasm.rs:1604\n  <span class=\"m\">18</span>: lightbeam::function_body::translate_wasm\n             at XXX/wasmtime/crates/lightbeam/src/function_body.rs:75\n  <span class=\"m\">19</span>: lightbeam::translate_sections::code\n             at XXX/wasmtime/crates/lightbeam/src/translate_sections.rs:118\n  <span class=\"m\">20</span>: lightbeam::module::translate_only\n             at XXX/wasmtime/crates/lightbeam/src/module.rs:631\n  <span class=\"m\">21</span>: lightbeam::module::translate\n             at XXX/wasmtime/crates/lightbeam/src/module.rs:504\n  <span class=\"m\">22</span>: debug_lightbeam::main\n             at src/main.rs:34\n  <span class=\"m\">23</span>: std::rt::lang_start::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n             at /rustc/2d1a551e144335e0d60a637d12f410cf65849876/src/libstd/rt.rs:64\n  <span class=\"m\">24</span>: std::rt::lang_start_internal::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n             at src/libstd/rt.rs:49\n  <span class=\"m\">25</span>: std::panicking::try::do_call\n             at src/libstd/panicking.rs:296\n  <span class=\"m\">26</span>: __rust_maybe_catch_panic\n             at src/libpanic_unwind/lib.rs:80\n  <span class=\"m\">27</span>: std::panicking::try\n             at src/libstd/panicking.rs:275\n  <span class=\"m\">28</span>: std::panic::catch_unwind\n             at src/libstd/panic.rs:394\n  <span class=\"m\">29</span>: std::rt::lang_start_internal\n             at src/libstd/rt.rs:48\n  <span class=\"m\">30</span>: std::rt::lang_start\n             at /rustc/2d1a551e144335e0d60a637d12f410cf65849876/src/libstd/rt.rs:64\n  <span class=\"m\">31</span>: main\n  <span class=\"m\">32</span>: __libc_start_main\n  <span class=\"m\">33</span>: _start\nnote: Some details are omitted, run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span>full<span class=\"sb\">`</span> <span class=\"k\">for</span> a verbose backtrace.\n</code></pre></div>\n</blockquote>",
        "id": 255087168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632763770
    }
]