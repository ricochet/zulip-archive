[
    {
        "content": "<p><strong>marmistrz</strong> requested <a href=\"https://github.com/peterhuene\" target=\"_blank\" title=\"https://github.com/peterhuene\">peterhuene</a>, <a href=\"https://github.com/kubkon\" target=\"_blank\" title=\"https://github.com/kubkon\">kubkon</a>, and <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">PR #1359</a>.</p>",
        "id": 191033583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584561344
    },
    {
        "content": "<p><strong>marmistrz</strong> requested <a href=\"https://github.com/peterhuene\" target=\"_blank\" title=\"https://github.com/peterhuene\">peterhuene</a>, <a href=\"https://github.com/kubkon\" target=\"_blank\" title=\"https://github.com/kubkon\">kubkon</a>, and <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">PR #1359</a>.</p>",
        "id": 191033584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584561344
    },
    {
        "content": "<p><strong>marmistrz</strong> requested <a href=\"https://github.com/peterhuene\" target=\"_blank\" title=\"https://github.com/peterhuene\">peterhuene</a>, <a href=\"https://github.com/kubkon\" target=\"_blank\" title=\"https://github.com/kubkon\">kubkon</a>, and <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">PR #1359</a>.</p>",
        "id": 191033585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584561344
    },
    {
        "content": "<p>marmistrz opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">PR #1359</a> from <code>dir_symlink</code> to <code>master</code>:</p>\n<blockquote>\n<p>Based from my experience, <code>symlink_file</code> will not return an error if we try to create a file symlink to a directory. I used the following Rust program to verify it:</p>\n<div class=\"codehilite\"><pre><span></span>use std::env;\nuse std::io::Result;\nuse std::os::windows::fs::symlink_file;\n\npub(crate) fn path_symlink(src: &amp;str, dst: &amp;str) -&gt; Result&lt;()&gt; {\n    // try creating a file symlink\n    symlink_file(src, dst).map_err(|e| {\n        println!(&quot;ERROR: {}&quot;, e);\n        e\n    })\n}\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    path_symlink(&amp;args[1], &amp;args[2]).expect(&quot;path_symlink failed&quot;);\n}\n</pre></div>\n\n\n<p>If <code>dir</code> is an existing directory, and the binary as executed with <code>cargo run dir target</code>, the program will succeed and create a file symlink.</p>\n<p>For details on file vs. directory symlinks on Windows see #1358.</p>\n<p>@kubkon: I'm also unsure about the correctness of the following error mappings:<br>\n<a href=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\" target=\"_blank\" title=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\">https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536</a><br>\nIn which cases are they expected to be encountered? What's the scenario they're there for?</p>\n</blockquote>",
        "id": 191033586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584561344
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-377290483\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-377290483\">PR Review</a>.</p>",
        "id": 191052668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584571786
    },
    {
        "content": "<p>marmistrz updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">PR #1359</a> from <code>dir_symlink</code> to <code>master</code>:</p>\n<blockquote>\n<p>Based from my experience, <code>symlink_file</code> will not return an error if we try to create a file symlink to a directory. I used the following Rust program to verify it:</p>\n<div class=\"codehilite\"><pre><span></span>use std::env;\nuse std::io::Result;\nuse std::os::windows::fs::symlink_file;\n\npub(crate) fn path_symlink(src: &amp;str, dst: &amp;str) -&gt; Result&lt;()&gt; {\n    // try creating a file symlink\n    symlink_file(src, dst).map_err(|e| {\n        println!(&quot;ERROR: {}&quot;, e);\n        e\n    })\n}\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    path_symlink(&amp;args[1], &amp;args[2]).expect(&quot;path_symlink failed&quot;);\n}\n</pre></div>\n\n\n<p>If <code>dir</code> is an existing directory, and the binary as executed with <code>cargo run dir target</code>, the program will succeed and create a file symlink.</p>\n<p>For details on file vs. directory symlinks on Windows see #1358.</p>\n<p>@kubkon: I'm also unsure about the correctness of the following error mappings:<br>\n<a href=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\" target=\"_blank\" title=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\">https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536</a><br>\nIn which cases are they expected to be encountered? What's the scenario they're there for?</p>\n</blockquote>",
        "id": 191604276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585054382
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397130461\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397130461\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is this change only targeting the old snapshot?</p>\n</blockquote>",
        "id": 191604708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585054584
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380280178\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380280178\">PR Review</a>.</p>",
        "id": 191604709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585054584
    },
    {
        "content": "<p>marmistrz updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">PR #1359</a> from <code>dir_symlink</code> to <code>master</code>:</p>\n<blockquote>\n<p>Based from my experience, <code>symlink_file</code> will not return an error if we try to create a file symlink to a directory. I used the following Rust program to verify it:</p>\n<div class=\"codehilite\"><pre><span></span>use std::env;\nuse std::io::Result;\nuse std::os::windows::fs::symlink_file;\n\npub(crate) fn path_symlink(src: &amp;str, dst: &amp;str) -&gt; Result&lt;()&gt; {\n    // try creating a file symlink\n    symlink_file(src, dst).map_err(|e| {\n        println!(&quot;ERROR: {}&quot;, e);\n        e\n    })\n}\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    path_symlink(&amp;args[1], &amp;args[2]).expect(&quot;path_symlink failed&quot;);\n}\n</pre></div>\n\n\n<p>If <code>dir</code> is an existing directory, and the binary as executed with <code>cargo run dir target</code>, the program will succeed and create a file symlink.</p>\n<p>For details on file vs. directory symlinks on Windows see #1358.</p>\n<p>@kubkon: I'm also unsure about the correctness of the following error mappings:<br>\n<a href=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\" target=\"_blank\" title=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\">https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536</a><br>\nIn which cases are they expected to be encountered? What's the scenario they're there for?</p>\n</blockquote>",
        "id": 191605494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585054982
    },
    {
        "content": "<p>marmistrz submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380285746\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380285746\">PR Review</a>.</p>",
        "id": 191605557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585055011
    },
    {
        "content": "<p>marmistrz created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397134719\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397134719\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Whoops, <code>git rebase</code> went wrong. It should be fine now.</p>\n</blockquote>",
        "id": 191605559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585055011
    },
    {
        "content": "<p>marmistrz edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397134719\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397134719\">PR Review Comment</a>.</p>",
        "id": 191605673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585055056
    },
    {
        "content": "<p>marmistrz updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">PR #1359</a> from <code>dir_symlink</code> to <code>master</code>:</p>\n<blockquote>\n<p>Based from my experience, <code>symlink_file</code> will not return an error if we try to create a file symlink to a directory. I used the following Rust program to verify it:</p>\n<div class=\"codehilite\"><pre><span></span>use std::env;\nuse std::io::Result;\nuse std::os::windows::fs::symlink_file;\n\npub(crate) fn path_symlink(src: &amp;str, dst: &amp;str) -&gt; Result&lt;()&gt; {\n    // try creating a file symlink\n    symlink_file(src, dst).map_err(|e| {\n        println!(&quot;ERROR: {}&quot;, e);\n        e\n    })\n}\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    path_symlink(&amp;args[1], &amp;args[2]).expect(&quot;path_symlink failed&quot;);\n}\n</pre></div>\n\n\n<p>If <code>dir</code> is an existing directory, and the binary as executed with <code>cargo run dir target</code>, the program will succeed and create a file symlink.</p>\n<p>For details on file vs. directory symlinks on Windows see #1358.</p>\n<p>@kubkon: I'm also unsure about the correctness of the following error mappings:<br>\n<a href=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\" target=\"_blank\" title=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\">https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536</a><br>\nIn which cases are they expected to be encountered? What's the scenario they're there for?</p>\n</blockquote>",
        "id": 191611177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585057664
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380336438\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380336438\">PR Review</a>.</p>",
        "id": 191613093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585058432
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397174039\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397174039\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, I'm somewhat confused here. Why do we need this check? Or put it another way, if we're doing this check already here, is creating a dir symlink on error <code>ERROR_NOT_A_REPARSE_POINT</code> still needed? Is the current approach of try and fail and try something else not working?</p>\n<p>Some context on why we've originally had <code>symlink_dir</code> call after a failing <code>symlink_file</code> call. As @sunfishcode explained a long time ago, from atomicity point of view, it seems virtually always better to try and fail and then correct, rather than invoke another syscall (in this case via <code>fs::metadata</code>) which would check what the resource (in this case the symlink) is since in between the check and actual call to <code>symlink_file</code> etc. the path might change, or whatnot.</p>\n</blockquote>",
        "id": 191613094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585058432
    },
    {
        "content": "<p>marmistrz created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397294731\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397294731\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I was unable to encounter <code>ERROR_NOT_A_REPARSE_POINT</code> while using <code>symlink_file</code> with the symlink target being a directory. As far as I have tested, the current approach of try and fail doesn't work and a file symlink will always be created.</p>\n<p>I agree that try and fail would be preferable, but it appears that <code>CreateSymbolicLinkA</code> doesn't check if the symlink target is a file or directory. I don't know if <code>ERROR_NOT_A_REPARSE_POINT</code> may be returned by <code>CreateSymbolicLinkA</code> at all.</p>\n</blockquote>",
        "id": 191637585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585067636
    },
    {
        "content": "<p>marmistrz submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380490087\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380490087\">PR Review</a>.</p>",
        "id": 191637586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585067636
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380532645\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380532645\">PR Review</a>.</p>",
        "id": 191644261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585070421
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397328688\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397328688\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, sounds like a bug then. I thought that <code>ERROR_NOT_A_REPARSE_POINT</code> played some role in this, but alas I cannot remember the exact test conditions now. Anyhow, I thought it was covered by our test programs, but from what I understand, you've proved that they were not properly testing this behaviour on Windows? Would the test work fine if we got rid <code>ERROR_NOT_A_REPARSE_POINT</code> match altogether? And would they still work without both the match and your upfront check?</p>\n</blockquote>",
        "id": 191644262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585070421
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397329895\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397329895\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh, and here's another thought. What would happen if we reversed the order of ops, i.e., started with <code>symlink_dir</code>, and if failed, tried <code>symlink_file</code>. Would that make it possible to apply the \"try-catch\" approach rather than an upfront check?</p>\n</blockquote>",
        "id": 191644473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585070518
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380534108\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-380534108\">PR Review</a>.</p>",
        "id": 191644474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585070518
    },
    {
        "content": "<p>marmistrz created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397880989\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397880989\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Trying to create a symlink to a file using <code>symlink_dir</code> succeeds too.</p>\n</blockquote>",
        "id": 191749646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585145223
    },
    {
        "content": "<p>marmistrz submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-381180196\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-381180196\">PR Review</a>.</p>",
        "id": 191749647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585145223
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397883156\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397883156\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Interesting, but then the symlinks are obviously invalid if the user would try to act on them in say Windows Explorer or whatnot?</p>\n</blockquote>",
        "id": 191750091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585145399
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-381182953\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-381182953\">PR Review</a>.</p>",
        "id": 191750092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585145399
    },
    {
        "content": "<p>marmistrz submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-381201392\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#pullrequestreview-381201392\">PR Review</a>.</p>",
        "id": 191752854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585146527
    },
    {
        "content": "<p>marmistrz created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397897855\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359#discussion_r397897855\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, Windows Explorer will show an error, claiming that the directory is invalid.</p>\n</blockquote>",
        "id": 191752856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585146527
    },
    {
        "content": "<p>marmistrz updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">PR #1359</a> from <code>dir_symlink</code> to <code>master</code>:</p>\n<blockquote>\n<p>Based from my experience, <code>symlink_file</code> will not return an error if we try to create a file symlink to a directory. I used the following Rust program to verify it:</p>\n<div class=\"codehilite\"><pre><span></span>use std::env;\nuse std::io::Result;\nuse std::os::windows::fs::symlink_file;\n\npub(crate) fn path_symlink(src: &amp;str, dst: &amp;str) -&gt; Result&lt;()&gt; {\n    // try creating a file symlink\n    symlink_file(src, dst).map_err(|e| {\n        println!(&quot;ERROR: {}&quot;, e);\n        e\n    })\n}\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    path_symlink(&amp;args[1], &amp;args[2]).expect(&quot;path_symlink failed&quot;);\n}\n</pre></div>\n\n\n<p>If <code>dir</code> is an existing directory, and the binary as executed with <code>cargo run dir target</code>, the program will succeed and create a file symlink.</p>\n<p>For details on file vs. directory symlinks on Windows see #1358.</p>\n<p>@kubkon: I'm also unsure about the correctness of the following error mappings:<br>\n<a href=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\" title=\"https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536\">https://github.com/marmistrz/wasmtime/blob/1c61210025c00f0d397be86d752717ab20642f53/crates/wasi-common/src/sys/windows/hostcalls_impl/fs.rs#L527-L536</a><br>\nIn which cases are they expected to be encountered? What's the scenario they're there for?</p>\n</blockquote>",
        "id": 192161144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585467129
    },
    {
        "content": "<p>kubkon merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1359\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1359\">PR #1359</a>.</p>",
        "id": 192489237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585724153
    }
]