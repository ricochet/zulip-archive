[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319\">PR #3319</a> from <code>optimize-call-take-two</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is an alternative to #3298 which achieves effectively the<br>\nsame goal of optimizing the <code>Func::call</code> API as well as its C API<br>\nsibling of <code>wasmtime_func_call</code>. The strategy taken here is different<br>\nthan #3298 though where a new API isn't created, rather a small tweak to<br>\nan existing API is done. Specifically this commit handles the major<br>\nsources of slowness with <code>Func::call</code> with:</p>\n<ul>\n<li>\n<p>Looking up the type of a function, to typecheck the arguments with and<br>\n  use to guide how the results should be loaded, no longer hits the<br>\n  rwlock in the <code>Engine</code> but instead each <code>Func</code> contains its own<br>\n<code>FuncType</code>. This can be an unnecessary allocation for funcs not used<br>\n  with <code>Func::call</code>, so this is a downside of this implementation<br>\n  relative to #3298. A mitigating factor, though, is that instance<br>\n  exports are loaded lazily into the <code>Store</code> and in theory not too many<br>\n  funcs are active in the store as <code>Func</code> objects.</p>\n</li>\n<li>\n<p>Temporary storage is amortized with a long-lived <code>Vec</code> in the <code>Store</code><br>\n  rather than allocating a new vector on each call. This is basically<br>\n  the same strategy as #3294 only applied to different types in<br>\n  different places. Specifically <code>wasmtime::Store</code> now retains a<br>\n<code>Vec&lt;u128&gt;</code> for <code>Func::call</code>, and the C API retains a <code>Vec&lt;Val&gt;</code> for<br>\n  calling <code>Func::call</code>.</p>\n</li>\n<li>\n<p>Finally, an API breaking change is made to <code>Func::call</code> and its type<br>\n  signature (as well as <code>Func::call_async</code>). Instead of returning<br>\n<code>Box&lt;[Val]&gt;</code> as it did before this function now takes a<br>\n<code>results: &amp;mut [Val]</code> parameter. This allows the caller to manage the<br>\n  allocation and we can amortize-remove it in <code>wasmtime_func_call</code> by<br>\n  using space after the parameters in the <code>Vec&lt;Val&gt;</code> we're passing in.<br>\n  This change is naturally a breaking change and we'll want to consider<br>\n  it carefully, but mitigating factors are that most embeddings are<br>\n  likely using <code>TypedFunc::call</code> instead and this signature taking a<br>\n  mutable slice better aligns with <code>Func::new</code> which receives a mutable<br>\n  slice for the results.</p>\n</li>\n</ul>\n<p>Overall this change, in the benchmark of \"call a nop function from the C<br>\nAPI\" is not quite as good as #3298. It's still a bit slower, on the<br>\norder of 15ns, because there's lots of capacity checks around vectors<br>\nand the type checks are slightly less optimized than before. Overall<br>\nthough this is still significantly better than today because allocations<br>\nand the rwlock to acquire the type information are both avoided. I<br>\npersonally feel that this change is the best to do because it has less<br>\nof an API impact than #3298.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 252535969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631136456
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319\">PR #3319</a> from <code>optimize-call-take-two</code> to <code>main</code>.</p>",
        "id": 252537501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631137188
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319\">PR #3319</a> from <code>optimize-call-take-two</code> to <code>main</code>.</p>",
        "id": 253134734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631556774
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319\">PR #3319</a>.</p>",
        "id": 254220277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632236016
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319#pullrequestreview-760070385\">PR review</a>.</p>",
        "id": 254257065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632249735
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319#pullrequestreview-760070385\">PR review</a>.</p>",
        "id": 254257066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632249735
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319#discussion_r713280425\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we not use the <code>wasm_val_storage</code> here, instead of a new allocation, if we exposed the store data via the associated <code>StoreRef</code>?</p>\n</blockquote>",
        "id": 254257067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632249735
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319#pullrequestreview-760142539\">PR review</a>.</p>",
        "id": 254259490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632250703
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319#discussion_r713335023\">PR review comment</a>:</p>\n<blockquote>\n<p>We could yeah. The reason I didn't do it here is that this is part of the <code>wasm.h</code> C API which uses different store data. We could update that too but I figured I didn't want to worry much about this and thought I could deal with it later if necessary. Given the later <code>*_unchecked</code> APIs I ended up adding I think that no one's gonna use these for the most performance hooks anyway.</p>\n<p>Do you agree it's alright to leave this for some future refactoring, if necessary?</p>\n</blockquote>",
        "id": 254259491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632250703
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319#pullrequestreview-760143214\">PR review</a>.</p>",
        "id": 254259585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632250747
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319#discussion_r713335569\">PR review comment</a>:</p>\n<blockquote>\n<p>Definitely <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 254259586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632250747
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3319\">PR #3319</a>.</p>",
        "id": 254260740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632251226
    }
]