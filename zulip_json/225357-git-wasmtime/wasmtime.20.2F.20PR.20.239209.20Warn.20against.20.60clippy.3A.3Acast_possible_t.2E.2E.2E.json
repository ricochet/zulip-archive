[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209\">PR #9209</a> from <code>alexcrichton:cast_possible_truncation</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit explicitly enables the <code>clippy::cast_possible_truncation</code> lint in Clippy for just the <code>wasmtime::runtime</code> module. This does not enable it for the entire workspace since it's a very noisy lint and in general has a low signal value. For the domain that <code>wasmtime::runtime</code> is working in, however, this is a much more useful lint. We in general want to be very careful about casting between <code>usize</code>, <code>u32</code>, and <code>u64</code> and the purpose of this module-targeted lint is to help with just that. I was inspired to do this after reading over #9206 where especially when refactoring code and changing types I think it would be useful to have locations flagged as \"truncation may happen here\" which previously weren't truncating.</p>\n<p>The failure mode for this lint is that panics might be introduced where truncation is explicitly intended. Most of the time though this isn't actually desired so the more practical consequence of this lint is to probably slow down wasmtime ever so slightly and bloat it ever so slightly by having a few more checks in a few places. This is likely best addressed in a more comprehensive manner, however, rather than specifically for just this one case. This problem isn't unique to just casts, but to many other forms of <code>.unwrap()</code> for example.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 468270750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725649796
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209\">PR #9209</a>.</p>",
        "id": 468270751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725649796
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209\">PR #9209</a>.</p>",
        "id": 468270752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725649796
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209\">PR #9209</a>.</p>",
        "id": 468277567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725652232
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209#pullrequestreview-2287184043\">PR review</a>:</p>\n<blockquote>\n<p>Looks great!</p>\n</blockquote>",
        "id": 468292035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725658355
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209#discussion_r1747737686\">PR review comment</a>:</p>\n<blockquote>\n<p>Does this indirect through <code>Option</code> because the error types are different between line <code>67</code> and <code>69</code>? Otherwise, wouldn't a combination of <code>and_then</code> and <code>unwrap_or_else</code> work here?</p>\n</blockquote>",
        "id": 468292036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725658355
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209#pullrequestreview-2287235334\">PR review</a>.</p>",
        "id": 468301562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725661546
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209#discussion_r1747777122\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah this had to do with different error types across the two functions and I figured options was the easiest way to go here. This is code is on the older side in Wasmtime and is probably ripe for some improvement.</p>\n</blockquote>",
        "id": 468301565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725661546
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9209\">PR #9209</a>.</p>",
        "id": 468303408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725662444
    }
]