[
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1749#issuecomment-2542264565\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1749\">issue #1749</a>:</p>\n<blockquote>\n<p>Brief summary of an evolution of this idea that came up from discussion between @cfallin, @aturon, and myself:</p>\n<ul>\n<li>Instead of removing read permissions from a well-known page, Wasmtime removes read and write permissions from the Wasm instance's stack(s). This will cause the Wasm guest to fault the next time it touches the stack.</li>\n<li>We don't need to emit any additional loads in function prologues (as long as the function touches the stack at any point, i.e. is not a leaf function) or loop headers (as long as the loop body touches the stack at some point).</li>\n<li>Otherwise, we emit dead loads from the stack in the necessary places (function prologue and loop headers). Note that this is still an improvement over what was described in the OP, which required chained loads through the vmctx.</li>\n<li>We need to be careful about when we are touching the Wasm stack from host code, for example when capturing a Wasm backtrace, and set a flag somewhere that means \"we are running host code\" that the signal handler can see and use to cooperate with the host code. In general there are a lot of potential TOCTOU bugs here between checking any flags and unmapping the stack.<ul>\n<li>If we unmap the stack and host code execution trips the signal handler, then in the signal handler we can set a interrupt-requested-during-host-code flag in the vmctx or somewhere, remap the stack, and then setcontext to the trapping host code and continue. Every call/return from host code to Wasm would check whether an interrupt was requested during the host code's execution and raise a trap or whatever as appropriate.</li>\n</ul>\n</li>\n</ul>\n<p>Compared to the current epoch system, this gets us faster Wasm execution at the cost of making interruption more expensive. Given that the performance trade offs are different, it may make sense to support both, rather than replace epochs with this proposed virtual memory system.</p>\n</blockquote>",
        "id": 488915631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734121846
    }
]