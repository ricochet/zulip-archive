[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6961\">issue #6961</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is the last remaining SIMD test that is disabled for RISC-V. I'm fairly sure that the RISC-V backend implements a spec compliant implementation of these instructions but I'd like to confirm it.</p>\n<h3>Test Case</h3>\n<p>The original test is the following:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"c1\">;; from #3327</span>\n<span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span><span class=\"err\">xffffffff</span> <span class=\"mf\">0x80bfffff 0</span><span class=\"err\">x</span><span class=\"mi\">80</span><span class=\"err\">bf</span><span class=\"mf\">0a0</span><span class=\"err\">a</span> <span class=\"mf\">0x80bf0a0a</span>\n    <span class=\"kt\">f64</span><span class=\"err\">x</span><span class=\"mi\">2</span><span class=\"err\">.promote_low_</span><span class=\"kt\">f32</span><span class=\"err\">x</span><span class=\"mi\">4</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span> <span class=\"mf\">0 0</span> <span class=\"mi\">0</span>\n    <span class=\"kt\">f64</span><span class=\"err\">x</span><span class=\"mi\">2</span><span class=\"err\">.gt</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"kt\">i64</span><span class=\"err\">x</span><span class=\"mi\">2</span><span class=\"err\">.bitmask</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>cargo run --target=riscv64gc-unknown-linux-gnu -- wast --disable-cache ./tests/misc_testsuite/simd/issue_3327_bnot_lowering.wast</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass</p>\n<h3>Actual Results</h3>\n<p>RISC-V fails.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: RISC-V</p>\n<h3>Extra Info</h3>\n<p>I've reduced the above input down to following clif test:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">test</span> <span class=\"n\">interpret</span>\n<span class=\"n\">test</span> <span class=\"n\">run</span>\n<span class=\"n\">target</span> <span class=\"n\">riscv64gc</span> <span class=\"n\">has_v</span>\n<span class=\"n\">target</span> <span class=\"n\">x86_64</span>\n\n\n<span class=\"n\">function</span> <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i64</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">f64</span> <span class=\"n\">fast</span> <span class=\"p\">{</span>\n    <span class=\"n\">const0</span> <span class=\"o\">=</span> <span class=\"mh\">0x80bf0a0a80bf0a0a80bfffffffffffff</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">:</span> <span class=\"n\">i64</span><span class=\"p\">):</span>\n    <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">vconst</span><span class=\"o\">.</span><span class=\"n\">f32x4</span> <span class=\"n\">const0</span>\n    <span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">fvpromote_low</span> <span class=\"n\">v3</span>\n    <span class=\"n\">v6</span> <span class=\"o\">=</span> <span class=\"n\">extractlane</span> <span class=\"n\">v5</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n    <span class=\"k\">return</span> <span class=\"n\">v6</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;;</span> <span class=\"n\">X86_64</span> <span class=\"n\">passes</span> <span class=\"n\">this</span>\n<span class=\"p\">;</span> <span class=\"n\">run</span><span class=\"p\">:</span> <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"n\">NaN</span><span class=\"p\">:</span><span class=\"mh\">0x7ffffe0000000</span>\n\n<span class=\"p\">;;</span> <span class=\"n\">RISCV64</span> <span class=\"n\">passes</span> <span class=\"n\">this</span>\n<span class=\"p\">;</span> <span class=\"n\">run</span><span class=\"p\">:</span> <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NaN</span>\n</code></pre></div>\n<p>RISC-V returns a Positive Canonical NaN from <code>fvpromote_low</code>. While X86 keeps the NaN as negative (and preserves payload bits). In the original test case the NaNs are then compared to check if they are negative, this passes on x86, but not on RISC-V.</p>\n<p>The docs on <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.fvpromote_low\"><code>fvpromote_low</code></a> don't specify what the correct behaviour here is. So I've looked at the <a href=\"https://webassembly.github.io/spec/core/exec/numerics.html#nan-propagation\">NaN Propagation</a> section of the WASM specification where it states:</p>\n<blockquote>\n<p>When the result of a floating-point operator other than <code>fneg</code>, <code>fabs</code>, or <code>fcopysing</code> is a <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-nan\">NaN</a>, then its sign is non-deterministic and the <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-payload\">payload</a> is computed as follows:</p>\n<ul>\n<li>If the payload of all NaN inputs to the operator is <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#canonical-nan\">canonical</a> (including the case that there are no NaN inputs), then the payload of the output is canonical as well.</li>\n<li>Otherwise the payload is picked non-deterministically among all <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#arithmetic-nan\">arithmetic NaNs</a>; that is, its most significant bit is 1 and all others are unspecified.</li>\n</ul>\n</blockquote>\n<p>In the original test case the part that makes the test fail is that RISC-V flips the sign of the NaN on promotion. I think this is allowed since the spec states <code>its sign is non-deterministic</code>. I think clearing the payload bits is also allowed, although it doesn't really matter here.</p>\n<p>So, am I reading the above correctly? And if so should we just leave this test disabled for RISC-V, or try to rewrite it in a conformant way?</p>\n</blockquote>",
        "id": 389025991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693845562
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6961\">Issue #6961</a>.</p>",
        "id": 389025992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693845562
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:area:riscv64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6961\">Issue #6961</a>.</p>",
        "id": 389025993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693845562
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6961#issuecomment-1707142974\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6961\">issue #6961</a>:</p>\n<blockquote>\n<p>I believe you're correct in your conclusion here. I'll also link the <a href=\"https://webassembly.github.io/spec/core/exec/numerics.html#xref-exec-numerics-op-promote-mathrm-promote-m-n-z\">documented semantics for promotion</a> which explicitly agree with the NaN propagation section.</p>\n<p>Given this I'd say it's ok to ignore the test on RISC-V. Ideally the test could be rewritten to accomodate platform differences but that seems difficult here as this is stressing a specific codegen bug. There's various s-expression matchers for \"any nan\" or \"any arithmetic nan\" which I think is ideally what's wanted here.</p>\n</blockquote>",
        "id": 389258702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693939422
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6961\">issue #6961</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is the last remaining SIMD test that is disabled for RISC-V. I'm fairly sure that the RISC-V backend implements a spec compliant implementation of these instructions but I'd like to confirm it.</p>\n<h3>Test Case</h3>\n<p>The original test is the following:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"c1\">;; from #3327</span>\n<span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span><span class=\"err\">xffffffff</span> <span class=\"mf\">0x80bfffff 0</span><span class=\"err\">x</span><span class=\"mi\">80</span><span class=\"err\">bf</span><span class=\"mf\">0a0</span><span class=\"err\">a</span> <span class=\"mf\">0x80bf0a0a</span>\n    <span class=\"kt\">f64</span><span class=\"err\">x</span><span class=\"mi\">2</span><span class=\"err\">.promote_low_</span><span class=\"kt\">f32</span><span class=\"err\">x</span><span class=\"mi\">4</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span> <span class=\"mf\">0 0</span> <span class=\"mi\">0</span>\n    <span class=\"kt\">f64</span><span class=\"err\">x</span><span class=\"mi\">2</span><span class=\"err\">.gt</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span>\n    <span class=\"kt\">i64</span><span class=\"err\">x</span><span class=\"mi\">2</span><span class=\"err\">.bitmask</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>cargo run --target=riscv64gc-unknown-linux-gnu -- wast --disable-cache ./tests/misc_testsuite/simd/issue_3327_bnot_lowering.wast</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass</p>\n<h3>Actual Results</h3>\n<p>RISC-V fails.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: RISC-V</p>\n<h3>Extra Info</h3>\n<p>I've reduced the above input down to following clif test:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">test</span> <span class=\"n\">interpret</span>\n<span class=\"n\">test</span> <span class=\"n\">run</span>\n<span class=\"n\">target</span> <span class=\"n\">riscv64gc</span> <span class=\"n\">has_v</span>\n<span class=\"n\">target</span> <span class=\"n\">x86_64</span>\n\n\n<span class=\"n\">function</span> <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i64</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">f64</span> <span class=\"n\">fast</span> <span class=\"p\">{</span>\n    <span class=\"n\">const0</span> <span class=\"o\">=</span> <span class=\"mh\">0x80bf0a0a80bf0a0a80bfffffffffffff</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">:</span> <span class=\"n\">i64</span><span class=\"p\">):</span>\n    <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">vconst</span><span class=\"o\">.</span><span class=\"n\">f32x4</span> <span class=\"n\">const0</span>\n    <span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">fvpromote_low</span> <span class=\"n\">v3</span>\n    <span class=\"n\">v6</span> <span class=\"o\">=</span> <span class=\"n\">extractlane</span> <span class=\"n\">v5</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n    <span class=\"k\">return</span> <span class=\"n\">v6</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;;</span> <span class=\"n\">X86_64</span> <span class=\"n\">passes</span> <span class=\"n\">this</span>\n<span class=\"p\">;</span> <span class=\"n\">run</span><span class=\"p\">:</span> <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"n\">NaN</span><span class=\"p\">:</span><span class=\"mh\">0x7ffffe0000000</span>\n\n<span class=\"p\">;;</span> <span class=\"n\">RISCV64</span> <span class=\"n\">passes</span> <span class=\"n\">this</span>\n<span class=\"p\">;</span> <span class=\"n\">run</span><span class=\"p\">:</span> <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NaN</span>\n</code></pre></div>\n<p>RISC-V returns a Positive Canonical NaN from <code>fvpromote_low</code>. While X86 keeps the NaN as negative (and preserves payload bits). In the original test case the NaNs are then compared to check if they are negative, this passes on x86, but not on RISC-V.</p>\n<p>The docs on <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.fvpromote_low\"><code>fvpromote_low</code></a> don't specify what the correct behaviour here is. So I've looked at the <a href=\"https://webassembly.github.io/spec/core/exec/numerics.html#nan-propagation\">NaN Propagation</a> section of the WASM specification where it states:</p>\n<blockquote>\n<p>When the result of a floating-point operator other than <code>fneg</code>, <code>fabs</code>, or <code>fcopysing</code> is a <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-nan\">NaN</a>, then its sign is non-deterministic and the <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-payload\">payload</a> is computed as follows:</p>\n<ul>\n<li>If the payload of all NaN inputs to the operator is <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#canonical-nan\">canonical</a> (including the case that there are no NaN inputs), then the payload of the output is canonical as well.</li>\n<li>Otherwise the payload is picked non-deterministically among all <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#arithmetic-nan\">arithmetic NaNs</a>; that is, its most significant bit is 1 and all others are unspecified.</li>\n</ul>\n</blockquote>\n<p>In the original test case the part that makes the test fail is that RISC-V flips the sign of the NaN on promotion. I think this is allowed since the spec states <code>its sign is non-deterministic</code>. I think clearing the payload bits is also allowed, although it doesn't really matter here.</p>\n<p>So, am I reading the above correctly? And if so should we just leave this test disabled for RISC-V, or try to rewrite it in a conformant way?</p>\n</blockquote>",
        "id": 389511592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694032219
    }
]