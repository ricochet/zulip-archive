[
    {
        "content": "<p>Reknij opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146\">issue #6146</a>:</p>\n<blockquote>\n<p>I want pass my json struct to the wasm function. I read the <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.Func.html#method.typed\">document</a> then i serialize the struct to string then pass it to function, but it don't work.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">resolve_message</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"resolve_message\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">error</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 347128655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680698254
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146#issuecomment-1497785449\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146\">issue #6146</a>:</p>\n<blockquote>\n<blockquote>\n<p>but it don't work</p>\n</blockquote>\n<p>Could you clarify this a bit and describe how it doesn't work? Are you getting a runtime error message? A compile-time error message?</p>\n<p>One issue could be that you're passing <code>(message)</code> where I believe that needs to be <code>(message,)</code>. I don't know if that's the entirety of your issue, though.</p>\n</blockquote>",
        "id": 347199829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680712145
    },
    {
        "content": "<p>Reknij <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146#issuecomment-1499073236\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146\">issue #6146</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>but it don't work</p>\n</blockquote>\n<p>Could you clarify this a bit and describe how it doesn't work? Are you getting a runtime error message? A compile-time error message?</p>\n<p>One issue could be that you're passing <code>(message)</code> where I believe that needs to be <code>(message,)</code>. I don't know if that's the entirety of your issue, though.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,)</span>: <span class=\"nc\">WasmParams</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">plugin_system</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">79</span>:<span class=\"mi\">43</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">79</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"resolve_message\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                           </span><span class=\"o\">^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WasmParams</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,)</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WasmParams</span><span class=\"err\">`</span>:\n              <span class=\"p\">()</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A2</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A3</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A4</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A5</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A6</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A7</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A8</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"n\">others</span>\n<span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span>::<span class=\"n\">Instance</span>::<span class=\"n\">get_typed_func</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jinker</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">crates</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"n\">f17d22bba15001f</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"mf\">7.0.0</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">461</span>:<span class=\"mi\">17</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">461</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">Params</span>: <span class=\"nc\">crate</span>::<span class=\"n\">WasmParams</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                 </span><span class=\"o\">^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Instance</span>::<span class=\"n\">get_typed_func</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>It is compile-time error and message in here.</p>\n</blockquote>",
        "id": 347410760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680788024
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146#issuecomment-1499184393\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146\">issue #6146</a>:</p>\n<blockquote>\n<p>The issue here is that you're using a <code>wasmtime::Func</code> which is a core wasm function. The documentation you linked is for <code>wasmtime::component::Func</code> which is for wasm components, which are not the same as core wasm. The core wasm functions only take integer primitives and floats as arguments. Components take a richer set of arguments.</p>\n</blockquote>",
        "id": 347441796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680792391
    },
    {
        "content": "<p>Reknij <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146#issuecomment-1499252651\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146\">issue #6146</a>:</p>\n<blockquote>\n<blockquote>\n<p>The issue here is that you're using a <code>wasmtime::Func</code> which is a core wasm function. The documentation you linked is for <code>wasmtime::component::Func</code> which is for wasm components, which are not the same as core wasm. The core wasm functions only take integer primitives and floats as arguments. Components take a richer set of arguments.</p>\n</blockquote>\n<p>Nice, is working. I corrected the code according to what you said, and now the code is normal without compile-time errors.</p>\n<p>Sorry for wasting your time on my careless mistake</p>\n<p><strong>For latecomers who see this issue, just change <code>wasmtime::{Linker, Instance}</code> to <code>wasmtime::{component::{Linker, Instance}}</code>. It's worth mentioning that <code>wasmtime::component::Linker</code> requires <code>wasmtime::component::Component</code> instead of <code>wasmtime::Module</code></strong></p>\n</blockquote>",
        "id": 347453331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680794882
    },
    {
        "content": "<p>Reknij closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6146\">issue #6146</a>:</p>\n<blockquote>\n<p>I want pass my json struct to the wasm function. I read the <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.Func.html#method.typed\">document</a> then i serialize the struct to string then pass it to function, but it don't work.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">resolve_message</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"resolve_message\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">error</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 347453382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680794886
    }
]