[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3944\">PR #3944</a> from <code>control-over-memory</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit exposes some various details and config options for having<br>\nfiner-grain control over mlock-ing the memory of modules. This amounts<br>\nto three different changes being present in this commit:</p>\n<ul>\n<li>\n<p>A new <code>Module::image_range</code> API is added to expose the range in host<br>\n  memory of where the compiled image resides. This enables embedders to<br>\n  make mlock-ing decisions independently of Wasmtime. Otherwise though<br>\n  there's not too much useful that can be done with this range<br>\n  information at this time.</p>\n</li>\n<li>\n<p>A new <code>Config::force_memory_init_memfd</code> option has been added. This<br>\n  option is used to force the usage of <code>memfd_create</code> on Linux even when<br>\n  the original module comes from a file on disk. With mlock-ing the main<br>\n  purpose for Wasmtime is likely to be avoiding major page faults that<br>\n  go back to disk, so this is another major source of avoiding page<br>\n  faults by ensuring that the initialization contents of memory are<br>\n  always in RAM.</p>\n</li>\n<li>\n<p>The <code>memory_images</code> field of a <code>Module</code> has gone back to being lazily<br>\n  created on the first instantiation, effectively reverting #3914. This<br>\n  enables embedders to defer the creation of the image to as late as<br>\n  possible to allow modules to be created from precompiled images<br>\n  without actually loading all the contents of the data segments from<br>\n  disk immediately.</p>\n</li>\n</ul>\n<p>These changes are all somewhat low-level controls which aren't intended<br>\nto be generally used by embedders. If fine-grained control is desired<br>\nthough it's hoped that these knobs provide what's necessary to be<br>\nachieved.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 275838196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647625261
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3944#pullrequestreview-914700253\">PR review</a>.</p>",
        "id": 275840941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647626474
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3944\">PR #3944</a>.</p>",
        "id": 275846969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647629516
    }
]