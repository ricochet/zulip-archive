[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617377695\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617377695\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:module\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 194852514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587498585
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617378542\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617378542\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<p>At a quick glance, this does indeed look consistent with the intent of the <code>colocated</code> flag.</p>\n</blockquote>",
        "id": 194852700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587498695
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617402679\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617402679\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<p>As far as I know the <code>colocated</code> flag is meant for functions that will be at a fixed offset from the current function, so they could use PCREL relocations, rather than using a GOT. I don't think it necessarily means that it is \"near\". For example a fully statically linked binary could always use <code>colocated</code> even when it is 4GB big.</p>\n</blockquote>",
        "id": 194858507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587501633
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617410479\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617410479\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<blockquote>\n<p>the <code>colocated</code> flag is meant for functions that will be at a fixed offset</p>\n</blockquote>\n<p>Hmm -- given that, it seems there isn't a CLIF-level notion of \"in the same module\"? Perhaps we can add a new bit to <code>call</code>s and <code>symbol_value</code>s -- I'm not sure what to call it, but we somehow need to communicate the notion of \"call into another function in the same Wasm module, which due to Wasm bytecode size limits should be in range of most RISC ISAs' call instructions\".</p>\n<p>It seems the <em>effect</em> of <code>colocated</code> is what we want, at least going off of the description: non-colocated implies indirection through a table, while colocated implies direct PC-rel reference.</p>\n<p>Alternately, we could consider just doing the right thing and implementing the veneer-insertion linker behavior; that that puts a larger burden on the client, and also breaks invariants around \"this blob of machine code from the backend is a fixed-size blob that will never need to be extended with thunks at link time\".</p>\n</blockquote>",
        "id": 194860570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587502677
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617410479\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617410479\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<blockquote>\n<p>the <code>colocated</code> flag is meant for functions that will be at a fixed offset</p>\n</blockquote>\n<p>Hmm -- given that, it seems there isn't a CLIF-level notion of \"in the same module\"? Perhaps we can add a new bit to <code>call</code>s and <code>symbol_value</code>s -- I'm not sure what to call it, but we somehow need to communicate the notion of \"call into another function in the same Wasm module, which due to Wasm bytecode size limits should be in range of most RISC ISAs' call instructions\" (EDIT: for the Wasm use-case, at least; for e.g. AOT-into-object-file use-cases, we just emit the right relocs and everything works).</p>\n<p>It seems the <em>effect</em> of <code>colocated</code> is what we want, at least going off of the description: non-colocated implies indirection through a table, while colocated implies direct PC-rel reference.</p>\n<p>Alternately, we could consider just doing the right thing and implementing the veneer-insertion linker behavior; that that puts a larger burden on the client, and also breaks invariants around \"this blob of machine code from the backend is a fixed-size blob that will never need to be extended with thunks at link time\".</p>\n</blockquote>",
        "id": 194860715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587502744
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617413704\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617413704\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<p>@bjorn3 Ah, that's true. That's what I get for jumping in without full context here :-}. </p>\n</blockquote>",
        "id": 194861436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587503114
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617868066\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617868066\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<p>@bnjbvr re:</p>\n<blockquote>\n<p>I agree with the definition of <code>colocated</code>, at least to my understanding</p>\n</blockquote>\n<p>To make sure I understand -- you're agreeing with the initial assertion that <code>colocated</code> seems in practice to mean \"reference inside module that can use direct PC-rel references\" vs. \"reference to another module that needs to go through some sort of indirection / support arbitrary addresses\"? Or the later definition clarified by @bjorn3 that it is just \"constant PC-rel offset\" (but arbitrarily far away)?</p>\n<p>I think the basic question is whether we can nudge the definition toward the former -- more of a \"same module\" vs. \"different module\" bit, from which we can infer approximate relocation distance (given module size limits), or whether we need another bit / attribute for this.</p>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 194952302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587571064
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617870506\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-617870506\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<p>The former, precisely (direct PCRel call vs load from table + indirect call); at least this seems to be the way we set it in Spidermonkey. We could imagine having a different flag for the latter, but I think that's out of scope for this PR.</p>\n</blockquote>",
        "id": 194952996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587571296
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-618062800\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-618062800\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<p>Updated -- just want to make sure we're all OK with the refined meaning of <code>colocated</code> here -- @sunfishcode, OK to do this (with extra doc-comment note on the bool flag definitions) or would you prefer something else?</p>\n</blockquote>",
        "id": 194996453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587592772
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-620366522\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-620366522\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<p>@sunfishcode -- friendly ping, could you verify whether you're OK with this interpretation of <code>colocated</code>?</p>\n</blockquote>",
        "id": 195499441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588046370
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-623779809\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-623779809\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<p>Rebased and added a more detailed doc comment to the <code>colocated</code> flag, as per a conversation with @sunfishcode just now. Will merge once the tests are green. In the longer term, we'll need to think a bit more about how to support different code models, beyond the simple <code>RelocDistance</code> here; I'll open an issue for that.</p>\n</blockquote>",
        "id": 196256530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588638666
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-623925759\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-623925759\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<blockquote>\n<p>as per a conversation with @sunfishcode just now.</p>\n</blockquote>\n<p>Where did this conversation happen? I can't find any trace in all the public channels where I'm hanging out. Could the contents of this discussion be summarized somewhere? @sunfishcode @cfallin </p>\n</blockquote>",
        "id": 196279822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588667333
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-624089606\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#issuecomment-624089606\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">Issue #1570</a>:</p>\n<blockquote>\n<p>Sorry, this was from a 1:1 IM conversation on Zulip, after I had pinged about the  above; I should've asked for a comment here for the record!</p>\n<p>Here's a transcript:</p>\n<blockquote>\n<p>@sunfishcode: I must apologize, I don't have enough context to answer this, nor time at this moment to context switch and page it in.<br>\n@sunfishcode: Potentially related is the concept of \"code models\", <a href=\"https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html#index-mcmodel_003dsmall\" title=\"https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html#index-mcmodel_003dsmall\">https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html#index-mcmodel_003dsmall</a><br>\n@sunfishcode: although judging by the comments, what Cranelift is doing here is different from any of GCC's defined code models<br>\n@sunfishcode: but eventually, I expect Cranelift will need to evolve in the direction of supporting the standard code models, possibly in addition to its own custom ones<br>\n@cfallin: OK, no worries. I had been waiting in case you had more to say, but perhaps it's best to merge it with Ben's existing approval, then address the code-model issue later (I can open an issue for it)?<br>\n@sunfishcode: Yeah. Ok, what if you added something like this to the comment on the colocated flag:<br>\n@sunfishcode: \"The exact distance depends on the code model in use. Currently on AArch64 Cranelift uses a custom code model supporting up to +/- byte displacements\"<br>\n@sunfishcode: or so</p>\n</blockquote>\n</blockquote>",
        "id": 196315238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588688943
    }
]