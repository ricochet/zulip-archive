[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411\">PR #1411</a> from <code>reimplement-dotnet-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR takes a new approach to the .NET API.</p>\n<p>Instead of using reflection to bind .NET code to host imports, we now internally use a <code>Linker</code> from Wasmtime to preform the binding.</p>\n<p>This allows a much closer abstraction to what the Rust API has.  In the new API, users interact with the <code>Host</code> type that represents a hosting environment for WebAssembly modules.  It internally hides the <code>Engine</code>, <code>Store</code>, and <code>Linker</code> types.</p>\n<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Host</span> <span class=\"p\">:</span> <span class=\"n\">IHost</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">Instance</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"na\">    [Import(&quot;hello&quot;)]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">SayHello</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">engine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Engine</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">store</span> <span class=\"p\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">CreateStore</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">CreateModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">());</span>\n\n        <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>becomes this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">();</span>\n\n<span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineFunction</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">LoadModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>Where <code>DefineFunction</code> accepts lambdas up to 16 parameters (of acceptable Wasm types).  The lambdas can also return tuples to represent multiple return values (of acceptable Wasm types).</p>\n<p>Along with this PR are changes that make the WASI C API configurable on the module name, allowing users to call <code>Host.DefineWasi</code> with <code>wasi_snapshot_preview1</code> or <code>wasi_unsable</code>.</p>\n</blockquote>",
        "id": 191832360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585187365
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411\">PR #1411</a> from <code>reimplement-dotnet-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR takes a new approach to the .NET API.</p>\n<p>Instead of using reflection to bind .NET code to host imports, we now internally use a <code>Linker</code> from Wasmtime to preform the binding.</p>\n<p>This allows a much closer abstraction to what the Rust API has.  In the new API, users interact with the <code>Host</code> type that represents a hosting environment for WebAssembly modules.  It internally hides the <code>Engine</code>, <code>Store</code>, and <code>Linker</code> types.</p>\n<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Host</span> <span class=\"p\">:</span> <span class=\"n\">IHost</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">Instance</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"na\">    [Import(&quot;hello&quot;)]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">SayHello</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">engine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Engine</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">store</span> <span class=\"p\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">CreateStore</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">CreateModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">());</span>\n\n        <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>becomes this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">();</span>\n\n<span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineFunction</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">LoadModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>Where <code>DefineFunction</code> accepts lambdas up to 16 parameters (of acceptable Wasm types).  The lambdas can also return tuples to represent multiple return values (of acceptable Wasm types).</p>\n<p>Along with this PR are changes that make the WASI C API configurable on the module name, allowing users to call <code>Host.DefineWasi</code> with <code>wasi_snapshot_preview1</code> or <code>wasi_unsable</code>.</p>\n</blockquote>",
        "id": 191832732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585187781
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411\">PR #1411</a> from <code>reimplement-dotnet-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR takes a new approach to the .NET API.</p>\n<p>Instead of using reflection to bind .NET code to host imports, we now internally use a <code>Linker</code> from Wasmtime to preform the binding.</p>\n<p>This allows a much closer abstraction to what the Rust API has.  In the new API, users interact with the <code>Host</code> type that represents a hosting environment for WebAssembly modules.  It internally hides the <code>Engine</code>, <code>Store</code>, and <code>Linker</code> types.</p>\n<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Host</span> <span class=\"p\">:</span> <span class=\"n\">IHost</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">Instance</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"na\">    [Import(&quot;hello&quot;)]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">SayHello</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">engine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Engine</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">store</span> <span class=\"p\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">CreateStore</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">CreateModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">());</span>\n\n        <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>becomes this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">();</span>\n\n<span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineFunction</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">LoadModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>Where <code>DefineFunction</code> accepts lambdas up to 16 parameters (of acceptable Wasm types).  The lambdas can also return tuples to represent multiple return values (of acceptable Wasm types).</p>\n<p>Along with this PR are changes that make the WASI C API configurable on the module name, allowing users to call <code>Host.DefineWasi</code> with <code>wasi_snapshot_preview1</code> or <code>wasi_unsable</code>.</p>\n</blockquote>",
        "id": 191833141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585188310
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411\">PR #1411</a> from <code>reimplement-dotnet-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR takes a new approach to the .NET API.</p>\n<p>Instead of using reflection to bind .NET code to host imports, we now internally use a <code>Linker</code> from Wasmtime to preform the binding.</p>\n<p>This allows a much closer abstraction to what the Rust API has.  In the new API, users interact with the <code>Host</code> type that represents a hosting environment for WebAssembly modules.  It internally hides the <code>Engine</code>, <code>Store</code>, and <code>Linker</code> types.</p>\n<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Host</span> <span class=\"p\">:</span> <span class=\"n\">IHost</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">Instance</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"na\">    [Import(&quot;hello&quot;)]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">SayHello</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">engine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Engine</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">store</span> <span class=\"p\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">CreateStore</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">CreateModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">());</span>\n\n        <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>becomes this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">();</span>\n\n<span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineFunction</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">LoadModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>Where <code>DefineFunction</code> accepts lambdas up to 16 parameters (of acceptable Wasm types).  The lambdas can also return tuples to represent multiple return values (of acceptable Wasm types).</p>\n<p>Along with this PR are changes that make the WASI C API configurable on the module name, allowing users to call <code>Host.DefineWasi</code> with <code>wasi_snapshot_preview1</code> or <code>wasi_unsable</code>.</p>\n</blockquote>",
        "id": 191836715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585192885
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411\">PR #1411</a> from <code>reimplement-dotnet-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR takes a new approach to the .NET API.</p>\n<p>Instead of using reflection to bind .NET code to host imports, we now internally use a <code>Linker</code> from Wasmtime to preform the binding.</p>\n<p>This allows a much closer abstraction to what the Rust API has.  In the new API, users interact with the <code>Host</code> type that represents a hosting environment for WebAssembly modules.  It internally hides the <code>Engine</code>, <code>Store</code>, and <code>Linker</code> types.</p>\n<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Host</span> <span class=\"p\">:</span> <span class=\"n\">IHost</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">Instance</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"na\">    [Import(&quot;hello&quot;)]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">SayHello</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">engine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Engine</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">store</span> <span class=\"p\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">CreateStore</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">CreateModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">());</span>\n\n        <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>becomes this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">();</span>\n\n<span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineFunction</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">LoadModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>Where <code>DefineFunction</code> accepts lambdas up to 16 parameters (of acceptable Wasm types).  The lambdas can also return tuples to represent multiple return values (of acceptable Wasm types).</p>\n<p>Along with this PR are changes that make the WASI C API configurable on the module name, allowing users to call <code>Host.DefineWasi</code> with <code>wasi_snapshot_preview1</code> or <code>wasi_unsable</code>.</p>\n</blockquote>",
        "id": 191842495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585201854
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411\">PR #1411</a> from <code>reimplement-dotnet-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR takes a new approach to the .NET API.</p>\n<p>Instead of using reflection to bind .NET code to host imports, we now internally use a <code>Linker</code> from Wasmtime to preform the binding.</p>\n<p>This allows a much closer abstraction to what the Rust API has.  In the new API, users interact with the <code>Host</code> type that represents a hosting environment for WebAssembly modules.  It internally hides the <code>Engine</code>, <code>Store</code>, and <code>Linker</code> types.</p>\n<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Host</span> <span class=\"p\">:</span> <span class=\"n\">IHost</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">Instance</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"na\">    [Import(&quot;hello&quot;)]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">SayHello</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">engine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Engine</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">store</span> <span class=\"p\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">CreateStore</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">CreateModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">());</span>\n\n        <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>becomes this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">();</span>\n\n<span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineFunction</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">LoadModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>Where <code>DefineFunction</code> accepts lambdas up to 16 parameters (of acceptable Wasm types).  The lambdas can also return tuples to represent multiple return values (of acceptable Wasm types).</p>\n<p>Along with this PR are changes that make the WASI C API configurable on the module name, allowing users to call <code>Host.DefineWasi</code> with <code>wasi_snapshot_preview1</code> or <code>wasi_unsable</code>.</p>\n</blockquote>",
        "id": 191849934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585210324
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411\">PR #1411</a> from <code>reimplement-dotnet-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR takes a new approach to the .NET API.</p>\n<p>Instead of using reflection to bind .NET code to host imports, we now internally use a <code>Linker</code> from Wasmtime to preform the binding.</p>\n<p>This allows a much closer abstraction to what the Rust API has.  In the new API, users interact with the <code>Host</code> type that represents a hosting environment for WebAssembly modules.  It internally hides the <code>Engine</code>, <code>Store</code>, and <code>Linker</code> types.</p>\n<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Host</span> <span class=\"p\">:</span> <span class=\"n\">IHost</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">Instance</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"na\">    [Import(&quot;hello&quot;)]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">SayHello</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">engine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Engine</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">store</span> <span class=\"p\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">CreateStore</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">CreateModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">());</span>\n\n        <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>becomes this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">();</span>\n\n<span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineFunction</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">LoadModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>Where <code>DefineFunction</code> accepts lambdas up to 16 parameters (of acceptable Wasm types).  The lambdas can also return tuples to represent multiple return values (of acceptable Wasm types).</p>\n<p>Along with this PR are changes that make the WASI C API configurable on the module name, allowing users to call <code>Host.DefineWasi</code> with <code>wasi_snapshot_preview1</code> or <code>wasi_unsable</code>.</p>\n</blockquote>",
        "id": 191850185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585210504
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382137542\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382137542\">PR Review</a>.</p>",
        "id": 191904963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585237785
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382137542\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382137542\">PR Review</a>.</p>",
        "id": 191904964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585237785
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411#discussion_r398673644\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411#discussion_r398673644\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We might end up having a number of configuration options, so could this become a configuration method rather than a constructor parameter?</p>\n</blockquote>",
        "id": 191904965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585237785
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411#discussion_r398674040\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411#discussion_r398674040\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps we could go ahead with the fully general <code>new_with_env</code> custom function for wasmtime itself?</p>\n</blockquote>",
        "id": 191904967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585237785
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382277252\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382277252\">PR Review</a>.</p>",
        "id": 191926336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585245977
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411#discussion_r398783475\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411#discussion_r398783475\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll change it to a function.</p>\n</blockquote>",
        "id": 191926337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585245977
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411#discussion_r398785140\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411#discussion_r398785140\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can do.  I'll see about sharing the impls between these and the <code>wasm_</code> counterparts the best we can, too.</p>\n</blockquote>",
        "id": 191926477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585246069
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382278779\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382278779\">PR Review</a>.</p>",
        "id": 191926478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585246069
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411\">PR #1411</a> from <code>reimplement-dotnet-api</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR takes a new approach to the .NET API.</p>\n<p>Instead of using reflection to bind .NET code to host imports, we now internally use a <code>Linker</code> from Wasmtime to preform the binding.</p>\n<p>This allows a much closer abstraction to what the Rust API has.  In the new API, users interact with the <code>Host</code> type that represents a hosting environment for WebAssembly modules.  It internally hides the <code>Engine</code>, <code>Store</code>, and <code>Linker</code> types.</p>\n<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Host</span> <span class=\"p\">:</span> <span class=\"n\">IHost</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">Instance</span> <span class=\"n\">Instance</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"na\">    [Import(&quot;hello&quot;)]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">SayHello</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">engine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Engine</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">store</span> <span class=\"p\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">CreateStore</span><span class=\"p\">();</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">CreateModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">());</span>\n\n        <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>becomes this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">();</span>\n\n<span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineFunction</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello from C#, WebAssembly!&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">LoadModule</span><span class=\"p\">(</span><span class=\"s\">&quot;hello.wasm&quot;</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span> <span class=\"nn\">dynamic</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>Where <code>DefineFunction</code> accepts lambdas up to 16 parameters (of acceptable Wasm types).  The lambdas can also return tuples to represent multiple return values (of acceptable Wasm types).</p>\n<p>Along with this PR are changes that make the WASI C API configurable on the module name, allowing users to call <code>Host.DefineWasi</code> with <code>wasi_snapshot_preview1</code> or <code>wasi_unsable</code>.</p>\n</blockquote>",
        "id": 191931797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585248538
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382339940\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411#pullrequestreview-382339940\">PR Review</a>.</p>",
        "id": 191935882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585250457
    },
    {
        "content": "<p>peterhuene merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1411\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1411\">PR #1411</a>.</p>",
        "id": 191937887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585251341
    }
]