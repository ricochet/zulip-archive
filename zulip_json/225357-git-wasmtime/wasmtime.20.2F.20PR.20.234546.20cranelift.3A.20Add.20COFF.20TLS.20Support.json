[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546\">PR #4546</a> from <code>x64-tls-coff</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR is an initial draft at adding support for resolving TLS variables in COFF file formats (Windows). This is the current main blocker on having <code>cg_clif</code> working on windows.</p>\n<p>There are still some pending issues in this PR:</p>\n<ul>\n<li>Do we need to mark the <code>gs</code> register as used?</li>\n<li>Declaring the <code>_tls_index</code> symbol. No idea if it is correct or not.</li>\n</ul>\n<p>It is my understanding (mostly based on #1885) that we still need to add COFF TLS support to the <code>object</code> crate for this to become functional.</p>\n<p>I'm going to look into modifying the object crate to see how easy/hard its going to be to add support for this, but would really appreciate any help.</p>\n<hr>\n<p>Based on my tests compiling <code>cranelift/filetests/filetests/isa/x64/tls_coff.clif</code> we emit pretty much the equivalent machine code and relocations as rustc does.</p>\n<p>&lt;details&gt;<br>\n  &lt;summary&gt;Disassembly of rustc output:&lt;/summary&gt;</p>\n<p>```<br>\n0000000000000000 &lt;getaddr&gt;:<br>\n       0: 8b 05 00 00 00 00             movl    (%rip), %eax  # 6 &lt;getaddr+0x6&gt;<br>\n        0000000000000002:  IMAGE_REL_AMD64_REL32    _tls_index<br>\n       6: 65 48 8b 0c 25 58 00 00 00    movq    %gs:88, %rcx<br>\n       f: 48 8b 04 c1                   movq    (%rcx,%rax,8), %rax<br>\n      13: 48 8d 80 00 00 00 00          leaq    (%rax), %rax<br>\n        0000000000000016:  IMAGE_REL_AMD64_SECREL   tls<br>\n      1a: c3                            retq</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&lt;/</span><span class=\"n\">details</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">details</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">&lt;</span><span class=\"n\">summary</span><span class=\"o\">&gt;</span><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">tls_coff</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"> </span><span class=\"n\">output</span>:<span class=\"o\">&lt;/</span><span class=\"n\">summary</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">```</span><span class=\"w\"></span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>: <span class=\"mi\">55</span><span class=\"w\">                            </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                      </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>: <span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\">  </span>#<span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"o\">+</span><span class=\"mh\">0xa</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"mi\">0000000000000006</span>:  <span class=\"nc\">IMAGE_REL_AMD64_REL32</span><span class=\"w\">        </span><span class=\"n\">_tls_index</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">a</span>: <span class=\"mi\">65</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">gs</span>:<span class=\"mi\">88</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">13</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\">                   </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">17</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"mi\">000000000000001</span><span class=\"n\">a</span>:  <span class=\"nc\">IMAGE_REL_AMD64_SECREL</span><span class=\"w\">       </span><span class=\"p\">.</span><span class=\"n\">Ldata0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">e</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                      </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">21</span>: <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                            </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">22</span>: <span class=\"nc\">c3</span><span class=\"w\">                            </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I think the only difference there is the target of the relocation, because in the <code>tls_coff</code> example I didn't name the symbol.</p>\n<p>cc: @bjorn3 @cfallin <br>\ncc: #1885</p>\n</blockquote>",
        "id": 291186733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659017343
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#discussion_r932278350\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this should still be inside the match. For some tls models the resulting value may not be stored in rax. For example they may be able to directly move to the output register.</p>\n</blockquote>",
        "id": 291196907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659018003
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#pullrequestreview-1054180146\">PR review</a>.</p>",
        "id": 291197466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659018108
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#discussion_r932282842\">PR review comment</a>.</p>",
        "id": 291197609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659018168
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#discussion_r932282842\">PR review comment</a>:</p>\n<blockquote>\n<p>I did expect it to not be.</p>\n</blockquote>",
        "id": 291197615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659018171
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#pullrequestreview-1054189882\">PR review</a>.</p>",
        "id": 291197618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659018171
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#pullrequestreview-1054192484\">PR review</a>.</p>",
        "id": 291197748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659018223
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#discussion_r932284403\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe have a variant similar to LibCall and add a function similar to <code>self.libcall_names</code> to get the symbol name?</p>\n</blockquote>",
        "id": 291197749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659018223
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#pullrequestreview-1054225851\">PR review</a>.</p>",
        "id": 291202215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659019214
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#discussion_r932311366\">PR review comment</a>:</p>\n<blockquote>\n<p>Looks like object doesn't distinguish between text, data and tls for COFF: <a href=\"https://github.com/gimli-rs/object/blob/404ae26dac1eafc82ecad4f02ba8ccda57f7cb27/src/write/coff.rs#L597\">https://github.com/gimli-rs/object/blob/404ae26dac1eafc82ecad4f02ba8ccda57f7cb27/src/write/coff.rs#L597</a> And I couldn't find anywhere COFF distinguishes between data and tls undefined symbols.</p>\n</blockquote>",
        "id": 291202217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659019215
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#discussion_r932316170\">PR review comment</a>:</p>\n<blockquote>\n<p>These match what I see produced by rustc I believe.</p>\n</blockquote>",
        "id": 291202585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659019366
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#pullrequestreview-1054232269\">PR review</a>.</p>",
        "id": 291202586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659019366
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546\">PR #4546</a> from <code>x64-tls-coff</code> to <code>main</code>.</p>",
        "id": 291227400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659030079
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#pullrequestreview-1054520660\">PR review</a>.</p>",
        "id": 291227956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659030369
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#discussion_r932517190\">PR review comment</a>:</p>\n<blockquote>\n<p>I've added a <code>KnownSymbol</code> struct. However, if we had a lookup function, wouldn't that lead to all kinds of noncompliance with the COFF/PE format?</p>\n</blockquote>",
        "id": 291227959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659030370
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#discussion_r932517190\">PR review comment</a>.</p>",
        "id": 291227991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659030388
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546\">PR #4546</a> from <code>x64-tls-coff</code> to <code>main</code>.</p>",
        "id": 291228526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659030708
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546\">PR #4546</a> as ready for review.</p>",
        "id": 291228794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659030831
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#pullrequestreview-1054568401\">PR review</a>.</p>",
        "id": 291232428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659032667
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#discussion_r932548667\">PR review comment</a>:</p>\n<blockquote>\n<p>The lookup function would default to the correct name, but there may be cases where you want a different name. For example I plan to support tls in cg_clif's jit mode by using the TlsGd tls model and then redirecting <code>__tls_get_addr</code> to a function implemented in cg_clif which does the tls emulation, as libc doesn't have knowledge of the tls data objects used by the jitted code.</p>\n</blockquote>",
        "id": 291232429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659032667
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546\">PR #4546</a> from <code>x64-tls-coff</code> to <code>main</code>.</p>",
        "id": 291242142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659037503
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546\">PR #4546</a> from <code>x64-tls-coff</code> to <code>main</code>.</p>",
        "id": 291242460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659037658
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546\">PR #4546</a> from <code>x64-tls-coff</code> to <code>main</code>.</p>",
        "id": 292827277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660163109
    },
    {
        "content": "<p>jameysharp has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546\">PR #4546</a>.</p>",
        "id": 292964455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660235590
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546#pullrequestreview-1070009837\">PR review</a>.</p>",
        "id": 292964525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660235619
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4546\">PR #4546</a>.</p>",
        "id": 292964530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660235622
    }
]