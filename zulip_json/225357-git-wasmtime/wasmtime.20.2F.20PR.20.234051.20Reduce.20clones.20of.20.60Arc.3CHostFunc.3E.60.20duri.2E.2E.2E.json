[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4051\">PR #4051</a> from <code>less-arc-clone</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit implements an optimization to help improve concurrently<br>\ncreating instances of a module on many threads simultaneously. One<br>\nbottleneck to this measured has been the reference count modification on<br>\n<code>Arc&lt;HostFunc&gt;</code>. Each host function stored within a <code>Linker&lt;T&gt;</code> is<br>\nwrapped in an <code>Arc&lt;HostFunc&gt;</code> structure, and when any of those host<br>\nfunctions are inserted into a store the reference count is incremented.<br>\nWhen the store is dropped the reference count is then decremented.</p>\n<p>This ends up meaning that when a module imports N functions it ends up<br>\ndoing 2N atomic modifications over the lifetime of the instance. For<br>\nembeddings where the <code>Linker&lt;T&gt;</code> is rarely modified but instances are<br>\nfrequently created this can be a surprising bottleneck to creating many<br>\ninstances.</p>\n<p>A change implemented here is to optimize the instantiation process when<br>\nusing an <code>InstancePre&lt;T&gt;</code>. An <code>InstancePre</code> serves as an opportunity to<br>\ntake the list of items used to instantiate a module and wrap them all up<br>\nin an <code>Arc&lt;[T]&gt;</code>. Everything is going to get cloned into a <code>Store&lt;T&gt;</code><br>\nanyway so to optimize this the <code>Arc&lt;[T]&gt;</code> is cloned at the top-level and<br>\nthen nothing else is cloned internally. This continues to, however,<br>\npreserve a strong reference count for all contained items to prevent<br>\nthem from being deallocated.</p>\n<p>A new variant of <code>FuncKind</code> was added for host functions which is<br>\neffectively stored via <code>*mut HostFunc</code>. This variant is unsafe to create<br>\nand manage and has been documented internally.</p>\n<p>Performance-wise the overall impact of this change is somewhat minor.<br>\nIt's already a bit esoteric if this atomic increment and decrement are a<br>\nbottleneck due to the number of concurrent instances being created. In<br>\nmy measurements I've seen that this can reduce instantiation time by up<br>\nto 10% for a module that imports two dozen functions. For larger modules<br>\nwith more imports this is expected to have a larger win.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 279416688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650378677
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4051#pullrequestreview-946046457\">PR review</a>.</p>",
        "id": 279440442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650388436
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4051\">PR #4051</a>.</p>",
        "id": 279456601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650396217
    }
]