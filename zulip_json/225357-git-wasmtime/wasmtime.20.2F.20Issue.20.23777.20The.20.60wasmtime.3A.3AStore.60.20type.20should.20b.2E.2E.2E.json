[
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>As proposed in #708 the <code>Store</code> type in the wasmtime API should be thread-safe, meaning it should implement both <code>Send</code> and <code>Sync</code>. Currently, however, it has a few items that are not thread safe and/or need audits:</p>\n<ul>\n<li>~~The <a href=\"https://github.com/bytecodealliance/wasmtime/blob/06be4b14956061a4231771912f85a98904b70cec/crates/api/src/runtime.rs#L340\" title=\"https://github.com/bytecodealliance/wasmtime/blob/06be4b14956061a4231771912f85a98904b70cec/crates/api/src/runtime.rs#L340\"><code>global_exports</code></a> field is an <code>Rc</code>-protected data structure used by wasmtime internals. I don't know myself what it would take to remove this, but @sunfishcode looks like he does in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/390~~\" title=\"https://github.com/bytecodealliance/wasmtime/pull/390~~\">https://github.com/bytecodealliance/wasmtime/pull/390~~</a></li>\n<li>The <a href=\"https://github.com/bytecodealliance/wasmtime/blob/06be4b14956061a4231771912f85a98904b70cec/crates/api/src/runtime.rs#L341\" title=\"https://github.com/bytecodealliance/wasmtime/blob/06be4b14956061a4231771912f85a98904b70cec/crates/api/src/runtime.rs#L341\"><code>signature_cache</code> field</a> requires interior mutability and currently uses a <code>RefCell</code>. While this could be switched to a <code>Mutex</code> I think it would be best to avoid this altogether. I don't personally know why this field exists, @yurydelendik do you know why it's here?</li>\n<li>The <code>context</code> field has a contained <a href=\"https://github.com/bytecodealliance/wasmtime/blob/06be4b14956061a4231771912f85a98904b70cec/crates/api/src/context.rs#L10\" title=\"https://github.com/bytecodealliance/wasmtime/blob/06be4b14956061a4231771912f85a98904b70cec/crates/api/src/context.rs#L10\"><code>compiler</code> field</a> which has a number of issues. Namely <code>Rc</code> and <code>RefCell</code> are not thread safe (but can be swapped for <code>Arc</code>/<code>Mutex</code> if necessary), but the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/06be4b14956061a4231771912f85a98904b70cec/crates/jit/src/compiler.rs#L41-L60\" title=\"https://github.com/bytecodealliance/wasmtime/blob/06be4b14956061a4231771912f85a98904b70cec/crates/jit/src/compiler.rs#L41-L60\">underlying <code>Compiler</code> type</a> has a number of trait objects, raw pointers, etc, which would need auditing. I think the solution here is going to be making <code>Compiler</code> itself threadsafe by redesigning it's internals.</li>\n</ul>\n</blockquote>",
        "id": 195746102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588182471
    },
    {
        "content": "<p>DemiMarie-parity <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625862666\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625862666\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>@alexcrichton why is this impossible?</p>\n</blockquote>",
        "id": 196907362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588950630
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625887155\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625887155\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>@DemiMarie-parity the way things are set up right now you instantiate <code>Instance</code> structures into a <code>Store</code>. The <code>Store</code> keeps a handle on each <code>Instance</code>, so effectively a <code>Store</code> stores each <code>Instance</code>. This is done to keep each <code>Instance</code> alive since we don't have a GC right now to otherwise understand when there are no references to an <code>Instance</code>.</p>\n<p><code>Instance</code>s themselves are fundamentally not <code>Sync</code> because operations like global get/set aren't atomic. They're ideally <code>Send</code>, however, but with the <code>Rc</code> that we're using for memory management that forces them to not be <code>Send</code>.</p>\n<p>The current state of affairs is that basically <code>Store</code> stores enough instance-local information that it can't be shared across threads because instances can't be shared across threads. There may still be internal refactorings or possible designs to fix this, but overall our threading story isn't great right now unfortunately.</p>\n</blockquote>",
        "id": 196914717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588953791
    },
    {
        "content": "<p>DemiMarie-parity <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625896504\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625896504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>@alexcrichton what if we used <code>Arc</code> instead?  I imagine that reference count operations are not in hot paths.</p>\n</blockquote>",
        "id": 196917238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588955060
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625942214\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625942214\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>Unfortunatey it's not quite as easy as that. In Rust there's no way to statically have a reference counted type that's <code>Send</code> but not <code>Sync</code>, which is morally what we'd want here. The only static solution for that is to entirely remove the reference counting, but that doesn't jive well with the memory management that we have in wasmtime today.</p>\n<p>Failing that we'd have to invent our own solution in wasmtime which is much more invasive than just using an <code>Arc</code> instead of an <code>Rc</code>, and I'm not really sure if that's even possible much less workable.</p>\n</blockquote>",
        "id": 196929547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588960892
    },
    {
        "content": "<p>DemiMarie-parity <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625972492\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625972492\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>What would need to change to allow JIT-compiled code to be used by multiple threads simultaneously?</p>\n</blockquote>",
        "id": 196937985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588965123
    },
    {
        "content": "<p>DemiMarie-parity <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625973822\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625973822\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>The first idea that comes to mind is to separate the JIT-compiled code (which is immutable) from the data (which is mutable).  So to execute some code, one would first need to compile it, which would return an immutable <code>CompiledBlob</code> object.  One would then need to create an <code>Instance</code> from the <code>CompiledBlob</code>.  Since a <code>CompiledBlob</code> is immutable, making it <code>Send + Sync</code> is trivial.</p>\n</blockquote>",
        "id": 196938345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588965332
    },
    {
        "content": "<p>DemiMarie-parity deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625973822\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625973822\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>The first idea that comes to mind is to separate the JIT-compiled code (which is immutable) from the data (which is mutable).  So to execute some code, one would first need to compile it, which would return an immutable <code>CompiledBlob</code> object.  One would then need to create an <code>Instance</code> from the <code>CompiledBlob</code>.  Since a <code>CompiledBlob</code> is immutable, making it <code>Send + Sync</code> is trivial.</p>\n</blockquote>",
        "id": 196938952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588965630
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-626850673\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>Ah yes so sharing <code>Store</code> is its own issue but sharing compiled code is definitely something that we want to enable. Making <code>Module</code> both <code>Send</code> and <code>Sync</code> should be easier than making <code>Store</code> either <code>Send</code> or <code>Sync</code>, and that's largely just a matter of internal refactorings.</p>\n</blockquote>",
        "id": 197180263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589219007
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-627013081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\">Issue #777</a>:</p>\n<blockquote>\n<p>FWIW wasm-c-api planed to shared a module between two stores via wasm_module_share/wasm_module_obtain , see <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/threads.c#L34\">https://github.com/WebAssembly/wasm-c-api/blob/master/example/threads.c#L34</a> </p>\n</blockquote>",
        "id": 197216797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589238587
    }
]