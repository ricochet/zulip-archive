[
    {
        "content": "<p>timjrd edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6958\">issue #6958</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Use <code>Uimm64</code> for <code>UnaryImm::imm</code> instead of <code>Imm64</code>, since <code>UnaryImm::imm</code> is now always encoding an unsigned integer; following #6850 &amp; #3059.</p>\n<h4>Benefit</h4>\n<p>Make it clear that <code>UnaryImm::imm</code> must be interpreted as an unsigned integer; or that it should be reinterpreted as a signed integer if necessary, taking into account the actual bit-length of the encoded value. For example, since #6850, the immediate of <code>iconst.i32 -2</code> is encoded in <code>UnaryImm::imm</code> as <code>0xffff_fffe</code>, and not <code>-2</code>, despite being stored in a signed 64-bit integer.</p>\n<h4>Implementation</h4>\n<p>Change the type, listen to the complaints of the compiler, and address tests breakage.</p>\n<p>I would like to try to address this issue, if it's suitable for a compiler beginner with limited time resource.</p>\n<h4>Alternatives</h4>\n<p>Keep using <code>Imm64</code> since the verifier is already rejecting incorrect encodings.</p>\n</blockquote>",
        "id": 388735751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693691628
    },
    {
        "content": "<p>timjrd <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6958#issuecomment-1703951111\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6958\">issue #6958</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> might be of interest for @bjorn3 and @jameysharp</p>\n</blockquote>",
        "id": 388738198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693692332
    },
    {
        "content": "<p>timjrd edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6958\">issue #6958</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Use <code>Uimm64</code> for <code>UnaryImm::imm</code> instead of <code>Imm64</code>, since <code>UnaryImm::imm</code> is now always encoding an unsigned integer; following #6850 &amp; #3059.</p>\n<h4>Benefit</h4>\n<p>Make it clear that <code>UnaryImm::imm</code> must be interpreted as an unsigned integer; or that it should be reinterpreted as a signed integer, taking into account the actual bit-length of the encoded value. For example, since #6850, the immediate of <code>iconst.i32 -2</code> is encoded in <code>UnaryImm::imm</code> as <code>0xffff_fffe</code>, and not <code>-2</code>, despite being stored in a signed 64-bit integer.</p>\n<h4>Implementation</h4>\n<p>Change the type, listen to the complaints of the compiler, and address tests breakage.</p>\n<p>I would like to try to address this issue, if it's suitable for a compiler beginner with limited time resource.</p>\n<h4>Alternatives</h4>\n<p>Keep using <code>Imm64</code> since the verifier is already rejecting incorrect encodings.</p>\n</blockquote>",
        "id": 388800083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693731021
    },
    {
        "content": "<p>timjrd edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6958\">issue #6958</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Use <code>Uimm64</code> for <code>UnaryImm::imm</code> instead of <code>Imm64</code>, since <code>UnaryImm::imm</code> is now always encoding an unsigned integer; following #6850 &amp; #3059.</p>\n<h4>Benefit</h4>\n<p>Make it clear that <code>UnaryImm::imm</code> must be interpreted as an unsigned integer; or that it should be reinterpreted as a signed integer, taking into account the actual bit-length of the encoded value. For example, since #6850, the immediate of <code>iconst.i32 -2</code> is encoded in <code>UnaryImm::imm</code> as <code>0xffff_fffe</code>, and not <code>-2</code>, despite being stored in a signed 64-bit integer.</p>\n<h4>Implementation</h4>\n<p>Change the type, listen to the complaints of the type checker, and address tests breakage.</p>\n<p>I would like to try to address this issue, if it's suitable for a compiler beginner with limited time resource.</p>\n<h4>Alternatives</h4>\n<p>Keep using <code>Imm64</code> since the verifier is already rejecting incorrect encodings.</p>\n</blockquote>",
        "id": 388800858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693731423
    },
    {
        "content": "<p>timjrd edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6958\">issue #6958</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Use <code>Uimm64</code> for <code>UnaryImm::imm</code> instead of <code>Imm64</code>, since <code>UnaryImm::imm</code> is now always encoding an unsigned integer; following #6850 &amp; #3059.</p>\n<h4>Benefit</h4>\n<p>Make it clear that <code>UnaryImm::imm</code> must be interpreted as an unsigned integer; or that it should be reinterpreted as a signed integer with respect to the actual bit-length of the encoded value. For example, since #6850, the immediate of <code>iconst.i32 -2</code> is encoded in <code>UnaryImm::imm</code> as <code>0xffff_fffe</code>, and not <code>-2</code>, despite being stored in a signed 64-bit integer.</p>\n<h4>Implementation</h4>\n<p>Change the type, listen to the complaints of the type checker, and address tests breakage.</p>\n<p>I would like to try to address this issue, if it's suitable for a compiler beginner with limited time resource.</p>\n<h4>Alternatives</h4>\n<p>Keep using <code>Imm64</code> since the verifier is already rejecting incorrect encodings.</p>\n</blockquote>",
        "id": 388802074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693732109
    }
]