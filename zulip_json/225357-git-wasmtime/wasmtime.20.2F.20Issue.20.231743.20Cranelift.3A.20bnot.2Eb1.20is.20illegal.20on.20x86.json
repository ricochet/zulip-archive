[
    {
        "content": "<p>whitequark edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p>While looking into another issue I minimized the following testcase, which produces invalid IR:</p>\n<div class=\"codehilite\"><pre><span></span><code>target x86_64\n\nfunction u0:323() system_v {\nblock0:\n    v221 = bconst.b1 false\n    v222 = bconst.b1 false\n    v223 = bnot v221\n    v224 = band v223, v222\n    trap unreachable\n}\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>[-]                                 v223 = bnot v221\n;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n; error: inst2: v223 is a real GPR value defined by a ghost instruction\n</code></pre></div>\n\n\n<p>It seems to me that it should work but I don't understand what's the missing legalization or selection rule is in this case. @iximeow?</p>\n</blockquote>",
        "id": 198380265,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096949
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632359468\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 198380351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097003
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632364042\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p>I've tried legalizing it like this but it doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- a/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gu\">@@ -5,6 +5,7 @@ use crate::cdsl::xform::{TransformGroupBuilder, TransformGroups};</span>\n use crate::shared::immediates::Immediates;\n use crate::shared::types::Float::{F32, F64};\n use crate::shared::types::Int::{I128, I16, I32, I64, I8};\n<span class=\"gi\">+use crate::shared::types::Bool::B1;</span>\n use cranelift_codegen_shared::condcodes::{CondCode, IntCC};\n\n #[allow(clippy::many_single_char_names, clippy::cognitive_complexity)]\n<span class=\"gu\">@@ -396,6 +397,14 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n         );\n     }\n\n\n<span class=\"gi\">+    widen.legalize(</span>\n<span class=\"gi\">+        def!(a = bnot.B1(b)),</span>\n<span class=\"gi\">+        vec![</span>\n<span class=\"gi\">+            def!(x = bint.I32(b)),</span>\n<span class=\"gi\">+            def!(a = icmp_imm.I32(intcc_eq, x, Literal::constant(&amp;imm.uimm32, 0)))</span>\n<span class=\"gi\">+        ]</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+</span>\n     // Widen instructions with one input operand.\n     for &amp;op in &amp;[bnot, popcnt] {\n         for &amp;int_ty in &amp;[I8, I16] {\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198381637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097728
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632364042\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p>I've tried legalizing it like this but it doesn't do anything:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- a/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gu\">@@ -5,6 +5,7 @@ use crate::cdsl::xform::{TransformGroupBuilder, TransformGroups};</span>\n use crate::shared::immediates::Immediates;\n use crate::shared::types::Float::{F32, F64};\n use crate::shared::types::Int::{I128, I16, I32, I64, I8};\n<span class=\"gi\">+use crate::shared::types::Bool::B1;</span>\n use cranelift_codegen_shared::condcodes::{CondCode, IntCC};\n\n #[allow(clippy::many_single_char_names, clippy::cognitive_complexity)]\n<span class=\"gu\">@@ -396,6 +397,14 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n         );\n     }\n\n\n<span class=\"gi\">+    widen.legalize(</span>\n<span class=\"gi\">+        def!(a = bnot.B1(b)),</span>\n<span class=\"gi\">+        vec![</span>\n<span class=\"gi\">+            def!(x = bint.I32(b)),</span>\n<span class=\"gi\">+            def!(a = icmp_imm.I32(intcc_eq, x, Literal::constant(&amp;imm.uimm32, 0)))</span>\n<span class=\"gi\">+        ]</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+</span>\n     // Widen instructions with one input operand.\n     for &amp;op in &amp;[bnot, popcnt] {\n         for &amp;int_ty in &amp;[I8, I16] {\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198381648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097737
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632364910\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p>You can try expand instead of widen.</p>\n</blockquote>",
        "id": 198381841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097866
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632366936\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p>Tried that, it breaks with a really strange message:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0425]: cannot find value `typeof_x` in this scope\n   --&gt; /home/whitequark/Projects/wasmtime/target/debug/build/cranelift-codegen-ca1b406eb4035fa6/out/legalizer.rs:195:68\n    |\n195 |                 let predicate = predicate &amp;&amp; TYPE_SETS[0].contains(typeof_x);\n    |                                                                    ^^^^^^^^ help: a local variable with a similar name exists: `typeof_a`\n\nerror[E0425]: cannot find value `typeof_x` in this scope\n   --&gt; /home/whitequark/Projects/wasmtime/target/debug/build/cranelift-codegen-ca1b406eb4035fa6/out/legalizer.rs:197:46\n    |\n197 |                     let y = pos.ins().iconst(typeof_x, -1);\n    |                                              ^^^^^^^^ help: a local variable with a similar name exists: `typeof_a`\n\nerror[E0425]: cannot find value `x` in this scope\n   --&gt; /home/whitequark/Projects/wasmtime/target/debug/build/cranelift-codegen-ca1b406eb4035fa6/out/legalizer.rs:198:61\n    |\n198 |                     let a = pos.func.dfg.replace(inst).bxor(x, y);\n    |                                                             ^ help: a local variable with a similar name exists: `a`\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198382304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590098187
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632370073\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p>I think that entirely confused the legalizer codegen :D I'd expect the <code>Expand bnot using xor</code> bit in the shared legalizer to cover this case:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">//# Expand bnot using xor.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">minus_one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Literal</span>::<span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">imm</span><span class=\"p\">.</span><span class=\"n\">imm64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">expand</span><span class=\"p\">.</span><span class=\"n\">legalize</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">def</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bnot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">def</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">minus_one</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I'm a little at a loss as to why this doesn't apply.</p>\n<p>That said, adding a direct encoding for <code>B1</code> to x86 does make your test pass:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gh\">diff --git a/cranelift/codegen/meta/src/isa/x86/encodings.rs b/cranelift/codegen/meta/src/isa/x86/encodings.rs</span>\n<span class=\"gh\">index 7863e2bd8..9f1517253 100644</span>\n<span class=\"gd\">--- a/cranelift/codegen/meta/src/isa/x86/encodings.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/isa/x86/encodings.rs</span>\n<span class=\"gu\">@@ -1454,6 +1454,7 @@ fn define_alu(</span>\n     // x86 has a bitwise not instruction NOT.\n     e.enc_i32_i64(bnot, rec_ur.opcodes(&amp;NOT).rrr(2));\n     e.enc_b32_b64(bnot, rec_ur.opcodes(&amp;NOT).rrr(2));\n\n<span class=\"gi\">+    e.enc_both(bnot.bind(B1), rec_ur.opcodes(&amp;NOT).rrr(2));</span>\n\n     // Also add a `b1` encodings for the logic instructions.\n     // TODO: Should this be done with 8-bit instructions? It would improve partial register\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198383048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590098677
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632372655\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm a little at a loss as to why this doesn't apply.</p>\n</blockquote>\n<p>Theory: the integer immediate forbids this legalization from applying for an incompatible <code>B1</code> operand?</p>\n</blockquote>",
        "id": 198383764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590099091
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632406004\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p>I was just looking at this but because of other problems: <code>B1</code>s are going to look in the <code>expand_flags</code> transform group for legalizations, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/meta/src/isa/x86/mod.rs#L40-L59\">https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/meta/src/isa/x86/mod.rs#L40-L59</a>. If it can't find it there, there is no \"look in the next transform group\" logic so it will just fail.</p>\n</blockquote>",
        "id": 198393386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590105786
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632407499\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p><code>expand_flags</code> ought to be chained with <code>expand</code> rules afterward: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/162fcd3d756a5b0f2d39a22968b99243f404ce81/cranelift/codegen/meta/src/shared/legalize.rs#L954-L964\">https://github.com/bytecodealliance/wasmtime/blob/162fcd3d756a5b0f2d39a22968b99243f404ce81/cranelift/codegen/meta/src/shared/legalize.rs#L954-L964</a></p>\n<p><code>x86_expand</code> is then chained to <code>expand_flags</code> later downstream: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4ec16fa057774dcd0d82dce05f8160689f0fe050/cranelift/codegen/meta/src/isa/x86/legalize.rs#L11-L19\">https://github.com/bytecodealliance/wasmtime/blob/4ec16fa057774dcd0d82dce05f8160689f0fe050/cranelift/codegen/meta/src/isa/x86/legalize.rs#L11-L19</a></p>\n<p>so I'm actually more confused at <code>B1</code> types being <code>expand_flags</code> rather than <code>x86_expand</code> :(</p>\n</blockquote>",
        "id": 198393829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590106090
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743#issuecomment-632409855\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p>Ah, I think you're right: there's chaining for the DSL legalizations (I think?) but not for the custom functions?</p>\n</blockquote>",
        "id": 198394307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590106555
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1743\">Issue #1743</a>:</p>\n<blockquote>\n<p>While looking into another issue I minimized the following testcase, which produces invalid IR:</p>\n<div class=\"codehilite\"><pre><span></span><code>target x86_64\n\nfunction u0:323() system_v {\nblock0:\n    v221 = bconst.b1 false\n    v222 = bconst.b1 false\n    v223 = bnot v221\n    v224 = band v223, v222\n    trap unreachable\n}\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>[-]                                 v223 = bnot v221\n;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n; error: inst2: v223 is a real GPR value defined by a ghost instruction\n</code></pre></div>\n\n\n<p>It seems to me that it should work but I don't understand what's the missing legalization or selection rule is in this case. @iximeow?</p>\n</blockquote>",
        "id": 199040193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590680608
    }
]