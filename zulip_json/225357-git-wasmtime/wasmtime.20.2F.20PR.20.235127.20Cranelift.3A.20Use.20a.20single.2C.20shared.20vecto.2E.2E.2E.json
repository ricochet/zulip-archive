[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127\">PR #5127</a>.</p>",
        "id": 306137968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666737592
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127\">PR #5127</a> from <code>single-vec-for-abi-args</code> to <code>main</code>:</p>\n<blockquote>\n<p>Instead of two (large!!) <code>SmallVec</code>s per <code>SigData</code>.</p>\n<p>Unfortunately, I haven't measured any perf benefits from this, but we did shrink the size of <code>SigData</code> from 632 bytes to 56 bytes! It could probably get even smaller still, but I'm going to hold off on that until I get some new DHAT, <code>perf</code>, and <code>cachegrind</code> profiles that show whether <code>SigData</code> is still important to spend time on or not.</p>\n<p>Before:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">SigData</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">size</span>: <span class=\"mi\">632</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">members</span>:\n        <span class=\"mi\">0</span><span class=\"p\">[</span><span class=\"mi\">296</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"n\">args</span>: <span class=\"nc\">struct</span><span class=\"w\"> </span><span class=\"n\">smallvec</span>::<span class=\"n\">SmallVec</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIArg</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">296</span><span class=\"p\">[</span><span class=\"mi\">296</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">rets</span>: <span class=\"nc\">struct</span><span class=\"w\"> </span><span class=\"n\">smallvec</span>::<span class=\"n\">SmallVec</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIArg</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">592</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"n\">sized_stack_arg_space</span>: <span class=\"kt\">i64</span>\n        <span class=\"mi\">600</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"n\">sized_stack_ret_space</span>: <span class=\"kt\">i64</span>\n        <span class=\"mi\">608</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"n\">stack_ret_arg</span>: <span class=\"nc\">struct</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">option</span>::<span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">624</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"n\">call_conv</span>: <span class=\"nc\">enum</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">call_conv</span>::<span class=\"n\">CallConv</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">625</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"o\">&lt;</span><span class=\"n\">padding</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>After:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">SigData</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">size</span>: <span class=\"mi\">56</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">members</span>:\n        <span class=\"mi\">0</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"n\">sized_stack_arg_space</span>: <span class=\"kt\">i64</span>\n        <span class=\"mi\">8</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"n\">sized_stack_ret_space</span>: <span class=\"kt\">i64</span>\n        <span class=\"mi\">16</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">stack_ret_arg</span>: <span class=\"nc\">struct</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">option</span>::<span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">32</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"n\">arg_indices</span>: <span class=\"nc\">struct</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">range</span>::<span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">40</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"n\">ret_indices</span>: <span class=\"nc\">struct</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">range</span>::<span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">48</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"n\">call_conv</span>: <span class=\"nc\">enum</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">call_conv</span>::<span class=\"n\">CallConv</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">49</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"o\">&lt;</span><span class=\"n\">padding</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 306137970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666737592
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1155656496\">PR review</a>.</p>",
        "id": 306140087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666738839
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1155657225\">PR review</a>.</p>",
        "id": 306140658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666739147
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1155657225\">PR review</a>.</p>",
        "id": 306140659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666739147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#discussion_r1005040912\">PR review comment</a>:</p>\n<blockquote>\n<p>I may be in the minority opinion on this but I have a slight preference against too much magic <code>Deref</code>: it took me a bit too long to figure out how <code>args.len()</code> was working (answer: <code>Deref</code> lets this become a slice and then <code>.len()</code> works on that). If so for me then doubly so for someone new to our codebase trying to learn how things work. I sort of expect smart pointer types to have <code>Deref</code> but I don't expect that for an \"accumulator\"!</p>\n<p>Could we have a <code>.args()</code> and <code>.args_mut()</code> or similar to make it clear what's going on instead?</p>\n</blockquote>",
        "id": 306140660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666739147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#discussion_r1005042673\">PR review comment</a>:</p>\n<blockquote>\n<p>Huh, I'm surprised there's no <code>From&lt;u32&gt; for usize</code>; I guess this is in case we have 16-bit pointers...</p>\n</blockquote>",
        "id": 306140661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666739147
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#discussion_r1005534875\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed. There is at least one tier 3 target with 16bit pointers.</p>\n</blockquote>",
        "id": 306214085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666782094
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1156299841\">PR review</a>.</p>",
        "id": 306214086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666782094
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1162499912\">PR review</a>.</p>",
        "id": 307193514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667247355
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#discussion_r1009831959\">PR review comment</a>:</p>\n<blockquote>\n<p>How strongly do you feel about this? Uses will go from <code>args.len()</code> to <code>args.args().len()</code> which I don't feel is an improvement. <code>rust-analyzer</code> will happily jump to <code>[T]::len</code> when you do jump-to-definition on <code>args.len()</code>, so I feel like it isn't hidden. I can definitely highlight the deref impls in the doc comment for <code>ArgsAccumulator</code> as well.</p>\n</blockquote>",
        "id": 307193516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667247356
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#discussion_r1009833424\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I sort of expect smart pointer types to have <code>Deref</code></p>\n</blockquote>\n<p>I feel this is exactly as much of a smart pointer as <code>Vec</code> itself is, so I'd argue that if you're okay with <code>Vec</code> dereferencing to a slice, than this should be okay too.</p>\n<blockquote>\n<p>but I don't expect that for an \"accumulator\"!</p>\n</blockquote>\n<p>Happy to bikeshed the name as well, I put approximately zero thought into it.</p>\n</blockquote>",
        "id": 307193848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667247461
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1162502004\">PR review</a>.</p>",
        "id": 307193850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667247461
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1162519695\">PR review</a>.</p>",
        "id": 307196295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667248332
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#discussion_r1009845388\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I don't feel too strongly about it, I just have a general discomfort with implicit magic: it imposes a cost on the reader to maintain some mental state when reading code. The most frustrating codebases for me to dive into are those where there is a lot of magic dispatch and implicit connection; I don't like to weave a maze that will confuse others like that.</p>\n<p>(Also, I'd prefer not to have a codebase that requires <code>rust-analyzer</code> to comprehend well; not everyone has it installed, it can be frustrating to set up, it's fairly resource-intensive, etc.)</p>\n<p>I actually didn't realize <code>Vec</code> used <code>Deref</code> to \"inherit\" all the methods on slices; that's good to know. I do feel that's a slightly different case though, as it's part of the standard library and part of the shared base of knowledge most Rust programmers will have; here we are defining a custom thing.</p>\n<p>If we're using just a few methods from the slice API (is it just <code>.len()</code> that uses this in practice?) I'd prefer to hand-write the 3-line <code>fn len(&amp;self) { ... }</code> that proxies to the inner slice. If that glue is more than a few methods then sure, let's have the <code>Deref</code> and make sure we make a note somewhere (in the main doc-comment for <code>ArgsAccumulator</code> maybe) that it auto-derefs to the slice.</p>\n</blockquote>",
        "id": 307196298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667248332
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1162524257\">PR review</a>.</p>",
        "id": 307196829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667248521
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#discussion_r1009848033\">PR review comment</a>:</p>\n<blockquote>\n<p>Some of the backends (s390x iirc) will also index into the slice and reassign args within slots. I don't feel super strongly so I'll just add an <code>args</code> method.</p>\n</blockquote>",
        "id": 307196830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667248521
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127\">PR #5127</a> from <code>single-vec-for-abi-args</code> to <code>main</code>.</p>",
        "id": 307197689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667248846
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1162537676\">PR review</a>.</p>",
        "id": 307199880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667249592
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#pullrequestreview-1162537676\">PR review</a>.</p>",
        "id": 307199881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667249592
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127#discussion_r1009856687\">PR review comment</a>:</p>\n<blockquote>\n<p>This was pre-existing, but I don't see any reason this loop can't be a simple iterator:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        for arg in args.args_mut() {\n            match arg {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 307199883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667249593
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5127\">PR #5127</a>.</p>",
        "id": 307206166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667251938
    }
]