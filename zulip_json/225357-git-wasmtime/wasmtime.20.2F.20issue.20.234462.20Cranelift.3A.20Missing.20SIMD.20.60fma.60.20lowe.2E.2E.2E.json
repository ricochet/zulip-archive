[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4462\">issue #4462</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  Hey,</p>\n<p>It looks like we don't have any lowering for the <code>fma</code> instruction when used with SIMD types.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma_f32x4</span><span class=\"p\">(</span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">f32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -- compile --target x86_64 ./the-above.clif</code></p>\n<h3>Expected Results</h3>\n<p>A successful compilation.</p>\n<h3>Actual Results</h3>\n<p>We don't have this implemented</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F32X4</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"err\">\\</span><span class=\"n\">codegen</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">isa</span><span class=\"err\">\\</span><span class=\"n\">x64</span><span class=\"err\">\\</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">808</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">n</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: Windows<br>\nArchitecture: <code>x86_64</code></p>\n<h3>Extra Info</h3>\n<p>In #4460 I tried to implement this using the <code>vfmadd231ps</code> instruction, but I had issues implementing emit for it and I'd like some help.</p>\n<p>It looks like that instruction is only available in VEX encoding (or EVEX for <code>avx512</code> but I don't have a machine with that). Is our <code>EvexInstruction</code> encoder suitable for emitting VEX instructions, or are they completely different? Do we have a way to emit VEX instructions?</p>\n<p>I'm not too familiar with x86 but I'd like to pick this up with some help.</p>\n<p>cc: @abrown </p>\n</blockquote>",
        "id": 289884909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658064588
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4462\">issue #4462</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  Hey,</p>\n<p>It looks like we don't have any lowering for the <code>fma</code> instruction when used with SIMD types.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma_f32x4</span><span class=\"p\">(</span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">f32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -- compile --target x86_64 ./the-above.clif</code></p>\n<h3>Expected Results</h3>\n<p>A successful compilation.</p>\n<h3>Actual Results</h3>\n<p>We don't have this implemented</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F32X4</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"err\">\\</span><span class=\"n\">codegen</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">isa</span><span class=\"err\">\\</span><span class=\"n\">x64</span><span class=\"err\">\\</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">808</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">n</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: Windows<br>\nArchitecture: <code>x86_64</code></p>\n<h3>Extra Info</h3>\n<p>In #4460 I tried to implement this using the <code>vfmadd231ps</code> instruction, but I had issues implementing emit for it and I'd like some help.</p>\n<p>It looks like that instruction is only available in VEX encoding (or EVEX for <code>avx512</code> but I don't have a machine with that). Is our <code>EvexInstruction</code> encoder suitable for emitting VEX instructions, or are they completely different? Do we have a way to emit VEX instructions?</p>\n<p>I'm not too familiar with x86 but I'd like to pick this up with some help.</p>\n<p>cc: @abrown </p>\n</blockquote>",
        "id": 289884910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658064588
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4462\">issue #4462</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  Hey,</p>\n<p>It looks like we don't have any lowering for the <code>fma</code> instruction when used with SIMD types.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma_f32x4</span><span class=\"p\">(</span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">f32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -- compile --target x86_64 ./the-above.clif</code></p>\n<h3>Expected Results</h3>\n<p>A successful compilation.</p>\n<h3>Actual Results</h3>\n<p>We don't have this implemented</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F32X4</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"err\">\\</span><span class=\"n\">codegen</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">isa</span><span class=\"err\">\\</span><span class=\"n\">x64</span><span class=\"err\">\\</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">808</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">n</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: Windows<br>\nArchitecture: <code>x86_64</code></p>\n<h3>Extra Info</h3>\n<p>In #4460 I tried to implement this using the <code>vfmadd231ps</code> instruction, but I had issues implementing emit for it and I'd like some help.</p>\n<p>It looks like that instruction is only available in VEX encoding (or EVEX for <code>avx512</code> but I don't have a machine with that). Is our <code>EvexInstruction</code> encoder suitable for emitting VEX instructions, or are they completely different? Do we have a way to emit VEX instructions?</p>\n<p>I'm not too familiar with x86 but I'd like to pick this up with some help.</p>\n<p>cc: @abrown </p>\n</blockquote>",
        "id": 289884911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658064588
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4462\">issue #4462</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  Hey,</p>\n<p>It looks like we don't have any lowering for the <code>fma</code> instruction when used with SIMD types.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma_f32x4</span><span class=\"p\">(</span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">f32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -- compile --target x86_64 ./the-above.clif</code></p>\n<h3>Expected Results</h3>\n<p>A successful compilation.</p>\n<h3>Actual Results</h3>\n<p>We don't have this implemented</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F32X4</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"err\">\\</span><span class=\"n\">codegen</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">isa</span><span class=\"err\">\\</span><span class=\"n\">x64</span><span class=\"err\">\\</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">808</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">n</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: Windows<br>\nArchitecture: <code>x86_64</code></p>\n<h3>Extra Info</h3>\n<p>In #4460 I tried to implement this using the <code>vfmadd231ps</code> instruction, but I had issues encoding the instruction and I'd like some help.</p>\n<p>It looks like that instruction is only available in VEX encoding (or EVEX for <code>avx512</code> but I don't have a machine with that). Is our <code>EvexInstruction</code> encoder suitable for emitting VEX instructions, or are they completely different? Do we have a way to emit VEX instructions?</p>\n<p>I'm not too familiar with x86 but I'd like to pick this up with some help.</p>\n<p>cc: @abrown </p>\n</blockquote>",
        "id": 289885473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658065225
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4462#issuecomment-1187785185\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4462\">issue #4462</a>:</p>\n<blockquote>\n<p>Hm, so here are some thoughts:</p>\n<ul>\n<li>ideally we would have implementations of this for every possible machine, e.g., your libcall implementation in #4460, an AVX implementation for machines that have that, an AVX512 implementation for machines that have that, etc. That is a lot of work, however, so I would propose we only do two of those here: a) the libcall implementation for very old machines and b) either an AVX or AVX512 implementation for newer machines</li>\n<li>To decide \"b,\" it helps to understand that (apologies if you know all this) AVX instructions use a VEX encoding, AVX512 instructions use an EVEX encoding, and that currently in Cranelift we have only really implemented EVEX. Adding a VEX encoding implementation would be nice, but it's a bit of work.</li>\n<li>That particular instruction is available for 128-bit vectors (XMMs) in both the VEX encoding under the FMA flag and in the EVEX encoding under the AVX512VL and AVX512F flags. Those AVX512 flags are usually only available on server class CPUs but the FMA flag is likely available on most recent x86 machines. So, there seems to be a decent justification for implementing VEX encodings: if we add it, we can lower <code>fma</code> to a single instruction on more machines than the AVX512. (On the flip side, you could implement <code>vfmadd231ps</code> with the EVEX encoding but then not be able to run it locally.)</li>\n<li>To implement VEX encodings, we would need to fill in <code>codegen/src/isa/x64/encoding/vex.rs</code> in much the same fashion as I did for <code>evex.rs</code>. In this case, however, we could follow the AVX instruction format guide in section 2.3 of Intel's Software Developer's Manual, Volume 2. With that in place, we would probably need think through how to emit AVX instructions; e.g., something like  <code>Avx512Opcode</code> but perhaps we want to be able to decide on the VEX/EVEX encoding at a later time (?). Finally, we would need a <code>has_fma</code> flag in <code>codegen/meta/src/isa/x86.rs</code> and to plumb that through in a few places.</li>\n</ul>\n<p>Hopefully that information helps. Ping me on Zulip if you want to have a more \"live\" discussion.</p>\n</blockquote>",
        "id": 289995419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658164117
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4462\">issue #4462</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  Hey,</p>\n<p>It looks like we don't have any lowering for the <code>fma</code> instruction when used with SIMD types.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma_f32x4</span><span class=\"p\">(</span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">f32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -- compile --target x86_64 ./the-above.clif</code></p>\n<h3>Expected Results</h3>\n<p>A successful compilation.</p>\n<h3>Actual Results</h3>\n<p>We don't have this implemented</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F32X4</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"err\">\\</span><span class=\"n\">codegen</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">isa</span><span class=\"err\">\\</span><span class=\"n\">x64</span><span class=\"err\">\\</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">808</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">n</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: Windows<br>\nArchitecture: <code>x86_64</code></p>\n<h3>Extra Info</h3>\n<p>In #4460 I tried to implement this using the <code>vfmadd231ps</code> instruction, but I had issues encoding the instruction and I'd like some help.</p>\n<p>It looks like that instruction is only available in VEX encoding (or EVEX for <code>avx512</code> but I don't have a machine with that). Is our <code>EvexInstruction</code> encoder suitable for emitting VEX instructions, or are they completely different? Do we have a way to emit VEX instructions?</p>\n<p>I'm not too familiar with x86 but I'd like to pick this up with some help.</p>\n<p>cc: @abrown </p>\n</blockquote>",
        "id": 290824418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658786465
    }
]