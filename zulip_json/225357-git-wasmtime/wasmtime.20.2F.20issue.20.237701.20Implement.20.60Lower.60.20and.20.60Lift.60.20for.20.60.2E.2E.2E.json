[
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701\">issue #7701</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Refs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7676\">https://github.com/bytecodealliance/wasmtime/issues/7676</a> #7680 #7688<br>\nSuggestion is to implement the <code>get_typed_func</code> param/return bounds (i.e. <code>ComponentNamedList</code>, <code>Lower</code> and <code>Lift</code>) on <code>wasmtime::component::Val</code>, such that one could bind the lengths of params/results, while still (partially) using the \"polymorphic\" types.</p>\n<h4>Benefit</h4>\n<p>This would get us one step closer to a more type-safe and possibly more efficient approach for invoking guest Wasm functions, for which WIT is not known at compile-time, i.e. no bindings exist.</p>\n<p>This would allow \"partial bounds\" on the function signatures exported by the Wasm, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ResourceAny</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Could be a valid function type bound, where the type of the second parameter could only be determined at runtime, for example, by inspecting the WIT embedded in the Wasm component executed.</p>\n<h4>Implementation</h4>\n<p>It feels like most of the functionality already exists, just not the trait implementations:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6a9fa19a2609213ce87a4fed40ab102ba83fa29/crates/wasmtime/src/component/values.rs#L623-L913\">https://github.com/bytecodealliance/wasmtime/blob/e6a9fa19a2609213ce87a4fed40ab102ba83fa29/crates/wasmtime/src/component/values.rs#L623-L913</a></p>\n<h4>Alternatives</h4>\n<p>Developers could use e.g. Rust macros to generate an implementation of a polymorphic <code>Call</code> trait for all possible signatures of exported component functions, which would be a lot of hard-to-maitain work, otherwise they could use untyped <code>func</code> directly</p>\n</blockquote>",
        "id": 409357179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703154289
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701\">issue #7701</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Refs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7676\">https://github.com/bytecodealliance/wasmtime/issues/7676</a> #7680 #7688<br>\nSuggestion is to implement the <code>get_typed_func</code> param/return bounds (i.e. <code>Lower</code> and <code>Lift</code>) on <code>wasmtime::component::Val</code>, such that one could bind the lengths of params/results, while still (partially) using the \"polymorphic\" types.</p>\n<h4>Benefit</h4>\n<p>This would get us one step closer to a more type-safe and possibly more efficient approach for invoking guest Wasm functions, for which WIT is not known at compile-time, i.e. no bindings exist.</p>\n<p>This would allow \"partial bounds\" on the function signatures exported by the Wasm, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ResourceAny</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Could be a valid function type bound, where the type of the second parameter could only be determined at runtime, for example, by inspecting the WIT embedded in the Wasm component executed.</p>\n<h4>Implementation</h4>\n<p>It feels like most of the functionality already exists, just not the trait implementations:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6a9fa19a2609213ce87a4fed40ab102ba83fa29/crates/wasmtime/src/component/values.rs#L623-L913\">https://github.com/bytecodealliance/wasmtime/blob/e6a9fa19a2609213ce87a4fed40ab102ba83fa29/crates/wasmtime/src/component/values.rs#L623-L913</a></p>\n<h4>Alternatives</h4>\n<p>Developers could use e.g. Rust macros to generate an implementation of a polymorphic <code>Call</code> trait for all possible signatures of exported component functions, which would be a lot of hard-to-maitain work, otherwise they could use untyped <code>func</code> directly</p>\n</blockquote>",
        "id": 409357246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703154307
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701#issuecomment-1867073490\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701\">issue #7701</a>:</p>\n<blockquote>\n<p>I originally didn't implement this because <code>Lift</code> and <code>Lower</code> inherit from <code>ComponentType</code> which didn't have a way to type-check since <code>&amp;self</code> wasn't taken in the <code>typecheck</code> method. That being said nowadays the type is passed through <code>Lift::lift</code> and <code>Lower::lower</code> so this should actually be possible to do nowadays by returning \"true\" from any call to <code>typecheck</code> and then performing the actual type check at runtime in the <code>lift</code> and <code>lower</code> methods.</p>\n<p>I think this'd be a great idea to implement as well, thanks for filing an issue!</p>\n</blockquote>",
        "id": 409485505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703203925
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701\">Issue #7701</a>.</p>",
        "id": 409485517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703203930
    }
]