[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1700\">Issue #1700</a>:</p>\n<blockquote>\n<p>During linearization, we can intern paths in the <code>PatternPreOrder</code> traversal that don't ultimately get used by any LHS match ops or RHS actions. However, we serialize the whole <code>PathInterner</code> with all of its interned paths, including those unused paths. This makes the serialized form a bit bigger than it need be, and also implies a bit of memory overhead on deserialized peephole optimizations.</p>\n<p>We should add a pass to GC unused paths from the <code>PathInterner</code> as part of the peepmatic compilation pipeline.</p>\n</blockquote>",
        "id": 197579392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589472957
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1700\">Issue #1700</a>:</p>\n<blockquote>\n<p>During linearization, we can intern paths in the <code>PatternPreOrder</code> traversal that don't ultimately get used by any LHS match ops or RHS actions. However, we serialize the whole <code>PathInterner</code> with all of its interned paths, including those unused paths. This makes the serialized form a bit bigger than it need be, and also implies a bit of memory overhead on deserialized peephole optimizations.</p>\n<p>We should add a pass to GC unused paths from the <code>PathInterner</code> as part of the peepmatic compilation pipeline.</p>\n</blockquote>",
        "id": 197579395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589472957
    },
    {
        "content": "<p>declanvk <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1700#issuecomment-652117697\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1700\">Issue #1700</a>:</p>\n<blockquote>\n<p>Hello again, I have a PR for this in #1795 </p>\n<p>However, I ran into an issue. I don't think the GC process is making the <code>PathInterner</code> any smaller, so I'm somewhat unsure what to do.  I've considered the whole list of <code>linear::Optimizations</code> as the root set of <code>PathId</code>s to preserve, but I think it turns out that the <code>PatternPreOrder</code> doesn't actually create any unused <code>PathId</code>s.</p>\n<p>Second, given that this process involves removing a small amount of garbage (unused <code>PathId</code>s) and rewriting a large amount of useful data (used <code>PathId</code>s), I'm not sure if my process of refilling a separate <code>PathInterner</code> is the most efficient. Let me know if you have any thoughts on a better design.</p>\n</blockquote>",
        "id": 202518346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593563467
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1700#issuecomment-652118871\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1700\">Issue #1700</a>:</p>\n<blockquote>\n<p>Ok, that makes sense upon reflection. Thanks for looking into this. I think we can just close this issue, since I want to move away from paths and have the match predicate language implicitly bind operands to variables when doing <code>opcode</code> matches.</p>\n</blockquote>",
        "id": 202518633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593563740
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1700\">Issue #1700</a>:</p>\n<blockquote>\n<p>During linearization, we can intern paths in the <code>PatternPreOrder</code> traversal that don't ultimately get used by any LHS match ops or RHS actions. However, we serialize the whole <code>PathInterner</code> with all of its interned paths, including those unused paths. This makes the serialized form a bit bigger than it need be, and also implies a bit of memory overhead on deserialized peephole optimizations.</p>\n<p>We should add a pass to GC unused paths from the <code>PathInterner</code> as part of the peepmatic compilation pipeline.</p>\n</blockquote>",
        "id": 202518634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593563740
    }
]