[
    {
        "content": "<p>lpereira opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a> from <code>lpereira:wasm-func-names-in-objs</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Instead of generating symbol names in the format<br>\n\"wasm[$MODULE_ID]::function[$FUNCTION_INDEX]\", generate (if possible) something more readable, such as \"wasm[$MODULE_ID]::$FUNCTION_NAME\". This helps when debugging or profiling the generated code.<br>\n</p>\n</blockquote>",
        "id": 438851351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715793413
    },
    {
        "content": "<p><strong>lpereira</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438851353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715793413
    },
    {
        "content": "<p><strong>lpereira</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438851354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715793413
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113071875\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Is it guaranteed that the names section only contains unique names?</p>\n</blockquote>",
        "id": 438852214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715793716
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113073503\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Thanks! This makes sense to me and I've often thought this would be nice as well. A hesitation I've had in the past though is that I'm a bit wary about exposing user-provided data to native tools like <code>perf</code> and <code>objdump</code> and such. The name section has completely arbitrary strings and I while I can't say for certainty that native tooling behaves well in the face of arbitrary strings I suspect that there might be a security issue waiting to happen along the lines of \"if you run <code>ldd</code> over a binary it can run arbitrary code\" or something like that.</p>\n<p>(a good example being @bjorn3's suggestion where the <code>name</code> section has no guarantees of uniqueness and I'm not sure what tooling would do with same-named-symbols)</p>\n</blockquote>",
        "id": 438852425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715793780
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113097889\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>I wonder if we could define suitable \"cleanup\" for names: (i) rewrite duplicates with numeric suffixes, (ii) replace or remove any characters not in the usual set (<code>[A-Za-z0-9-_]</code> -- maybe spaces too? can tools handle those?), (iii) cap the length at something reasonable like 32 or 64 characters?</p>\n</blockquote>",
        "id": 438854795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715794639
    },
    {
        "content": "<p>lpereira <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113112774\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Could also add the function_index for the cases where uniqueness isn't guaranteed.  Alright, I'll cook up a patch with the suggestions.</p>\n</blockquote>",
        "id": 438856376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715795204
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113114460\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Yeah I think that'd work well (albeit bit a bit more involved in the implementation). While I can't say for certainty that spaces are not supported my guess is that tools would likely eventually choke on non-C-looking symbols so I'd be tempted to leave them out. </p>\n</blockquote>",
        "id": 438856506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715795262
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113138170\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>How about</p>\n<ul>\n<li><code>wasm[N]::func[M]</code> if no name section entry</li>\n<li><code>wasm[N]::func[m]: &lt;name&gt;</code> where <code>&lt;name&gt;</code> is sanitized and has a capped length if there is an entry</li>\n</ul>\n<p>?</p>\n</blockquote>",
        "id": 438859089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715796157
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113138170\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>How about</p>\n<ul>\n<li><code>wasm[N]::func[M]</code> if no name section entry</li>\n<li><code>wasm[N]::func[M]: &lt;name&gt;</code> where <code>&lt;name&gt;</code> is sanitized and has a capped length if there is an entry</li>\n</ul>\n<p>?</p>\n<p>This avoids needing to either add numbers into the sanitized name and then worrying about removing those numbers when capping the length, or needing to account for the length of the numbers that might be added after sanitizing and capping the name.</p>\n</blockquote>",
        "id": 438859293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715796236
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438864805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715798517
    },
    {
        "content": "<p>lpereira <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113227438\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Alright, pushed some changes that:</p>\n<ul>\n<li>Will filter symbols to only include alphanumeric characters and others that might be generated by name mangling and whatnot, and replace runs of them with a single '?'</li>\n<li>Always include the function index in the symbol name</li>\n<li>Truncate the symbol name to 96 characters</li>\n</ul>\n<p>I think this should be sufficient, although I'm not really sold on how good the string filtering code is. I wish there was a <code>String::translate()</code> that would work similarly to <code>String::retain()</code>, but replace the character with what the callback function returns.  I'm a newbie in Rust, though, so maybe there's a way I couldn't figure out? </p>\n</blockquote>",
        "id": 438865517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715798763
    },
    {
        "content": "<p>lpereira edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113227438\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Alright, pushed some changes that:</p>\n<ul>\n<li>Will filter symbols to only include alphanumeric characters and others that might be generated by name mangling and whatnot, and replace runs of them with a single '?'</li>\n<li>Always include the function index in the symbol name</li>\n<li>Truncate the symbol name to 96 characters</li>\n</ul>\n<p>I think this should be sufficient, although I'm not really sold on how good the string filtering code is (in fact, it's pretty bad, as it always goes back to the beginning of the string to find the next match; I'll force-push a new thing soon). I wish there was a <code>String::translate()</code> that would work similarly to <code>String::retain()</code>, but replace the character with what the callback function returns.  I'm a newbie in Rust, though, so maybe there's a way I couldn't figure out? </p>\n</blockquote>",
        "id": 438866162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715799002
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438868622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715799936
    },
    {
        "content": "<p>lpereira edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113227438\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Alright, pushed some changes that:</p>\n<ul>\n<li>Will filter symbols to only include alphanumeric characters and others that might be generated by name mangling and whatnot, and replace runs of them with a single '?'</li>\n<li>Always include the function index in the symbol name</li>\n<li>Truncate the symbol name to 96 characters</li>\n</ul>\n<p>I think this should be sufficient. Can anyone please take a look again?</p>\n</blockquote>",
        "id": 438868697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715799964
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438868894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715800048
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2058802627\">PR review</a>.</p>",
        "id": 438869040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715800100
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2058802627\">PR review</a>.</p>",
        "id": 438869041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715800100
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1602125950\">PR review comment</a>:</p>\n<blockquote>\n<p>I think you can do something better with iterators, and also we'll want to avoid allocating a string in the common case -- perhaps something like:</p>\n<ul>\n<li>Define a predicate <code>fn bad_char(c: char) -&gt; bool { ... }</code> inside this function</li>\n<li>Guard on no bad chars, to allow the common case without allocations; if any bad chars, do an iterator stream filter</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">bad_char</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">Cow</span>::<span class=\"n\">Owned</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">bad_char</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"sc\">'?'</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">}).</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">())</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">Cow</span>::<span class=\"n\">Borrowed</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 438869042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715800100
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438869249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715800188
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438870176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715800587
    },
    {
        "content": "<p>lpereira submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2058824725\">PR review</a>.</p>",
        "id": 438870469,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715800738
    },
    {
        "content": "<p>lpereira created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1602137600\">PR review comment</a>:</p>\n<blockquote>\n<p>Yup, right after I pushed this I found about the <code>map()</code> method.  Let me use <code>Cow</code> too, as this should reduce quite a bit of writes in the happy path.</p>\n</blockquote>",
        "id": 438870470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715800738
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438879958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715804881
    },
    {
        "content": "<p>lpereira submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2058944213\">PR review</a>.</p>",
        "id": 438880126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715804942
    },
    {
        "content": "<p>lpereira created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1602207583\">PR review comment</a>:</p>\n<blockquote>\n<p>Done, thanks!</p>\n</blockquote>",
        "id": 438880128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715804942
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438880347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715805028
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2058966897\">PR review</a>.</p>",
        "id": 438881329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715805467
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1602221176\">PR review comment</a>:</p>\n<blockquote>\n<p>.take(N) in the iterator chain should allow the truncation to happen inline (and stop iteration early if so, since the whole chain is lazy)</p>\n</blockquote>",
        "id": 438881330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715805467
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438882655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806028
    },
    {
        "content": "<p>lpereira submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2058986156\">PR review</a>.</p>",
        "id": 438882661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806032
    },
    {
        "content": "<p>lpereira created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1602233055\">PR review comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 438882663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806032
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2059006313\">PR review</a>:</p>\n<blockquote>\n<p>Looks reasonable to me, thanks for the iterations!</p>\n</blockquote>",
        "id": 438884314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806740
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438884349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806755
    },
    {
        "content": "<p>lpereira submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2059006721\">PR review</a>.</p>",
        "id": 438884357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806757
    },
    {
        "content": "<p>lpereira created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1602246067\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually, no, I'm not sure how to do this; I want to truncate the string after <code>trim_matches('?')</code> removed repeated occurrences of <code>'?'</code> in the cleaned string, not before.</p>\n</blockquote>",
        "id": 438884358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806758
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438884404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806774
    },
    {
        "content": "<p>cfallin has disabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 438884535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806809
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113447975\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Ah, force-pushed after my review; could you do subsequent updates as additional commits? Let me know when stable and I can re-review.</p>\n</blockquote>",
        "id": 438884617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715806831
    },
    {
        "content": "<p>lpereira <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2113633815\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>It's stable now.  (I'm not using the <code>take()</code> method for the reason I stated above, so I reverted to the previous version.)</p>\n</blockquote>",
        "id": 438901623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715815054
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2059555029\">PR review</a>:</p>\n<blockquote>\n<p>This is going to be such a big usability improvement for people using tools like perf! I'm excited.</p>\n</blockquote>",
        "id": 438936132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715836271
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2059555029\">PR review</a>:</p>\n<blockquote>\n<p>This is going to be such a big usability improvement for people using tools like perf! I'm excited.</p>\n</blockquote>",
        "id": 438936133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715836271
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1602624110\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe you wanted <a href=\"https://doc.rust-lang.org/std/primitive.char.html#method.is_ascii_alphanumeric\">is_ascii_alphanumeric</a> here instead, rather than allowing all Unicode alpha/numeric codepoints?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let bad_char = |c: char| !c.is_ascii_alphanumeric() &amp;&amp; !r\"&lt;&gt;[]_-:@$\".contains(c);\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 438936135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715836271
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1602598665\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess the name should still be truncated even if there are no bad characters, right?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            Cow::Borrowed(&amp;name[..Self::MAX_SYMBOL_LEN])\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 438936136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715836271
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1602618129\">PR review comment</a>:</p>\n<blockquote>\n<p>You mention that you intended to turn any run of multiple <code>?</code> into a single <code>?</code>. Note that <code>trim_matches</code> doesn't do that. Instead, it deletes all copies of the given pattern from both ends of the string. That's why it can return a borrowed <code>&amp;str</code> instead of a heap-allocated <code>String</code>: it doesn't change the middle of the string, so it can just adjust the start pointer and the length.</p>\n<p>I think this should do more or less what you want (though I'm typing it in GitHub's web editor without testing it so who knows). It deletes all <code>?</code> at the beginning of the string, then compresses any run of multiple <code>?</code> into a single <code>?</code>. It can leave a single <code>?</code> at the end of the string but I couldn't think of a simple way to fix that and I don't think it matters. Also it uses <code>take</code> like Chris suggested.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">last_char</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'?'</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">name</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">bad_char</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"sc\">'?'</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">keep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">last_char</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">last_char</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">keep</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"bp\">Self</span>::<span class=\"n\">MAX_SYMBOL_LEN</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 438936137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715836271
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2114065831\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Ah, the CI test failures are because <code>tests/disas.rs</code> is specifically looking for symbol names which contain both <code>wasm</code> and <code>function</code> in their names, and you've shortened the latter to <code>func</code>. This is near the beginning of <code>disas_elf</code>.</p>\n<p>I don't like that this test is relying on this implementation detail of Wasmtime, but I suppose it's fine. So you can either change this PR to continue to use <code>function</code>, or change <code>disas.rs</code> to search for <code>func</code>.</p>\n<p>Either way, you'll also need to run <code>WASMTIME_TEST_BLESS=1 cargo test --test disas</code> to update the tests to reflect this change. Some of them do have function names, and those now show up in the expected test output, which is a fantastic bonus.</p>\n</blockquote>",
        "id": 438939138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715837601
    },
    {
        "content": "<p>lpereira created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1603685973\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 439058014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715876713
    },
    {
        "content": "<p>lpereira submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2061312868\">PR review</a>.</p>",
        "id": 439058015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715876713
    },
    {
        "content": "<p>lpereira submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#pullrequestreview-2061314812\">PR review</a>.</p>",
        "id": 439058166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715876765
    },
    {
        "content": "<p>lpereira created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#discussion_r1603687698\">PR review comment</a>:</p>\n<blockquote>\n<p>Yup, had this change locally and forgot to push. Good catch!</p>\n</blockquote>",
        "id": 439058169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715876765
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 439058646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715876978
    },
    {
        "content": "<p>lpereira updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 439060371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715877587
    },
    {
        "content": "<p>lpereira <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2115735680\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<p>Alright, thanks for the review!  This should be the last round.</p>\n<p>(@jameysharp, that filter wouldn't work -- words like \"keep\", which are fine, would be transformed to \"kep\" -- but I tweaked it to consider that case.)</p>\n</blockquote>",
        "id": 439060506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715877629
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627#issuecomment-2115846547\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>:</p>\n<blockquote>\n<blockquote>\n<p>(@jameysharp, that filter wouldn't work -- words like \"keep\", which are fine, would be transformed to \"kep\" -- but I tweaked it to consider that case.)</p>\n</blockquote>\n<p>Oh, you're absolutely right. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>Looks good to me, let's ship it!</p>\n</blockquote>",
        "id": 439070673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715881345
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8627\">PR #8627</a>.</p>",
        "id": 439073260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715882308
    }
]