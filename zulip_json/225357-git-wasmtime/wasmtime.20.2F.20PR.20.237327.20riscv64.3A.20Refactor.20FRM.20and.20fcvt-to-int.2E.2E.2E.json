[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/afonso360\">afonso360</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a>.</p>",
        "id": 397971325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698007791
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a> from <code>alexcrichton:rv64-frm</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit started out with the goal of deleting the <code>FcvtToInt</code> macro instruction by moving it into ISLE but it ended up having some surrounding refactors as well. The original goal is achieved and all float-to-int conversion now happens in ISLE. Additionally handling of the FRM (float rounding mode) state of each instruction is now explicit which means that Cranelift code emission now defaults to <code>FRM::RNE</code> (round-to-nearest ties-to-evens) rather than the runtime state in the <code>fcsr</code>. This was a theoretical bug with the previous code where if the register didn't have <code>RNE</code> in it then the code wouldn't perform correctly.</p>\n</blockquote>",
        "id": 397971326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698007791
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a>.</p>",
        "id": 397971327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698007792
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a>.</p>",
        "id": 397971328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698007792
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#pullrequestreview-1692164036\">PR review</a>:</p>\n<blockquote>\n<p>Neat! I like explicitly including FRM in the instructions instead of relying on FCSR.</p>\n<p>This also fixes #5992 and #5993, could you add those test cases as regression tests and enable those instruction in fuzzgen <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ce796a968416f07e75ca7a4c55e628bcf241cd04/cranelift/fuzzgen/src/function_generator.rs#L760\">here</a>?</p>\n<p>I've been fuzzing this with those instruction enabled since yesterday and it hasn't found anything.</p>\n</blockquote>",
        "id": 398075337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698064462
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#pullrequestreview-1692164036\">PR review</a>:</p>\n<blockquote>\n<p>Neat! I like explicitly including FRM in the instructions instead of relying on FCSR.</p>\n<p>This also fixes #5992 and #5993, could you add those test cases as regression tests and enable those instruction in fuzzgen <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ce796a968416f07e75ca7a4c55e628bcf241cd04/cranelift/fuzzgen/src/function_generator.rs#L760\">here</a>?</p>\n<p>I've been fuzzing this with those instruction enabled since yesterday and it hasn't found anything.</p>\n</blockquote>",
        "id": 398075338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698064463
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#discussion_r1368425028\">PR review comment</a>:</p>\n<blockquote>\n<p>I went looking for an answer to this, the <a href=\"https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc#frame-pointer-convention\">psABI document</a> states:</p>\n<blockquote>\n<p>The Floating-Point Control and Status Register (fcsr) must have thread storage duration in accordance with C11 section 7.6 \"Floating-point environment &lt;fenv.h&gt;\".</p>\n</blockquote>\n<p>Which doesn't mean a whole lot to me, but is clarified in the <a href=\"https://github.com/riscv-non-isa/riscv-elf-psabi-doc/pull/73#issuecomment-401785037\">PR that introduced that sentence</a> to mean that OS's are responsible for preserving it per thread, and otherwise programs are allowed to do pretty much whatever they feel like.</p>\n<hr>\n<p>I couldn't find any information as to whether using <code>fcsr</code> is better than encoding the rounding mode in the instruction, but I personally like including the rounding mode explicitly it in the instruction, as long as it doesn't break anything.</p>\n</blockquote>",
        "id": 398075339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698064463
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#discussion_r1368441258\">PR review comment</a>:</p>\n<blockquote>\n<p>I found this slightly hard to read, do you think something like this would be more readable? This is purely personal preference so feel free to ignore it.</p>\n<p>The comment regarding <code>fcvt</code> would be helpful though since it took me a while to figure that out.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>match (float, int) {\n    // Saturating cases for larger integers are handled using the `fcvt.{w,d}.{s,d}` instruction directly, that\n    // automatically saturates up/down to the correct limit.\n    (I8, F32) if saturating =&gt; f32::from(i8::MIN).to_bits().into(),\n    (I8, F64) if saturating =&gt; f64::from(i8::MIN).to_bits(),\n    (I16, F32) if saturating =&gt; f32::from(i16::MIN).to_bits().into(),\n    (I16, F64) if saturating =&gt; f64::from(i16::MIN).to_bits(),\n\n    (_, F32) if !saturating =&gt; f32_cvt_to_int_bounds(true, int.bits()).0.to_bits().into(),\n    (_, F64) if !saturating =&gt; f64_cvt_to_int_bounds(true, int.bits()).0.to_bits(),\n    _ =&gt; unimplemented!(),\n}\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 398075341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698064463
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#discussion_r1368441258\">PR review comment</a>.</p>",
        "id": 398076038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698064706
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a>.</p>",
        "id": 398098004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698071383
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a>.</p>",
        "id": 398100697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698072170
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#pullrequestreview-1692769475\">PR review</a>.</p>",
        "id": 398101469,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698072392
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#discussion_r1368802353\">PR review comment</a>:</p>\n<blockquote>\n<p>No I struggled trying to make this readable, and I like what you have, so replacing!</p>\n</blockquote>",
        "id": 398101475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698072394
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a>.</p>",
        "id": 398101501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698072403
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#pullrequestreview-1692776982\">PR review</a>.</p>",
        "id": 398102024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698072557
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#discussion_r1368806743\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh nice, thanks! Ok so sounds like <code>fcsr</code> isn't something that needs to be preserved across a function call so it could be used here.</p>\n<p>To clarify though I wasn't thinking of using <code>fcsr</code> for rounding modes here but rather instead for overflow detection. Basically using the bits described by this in the spec:</p>\n<blockquote>\n<p>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software, as shown in Table 11.2. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</p>\n</blockquote>\n<p>In theory just before this float-to-int conversion it might be possible to set the <code>fcsr</code> exception flags to zero, perform the conversion, and then maybe trap if the exception flags are nonzero. I haven't found good docs yet as to how precisely the flags are set on the <code>fcvt.*</code> instructions so I was holding off on possibly trying this until the future. (and that LLVM doesn't seem to use this and I presume LLVM folks have thought more about perf than I have)</p>\n</blockquote>",
        "id": 398102025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698072557
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a>.</p>",
        "id": 398107860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698074186
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a>:</p>\n<blockquote>\n<p>This commit started out with the goal of deleting the <code>FcvtToInt</code> macro instruction by moving it into ISLE but it ended up having some surrounding refactors as well. The original goal is achieved and all float-to-int conversion now happens in ISLE. Additionally handling of the FRM (float rounding mode) state of each instruction is now explicit which means that Cranelift code emission now defaults to <code>FRM::RNE</code> (round-to-nearest ties-to-evens) rather than the runtime state in the <code>fcsr</code>. This was a theoretical bug with the previous code where if the register didn't have <code>RNE</code> in it then the code wouldn't perform correctly.</p>\n<p>Closes #6015</p>\n</blockquote>",
        "id": 398108160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698074269
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#pullrequestreview-1693455247\">PR review</a>.</p>",
        "id": 398149696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698092306
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327#discussion_r1369223093\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh yeah, that's a neat idea. I have no idea if that is better or worse than manually checking, but if we could get the same semantics, it would at least be a much shorter sequence. I'd like to benchmark that, but I only have an in-order core to test and I'm not sure if that would bias the results against larger machines.</p>\n</blockquote>",
        "id": 398149697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698092306
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7327\">PR #7327</a>.</p>",
        "id": 398157038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698095515
    }
]