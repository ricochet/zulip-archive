[
    {
        "content": "<p><a href=\"https://github.com/candymate\">candymate</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">Issue #8179</a>.</p>",
        "id": 427607321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710814212
    },
    {
        "content": "<p><a href=\"https://github.com/candymate\">candymate</a> added the fuzz-bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">Issue #8179</a>.</p>",
        "id": 427607322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710814212
    },
    {
        "content": "<p>candymate opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// main.rs</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">strategy</span><span class=\"p\">(</span><span class=\"n\">Strategy</span>::<span class=\"n\">Cranelift</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_opt_level</span><span class=\"p\">(</span><span class=\"n\">OptLevel</span>::<span class=\"nb\">None</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_nan_canonicalization</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// doesn't matter: both options show the same result</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#\"</span>\n<span class=\"s\">    (module</span>\n<span class=\"s\">        (type (;0;) (func (param f64) (result f32)))</span>\n<span class=\"s\">        (import \"mem\" \"mem\" (memory (;0;) 1))</span>\n<span class=\"s\">        (func (;0;) (type 0) (param f64) (result f32)</span>\n<span class=\"s\">          local.get 0</span>\n<span class=\"s\">          f64.const -0x1 ;; anything with negative sign</span>\n<span class=\"s\">          f64.copysign</span>\n<span class=\"s\">          f32.demote_f64)</span>\n<span class=\"s\">        (export \"main\" (func 0)))</span>\n<span class=\"s\">    \"#</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory_ty</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"`main` was not an exported function\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"n\">Val</span>::<span class=\"n\">F64</span><span class=\"p\">(</span><span class=\"mh\">0x7ff8000000000000</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// +nan (canonicalized)</span>\n<span class=\"w\">    </span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">F32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)];</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Opt level None: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>\n<span class=\"w\">    </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">package</span><span class=\"p\">]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasmtime-wrapper\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n#<span class=\"w\"> </span><span class=\"n\">See</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">keys</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">their</span><span class=\"w\"> </span><span class=\"n\">definitions</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">]</span>\n#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"18.0.3\"</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../wasmtime/crates/wasmtime\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">commit</span>: <span class=\"mi\">3</span><span class=\"n\">deaa8780bbef21648f2d9eebabcbae909c4a090</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">latest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Date</span>: <span class=\"nc\">Mon</span><span class=\"w\"> </span><span class=\"n\">Mar</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"mi\">18</span>:<span class=\"mi\">03</span>:<span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">0700</span><span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to reproduce</h3>\n<p>Compare the following executions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">s390x</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n<span class=\"o\">-----</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n</code></pre></div>\n<p>QEMU run options I'm currently using are the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_TEST_NO_HOG_MEMORY</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">wrapper</span>\n<span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">s390x</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">s390x</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">s390x</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_TEST_NO_HOG_MEMORY</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">s390x</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">wrapper</span>\n<span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"n\">rv64</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">vlen</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"n\">vext_spec</span><span class=\"o\">=</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">zba</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbc</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbkb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zcb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zicond</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_TEST_NO_HOG_MEMORY</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">wrapper</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>Results from all architecture should be the same value of +NaN or -NaN (with <code>cranelift_nan_canonicalization</code> option)</p>\n<h3>Actual Results</h3>\n<p>Execution results in a <strong>negative</strong> canonicalized NaN value, <code>0xffc00000</code> (regardless of <code>cranelift_nan_canonicalization</code> option)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Opt</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"nb\">None</span>: <span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">[</span><span class=\"n\">F32</span><span class=\"p\">(</span><span class=\"mi\">4290772992</span><span class=\"p\">)]</span>\n</code></pre></div>\n<p>However, RISC-V64 shows the result <code>0x7fc00000</code>, which is a <strong>positive</strong> canonicalized NaN value:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Opt</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"nb\">None</span>: <span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">[</span><span class=\"n\">F32</span><span class=\"p\">(</span><span class=\"mi\">2143289344</span><span class=\"p\">)]</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<ul>\n<li>wasmtime version<ul>\n<li>commit: 3deaa8780bbef21648f2d9eebabcbae909c4a090 (current latest, Date: Mon Mar 18 18:03:37 2024 -0700)</li>\n<li>However, also checked on v18.0.3</li>\n</ul>\n</li>\n<li>Operating system &amp; architecture: Ubuntu 22.04.3 LTS, Arch: x86_64</li>\n<li>QEMU version: all architectures (aarch64, s390x, riscv64) in <code>version 8.2.1 (v8.2.1)</code></li>\n</ul>\n<h3>Extra Info</h3>\n<ul>\n<li><strong>As both results are canonicalized versions of NaN (and conforms to spec), I think this might not be a bug - however, this is worth checking</strong></li>\n<li>Specification of <code>f64.copysign</code>: <a href=\"https://webassembly.github.io/spec/core/exec/numerics.html#xref-exec-numerics-op-fcopysign-mathrm-fcopysign-n-z-1-z-2\">https://webassembly.github.io/spec/core/exec/numerics.html#xref-exec-numerics-op-fcopysign-mathrm-fcopysign-n-z-1-z-2</a></li>\n<li><code>cranelift_nan_canonicalization</code> option doesn't change the result</li>\n<li>Uploading as public (not a security vuln.) since the bug only exhibits a semantic difference and I don't think this can cause a security impact. Also, this is related to <code>cranelift_nan_canonicalization</code> flag, which is <code>false</code> by default.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 427607325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710814213
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007493397\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<p>Thanks (as always!) @candymate!</p>\n<p>@sunfishcode I'm wondering if you've got some historical context around the nan canonicalization pass in Cranelift? (given the original implementation in <a href=\"https://github.com/bytecodealliance/cranelift/pull/322\">https://github.com/bytecodealliance/cranelift/pull/322</a> and issue in <a href=\"https://github.com/bytecodealliance/cranelift/issues/311\">https://github.com/bytecodealliance/cranelift/issues/311</a>, sorry for the blast from the past)</p>\n<p>We've got a small set of opcodes that receive the canonicalization sequence with the nan canonicalization pass but it seems that it's intentionally not a comprehensive set of opcodes which work with floats. Given this issue I'm wondering if <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8146\">https://github.com/bytecodealliance/wasmtime/pull/8146</a> was perhaps the wrong way to fix that issue? Or is the \"answer\" here to add the canonicalization sequence to all float-related operations?</p>\n<p>Put another way, it seems that <a href=\"https://github.com/bytecodealliance/cranelift/pull/322\">https://github.com/bytecodealliance/cranelift/pull/322</a> was built with the assumption that most platforms behaved the same way with respect to most float operations and NaN except for the ones that are listed in canonicalization. For example x64, aarch64, and s390x all do the same thing above where they faithfully copy the sign bit into a NaN payload. Does riscv64 violate the original assumptions of the nan canonicalization pass then? Given <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7322\">https://github.com/bytecodealliance/wasmtime/issues/7322</a> and my read of risc-v-the-spec I think that canonical NaNs always pop out, so it seems to me that we'll need the canonicalization sequence for all float operations instead of just a small set?</p>\n</blockquote>",
        "id": 427749993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710862090
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007497578\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<p>Or, alternatively you <a href=\"https://github.com/bytecodealliance/cranelift/issues/311\">mention</a></p>\n<blockquote>\n<p>For these purposes, fneg, fabs, and fcopysign are not considered to count as \"arithmetic\" instructions, because they're defined to just operate in terms of the sign bit and leave all other bits alone.</p>\n</blockquote>\n<p>So is the answer to consider the riscv backend buggy here and requiring a different codegen pattern for these instructions?</p>\n</blockquote>",
        "id": 427750511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710862203
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007525972\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<p>IEEE 754 defines abs, neg, and copysign to be \"Sign bit operations\" that only modify the sign bit. They're fully deterministic, so not only do we not need to canonicalize them; we shouldn't, because they're supposed to preserve arbitrary NaN payloads.<br>\n</p>\n</blockquote>",
        "id": 427753207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710862858
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007539932\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<p>It would be nice, sometime, to revise our NaN canonicalization pass to only canonicalize NaNs when floats cross an \"observability boundary\" rather than after each possibly-NaN-producing operation. So we would canonicalize when</p>\n<ul>\n<li>converting a float to an int</li>\n<li>storing a float to memory (wasm linear memory or the memory location of a wasm global definition)</li>\n<li>returning a float</li>\n</ul>\n<p>and I think that is it?</p>\n<p>Might be easier to exhaustively list these boundaries than it is to exhaustively list individual operations that can produce NaNs. Probably also results in better generated code too, since we are generally doing the minimum amount of work.</p>\n</blockquote>",
        "id": 427754608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710863219
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007572364\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<p>@fitzgen also passing a float (to an exported function), and <code>global.set</code> to an exported global. And yeah, we should do that; the only reason I didn't do that before is that, at the time, I was just looking to do the simplest possible thing that would work.</p>\n<p>@alexcrichton RISC-V has a copysign instruction and it looks like cranelift uses it. My guess here is that something's going on with demote. Could this be the same issue as <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7322\">https://github.com/bytecodealliance/wasmtime/issues/7322</a>?</p>\n</blockquote>",
        "id": 427758112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710864083
    },
    {
        "content": "<p>sunfishcode edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007572364\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<p>@fitzgen also passing a float (to an exported function), and <code>global.set</code> to an exported global. And yeah, we should do that; the only reason I didn't do that before is that, at the time, I was just looking to do the simplest possible thing that would work.</p>\n<p>@alexcrichton RISC-V has a copysign instruction and it looks like cranelift uses it. My guess here is that something's going on with demote. Could this be the same issue as <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8145\">https://github.com/bytecodealliance/wasmtime/issues/8145</a>?</p>\n<p>Edit: copy and past the right issue number</p>\n</blockquote>",
        "id": 427760013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710864547
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007539932\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<p>It would be nice, sometime, to revise our NaN canonicalization pass to only canonicalize NaNs when floats cross an \"observability boundary\" rather than after each possibly-NaN-producing operation. So we would canonicalize when</p>\n<ul>\n<li>converting a float to an int</li>\n<li>storing a float to memory (wasm linear memory or the memory location of an (imported or exported) wasm global definition)</li>\n<li>returning a float</li>\n<li>passing a float as an argument</li>\n</ul>\n<p>and I think that is it?</p>\n<p>Might be easier to exhaustively list these boundaries than it is to exhaustively list individual operations that can produce NaNs. Probably also results in better generated code too, since we are generally doing the minimum amount of work.</p>\n</blockquote>",
        "id": 427761988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710865055
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007615867\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<p>@fitzgen Also several things involving <code>v128</code>, because it doesn't statically distinguish between float and int.<br>\n</p>\n</blockquote>",
        "id": 427762847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710865297
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007647122\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<p>Ah, that's annoying, because now we are back to enumerating individual ops :-/</p>\n</blockquote>",
        "id": 427766295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710866209
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179#issuecomment-2007955636\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<blockquote>\n<p>My guess here is that something's going on with demote</p>\n</blockquote>\n<p>I think you're right yeah, I opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8182\">https://github.com/bytecodealliance/wasmtime/pull/8182</a> which adds canonicalization for promote/demote since I think that's the source of the nondeterminism here.</p>\n</blockquote>",
        "id": 427796455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710876221
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8179\">issue #8179</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// main.rs</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">strategy</span><span class=\"p\">(</span><span class=\"n\">Strategy</span>::<span class=\"n\">Cranelift</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_opt_level</span><span class=\"p\">(</span><span class=\"n\">OptLevel</span>::<span class=\"nb\">None</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_nan_canonicalization</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// doesn't matter: both options show the same result</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#\"</span>\n<span class=\"s\">    (module</span>\n<span class=\"s\">        (type (;0;) (func (param f64) (result f32)))</span>\n<span class=\"s\">        (import \"mem\" \"mem\" (memory (;0;) 1))</span>\n<span class=\"s\">        (func (;0;) (type 0) (param f64) (result f32)</span>\n<span class=\"s\">          local.get 0</span>\n<span class=\"s\">          f64.const -0x1 ;; anything with negative sign</span>\n<span class=\"s\">          f64.copysign</span>\n<span class=\"s\">          f32.demote_f64)</span>\n<span class=\"s\">        (export \"main\" (func 0)))</span>\n<span class=\"s\">    \"#</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory_ty</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"`main` was not an exported function\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"n\">Val</span>::<span class=\"n\">F64</span><span class=\"p\">(</span><span class=\"mh\">0x7ff8000000000000</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// +nan (canonicalized)</span>\n<span class=\"w\">    </span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">F32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)];</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Opt level None: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>\n<span class=\"w\">    </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">package</span><span class=\"p\">]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasmtime-wrapper\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n#<span class=\"w\"> </span><span class=\"n\">See</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">keys</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">their</span><span class=\"w\"> </span><span class=\"n\">definitions</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">]</span>\n#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"18.0.3\"</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../wasmtime/crates/wasmtime\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">commit</span>: <span class=\"mi\">3</span><span class=\"n\">deaa8780bbef21648f2d9eebabcbae909c4a090</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">latest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Date</span>: <span class=\"nc\">Mon</span><span class=\"w\"> </span><span class=\"n\">Mar</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"mi\">18</span>:<span class=\"mi\">03</span>:<span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">0700</span><span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to reproduce</h3>\n<p>Compare the following executions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">s390x</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n<span class=\"o\">-----</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n</code></pre></div>\n<p>QEMU run options I'm currently using are the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_TEST_NO_HOG_MEMORY</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">wrapper</span>\n<span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">s390x</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">s390x</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">s390x</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_TEST_NO_HOG_MEMORY</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">s390x</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">wrapper</span>\n<span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"n\">rv64</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">vlen</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"n\">vext_spec</span><span class=\"o\">=</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">zba</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbc</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbkb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zcb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zicond</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_TEST_NO_HOG_MEMORY</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">wrapper</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>Results from all architecture should be the same value of +NaN or -NaN (with <code>cranelift_nan_canonicalization</code> option)</p>\n<h3>Actual Results</h3>\n<p>Execution results in a <strong>negative</strong> canonicalized NaN value, <code>0xffc00000</code> (regardless of <code>cranelift_nan_canonicalization</code> option)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Opt</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"nb\">None</span>: <span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">[</span><span class=\"n\">F32</span><span class=\"p\">(</span><span class=\"mi\">4290772992</span><span class=\"p\">)]</span>\n</code></pre></div>\n<p>However, RISC-V64 shows the result <code>0x7fc00000</code>, which is a <strong>positive</strong> canonicalized NaN value:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Opt</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"nb\">None</span>: <span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">[</span><span class=\"n\">F32</span><span class=\"p\">(</span><span class=\"mi\">2143289344</span><span class=\"p\">)]</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<ul>\n<li>wasmtime version<ul>\n<li>commit: 3deaa8780bbef21648f2d9eebabcbae909c4a090 (current latest, Date: Mon Mar 18 18:03:37 2024 -0700)</li>\n<li>However, also checked on v18.0.3</li>\n</ul>\n</li>\n<li>Operating system &amp; architecture: Ubuntu 22.04.3 LTS, Arch: x86_64</li>\n<li>QEMU version: all architectures (aarch64, s390x, riscv64) in <code>version 8.2.1 (v8.2.1)</code></li>\n</ul>\n<h3>Extra Info</h3>\n<ul>\n<li><strong>As both results are canonicalized versions of NaN (and conforms to spec), I think this might not be a bug - however, this is worth checking</strong></li>\n<li>Specification of <code>f64.copysign</code>: <a href=\"https://webassembly.github.io/spec/core/exec/numerics.html#xref-exec-numerics-op-fcopysign-mathrm-fcopysign-n-z-1-z-2\">https://webassembly.github.io/spec/core/exec/numerics.html#xref-exec-numerics-op-fcopysign-mathrm-fcopysign-n-z-1-z-2</a></li>\n<li><code>cranelift_nan_canonicalization</code> option doesn't change the result</li>\n<li>Uploading as public (not a security vuln.) since the bug only exhibits a semantic difference and I don't think this can cause a security impact. Also, this is related to <code>cranelift_nan_canonicalization</code> flag, which is <code>false</code> by default.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 427946150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710946244
    }
]