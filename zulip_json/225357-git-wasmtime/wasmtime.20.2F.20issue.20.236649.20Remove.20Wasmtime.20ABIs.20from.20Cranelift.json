[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649#issuecomment-1609915963\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649\">issue #6649</a>:</p>\n<blockquote>\n<p>cc @uweigand if you're up for it I could use some help on the s390x-side of things. I believe that the Wasmtime ABI was load-bearing in a way not related to multi-value on the s390x backend to handle lane order of vector types, meaning that I think as-is this an't land since it'll fail tests on s390x. I was wondering if you had thoughts or ideas about how to go about fixing this? In my mind the fix would look something along the lines of:</p>\n<ul>\n<li>Somehow get all wasm funtions to think they're using little-endian lane ordering. Previously this was done with the <code>Wasmtime*</code> family of calling conventions but I'd ideally like to remove this Wasmtime \"brand\" from Cranelift to avoid all backends having to deal with it.</li>\n<li>Converting between big and little-endian lane orders in the various trampolines as necessary. This may not actually be required since v128 is never passed in registers via <code>TypedFunc</code> (haven't gotten around to implementing that in Wasmtime), so this point may already be \"solved\". In the future though I think it'd be fine to \"just\" generate more code in trampolines.</li>\n</ul>\n<p>So I guess the question boils down to: should an ABI be added for s390x to specify that the lane order of vectors is little-endian? Or are there other options you can think of to solve this?</p>\n</blockquote>",
        "id": 370142531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687885668
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649#issuecomment-1609936227\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649\">issue #6649</a>:</p>\n<blockquote>\n<p>I think this will be easier once we switch all internal Wasm functions to using the <code>tail</code> calling convention, and then the <code>tail</code> calling convention can specify a little-endian lane ordering.</p>\n</blockquote>",
        "id": 370147231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687886599
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649#issuecomment-1609915963\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649\">issue #6649</a>:</p>\n<blockquote>\n<p>cc @uweigand if you're up for it I could use some help on the s390x-side of things. I believe that the Wasmtime ABI was load-bearing in a way not related to multi-value on the s390x backend to handle lane order of vector types, meaning that I think as-is this can't land since it'll fail tests on s390x. I was wondering if you had thoughts or ideas about how to go about fixing this? In my mind the fix would look something along the lines of:</p>\n<ul>\n<li>Somehow get all wasm funtions to think they're using little-endian lane ordering. Previously this was done with the <code>Wasmtime*</code> family of calling conventions but I'd ideally like to remove this Wasmtime \"brand\" from Cranelift to avoid all backends having to deal with it.</li>\n<li>Converting between big and little-endian lane orders in the various trampolines as necessary. This may not actually be required since v128 is never passed in registers via <code>TypedFunc</code> (haven't gotten around to implementing that in Wasmtime), so this point may already be \"solved\". In the future though I think it'd be fine to \"just\" generate more code in trampolines.</li>\n</ul>\n<p>So I guess the question boils down to: should an ABI be added for s390x to specify that the lane order of vectors is little-endian? Or are there other options you can think of to solve this?</p>\n</blockquote>",
        "id": 370163747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687889867
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649#issuecomment-1610021139\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649\">issue #6649</a>:</p>\n<blockquote>\n<p>Yeah the more I think about this the more I realize it's probably best to leave things as-is and tied to the calling convention for now. I think it'd be good nonetheless to get stuff in ahead of time before <code>tail</code> if possible so I've left <code>WasmtimeSystemV</code> for now for s390x but left all the other changes so multi-return is not different in the calling convention and instead multi-return is handled differently in the native ABI.</p>\n</blockquote>",
        "id": 370166955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687890565
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649#issuecomment-1610102270\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649\">issue #6649</a>:</p>\n<blockquote>\n<p>Hurray looks like tests are green on s390x! I think this is good to go and we can tackle how to avoid having a specific ABI for s390x, if at all, in the future.</p>\n</blockquote>",
        "id": 370184142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687894369
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649#issuecomment-1610262025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649\">issue #6649</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 370213266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687902300
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649#issuecomment-1611836073\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6649\">issue #6649</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 370520973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687974282
    }
]