[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[ ] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true)</li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n</ul>\n</blockquote>",
        "id": 194337942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587057409
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[ ] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true)</li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n</ul>\n</blockquote>",
        "id": 194337943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587057409
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[ ] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true)</li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n</ul>\n</blockquote>",
        "id": 194337944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587057409
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-614783402\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-614783402\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 194337973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587057423
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[ ] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true)</li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[ ] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf)</li>\n<li>[ ] saturating conversions must return 0 for NaN</li>\n<li>[ ] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount)</li>\n<li>[ ] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated)</li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n</ul>\n</blockquote>",
        "id": 194445342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587132588
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[ ] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf)</li>\n<li>[ ] saturating conversions must return 0 for NaN</li>\n<li>[ ] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount)</li>\n<li>[ ] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated)</li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n</ul>\n</blockquote>",
        "id": 194470937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587143125
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[ ] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf)</li>\n<li>[ ] saturating conversions must return 0 for NaN</li>\n<li>[ ] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount)</li>\n<li>[ ] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated)</li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n</ul>\n</blockquote>",
        "id": 194515884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587169266
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[ ] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf)</li>\n<li>[ ] saturating conversions must return 0 for NaN</li>\n<li>[ ] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount)</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated)</li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n</ul>\n</blockquote>",
        "id": 194803033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587476588
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[ ] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf)</li>\n<li>[ ] saturating conversions must return 0 for NaN</li>\n<li>[ ] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount)</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated)</li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[ ] popcnt is still incorrect for i32, see also #1537</li>\n</ul>\n</blockquote>",
        "id": 194810709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587479793
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[ ] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf)</li>\n<li>[ ] saturating conversions must return 0 for NaN</li>\n<li>[ ] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount)</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[ ] popcnt is still incorrect for i32, see also #1537</li>\n</ul>\n</blockquote>",
        "id": 194810772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587479820
    },
    {
        "content": "<p>jgouly <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-617834720\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-617834720\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>I'm working on a patch for the DIV by 0 and overflow issue.</p>\n</blockquote>",
        "id": 194944571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587567801
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-617837119\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-617837119\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>I'll take care of float-to-int conversions edge cases.</p>\n</blockquote>",
        "id": 194945087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587568047
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[x] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></li>\n<li>[ ] saturating conversions must return 0 for NaN</li>\n<li>[ ] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount)</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[ ] popcnt is still incorrect for i32, see also #1537</li>\n</ul>\n</blockquote>",
        "id": 194962879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587575687
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-617837119\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-617837119\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>I'll take care of float-to-int conversions edge cases. edit: done in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></p>\n</blockquote>",
        "id": 194962901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587575700
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-617917399\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-617917399\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>I can take the <code>trapif</code> / <code>ifcmp</code> issue -- it's sort of a gnarly corner of isel. Also happy to fix <code>rotate_left</code> and the saturating conversions.</p>\n</blockquote>",
        "id": 194964009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587576161
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-618318063\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-618318063\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>I'm now looking at rotations. There are a few tricks we can steal from Spidermonkey's implementation...</p>\n</blockquote>",
        "id": 195041553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587637288
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-618318063\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-618318063\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>I'm now looking at rotations. There are a few tricks we can steal from Spidermonkey's implementation... done =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1584\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1584\">https://github.com/bytecodealliance/wasmtime/pull/1584</a></p>\n</blockquote>",
        "id": 195046084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587640635
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[x] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></li>\n<li>[ ] saturating conversions must return 0 for NaN</li>\n<li>[x] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount)</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[ ] popcnt is still incorrect for i32, see also #1537</li>\n</ul>\n</blockquote>",
        "id": 195046097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587640641
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[x] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></li>\n<li>[ ] saturating conversions must return 0 for NaN</li>\n<li>[x] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount) =&gt; #1584</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[ ] popcnt is still incorrect for i32, see also #1537</li>\n</ul>\n</blockquote>",
        "id": 195046106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587640649
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-618402729\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-618402729\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Re <code>trapif</code>, investigation shows that a heap with explicit bounds checks will generate <code>ifadd_cout</code> to compute base+offset, then check for overflow with <code>trapif</code> if the carry flag is set. I'm happy to let others figure the right fix for this (this would require implementing <code>ifadd_cout</code> too, or lowering heap accesses with explicit bounds checks to something entirely different). Here's a test case extracted from Spidermonkey test suite.</p>\n<p>&lt;details&gt;<br>\nfunction u0:0(i32, i64 vmctx) baldrdash_system_v {<br>\n    gv0 = vmctx<br>\n    gv1 = load.i64 notrap aligned gv0<br>\n    gv2 = load.i32 notrap aligned gv0+8<br>\n    heap0 = dynamic gv1, min 0x0001_0000, bound gv2, offset_guard 0xfff8, index_type i32</p>\n<div class=\"codehilite\"><pre><span></span>                            block0(v0: i32, v1: i64):\n</pre></div>\n\n\n<p>@0025                               v4 = load.i32 notrap aligned v1+8<br>\n@0025                               v5 = iconst.i32 0x7fff_ffe1<br>\n@0025                               v6, v7 = iadd_ifcout v0, v5<br>\n@0025                               trapif ult v7, heap_oob<br>\n@0025                               v8 = icmp ugt v6, v4<br>\n@0025                               brz v8, block3<br>\n@0025                               jump block2</p>\n<div class=\"codehilite\"><pre><span></span>                            block2:\n</pre></div>\n\n\n<p>@0025                               trap heap_oob</p>\n<div class=\"codehilite\"><pre><span></span>                            block3:\n</pre></div>\n\n\n<p>@0025                               v9 = uextend.i64 v0<br>\n@0025                               v10 = get_pinned_reg.i64 <br>\n@0025                               v2 = iadd v10, v9<br>\n@0025                               v3 = sload8.i32 v2+0x7fff_ffff<br>\n@002d                               jump block1</p>\n<div class=\"codehilite\"><pre><span></span>                            block1:\n</pre></div>\n\n\n<p>@002d                               fallthrough_return<br>\n}<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 195064282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587650302
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[x] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></li>\n<li>[ ] (verify?) saturating conversions must return 0 for NaN</li>\n<li>[x] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount) =&gt; #1584</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[ ] (verify?) popcnt is still incorrect for i32, see also #1537</li>\n</ul>\n</blockquote>",
        "id": 195064359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587650336
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[ ] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true.</li>\n<li>[ ] ditto for modulo</li>\n<li>[x] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></li>\n<li>[ ] (verify?) saturating conversions must return 0 for NaN</li>\n<li>[x] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount) =&gt; #1584</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[ ] (verify?) popcnt is still incorrect for i32, see also #1537</li>\n</ul>\n</blockquote>",
        "id": 195064361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587650337
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[x] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true. =&gt; #1585</li>\n<li>[x] ditto for modulo =&gt; #1585</li>\n<li>[x] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></li>\n<li>~~~[ ] (verify?) saturating conversions must return 0 for NaN~~~</li>\n<li>[x] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount) =&gt; #1584</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>~~~[ ] (verify?) popcnt is still incorrect for i32, see also #1537~~~</li>\n</ul>\n</blockquote>",
        "id": 195072916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587653684
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[x] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true. =&gt; #1585</li>\n<li>[x] ditto for modulo =&gt; #1585</li>\n<li>[x] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></li>\n<li>[x] <del>(verify?) saturating conversions must return 0 for NaN</del></li>\n<li>[x] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount) =&gt; #1584</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[x] <del>(verify?) popcnt is still incorrect for i32, see also #1537</del></li>\n</ul>\n</blockquote>",
        "id": 195072979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587653711
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-618402729\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-618402729\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Re <code>trapif</code>, investigation shows that a heap with explicit bounds checks will generate <code>ifadd_cout</code> to compute base+offset, then check for overflow with <code>trapif</code> if the carry flag is set. I'm happy to let others figure the right fix for this (this would require implementing <code>ifadd_cout</code> too, or lowering heap accesses with explicit bounds checks to something entirely different). Here's a test case extracted from Spidermonkey test suite.</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\"><pre><span></span>function u0:0(i32, i64 vmctx) baldrdash_system_v {\n    gv0 = vmctx\n    gv1 = load.i64 notrap aligned gv0\n    gv2 = load.i32 notrap aligned gv0+8\n    heap0 = dynamic gv1, min 0x0001_0000, bound gv2, offset_guard 0xfff8, index_type i32\n\n                                block0(v0: i32, v1: i64):\n@0025                               v4 = load.i32 notrap aligned v1+8\n@0025                               v5 = iconst.i32 0x7fff_ffe1\n@0025                               v6, v7 = iadd_ifcout v0, v5\n@0025                               trapif ult v7, heap_oob\n@0025                               v8 = icmp ugt v6, v4\n@0025                               brz v8, block3\n@0025                               jump block2\n\n                                block2:\n@0025                               trap heap_oob\n\n                                block3:\n@0025                               v9 = uextend.i64 v0\n@0025                               v10 = get_pinned_reg.i64\n@0025                               v2 = iadd v10, v9\n@0025                               v3 = sload8.i32 v2+0x7fff_ffff\n@002d                               jump block1\n\n                                block1:\n@002d                               fallthrough_return\n}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 195073061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587653737
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[x] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true. =&gt; #1585</li>\n<li>[x] ditto for modulo =&gt; #1585</li>\n<li>[x] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></li>\n<li>[x] <del>(verify?) saturating conversions must return 0 for NaN</del></li>\n<li>[x] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount) =&gt; #1584</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[x] <del>(verify?) popcnt is still incorrect for i32, see also #1537</del></li>\n<li>[x] lowering of stack store for call arguments is incorrect for large SP offsets =&gt; #1586</li>\n</ul>\n</blockquote>",
        "id": 195095316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587663557
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-620576383\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519#issuecomment-620576383\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Confirmed that as of last Friday, Spidermonkey can run all the main tests, and only have the two remaining issues. I'll open up follow-up issues instead for both remaining items, because reftypes require a bunch of work in regalloc too, and heaps with explicit bounds checks is lower priority on arm64.</p>\n<p>RESOLVED FIXED \\o/</p>\n</blockquote>",
        "id": 195556079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588077162
    },
    {
        "content": "<p>bnjbvr closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1519\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1519\">Issue #1519</a>:</p>\n<blockquote>\n<p>Trying to keep track of all the remaining correctness issues in the new arm64 backend, found when running Spidermonkey test cases. I'll update this list as I find and understand more issues.</p>\n<p>cc @julian-seward1 @cfallin </p>\n<ul>\n<li>[ ] <code>anyref</code> / reftypes integration. This is a large item that will require additional support in <a href=\"http://regalloc.rs\" title=\"http://regalloc.rs\">regalloc.rs</a> too.</li>\n<li>[x] unpatched code locations should respect the <code>emit_all_ones_funcaddrs</code> setting (by putting all ones in unpatched code locations when this setting is set to true) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1538\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1538\">https://github.com/bytecodealliance/wasmtime/pull/1538</a></li>\n<li>[x] integer SDiv/UDiv must be legalized to a sequence that checks if the divisor is 0 (or if we're dividing INT_MIN by -1), when the <code>avoid_div_traps</code> setting is set to true. =&gt; #1585</li>\n<li>[x] ditto for modulo =&gt; #1585</li>\n<li>[x] float-to-int conversion must raise errors in some cases (out of bounds, NaN, inf) =&gt; <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1578\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1578\">https://github.com/bytecodealliance/wasmtime/pull/1578</a></li>\n<li>[x] <del>(verify?) saturating conversions must return 0 for NaN</del></li>\n<li>[x] rotate_left by an amount larger than the integer's size is allowed (apply modulo on rotation amount) =&gt; #1584</li>\n<li>[x] there's something wrong when passing many FP/int registers on the stack (might be on the Spidermonkey side; to be investigated) =&gt; #1564 </li>\n<li>[ ] trapif (as legalized from trapnz) may not take its input from an ifcmp, it seems</li>\n<li>[x] <del>(verify?) popcnt is still incorrect for i32, see also #1537</del></li>\n<li>[x] lowering of stack store for call arguments is incorrect for large SP offsets =&gt; #1586</li>\n</ul>\n</blockquote>",
        "id": 195556081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588077163
    }
]