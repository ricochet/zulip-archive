[
    {
        "content": "<p>silence-coding opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3356\">issue #3356</a>:</p>\n<blockquote>\n<p>How to import a function like log_str that can pass complex structures</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// # fn main() -&gt; anyhow::Result&lt;()&gt; {</span>\n<span class=\"w\">    </span><span class=\"sd\">/// # let engine = Engine::default();</span>\n<span class=\"w\">    </span><span class=\"sd\">/// let mut linker = Linker::new(&amp;engine);</span>\n<span class=\"w\">    </span><span class=\"sd\">/// linker.func_wrap(\"host\", \"double\", |x: i32| x * 2)?;</span>\n<span class=\"w\">    </span><span class=\"sd\">/// linker.func_wrap(\"host\", \"log_i32\", |x: i32| println!(\"{}\", x))?;</span>\n<span class=\"w\">    </span><span class=\"sd\">/// linker.func_wrap(\"host\", \"log_str\", |caller: Caller&lt;'_, ()&gt;, ptr: i32, len: i32| {</span>\n<span class=\"w\">    </span><span class=\"sd\">///     // ...</span>\n<span class=\"w\">    </span><span class=\"sd\">/// })?;</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 253560413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631788857
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3356#issuecomment-920792548\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3356\">issue #3356</a>:</p>\n<blockquote>\n<p>Wasm only allows i32, i64, f32 and f64 as parameter types. It doesn't support structs or anything like that. Instead more complex types need to be stored in the linear memory of the wasm module. You can use <a href=\"https://github.com/bytecodealliance/witx-bindgen\">witx-bindgen</a> to help generate bindings on both the host and guest side that handle this for you.</p>\n</blockquote>",
        "id": 253561354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631789362
    },
    {
        "content": "<p>silence-coding <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3356#issuecomment-920853377\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3356\">issue #3356</a>:</p>\n<blockquote>\n<p>@bjorn3 Thank you very much. It's very useful.</p>\n</blockquote>",
        "id": 253571991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631794888
    },
    {
        "content": "<p>silence-coding closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3356\">issue #3356</a>:</p>\n<blockquote>\n<p>How to import a function like log_str that can pass complex structures</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// # fn main() -&gt; anyhow::Result&lt;()&gt; {</span>\n<span class=\"w\">    </span><span class=\"sd\">/// # let engine = Engine::default();</span>\n<span class=\"w\">    </span><span class=\"sd\">/// let mut linker = Linker::new(&amp;engine);</span>\n<span class=\"w\">    </span><span class=\"sd\">/// linker.func_wrap(\"host\", \"double\", |x: i32| x * 2)?;</span>\n<span class=\"w\">    </span><span class=\"sd\">/// linker.func_wrap(\"host\", \"log_i32\", |x: i32| println!(\"{}\", x))?;</span>\n<span class=\"w\">    </span><span class=\"sd\">/// linker.func_wrap(\"host\", \"log_str\", |caller: Caller&lt;'_, ()&gt;, ptr: i32, len: i32| {</span>\n<span class=\"w\">    </span><span class=\"sd\">///     // ...</span>\n<span class=\"w\">    </span><span class=\"sd\">/// })?;</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 253571997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631794890
    }
]