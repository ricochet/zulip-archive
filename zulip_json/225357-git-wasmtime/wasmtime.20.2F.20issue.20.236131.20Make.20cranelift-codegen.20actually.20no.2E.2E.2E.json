[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6131#issuecomment-1492864616\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6131\">issue #6131</a>:</p>\n<blockquote>\n<p>@ondra05 thank you for the PR! Unfortunately, we currently <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/stability-platform-support.md#what-about-no_std\">have a policy</a> on <code>no_std</code> (that's for Wasmtime but Cranelift aligns with this for now too). The basic argument that has been raised is that while a one-off \"fix <code>no_std</code>\" PR may or may not be that bad, the ongoing cost in (i) CI time, (ii) small papercuts for new contributors is maybe not worth the benefit of additional use-cases.</p>\n<p>That said, at least part of that policy is more applicable to Wasmtime than Cranelift (specifically the dependence on OS primitives -- a compiler needs far fewer) and IMHO at least, we shouldn't be too dogmatic with policy when the stakes are fairly low (as here), and given that Cranelift once did support this. If you want to drive this forward, one thing you could do is attend our <a href=\"https://github.com/bytecodealliance/meetings/tree/main/cranelift\">Cranelift weekly meeting</a> and raise the topic, and we can see how others feel. A data point to answer \"how much CI time does a <code>cargo check</code> for <code>no_std</code> on <code>cranelift-codegen</code> add\" would be useful too, if you want to make the argument, as would be examples of use-cases (we might consider additional use-cases a good reason to do something if they bring users and grow the community of potential contributors more than the required features add in support cost).</p>\n</blockquote>",
        "id": 346123146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680334604
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6131#issuecomment-1494581504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6131\">issue #6131</a>:</p>\n<blockquote>\n<p>To say what Chris said another way: Please tell us why you want no_std support in Cranelift, because that will help us understand what we should be doing to help. (And also because we're always curious about how people are using Cranelift!)</p>\n<p>I think the fact that the remaining issues are all in our pass-timing module is significant. That's obviously not necessary for using Cranelift. (It's also probably pretty useless in a no_std environment.) And I think a no-op implementation shouldn't be too invasive. So I think a Cargo feature for enabling pass-timing would be a reasonable change, even if we didn't want to support no_std. I would ask for that as a separate PR though so we can review it without thinking about other no_std changes at the same time.</p>\n</blockquote>",
        "id": 346612512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680537451
    },
    {
        "content": "<p>coffeebe4code <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6131#issuecomment-1558275894\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6131\">issue #6131</a>:</p>\n<blockquote>\n<p>Does having the core implementations impact the final size of cranelift? If smaller, that could be a benefit. Another benefit is if someone were working on an OS that was custom built, they might use no_std.</p>\n</blockquote>",
        "id": 360400937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684802329
    }
]