[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a> from <code>jameysharp:table-lazy-init</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Lazy initialization of tables has trade-offs that we haven't explored in a while. Making it configurable makes it easier to test the effects of these trade-offs on a variety of WebAssembly programs, and allows embedders to decide whether the trade-offs are worth-while for their use cases.</p>\n<p>TODO:</p>\n<ul>\n<li>[ ] Finish documentation comments</li>\n<li>[ ] Either implement support in Winch, or force lazy-init on for Winch</li>\n<li>[ ] Extend the test suite</li>\n</ul>\n<p>I've tested this by temporarily setting the flag to disable lazy-init by default and verifying that the test suite still passes, except for a bunch of Winch tests (as expected), as well as the amusing case of <code>code_too_large::code_too_large_without_panic</code>, which fails because disabling lazy-init deletes enough code that the code is no longer too large.</p>\n<p>With lazy-init disabled, the <code>disas</code> tests show that this shaves off six or seven CLIF instructions and a cold block per <code>call_indirect</code> or <code>table_get</code>. The <code>typed-funcrefs.wat</code> test becomes branch-free, with two loads and an indirect call per <code>call_indirect</code>, making it equivalent to the version that uses globals instead of tables.</p>\n<p>cc: @cfallin</p>\n</blockquote>",
        "id": 436787807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714689571
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#issuecomment-2091914595\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:config\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 436793539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714693466
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#issuecomment-2091914697\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 436793548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714693478
    },
    {
        "content": "<p>jameysharp edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<p>Lazy initialization of tables has trade-offs that we haven't explored in a while. Making it configurable makes it easier to test the effects of these trade-offs on a variety of WebAssembly programs, and allows embedders to decide whether the trade-offs are worth-while for their use cases.</p>\n<p>TODO:</p>\n<ul>\n<li>[ ] Finish documentation comments</li>\n<li>[ ] Either implement support in Winch, or force lazy-init on for Winch</li>\n<li>[ ] Extend the test suite</li>\n</ul>\n<p>I've tested this by temporarily setting the flag to disable lazy-init by default (in <code>crates/environ/src/tunables.rs</code>) and verifying that the test suite still passes, except for a bunch of Winch tests (as expected), as well as the amusing case of <code>code_too_large::code_too_large_without_panic</code>, which fails because disabling lazy-init deletes enough code that the code is no longer too large.</p>\n<p>With lazy-init disabled, the <code>disas</code> tests show that this shaves off six or seven CLIF instructions and a cold block per <code>call_indirect</code> or <code>table_get</code>. The <code>typed-funcrefs.wat</code> test becomes branch-free, with two loads and an indirect call per <code>call_indirect</code>, making it equivalent to the version that uses globals instead of tables.</p>\n<p>cc: @cfallin</p>\n</blockquote>",
        "id": 436801100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714698809
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#pullrequestreview-2038839877\">PR review</a>:</p>\n<blockquote>\n<p>I like the idea of adding this, good idea!</p>\n<p>Some other bits I might recommend:</p>\n<ul>\n<li>Mind adding a CLI flag under <code>-O</code> for this as well?</li>\n<li>For testing it might also be good enough to \"just\" hook this up to fuzzing</li>\n<li>Want to add a <code>disas</code> test or two with this flag?</li>\n</ul>\n</blockquote>",
        "id": 436943106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714763179
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#discussion_r1589630611\">PR review comment</a>:</p>\n<blockquote>\n<p>What do you think about perhaps returning <code>enum Funcrefs&lt;'a&gt; { Tagged(&amp;'a [TaggedFuncRef]), Untagged(&amp;'a [*mut VMFuncRef]) }</code> here? That feels a bit more \"type safe\" if a bit wordier and reflects how this is a boolean decision at runtime as well</p>\n</blockquote>",
        "id": 436943107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714763179
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#pullrequestreview-2038839877\">PR review</a>:</p>\n<blockquote>\n<p>I like the idea of adding this, good idea!</p>\n<p>Some other bits I might recommend:</p>\n<ul>\n<li>Mind adding a CLI flag under <code>-O</code> for this as well?</li>\n<li>For testing it might also be good enough to \"just\" hook this up to fuzzing</li>\n<li>Want to add a <code>disas</code> test or two with this flag?</li>\n</ul>\n</blockquote>",
        "id": 436943108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714763179
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#discussion_r1589631339\">PR review comment</a>:</p>\n<blockquote>\n<p>If this remains (which I think is fine) mind adding a check in <code>Config::validate</code> that returns an error if winch is enabled but lazy init is disabled?</p>\n</blockquote>",
        "id": 436943109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714763179
    },
    {
        "content": "<p>jameysharp edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<p>Lazy initialization of tables has trade-offs that we haven't explored in a while. Making it configurable makes it easier to test the effects of these trade-offs on a variety of WebAssembly programs, and allows embedders to decide whether the trade-offs are worth-while for their use cases.</p>\n<p>TODO:</p>\n<ul>\n<li>[ ] Finish documentation comments</li>\n<li>[ ] Add CLI flag in the <code>-O</code> group</li>\n<li>[ ] Either implement support in Winch, or check in <code>Config::validate</code> that when Winch is enabled so is lazy-init</li>\n<li>[ ] Add <code>disas</code> tests with lazy init disabled</li>\n<li>[ ] Hook up this flag in fuzzing</li>\n</ul>\n<p>I've tested this by temporarily setting the flag to disable lazy-init by default (in <code>crates/environ/src/tunables.rs</code>) and verifying that the test suite still passes, except for a bunch of Winch tests (as expected), as well as the amusing case of <code>code_too_large::code_too_large_without_panic</code>, which fails because disabling lazy-init deletes enough code that the code is no longer too large.</p>\n<p>With lazy-init disabled, the <code>disas</code> tests show that this shaves off six or seven CLIF instructions and a cold block per <code>call_indirect</code> or <code>table_get</code>. The <code>typed-funcrefs.wat</code> test becomes branch-free, with two loads and an indirect call per <code>call_indirect</code>, making it equivalent to the version that uses globals instead of tables.</p>\n<p>cc: @cfallin</p>\n</blockquote>",
        "id": 436954788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714768382
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#pullrequestreview-2039111946\">PR review</a>.</p>",
        "id": 436972062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714777656
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#discussion_r1589797184\">PR review comment</a>:</p>\n<blockquote>\n<p>I like this idea, but while testing it out, I found so many more things I want to change about how the lazy-tagging invariants are maintained in these modules that I don't think I want to change any of them in this PR. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> A few:</p>\n<ul>\n<li>Getting a table reference should return enough information that the caller can initialize any elements it needs to, instead of passing in a range of indexes to init.</li>\n<li><code>Table::get</code> and table copies should take <code>&amp;mut src</code> and init the elements they need in-place; the caller always has a mutable pointer.</li>\n<li>Therefore, there's no need for <code>funcrefs()</code>, only <code>funcrefs_mut()</code>.</li>\n<li><code>StaticFuncTable</code> should maybe put the current size in the <code>data</code> slice and the capacity in a separate field; it's currently the other way around.</li>\n<li><code>funcrefs_mut()</code> is shorter and easier to reason about if it first gets <code>elements.as_mut_slice()</code>/<code>unsafe { data.as_mut() }</code> depending on whether the table is static or dynamic, and then afterwards does the unsafe <code>slice::from_raw_parts_mut</code>. I mixed up <code>*mut [T]</code> with <code>*mut [*mut [T]]</code> at one point and was afraid the <code>.cast()</code> would just silently \"fix\" it for me</li>\n<li>I'm imagining something resembling <code>MaybeUninit</code> as an interface for tracking at the type level whether it's okay to read a range of the table</li>\n</ul>\n</blockquote>",
        "id": 436972063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714777656
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#pullrequestreview-2041525832\">PR review</a>.</p>",
        "id": 437325040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715023856
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#discussion_r1591464437\">PR review comment</a>:</p>\n<blockquote>\n<p>That all sounds great to me yeah, and seems fine to leave this as-is returning a bool in the meantime</p>\n</blockquote>",
        "id": 437325041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715023856
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>.</p>",
        "id": 438491009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715656124
    },
    {
        "content": "<p>jameysharp edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<p>Lazy initialization of tables has trade-offs that we haven't explored in a while. Making it configurable makes it easier to test the effects of these trade-offs on a variety of WebAssembly programs, and allows embedders to decide whether the trade-offs are worth-while for their use cases.</p>\n<p>TODO:</p>\n<ul>\n<li>[x] Finish documentation comments</li>\n<li>[x] Add CLI flag in the <code>-O</code> group</li>\n<li>[x] Either implement support in Winch, or check in <code>Config::validate</code> that when Winch is enabled so is lazy-init</li>\n<li>[x] Add <code>disas</code> tests with lazy init disabled</li>\n<li>[x] Hook up this flag in fuzzing</li>\n</ul>\n<p>I've tested this by temporarily setting the flag to disable lazy-init by default (in <code>crates/environ/src/tunables.rs</code>) and verifying that the test suite still passes, except for a bunch of Winch tests (as expected), as well as the amusing case of <code>code_too_large::code_too_large_without_panic</code>, which fails because disabling lazy-init deletes enough code that the code is no longer too large.</p>\n<p>With lazy-init disabled, the <code>disas</code> tests show that this shaves off six or seven CLIF instructions and a cold block per <code>call_indirect</code> or <code>table_get</code>. The <code>typed-funcrefs.wat</code> test becomes branch-free, with two loads and an indirect call per <code>call_indirect</code>, making it equivalent to the version that uses globals instead of tables.</p>\n<p>cc: @cfallin</p>\n</blockquote>",
        "id": 438491053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715656155
    },
    {
        "content": "<p><strong>jameysharp</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a> as ready for review.</p>",
        "id": 438491108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715656196
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>.</p>",
        "id": 438491112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715656197
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>.</p>",
        "id": 438491113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715656197
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>.</p>",
        "id": 438491114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715656197
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>.</p>",
        "id": 438491115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715656197
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#issuecomment-2109206490\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<p>I think I've addressed all of your suggestions, Alex; thank you for them!</p>\n<p>I'm trying to coax the fuzzer to discover an artificial bug I added in the non-lazy-init configuration just to make sure it can, and it's been running for a while without finding it. So maybe you (or whoever reviews this) can double-check if I did something wrong in the fuzzer configuration?</p>\n</blockquote>",
        "id": 438493123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715657245
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#issuecomment-2109238196\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<p>Okay, I've learned that the <code>table_ops</code> fuzzer can't test this because it only uses <code>externref</code> tables, but lazy-init only applies to <code>funcref</code> tables. And the <code>single-inst</code> module-builder for <code>differential</code> doesn't generate tables or table instructions at all.</p>\n<p>But I'm still not sure why <code>wasm-smith</code> isn't finding my asserts with either <code>differential</code> or <code>instantiate</code>. I tried both asserting that lazy-init is enabled, and that it's disabled, during codegen in wasmtime-cranelift, and neither one is getting hit.</p>\n</blockquote>",
        "id": 438497142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715659471
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#issuecomment-2109263390\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<p>Nevermind, <code>instantiate</code> found my assert a few minutes after I wrote that, and then found the opposite assert after another 20 minutes. And I've also once again run <code>cargo test --test all</code> with <code>table_lazy_init</code> set false, and the only tests that failed were Winch-related (now with the error message from <code>Config::validate</code>) and the <code>code_too_large_without_panic</code> test again.</p>\n<p>So I think this is ready to land.</p>\n</blockquote>",
        "id": 438499757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715661199
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#issuecomment-2109405137\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 438510625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715669079
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#pullrequestreview-2055677340\">PR review</a>.</p>",
        "id": 438595631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715698860
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>.</p>",
        "id": 438601005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715700459
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531#issuecomment-2110686347\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8531\">PR #8531</a>:</p>\n<blockquote>\n<p>We should really add a top-down generation mode to <code>wasm-smith</code>...</p>\n</blockquote>",
        "id": 438615400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715705162
    }
]