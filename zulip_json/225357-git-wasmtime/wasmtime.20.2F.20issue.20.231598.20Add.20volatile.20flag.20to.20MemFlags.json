[
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">issue #1598</a>:</p>\n<blockquote>\n<p>Add Volatile flag to MemFlags.</p>\n<h4>Benefit</h4>\n<p>When some optimization pass knows about load/store type (is it volatile or not?) then it's possible to do a lot of optimizations. One of it is memory to register promotion. I tried to implement mem2reg pass there <a href=\"https://github.com/playXE/cranelift-mem2reg/\">cranelift-mem2reg</a> and this pass works but in some cases it fails e.g this simple C code:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// compiled with rcc</span>\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Message</span>:  <span class=\"nc\">definition</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Verifier</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">while</span><span class=\"w\"> </span><span class=\"n\">compiling</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>All loads and stores might be marked as volatile and mem2reg will not optimize <code>struct Foo</code> into registers.  <br>\nVolatile flag also can help in SRoA when it's possible to replace allocation on stack with single 32 or 64 bit register.</p>\n<h4>Implementation</h4>\n<p>Just add additional enum case in <code>codegen/ir/memflags.rs</code> and add 3 simple functions to MemFlags: <code>volatile() -&gt; Self,is_volatile() -&gt; bool, set_volatile(&amp;mut self)</code>.</p>\n<h4>Alternatives</h4>\n<p>I do not see any alternatives.</p>\n<p>UPD: This might be useful for this issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1076\">Support volatile store/loads</a></p>\n</blockquote>",
        "id": 281217085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651697093
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">issue #1598</a>:</p>\n<blockquote>\n<p>Add Volatile flag to MemFlags.</p>\n<h4>Benefit</h4>\n<p>When some optimization pass knows about load/store type (is it volatile or not?) then it's possible to do a lot of optimizations. One of it is memory to register promotion. I tried to implement mem2reg pass there <a href=\"https://github.com/playXE/cranelift-mem2reg/\">cranelift-mem2reg</a> and this pass works but in some cases it fails e.g this simple C code:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// compiled with rcc</span>\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Message</span>:  <span class=\"nc\">definition</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Verifier</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">while</span><span class=\"w\"> </span><span class=\"n\">compiling</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>All loads and stores might be marked as volatile and mem2reg will not optimize <code>struct Foo</code> into registers.  <br>\nVolatile flag also can help in SRoA when it's possible to replace allocation on stack with single 32 or 64 bit register.</p>\n<h4>Implementation</h4>\n<p>Just add additional enum case in <code>codegen/ir/memflags.rs</code> and add 3 simple functions to MemFlags: <code>volatile() -&gt; Self,is_volatile() -&gt; bool, set_volatile(&amp;mut self)</code>.</p>\n<h4>Alternatives</h4>\n<p>I do not see any alternatives.</p>\n<p>UPD: This might be useful for this issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1076\">Support volatile store/loads</a></p>\n</blockquote>",
        "id": 281217152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651697127
    }
]