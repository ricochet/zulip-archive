[
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235516299\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>For anyone else wondering why we use <code>Ieee{32,64}</code> like I was (since it looks like we are just slowly reimplementing <code>f32/f64</code>). I found this thread <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2251#discussion_r498508646\">https://github.com/bytecodealliance/wasmtime/pull/2251#discussion_r498508646</a> where it appears that some arches (x86) may silence sNaN's</p>\n</blockquote>",
        "id": 296821656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662125824
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235516299\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>For anyone else wondering why we use <code>Ieee{32,64}</code> like I was (since it looks like we are just slowly reimplementing <code>f32/f64</code>). I found this thread <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2251#discussion_r498508646\">https://github.com/bytecodealliance/wasmtime/pull/2251#discussion_r498508646</a> where it appears that some float behaviour may change according to each arch, so this struct is intended to normalize that behaviour across arches.</p>\n</blockquote>",
        "id": 296821917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662125910
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235770858\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>Awww, cranelift-fuzzgen needs a fix similar to the test suite runner, because it also expects bitwise equality for NaNs when comparing results.</p>\n</blockquote>",
        "id": 296869698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662141501
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235777705\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>Huh, that is true! I was thinking about implementing a wrapper type over <code>Vec&lt;DataValue&gt;</code> like <code>RunResult</code> or something like that so that we don't have to duplicate the comparison function, what do you think about that?</p>\n</blockquote>",
        "id": 296871330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662142050
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235777705\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>Huh, that is true! I was thinking about implementing a wrapper type over <code>Vec&lt;DataValue&gt;</code> like <code>RunResult</code> or something like that so that we don't have to duplicate the comparison function, what do you think about that?</p>\n<p>Edit: Although <code>Result</code> has its own meaning, so we that's probably not the best name. And we already have a <code>RunResult</code> in fuzzgen.</p>\n</blockquote>",
        "id": 296871523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662142114
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235787551\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>I have a fix I'm testing now. I've added a <code>bitwise_eq</code> method to <code>DataValue</code> to share most of the logic. Then in cranelift-fuzzgen I've implemented <code>PartialEq</code> on <code>RunResult</code> in terms of <code>bitwise_eq</code>, and written similar code in <code>compare_results</code>. I don't feel bad about duplicating <code>l.len() == r.len() &amp;&amp; l.iter().zip(r).all(|(l, r)| l.bitwise_eq(r))</code>.</p>\n</blockquote>",
        "id": 296873367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662142806
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235788119\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>Hah! We implemented the same thing!</p>\n<p>![image](<a href=\"https://user-images.githubusercontent.com/1357143/188214564-213aa238-0b23-46c2-9681-a710c5afe358.png\">https://user-images.githubusercontent.com/1357143/188214564-213aa238-0b23-46c2-9681-a710c5afe358.png</a>)</p>\n<p>Down to the same name and everything!</p>\n</blockquote>",
        "id": 296873451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662142850
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235788119\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>Hah! We implemented the same thing! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p>![image](<a href=\"https://user-images.githubusercontent.com/1357143/188214564-213aa238-0b23-46c2-9681-a710c5afe358.png\">https://user-images.githubusercontent.com/1357143/188214564-213aa238-0b23-46c2-9681-a710c5afe358.png</a>)</p>\n<p>Down to the same name and everything!</p>\n</blockquote>",
        "id": 296873577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662142905
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235793861\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>Hah, nice! Ooh, I like your doc comment better than mine though. :grin:</p>\n<p>BTW I only noticed while looking into this that <code>compare_results</code> doesn't check if the vectors have the same length. Maybe there's a check earlier that makes it unnecessary? But anywhere I see <code>.zip</code>, if different lengths could matter then I like to see an explicit check.</p>\n<p>Do you want to open a PR for this? Here's the key bit I did in cranelift-fuzzgen:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RunResult</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">RunResult</span>::<span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">RunResult</span>::<span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">).</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">bitwise_eq</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then remove the <code>RunResult::unwrap</code> implementation and just do <code>assert_eq!(int_res, host_res);</code> at the end.</p>\n</blockquote>",
        "id": 296874543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662143298
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849#issuecomment-1235895293\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4849\">issue #4849</a>:</p>\n<blockquote>\n<p>FYI I think this is the cause of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4857\">https://github.com/bytecodealliance/wasmtime/issues/4857</a></p>\n</blockquote>",
        "id": 296895070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662152619
    }
]