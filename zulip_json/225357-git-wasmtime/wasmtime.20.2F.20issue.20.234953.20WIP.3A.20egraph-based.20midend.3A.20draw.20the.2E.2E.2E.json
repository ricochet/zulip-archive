[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#issuecomment-1256782836\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">issue #4953</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:x64\", \"cranelift:meta\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 300463602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663974174
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#issuecomment-1266401632\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">issue #4953</a>:</p>\n<blockquote>\n<p>@jameysharp I think this is more-or-less ready for review now!</p>\n<p>(In fact, I just spent a few hours doing the latest rebase, and these are fairly painful because this PR does a lot of code-motion to factor out ISLE commonalities for mid-end and backends, so I'd really prefer to try to get this merged before much more changes to avoid another rebase hell :-) )</p>\n<p>I've updated the implementations of the various rewriting and elaboration algorithms to avoid explicit recursion, and I've factored out a generic \"analysis\" mechanism for the egraph crate to own; these were the main cleanups I wanted/needd to do before the prototype would be considered production-ready, I think. Regarding the rule-rewriting reentrancy issue, I opted to simply cap the recursion with a static limit (max of 5 chained rewrites) for now, as (i) we'll need such a limit anyway to protect against accidentally infinitely-(co)recursive rules, and (ii) it is about an order of magnitude simpler than unwinding the nested-immediate-rewrites into some sort of \"pending node queue\" and splitting the id-space, and probably more efficient in the common case.</p>\n<p>In any case, let me know what you think -- I'm eager for feedback!</p>\n</blockquote>",
        "id": 302190723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664859813
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#issuecomment-1266401632\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">issue #4953</a>:</p>\n<blockquote>\n<p>@jameysharp I think this is more-or-less ready for review now!</p>\n<p>(In fact, I just spent a few hours doing the latest rebase/merge, and these are fairly painful because this PR does a lot of code-motion to factor out ISLE commonalities for mid-end and backends, so I'd really prefer to try to get this merged before much more changes to avoid another rebase hell :-) )</p>\n<p>I've updated the implementations of the various rewriting and elaboration algorithms to avoid explicit recursion, and I've factored out a generic \"analysis\" mechanism for the egraph crate to own; these were the main cleanups I wanted/needd to do before the prototype would be considered production-ready, I think. Regarding the rule-rewriting reentrancy issue, I opted to simply cap the recursion with a static limit (max of 5 chained rewrites) for now, as (i) we'll need such a limit anyway to protect against accidentally infinitely-(co)recursive rules, and (ii) it is about an order of magnitude simpler than unwinding the nested-immediate-rewrites into some sort of \"pending node queue\" and splitting the id-space, and probably more efficient in the common case.</p>\n<p>In any case, let me know what you think -- I'm eager for feedback!</p>\n</blockquote>",
        "id": 302190750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664859835
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#issuecomment-1266442118\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">issue #4953</a>:</p>\n<blockquote>\n<p>@alexcrichton it looks like the verify-publish CI job is failing <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/3179742540/jobs/5182545720#step:6:810\">here</a> because for some reason it's looking for the (not-yet-published) cranelift-egraph crate on <a href=\"http://crates.io\">crates.io</a> rather than in the workspace. I copied the magic incantations for workspace-inheritance from the other intra-repo deps but I'm not sure if I'm missing something -- it's surprising that this fails if all the other builds work fine?</p>\n</blockquote>",
        "id": 302196518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664864000
    }
]