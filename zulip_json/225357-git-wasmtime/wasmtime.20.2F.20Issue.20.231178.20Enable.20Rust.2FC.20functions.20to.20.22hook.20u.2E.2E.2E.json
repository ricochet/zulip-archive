[
    {
        "content": "<p>nlewycky <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1178#issuecomment-599803247\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1178#issuecomment-599803247\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1178\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1178\">Issue #1178</a>:</p>\n<blockquote>\n<p>We're looking into implementing multi-value return with the same ABI as a C struct return for our wasm implementation.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// We pack the values.</span>\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">S2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test1</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">S2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">S2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Needs to be returned sret, but cranelift returns RAX, RDX, RCX.</span>\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">S3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test2</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">S3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">S3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The way I've done it so far is that the user of cranelift is responsible for doing packing and unpacking of pairs of 32-bit value into a single 64-bit value (including writing out a different function signature if needed, for example, a wasm signature returning I32, F32, I32 becomes a cranelift signature that returns i64, i32), while cranelift is responsible for doing <code>sret</code> conversion when needed. Unfortunately, cranelift doesn't always perform <code>sret</code> conversion when the equivalent C struct would be returned sret.</p>\n<p>This means that either the caller also needs to perform <code>sret</code> conversion in the remaining cases, or we can write a patch that adds a new <code>system_v_multiple_results</code> ABI to cranelift. The new ABI would disable usage of RCX as a return and change when cranelift applies <code>sret</code>, but would not resolve the issue with packing and unpacking of values because there is currently no way for <code>legalize_args</code> to assign two return values into one register (ValueConversion::IntSplit does the opposite, splitting a single value across multiple registers). Would you be interested in a patch which adds that?</p>\n</blockquote>",
        "id": 190792696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584401345
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1178#issuecomment-603577813\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1178#issuecomment-603577813\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1178\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1178\">Issue #1178</a>:</p>\n<blockquote>\n<p>I would like Cranelift to avoid evolving in the direction of C-compatible struct calling convention support. A full implementation, especially on x86-64, would require fairly detailed knowledge of the C type system, which is otherwise out of scope for Cranelift, so most likely we'd end up with partial support, which is awkward in terms of users knowing what to expect, developers knowing what features we intend to support and what's out of scope, and awkwardly overlapping functionality with the full support we hope to add in Cranelift frontends in the future.</p>\n</blockquote>",
        "id": 191690839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585097012
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1178\">Issue #1178</a>:</p>\n<blockquote>\n<p>Over in wasmtime I've been exploring the area of hooking up compile-time functions (those defined in Rust or C) directly with cranelift-generated functions. For example a wasm module like this:</p>\n<div class=\"codehilite\" data-code-language=\"wat\"><pre><span></span><code>(module\n  (import \"\" \"\" (func (param i32)))\n  (start (func 0)))\n</code></pre></div>\n<p>could get hooked up directly to a Rust function that looked like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">the_import</span><span class=\"p\">(</span><span class=\"n\">vmctx</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">VMContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(more or less). When I say \"hooked up directly\" here I mean that zero cranelift-generated shim functions are required to have cranelift call out to the imported function. Today the <code>wasmtime::Func</code> type always uses cranelift to generate a fresh jit function which has an appropriate trampoline. </p>\n<p>The goal here is to basically make extraction of a function pointer and calling it or providing a function pointer as an import as cheap of an operation as possible.</p>\n<p>This all works well today with the default ABIs implemented in Cranelift and in general we don't have any issues. For example <a href=\"https://github.com/bytecodealliance/wasmtime/pull/839\">https://github.com/bytecodealliance/wasmtime/pull/839</a> is a start of how this might look in the <code>wasmtime</code> crate.</p>\n<p>A wrench is thrown into the works with multi-value wasm functions, however. The ABI of a multi-value return function is fundamentally incompatible with anything you can write in C/Rust/etc today. In talking with @sunfishcode it looks like the multi-value return ABI (when dealing with more than one return value) is modeled after the concept of a multi-value return in LLVM. This is, however, purely an aspect of LLVM IR where you can return a tuple, and you can't actually write stable Rust or C code to generate LLVM IR that has this form of a tuple return. This means that if you have a module like:</p>\n<div class=\"codehilite\" data-code-language=\"wat\"><pre><span></span><code>(module\n  (import \"\" \"\" (func (result i32 i32)))\n)\n</code></pre></div>\n<p>it's fundamentally impossible to provide a Rust/C function pointer as the import there. There's no way to get the compiler to generate a function that supports the ABI that cranelift expects, meaning that cranelift is <em>required</em> to generate a jit function shim to call between Rust and wasm.</p>\n<p>In some discussion, I think there's two possible ways to fix this:</p>\n<h2>Change Cranelift to behave as if it's returning a struct, not a tuple</h2>\n<p>Currently cranelift's multi-value return ABI is modeled after what the multi-return ABI looks like in LLVM/gcc. While there is not source-language-level equivalent to this it's all compiler-internal details and you can generate LLVM IR to match up with what cranelift generates today.</p>\n<p>An alternative, though, is to update Cranelift's interpretation of a multi-value return to \"behave as if an aggregate <code>struct</code> was returned with the multi-value fields\" if there is more than one return value. This feels a bit weird, but for example given:</p>\n<div class=\"codehilite\" data-code-language=\"wat\"><pre><span></span><code>(module\n  (import \"\" \"\" (func (result i32 i32)))\n)\n</code></pre></div>\n<p>you could hook that up natively to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">vmctx</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">VMContext</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Or perhaps instead of changing cranelift's default we could simply add a new ABI which matches a \"struct-like return\" ABI rather than the current tuple-like return ABI. </p>\n<p>In any case this seems like it would be a significant undertaking. The rules for how to return an aggregate are <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_target/abi/call/x86_64.rs\">really complicated</a> and at least to me make basically no sense. Trying to have Cranelift match exactly what the system ABI looks like is likely a very large undertaking which would take quite some time to get right (and likely a bunch of internal refactoring).</p>\n<p>This leads us to another alternative...</p>\n<h2>Change cranelift to always use an out-pointer for multi-value returns</h2>\n<p>Instead of trying to match exactly what the system ABI looks like for returning aggregates, we could change cranelift's system ABI (or add a new ABI, or just do this all at the wasm layer) to do something like follows:</p>\n<ul>\n<li>If a function returns 0 values or 1 value, do the normal thing you'd expect (match the system ABI)</li>\n<li>If a function returns 2 or more values, then always synthesize an out-pointer where the layout of the out-pointer is the same as a C struct with fields of the types of the return value.</li>\n</ul>\n<p>This way the above example could be hooked up to a function like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">outptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">VMContext</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The downside of this approach is that it may be wasm-specific or a bit of a hack in cranelift, but the upside is that there's no mucking around with the system ABI and trying to do clever things like packing <code>(i32, i32)</code> into a 64-bit register.</p>\n<p>This feels like the better solution to me, but I'm curious to hear what others think as well! If others have questions I certainly don't mind answering them as well.</p>\n</blockquote>",
        "id": 233530704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617816867
    }
]