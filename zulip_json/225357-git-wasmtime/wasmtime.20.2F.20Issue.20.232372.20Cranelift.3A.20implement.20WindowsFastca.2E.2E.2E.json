[
    {
        "content": "<p>yurydelendik opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372\">Issue #2372</a>:</p>\n<blockquote>\n<p>The issue is a part of #2079 (and possibly #1642 ?). The issue needs to be extended to all new backends (x64 and aarch64). This will require implementing the win64 fastcall ABI support in cranelift/codegen/src/machinst/ to fix e.g. tests/all/traps.rs tests.</p>\n</blockquote>",
        "id": 215861741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604676759
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372#issuecomment-723196841\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372\">Issue #2372</a>:</p>\n<blockquote>\n<p>AFAIK, aarch64 doesn't have a separate fastcall ABI (at least according to <a href=\"https://docs.microsoft.com/en-us/cpp/build/arm64-windows-abi-conventions?view=msvc-160\">this doc</a>) -- @peterhuene can you confirm?</p>\n</blockquote>",
        "id": 215875861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604682871
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372#issuecomment-723218076\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372\">Issue #2372</a>:</p>\n<blockquote>\n<blockquote>\n<p>aarch64 doesn't have a separate fastcall ABI </p>\n</blockquote>\n<p>MS docs refer it as \"mostly AArch64 EABI\". Will we call it <code>CallConv::SystemV</code> or will add different values?</p>\n</blockquote>",
        "id": 215881495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604685481
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372\">Issue #2372</a>:</p>\n<blockquote>\n<p>The issue is a part of #2079 (and possibly #1642 ?). The issue needs to be extended to all new backends (x64 and aarch64). This will require implementing the win64 fastcall ABI (or \"mostly AArch64 EABI\") support in cranelift/codegen/src/machinst/ to fix e.g. tests/all/traps.rs tests.</p>\n</blockquote>",
        "id": 215885475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604687359
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372#issuecomment-723235675\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372\">Issue #2372</a>:</p>\n<blockquote>\n<p>I read through the doc and compared it to the <a href=\"https://c9x.me/compile/bib/abi-arm64.pdf\">standard AArch64 ABI</a>; it seems that all of the basic details are the same (register roles, stack requirements, etc.). The only differences I spotted were that the AArch64 ABI specifies FPCR (FPU control register) is undefined and must not be modified, while Windows specifies it is callee-save; and that Windows has its own exception unwind, of course. The FPCR difference shouldn't matter as we never modify the register.</p>\n<p>So as far as I can tell, we can just use the <code>SystemV</code> ABI for Windows on AArch64, but others please do say something if that's wrong!</p>\n</blockquote>",
        "id": 215886326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604687721
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372#issuecomment-723247713\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372\">Issue #2372</a>:</p>\n<blockquote>\n<p>I believe your assessment of the calling convention is correct, that being it won't differ from AArch64 ABI in ways that concern Cranelift.</p>\n<p>However, I think we'll need a different <code>CallConv</code> value for Windows \"ARM64\" to differentiate the unwind information.</p>\n<p>While we're there, I would <em>love</em> for us to stop calling it \"Windows fastcall\" instead of \"Windows x64\" in Cranelift, but that ship has probably sailed.</p>\n</blockquote>",
        "id": 215889571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604689342
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372#issuecomment-723247713\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372\">Issue #2372</a>:</p>\n<blockquote>\n<p>I believe your assessment of the calling convention is correct: it won't differ from the AArch64 ABI in ways that concern Cranelift.</p>\n<p>However, I think we'll need a different <code>CallConv</code> value for Windows \"ARM64\" to differentiate the unwind information.</p>\n<p>While we're there, I would <em>love</em> for us to stop calling it \"Windows fastcall\" instead of \"Windows x64\" in Cranelift, but that ship has probably sailed.</p>\n</blockquote>",
        "id": 215889639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604689375
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372#issuecomment-723252633\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372\">Issue #2372</a>:</p>\n<blockquote>\n<p>I guess we could also just rename <code>WindowsFastcall</code> to simply <code>Windows</code> and use the same value for both x64 and ARM backends for unwind information generation.  \"Fastcall\" just leaves a x86 taste in my mouth.</p>\n</blockquote>",
        "id": 215890995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604690054
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372#issuecomment-723253334\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2372\">Issue #2372</a>:</p>\n<blockquote>\n<blockquote>\n<p>I guess we could also just rename WindowsFastcall to simply Windows </p>\n</blockquote>\n<p>Yeah, I am counting we will do just that.</p>\n</blockquote>",
        "id": 215891163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604690155
    }
]