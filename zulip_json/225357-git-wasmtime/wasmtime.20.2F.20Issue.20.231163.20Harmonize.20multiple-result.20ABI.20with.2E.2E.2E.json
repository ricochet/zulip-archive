[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1163#issuecomment-772807963\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1163\">Issue #1163</a>:</p>\n<blockquote>\n<p>Does this work with the new backends?</p>\n</blockquote>",
        "id": 225077988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612384823
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1163#issuecomment-772813046\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1163\">Issue #1163</a>:</p>\n<blockquote>\n<p>Yes, we support multivalue returns in a SpiderMonkey-compatible way now.</p>\n</blockquote>",
        "id": 225079178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612385340
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1163\">Issue #1163</a>:</p>\n<blockquote>\n<p>In a WebAssembly + Firefox context, the goal is to replace the optimized compiler tier with Cranelift, but keep the quick-and-dirty Baseline compiler.  In that context we will need some coherence in ABI between Cranelift and Baseline.  I think some of the recent excellent work by @fitzgen to add multi-value support to Cranelift (#1147) might need some adaptation, in this regard.</p>\n<p>To back up a bit, I'm going to try to summarize the situation.  Corrections welcome.</p>\n<p>Baseline's goal is to produced compiled code soon.  Doesn't have to be good code; we leave that to the optimized tier (Cranelift, eventually).  To produce good code soon, Baseline uses a compilation strategy that mirrors WebAssembly's stack discipline to the machine stack.  If a program does this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and these values get spilled to the stack, local 2 will be closer to the machine stack pointer than local 1.  In Baseline, any value allocated to a register will have been pushed on the WebAssembly abstract stack more recently than any value spilled to the machine stack.</p>\n<p>Multiple function return values also follow a stack discipline.  Consider a function that returns three values v0, v1, and v2.  Let us assume that there's only one register allocated to function returns, so one of the values goes to a register, and two to the stack.  Following the invariant about registers being more recently pushed than stack results, that means v0 and v1 should go on the stack, and v2 should be allocated to a register.  Furthermore, it means that v0 should be farther from the SP than v1.</p>\n<h2>Needed changes in Cranelift</h2>\n<ol>\n<li>Cranelift and Baseline should agree (in the baldr ABI) on which results get allocated to registers and which to stack locations.</li>\n<li>Cranelift and Baseline should agree on how to find stack locations for stack results (an extra synthetic argument).</li>\n</ol>\n<p>Related: <a href=\"https://docs.google.com/document/d/1oi6ROZJuE-hBb21Tgq-XcUegPktecF52gADzBJcYL34/edit\">WebAssembly ABI 2020</a></p>\n<p>Related: <a href=\"https://searchfox.org/mozilla-central/source/js/src/wasm/WasmStubs.h#132\">ABIResultIter</a></p>\n<p>I am pretty sure that some of the choices in <a href=\"https://github.com/bytecodealliance/cranelift/issues/1147\">bytecodealliance/cranelift#1147</a> didn't match up with the WebAssembly stack discipline.  Not a problem for Cranelift of course, but I think it is a problem for Baseline.  Thoughts?</p>\n<p>cc @Dima00782 @bnjbvr @fitzgen @lars-t-hansen </p>\n</blockquote>",
        "id": 225079180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612385340
    }
]