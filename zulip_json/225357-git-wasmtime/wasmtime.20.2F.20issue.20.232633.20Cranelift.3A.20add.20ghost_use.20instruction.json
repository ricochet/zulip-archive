[
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2633\">issue #2633</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>Add a new <code>ghost_use</code> instruction that accepts a value and ensures that the value can be found somewhere at runtime. It will codegen to no instructions.<br>\n&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<h4>Benefit</h4>\n<p>This allows extending the range for which variables are available in debuginfo beyond the last actual use of the variable. In addition it would for exanple allow a jit runtime to inspect the value for switching to and from speculatively optimized code.<br>\n&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<h4>Implementation</h4>\n<p>The instruction will be marked as has_other_sideeffects. It will be lowered by backends to an instruction that doesn't result in any bytes being emitted. It will tell regalloc that the value needs to be available on either in a register or on the stack.<br>\n&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<h4>Alternatives</h4>\n<ul>\n<li>Force all variables to the stack, which regressed runtime performance</li>\n<li>Accept that variables are only available until the last use, resulting in a sub-optimal debugging experience.<br>\n&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\n</li>\n</ul>\n</blockquote>",
        "id": 255810240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633123811
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2633\">issue #2633</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>Add a new <code>ghost_use</code> instruction that accepts a value and ensures that the value can be found somewhere at runtime. It will codegen to no instructions.<br>\n&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<h4>Benefit</h4>\n<p>This allows extending the range for which variables are available in debuginfo beyond the last actual use of the variable. In addition it would for exanple allow a jit runtime to inspect the value for switching to and from speculatively optimized code.<br>\n&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<h4>Implementation</h4>\n<p>The instruction will be marked as has_other_sideeffects. It will be lowered by backends to an instruction that doesn't result in any bytes being emitted. It will tell regalloc that the value needs to be available on either in a register or on the stack.<br>\n&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<h4>Alternatives</h4>\n<ul>\n<li>Force all variables to the stack, which regressed runtime performance</li>\n<li>Accept that variables are only available until the last use, resulting in a sub-optimal debugging experience.<br>\n&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\n</li>\n</ul>\n</blockquote>",
        "id": 281230780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651704454
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2633\">issue #2633</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>Add a new <code>ghost_use</code> instruction that accepts a value and ensures that the value can be found somewhere at runtime. It will codegen to no instructions.<br>\n&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<h4>Benefit</h4>\n<p>This allows extending the range for which variables are available in debuginfo beyond the last actual use of the variable. In addition it would for exanple allow a jit runtime to inspect the value for switching to and from speculatively optimized code.<br>\n&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<h4>Implementation</h4>\n<p>The instruction will be marked as has_other_sideeffects. It will be lowered by backends to an instruction that doesn't result in any bytes being emitted. It will tell regalloc that the value needs to be available on either in a register or on the stack.<br>\n&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<h4>Alternatives</h4>\n<ul>\n<li>Force all variables to the stack, which regressed runtime performance</li>\n<li>Accept that variables are only available until the last use, resulting in a sub-optimal debugging experience.<br>\n&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\n</li>\n</ul>\n</blockquote>",
        "id": 281230786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651704458
    }
]