[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a>.</p>",
        "id": 279116938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650052403
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a> from <code>component-call-export</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is an implementation of the typed method of calling<br>\ncomponent exports. This is intended to represent the most efficient way<br>\nof calling a component in Wasmtime, similar to what <code>TypedFunc</code><br>\nrepresents today for core wasm.</p>\n<p>Internally this contains all the traits and implementations necessary to<br>\ninvoke component exports with any type signature (e.g. arbitrary<br>\nparameters and/or results). The expectation is that for results we'll<br>\nreuse all of this infrastructure except in reverse (arguments and<br>\nresults will be swapped when defining imports).</p>\n<p>Some features of this implementation are:</p>\n<ul>\n<li>Arbitrary type hierarchies are supported</li>\n<li>\n<p>The Rust-standard <code>Option</code>, <code>Result</code>, <code>String</code>, <code>Vec&lt;T&gt;</code>, and tuple<br>\n  types all map down to the corresponding type in the component model.</p>\n</li>\n<li>\n<p>Basic utf-16 string support is implemented as proof-of-concept to show<br>\n  what handling might look like. This will need further testing and<br>\n  benchmarking.</p>\n</li>\n<li>\n<p>Arguments can be behind \"smart pointers\", so for example<br>\n<code>&amp;Rc&lt;Arc&lt;[u8]&gt;&gt;</code> corresponds to <code>list&lt;u8&gt;</code> in interface types.</p>\n</li>\n<li>\n<p>Bulk copies from linear memory never happen unless explicitly<br>\n  instructed to do so.</p>\n</li>\n</ul>\n<p>The goal of this commit is to create the ability to actually invoke wasm<br>\ncomponents. This represents what is expected to be the performance<br>\nthreshold for these calls where it ideally should be optimal how<br>\nWebAssembly is invoked. One major missing piece of this is a <code>#[derive]</code><br>\nof some sort to generate Rust types for arbitrary <code>*.wit</code> types such as<br>\ncustom records, variants, flags, unions, etc. The current trait impls<br>\nfor tuples and <code>Result&lt;T, E&gt;</code> are expected to have fleshed out most of<br>\nwhat such a derive would look like.</p>\n<p>There are some downsides and missing pieces to this commit and method of<br>\ncalling components, however, such as:</p>\n<ul>\n<li>\n<p>Passing <code>&amp;[u8]</code> to WebAssembly is currently not optimal. Ideally this<br>\n  compiles down to a <code>memcpy</code>-equivalent somewhere but that currently<br>\n  doesn't happen due to all the bounds checks of copying data into<br>\n  memory. I have been unsuccessful so far at getting these bounds checks<br>\n  to be removed.</p>\n</li>\n<li>\n<p>There is no finalization at this time (the \"post return\" functionality<br>\n  in the canonical ABI). Implementing this should be relatively<br>\n  straightforward but at this time requires <code>wasmparser</code> changes to<br>\n  catch up with the current canonical ABI.</p>\n</li>\n<li>\n<p>There is no guarantee that results of a wasm function will be<br>\n  validated. As results are consumed they are validated but this means<br>\n  that if function returns an invalid string which the host doesn't look<br>\n  at then no trap will be generated. This is probably not the intended<br>\n  semantics of hosts in the component model.</p>\n</li>\n<li>\n<p>At this time there's no support for memory64 memories, just a bunch of<br>\n<code>FIXME</code>s to get around to. It's expected that this won't be too<br>\n  onerous, however. Some extra care will need to ensure that the various<br>\n  methods related to size/alignment all optimize to the same thing they<br>\n  do today (e.g. constants).</p>\n</li>\n<li>\n<p>The return value of a typed component function is either <code>T</code> or<br>\n<code>Value&lt;T&gt;</code>, and it depends on the ABI details of <code>T</code> and whether it<br>\n  takes up more than one return value slot or not. This is an<br>\n  ABI-implementation detail which is being forced through to the API<br>\n  layer which is pretty unfortunate. For example if you say the return<br>\n  value of a function is <code>(u8, u32)</code> then it's a runtime type-checking<br>\n  error. I don't know of a great way to solve this at this time.</p>\n</li>\n</ul>\n<p>Overall I'm feeling optimistic about this trajectory of implementing<br>\nvalue lifting/lowering in Wasmtime. While there are a number of<br>\ndownsides none seem completely insurmountable. There's naturally still a<br>\ngood deal of work with the component model but this should be a<br>\nsignificant step up towards implementing and testing the component model.</p>\n</blockquote>",
        "id": 279116939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650052403
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#pullrequestreview-944603644\">PR review</a>.</p>",
        "id": 279335105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316523
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#pullrequestreview-944603644\">PR review</a>.</p>",
        "id": 279335106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r852257227\">PR review comment</a>:</p>\n<blockquote>\n<p>Don't we have impls of plain <code>T</code> for <code>TypedFunc</code>? Can we do the same here? I guess that would introduce ambiguity between a single tuple parameter and N parameters?</p>\n</blockquote>",
        "id": 279335107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r852260770\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Calling a function which takes multiple parameters and returns a boolean:\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 279335108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r852258746\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe easier for folks to understand if we talk about how scalars don't use <code>Value</code> vs compound types do use <code>Value</code>? I think they are the same, right? Unless the canonical ABI packs, e.g., an interface type <code>(tuple u32 u32)</code> into a Wasm <code>i64</code> return.</p>\n</blockquote>",
        "id": 279335109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r852390652\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we factor <code>0xab</code> out into <code>const CANON_ABI_UNINIT_PATTERN: u8 = 0xAB;</code> or something?</p>\n</blockquote>",
        "id": 279335110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r852414610\">PR review comment</a>:</p>\n<blockquote>\n<p>Debug assert that <code>align</code> is a power of two (which the <code>&amp;</code> stuff relies on, I believe)?</p>\n<p>Alternatively, just use division (which will work with non-powers-of-two) and let LLVM clean up the generated code.</p>\n</blockquote>",
        "id": 279335111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r852274105\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we <code>debug_assert!</code> the type signature of <code>realloc</code> here?</p>\n</blockquote>",
        "id": 279335112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r852409592\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            other =&gt; bail!(\"expected `string` found `{}`\", desc(other)),\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 279335113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r852402370\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Views this instance of `ComponentParams` as a tuple, allowing\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 279335115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r852391384\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // Perform the lowering operation for the parameters which will write\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 279335116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650316524
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#pullrequestreview-945767164\">PR review</a>.</p>",
        "id": 279412612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650376796
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r853113333\">PR review comment</a>:</p>\n<blockquote>\n<p>We do have impls for plain <code>T</code>, yeah. But yes as you deduced the ambiguity prevents the impl from existing for interface types.</p>\n</blockquote>",
        "id": 279412613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650376797
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a> from <code>component-call-export</code> to <code>main</code>.</p>",
        "id": 280539110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651171755
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#pullrequestreview-980660915\">PR review</a>.</p>",
        "id": 283125077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653079992
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r878539046\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed! This is done in <code>call_raw</code></p>\n</blockquote>",
        "id": 283125078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653079992
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#pullrequestreview-980661581\">PR review</a>.</p>",
        "id": 283125208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653080050
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r878539532\">PR review comment</a>:</p>\n<blockquote>\n<p>Unfortunately this isn't 100% accurate advice in the sense that <code>(tuple u32)</code> is returned by-value. No fancy bit-packing happens but if the number of return values is small enough (e.g. 1) then it's returned by-value.</p>\n</blockquote>",
        "id": 283125209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653080050
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a> from <code>component-call-export</code> to <code>main</code>.</p>",
        "id": 283125339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653080137
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a> from <code>component-call-export</code> to <code>main</code>.</p>",
        "id": 283784506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653415709
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a> as ready for review.</p>",
        "id": 283784523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653415716
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a>.</p>",
        "id": 283785234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653416063
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a> from <code>component-call-export</code> to <code>main</code>.</p>",
        "id": 283793680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653420263
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#pullrequestreview-983745203\">PR review</a>.</p>",
        "id": 283793827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653420360
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#pullrequestreview-983745203\">PR review</a>.</p>",
        "id": 283793830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653420360
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039#discussion_r880873366\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>// A simple bump allocator which can be used with modules below.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 283793831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653420360
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a> from <code>component-call-export</code> to <code>main</code>.</p>",
        "id": 283795801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653421394
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4039\">PR #4039</a>.</p>",
        "id": 283811046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653429753
    }
]