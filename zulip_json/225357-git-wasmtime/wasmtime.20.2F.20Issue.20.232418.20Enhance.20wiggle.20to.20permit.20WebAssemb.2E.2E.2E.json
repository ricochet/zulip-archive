[
    {
        "content": "<p>fst-crenshaw opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2418\">Issue #2418</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>wasmtime</code> and <code>lucet</code> runtimes take different approaches when a hostcall reaches a fatal error.  Wasmtime expects a <code>Err(wasmtime::Trap::new())</code> from the hostcall indicating that an instance ought to be terminated.  The lucet runtime uses a panic!() to indicate a fatal error.  To allow for an agnostic support of these two different approaches, wiggle requires an enhancement that allows each of these runtimes to customize their reaction to a fatal error.</p>\n<h4>Implementation</h4>\n<p>Currently, the wiggle procedural macro generates a <code>UserErrorConversion</code> trait that, when implemented, specifies how to transform a hostcall error into an abi error, or i32.  For wasmtime, that trait is generated by wiggle like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Errno</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>One approach to enhance wiggle so that runtimes to react to fatal errors in a custom way follows:</p>\n<ol>\n<li>Wiggle generates its <code>UserErrorConversion</code> trait to return a Result instead of an i32.  The FatalError portion of the result must contain info describing the nature of the fatal error.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt;\n<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Errno</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FatalError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Wasmtime alters its wiggle integration to handle a Result instead of an i32.  When a FatalError is received, it must Trap(“info”).</li>\n</ol>\n<h4>Benefit</h4>\n<p>Enhancing the <code>UserErrorConversion</code> trait to return a <code>Result</code> means that runtimes may customize their reaction to a fatal error inside of a hostcall.</p>\n</blockquote>",
        "id": 216658329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605294732
    },
    {
        "content": "<p>fst-crenshaw edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2418\">Issue #2418</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>wasmtime</code> and <code>lucet</code> runtimes take different approaches when a hostcall reaches a fatal error.  Wasmtime expects a <code>Err(wasmtime::Trap::new())</code> from the hostcall indicating that an instance ought to be terminated.  The lucet runtime uses a panic!() to indicate a fatal error.  To allow for an agnostic support of these two different approaches, wiggle requires an enhancement that allows each of these runtimes to customize their reaction to a fatal error.</p>\n<h4>Implementation</h4>\n<p>Currently, the wiggle procedural macro generates a <code>UserErrorConversion</code> trait that, when implemented, specifies how to transform a hostcall error into an abi error, or i32.  For wasmtime, that trait is generated by wiggle like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Errno</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>One approach to enhance wiggle so that runtimes to react to fatal errors in a custom way follows:</p>\n<ol>\n<li>Wiggle generates its <code>UserErrorConversion</code> trait to return a Result instead of an i32.  The FatalError portion of the result must contain info describing the nature of the fatal error.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Errno</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FatalError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Wasmtime alters its wiggle integration to handle a Result instead of an i32.  When a FatalError is received, it must Trap(“info”).</li>\n</ol>\n<h4>Benefit</h4>\n<p>Enhancing the <code>UserErrorConversion</code> trait to return a <code>Result</code> means that runtimes may customize their reaction to a fatal error inside of a hostcall.</p>\n</blockquote>",
        "id": 216658375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605294758
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2418\">Issue #2418</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>wasmtime</code> and <code>lucet</code> runtimes take different approaches when a hostcall reaches a fatal error.  Wasmtime expects a <code>Err(wasmtime::Trap::new())</code> from the hostcall indicating that an instance ought to be terminated.  The lucet runtime uses a panic!() to indicate a fatal error.  To allow for an agnostic support of these two different approaches, wiggle requires an enhancement that allows each of these runtimes to customize their reaction to a fatal error.</p>\n<h4>Implementation</h4>\n<p>Currently, the wiggle procedural macro generates a <code>UserErrorConversion</code> trait that, when implemented, specifies how to transform a hostcall error into an abi error, or i32.  For wasmtime, that trait is generated by wiggle like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Errno</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>One approach to enhance wiggle so that runtimes to react to fatal errors in a custom way follows:</p>\n<ol>\n<li>Wiggle generates its <code>UserErrorConversion</code> trait to return a Result instead of an i32.  The FatalError portion of the result must contain info describing the nature of the fatal error.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Errno</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FatalError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Wasmtime alters its wiggle integration to handle a Result instead of an i32.  When a FatalError is received, it must Trap(“info”).</li>\n</ol>\n<h4>Benefit</h4>\n<p>Enhancing the <code>UserErrorConversion</code> trait to return a <code>Result</code> means that runtimes may customize their reaction to a fatal error inside of a hostcall.</p>\n</blockquote>",
        "id": 216696936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605317864
    },
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2418\">Issue #2418</a> (assigned to fst-crenshaw):</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>wasmtime</code> and <code>lucet</code> runtimes take different approaches when a hostcall reaches a fatal error.  Wasmtime expects a <code>Err(wasmtime::Trap::new())</code> from the hostcall indicating that an instance ought to be terminated.  The lucet runtime uses a panic!() to indicate a fatal error.  To allow for an agnostic support of these two different approaches, wiggle requires an enhancement that allows each of these runtimes to customize their reaction to a fatal error.</p>\n<h4>Implementation</h4>\n<p>Currently, the wiggle procedural macro generates a <code>UserErrorConversion</code> trait that, when implemented, specifies how to transform a hostcall error into an abi error, or i32.  For wasmtime, that trait is generated by wiggle like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Errno</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>One approach to enhance wiggle so that runtimes to react to fatal errors in a custom way follows:</p>\n<ol>\n<li>Wiggle generates its <code>UserErrorConversion</code> trait to return a Result instead of an i32.  The FatalError portion of the result must contain info describing the nature of the fatal error.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Errno</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FatalError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Wasmtime alters its wiggle integration to handle a Result instead of an i32.  When a FatalError is received, it must Trap(“info”).</li>\n</ol>\n<h4>Benefit</h4>\n<p>Enhancing the <code>UserErrorConversion</code> trait to return a <code>Result</code> means that runtimes may customize their reaction to a fatal error inside of a hostcall.</p>\n</blockquote>",
        "id": 216697002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605317918
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2418\">Issue #2418</a> (assigned to fst-crenshaw):</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>wasmtime</code> and <code>lucet</code> runtimes take different approaches when a hostcall reaches a fatal error.  Wasmtime expects a <code>Err(wasmtime::Trap::new())</code> from the hostcall indicating that an instance ought to be terminated.  The lucet runtime uses a panic!() to indicate a fatal error.  To allow for an agnostic support of these two different approaches, wiggle requires an enhancement that allows each of these runtimes to customize their reaction to a fatal error.</p>\n<h4>Implementation</h4>\n<p>Currently, the wiggle procedural macro generates a <code>UserErrorConversion</code> trait that, when implemented, specifies how to transform a hostcall error into an abi error, or i32.  For wasmtime, that trait is generated by wiggle like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Errno</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>One approach to enhance wiggle so that runtimes to react to fatal errors in a custom way follows:</p>\n<ol>\n<li>Wiggle generates its <code>UserErrorConversion</code> trait to return a Result instead of an i32.  The FatalError portion of the result must contain info describing the nature of the fatal error.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Errno</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FatalError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Wasmtime alters its wiggle integration to handle a Result instead of an i32.  When a FatalError is received, it must Trap(“info”).</li>\n</ol>\n<h4>Benefit</h4>\n<p>Enhancing the <code>UserErrorConversion</code> trait to return a <code>Result</code> means that runtimes may customize their reaction to a fatal error inside of a hostcall.</p>\n</blockquote>",
        "id": 216697131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605318017
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2418\">Issue #2418</a> (assigned to fst-crenshaw):</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>wasmtime</code> and <code>lucet</code> runtimes take different approaches when a hostcall reaches a fatal error.  Wasmtime expects a <code>Err(wasmtime::Trap::new())</code> from the hostcall indicating that an instance ought to be terminated.  The lucet runtime uses a panic!() to indicate a fatal error.  To allow for an agnostic support of these two different approaches, wiggle requires an enhancement that allows each of these runtimes to customize their reaction to a fatal error.</p>\n<h4>Implementation</h4>\n<p>Currently, the wiggle procedural macro generates a <code>UserErrorConversion</code> trait that, when implemented, specifies how to transform a hostcall error into an abi error, or i32.  For wasmtime, that trait is generated by wiggle like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Errno</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>One approach to enhance wiggle so that runtimes to react to fatal errors in a custom way follows:</p>\n<ol>\n<li>Wiggle generates its <code>UserErrorConversion</code> trait to return a Result instead of an i32.  The FatalError portion of the result must contain info describing the nature of the fatal error.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UserErrorConversion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">errno_from_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span>: <span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Errno</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FatalError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Wasmtime alters its wiggle integration to handle a Result instead of an i32.  When a FatalError is received, it must Trap(“info”).</li>\n</ol>\n<h4>Benefit</h4>\n<p>Enhancing the <code>UserErrorConversion</code> trait to return a <code>Result</code> means that runtimes may customize their reaction to a fatal error inside of a hostcall.</p>\n</blockquote>",
        "id": 217806818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606248421
    }
]