[
    {
        "content": "<p>Rochet2 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2210\">Issue #2210</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;<br>\nGarbage collection of Store objects that are no longer referenced.<br>\nThe specification notes:</p>\n<blockquote>\n<p>In practice, implementations may apply techniques like garbage collection to remove objects from the store that are no longer referenced. However, such techniques are not semantically observable, and hence outside the scope of this specification.</p>\n</blockquote>\n<p>From this I infer that the implementing or not implementing such a feature and the details of the implementation are left for the runtime. I imagine that future proposals can affect the implementation this feature. The feature seems to be required in the long term.</p>\n<p>Related topics and links:</p>\n<ul>\n<li><a href=\"#narrow/stream/206238-general/topic/Unloading.20a.20module\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Unloading.20a.20module</a></li>\n<li><a href=\"https://www.w3.org/TR/wasm-core-1/#store%E2%91%A0\">https://www.w3.org/TR/wasm-core-1/#store%E2%91%A0</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/960\">https://github.com/bytecodealliance/wasmtime/issues/960</a></li>\n</ul>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;<br>\nCurrently Wasm modules can be linked together, but there is no way to unload modules completely. As a result, programs that would require loading modules for temporary use or to conserve memory will \"leak memory\" as time goes on and eventually the program will run into issues with memory limitations. Garbage collection of objects that are no longer referenced from anywhere would free the memory of those unused objects.</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;<br>\nOne approach is to use reference counting of all objects in a store. With the counting, objects that are no longer referenced can be freed. Cycles of references can exist through the Wasm Table, which means that cycles would need to be detected and all of the objects in the cycle freed if the cycle is not referenced from elsewhere. The garbage collection would be invoked by the runtime itself periodically or when needed. Potentially the collection could be configured or left to the embedder to invoke.</p>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\nIt seems that WAVM has implemented a GC function that can be called by the embedder. <a href=\"https://github.com/WAVM/WAVM/blob/530f33cd30c6ea5114a227175b3a7b0af77cadaa/Lib/Runtime/ObjectGC.cpp#L252\">https://github.com/WAVM/WAVM/blob/530f33cd30c6ea5114a227175b3a7b0af77cadaa/Lib/Runtime/ObjectGC.cpp#L252</a><br>\nThe function to allows garbage collection of unused modules and objects, but it looks like it could only be invoked when the host has control.  On the other hand it allows the embedder to have some control on when the collection should occur. The addition of a function to the API for essentially basic functionality that is required in long term may not be something that is wanted as it may never be a part of a standard API for Wasm (for example C-API).</p>\n</blockquote>",
        "id": 210616251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600523494
    },
    {
        "content": "<p>Rochet2 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2210\">Issue #2210</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;<br>\nGarbage collection of Store objects that are no longer referenced.<br>\nThe specification notes:</p>\n<blockquote>\n<p>In practice, implementations may apply techniques like garbage collection to remove objects from the store that are no longer referenced. However, such techniques are not semantically observable, and hence outside the scope of this specification.</p>\n</blockquote>\n<p>From this I infer that the implementing or not implementing such a feature and the details of the implementation are left for the runtime. I imagine that future proposals can affect the implementation this feature. The feature seems to be required in the long term.</p>\n<p>Related topics and links:</p>\n<ul>\n<li><a href=\"#narrow/stream/206238-general/topic/Unloading.20a.20module\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Unloading.20a.20module</a></li>\n<li><a href=\"https://www.w3.org/TR/wasm-core-1/#store%E2%91%A0\">https://www.w3.org/TR/wasm-core-1/#store%E2%91%A0</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/960\">https://github.com/bytecodealliance/wasmtime/issues/960</a></li>\n</ul>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;<br>\nCurrently Wasm modules can be linked together, but there is no way to unload modules completely. As a result, programs that would require loading modules for temporary use or to conserve memory will \"leak memory\" as time goes on and eventually the program will run into issues with memory limitations. Garbage collection of objects that are no longer referenced from anywhere would free the memory of those unused objects.</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;<br>\nOne approach is to use reference counting of all objects in a store. With the counting, objects that are no longer referenced can be freed. Cycles of references can exist through the Wasm Table, which means that cycles would need to be detected and all of the objects in the cycle freed if the cycle is not referenced from elsewhere. The garbage collection would be invoked by the runtime itself periodically or when needed. Potentially the collection could be configured or left to the embedder to invoke.</p>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\nIt seems that WAVM has implemented a GC function that can be called by the embedder. On the surface it looks like a mark and sweep approach, but I am unsure. <a href=\"https://github.com/WAVM/WAVM/blob/530f33cd30c6ea5114a227175b3a7b0af77cadaa/Lib/Runtime/ObjectGC.cpp#L252\">https://github.com/WAVM/WAVM/blob/530f33cd30c6ea5114a227175b3a7b0af77cadaa/Lib/Runtime/ObjectGC.cpp#L252</a><br>\nThe function to allows garbage collection of unused modules and objects, but it looks like it could only be invoked when the host has control.  On the other hand it allows the embedder to have some control on when the collection should occur. The addition of a function to the API for essentially basic functionality that is required in long term may not be something that is wanted as it may never be a part of a standard API for Wasm (for example C-API).</p>\n</blockquote>",
        "id": 210683964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600633930
    },
    {
        "content": "<p>Rochet2 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2210\">Issue #2210</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;<br>\nGarbage collection of Store objects that are no longer referenced.<br>\nThe specification notes:</p>\n<blockquote>\n<p>In practice, implementations may apply techniques like garbage collection to remove objects from the store that are no longer referenced. However, such techniques are not semantically observable, and hence outside the scope of this specification.</p>\n</blockquote>\n<p>From this I infer that the implementing or not implementing such a feature and the details of the implementation are left for the runtime. I imagine that future proposals can affect the implementation this feature. The feature seems to be required in the long term.</p>\n<p>Related topics and links:</p>\n<ul>\n<li><a href=\"#narrow/stream/206238-general/topic/Unloading.20a.20module\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Unloading.20a.20module</a></li>\n<li><a href=\"https://www.w3.org/TR/wasm-core-1/#store%E2%91%A0\">https://www.w3.org/TR/wasm-core-1/#store%E2%91%A0</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/960\">https://github.com/bytecodealliance/wasmtime/issues/960</a></li>\n</ul>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;<br>\nCurrently Wasm modules can be linked together, but there is no way to unload modules completely. As a result, programs that would require loading modules for temporary use or to conserve memory will \"leak memory\" as time goes on and eventually the program will run into issues with memory limitations. Garbage collection of objects that are no longer referenced from anywhere would free the memory of those unused objects.</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;<br>\nOne approach is to use reference counting of all objects in a store. With the counting, objects that are no longer referenced can be freed. Cycles of references can exist through the Wasm Table, which means that cycles would need to be detected and all of the objects in the cycle freed if the cycle is not referenced from elsewhere. The garbage collection would be done immediately when possible or invoked by the runtime itself periodically or when needed. Potentially the collection could be configured or left to the embedder to invoke.</p>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\nIt seems that WAVM has implemented a GC function that can be called by the embedder. On the surface it looks like a mark and sweep approach, but I am unsure. <a href=\"https://github.com/WAVM/WAVM/blob/530f33cd30c6ea5114a227175b3a7b0af77cadaa/Lib/Runtime/ObjectGC.cpp#L252\">https://github.com/WAVM/WAVM/blob/530f33cd30c6ea5114a227175b3a7b0af77cadaa/Lib/Runtime/ObjectGC.cpp#L252</a><br>\nThe function to allows garbage collection of unused modules and objects, but it looks like it could only be invoked when the host has control.  On the other hand it allows the embedder to have some control on when the collection should occur. The addition of a function to the API for essentially basic functionality that is required in long term may not be something that is wanted as it may never be a part of a standard API for Wasm (for example C-API).</p>\n</blockquote>",
        "id": 210684008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600634006
    },
    {
        "content": "<p>Rochet2 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2210\">Issue #2210</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;<br>\nGarbage collection of Store objects that are no longer referenced.<br>\nThe specification notes:</p>\n<blockquote>\n<p>In practice, implementations may apply techniques like garbage collection to remove objects from the store that are no longer referenced. However, such techniques are not semantically observable, and hence outside the scope of this specification.</p>\n</blockquote>\n<p>From this I infer that the implementing or not implementing such a feature and the details of the implementation are left for the runtime. I imagine that future proposals can affect the implementation this feature. The feature seems to be required in the long term.</p>\n<p>Interestingly, the module linking proposal has a requirement not to use a GC. That requirement potentially affects this feature's implementation.</p>\n<p>Related topics and links:</p>\n<ul>\n<li><a href=\"#narrow/stream/206238-general/topic/Unloading.20a.20module\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Unloading.20a.20module</a></li>\n<li><a href=\"https://www.w3.org/TR/wasm-core-1/#store%E2%91%A0\">https://www.w3.org/TR/wasm-core-1/#store%E2%91%A0</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/960\">https://github.com/bytecodealliance/wasmtime/issues/960</a></li>\n<li><a href=\"https://github.com/WebAssembly/module-linking/blob/master/proposals/module-linking/Explainer.md#additional-requirements\">https://github.com/WebAssembly/module-linking/blob/master/proposals/module-linking/Explainer.md#additional-requirements</a></li>\n</ul>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;<br>\nCurrently Wasm modules can be linked together, but there is no way to unload modules completely. As a result, programs that would require loading modules for temporary use or to conserve memory will \"leak memory\" as time goes on and eventually the program will run into issues with memory limitations. Garbage collection of objects that are no longer referenced from anywhere would free the memory of those unused objects.</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;<br>\nOne approach is to use reference counting of all objects in a store. With the counting, objects that are no longer referenced can be freed. Cycles of references can exist through the Wasm Table, which means that cycles would need to be detected and all of the objects in the cycle freed if the cycle is not referenced from elsewhere. The garbage collection would be done immediately when possible or invoked by the runtime itself periodically or when needed. Potentially the collection could be configured or left to the embedder to invoke.</p>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\nIt seems that WAVM has implemented a GC function that can be called by the embedder. On the surface it looks like a mark and sweep approach, but I am unsure. <a href=\"https://github.com/WAVM/WAVM/blob/530f33cd30c6ea5114a227175b3a7b0af77cadaa/Lib/Runtime/ObjectGC.cpp#L252\">https://github.com/WAVM/WAVM/blob/530f33cd30c6ea5114a227175b3a7b0af77cadaa/Lib/Runtime/ObjectGC.cpp#L252</a><br>\nThe function to allows garbage collection of unused modules and objects, but it looks like it could only be invoked when the host has control.  On the other hand it allows the embedder to have some control on when the collection should occur. The addition of a function to the API for essentially basic functionality that is required in long term may not be something that is wanted as it may never be a part of a standard API for Wasm (for example C-API).</p>\n</blockquote>",
        "id": 216079759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604926592
    }
]