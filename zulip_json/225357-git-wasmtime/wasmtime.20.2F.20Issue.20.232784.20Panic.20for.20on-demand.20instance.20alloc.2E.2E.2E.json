[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2784\">Issue #2784</a> (assigned to peterhuene):</p>\n<blockquote>\n<h3>Steps to Reproduce</h3>\n<p>On Linux, build <code>wasmtime</code> with the <code>uffd</code> feature and run the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">(module</span>\n<span class=\"s\">    (memory (export \"</span><span class=\"n\">memory</span><span class=\"s\">\") 100)</span>\n<span class=\"s\">    (data (i32.const 0) \"</span><span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"o\">!</span><span class=\"s\">\")</span>\n<span class=\"s\">)\"</span><span class=\"err\">#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The module should instantiate.</p>\n<h3>Actual Results</h3>\n<p>Panic:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'main' panicked at 'source slice length (65536) does not match destination slice length (6553600)'\n</code></pre></div>\n<p>Caused by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4471d27567237559d0190c1e428d385961811778/crates/runtime/src/instance/allocator.rs#L382\">this call to <code>copy_from_slice</code></a> that did not properly provide an upper-bound for the range.</p>\n<p>This was missed by the uffd tests because they specifically use the pooling allocator which skips initialization of the data segments by not calling <code>initialize_instance</code>.</p>\n<p>The tests should also be run with the on-demand allocator with the uffd feature enabled.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>HEAD</code></p>\n<p>Operating system: Linux with <code>uffd</code> feature</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 232042335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616799071
    },
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2784\">Issue #2784</a> (assigned to peterhuene):</p>\n<blockquote>\n<h3>Steps to Reproduce</h3>\n<p>On Linux, build <code>wasmtime</code> with the <code>uffd</code> feature and run the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">(module</span>\n<span class=\"s\">    (memory (export \"</span><span class=\"n\">memory</span><span class=\"s\">\") 100)</span>\n<span class=\"s\">    (data (i32.const 0) \"</span><span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"o\">!</span><span class=\"s\">\")</span>\n<span class=\"s\">)\"</span><span class=\"err\">#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The module should instantiate.</p>\n<h3>Actual Results</h3>\n<p>Panic:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'main' panicked at 'source slice length (65536) does not match destination slice length (6553600)'\n</code></pre></div>\n<p>Caused by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4471d27567237559d0190c1e428d385961811778/crates/runtime/src/instance/allocator.rs#L382\">this call to <code>copy_from_slice</code></a> that did not properly provide an upper-bound for the range.</p>\n<p>This was missed by the uffd tests because they specifically use the pooling allocator which skips initialization of the data segments by not calling <code>initialize_instance</code>.</p>\n<p>The tests should also be run with the on-demand allocator with the uffd feature enabled.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>HEAD</code></p>\n<p>Operating system: Linux with <code>uffd</code> feature</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 232042336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616799071
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2784\">Issue #2784</a> (assigned to peterhuene):</p>\n<blockquote>\n<h3>Steps to Reproduce</h3>\n<p>On Linux, build <code>wasmtime</code> with the <code>uffd</code> feature and run the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">(module</span>\n<span class=\"s\">    (memory (export \"</span><span class=\"n\">memory</span><span class=\"s\">\") 100)</span>\n<span class=\"s\">    (data (i32.const 0) \"</span><span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"o\">!</span><span class=\"s\">\")</span>\n<span class=\"s\">)\"</span><span class=\"err\">#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The module should instantiate.</p>\n<h3>Actual Results</h3>\n<p>Panic:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'main' panicked at 'source slice length (65536) does not match destination slice length (6553600)'\n</code></pre></div>\n<p>Caused by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4471d27567237559d0190c1e428d385961811778/crates/runtime/src/instance/allocator.rs#L382\">this call to <code>copy_from_slice</code></a> that did not properly provide an upper-bound for the range.</p>\n<p>This was missed by the uffd tests because they specifically use the pooling allocator which skips initialization of the data segments by not calling <code>initialize_instance</code>.</p>\n<p>The tests should also be run with the on-demand allocator with the uffd feature enabled.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>HEAD</code></p>\n<p>Operating system: Linux with <code>uffd</code> feature</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 232042337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616799071
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2784#issuecomment-808573170\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2784\">Issue #2784</a>:</p>\n<blockquote>\n<p>I think we missed this in the wast tests because a lot of them use an initial size of the memory of <code>1</code>, which would cause the range to be correct.</p>\n</blockquote>",
        "id": 232042745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616799409
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2784#issuecomment-808573170\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2784\">Issue #2784</a>:</p>\n<blockquote>\n<p>I think we missed this in the wast tests because a lot of them use an initial size of the memory of <code>1</code>, which would cause the range to be correct for initializing the data segments.</p>\n</blockquote>",
        "id": 232042807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616799482
    },
    {
        "content": "<p>peterhuene closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2784\">Issue #2784</a> (assigned to peterhuene):</p>\n<blockquote>\n<h3>Steps to Reproduce</h3>\n<p>On Linux, build <code>wasmtime</code> with the <code>uffd</code> feature and run the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">(module</span>\n<span class=\"s\">    (memory (export \"</span><span class=\"n\">memory</span><span class=\"s\">\") 100)</span>\n<span class=\"s\">    (data (i32.const 0) \"</span><span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"o\">!</span><span class=\"s\">\")</span>\n<span class=\"s\">)\"</span><span class=\"err\">#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The module should instantiate.</p>\n<h3>Actual Results</h3>\n<p>Panic:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'main' panicked at 'source slice length (65536) does not match destination slice length (6553600)'\n</code></pre></div>\n<p>Caused by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4471d27567237559d0190c1e428d385961811778/crates/runtime/src/instance/allocator.rs#L382\">this call to <code>copy_from_slice</code></a> that did not properly provide an upper-bound for the range.</p>\n<p>This was missed by the uffd tests because they specifically use the pooling allocator which skips initialization of the data segments by not calling <code>initialize_instance</code>.</p>\n<p>The tests should also be run with the on-demand allocator with the uffd feature enabled.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>HEAD</code></p>\n<p>Operating system: Linux with <code>uffd</code> feature</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 232967471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617409836
    }
]