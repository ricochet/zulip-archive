[
    {
        "content": "<p>ilikepi63 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272#issuecomment-1040624591\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>@alexcrichton The list above doesn't seem to be updated with the examples that have been submitted. Is there anything that anyone can begin working on at the moment? </p>\n</blockquote>",
        "id": 272016750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644949469
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027407
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027412
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027416
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027420
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027429
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027437
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027443
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027450
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027452
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[ ] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027457
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[x] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027463
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[x] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027466
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[x] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027467
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[x] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[ ] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027469
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[x] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[ ] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272135999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027470
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[x] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[x] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272136006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027472
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272#issuecomment-1041823961\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>Ah thanks for the ping but I think that this is largely done now and this is pretty old now so I'm going to go ahead and close this.</p>\n</blockquote>",
        "id": 272136149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027522
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1272\">issue #1272</a>:</p>\n<blockquote>\n<p>I'd like to use this issue as a tracking issue for filling out gaps in <code>wasmtime</code>'s introductory documentation. This includes <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/docs\">our book</a> (<a href=\"https://bytecodealliance.github.io/wasmtime/\">rendered</a>), API documentation (<a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">rendered</a>), and <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api/examples\">examples</a>. (or anything else others can think of as well!)</p>\n<p>Below I'm gonna fill out a bunch of checkmarks and checkboxes for what is currently missing <em>at this time</em>. If you'd like to help in and document things, please feel free to do so! If you leave a comment on this issue along with what you'd like to help fill in, we'll edit your name into the description here to know that it's claimed. Any and all help here is greatly appreciated!</p>\n<h2>Book Documentation</h2>\n<p>As a precursor I'll say that this is organized largely page-by-page in the book. The current organization of the book was an initial proposal from awhile ago and thinking back on it some of it may be a little redundant. Please feel free to also discuss the layout of the book and what documentation would best go where!</p>\n<ul>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/tutorial.html\">Step-by-step tutorial to create and run hello-world.wasm</a>. This is intended to be a gentle introduction to running code with wasmtime, originating from nothing and ending using the <code>wasmtime</code> CLI to execute a Rust-generated WebAssembly file - @noculture </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/examples.html\">List of example programs compiled to WebAssembly</a>. We'll want to include some listings of a few \"hello world\" wasm modules as well as some more complicated ones like Rust projects with Cargo dependencies (e.g. a markdown parser)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-python.html\">Documenation of using wasm from Python</a> - @jjsullivan5196 </li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\">Documentation of using wasm from .NET</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-rust.html\">Documentation of using wasm from Rust</a> (not necessarily detailed embedder docs, but more of how you might use wasmtime at a high level to plug into a larger application)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/lang-bash.html\">Documentation of using wasm from bash</a> (aka examples of using the CLI)</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-c.html\">Writing WebAssembly from C/C++</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-markdown.html\">Writing WebAssembly, markdown example</a> - @humancalico</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed.html\">Embedding wasmtime overview</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-rust.html\">Embedding wasmtime in Rust</a> - currently has docs but feels a bit light on content</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/embed-c.html\">Embedding wasmtime in C/C++</a></li>\n<li>[x] Embedding wasmtime in .NET - probably want a page on this?</li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/stability.html\">What stability means in wasmtime</a> - probably want to talk about what our version scheme is, what's stable, what's not, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-release.html\">Release process</a> - documenting a release cadence, when releases happen, policies for releases, where releases are announced, etc.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/stability-platform-support.html\">Platform support</a> - currently contains a lot of introductory documentation, feels pretty light though and like it could be better tied together.</li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security.html\">Security policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-disclosure.html\">Disclosure policy</a></li>\n<li>[x] <a href=\"https://bytecodealliance.github.io/wasmtime/security-sandboxing.html\">Sandboxing</a> - @sunfishcode </li>\n<li>[ ] <a href=\"https://bytecodealliance.github.io/wasmtime/contributing-governance.html\">Governance</a></li>\n</ul>\n<h2>API Documentation</h2>\n<ul>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/\">crate documentation</a> feels lacking and could use a broad example to introduce the crate.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Module.html\"><code>Module</code> type</a> should have at least one example somewhere.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html\"><code>Instance</code> type</a> should have at least one example.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Store.html\"><code>Store</code> type</a> needs more documentation about what it is, although this is somewhat up for debate in other issues as well.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html\"><code>Memory</code> type</a> needs examples of safe usage, and double-checks on wording about unsafe usage.</li>\n<li>[x] The <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html\"><code>Func</code> type</a> could use an example on the <code>get</code> family of methods.</li>\n<li>[x] Types which correspond to the <a href=\"https://webassembly.github.io/spec/core/index.html\">wasm specification</a> should link there where possible.</li>\n</ul>\n<h2>Examples</h2>\n<p>I think we want an overhaul of how our examples work. Here's my proposal for what we need to do:</p>\n<ul>\n<li>[x] Move Rust examples to a top-level <code>examples</code> directory - @alexcrichton </li>\n<li>[x] Move C examples to the top-level <code>examples</code> directory too - @alexcrichton </li>\n<li>[x] Every example has a comment at the top of the file of how to build and run it - @alexcrichton <ul>\n<li>Rust is typically <code>cargo run --example foo</code></li>\n<li>C is <code>gcc examples/foo.c -I crates/c-api/include -o foo &amp;&amp; ./foo</code> (ish)</li>\n</ul>\n</li>\n<li>[x] Wasm files are never checked in for examples - @alexcrichton <ul>\n<li>Either wasm is written inline as a <code>*.wat</code> string</li>\n<li>Or example is structured as <code>examples/name/main.rs</code> with a corresponding <code>examples/name/wasm/Cargo.toml</code> which is a Rust project compiled to wasm. (or <code>examples/name/wasm.c</code> if we want to show off a C-compiled wasm example)</li>\n</ul>\n</li>\n<li>[x] Every example is available in both Rust and C - @alexcrichton <ul>\n<li>For <code>examples/foo.rs</code> we have a corresponding <code>examples/foo.c</code></li>\n<li>For <code>examples/foo/main.rs</code> we have a corresponding <code>examples/foo/main.c</code></li>\n</ul>\n</li>\n<li>[ ] Example showing how to link in the WASI functions</li>\n<li>[ ] Example of reading a string from a wasm module </li>\n<li>[ ] Example of a string processor, for example a markdown renderer</li>\n<li>[x] All examples are compiled and run on CI, regardless of language, on our three main platforms. - @alexcrichton <br>\n</li>\n</ul>\n</blockquote>",
        "id": 272136150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645027522
    }
]