[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669#issuecomment-1613361217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669\">issue #6669</a>:</p>\n<blockquote>\n<p>Could this perhaps remove the <code>set_clocks</code> configuration method as well? I think it could otherwise be a bit surprising that <code>set_clocks</code> could override <code>set_monotonic_clock</code> for example, but if it doesn't exist then configuration should still be possible and there shouldn't be odd interactions between methods in theory.</p>\n</blockquote>",
        "id": 370821693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688051617
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669#issuecomment-1613458737\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669\">issue #6669</a>:</p>\n<blockquote>\n<p>We should drop the WasiClocks intermediate struct entirely and just have two members of WasiCtx for the wall and monotonic clock - would you be willing to do that?</p>\n</blockquote>",
        "id": 370837258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688054365
    },
    {
        "content": "<p>rylev <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669#issuecomment-1614895255\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669\">issue #6669</a>:</p>\n<blockquote>\n<p>@pchickey I've renamed the traits. Unfortunately, the compiler seems to require the <code>Send</code> and <code>Sync</code> bounds. I was surprised by this as well... </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0308</span><span class=\"p\">]</span>: <span class=\"nc\">mismatched</span><span class=\"w\"> </span><span class=\"n\">types</span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">preview2</span><span class=\"o\">/</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">50</span>:<span class=\"mi\">30</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"mi\">50</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">monotonic_clock</span>: <span class=\"nc\">monotonic_clock</span><span class=\"p\">(),</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                              </span><span class=\"o\">^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">HostMonotonicClock</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">HostMonotonicClock</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">HostMonotonicClock</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">`</span>\n<span class=\"w\">              </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">HostMonotonicClock</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">`</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 371229371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688142521
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669#issuecomment-1614919009\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669\">issue #6669</a>:</p>\n<blockquote>\n<p>@rylev The PR here is good, but separately, I'm curious; would you mind saying a little more about what your use case looks like? I'm interested in learning about who's using non-default clocks and what they're using them for.</p>\n</blockquote>",
        "id": 371237108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688143876
    },
    {
        "content": "<p>rylev <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669#issuecomment-1614961922\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669\">issue #6669</a>:</p>\n<blockquote>\n<p>@sunfishcode unfortunately it's not too interesting - just doing some testing around ABI conformance of wasm binaries built with old versions of wit-bindgen that have been adapted to run against the latest version of wasmtime. You can see the [code here(<a href=\"https://github.com/fermyon/spin-componentize/blob/d5caab107ca38a6e7adb0ff6c1cac94db73f7d36/abi-conformance/src/test_wasi.rs#L126-L138\">https://github.com/fermyon/spin-componentize/blob/d5caab107ca38a6e7adb0ff6c1cac94db73f7d36/abi-conformance/src/test_wasi.rs#L126-L138</a>).</p>\n</blockquote>",
        "id": 371249259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688146193
    },
    {
        "content": "<p>rylev edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669#issuecomment-1614961922\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6669\">issue #6669</a>:</p>\n<blockquote>\n<p>@sunfishcode unfortunately it's not too interesting - just doing some testing around ABI conformance of wasm binaries built with old versions of wit-bindgen that have been adapted to run against the latest version of wasmtime. You can see the <a href=\"https://github.com/fermyon/spin-componentize/blob/d5caab107ca38a6e7adb0ff6c1cac94db73f7d36/abi-conformance/src/test_wasi.rs#L126-L138\">code here</a>.</p>\n</blockquote>",
        "id": 371249354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688146204
    }
]