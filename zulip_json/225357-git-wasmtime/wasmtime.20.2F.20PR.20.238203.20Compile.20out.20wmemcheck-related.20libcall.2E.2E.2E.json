[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203\">PR #8203</a>.</p>",
        "id": 428043996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710985400
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203\">PR #8203</a>.</p>",
        "id": 428043997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710985400
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203\">PR #8203</a> from <code>alexcrichton:no-wmemcheck-libcalls</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Currently even when the <code>wmemcheck</code> Cargo feature is disabled the various related libcalls are still compiled into <code>wasmtime-runtime</code>. Additionally their signatures are translated when lowering functions, although the signatures are never used. This commit adds <code>#[cfg]</code> annotations to compile these all out when they're not enabled.</p>\n<p>Applying this change, however, uncovered a subtle bug in our libcalls. Libcalls are numbered in-order as-listed in the macro ignoring <code>#[cfg]</code>, but they're assigned a runtime slot in a <code>VMBuiltinFunctionsArray</code> structure which does respect <code>#[cfg]</code>. This meant, for example, that if <code>gc</code> was enabled and <code>wmemcheck</code> was disabled, as is the default for our tests, then there was a hole in the numbering where libcall numbers were mismatched at runtime and compile time.</p>\n<p>To fix this I've first added a const assertion that the runtime-number of libcalls equals the build-time number of libcalls. I then updated the macro a bit to plumb the <code>#[cfg]</code> differently and now libcalls are unconditionally defined regardless of cfgs but the implementation is <code>std::process::abort()</code> if it's compiled out.</p>\n<p>This ended up having a large-ish impact on the <code>disas</code> test suite. Lots of functions have fewer signatures translation because wmemcheck, even when disabled, was translating a few signatures. This also had some assembly changes, too, because I believe functions are considered leaves based on whether they declare a signature or not, so declaring an unused signature was preventing all wasm functions from being considered leaves.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 428043998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710985400
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203\">PR #8203</a>.</p>",
        "id": 428045000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710986335
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203#pullrequestreview-1952471482\">PR review</a>.</p>",
        "id": 428148802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711032839
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203#pullrequestreview-1952471482\">PR review</a>.</p>",
        "id": 428148803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711032839
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203#discussion_r1534076906\">PR review comment</a>:</p>\n<blockquote>\n<p>Why continue to define the function, but just have it abort? Is it really easier than not defining the function?</p>\n</blockquote>",
        "id": 428148804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711032839
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203#discussion_r1534078476\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice.</p>\n</blockquote>",
        "id": 428148806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711032839
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203#discussion_r1534074143\">PR review comment</a>:</p>\n<blockquote>\n<p>It seems nicer to <code>allow(unused_doc_comments)</code> in a few places than to lose the doc comments themselves, since they show up not only in rustdoc but also in editors using rust-analyzer/LSP and all that on hover and such.</p>\n</blockquote>",
        "id": 428148807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711032839
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203#pullrequestreview-1952570541\">PR review</a>.</p>",
        "id": 428156036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711034679
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203#discussion_r1534137083\">PR review comment</a>:</p>\n<blockquote>\n<p>Good question! The answer actually relates to your below comment of why to define panicking stubs rather than omitting the functions entirely. I actually first went down the route of entirely omitting the libcalls from both numbering and runtime, but I stopped after implementing that and realized that it could create a confusing situation:</p>\n<ul>\n<li>One machine, with wasmtime features enabled, compiles a wasm module.</li>\n<li>Another machine, with minimal features enabled, loads this module. </li>\n</ul>\n<p>These two machines have different libcall numbering schemes without knowing it. I ended up realizing this would be a pretty confusing issue to run into, so I wanted to instead have all the libcalls always have the same number whether they're actually needed or not at runtime.</p>\n<p>That then gave rise to needing to have something deal with <code>#[cfg]</code> and <code>#[cfg(not)]</code>. This is below in the trampoline where it uses <code>#[cfg(not(..))]</code> and that changes the pattern of the macro because it no longer matches all attributes but only <code>#[cfg]</code> attributes on each of these items.</p>\n<p>More-or-less I couldn't find a nice and easy way to make a macro pattern that would separate doc comments and cfg attributes, so I figured the loss of some minor rustdoc wasn't the end of the world and I demoted these to normal comments instead of doc comments. </p>\n</blockquote>",
        "id": 428156037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711034680
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203#pullrequestreview-1952781969\">PR review</a>.</p>",
        "id": 428172119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711039028
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203#discussion_r1534261607\">PR review comment</a>:</p>\n<blockquote>\n<p>Makes sense, reasonable tradeoff. Thanks for explaining!</p>\n</blockquote>",
        "id": 428172121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711039029
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8203\">PR #8203</a>.</p>",
        "id": 428182687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711042254
    }
]