[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4782#issuecomment-1227383286\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4782\">issue #4782</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 295249848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661439802
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4782#issuecomment-1227681794\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4782\">issue #4782</a>:</p>\n<blockquote>\n<p>Huh. I was going to suggest that if there are libcalls with undefined behavior on some inputs then we should be limiting what we pass them to ensure that we only use them in ways consistent with the semantics we want. But I went to check how libcalls like <code>UdivI64</code> or <code>IshlI64</code> are used, and as far as I can tell, they aren't. We should probably remove them, yeah?</p>\n<p>These libcalls are constructed in Rust source:</p>\n<ul>\n<li><code>ElfTlsGetAddr</code></li>\n<li><code>ElfTlsGetOffset</code></li>\n<li><code>Memcmp</code></li>\n<li><code>Memcpy</code></li>\n<li><code>Memmove</code></li>\n<li><code>Memset</code></li>\n<li><code>Probestack</code></li>\n</ul>\n<p>While these are constructed in the x64 ISLE rules (but not any other backend?):</p>\n<ul>\n<li><code>CeilF32</code></li>\n<li><code>CeilF64</code></li>\n<li><code>FloorF32</code></li>\n<li><code>FloorF64</code></li>\n<li><code>FmaF32</code></li>\n<li><code>FmaF64</code></li>\n<li><code>NearestF32</code></li>\n<li><code>NearestF64</code></li>\n<li><code>TruncF32</code></li>\n<li><code>TruncF64</code></li>\n</ul>\n<p><code>LibCall::for_inst</code> would construct some other libcalls, but apparently its only use was removed last year in bae4ec642798ff448ca88eab771b6fcea71e7884, so I've excluded it from the above lists.</p>\n</blockquote>",
        "id": 295297953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661456135
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4782#issuecomment-1227687272\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4782\">issue #4782</a>:</p>\n<blockquote>\n<blockquote>\n<p>But I went to check how libcalls like UdivI64 or IshlI64 are used, and as far as I can tell, they aren't. We should probably remove them, yeah?</p>\n</blockquote>\n<p>That sounds like a good idea.</p>\n<blockquote>\n<p>While these are constructed in the x64 ISLE rules (but not any other backend?):</p>\n</blockquote>\n<p>Yeah, x86 doesn't have native instructions for these without extensions, so we have to lower them as libcalls if some extensions are disabled. I only know about AArch64 but they have equivalents for these in the base ISA. Not sure about s390x but i assume its the same</p>\n<p>We can emit something like <code>CeilF32</code> or any other really. The only downside being that it puts us in the \"Changes fuzzer input do not merge\" category. I'm okay with that.</p>\n<p>I think the float libcalls don't trap at all.</p>\n</blockquote>",
        "id": 295299095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661456545
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4782#issuecomment-1228534413\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4782\">issue #4782</a>:</p>\n<blockquote>\n<p>I've changed this in a few ways, and since we are going to change the input of the fuzzer we might as well do it properly and generate multiple libcalls, so we now do that.</p>\n<p>I've also removed the unused libcalls and a few accessory bits.</p>\n</blockquote>",
        "id": 295430569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661522792
    }
]