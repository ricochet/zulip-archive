[
    {
        "content": "<p>abc767234318 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9645\">issue #9645</a>:</p>\n<blockquote>\n<p>I found the <code>rotl</code> instruction is defined as follows:   </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Rotate left.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Rotate the bits in ``x`` by ``y`` places.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Inputs:</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - x: Scalar or vector value to shift</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - y: Number of bits to shift</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Outputs:</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - a: A scalar or vector integer type</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(non_snake_case)]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">rotl</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctrl_typevar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_flow_graph</span><span class=\"p\">().</span><span class=\"n\">value_type</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dfg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">Binary</span><span class=\"p\">(</span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">Rotl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctrl_typevar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">first_result</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>It seems that it can accept any vector type as its argument <code>x</code>. But I get the following error:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">cranelift_filetests</span><span class=\"p\">::</span><span class=\"n\">concurrent</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FAIL</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">file_tests</span><span class=\"o\">/</span><span class=\"n\">multi_func</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n<span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">file_tests</span><span class=\"o\">/</span><span class=\"n\">multi_func</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">file_tests</span><span class=\"o\">/</span><span class=\"n\">multi_func</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">54</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"n\">typevar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">rotl</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 483608577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732158031
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9645\">issue #9645</a>:</p>\n<blockquote>\n<p>I found the <code>rotl</code> instruction is defined as follows:   </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Rotate left.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Rotate the bits in ``x`` by ``y`` places.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Inputs:</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - x: Scalar or vector value to shift</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - y: Number of bits to shift</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Outputs:</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - a: A scalar or vector integer type</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(non_snake_case)]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">rotl</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctrl_typevar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_flow_graph</span><span class=\"p\">().</span><span class=\"n\">value_type</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dfg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">Binary</span><span class=\"p\">(</span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">Rotl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctrl_typevar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">first_result</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>It seems that it can accept any vector type as its argument <code>x</code>. But I get the following error:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">cranelift_filetests</span><span class=\"p\">::</span><span class=\"n\">concurrent</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FAIL</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">file_tests</span><span class=\"o\">/</span><span class=\"n\">multi_func</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n<span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">file_tests</span><span class=\"o\">/</span><span class=\"n\">multi_func</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">file_tests</span><span class=\"o\">/</span><span class=\"n\">multi_func</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">54</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"n\">typevar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">rotl</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 483616379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732163807
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9645#issuecomment-2490061202\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9645\">issue #9645</a>:</p>\n<blockquote>\n<blockquote>\n<p>f32x4 is not a valid typevar for rotl</p>\n</blockquote>\n<p>This is the canonical answer -- the validator and all of the other infrastructure related to the CLIF instruction definitions comes from a single DSL where we define which types each instruction accepts, and there we have defined that <code>rotl</code> takes only integer types -- and so it is.</p>\n<p>We certainly could choose to implement rotates for floats as well, but we'd probably do so in the backends by bitcasting to ints and reusing existing implementations, so it wouldn't really be any more efficient than what you can do in CLIF today. So I'd recommend building this out of two bitcasts and an integer rotl instead.</p>\n</blockquote>",
        "id": 483616380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732163808
    },
    {
        "content": "<p>abc767234318 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9645#issuecomment-2490226423\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9645\">issue #9645</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>f32x4 is not a valid typevar for rotl</p>\n</blockquote>\n<p>This is the canonical answer -- the validator and all of the other infrastructure related to the CLIF instruction definitions comes from a single DSL where we define which types each instruction accepts, and there we have defined that <code>rotl</code> takes only integer types -- and so it is.</p>\n<p>We certainly could choose to implement rotates for floats as well, but we'd probably do so in the backends by bitcasting to ints and reusing existing implementations, so it wouldn't really be any more efficient than what you can do in CLIF today. So I'd recommend building this out of two bitcasts and an integer rotl instead.</p>\n</blockquote>\n<p>Would you consider modifying the description of the document? Because in the description of my other instructions, if vector defines a certain type, it will be declared. Such as:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Signed integer minimum.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Inputs:</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - x: A scalar or vector integer type</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - y: A scalar or vector integer type</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Outputs:</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - a: A scalar or vector integer type</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(non_snake_case)]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">smin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctrl_typevar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_flow_graph</span><span class=\"p\">().</span><span class=\"n\">value_type</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dfg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">Binary</span><span class=\"p\">(</span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">Smin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctrl_typevar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">first_result</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"sd\">/// Floating point addition.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Inputs:</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - x: A scalar or vector floating point number</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - y: A scalar or vector floating point number</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Outputs:</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - a: Result of applying operator to each lane</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(non_snake_case)]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">fadd</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctrl_typevar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_flow_graph</span><span class=\"p\">().</span><span class=\"n\">value_type</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dfg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">Binary</span><span class=\"p\">(</span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">Fadd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctrl_typevar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">first_result</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 483628703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732172654
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9645#issuecomment-2490259226\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9645\">issue #9645</a>:</p>\n<blockquote>\n<p>Sure, happy to review a PR!</p>\n</blockquote>",
        "id": 483631334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732173962
    }
]