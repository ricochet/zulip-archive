[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430\">PR #6430</a> from <code>afonso360:riscv-sat-arith-minmax</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR Implements the saturating arithmetic (<code>{u,s}{add,sub}_sat</code>) and min/max (<code>{u,s}{min,max}</code>) instructions.</p>\n<p>Only the saturating arithmetic functions are tested via WASM tests. The min/max instruction testsuites have other instructions mixed in that will be implemented in a future PR so we can't enable them yet. These are currently only tested via cranelift tests.</p>\n<p>I've also added i128 tests for min/max since I accidentally disabled these and found we didn't have anything catching that case.</p>\n</blockquote>",
        "id": 360353441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684781866
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430\">PR #6430</a>.</p>",
        "id": 360353444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684781867
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430\">PR #6430</a>.</p>",
        "id": 360353445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684781867
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430\">PR #6430</a>.</p>",
        "id": 360353446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684781867
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430#pullrequestreview-1437783643\">PR review</a>.</p>",
        "id": 360386681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684794448
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430#pullrequestreview-1437783643\">PR review</a>.</p>",
        "id": 360386682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684794448
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430#discussion_r1201233156\">PR review comment</a>:</p>\n<blockquote>\n<p>Stray thought, but the x64 backend has different types for <code>Gpr</code> and <code>Xmm</code> which represent a type-level distinction for different classes of registers. I've found that it's actually worked quite well for x64 and it's saved me a few times from mistakes. I realized I should be carefully reading the rules that use <code>*_vx</code> instructions to ensure the variable bound by <code>splat</code> comes second instead of first by accident (since I think that would compile past ISLE but wouldn't get past debug asserts perhaps in the backend).</p>\n<p>Having this sort of distinction though is a pretty large refactoring so definitely not necessary on this PR, but perhaps something to consider if you also find yourself trying to carefully ensure each register goes to the right spot.</p>\n</blockquote>",
        "id": 360386683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684794448
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430#discussion_r1202610564\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, that sounds like a good idea! And I've definitely had that happen to me. Not with <code>.vx</code>, but passing an F register into a <code>.vx</code> opcode.</p>\n<p>It should be fairly easy to start at least with the vector rules and helpers. I'm going to give that a try.</p>\n</blockquote>",
        "id": 360574237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684857328
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430#discussion_r1202610564\">PR review comment</a>.</p>",
        "id": 360574372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684857364
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6430\">PR #6430</a>.</p>",
        "id": 360583559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684859558
    }
]