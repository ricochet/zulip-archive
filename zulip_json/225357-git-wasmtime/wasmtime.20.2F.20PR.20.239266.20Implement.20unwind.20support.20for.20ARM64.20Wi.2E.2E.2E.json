[
    {
        "content": "<p>dpaoliello opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a> from <code>dpaoliello:arm64unwind</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>THIS IS A WORK IN PROGRESS.</p>\n<p>Current status: tests partially succeeding, but there is a crash in JITted code.</p>\n</blockquote>",
        "id": 471032036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726590372
    },
    {
        "content": "<p>dpaoliello edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<p>THIS IS A WORK IN PROGRESS.</p>\n<p>Current status: tests partially succeeding, but there is a crash in JITted code.</p>\n<p>Fixes #4992</p>\n</blockquote>",
        "id": 471032191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726590404
    },
    {
        "content": "<p>dpaoliello edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<p>THIS IS A WORK IN PROGRESS.</p>\n<p>Current status: tests partially succeeding, but there is a crash due to a malformed unwind table.</p>\n<p>Fixes #4992</p>\n</blockquote>",
        "id": 471035521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726591263
    },
    {
        "content": "<p>dpaoliello updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471053097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726596190
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#issuecomment-2356904999\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<p>At a high level this looks great, thanks for working on this! We'll probably be trusting you on the particulars of the table format here, and we unfortunately also probably won't be able to run this on CI (unless you know of way to run this and/or emulation on CI). That being said once you're able to run tests locally that's probably a good enough sign for now and should be good to land afterwards.</p>\n<p>It may also be worth noting that the test failures may not be related to unwinding necessarily, I believe Wasmtime has seen very little testing on Windows ARM64 meaning that there could be little other things here and there to overcome as well.</p>\n</blockquote>",
        "id": 471090051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726606074
    },
    {
        "content": "<p>dpaoliello updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471109412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726611718
    },
    {
        "content": "<p>dpaoliello updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471311719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726680269
    },
    {
        "content": "<p>dpaoliello updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471318228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726682510
    },
    {
        "content": "<p>dpaoliello edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<p>Implements unwind support for ARM64 Windows.</p>\n<p>This also fixes an issue with the current AArch64 ABI code where it wasn't emitting unwind instructions when adjusting the stack pointer (i.e., doing a stack alloc).</p>\n<p>Fixes #4992</p>\n</blockquote>",
        "id": 471319487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726682919
    },
    {
        "content": "<p>dpaoliello edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<p>Implements unwind support for ARM64 Windows.</p>\n<p>This also fixes an issue with the current AArch64 ABI code where it wasn't emitting unwind instructions when adjusting the stack pointer (i.e., doing a stack alloc).</p>\n<p>With this change, <code>cargo test</code> passes all tests on my Windows ARM64 device.</p>\n<p>Fixes #4992</p>\n</blockquote>",
        "id": 471319572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726682952
    },
    {
        "content": "<p><strong>dpaoliello</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a> as ready for review.</p>",
        "id": 471319735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726683008
    },
    {
        "content": "<p><strong>dpaoliello</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471319737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726683009
    },
    {
        "content": "<p><strong>dpaoliello</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471319739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726683009
    },
    {
        "content": "<p><strong>dpaoliello</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471319740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726683009
    },
    {
        "content": "<p><strong>dpaoliello</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471319741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726683009
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#pullrequestreview-2313438396\">PR review</a>:</p>\n<blockquote>\n<p>I made a pass over this code as well and it's generally very high-quality, thanks!</p>\n<p>To confirm specifically: does the whole Wasmtime suite (<code>cargo test</code> in the root) pass now on Windows/aarch64?</p>\n<p>Echoing Alex's thoughts -- if we can test this somehow (WINE on qemu-aarch64? or does Windows/x64 support running aarch64 binaries with emulation somehow? or ...?) then we can add release binaries.</p>\n<p>(There's precedent for adding release binaries before that, from the macOS/aarch64 case -- we just got GitHub runners for that a few months ago -- though in that case there was external CI run by a third party and those of us with new Macs also manually checked when able.)</p>\n</blockquote>",
        "id": 471322117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726683914
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#discussion_r1765509774\">PR review comment</a>:</p>\n<blockquote>\n<p>At least in new code, we're trying to avoid <code>as</code>-casts; even though here it's infallibly correct, could we write <code>u16::try_from(size).unwrap()</code> (or <code>.expect(\"constant max size for this case exceeds u16\")</code> or somesuch so that auditing for overflows is a little easier?</p>\n</blockquote>",
        "id": 471322118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726683914
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#pullrequestreview-2313440106\">PR review</a>:</p>\n<blockquote>\n<p>LGTM modulo one nitpick below</p>\n</blockquote>",
        "id": 471322167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726683942
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#discussion_r1765510624\">PR review comment</a>:</p>\n<blockquote>\n<p>Can the names of each of these individual codes match the name in the link above? Specifically <code>SmallStackAlloc</code> is called <code>alloc_s</code> there so I'd expect it to be <code>AllocS</code> here.</p>\n<p>Also, it would be nice to have doc comments for the variants that are missing them. For example, the difference between small vs medium stack alloc isn't immediately clear to the reader because they have the same <code>u16</code> data representation.</p>\n</blockquote>",
        "id": 471322169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726683943
    },
    {
        "content": "<p>dpaoliello <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#issuecomment-2359169995\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<blockquote>\n<p>To confirm specifically: does the whole Wasmtime suite (cargo test in the root) pass now on Windows/aarch64?</p>\n</blockquote>\n<p>Correct: <code>cargo test</code> in the root passes on an ARM64 Windows device.</p>\n<blockquote>\n<p>Echoing Alex's thoughts -- if we can test this somehow (WINE on qemu-aarch64? or does Windows/x64 support running aarch64 binaries with emulation somehow? or ...?) then we can add release binaries.</p>\n</blockquote>\n<p>That's a tough one.</p>\n<p>I've never tried WINE on AArch64 (emulated or physical), so I can't comment on that.</p>\n<p>Windows x64 can't run AArch64 binaries.</p>\n<p>GitHub does offer <a href=\"https://github.blog/news-insights/product-news/arm64-on-github-actions-powering-faster-more-efficient-build-systems/\">Windows ARM64 runners</a> however the only image available is a clean Windows 11 install (No Visual Studio, no Git, etc.). The lack of an image with pre-installed tools is also blocking making aarch64-pc-windows-msvc a tier 1 Rust target, so it's high on my priority list to get the correct team at GitHub/Microsoft to make and support those images.</p>\n</blockquote>",
        "id": 471325038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726685007
    },
    {
        "content": "<p>dpaoliello updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471325078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726685023
    },
    {
        "content": "<p>dpaoliello submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#pullrequestreview-2313500590\">PR review</a>.</p>",
        "id": 471325162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726685046
    },
    {
        "content": "<p>dpaoliello created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#discussion_r1765541726\">PR review comment</a>:</p>\n<blockquote>\n<p>Done: removes the <code>as</code> casts.</p>\n</blockquote>",
        "id": 471325163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726685046
    },
    {
        "content": "<p>dpaoliello edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#discussion_r1765541726\">PR review comment</a>.</p>",
        "id": 471325179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726685052
    },
    {
        "content": "<p>dpaoliello submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#pullrequestreview-2313501982\">PR review</a>.</p>",
        "id": 471325277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726685091
    },
    {
        "content": "<p>dpaoliello created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#discussion_r1765542479\">PR review comment</a>:</p>\n<blockquote>\n<p>Done: Renamed the alloc items and added a comment to explain the max size of each one.</p>\n</blockquote>",
        "id": 471325279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726685091
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#issuecomment-2359211344\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<p>If you're interested @dpaoliello the \"fully exhaustive test suite\" can be run with <code>./ci/run-tests.sh</code> locally (and/or copying out the cargo invocation since you probably don't have bash on windows) which basically is <code>cargo test --workspace</code> with a few <code>--exclude</code> for things that aren't supposed to be tested. That will run all <code>wasmtime-wasi</code> tests for example which exercise some \"larger modules\" than the <code>cargo test</code> does at the root of the repo. (but for development most of us I think do just <code>cargo test</code> and let CI figure everything else out). I mention this if you want to perform an extra double-check that all the various bits are working, but I suspect that if <code>cargo test</code> works this won't turn up much else.</p>\n<p>I'm also happy to leave this untested on CI until it's easier to set up CI with tools and such. The likelihood of this regressing is relatively low and we can always ping you @dpaoliello (if you're ok with that) if something looks like it's changing. Otherwise I'm also happy to investigate adding ARM64 binaries for Windows to our CI to get release artifacts as well.</p>\n</blockquote>",
        "id": 471329114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726686429
    },
    {
        "content": "<p>dpaoliello <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#issuecomment-2359263336\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<blockquote>\n<p>If you're interested @dpaoliello the \"fully exhaustive test suite\" can be run with <code>./ci/run-tests.sh</code> locally (and/or copying out the cargo invocation since you probably don't have bash on windows) which basically is <code>cargo test --workspace</code> with a few <code>--exclude</code> for things that aren't supposed to be tested. That will run all <code>wasmtime-wasi</code> tests for example which exercise some \"larger modules\" than the <code>cargo test</code> does at the root of the repo. (but for development most of us I think do just <code>cargo test</code> and let CI figure everything else out). I mention this if you want to perform an extra double-check that all the various bits are working, but I suspect that if <code>cargo test</code> works this won't turn up much else.</p>\n</blockquote>\n<p>Sure, I'll give it a go. Otherwise, I was starting to look into getting <code>rustc_codegen_cranelift</code> working.</p>\n<blockquote>\n<p>I'm also happy to leave this untested on CI until it's easier to set up CI with tools and such.</p>\n</blockquote>\n<p>I'll add it to my list of repos to setup CIs once the Windows ARM64 images are available...</p>\n<blockquote>\n<p>we can always ping you @dpaoliello (if you're ok with that) if something looks like it's changing.</p>\n</blockquote>\n<p>Yes, please!<br>\nFeel free to summon me for any Rust <code>-msvc</code> target or Windows on ARM issue.<br>\n</p>\n</blockquote>",
        "id": 471334633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726688327
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#pullrequestreview-2315913346\">PR review</a>:</p>\n<blockquote>\n<p>Thanks so much!</p>\n</blockquote>",
        "id": 471513029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726760113
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#issuecomment-2361435459\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<p>Looks like this is failing on our MSRV:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/10944294333/job/30385843729#step:18:102\">https://github.com/bytecodealliance/wasmtime/actions/runs/10944294333/job/30385843729#step:18:102</a></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0658</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">exclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">unwind</span><span class=\"o\">/</span><span class=\"n\">winarm64</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">231</span><span class=\"p\">:</span><span class=\"mi\">21</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">231</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">SMALL_STACK_ALLOC_MAX</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">unwind_codes</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">UnwindCode</span><span class=\"p\">::</span><span class=\"n\">AllocS</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">37854</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/rust-lang/rust/issues/37854&gt; for more information</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">use</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">inclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">..=</span><span class=\"n\">M</span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0658</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">exclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">unwind</span><span class=\"o\">/</span><span class=\"n\">winarm64</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">234</span><span class=\"p\">:</span><span class=\"mi\">21</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">234</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"n\">SMALL_STACK_ALLOC_MAX</span><span class=\"o\">..</span><span class=\"n\">MEDIUM_STACK_ALLOC_MAX</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">37854</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/rust-lang/rust/issues/37854&gt; for more information</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">use</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">inclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">..=</span><span class=\"n\">M</span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0658</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">exclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">unwind</span><span class=\"o\">/</span><span class=\"n\">winarm64</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">239</span><span class=\"p\">:</span><span class=\"mi\">21</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">239</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"n\">MEDIUM_STACK_ALLOC_MAX</span><span class=\"o\">..</span><span class=\"n\">LARGE_STACK_ALLOC_MAX</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">37854</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/rust-lang/rust/issues/37854&gt; for more information</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">use</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">inclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">..=</span><span class=\"n\">M</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 471519598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726762090
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#issuecomment-2361435459\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<p>Looks like this is failing on our MSRV of Rust 1.78:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/10944294333/job/30385843729#step:18:102\">https://github.com/bytecodealliance/wasmtime/actions/runs/10944294333/job/30385843729#step:18:102</a></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0658</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">exclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">unwind</span><span class=\"o\">/</span><span class=\"n\">winarm64</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">231</span><span class=\"p\">:</span><span class=\"mi\">21</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">231</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">SMALL_STACK_ALLOC_MAX</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">unwind_codes</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">UnwindCode</span><span class=\"p\">::</span><span class=\"n\">AllocS</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">37854</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/rust-lang/rust/issues/37854&gt; for more information</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">use</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">inclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">..=</span><span class=\"n\">M</span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0658</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">exclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">unwind</span><span class=\"o\">/</span><span class=\"n\">winarm64</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">234</span><span class=\"p\">:</span><span class=\"mi\">21</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">234</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"n\">SMALL_STACK_ALLOC_MAX</span><span class=\"o\">..</span><span class=\"n\">MEDIUM_STACK_ALLOC_MAX</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">37854</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/rust-lang/rust/issues/37854&gt; for more information</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">use</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">inclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">..=</span><span class=\"n\">M</span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0658</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">exclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">unwind</span><span class=\"o\">/</span><span class=\"n\">winarm64</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">239</span><span class=\"p\">:</span><span class=\"mi\">21</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">239</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"n\">MEDIUM_STACK_ALLOC_MAX</span><span class=\"o\">..</span><span class=\"n\">LARGE_STACK_ALLOC_MAX</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">37854</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/rust-lang/rust/issues/37854&gt; for more information</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">use</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">inclusive</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">..=</span><span class=\"n\">M</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 471519696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726762128
    },
    {
        "content": "<p>dpaoliello updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471522882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726763172
    },
    {
        "content": "<p>dpaoliello <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266#issuecomment-2361475855\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>:</p>\n<blockquote>\n<blockquote>\n<p>Looks like this is failing on our MSRV of Rust 1.78</p>\n</blockquote>\n<p>Fixed</p>\n</blockquote>",
        "id": 471522970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726763210
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471523829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726763495
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9266\">PR #9266</a>.</p>",
        "id": 471527938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726764907
    }
]