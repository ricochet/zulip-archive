[
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388545129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693581379
    },
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a> from <code>saulecabrera:winch-br_table</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change adds support for the <code>br_table</code> instruction, including several modifications to the existing control flow implementation:</p>\n<ul>\n<li>\n<p>Improved handling of jumps to loops: Previously, the compiler erroneously treated the result of loop blocks as the definitive result of the jump. This change fixes this bug.</p>\n</li>\n<li>\n<p>Streamlined result handling and stack pointer balancing: In the past, these operations were executed in two distinct steps, complicating the process of ensuring the correct invariants when emitting unconditional jumps. To simplify this, <code>CodeGenContext::unconditional_jump</code> is introduced . This function guarantees all necessary invariants are met, encapsulating the entire operation within a single function for easier understanding and maintenance.</p>\n</li>\n<li>\n<p>Handling of unreachable state at the end of a function: when reaching the end of a function in an unreachable state, clear the stack and ensure that the machine stack pointer is correctly placed according to the expectations of the outermost block.</p>\n</li>\n</ul>\n<p>In addition to the above refactoring, the main implementation of the <code>br_table</code> instruction involves emitting labels for each target. Within each label, an unconditional jump is emitted to the frame's label, ensuring correct stack pointer balancing  when the jump is emitted.</p>\n<p>While it is possible to optimize this process by avoiding intermediate labels when balancing isn't required, we've opted to maintain the current implementation until such optimization becomes necessary.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 388545131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693581379
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388545133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693581379
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388545134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693581380
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388545137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693581380
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>:</p>\n<blockquote>\n<p>This change adds support for the <code>br_table</code> instruction, including several modifications to the existing control flow implementation:</p>\n<ul>\n<li>\n<p>Improved handling of jumps to loops: Previously, the compiler erroneously treated the result of loop blocks as the definitive result of the jump. This change fixes this bug.</p>\n</li>\n<li>\n<p>Streamlined result handling and stack pointer balancing: In the past, these operations were executed in two distinct steps, complicating the process of ensuring the correct invariants when emitting unconditional jumps. To simplify this, <code>CodeGenContext::unconditional_jump</code> is introduced . This function guarantees all necessary invariants are met, encapsulating the entire operation within a single function for easier understanding and maintenance.</p>\n</li>\n<li>\n<p>Handling of unreachable state at the end of a function: when reaching the end of a function in an unreachable state, clear the stack and ensure that the machine stack pointer is correctly placed according to the expectations of the outermost block.</p>\n</li>\n</ul>\n<p>In addition to the above refactoring, the main implementation of the <code>br_table</code> instruction involves emitting labels for each target. Within each label, an unconditional jump is emitted to the frame's label, ensuring correct stack pointer balancing  when the jump is emitted.</p>\n<p>While it is possible to optimize this process by avoiding intermediate labels when balancing isn't required, I've opted to maintain the current implementation until such optimization becomes necessary.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 388545271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693581407
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388545364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693581429
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>:</p>\n<blockquote>\n<p>Part of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">https://github.com/bytecodealliance/wasmtime/issues/6528</a></p>\n<p>This change adds support for the <code>br_table</code> instruction, including several modifications to the existing control flow implementation:</p>\n<ul>\n<li>\n<p>Improved handling of jumps to loops: Previously, the compiler erroneously treated the result of loop blocks as the definitive result of the jump. This change fixes this bug.</p>\n</li>\n<li>\n<p>Streamlined result handling and stack pointer balancing: In the past, these operations were executed in two distinct steps, complicating the process of ensuring the correct invariants when emitting unconditional jumps. To simplify this, <code>CodeGenContext::unconditional_jump</code> is introduced . This function guarantees all necessary invariants are met, encapsulating the entire operation within a single function for easier understanding and maintenance.</p>\n</li>\n<li>\n<p>Handling of unreachable state at the end of a function: when reaching the end of a function in an unreachable state, clear the stack and ensure that the machine stack pointer is correctly placed according to the expectations of the outermost block.</p>\n</li>\n</ul>\n<p>In addition to the above refactoring, the main implementation of the <code>br_table</code> instruction involves emitting labels for each target. Within each label, an unconditional jump is emitted to the frame's label, ensuring correct stack pointer balancing  when the jump is emitted.</p>\n<p>While it is possible to optimize this process by avoiding intermediate labels when balancing isn't required, I've opted to maintain the current implementation until such optimization becomes necessary.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 388545519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693581471
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388548710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693582258
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388552933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693583612
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388552934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693583612
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388552935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693583612
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951#pullrequestreview-1607490758\">PR review</a>:</p>\n<blockquote>\n<p>This looks overall good to me, except for a bit of confusion around one stack-alignment case. With a slightly more detailed description in the comment I think it should be good though!</p>\n<p>(also as an fyi, I'm on PTO all of next week; happy to re-review today if it happens, otherwise further reviews will be a bit delayed, sorry)</p>\n</blockquote>",
        "id": 388583302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693594727
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951#pullrequestreview-1607490758\">PR review</a>:</p>\n<blockquote>\n<p>This looks overall good to me, except for a bit of confusion around one stack-alignment case. With a slightly more detailed description in the comment I think it should be good though!</p>\n<p>(also as an fyi, I'm on PTO all of next week; happy to re-review today if it happens, otherwise further reviews will be a bit delayed, sorry)</p>\n</blockquote>",
        "id": 388583303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693594727
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951#discussion_r1313400227\">PR review comment</a>:</p>\n<blockquote>\n<p>s/invaid/invalid/</p>\n</blockquote>",
        "id": 388583304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693594728
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951#discussion_r1313402050\">PR review comment</a>:</p>\n<blockquote>\n<p>I know this is pre-existing text (I might have even reviewed it the first time?) but for some reason I'm having trouble wrapping my head around the <code>current_sp &lt; target_sp</code> case here. Is the argument basically that the Wasm stack invariants (proper typing of blocks, etc) will fix it up? Or is this handled at the use-cases of this function? Either way it would be helpful to point out concretely what piece of the codegen handles the popping.</p>\n</blockquote>",
        "id": 388583306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693594728
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388584823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693595412
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951#pullrequestreview-1607551546\">PR review</a>.</p>",
        "id": 388585418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693595724
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951#discussion_r1313419218\">PR review comment</a>:</p>\n<blockquote>\n<p>I've added a bit more of docs on how this could happen. In general the first assert in this function (above) should always be true, which is what I was after with this refactor, which makes it easier to reason about IMHO. But with that comment I'm noting that when the code reaches the the stack pointer balancing part, the SP might be less if during the invocation of the callback the caller preemptively handles return values via <code>CodeGenContext::pop_abi_results</code> (e.g. what would happen during the emission of <code>br</code>). Hope this clarifies things.</p>\n</blockquote>",
        "id": 388585423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693595726
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951#pullrequestreview-1607650528\">PR review</a>:</p>\n<blockquote>\n<p>LGTM!</p>\n</blockquote>",
        "id": 388597050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693601125
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6951\">PR #6951</a>.</p>",
        "id": 388617481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693612822
    }
]