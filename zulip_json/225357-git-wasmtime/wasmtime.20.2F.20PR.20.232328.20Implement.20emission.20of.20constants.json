[
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328\">PR #2328</a> from <code>constants</code> to <code>main</code>:</p>\n<blockquote>\n<p>@cfallin, based on what we discussed in Zulip and #1385, here's a first pass on a way to emit constants using <code>MachBuffer::defer_constant</code>. Note that I had to do two mappings--one from <code>Constant</code> to <code>UsedConstant</code> and another from <code>UsedConstant</code> to <code>MachLabel</code>--in order to make this work (\"work\" is too strong--\"compile\"). I'm interested in your feedback before I fix this up and improve <code>gen_constant</code>.</p>\n</blockquote>",
        "id": 215501892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604432945
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328\">PR #2328</a>.</p>",
        "id": 215501901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604432951
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328\">PR #2328</a>.</p>",
        "id": 215501909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604432956
    },
    {
        "content": "<p><strong>abrown</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328\">PR #2328</a> as ready for review.</p>",
        "id": 215501918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604432961
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#pullrequestreview-523785224\">PR Review</a>.</p>",
        "id": 215650779,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604529957
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#pullrequestreview-523785224\">PR Review</a>.</p>",
        "id": 215650780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604529957
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r517674381\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Pre-existing, but I think this upward-padding alignment might be written incorrectly; it should be <code>(x + align - 1) &amp; ~(align - 1)</code>, not <code>x &amp; ~(align - 1)</code>. Eek. (On x64 <code>LabelUse::ALIGN</code> is <code>1</code> so no big deal, but...)  Could you change this to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">island_worst_case_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">island_worst_case_size</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">I</span>::<span class=\"n\">LabelUse</span>::<span class=\"n\">ALIGN</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">I</span>::<span class=\"n\">LabelUse</span>::<span class=\"n\">ALIGN</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or better, use an alignment helper function that we must surely already have somewhere?</p>\n</blockquote>",
        "id": 215650781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604529957
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r517671055\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yep, this seems fine; it's unlikely we'd have constants smaller than 8 bytes anyway.</p>\n</blockquote>",
        "id": 215650782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604529957
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r517672760\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think that the <code>HashMap</code> overhead is reasonable at the \"zero large constants\" evaluation point, which is where most functions will sit (I think?) except perhaps in SIMD-heavy code. As long as we don't pessimize the common-case compilation, then we're fine, and ~100 bytes of state while we're compiling a function is not bad. So, I'm happy with this -- others feel free to chime in, though :-)</p>\n</blockquote>",
        "id": 215650783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604529957
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r517670720\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, yes, this seems fine; the use-cases for both the static borrow and the inlined/owned data make sense. As a minor design point, folding these two together into a <code>Cow</code> might be a bit more idiomatic: we could have e.g. <code>ConstantDataBytes</code> that is a type-alias to a <code>Cow&lt;'static, [u8]&gt;</code> and then have <code>VCodeConstantData::Value(ConstantDataBytes)</code>. Perhaps that's too much type machinery but it would potentially let pass around \"owned or borrowed constant bytes\" elsewhere.</p>\n</blockquote>",
        "id": 215650784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604529957
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#pullrequestreview-524679521\">PR Review</a>.</p>",
        "id": 215775403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611044
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r518371537\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I didn't find the helper, but I was thinking that if we made <code>CodeOffset</code> an actual struct we could add an <code>align()</code> there. Also, are we sure we don't need to do saturating addition in a few more places in this code?</p>\n</blockquote>",
        "id": 215775404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611044
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#pullrequestreview-524681268\">PR Review</a>.</p>",
        "id": 215775762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611209
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r518374687\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Um, I might not be understanding what you mean but I separated <code>WellKnown</code> and <code>Generated</code> because <code>WellKnown</code> could be <code>'static</code> but <code>Generated</code> can never be <code>'static</code> because the compiler creates it on the fly (e.g. from a shuffle mask). How can I unify them?</p>\n</blockquote>",
        "id": 215775763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611209
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328\">PR #2328</a> from <code>constants</code> to <code>main</code>:</p>\n<blockquote>\n<p>@cfallin, based on what we discussed in Zulip and #1385, here's a first pass on a way to emit constants using <code>MachBuffer::defer_constant</code>. Note that I had to do two mappings--one from <code>Constant</code> to <code>UsedConstant</code> and another from <code>UsedConstant</code> to <code>MachLabel</code>--in order to make this work (\"work\" is too strong--\"compile\"). I'm interested in your feedback before I fix this up and improve <code>gen_constant</code>.</p>\n</blockquote>",
        "id": 215775826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611249
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#pullrequestreview-524685073\">PR Review</a>.</p>",
        "id": 215776354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611560
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r518377993\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is the beauty of <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\"><code>std::borrow::Cow</code></a>! It can hold either a borrow, or an owned thing, and know which is which. So the receiver can get a reference and use the data either way, and the <code>Cow</code> takes care of deallocation if and only if it's owned. A <code>Cow&lt;'static, [u8]&gt;</code> can either be a <code>&amp;'static [u8]</code> or a <code>Box&lt;[u8]&gt;</code> under the hood, and either way can give you a <code>&amp;[u8]</code> to play with.</p>\n<p>Anyway, not a huge deal if we don't use this -- it just stood out to me that the <code>Generated</code> and <code>WellKnown</code> variants were basically implementing the same pattern here.</p>\n</blockquote>",
        "id": 215776355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611560
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#pullrequestreview-524686019\">PR Review</a>.</p>",
        "id": 215776542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611653
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r518378686\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That's actually a very nice idea!</p>\n<p>Re: saturating addition -- perhaps, yes; we should audit this code. I'll take a look.</p>\n</blockquote>",
        "id": 215776543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611653
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#pullrequestreview-524689440\">PR Review</a>.</p>",
        "id": 215777134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611992
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r518381480\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ok, I see it now, and I think I could still make the de-duplication work by inspecting into <code>Cow::Borrowed</code>. Right now I am leaning towards keeping the current three-way separation because it more clearly informs the user of the decision they are making (we need to explicitly choose a variant and one of those, <code>Generated</code>, is not de-duplicated).</p>\n</blockquote>",
        "id": 215777135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604611992
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#pullrequestreview-524709806\">PR Review</a>.</p>",
        "id": 215780474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604613969
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#discussion_r518398385\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That's a good point; since this has meaning re: dedup as well I'm fine with the enum as-is. Thanks!</p>\n</blockquote>",
        "id": 215780475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604613969
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328#pullrequestreview-524710575\">PR Review</a>.</p>",
        "id": 215780595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604614051
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2328\">PR #2328</a>.</p>",
        "id": 215782188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604615104
    }
]