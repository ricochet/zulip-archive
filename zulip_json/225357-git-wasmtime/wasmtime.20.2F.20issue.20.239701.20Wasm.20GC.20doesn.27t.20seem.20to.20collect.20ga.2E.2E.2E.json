[
    {
        "content": "<p><a href=\"https://github.com/epsylonix\">epsylonix</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">Issue #9701</a>.</p>",
        "id": 485655798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154797
    },
    {
        "content": "<p>epsylonix opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Running Kotlin-compiled Wasm guest requires Wasm GC proposal to be implemented by the runtime and Wasmtime now officially supports Wasm GC since version 27.0.0. </p>\n<p>I'm embedding Wasmtime in Go (Wasmtime version in wasmtime-go updated to 27.0.0 locally) and running a benchmark that calls a simple guest function which makes small heap allocations. A minimal Kotlin guest function that reproduces the issue looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Kotlin\"><pre><span></span><code><span class=\"nd\">@OptIn</span><span class=\"p\">(</span><span class=\"n\">UnsafeWasmMemoryApi</span><span class=\"o\">::</span><span class=\"n\">class</span><span class=\"p\">)</span>\n<span class=\"nd\">@WasmExport</span><span class=\"p\">(</span><span class=\"s\">\"test\"</span><span class=\"p\">)</span>\n<span class=\"kd\">fun</span><span class=\"w\"> </span><span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">withScopedMemoryAllocator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">allocator</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kd\">val</span><span class=\"w\"> </span><span class=\"nv\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">allocator</span><span class=\"p\">.</span><span class=\"na\">allocate</span><span class=\"p\">(</span><span class=\"m\">16</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"na\">storeInt</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Running a benchmark which calls this this function from the host repeatedly results in <code>GC heap out of memory</code> error almost instantaneously. According to the discussion at <a href=\"#narrow/channel/217126-wasmtime/topic/How.20to.20deal.20with.20.22GC.20heap.20out.20of.20memory.22.20errors.3F\">#wamtime</a> this might be caused by an issue with Wasm GC implementation in Wasmtime.</p>\n<h3>Expected Results</h3>\n<p>Kotlin's <code>withScopedMemoryAllocator</code> is supposed to free all the memory allocated during the function call so this function shouldn't cause GC to run out of memory.</p>\n<h3>Actual Results</h3>\n<p>Wasm guest execution fails with a <code>GC heap out of memory</code> error after several calls to the function.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 27.0.0</p>\n<p>Operating system: macOS</p>\n<p>Architecture: arm64</p>\n<h3>Extra Info</h3>\n<p>It would be great to have more details in the documentation on how Wasm GC works in Wasmtime. For example, Wasm GC uses it's own memory but I can't find any documentation on the default size of it or whether it can be configured.</p>\n</blockquote>",
        "id": 485655812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154799
    },
    {
        "content": "<p>alexcrichton assigned fitzgen to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>.</p>",
        "id": 485656079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154865
    },
    {
        "content": "<p>epsylonix edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Running Kotlin-compiled Wasm guest requires Wasm GC proposal to be implemented by the runtime and Wasmtime now officially supports Wasm GC since version 27.0.0. </p>\n<p>I'm embedding Wasmtime in Go (Wasmtime version in wasmtime-go updated to 27.0.0 locally) and running a benchmark that calls a simple guest function which makes small heap allocations. A minimal Kotlin guest function that reproduces the issue looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Kotlin\"><pre><span></span><code><span class=\"nd\">@OptIn</span><span class=\"p\">(</span><span class=\"n\">UnsafeWasmMemoryApi</span><span class=\"o\">::</span><span class=\"n\">class</span><span class=\"p\">)</span>\n<span class=\"nd\">@WasmExport</span><span class=\"p\">(</span><span class=\"s\">\"test\"</span><span class=\"p\">)</span>\n<span class=\"kd\">fun</span><span class=\"w\"> </span><span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">withScopedMemoryAllocator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">allocator</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kd\">val</span><span class=\"w\"> </span><span class=\"nv\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">allocator</span><span class=\"p\">.</span><span class=\"na\">allocate</span><span class=\"p\">(</span><span class=\"m\">16</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"na\">storeInt</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Running a benchmark which calls this this function from the host repeatedly results in <code>GC heap out of memory</code> error almost instantaneously. According to the discussion at <a href=\"#narrow/channel/217126-wasmtime/topic/How.20to.20deal.20with.20.22GC.20heap.20out.20of.20memory.22.20errors.3F\">#wamtime</a> this might be caused by an issue with Wasm GC implementation in Wasmtime.</p>\n<h3>Expected Results</h3>\n<p>Kotlin's <code>withScopedMemoryAllocator</code> is supposed to free all the memory allocated during the function call so this function shouldn't cause GC to run out of memory.</p>\n<h3>Actual Results</h3>\n<p>Wasm guest execution fails with a <code>GC heap out of memory</code> error after several calls to the function.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 27.0.0</p>\n<p>Operating system: macOS</p>\n<p>Architecture: arm64</p>\n<h3>Extra Info</h3>\n<p>It would be great to have more details in the documentation on how Wasm GC works in Wasmtime. For example, Wasm GC uses it's own memory but I can't find any documentation on the default size of it or whether it can be configured.</p>\n<p>Edit: actually, <code>MemoryAllocator</code> doesn't rely on Wasm GC and <a href=\"https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.wasm.unsafe/-memory-allocator/\">uses linear memory instead</a> so I guess the <code>GC heap out of memory</code> memory is not caused by the memory allocated using <code>allocator.allocate</code> but probably it is by all the allocations Kotlin does automatically which do use Wasm GC heap.</p>\n</blockquote>",
        "id": 485826153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733225718
    },
    {
        "content": "<p>epsylonix edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Running Kotlin-compiled Wasm guest requires Wasm GC proposal to be implemented by the runtime and Wasmtime now officially supports Wasm GC since version 27.0.0. </p>\n<p>I'm embedding Wasmtime in Go (Wasmtime version in wasmtime-go updated to 27.0.0 locally) and running a benchmark that calls a simple guest function which makes small heap allocations. A minimal Kotlin guest function that reproduces the issue looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Kotlin\"><pre><span></span><code><span class=\"nd\">@OptIn</span><span class=\"p\">(</span><span class=\"n\">UnsafeWasmMemoryApi</span><span class=\"o\">::</span><span class=\"n\">class</span><span class=\"p\">)</span>\n<span class=\"nd\">@WasmExport</span><span class=\"p\">(</span><span class=\"s\">\"test\"</span><span class=\"p\">)</span>\n<span class=\"kd\">fun</span><span class=\"w\"> </span><span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">withScopedMemoryAllocator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">allocator</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kd\">val</span><span class=\"w\"> </span><span class=\"nv\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">allocator</span><span class=\"p\">.</span><span class=\"na\">allocate</span><span class=\"p\">(</span><span class=\"m\">16</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"na\">storeInt</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Running a benchmark which calls this this function from the host repeatedly results in <code>GC heap out of memory</code> error almost instantaneously. According to the discussion at <a href=\"#narrow/channel/217126-wasmtime/topic/How.20to.20deal.20with.20.22GC.20heap.20out.20of.20memory.22.20errors.3F\">#wamtime</a> this might be caused by an issue with Wasm GC implementation in Wasmtime.</p>\n<h3>Expected Results</h3>\n<p>Kotlin's <code>withScopedMemoryAllocator</code> is supposed to free all the memory allocated during the function call so this function shouldn't cause GC to run out of memory.</p>\n<h3>Actual Results</h3>\n<p>Wasm guest execution fails with a <code>GC heap out of memory</code> error after several calls to the function.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 27.0.0</p>\n<p>Operating system: macOS</p>\n<p>Architecture: arm64</p>\n<h3>Extra Info</h3>\n<p>It would be great to have more details in the documentation on how Wasm GC works in Wasmtime. For example, Wasm GC uses it's own memory but I can't find any documentation on the default size of it or whether it can be configured.</p>\n<p>Edit: actually, <code>MemoryAllocator</code> doesn't rely on Wasm GC and <a href=\"https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.wasm.unsafe/-memory-allocator/\">uses linear memory instead</a> so probably the <code>GC heap out of memory</code> error is not caused by <code>allocator.allocate</code> calls but by all the allocations Kotlin does automatically which do use Wasm GC heap.</p>\n</blockquote>",
        "id": 485826452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733225799
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:gc label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">Issue #9701</a>.</p>",
        "id": 485884260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733240202
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701#issuecomment-2518415891\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>:</p>\n<blockquote>\n<p>Thanks for filing an issue! I just got back from vacation and am in the process of catching up on things.</p>\n<p>To confirm: you are using the default collector (DRC) not the null collector?</p>\n<p>FWIW, it is expected that the null collector will not collect garbage and allocation will eventually exhaust the GC heap.</p>\n<p>The DRC collector is a reference-counting collector and does not have a cycle collector, so it is also expected to leak GC objects if they are part of cycles. This is fundamental. Additionally, at this moment the DRC collector does not yet transitively decrement reference counts, so many acyclic garbage objects will be leaked as well (eg with a cons list, only the head would be collected and not anything in the list's tail). This latter bit of leakage is not fundamental nor intended long term, it just reflects that this is a young, WIP implementation.</p>\n<p>Final note: can you attach the <code>.wasm</code> or <code>.wat</code> file as a test case? This makes it easier for Wasmtime maintainers to debug and diagnose issues, since it removes needing to set up and invoke/understand/debug the Kotlin toolchain.</p>\n</blockquote>",
        "id": 486166401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733341466
    },
    {
        "content": "<p>epsylonix <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701#issuecomment-2519759716\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>:</p>\n<blockquote>\n<p>Thank you! Yes, this was tested with the default DRC GC. Sure, will provide a <code>.wasm</code> file shortly.</p>\n</blockquote>",
        "id": 486261301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733391397
    },
    {
        "content": "<p>epsylonix <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701#issuecomment-2519858839\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>:</p>\n<blockquote>\n<p>Here is a <code>.wasm</code> file compiled using the code I've mentioned in the issue description. Calling the <code>test </code> function of the same module instance several times results in <code>GC heap out of memory</code> for me. <code>withScopedMemoryAllocator</code> makes allocations in linear memory so probably the issue can be reproduced without it.<br>\n<a href=\"https://github.com/user-attachments/files/18021388/gc_heap_out_of_mem.wasm.zip\">gc_heap_out_of_mem.wasm.zip</a></p>\n<p>Even if there is a memory leak, this code doesn't seem to produce a lot of garbage and it runs out of memory almost immediately. What is the size of the GC heap? Is it configurable? <br>\n</p>\n</blockquote>",
        "id": 486268704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733393745
    },
    {
        "content": "<p>epsylonix edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701#issuecomment-2519858839\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>:</p>\n<blockquote>\n<p>Here is a <code>.wasm</code> file compiled using the code I've mentioned in the issue description. Calling the <code>test </code> function of the same module instance several times results in <code>GC heap out of memory</code> for me. <code>withScopedMemoryAllocator</code> makes allocations in linear memory so probably the issue can be reproduced without it.<br>\n<a href=\"https://github.com/user-attachments/files/18021388/gc_heap_out_of_mem.wasm.zip\">gc_heap_out_of_mem.wasm.zip</a></p>\n<p>Even if there is a memory leak, this code doesn't seem to produce a lot of garbage but it runs out of memory almost immediately. What is the size of the GC heap? Is it configurable? <br>\n</p>\n</blockquote>",
        "id": 486268844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733393782
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701#issuecomment-2521323184\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>:</p>\n<blockquote>\n<blockquote>\n<p>What is the size of the GC heap? Is it configurable?</p>\n</blockquote>\n<p>At the moment it has a fixed, fairly small capacity of 512KiB. This is just intended as a default for running tests. The plan is to have all the same knobs that linear memories have, we just haven't gotten there yet.</p>\n</blockquote>",
        "id": 486387518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733430310
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701#issuecomment-2521323505\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">issue #9701</a>:</p>\n<blockquote>\n<p>And thanks for attaching the wasm files!</p>\n</blockquote>",
        "id": 486387548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733430322
    }
]