[
    {
        "content": "<p>Berrysoft opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>As far as I know, we can use <code>preopened_dir</code> to preopen some directories and give WASM binary a limited filesystem access. However, I can't find a simple way to give the binary a full filesystem access. The following code doesn't work (with <code>wasi-cap-std-sync</code>) on Windows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">ipreopened_dir</span><span class=\"p\">(</span><span class=\"n\">cap_std</span>::<span class=\"n\">fs</span>::<span class=\"n\">Dir</span>::<span class=\"n\">from_std_file</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I would also like a cross-platform way to give full filesystem access.</p>\n</blockquote>",
        "id": 310613827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668693303
    },
    {
        "content": "<p>Berrysoft edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>As far as I know, we can use <code>preopened_dir</code> to preopen some directories and give WASM binary a limited filesystem access. However, I can't find a simple way to give the binary a full filesystem access. The following code doesn't work (with <code>wasi-cap-std-sync</code>) on Windows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">preopened_dir</span><span class=\"p\">(</span><span class=\"n\">cap_std</span>::<span class=\"n\">fs</span>::<span class=\"n\">Dir</span>::<span class=\"n\">from_std_file</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I would also like a cross-platform way to give full filesystem access.</p>\n</blockquote>",
        "id": 310613857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668693314
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1318680777\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>Could you say more about your use case? What would you like to do that requires using both Wasm and full filesystem access?<br>\n</p>\n</blockquote>",
        "id": 310614698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668693597
    },
    {
        "content": "<p>Berrysoft <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1318690224\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>I'm writing a software that includes a plugin framework. The plugins are WASM. Some of the plugins need to access files from the user input, and I cannot know about the input before creating the WASM runtime. The design of the software also tries to decouple the host and the plugins, so the host even don't know what the plugins will do. Therefore I need to give full filesystem access to the WASMs. If there are some files the host cannot access, it's OK. I only want to enable the same accessbility as the host runtime.</p>\n</blockquote>",
        "id": 310615968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668694017
    },
    {
        "content": "<p>Berrysoft edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1318690224\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>I'm writing a software that includes a plugin framework. The plugins are WASM. Some of the plugins need to access files from the user input, and I cannot know about the input before creating the WASM runtime. The design of the software also tries to decouple the host and the plugins, so the host even don't know what the plugins will do. Therefore I need to give full filesystem access to the WASMs. If there are some files the host cannot access, it's OK. I only want to enable the same accessibility as the host runtime.</p>\n</blockquote>",
        "id": 310616045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668694045
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1318699681\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<blockquote>\n<p>Some of the plugins need to access files from the user input, and I cannot know about the input before creating the WASM runtime.</p>\n</blockquote>\n<p>Assuming your software has a gui, selecting files likely uses a file dialog presented by the host. You could make the host use <code>wasi_ctx.table().push(Box::new(FileEntry::new(caps, file)))</code> after the user picked a file and then pass the returned fd to the guest I think.</p>\n</blockquote>",
        "id": 310617188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668694403
    },
    {
        "content": "<p>Berrysoft <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1318707023\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>@bjorn3 What about this case: the user input is a JSON with some paths, and the JSON plugin parses the JSON and go to find the files. The host cannot know about the paths except parsing the JSON itself. However the user input may be TOML or XML or YAML besides JSON. The format is defined by plugins but not host. Therefore the host cannot preopen the directory this time.</p>\n</blockquote>",
        "id": 310618242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668694729
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1318724222\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>I see. In that case try something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">drive</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">some_function_that_lists_all_drives</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">preopened_dir</span><span class=\"p\">(</span><span class=\"n\">cap_std</span>::<span class=\"n\">fs</span>::<span class=\"n\">Dir</span>::<span class=\"n\">from_std_file</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{drive}:\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"/{drive}\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then you can access <code>C:\\foo\\bar.txt</code> as <code>/c/foo/bar.txt</code> inside the guest.</p>\n</blockquote>",
        "id": 310620575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668695445
    },
    {
        "content": "<p>Berrysoft <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1318741389\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>A passable solution anyway, but I would appreciate a much prettier one. This solution needs platform-specific code, and the user input path should be change from <code>C:\\foo\\bar.txt</code> to <code>/c/foo/bar.txt</code>, which may make the following code much more complicated.</p>\n</blockquote>",
        "id": 310622870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668696208
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1318741413\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>@Berrysoft It's a little unclear from your message; is that your actual use case, or is it a hypothetical use case?<br>\n</p>\n</blockquote>",
        "id": 310622871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668696208
    },
    {
        "content": "<p>Berrysoft <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1318750589\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>@sunfishcode It is nearly the same as my actual use case. In the actual case, the difference between user input is not the format, but the custom (YAML) properties. Only the plugins know the specific property name, and go to find the files. However not all the custom properties are paths, and even the paths are relative ones to other properties, therefore the host runtime cannot try to parse all the values and try to preopen the files.</p>\n</blockquote>",
        "id": 310624217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668696615
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289#issuecomment-1324295044\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5289\">issue #5289</a>:</p>\n<blockquote>\n<p>@Berrysoft Do users know that all the paths will have a common parent directory that isn't a root directory? If so, they could add pre-opens for the parent directory (or directories).</p>\n<p>If not, that is indeed something the sandboxing model doesn't handle well. In order to make Wasm components composable with other Wasm components, we're trying to avoid depending on filesystem namespaces being implicitly shared between programs. That's difficult to do if a component expects to read from something on the outside which assumes it's in the same filesystem namespace and can resolve path names.<br>\n</p>\n</blockquote>",
        "id": 311718185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669154744
    }
]