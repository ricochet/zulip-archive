[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2582\">Issue #2582</a>:</p>\n<blockquote>\n<p>We should consider adding a CI job that runs at least the Cranelift Wasm spec tests using Valgrind. This would allow us to more easily and deterministically catch subtle issues with generated code.</p>\n<p>As an example, in #2432, we found that we were JIT'ing a sequence of instructions that depended on a subtle way on initial (undefined) register state. (Specifically, we used an SSE compare instruction, comparing a temp reg against itself to produce all-ones, because <code>x == x</code> always... except when <code>x</code> is NaN, hence nondeterministic failures.) Valgrind correctly models the semantics of the compare instruction that we used, and detected that our generated code depended on the initial (undefined) value of an XMM register.</p>\n</blockquote>",
        "id": 222675447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610593387
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2582\">Issue #2582</a>:</p>\n<blockquote>\n<p>We should consider adding a CI job that runs at least the Cranelift Wasm spec tests using Valgrind. This would allow us to more easily and deterministically catch subtle issues with generated code.</p>\n<p>As an example, in #2432, we found that we were JIT'ing a sequence of instructions that depended on a subtle way on initial (undefined) register state. Specifically, we used an SSE compare instruction, comparing a temp reg against itself to produce all-ones, because <code>x == x</code> always... except when <code>x</code> is NaN, hence nondeterministic failures. Valgrind correctly models the semantics of the compare instruction that we used, and detected that our generated code depended on the initial (undefined) value of an XMM register.</p>\n<p>We would likely benefit at least from the undefined-state tracking, as in above. ABI and VM interface-adjacent work (which tend to be pointer-heavy) may benefit from memcheck as well.</p>\n</blockquote>",
        "id": 222675564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610593543
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2582\">Issue #2582</a>:</p>\n<blockquote>\n<p>We should consider adding a CI job that runs at least the Cranelift Wasm spec tests using Valgrind. This would allow us to more easily and deterministically catch subtle issues with generated code.</p>\n<p>As an example, in #2432, we found that we were JIT'ing a sequence of instructions that depended in a subtle way on initial (undefined) register state. Specifically, we used an SSE compare instruction, comparing a temp reg against itself to produce all-ones, because <code>x == x</code> always... except when <code>x</code> is NaN, hence nondeterministic failures. Valgrind correctly models the semantics of the compare instruction that we used, and detected that our generated code depended on the initial (undefined) value of an XMM register.</p>\n<p>We would likely benefit at least from the undefined-state tracking, as in above. ABI and VM interface-adjacent work (which tend to be pointer-heavy) may benefit from memcheck as well.</p>\n</blockquote>",
        "id": 222675674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610593683
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2582#issuecomment-760012055\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2582\">Issue #2582</a>:</p>\n<blockquote>\n<p>For best avoidance of false positives, I'd suggest to use a snapshot of the trunk (<code>git://sourceware.org/git/valgrind.git</code>) if possible.  Also, if you do find anything that looks like a false positive, do let me know .. the battle against them is ongoing.<br>\n</p>\n</blockquote>",
        "id": 222689509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610612402
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2582\">Issue #2582</a>:</p>\n<blockquote>\n<p>We should consider adding a CI job that runs at least the Cranelift Wasm spec tests using Valgrind. This would allow us to more easily and deterministically catch subtle issues with generated code.</p>\n<p>As an example, in #2432, we found that we were JIT'ing a sequence of instructions that depended in a subtle way on initial (undefined) register state. Specifically, we used an SSE compare instruction, comparing a temp reg against itself to produce all-ones, because <code>x == x</code> always... except when <code>x</code> is NaN, hence nondeterministic failures. Valgrind correctly models the semantics of the compare instruction that we used, and detected that our generated code depended on the initial (undefined) value of an XMM register.</p>\n<p>We would likely benefit at least from the undefined-state tracking, as in above. ABI and VM interface-adjacent work (which tend to be pointer-heavy) may benefit from memcheck as well.</p>\n</blockquote>",
        "id": 224203893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611763611
    }
]