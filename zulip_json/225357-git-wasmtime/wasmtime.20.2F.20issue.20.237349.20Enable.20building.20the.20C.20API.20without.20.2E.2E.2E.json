[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7349\">issue #7349</a>:</p>\n<blockquote>\n<p>Currently Cranelift is a required feature of the C API due to the C API's usage of <code>Func::new{,_unchecked}</code> which require Cranelift to emit some trampolines. This means that in general only Rust gets to benefit from Cranelift-less builds which is not ideal since other embeddings may wish to exclude Cranelift for security or binary size reasons as well. We should figure out how to implement <code>Func::new</code> without requiring cranelift.</p>\n</blockquote>",
        "id": 398326291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698165935
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:c-api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7349\">Issue #7349</a>.</p>",
        "id": 398326305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698165942
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7349#issuecomment-1777630886\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7349\">issue #7349</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:c-api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:c-api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 398326420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698165983
    },
    {
        "content": "<p>Milek7 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7349#issuecomment-2035921631\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7349\">issue #7349</a>:</p>\n<blockquote>\n<p>I have been thinking about this.<br>\nwasm-&gt;array trampolines could be stored in the compiled module. Currently there's an assumption that when <code>wasm_call</code> is null then the callee is always native. Some flag would need to be added to VMFuncRef to decide whether to pick wasm-&gt;native or wasm-&gt;array trampoline. Alternatively callee could stay as always native and instead native-&gt;array trampolines could be stored in the module, and then using <code>Func::new</code> would chain wasm-&gt;native and native-&gt;array together.<br>\nThough neither approach would solve <code>TypedFunc::call</code> calling into <code>Func::new</code> when no appropriate trampolines are available in the loaded modules. I see only two possible solutions for that, both not particularly desirable: either monomorphizing array call in <code>TypedFunc::call</code> for use when native callee is not available, or universal runtime native-&gt;array trampoline hand-written in assembly.</p>\n<p>Maybe this case could be just ignored, because <code>TypedFunc</code> is not accessible from C anyway. Another option would be not providing <code>Func::new</code> in the C API when building without JIT and instead provide <code>Func::wrap</code> counterpart, but this has its own problems (currently <code>wrap</code> machinery relies on monomorphized shims, so that would again require hand-written assembly)</p>\n<p>What's your opinion on this?</p>\n</blockquote>",
        "id": 431205037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712193969
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7349#issuecomment-2037462364\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7349\">issue #7349</a>:</p>\n<blockquote>\n<p>Thanks for helping to think about this, it's much appreciated!</p>\n<blockquote>\n<p>Though neither approach would solve TypedFunc::call calling into Func::new when no appropriate trampolines are available in the loaded modules</p>\n</blockquote>\n<p>I agree that this is the main tricky bit. We've tried pretty hard to avoid handwritten assembly (removing it later whenever we've added it at some point) so if possible I'd prefer to avoid that route. When I was last thinking about it I was concluding what you're thinking here too which is to add an array call path to <code>TypedFunc::call</code> for when the native trampoline is null.</p>\n<blockquote>\n<p>Maybe this case could be just ignored, because TypedFunc is not accessible from C anyway</p>\n</blockquote>\n<p>While I think you might be right today this is also sort of tricky. Modules can reexport their imports so it's possible to get your hands on a function defined with <code>TypedFunc::wrap</code>, by, e.g. reexporting a WASI-defined import. It's still difficult to get to <code>TypedFunc::call</code> in the C API but I think it might not be as far away as we might otherwise think. Additionally if even just for the Rust API I think it'd be good to handle this case too.</p>\n<blockquote>\n<p>instead provide Func::wrap counterpart</p>\n</blockquote>\n<p>I'd agree this isn't feasible, I don't know how we'd actually do this in any way other than saying \"these are the supported signatures\" and you'd be out of luck if your signature wasn't there.</p>\n<hr>\n<p>One thing I've wondered in the past as well is whether the dual of array/native calling conventions are actually buying us anything. While I don't think there's any doubt that an array calling convention is slower than native it might be the case that it's not slower enough to really make a difference. For example we could also solve some questions in this issue by posing the question: \"what if we removed the native calling convention?\". That would make most of these issues go away at the cost of performance at callsites. I'm not sure if the perf hit is really that noticeable, though, outside of microbenchmarks.</p>\n</blockquote>",
        "id": 431334783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712243006
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7349\">issue #7349</a>:</p>\n<blockquote>\n<p>Currently Cranelift is a required feature of the C API due to the C API's usage of <code>Func::new{,_unchecked}</code> which require Cranelift to emit some trampolines. This means that in general only Rust gets to benefit from Cranelift-less builds which is not ideal since other embeddings may wish to exclude Cranelift for security or binary size reasons as well. We should figure out how to implement <code>Func::new</code> without requiring cranelift.</p>\n</blockquote>",
        "id": 439661874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716232460
    }
]