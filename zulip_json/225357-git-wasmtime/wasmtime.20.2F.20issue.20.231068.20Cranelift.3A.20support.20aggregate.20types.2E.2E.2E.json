[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068\">issue #1068</a>:</p>\n<blockquote>\n<p>Hello there, I have a slightly trivial question.</p>\n<p>How does one represent a structure in Cranelift IR? I know that structures are more-or-less a virtual concept and can be introduced \"virtually\", by representing parts of them as different objects in memory. However, what if one wants to inter-operate with C library APIs that require passing a structure? As far as I understand, some strict memory layout standard should be followed with correct paddings and organisation. </p>\n<p>Is there any easy way of doing this? Thanks!</p>\n</blockquote>",
        "id": 281216935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651697002
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068\">issue #1068</a>:</p>\n<blockquote>\n<p>Hello there, I have a slightly trivial question.</p>\n<p>How does one represent a structure in Cranelift IR? I know that structures are more-or-less a virtual concept and can be introduced \"virtually\", by representing parts of them as different objects in memory. However, what if one wants to inter-operate with C library APIs that require passing a structure? As far as I understand, some strict memory layout standard should be followed with correct paddings and organisation. </p>\n<p>Is there any easy way of doing this? Thanks!</p>\n</blockquote>",
        "id": 281216941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651697008
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068\">issue #1068</a>:</p>\n<blockquote>\n<p>Hello there, I have a slightly trivial question.</p>\n<p>How does one represent a structure in Cranelift IR? I know that structures are more-or-less a virtual concept and can be introduced \"virtually\", by representing parts of them as different objects in memory. However, what if one wants to inter-operate with C library APIs that require passing a structure? As far as I understand, some strict memory layout standard should be followed with correct paddings and organisation. </p>\n<p>Is there any easy way of doing this? Thanks!</p>\n</blockquote>",
        "id": 281216947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651697010
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068#issuecomment-1458007264\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068\">issue #1068</a>:</p>\n<blockquote>\n<p>Should we close this as out of scope? We already removed the heap concept used to represent the webassembly linear memory. It should be possible to write an external crate for convenient handling of higher level types which desugars struct accesses into primitive accesses.</p>\n</blockquote>",
        "id": 340083518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678188606
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068#issuecomment-1458622862\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068\">issue #1068</a>:</p>\n<blockquote>\n<p>Yeah, I think that in the three years (!) since the above discussion, we've come to a clearer consensus about the level of abstraction in CLIF. Namely, we have a view of the world that consists of primitive integer/float types, and loads/stores; and higher-level abstractions can be built from those by the producer. This is explicitly lower-level than LLVM, where one does have a notion of aggregate types and the compiler is responsible for computing their layout. Having only register-sized values makes many things simpler here.</p>\n<p>So I'll go ahead and close this as @bjorn3 suggests but anyone please do feel free to leave a note here if there is a compelling argument for this that we've missed.</p>\n</blockquote>",
        "id": 340179995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678213093
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068\">issue #1068</a>:</p>\n<blockquote>\n<p>Hello there, I have a slightly trivial question.</p>\n<p>How does one represent a structure in Cranelift IR? I know that structures are more-or-less a virtual concept and can be introduced \"virtually\", by representing parts of them as different objects in memory. However, what if one wants to inter-operate with C library APIs that require passing a structure? As far as I understand, some strict memory layout standard should be followed with correct paddings and organisation. </p>\n<p>Is there any easy way of doing this? Thanks!</p>\n</blockquote>",
        "id": 340179997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678213093
    },
    {
        "content": "<p>simvux <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068#issuecomment-1624157763\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068\">issue #1068</a>:</p>\n<blockquote>\n<p>Would it not make sense to support aggregate types in the <code>cranelift_frontend</code> crate as it aims to provide an optional convenience on top of <code>cranelift_codegen</code>? </p>\n<p>Or would it be out of scope since it requires a bit more logic than just being a builder pattern wrapper</p>\n</blockquote>",
        "id": 372992551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688669244
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068#issuecomment-1624188378\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1068\">issue #1068</a>:</p>\n<blockquote>\n<p>In principle it could be, but I think over time we've converged on <code>cranelift_frontend</code> being mostly a wrapper around SSA construction -- it doesn't really have much else in the way of \"semantic lowering\".</p>\n<p>It's possible we could add another abstraction layer -- <code>cranelift_values</code> or <code>cranelift_struct_abi</code> or something -- that has its own type system that is a superset of core CLIF's, and can handle aggregate types and match the native C ABI for passing them as args and returns. Perhaps part of the reason this doesn't exist yet is that as one moves up the abstraction layers, details start to become application-specific -- for example, a C compiler using Cranelift may want exactly what was just described, but <code>cg_clif</code> has its own ABI details that it imports from <code>rustc</code> and associated support code and data model.</p>\n<p>If you're interested in designing and building such a thing, I think we'd be open to at least helping with the design. It might make sense to build it out-of-tree first, and if it becomes useful for a large number of users then it could eventually move in-tree.</p>\n</blockquote>",
        "id": 372998561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688670849
    }
]