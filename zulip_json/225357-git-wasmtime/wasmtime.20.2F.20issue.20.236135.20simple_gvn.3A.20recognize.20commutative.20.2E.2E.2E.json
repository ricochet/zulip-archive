[
    {
        "content": "<p>Kmeakin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1494689699\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<p>Didn't realize when I made this branch, but this fixes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6129\">https://github.com/bytecodealliance/wasmtime/issues/6129</a>!</p>\n</blockquote>",
        "id": 346632056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680541910
    },
    {
        "content": "<p>Kmeakin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1495011856\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li><code>fmin</code> and <code>fmax</code> are indeed commutative, because we've specifically defined away the weird x86-specific behavior that privileges the first operand in some NaN cases. (This \"canonicalization\" is, incidentally, what some of the opcodes in the Relaxed-SIMD Wasm proposal are looking to, well, relax; but those will be different opcodes.)</li>\n</ul>\n</blockquote>\n<p>Thanks. Are <code>fmin_pseudo</code> and <code>fmax_pseudo</code> commutative as well then? </p>\n</blockquote>",
        "id": 346682601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680557477
    },
    {
        "content": "<p>Kmeakin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1495013309\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<blockquote>\n<p>We plan to remove all the non-egraph parts sometime soon, so it isn't really worth making this change here. Instead it should happen somewhere in the vicinity of <code>insert_pure_enode</code> in <code>cranelift/codegen/src/egraph.rs</code>. The most similar place to what you've done here would be <code>NewOrExistingInst::get_inst_key</code>.</p>\n</blockquote>\n<p>I'll add an egraph implementation in another commit ASAP</p>\n</blockquote>",
        "id": 346682756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680557532
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1495013376\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li><code>fmin</code> and <code>fmax</code> are indeed commutative, because we've specifically defined away the weird x86-specific behavior that privileges the first operand in some NaN cases. (This \"canonicalization\" is, incidentally, what some of the opcodes in the Relaxed-SIMD Wasm proposal are looking to, well, relax; but those will be different opcodes.)</li>\n</ul>\n</blockquote>\n<p>Thanks. Are <code>fmin_pseudo</code> and <code>fmax_pseudo</code> commutative as well then?</p>\n</blockquote>\n<p>No, unfortunately not (or at least, not on all CPUs).</p>\n</blockquote>",
        "id": 346682764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680557537
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1495029587\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<p>I was curious whether <code>fmin_pseudo</code> and <code>fmax_pseudo</code> are commutative as well. I think the answer is a well-defined \"no\": if either argument is NaN or both arguments are ±0, the result is defined to always be the first argument. So swapping the arguments can produce a different NaN or a differently-signed zero.</p>\n<p>The WebAssembly spec for <code>fmin</code>/<code>fmax</code> nearly guarantees that the results will be the same if the arguments are swapped, except that if both arguments are NaN, it's not specified which one will be returned. But that unspecified case means we can choose whichever one we want while remaining conforming, so it's still okay to treat it as commutative. That is a little weird for our \"no undefined behavior\" policy in Cranelift though…</p>\n<p>Also, today I learned that signed integer min/max produces the WebAssembly-specified result for fmin/fmax as long as neither argument is NaN. Neat.</p>\n</blockquote>",
        "id": 346685053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680558557
    },
    {
        "content": "<p>Kmeakin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1495030231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<blockquote>\n<p>However, I think it's better to rewrite the actual instructions in the data-flow graph</p>\n</blockquote>\n<p>Could you point me to the correct place to make this change? The egraph code is quite complex</p>\n</blockquote>",
        "id": 346685190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680558613
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1495042331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<p>Yeah, there's a lot of subtlety to the egraph code!</p>\n<p>I think the best option here is in <code>insert_pure_enode</code>. It's given a <code>NewOrExistingInst</code> which defines the two cases we care about here:</p>\n<ul>\n<li>For <code>Existing(inst)</code>, we want to normalize <code>&amp;mut self.func.dfg.insts[inst]</code>.</li>\n<li>For <code>New(data, _)</code>, we want to normalize <code>&amp;mut data</code>.</li>\n</ul>\n<p>In both cases we want to do this before the first use of <code>gvn_map</code> in that function, so that it's normalized before we compute a hash key for it.</p>\n</blockquote>",
        "id": 346686502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680559221
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1495137994\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<p>Nice idea with the reflexive icmp/fcmp normalization. That one shouldn't change the results of an egraph pass since we have rules that rewrite those cases to constants, but a hit in the GVN map means we can avoid calling <code>simplify</code> at all, so it's still worth doing.</p>\n<p>I'm not entirely sold on the \"<a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135/commits/d7bd6cfdc8d2873548a38d901cad84176ef6027c\">Change formatting of normalize_in_place</a>\" commit—I think especially after adding the reflexive cases that it was more clear with a single match on <code>IntCompare</code> and a single match on <code>FloatCompare</code>—but I'm not inclined to hold up merging this PR for that.</p>\n</blockquote>",
        "id": 346699775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680565962
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1496451169\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<p>I remembered only after merging this that it might cause a performance regression, because it breaks <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c85bf27ff8cdaffec26a25d46b4343a06e00027a/cranelift/codegen/src/opts/cprop.isle#L87-L164\">these rules for moving constants</a>. I mentioned this in the \"Challenges\" section of #6129 but then forgot about it.</p>\n<p>The pulldown-cmark and spidermonkey benchmarks in Sightglass show small regressions, when compared against the immediately preceding commit on <code>main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cpu</span><span class=\"o\">-</span><span class=\"n\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">21305700.50</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">9802702.99</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.04</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">798371867</span><span class=\"w\"> </span><span class=\"mf\">803835104.60</span><span class=\"w\"> </span><span class=\"mi\">841073014</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">814510194</span><span class=\"w\"> </span><span class=\"mf\">825140805.10</span><span class=\"w\"> </span><span class=\"mi\">848435012</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">instructions</span><span class=\"o\">-</span><span class=\"n\">retired</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">16370993.55</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">111369.32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1566424391</span><span class=\"w\"> </span><span class=\"mf\">1566654680.05</span><span class=\"w\"> </span><span class=\"mi\">1566986371</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1582847533</span><span class=\"w\"> </span><span class=\"mf\">1583025673.60</span><span class=\"w\"> </span><span class=\"mi\">1583356398</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">instructions</span><span class=\"o\">-</span><span class=\"n\">retired</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1289.05</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">201.02</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">21058403</span><span class=\"w\"> </span><span class=\"mf\">21058589.05</span><span class=\"w\"> </span><span class=\"mi\">21059116</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">21059745</span><span class=\"w\"> </span><span class=\"mf\">21059878.10</span><span class=\"w\"> </span><span class=\"mi\">21060457</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cpu</span><span class=\"o\">-</span><span class=\"n\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">414681539.40</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">180320641.50</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.03</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">19755236415</span><span class=\"w\"> </span><span class=\"mf\">20095956851.10</span><span class=\"w\"> </span><span class=\"mi\">20596830121</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">20147733881</span><span class=\"w\"> </span><span class=\"mf\">20510638390.50</span><span class=\"w\"> </span><span class=\"mi\">20966561627</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">instructions</span><span class=\"o\">-</span><span class=\"n\">retired</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">483524391.30</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">2430599.58</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">37523394580</span><span class=\"w\"> </span><span class=\"mf\">37531517182.20</span><span class=\"w\"> </span><span class=\"mi\">37533623288</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">38006693589</span><span class=\"w\"> </span><span class=\"mf\">38015041573.50</span><span class=\"w\"> </span><span class=\"mi\">38016782123</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">instructions</span><span class=\"o\">-</span><span class=\"n\">retired</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">4010130.85</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">77289.63</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2677225595</span><span class=\"w\"> </span><span class=\"mf\">2677345556.30</span><span class=\"w\"> </span><span class=\"mi\">2677547575</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">bf1aaba06</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2673233921</span><span class=\"w\"> </span><span class=\"mf\">2673335425.45</span><span class=\"w\"> </span><span class=\"mi\">2673499424</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">normalize</span><span class=\"o\">-</span><span class=\"n\">gvn</span><span class=\"o\">-</span><span class=\"mf\">57e42</span><span class=\"n\">d0c4</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>\n<p>The spidermonkey benchmark actually runs a tiny bit faster with this PR, showing that in this case merging more operations through GVN is a slightly bigger win than the loss due to the regression in constant-folding.</p>\n<p>This PR is clearly a good idea but we should figure out how to fix constant-folding. We may decide to temporarily revert this PR while sorting that out.</p>\n</blockquote>",
        "id": 346945362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680634608
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1496461986\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<p>Thanks for catching the regression, @jameysharp (and sorry for not noticing this either). And thanks for the PR in any case @Kmeakin as I think it's still generally a good idea to do something about commutativity!</p>\n<p>IMHO with compilation regressions up to 3-4% we should probably revert and see if we can find a way to do better: such a hit is acceptable if we also see gains in runtime performance (maybe, with a 1:1 rule-of-thumb, 3-4% speedups) but otherwise the numbers as-is are not quite there.</p>\n</blockquote>",
        "id": 346947223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680635136
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135#issuecomment-1496543370\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6135\">issue #6135</a>:</p>\n<blockquote>\n<p>I'm confident we can sort out the regression. So we'll revert this PR temporarily but we should be able to merge it again.</p>\n<p>It's possible that there's a compile-time cost to the normalization itself, but I think that's unlikely. We're just adding a couple compares and a conditional swap per CLIF instruction, and that time should be dwarfed by the hash-map lookup that immediately follows it.</p>\n<p>It's also possible that higher hit-rates in the GVN map make compilation slower, but I can't imagine how.</p>\n<p>So I'm assuming that this regression is only due to a conflict with the existing ISLE rules.</p>\n<p>A straightforward but tedious solution would be to find all mid-end rules that match a constant on the right, and if the matched operator is commutative, add the corresponding rule with the constant on the left. The associativity constant-folding rules need similar treatment.</p>\n<p>The more satisfying fix would be to deal with #6128 and then write rules with the appropriate commutative matches baked in.</p>\n</blockquote>",
        "id": 346959681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680639173
    }
]