[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6185\">issue #6185</a>:</p>\n<blockquote>\n<p>Fuzzing has found that this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func $f (param i32) (result i32)\n    (local i64)\n    local.get 0\n    i32.const -1\n    i32.le_u\n  )\n  (func $s\n    (call $f (i32.const 0))\n    if\n      return\n    end\n    unreachable\n  )\n\n  (start $s)\n)\n</code></pre></div>\n<p>behaves different on the current 7.0.0 release of Wasmtime and <code>main</code>. Specifically this is testing <code>0_u32 &lt;= (-1_i32 as u32)</code> which should return 1 causing this program to not trap. On <code>main</code>, however, this program traps:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span>\n<span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">cli</span><span class=\"w\"> </span><span class=\"mf\">7.0.0</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"s\">\"testcase0.wat\"</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x32</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">short</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span>\n</code></pre></div>\n<p>Bisection reveals that this was introduced in #6130 (cc @Kmeakin) so no current releases are affected, but we'll want to fix this for the upcoming 8.0.0 release.</p>\n</blockquote>",
        "id": 347932979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680999040
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6185#issuecomment-1501202542\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6185\">issue #6185</a>:</p>\n<blockquote>\n<p>@Kmeakin would you mind creating two PRs, to revert #6130 both on <code>main</code> and on <code>release-8.0.0</code>? Once we've gotten back to a baseline of correctness, we can re-examine the PR and try to re-land it with a fix on <code>main</code>. (And we should -- the PR was a good change overall!)</p>\n</blockquote>",
        "id": 348086297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681070393
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6185#issuecomment-1502151786\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6185\">issue #6185</a>:</p>\n<blockquote>\n<blockquote>\n<p>@Kmeakin would you mind creating two PRs, to revert #6130 both on <code>main</code> and on <code>release-8.0.0</code>? Once we've gotten back to a baseline of correctness, we can re-examine the PR and try to re-land it with a fix on <code>main</code>. (And we should -- the PR was a good change overall!)</p>\n</blockquote>\n<p>I went ahead and created two PRs (#6193 and #6194) for this. We can revert the revert (#6193) once we resolve the original bug.</p>\n</blockquote>",
        "id": 348279211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681151179
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6185\">issue #6185</a>:</p>\n<blockquote>\n<p>Fuzzing has found that this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func $f (param i32) (result i32)\n    (local i64)\n    local.get 0\n    i32.const -1\n    i32.le_u\n  )\n  (func $s\n    (call $f (i32.const 0))\n    if\n      return\n    end\n    unreachable\n  )\n\n  (start $s)\n)\n</code></pre></div>\n<p>behaves different on the current 7.0.0 release of Wasmtime and <code>main</code>. Specifically this is testing <code>0_u32 &lt;= (-1_i32 as u32)</code> which should return 1 causing this program to not trap. On <code>main</code>, however, this program traps:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span>\n<span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">cli</span><span class=\"w\"> </span><span class=\"mf\">7.0.0</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"s\">\"testcase0.wat\"</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x32</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">short</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span>\n</code></pre></div>\n<p>Bisection reveals that this was introduced in #6130 (cc @Kmeakin) so no current releases are affected, but we'll want to fix this for the upcoming 8.0.0 release.</p>\n</blockquote>",
        "id": 348288004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681154412
    }
]