[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is a draft of an updated version of the egraph patch (and thus supersedes #4249) with the two parts already merged (multi-etors and the egraph crate proper) removed; it includes the Cranelift integration, the egraph build (CLIF to egraph) and elaboration (egraph to CLIF) algorithms, and rule application engine, as well as a set of rewrite rules that replaces the existing mid-end optimizations.</p>\n<p>It still needs a bit more productionizing:</p>\n<ul>\n<li>removal of recursion in elaboration;</li>\n<li>removal of recursion in rule application (This one is trickier! Immediate rule application on the sub-nodes created from constructors means more than one ISLE invocation can be on the stack, in a reentrant way. My thought is to use a sort of workqueue to \"unstack\" it.);</li>\n<li>generalization of the several ad-hoc egraph analyses (loop depth, etc) into a framework.</li>\n</ul>\n<p>The purpose of this draft PR is to be a place to do this work on a rebased and up-to-date basis. (Lots happened since the original egraph work branched off in May, including incremental compilation and a good number of smaller changes.)</p>\n<p>While patch-wrangling this week, I tried pulling this apart into smaller pieces, but the remaining bits are pretty cyclically entangled, and/or some of the intermediate points that might make sense (e.g. egraph build and elaboration without rule application) require re-synthesizing some scaffolding that would then disappear in the final state, so that seems a bit counterproductive. Once we have a polished state I can try pulling it apart into separate logical commits at least.</p>\n</blockquote>",
        "id": 302196530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664864018
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 302306319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664902933
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 302319041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664907102
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 302349342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664918564
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 302350655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664919091
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1130732310\">PR review</a>.</p>",
        "id": 302370718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664930532
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1130732310\">PR review</a>.</p>",
        "id": 302370719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664930532
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r987424561\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm a little confused about this <code>optimized</code> flag.</p>\n<p>I guess I'd like to at least see a comment about why <code>fn optimize</code> is <code>pub</code>, perhaps similar to the one on <code>compile_stencil</code>.</p>\n<p>If <code>fn optimize</code> were not public, would it still be necessary to guard against it being called multiple times? Under what circumstances would it get called again?</p>\n<p>Should the \"already optimized\" check be at the beginning of <code>optimize</code> instead of in <code>compile_stencil</code>?</p>\n<p>I wonder, would it make sense to set <code>self.optimized</code> at the beginning of <code>fn optimize</code>? If an error occurs, I wouldn't expect the optimizer would work any better if you run it a second time. Maybe after failed optimization one might want to retry compilation without optimization?</p>\n</blockquote>",
        "id": 302370720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664930532
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r987425960\">PR review comment</a>:</p>\n<blockquote>\n<p>Why is it necessary to re-run all of these passes after three of the four have just been run? Could you let the earlier DCE pass run if <code>isa.flags().use_egraphs() || opt_level != OptLevel::None</code> and then not need any of these?</p>\n</blockquote>",
        "id": 302370721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664930532
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r987420697\">PR review comment</a>:</p>\n<blockquote>\n<p>Is \"at the cost of a longer compile time\" still true?</p>\n<p>I think the main \"cost\" of turning this flag on right now is that there's a lot of room for bugs still.</p>\n</blockquote>",
        "id": 302370722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664930532
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r987431314\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm concerned about marking <code>Ieee32</code> and <code>Ieee64</code> as <code>Ord</code>. Their <code>PartialOrd</code> implementation really is partial, since it's based on IEEE754 ordering. We might need to split these into two versions: one that respects IEEE754 except for preserving exact NaN representations, and another where ordering and equality are defined entirely by bitwise representation. I had a really hard time balancing those two competing goals recently.</p>\n</blockquote>",
        "id": 302370723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664930532
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r987418637\">PR review comment</a>:</p>\n<blockquote>\n<p>I really appreciate you making sure that <code>git grep 'enum InstructionData'</code> finds the right thing!</p>\n</blockquote>",
        "id": 302370724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664930532
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r987435881\">PR review comment</a>:</p>\n<blockquote>\n<p>Now you have cranelift-egraph in this list in two places. I think that would only be necessary if there's a cyclic dependency between crates, and I think Cargo would refuse to build that... right?</p>\n</blockquote>",
        "id": 302370725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664930532
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1130767289\">PR review</a>.</p>",
        "id": 302372394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664931995
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r987445854\">PR review comment</a>:</p>\n<blockquote>\n<p>Different list actually! There is the <code>PUBLIC_CRATES</code> list (the line here) and the <code>CRATES_TO_PUBLISH</code> list and they are different for reasons I don't fully grok, but the crate needs to be in both for the publish script to be happy.</p>\n</blockquote>",
        "id": 302372397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664931996
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r987447875\">PR review comment</a>:</p>\n<blockquote>\n<p>Ohhh, that makes sense.</p>\n</blockquote>",
        "id": 302372784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664932329
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1130769869\">PR review</a>.</p>",
        "id": 302372785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664932330
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 302744879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665091992
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989500126\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point -- fixed!</p>\n</blockquote>",
        "id": 302744889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665091999
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1133663262\">PR review</a>.</p>",
        "id": 302744891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665091999
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1133663895\">PR review</a>.</p>",
        "id": 302744998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665092042
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989500547\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, this was an attempt to make the API \"smarter\" in some sense, but I agree that the don't-re-optimize behavior is in the end just unnecessary complexity. I've marked <code>optimize()</code> as \"only for testing\" in the doc-comment and removed the <code>optimized</code> flag.</p>\n</blockquote>",
        "id": 302745013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665092043
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989500794\">PR review comment</a>:</p>\n<blockquote>\n<p>Removed! This was needed for an earlier egraph implementation but no longer used, so I've removed all of the now-extraneous <code>Ord</code> derivations on IR types.</p>\n</blockquote>",
        "id": 302745062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665092069
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1133664272\">PR review</a>.</p>",
        "id": 302745063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665092069
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1133664405\">PR review</a>.</p>",
        "id": 302745084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665092077
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989500893\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, that bit of text is outdated! Updated to \"is currently considered experimental\" instead.</p>\n</blockquote>",
        "id": 302745087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665092078
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1133760451\">PR review</a>.</p>",
        "id": 302766390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665104815
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1133760451\">PR review</a>.</p>",
        "id": 302766391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665104815
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989572721\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd have guessed that if you're handed a <code>DominatorTree</code> that says this block has an immediate dominator, then it would be an error if that dominating instruction is not anywhere in the layout. Is there a situation where that's actually expected? If not, I think I'd prefer an <code>unwrap</code> on the call to <code>inst_block</code>.</p>\n<p>BTW this module's use of <code>Default</code> makes me very happy, so thank you. :grin: Also I quite like the simplicity and elegance of the implementation.</p>\n</blockquote>",
        "id": 302766392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665104815
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989574797\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this should pass the borrow-checker; what do you think of it?</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        self.block.expand().map(|block| {\n            self.block = self.domtree.nodes[block].next;\n            block\n        })\n</code></pre></div>\n<p>Otherwise I'd at least prefer this version, as I have a preference for avoiding calls to <code>unwrap</code> if it's easy to prove they'll never fail:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        if let Some(block) = self.block.expand() {\n            self.block = self.domtree.nodes[block].next;\n            Some(block)\n        } else {\n            None\n        }\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 302766393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665104815
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989584449\">PR review comment</a>:</p>\n<blockquote>\n<p>The equivalent function on <code>Vec</code> is called <code>dedup</code>; would you mind renaming it to match that?</p>\n</blockquote>",
        "id": 302766394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665104815
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989576553\">PR review comment</a>:</p>\n<blockquote>\n<p>Just to check, does <code>SourceLoc</code> need <code>Ord</code> for something or was that also left over from earlier versions?</p>\n</blockquote>",
        "id": 302766395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665104815
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989582222\">PR review comment</a>:</p>\n<blockquote>\n<p>Would you mind double-checking for me that you need <code>Analysis::Value</code> to implement all three of <code>Debug</code>, <code>Clone</code>, and <code>Default</code>? I naively wouldn't have expected <code>Default</code> to be necessary since initial analysis results should come from <code>Analysis::for_node</code>.</p>\n<p>I assume both <code>Default</code> and <code>Clone</code> are because of the requirements for <code>SecondaryMap</code>.</p>\n<p>Is it useful to decide at runtime whether to do analysis or not? If you know statically whether you'll need an analysis, then I'd prefer to have a trivial implementation of <code>Analysis</code> on <code>()</code> (or perhaps on <code>PhantomData&lt;L&gt;</code>, if necessary) where the <code>Value</code> associated type is also <code>()</code>. That way you can store both <code>A</code> and <code>A::Value</code> without wrapping them in <code>Option</code>, and they won't occupy any memory because they're zero-sized types.</p>\n<p>Then you could declare <code>EGraph::nodes</code> as a vector of <code>(L::Node, A::Value)</code>, so that it's clear at the type level that if a node has been added, its analysis result exists too. And then you shouldn't need <code>Default</code> or <code>Clone</code>.</p>\n</blockquote>",
        "id": 302766396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665104815
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r989575733\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: missing space in <code>\"other\".Any</code></p>\n</blockquote>",
        "id": 302766397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665104815
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1134862329\">PR review</a>.</p>",
        "id": 302899249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163292
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990334156\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would you mind double-checking for me that you need Analysis::Value to implement all three of Debug, Clone, and Default? I naively wouldn't have expected Default to be necessary since initial analysis results should come from Analysis::for_node.</p>\n<p>I assume both Default and Clone are because of the requirements for SecondaryMap.</p>\n</blockquote>\n<p>Indeed, they both come from <code>SecondaryMap</code>'s constraints on its item type <code>V</code>; verified just now by attempting to remove them.</p>\n<p>It turns out <code>Debug</code> was only needed for, well, my debugging (some <code>log</code>s I had in place); those are no longer present so I've removed that constraint. We can always put it back if we want to check in some persistent <code>log</code>s, I think.</p>\n<blockquote>\n<p>Then you could declare EGraph::nodes as a vector of (L::Node, A::Value), so that it's clear at the type level that if a node has been added, its analysis result exists too. And then you shouldn't need Default or Clone.</p>\n</blockquote>\n<p>There is a nice appeal to this for sure! I actually had built the thing this way originally. I'm hesitant to go back to it chiefly because it makes the API for <code>for_node</code> more awkward: we need to provide it access to the analysis values for prior nodes (so it can depend on e.g. arguments' analysis values) and I don't like the idea of exposing internal data-structure details, like a tuple-of-node-and-value. Unfortunately we can't parameterize it on the \"getter\" because we can't provide a function trait-constrained type parameter to the trait method. And we can't just pass in the whole <code>EGraph</code> because the <code>EGraph</code> is parameterized on the particular <code>Analysis</code> and if I try to use <code>Self</code> there, I run into issues with unsized types (??). Basically, it becomes a type-system mess. So I'd kind of prefer to at least run with what we have for now and maybe explore more advanced solutions here later, if possible :-)</p>\n</blockquote>",
        "id": 302899250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163292
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 302899272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163301
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990334868\">PR review comment</a>:</p>\n<blockquote>\n<p>Nope, removed!</p>\n</blockquote>",
        "id": 302899413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163336
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1134863065\">PR review</a>.</p>",
        "id": 302899416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163337
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1134863139\">PR review</a>.</p>",
        "id": 302899446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163340
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990334931\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 302899447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163341
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1134863243\">PR review</a>.</p>",
        "id": 302899477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163348
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990335032\">PR review comment</a>:</p>\n<blockquote>\n<p>Much better, thanks!</p>\n</blockquote>",
        "id": 302899479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163348
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1134863561\">PR review</a>.</p>",
        "id": 302899593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163368
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990335391\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, I've added an <code>expect</code> instead; we shouldn't have dangling instructions at this point. Thanks!</p>\n</blockquote>",
        "id": 302899599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163368
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1134864531\">PR review</a>.</p>",
        "id": 302899878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163426
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990336304\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually it turns out this was completely unused, as was <code>sort</code> above it (they were left over from an earlier approach that stored ... parent pointers, I think? ... in EntityLists, and used sort/dedup to do merging -- parent pointers are gone now!). Removed this part of the diff.</p>\n</blockquote>",
        "id": 302899880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665163426
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 302950223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665186968
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990569475\">PR review comment</a>:</p>\n<blockquote>\n<p>I just had a go at doing this, and while I think it's feasible (with some <code>?Sized</code> constraints to allow unsized types if needed), the current implementation is tangled up enough in assumptions about analysis working this way that I don't want to try harder right now. So yes, let's come back to this later. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n</blockquote>",
        "id": 302956419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665192688
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1135161360\">PR review</a>.</p>",
        "id": 302956420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665192688
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1135161771\">PR review</a>.</p>",
        "id": 302958324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665194871
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1135161771\">PR review</a>.</p>",
        "id": 302958325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665194871
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990570011\">PR review comment</a>:</p>\n<blockquote>\n<p>This confused me a moment because I mixed up <code>Inst</code> with <code>InstructionData</code>, and I wondered why you were storing the whole instruction. I think it was the use of the phrase, \"The original instruction\", that threw me.</p>\n</blockquote>",
        "id": 302958326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665194871
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990571068\">PR review comment</a>:</p>\n<blockquote>\n<p>I think I'd put <code>id_eq</code> and <code>hash_id</code> on <code>UnionFind</code> instead of on <code>NodeCtx</code> since they don't use anything from the latter. It's only the plural versions (<code>ids_eq</code>, <code>hash_ids</code>) that need <code>self.args</code>. Not important, just a thought.</p>\n</blockquote>",
        "id": 302958327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665194871
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990572752\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not a huge fan of the pattern of stripping off a layer of reference by sticking an <code>&amp;</code> at the beginning of a pattern, and then putting it back with the <code>ref</code> keyword. I rather like <code>Node::Pure { op, args, types }</code> here, for instance. But I don't feel anywhere near strong enough to, y'know, fight about it or whatever.</p>\n</blockquote>",
        "id": 302958328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665194871
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990573194\">PR review comment</a>:</p>\n<blockquote>\n<p>I appreciated the comment above that <code>types</code> are fully determined by <code>op</code> and <code>args</code>. I think it'd be nice if there's a corresponding comment here explaining why that isn't also true for Load ops. I assume it's that the type is the only thing indicating the width of the load; multiple loads with the same address can have different widths and must not be deduplicated.</p>\n</blockquote>",
        "id": 302958329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665194872
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990573331\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't see the same sort of guard here in <code>at_level</code>, for saturating at less than \"infinity\", that I see in the implementation for <code>add</code>. Is that okay?</p>\n</blockquote>",
        "id": 302958330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665194872
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1135303365\">PR review</a>.</p>",
        "id": 303099302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665299615
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990743079\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this map/filter/map is equivalent to a single <code>.filter(|&amp;lp| self.loop_header(lp) == block)</code>… isn't it?</p>\n</blockquote>",
        "id": 303099303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665299615
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990740185\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this rule should be deleted: you have below that x^x is zero, which is correct, but this rule says it's also equal to x.</p>\n<p>I also was surprised to not find rules for multiplication or bitwise-and by zero. Would that be unsound because it could delete integer divisions that might otherwise trap? If so I'm curious if there's an easy way to preserve the traps while otherwise deleting all the arithmetic in subexpressions whose results get annihilated.</p>\n<p>But also, then, is the x^x=0 rule okay? Or other rules like x^not(x), where the right-hand side is a constant?</p>\n</blockquote>",
        "id": 303099304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665299615
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990743987\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm tempted to write this as <code>LoopLevel::root().inc()</code> instead of enshrining the knowledge that the result is 1.</p>\n<p>More broadly, you could write this without a stack, though I'm not sure if the result is better. Do one loop to chase parents to the root or the first loop that's already been assigned. Count how many iterations that loop did and add to the level of the upper-most loop reached. Then start over at <code>lp</code> and chase the parent pointers again to fill in the loop depths for all the loops visited the first time.</p>\n<p>I think that might be a little easier for me to understand than the pseudo-recursion. Maybe?</p>\n</blockquote>",
        "id": 303099305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665299615
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990738773\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess this function does something reasonable even if self equals other: it doubles the list, right? I was thinking there should be an assertion that the two lists are different but I guess that isn't necessary.</p>\n<p>I would be inclined to use <code>copy_within</code> rather than a hand-rolled loop full of bounds checks and unwraps. You can actually guarantee the copy is non-overlapping, but I don't think it's worth using an unsafe block here for whatever gains that brings.</p>\n</blockquote>",
        "id": 303099306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665299615
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1135303365\">PR review</a>.</p>",
        "id": 303099307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665299615
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990743264\">PR review comment</a>:</p>\n<blockquote>\n<p>How do you feel about using map_or instead of map+unwrap_or?</p>\n<p>Also about maybe using innermost_loop, like in is_loop_header.</p>\n</blockquote>",
        "id": 303099308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665299616
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r990745236\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm curious, why pick 0x80 as the invalid level, instead of 0xFF?</p>\n</blockquote>",
        "id": 303099309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665299616
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303317853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431524
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469559\">PR review</a>.</p>",
        "id": 303317875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431531
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598472\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated comment, thanks!</p>\n</blockquote>",
        "id": 303317876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431531
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469643\">PR review</a>.</p>",
        "id": 303317883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431536
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598522\">PR review comment</a>:</p>\n<blockquote>\n<p>Good idea, done!</p>\n</blockquote>",
        "id": 303317884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431536
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469683\">PR review</a>.</p>",
        "id": 303317888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431538
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598541\">PR review comment</a>:</p>\n<blockquote>\n<p>So in isolation I'd definitely agree! However I tend to like the explicit match-the-borrow form in other cases, so we don't get <code>Copy</code> types that nonetheless have to be dereferenced. E.g. elsewhere there is a <code>&amp;Node::Inst { inst, .. }</code> -- if we instead did <code>Node::Inst { inst, .. }</code> then we'd need <code>*inst</code> everywhere. Here I'm trying to remain consistent with that form elsewhere.</p>\n<p>(I also think that really confusing errors can arise from this bit of automatic/ergonomic magic and I tend to fall back to pre-2018 Rust out of habit as a result, but that's another discussion :-) )</p>\n</blockquote>",
        "id": 303317890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431539
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469709\">PR review</a>.</p>",
        "id": 303317894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431541
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598558\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 303317895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431541
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598590\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point, fixed! I added the <code>finite()</code> helper here for this.</p>\n</blockquote>",
        "id": 303317901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431545
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469764\">PR review</a>.</p>",
        "id": 303317902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431545
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469807\">PR review</a>.</p>",
        "id": 303317905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431547
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598616\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually this was another addition from earlier work that is no longer used so I've gone ahead and deleted it. Sorry about that!</p>\n</blockquote>",
        "id": 303317906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431548
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469845\">PR review</a>.</p>",
        "id": 303317909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431550
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598639\">PR review comment</a>:</p>\n<blockquote>\n<p>Good catch -- <code>x^x</code> does not actually equal <code>x</code> at all, except in one rare case :-)</p>\n<blockquote>\n<p>Multiplication by zero</p>\n</blockquote>\n<p>Added!</p>\n<blockquote>\n<p>bitwise-and by zero</p>\n</blockquote>\n<p>Added!</p>\n</blockquote>",
        "id": 303317910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431550
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469884\">PR review</a>.</p>",
        "id": 303317916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431553
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598654\">PR review comment</a>:</p>\n<blockquote>\n<p>Goodness, yes, I don't know why I wrote it that way!</p>\n</blockquote>",
        "id": 303317917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431553
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469918\">PR review</a>.</p>",
        "id": 303317920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431555
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598673\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, nice, I didn't know about <code>map_or</code>! Done (and using the helper).</p>\n</blockquote>",
        "id": 303317921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431555
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469955\">PR review</a>.</p>",
        "id": 303317926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431558
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598698\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, I agree that using <code>inc()</code> once we've defined it is cleaner here.</p>\n<p>Re: alternative algorithm -- maybe, but the details aren't completely clear to me; happy to take a followup PR (or a suggestion here) if you can sketch it out? Although if I'm understanding what you've proposed correctly, it sounds like it may have quadratic worst-case (the algorithm here sets the level on all loops it visits as it comes back down the stack).</p>\n</blockquote>",
        "id": 303317927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431558
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991598741\">PR review comment</a>:</p>\n<blockquote>\n<p>To be honest, I have no idea -- lost to the mists of time! I've reworked this to use a sentinel of <code>0xff</code> and hopefully be a little clearer.</p>\n</blockquote>",
        "id": 303317930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431560
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136469995\">PR review</a>.</p>",
        "id": 303317931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665431560
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136212916\">PR review</a>.</p>",
        "id": 303321865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991421923\">PR review comment</a>:</p>\n<blockquote>\n<p>Would you add comments explaining what each of these states mean? In particular, the module comment doesn't talk about the before/after instruction states. After reading the whole module, I still don't understand exactly what invariant these states are supporting.</p>\n<p>When I saw \"Top\", I assumed that would correspond to the \"unknown\" state described in the module comment, so I was a little surprised it wasn't called \"Bottom\". But apparently the \"unknown\" state is actually <code>BeforeInst</code>, judging by the implementation of <code>meet_from</code>. I'd suggest renaming \"Top\" to something more descriptive and less lattice-y.</p>\n<p>Better yet, remove \"Top\" entirely. Use <code>Option&lt;LastStores&gt;</code> during <code>compute_block_input_states</code>, and <code>.unwrap()</code> it at the beginning of the loop, because before any block is added to the queue, it first has its state set to something else. And <code>compute_load_last_stores</code> can just skip blocks where the <code>block_input</code> is <code>None</code>, because those blocks are unreachable.</p>\n<p>I'd also use a derived implementation of <code>Default</code>: just add the <code>#[default]</code> attribute to whichever variant you want. If you remove \"Top\", then you could use \"Entry\" as the default variant, and remove the <code>LastStores::entry</code> method in favor of <code>LastStores::default</code>.</p>\n</blockquote>",
        "id": 303321866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991450907\">PR review comment</a>:</p>\n<blockquote>\n<p>I see three opcodes for which <code>can_store</code> is true that don't have a <code>MemFlags</code> field: <code>Debugtrap</code>, <code>DynamicStackStore</code>, and <code>StackStore</code>. I can understand treating <code>Debugtrap</code> like a memory fence, but shouldn't stack stores just be categorized as \"other\"? I assume that's what a load whose address comes from a <code>StackAddr</code> op would be, anyway.</p>\n<p>For that matter, should <code>has_memory_fence_semantics</code> be updated to return true for <code>Debugtrap</code>? Then maybe we could treat as \"other\" any instruction that 1) is not a memory fence, 2) can store, and 3) has no memflags.</p>\n<p>I guess there's currently no must-alias analysis for stack loads and stores. I assume that would be useful for future work, right?</p>\n</blockquote>",
        "id": 303321867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991503198\">PR review comment</a>:</p>\n<blockquote>\n<p><code>compute_block_input_states</code> never uses <code>self</code>, and <code>compute_load_last_stores</code> only uses <code>self</code> to write into the <code>load_mem_state</code> map. If you move both functions to top-level, drop their <code>self</code> parameters, and make <code>compute_load_last_stores</code> return a new map, then you can write this function this way, which I think is more clear:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let block_input = compute_block_input_states(func, cfg);\n        let load_mem_state = compute_load_last_stores(func, block_input);\n        AliasAnalysis {\n            load_mem_state,\n        }\n</code></pre></div>\n<p>Also: why are those two functions marked <code>#[inline(never)]</code>?</p>\n</blockquote>",
        "id": 303321868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991445442\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd like a comment here on why this is currently limited to the <code>Load</code> opcode specifically, rather than any instruction with that format. I assume it's something about store-to-load forwarding requiring that the load and store access the same memory width, and also have the same Value type, so that the value passed to the store can be substituted for the load. (I imagine future work could include replacing widening loads with sign- or zero-extend instructions given a suitable narrow store.) But it's not obvious to me how this interacts with redundant-load elimination.</p>\n<p>This is the only call to <code>get_load_input_state</code>. It looks up the <code>InstructionData</code> twice: once to check that its opcode is <code>Load</code>, and a second time in <code>get_load_input_state</code> to dig out the memflags.</p>\n<p>I'd rather see something like this, with corresponding changes to <code>get_load_input_state</code>. The main reason I'd prefer this is that it statically proves that <code>mem_state</code> can never be <code>MemoryState::AfterInst(inst)</code>, which seems like it would be non-sensical. (The load sees the state after itself?)</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                if let InstructionData::Load { opcode: Opcode::Load, flags, .. } = func.dfg[inst] {\n                    let mem_state = state.get_load_input_state(flags);\n</code></pre></div>\n<p>One step further would be to replace <code>get_load_input_state</code> with a function like <code>fn for_flags(&amp;mut self, flags: MemFlags) -&gt; &amp;mut MemoryState</code>, which can be shared between here and <code>LastStores::update</code>. The use here doesn't need mutability and it's generally bad style to get a mutable borrow you'll only read from. But <code>state</code> has to be mutable anyway to update it below, and this is a fairly small source file, so I think it's worth just eliminating the duplication.</p>\n</blockquote>",
        "id": 303321869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991486825\">PR review comment</a>:</p>\n<blockquote>\n<p>Does this work?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                let succ_first_inst = func.layout.first_inst(succ).unwrap();\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303321870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136212916\">PR review</a>.</p>",
        "id": 303321871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991488446\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: I prefer to use <code>.copied()</code> instead of <code>.cloned()</code> for types that are <code>Copy</code>. That serves as documentation, checked at compile-time, that we expected the copy to be cheap.</p>\n<p>There are several other calls to <code>.clone()</code> in this module that I'd prefer to remove for the same reason. They're all on either <code>MemoryState</code> or <code>LastStores</code>, which are both <code>Copy</code>.</p>\n</blockquote>",
        "id": 303321872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991496072\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this should work just as well:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let mut block_input = SecondaryMap::with_capacity(func.dfg.num_blocks());\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303321873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991570277\">PR review comment</a>:</p>\n<blockquote>\n<p>After the end of this loop it'd be nice if <code>state</code> is not mutable, so the compiler will catch any bugs that would be caused by using different states in different successor blocks.</p>\n<p>We could use <code>Iterator::fold</code> for that:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            let state = func.layout.block_insts(block).fold(state, |mut state, inst| {\n                state.update(func, inst);\n                log::trace!(\"after {}: state is {:?}\", inst, state);\n                state\n            });\n</code></pre></div>\n<p>Or just <code>let state = state;</code> after the loop.</p>\n</blockquote>",
        "id": 303321874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991571586\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: this <code>queue</code> is being used as a stack. I like <code>todo</code> or perhaps <code>worklist</code> as names that don't have quite the same data structure connotations.</p>\n</blockquote>",
        "id": 303321875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991602788\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure this comment is still accurate. This alias analysis does do some sort of fixpoint analysis, and doesn't check dominance anywhere.</p>\n</blockquote>",
        "id": 303321876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991416918\">PR review comment</a>:</p>\n<blockquote>\n<p>Should this say something more like:</p>\n<blockquote>\n<p><code>if at a given load or store, we look backward to the \"last store\" of the same type, *AND* we find that it has exactly the same address expression,</code></p>\n</blockquote>\n<p>As it stands, it sounds like we can't conclude must-alias if there's been an intervening store of a different type.</p>\n</blockquote>",
        "id": 303321877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991507910\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: I believe the <code>Display</code> impl on <code>Inst</code> is equivalent to formatting \"inst{}\" with <code>inst.index()</code>:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                    \"alias analysis: scanning at {} with state {:?} ({:?})\",\n                    inst,\n</code></pre></div>\n<p>There are other <code>trace!</code> invocations in this module (and maybe elsewhere?) with the same pattern. <code>Block</code> also formats with \"block{}\", for example. This applies to any type that uses the two-argument version of the <code>entity_impl!</code> macro, as almost everything in <code>cranelift/</code> does. (Though nothing in <code>crates/</code> does.)</p>\n</blockquote>",
        "id": 303321878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991608179\">PR review comment</a>:</p>\n<blockquote>\n<p>If you get rid of <code>MemoryState::Top</code> it becomes pretty straightforward to have <code>meet_from</code> return whether any of the states changed, which could simplify <code>compute_block_input_states</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    fn update(&amp;mut self, other: &amp;LastStores, loc: Inst) -&gt; bool {\n        let meet = |a: &amp;mut MemoryState, b: MemoryState| -&gt; MemoryState {\n            if *a == b {\n                false\n            } else {\n                *a = MemoryState::BeforeInst(loc);\n                true\n            }\n        };\n\n        meet(&amp;mut self.heap, other.heap)\n            | meet(&amp;mut self.table, other.table)\n            | meet(&amp;mut self.vmctx, other.vmctx)\n            | meet(&amp;mut self.other, other.other)\n    }\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303321879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665433723
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136506663\">PR review</a>.</p>",
        "id": 303322630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665434174
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991623343\">PR review comment</a>:</p>\n<blockquote>\n<p>Wait, so it _is_ okay to delete instructions that might trap? Where would I find something describing whether Cranelift is allowed to do optimizations like that?</p>\n<p>If so you could add <code>x|not(x)=-1</code> and <code>x&amp;not(x)=0</code>, I guess.</p>\n</blockquote>",
        "id": 303322631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665434174
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136514623\">PR review</a>.</p>",
        "id": 303323754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665434795
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991628827\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, no, we definitely don't delete any side-effecting instructions (aside from redundant loads but that's separate). I'm not sureI understand why including <code>x*0 == 0</code> or <code>x&amp;0 == 0</code> has any effect on that?</p>\n</blockquote>",
        "id": 303323755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665434796
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991628827\">PR review comment</a>.</p>",
        "id": 303323938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665434910
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303324670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665435396
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303324969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665435599
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991637679\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that updated version is actually subtly mismatching how the analysis works, and the version in the code is correct: the \"last store\" analysis doesn't consider store types, so we really are looking a the \"last store\" to the category, regardless of type or address. Then we compare address and type (\"it has exactly the same address expression and type\") and forward only if those match.</p>\n</blockquote>",
        "id": 303325265,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665435764
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136527210\">PR review</a>.</p>",
        "id": 303325266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665435764
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991637998\">PR review comment</a>:</p>\n<blockquote>\n<p>And specifically \"an intervening store of a different type\" would be caught by the logical condition described in the code, but not the modified text above.</p>\n</blockquote>",
        "id": 303325305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665435803
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136527701\">PR review</a>.</p>",
        "id": 303325307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665435803
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303327691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665437250
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136544877\">PR review</a>.</p>",
        "id": 303327700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665437257
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991650714\">PR review comment</a>:</p>\n<blockquote>\n<p>Right, it's not fully a meet-lattice (or a proper \"meet\" binary operator), because meet takes a location and generates a different \"bottom\" value for each location.</p>\n<p>Or more properly, it is a family of meet semilattices, indexed on location; each location actually meets over a slightly different semilattice with its own private \"bottom\".</p>\n<p>All that's a fancy and fairly useless way of saying that we want to not fall back to a generic \"unknown, we can't conclude anything\" state: we can actually still name the state (every program point has some symbolic state), we just don't have a better name for it or a proof that it is equal to any other state in the program.</p>\n<p>So -- given that it's definitely not a meet-semilattice -- your suggestions are great actually and I've updated things (and added doc-comments). Thanks!</p>\n</blockquote>",
        "id": 303327702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665437257
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136544982\">PR review</a>.</p>",
        "id": 303327707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665437265
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991650814\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'd like a comment here on why this is currently limited to the Load opcode specifically, rather than any instruction with that format. I assume it's something about store-to-load forwarding requiring that the load and store access the same memory width, and also have the same Value type, so that the value passed to the store can be substituted for the load. (I imagine future work could include replacing widening loads with sign- or zero-extend instructions given a suitable narrow store.) But it's not obvious to me how this interacts with redundant-load elimination.</p>\n</blockquote>\n<p>Yep, that's exactly it. I've added a comment to that effect.</p>\n<p>The interaction with RLE is that the RLE pass performs an action only if this analysis provides a \"memory state\" for an instruction, so if we withhold that state, then the analysis is effectively saying \"this is not an analyzable load\".</p>\n<blockquote>\n<p>[removing redundant match, and <code>for_flags</code> update]</p>\n</blockquote>\n<p>Awesome, I like this much better -- done!</p>\n<p>(I think this is a Lens in the Haskell sense, or at least a Functor, but I'm gonna look away from the abyss before it swallows me here)</p>\n</blockquote>",
        "id": 303327708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665437265
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136548046\">PR review</a>.</p>",
        "id": 303328125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665437542
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991653132\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>[handle stack stores specially]</p>\n</blockquote>\n<p>Yep, we definitely could do this. None of the benchmarks I had been developing with use them (actually, <code>cranelift-wasm</code> doesn't use them at all) so I didn't have an easy way to test or evaluate the effect of this; it can definitely be done as future work.</p>\n<blockquote>\n<p>[treat some instructions only as \"other\"]</p>\n</blockquote>\n<p>Unfortunately I don't think this is correct in all circumstances: an instruction about which we don't know anything has to clobber all segments of the state, not just \"other\" (i.e., it could alias with any of the categories).</p>\n<p>It's possible that reasoning about the specific instruction formats that exist could lead us to something more precise here, but I really don't want to go down that road, because it bakes in knowledge of the opcode set as static and unchanging, and thus sets up an action-at-a-distance timebomb for when we later add some other instruction kind that involves memory. I'd rather have fallback logic here that basically says \"if we don't know, clobber everything\" -- it's the safe and obviously-correct (for some value of \"obvious\") approach :-)</p>\n</blockquote>",
        "id": 303328126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665437542
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303329147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438268
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136556106\">PR review</a>.</p>",
        "id": 303329156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991658969\">PR review comment</a>:</p>\n<blockquote>\n<p>It's almost like these convenience functions exist to increase my convenience! I should know our APIs better; thanks :-)</p>\n</blockquote>",
        "id": 303329158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438275
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136556144\">PR review</a>.</p>",
        "id": 303329160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438279
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991658993\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, neat, I didn't know about <code>.copied()</code>; new idiom noted!</p>\n</blockquote>",
        "id": 303329162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438279
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136556182\">PR review</a>.</p>",
        "id": 303329165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438283
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991659031\">PR review comment</a>:</p>\n<blockquote>\n<p>Needs a constructor that takes a default <em>and</em> capacity, with refactors now; I was about to complain that such a thing doesn't exist on <code>SecondaryMap</code> but I just went to add it instead!</p>\n</blockquote>",
        "id": 303329166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438283
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136556228\">PR review</a>.</p>",
        "id": 303329172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438288
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991659064\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, that's much cleaner!</p>\n<p>I'm not sure why I had <code>#[inline(never)]</code> here; perhaps that's from some performance tweaking but I should have left a comment why. In the absence of such a comment, I'll delete these (it seems like it shouldn't matter); and can always add them back if something blows up in final measurements.</p>\n</blockquote>",
        "id": 303329174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438289
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136556277\">PR review</a>.</p>",
        "id": 303329180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438294
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991659097\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n<p>I also went ahead and converted these <code>log::trace!</code>'s to <code>trace!</code>'s, to ensure we use our custom-defined macro that conditionally compiles (I often forget this!).</p>\n</blockquote>",
        "id": 303329181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438294
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136509549\">PR review</a>.</p>",
        "id": 303329249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438353
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136509549\">PR review</a>.</p>",
        "id": 303329250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438353
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991656131\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the following implementation is correct. Asymptotically, it has the same time complexity, but its space complexity is O(1) instead of O(n). Whether it's faster or slower in practice is another question entirely, of course. My guess is it's about the same.</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        for lp in self.loops.keys() {\n            if self.loops[lp].level == LoopLevel::invalid() {\n                let mut assigned = self.loops[lp].parent;\n                let mut level = 0usize;\n                while let Some(parent) = assigned.expand() {\n                    level += 1;\n                    if self.loops[parent].level != LoopLevel::invalid() {\n                        level += self.loops[parent].level.0.into();\n                        break;\n                    }\n                    assigned = self.loops[parent].parent;\n                }\n                let mut cur = PackedOption::from(lp);\n                while cur != assigned {\n                    self.loops[cur.unwrap()].level = level.into();\n                    cur = self.loops[cur.unwrap()].parent;\n                    level -= 1;\n                }\n            }\n        }\n</code></pre></div>\n<p>In writing this, though, I realized that <code>LoopLevel::root()</code> can't appear in <code>loops[lp].level</code> after analysis is done, which means I think zero would be a better choice for an \"invalid\" value. This would all be a little simpler if a loop level were represented as <code>Option&lt;NonZeroU8&gt;</code>. Then you can even replace <code>LoopLevel::inc</code> with <code>NonZeroU8::saturating_add</code>, which apparently was just added in Rust 1.64.</p>\n</blockquote>",
        "id": 303329251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438353
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991643568\">PR review comment</a>:</p>\n<blockquote>\n<p>Okay, it's clear that these optimizations can potentially delete the only transitive data dependency on a potentially side-effecting instruction like integer division, right?</p>\n<p>I guess the reason you're saying we don't delete those in spite of these optimizations is because they're kept even if there is no data dependency on them from any return instruction. Is that right?</p>\n<p>In that case I think I'm satisfied. Though maybe a comment to that effect, in this source file specifically, would help somebody later.</p>\n</blockquote>",
        "id": 303329252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438353
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991625322\">PR review comment</a>:</p>\n<blockquote>\n<p>I weakly disagree about avoiding e.g. <code>*inst</code>, and weakly agree about the hazards of this particular magic. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Regardless, fair enough!</p>\n</blockquote>",
        "id": 303329253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438353
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991658501\">PR review comment</a>:</p>\n<blockquote>\n<p>This rematerialization test case seems like an odd example since <code>block2</code> is strictly worse on any machine that has... um... at least one register, right?</p>\n<p>It's a nice example of re-associating and constant-folding, though.</p>\n</blockquote>",
        "id": 303329254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438353
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303329651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438621
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136559695\">PR review</a>.</p>",
        "id": 303329654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438624
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991661796\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 303329655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438625
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136559721\">PR review</a>.</p>",
        "id": 303329656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438628
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991661817\">PR review comment</a>:</p>\n<blockquote>\n<p>But you're passing the, um, default <code>default</code> to <code>with_default</code>. So the existing <code>with_capacity</code> is fine, right?</p>\n</blockquote>",
        "id": 303329657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438628
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136559739\">PR review</a>.</p>",
        "id": 303329659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438629
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991661826\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yes, good catch; updated.</p>\n</blockquote>",
        "id": 303329660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438629
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991661871\">PR review comment</a>:</p>\n<blockquote>\n<p>The second version reads more confusingly to me; and it seems less error-prone to retain the top-level \"if old != new\" check than to thread a bool through the recomputation. If you really feel strongly here I'm happy to tweak further though...</p>\n</blockquote>",
        "id": 303329663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438634
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136559802\">PR review</a>.</p>",
        "id": 303329664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438634
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136559847\">PR review</a>.</p>",
        "id": 303329667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438639
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991661900\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed (with <code>worklist</code>).</p>\n</blockquote>",
        "id": 303329668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438639
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303329719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438679
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991663033\">PR review comment</a>:</p>\n<blockquote>\n<p>Right, side-effecting ops are kept in the top-level \"side-effect skeleton\", so they are never deleted.</p>\n<p>Do you think we need a comment specifically on these rules, or ...? The reason I ask is that strictly speaking, <em>any optimization at all</em> that removes a reference to an input could trigger this confusion. I guess a top-level note on what rules are allowed to do (rewrite pure ops arbitrarily, remove references...) could help though.</p>\n</blockquote>",
        "id": 303329876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438794
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136561428\">PR review</a>.</p>",
        "id": 303329877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438794
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303330052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438911
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136562727\">PR review</a>.</p>",
        "id": 303330062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438923
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991663977\">PR review comment</a>:</p>\n<blockquote>\n<p>(Added a comment; feel free to suggest better clarifications if you have more ideas)</p>\n</blockquote>",
        "id": 303330063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665438923
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303330230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665439037
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991664841\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, huh, <code>None</code> is indeed the default for an <code>Option</code>. I guess I could have guessed that but it didn't occur to me. Thanks!</p>\n</blockquote>",
        "id": 303330234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665439039
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136563918\">PR review</a>.</p>",
        "id": 303330235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665439039
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136564613\">PR review</a>.</p>",
        "id": 303330356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665439111
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991665359\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe I'm confused by the use of the word \"type\". In this paragraph, I read that as referring to heap/table/vmctx/other. If you meant Cranelift type, like I8/I16/etc, that would make sense. Maybe saying \"value type\" disambiguates enough that I wouldn't have tripped over it?</p>\n</blockquote>",
        "id": 303330357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665439111
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136565216\">PR review</a>.</p>",
        "id": 303330415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665439174
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991665795\">PR review comment</a>:</p>\n<blockquote>\n<p>Nah, I don't feel strongly about this.</p>\n</blockquote>",
        "id": 303330416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665439174
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991667550\">PR review comment</a>:</p>\n<blockquote>\n<p>Somehow I assumed cranelift-wasm used stack slots, but I guess there really is no reason for it to. Huh!</p>\n<p>Well, I don't think it matters for this PR, but perhaps <code>has_memory_fence_semantics</code> should still be updated to include <code>Debugtrap</code>? It does seem like an instruction that shouldn't have memory accesses reordered across it.</p>\n</blockquote>",
        "id": 303330762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665439411
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136567602\">PR review</a>.</p>",
        "id": 303330763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665439411
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136575500\">PR review</a>.</p>",
        "id": 303332321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665440230
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991673369\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this should be <code>.get_or_insert(state)</code>, because we want <code>meet_from</code> to leave the state unchanged if this is the first time we're setting it. Or just:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                if let Some(succ_state) = succ_state.as_mut() {\n                    succ_state.meet_from(&amp;state, succ_first_inst);\n                } else {\n                    *succ_state = state;\n                }\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303332322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665440230
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136599556\">PR review</a>.</p>",
        "id": 303336278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665442979
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991690974\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yes, it is indeed a value type; I'll clarify the wording. Thanks!</p>\n</blockquote>",
        "id": 303336279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665442979
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303336305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665443001
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303336413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665443097
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136600803\">PR review</a>.</p>",
        "id": 303336450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665443138
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991692053\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yes, I agree -- updated (and actually added <code>op if op.can_trap()</code> as an additional match arm).</p>\n</blockquote>",
        "id": 303336451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665443138
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136594447\">PR review</a>.</p>",
        "id": 303345695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450296
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136594447\">PR review</a>.</p>",
        "id": 303345697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450296
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991687138\">PR review comment</a>:</p>\n<blockquote>\n<p><code>opts/store_to_load.isle</code> doesn't exist. It looks like after writing this comment you changed things so the store-to-load optimization is called directly from <a href=\"http://egraph.rs\">egraph.rs</a>, not from ISLE.</p>\n</blockquote>",
        "id": 303345699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450296
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991724589\">PR review comment</a>:</p>\n<blockquote>\n<p>Why is <code>at_loop_level</code> fallible?</p>\n</blockquote>",
        "id": 303345700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450296
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991703446\">PR review comment</a>:</p>\n<blockquote>\n<p>Why doesn't <code>eclass_type</code> return types found in <code>Param</code> or <code>Result</code> nodes? It seems like the only case where it ought to fail is if all nodes are <code>Pure</code> or <code>Inst</code> with multiple results. I'd also think that if any node in the class has multiple results, they all should.</p>\n<p>If all of that's true, then I think you can match on any node in the class and determine the result without looking further.</p>\n</blockquote>",
        "id": 303345701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450297
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991723523\">PR review comment</a>:</p>\n<blockquote>\n<p>This is an option now, right?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                                    if egraph.egraph.unionfind.equiv_id_mut(store_addr, *load_addr) {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303345702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450297
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991698077\">PR review comment</a>:</p>\n<blockquote>\n<p>Is there an implicit precondition that <code>egraph.subsume_ids</code> is empty on entry to <code>optimize_eclass</code>?</p>\n<p>For this sort of memory reuse, I like to call <code>.clear()</code> on entry to a function like <code>optimize_eclass</code>, instead of on exit, because that's one less precondition I have to keep track of and verify in callers.</p>\n<p>Although, weird thought: couldn't you put a <code>subsume</code> bool in the <code>IsleContext</code> and just check that after each call to <code>next</code>?</p>\n</blockquote>",
        "id": 303345703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450297
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991696882\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice: having <code>can_trap</code> imply <code>has_memory_fence_semantics</code> seems like a good idea. Though actually, should <code>Debugtrap</code> be in <code>can_trap</code> as well?</p>\n</blockquote>",
        "id": 303345704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450297
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991718464\">PR review comment</a>:</p>\n<blockquote>\n<p>Why does <code>store_to_load</code> only fire if there's a Load as the _first_ enode encountered while traversing the eclass? Is this because the node was added to the egraph immediately before this function is called?</p>\n<p>I think that could use a comment.</p>\n<p>Is it necessary for correctness to add the Load node to the egraph if the store gets forwarded to the load? Hypothetically, could the caller pass <code>load_op</code>, <code>load_ty</code>, etc to this function, and entirely skip constructing the <code>Node::Load</code> if it succeeds? I'm not asking you to change that in this PR, I just want to know if there are invariants that would break if someone did that.</p>\n</blockquote>",
        "id": 303345705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450297
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991723111\">PR review comment</a>:</p>\n<blockquote>\n<p>This is an intimidating amount of nesting for one function.</p>\n<p>Studying it carefully, I think almost all of the branches are necessary, although I'd suggest <code>.unwrap()</code> on the two calls to <code>get_node()</code>: in both cases, the eclass is provided from a source that just added the appropriate kind of node.</p>\n<p>The only other significant improvement I see is here: matching the <code>load_op</code> and <code>store_op</code> against appropriate <code>InstructionImms</code> cases can be folded into the earlier matches against <code>Node::Load</code> and <code>Node::Inst</code>, respectively.</p>\n<p>If you make this function return <code>Option&lt;Id&gt;</code>, I believe the <code>?</code> syntax works for unwrapping <code>Option</code>s. So that could help some too, although if you use <code>unwrap</code> on the <code>get_node</code> calls I believe there's only one <code>Option</code> left.</p>\n</blockquote>",
        "id": 303345706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665450297
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136675812\">PR review</a>.</p>",
        "id": 303349168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665453516
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991749492\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I see, this is the same trick we saw in the famous single-predecessor-chain traversals :-) OK, yeah, avoiding the <code>SmallVec</code> might be worthwhile here. I agree that the shallow loop nests are unlikely to stress either algorithm (so e.g. pointer-chasing overhead of traversing twice is likely negligible) so on balance let's go with yours as it requires less storage.</p>\n</blockquote>",
        "id": 303349169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665453516
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303349198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665453561
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136745027\">PR review</a>.</p>",
        "id": 303357804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462153
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991800579\">PR review comment</a>:</p>\n<blockquote>\n<p>Yup, same trick! I might be over-eager to apply that trick now, but it's a pretty good trick. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n<p>I hope my version works; I meant it to be illustrative, more than an exact solution. I typed it directly into the GitHub comment, so I didn't even know whether it would compile…</p>\n<p>I was briefly tempted to suggest a different trick: temporarily overwrite the parent pointers during the traversal so they instead point to the child you need to return to, then put back the original parent pointers as you walk back up the stack. That gives you the stack traversal pattern in O(1) additional space. It's also too clever/confusing to justify using here, I think. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I believe I first learned about it in the context of some garbage collector, where it makes more sense.</p>\n</blockquote>",
        "id": 303357805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462153
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136745708\">PR review</a>.</p>",
        "id": 303357864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462237
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991801060\">PR review comment</a>:</p>\n<blockquote>\n<p>Right, it's testing specifically that remat is preferred even when GVN would do the opposite naturally. It looks silly here where register pressure is low, but it happened to help significantly with SpiderMonkey, so...</p>\n<p>(The case where it's most interesting is when there are a whole bunch of values like <code>x+1</code>, <code>x+2</code>, ... rematerialized inside a loop or otherwise deeper into a function, and when these all would otherwise be hoisted by LICM or GVN; then we have just one register <code>x</code> live instead of all of the values)</p>\n</blockquote>",
        "id": 303357866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462237
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303358041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462421
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303358054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462434
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303358078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462480
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303358361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462740
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136750237\">PR review</a>.</p>",
        "id": 303358386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462783
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991804573\">PR review comment</a>:</p>\n<blockquote>\n<p>It almost worked! The last <code>level -= 1</code> would underflow before we take the backedge and hit a loop-exiting condition; reconfigured things a bit to break before that.</p>\n</blockquote>",
        "id": 303358387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665462783
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303358653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665463043
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136752540\">PR review</a>.</p>",
        "id": 303358654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665463043
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991806249\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, right; I still had the <code>Top</code> default state in my mind and had figured that meeting with an initial <code>Top</code> was harmless; but here the default is <code>Entry</code> so we need to special-case the first set.</p>\n</blockquote>",
        "id": 303358655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665463043
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303359717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464161
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991814076\">PR review comment</a>:</p>\n<blockquote>\n<p>No reason at all -- updated!</p>\n</blockquote>",
        "id": 303359722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464162
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136763208\">PR review</a>.</p>",
        "id": 303359725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464163
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136763249\">PR review</a>.</p>",
        "id": 303359758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464167
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991814114\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 303359759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464167
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136763372\">PR review</a>.</p>",
        "id": 303359767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464178
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991814217\">PR review comment</a>:</p>\n<blockquote>\n<p>The optimization entrypoints are invoked for every new eclass node created (i.e., every time an enode is added to an eclass), so we only need to (and in fact should only, to avoid redundancy) examine just the latest enode in the eclass. I'll add a comment regarding this!</p>\n<blockquote>\n<p>Is it necessary for correctness to add the Load node to the egraph if the store gets forwarded to the load? Hypothetically, could the caller pass load_op, load_ty, etc to this function, and entirely skip constructing the Node::Load if it succeeds? I'm not asking you to change that in this PR, I just want to know if there are invariants that would break if someone did that.</p>\n</blockquote>\n<p>I think that's technically possible, yeah, although there's one important case it would pessimize (in compile time, not code quality): having the <code>Load</code> node in the egraph as well lets other later <code>Load</code>s (with the same memory state) deduplicate with it. If we did not add the <code>Load</code> node to the egraph at all, then later <code>Load</code>s would eventually still end up with the forwarded stored value if the original did, because <code>store_to_load</code> is deterministic; but we would redo the work each time to determine that.</p>\n</blockquote>",
        "id": 303359768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464179
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136763445\">PR review</a>.</p>",
        "id": 303359771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464186
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991814267\">PR review comment</a>:</p>\n<blockquote>\n<p>That's a great question! I think I simply did not hit these cases while experimenting with this extractor with rewrite rules, but they absolutely should exist.</p>\n</blockquote>",
        "id": 303359772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464186
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991814326\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually, thinking about this has made me realize why both this line (and the <code>subsume</code> bool also) don't work: reentrancy of the rewriting! From within the call to <code>simplify</code> we can create a new node and enter <code>optimize_eclass</code> recursively; I think both a clear-at-beginning and clear-at-end potentially prematurely clear <code>subsume</code> directives that should be seen by an outer invocation. The most precise memory-reuse approach is probably to clear it when exiting the top level (based on the reentrancy limiter / depth counter) but in order to make reasoning about this easier I think we can probably just let it live for the duration of the egraph (function) rewrite.</p>\n</blockquote>",
        "id": 303359778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464193
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136763507\">PR review</a>.</p>",
        "id": 303359779,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464193
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991814361\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I had missed that, thanks! (Yeah, I tried to write store-to-load forwarding as a rule at first, but it turned out to be too... bespoke?... to build a bunch of extractors and special support for side-effecting insts in the general rewrite framework to reason about loads and stores.)</p>\n</blockquote>",
        "id": 303359788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464199
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136763562\">PR review</a>.</p>",
        "id": 303359789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464199
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303360402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464757
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136769444\">PR review</a>.</p>",
        "id": 303360404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464759
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991818491\">PR review comment</a>:</p>\n<blockquote>\n<p>I golfed this a bit more, starting from your suggestions (thanks!); I combined the three conditionals (type, offset, address) into one as well. Much better now!</p>\n<p>I'm still noodling over the idea of making this an ISLE rule instead; maybe eventually it will be better that way, when we have more infrastructure to support non-pure ops, but I think I want to approach that idea incrementally / as a followup.</p>\n</blockquote>",
        "id": 303360405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665464759
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1136851472\">PR review</a>.</p>",
        "id": 303368629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665470858
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r991876063\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that means I got the edge cases wrong a different way: the smallest level it should assign is 1, so decrementing it an extra time in the last loop iteration should never underflow.</p>\n<p>Also, I see you changed my usize to a u8 so you could directly construct a LoopLevel. I'd imagined a From impl that would saturate when converting from a usize that was too large. But this is fine too, at least in debug builds where overflow panics. Loop depth comes from untrusted input so I think that probably should be checked in release builds too, right? Restricting to 255-deep nested loops seems reasonable to me, anyway.</p>\n</blockquote>",
        "id": 303368630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665470859
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137497640\">PR review</a>.</p>",
        "id": 303458800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665500880
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992426975\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Last-store instruction (or none) for a given load. Use a hash map\n    /// instead of a `SecondaryMap` because this is sparse.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303458803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665500880
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992420886\">PR review comment</a>:</p>\n<blockquote>\n<p>If we are computing this for ~every instruction, then a <code>SecondaryMap</code> should perform better here.</p>\n</blockquote>",
        "id": 303458804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665500880
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992433430\">PR review comment</a>:</p>\n<blockquote>\n<p>Is there a reason we aren't using <code>std::ops::Range</code> here?</p>\n</blockquote>",
        "id": 303458805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665500880
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992428494\">PR review comment</a>:</p>\n<blockquote>\n<p>Is <code>always</code> really needed over just <code>#[inline]</code>? In excess, <code>always</code> tends to slow down debug builds.</p>\n</blockquote>",
        "id": 303458806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665500880
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992425444\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah okay I see that this is just for load instructions.</p>\n</blockquote>",
        "id": 303458807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665500880
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992443285\">PR review comment</a>:</p>\n<blockquote>\n<p>Are these meant to happen before we land this PR or in a follow up? Because IIUC right now if egraphs are enabled then we don't run simple preopt which means that we won't do either of these optimizations at all.</p>\n</blockquote>",
        "id": 303458809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665500880
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137497640\">PR review</a>.</p>",
        "id": 303458862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665500884
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992329804\">PR review comment</a>:</p>\n<blockquote>\n<p><code>Default</code> is in the <code>std</code> prelude so the namespace shouldn't need to be fully elaborated here.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>impl Default for AnalysisValue {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303458865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665500885
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992474396\">PR review comment</a>:</p>\n<blockquote>\n<p>I think there should be a stat for max <code>rewrite_depth</code>, or for number of times <code>REWRITE_LIMIT</code> was exceeded, or both.</p>\n</blockquote>",
        "id": 303462653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665502001
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992475299\">PR review comment</a>:</p>\n<blockquote>\n<p>I think letting <code>subsume_ids</code> live for the duration of the function rewriting is a fine idea; as you say, it's simplest to reason about.</p>\n<p>That said: I think putting a bool in the <code>IsleContext</code> is actually reentrancy-safe, because there's a separate instance of that context for every call to <code>optimize_eclass</code>. They all share the same reference to the egraph, which is why a shared <code>HashSet</code> there is _not_ safe, but we can add things that are local to each rewrite.</p>\n</blockquote>",
        "id": 303462654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665502001
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137721226\">PR review</a>.</p>",
        "id": 303462655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665502001
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992477922\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not Chris, but I think they're intended for a follow-up. Compiling with egraphs is disabled by default for now, so it doesn't have to have every optimization yet. They're probably necessary before egraphs can be the default though, I'd think.</p>\n</blockquote>",
        "id": 303463166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665502144
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137726608\">PR review</a>.</p>",
        "id": 303463167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665502144
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137849181\">PR review</a>.</p>",
        "id": 303477947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665506777
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992563179\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure; it's pre-existing though (this definition was copied from the ISLE definition preludes for the backends). That change could be made across all backends if we want to look into it after this PR, maybe?</p>\n</blockquote>",
        "id": 303477948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665506777
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137849732\">PR review</a>.</p>",
        "id": 303478013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665506801
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992563653\">PR review comment</a>:</p>\n<blockquote>\n<p>This one is actually load-bearing IIRC, from performance tuning!</p>\n</blockquote>",
        "id": 303478015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665506801
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137921241\">PR review</a>.</p>",
        "id": 303487659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665510057
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992615498\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, I'd prefer to get this in-tree and then continue adding to the body of opts, rather than holding back even longer.</p>\n</blockquote>",
        "id": 303487660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665510057
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303494207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665512371
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303494313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665512404
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137969929\">PR review</a>.</p>",
        "id": 303494509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665512473
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992649861\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, that's a good point; I had been imagining a bool flag on the egraph itself rather than the per-ISLE-invocation context. Happy to revisit this (and actually the whole reentrancy mechanism maybe) in followup work...</p>\n</blockquote>",
        "id": 303494510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665512473
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303494803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665512580
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137972100\">PR review</a>.</p>",
        "id": 303494817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665512584
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992651319\">PR review comment</a>:</p>\n<blockquote>\n<p>Done (the latter)!</p>\n</blockquote>",
        "id": 303494820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665512584
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303499275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665514234
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303509982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518276
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137749130\">PR review</a>.</p>",
        "id": 303510307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518400
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1137749130\">PR review</a>.</p>",
        "id": 303510308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518400
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992503295\">PR review comment</a>:</p>\n<blockquote>\n<p>How about replacing <code>NodeCtx::with_capacity</code> with a <code>NodeCtx::for_dfg</code>, and passing in <code>&amp;func.dfg</code>? Right now the two <code>usize</code> arguments are easy to mix up. Even looking at the only caller, I can't immediately tell if <code>func.dfg.num_values()</code> is the right argument for <code>types</code> and <code>func.dfg.value_lists.capacity()</code> is the right argument for <code>args</code>.</p>\n</blockquote>",
        "id": 303510309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518400
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992493737\">PR review comment</a>:</p>\n<blockquote>\n<p>As far as I can tell, this <code>Default</code> impl for <code>NodeCtx</code> is unused. But if it were needed, it should be derivable.</p>\n</blockquote>",
        "id": 303510310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518400
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992538268\">PR review comment</a>:</p>\n<blockquote>\n<p>All the uses of <code>NodeKey::node</code>, like this one, would be a little nicer if type inference just worked. I think there are several ways to do that.</p>\n<p>One is if, instead of using <code>L: Language</code> as the type parameter and using <code>L::Node</code>, we just let the node type <code>N</code> be the type parameter, without constraining it to come from any language. Callers already pass <code>egraph.nodes</code>, which uniquely determines the node type, just not the language type.</p>\n<p>Another is to have that function take a reference to the <code>EGraph&lt;L, A&gt;</code>, and access the <code>nodes</code> field itself. That's a little tedious for <code>NodeKeyCtx</code> which would need to borrow the whole egraph instead of just the nodes, but that probably works.</p>\n<p>The last option would be to give <code>NodeKey</code> and <code>EClass</code> a phantom type parameter for the language they come from, and thread that type parameter through everywhere. I think that's appealing in the long run for ensuring that these node and class IDs can't be misused, but I wouldn't want to do it in this PR.</p>\n<p>I think either of the first two would be nice to do now.</p>\n</blockquote>",
        "id": 303510311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518400
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992597237\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: I'd prefer not to hard-code the type here so we could fiddle with it by just changing the definition of <code>Node::Param</code>.</p>\n<p>Also, I recently noticed there's <a href=\"https://doc.rust-lang.org/std/error/index.html#common-message-styles\">guidance on error message style</a> in the Rust docs. I'm not entirely sure how to apply that advice here, but I intend to think about it more when I'm writing these sorts of things.</p>\n<p>So maybe:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                            index: i.try_into().expect(\"blockparam index should fit in Node::Param\"),\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303510312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518400
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992573968\">PR review comment</a>:</p>\n<blockquote>\n<p>I was curious, so I checked: <code>ops::Range</code> has a derived implementation of <code>Default</code>, so <code>0..0</code> is what you'd get from <code>SecondaryMap::new</code>.</p>\n<p>I keep harping on this because I kind of want to remove the <code>SecondaryMap::with_default</code> constructor. I believe every existing use either is redundant with an existing implementation of <code>Default</code> or would be natural to implement.</p>\n</blockquote>",
        "id": 303510313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518400
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992656952\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd prefer to avoid the <code>unwrap</code> here by explicitly matching on the <code>InstructionData</code>:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                let is_readonly_load = match func.dfg[inst] {\n                    InstructionData::Load {\n                        opcode: Opcode::Load,\n                        flags,\n                        ..\n                    } =&gt; flags.readonly() &amp;&amp; flags.notrap(),\n                    _ =&gt; false,\n                };\n</code></pre></div>\n<p>I'm guessing that, unlike in the alias analysis, here it really isn't important that the opcode be exactly <code>Opcode::Load</code>. Sign- or zero-extending loads and vector loads should also be okay to treat as pure if they're both readonly and notrap, right?</p>\n</blockquote>",
        "id": 303510314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518400
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303511105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518690
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138091810\">PR review</a>.</p>",
        "id": 303511582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518878
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992733873\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm guessing that, unlike in the alias analysis, here it really isn't important that the opcode be exactly Opcode::Load. Sign- or zero-extending loads and vector loads should also be okay to treat as pure if they're both readonly and notrap, right?</p>\n</blockquote>\n<p>In theory yeah, that's absolutely true. However making that change is a little more than <code>op.can_load()</code> because we want exactly those loads that are \"normal\" (take a value from memory with no special semantics or other side-effects), and <code>.can_load()</code> is a much broader predicate that includes e.g. atomics and CAS; and there's no \"normal load but maybe extending\" predicate. So I wanted to avoid untested, uncertain complexity.</p>\n<p>Happy to address this in a followup if we find cases where it's important (or just in general), though!</p>\n</blockquote>",
        "id": 303511584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518878
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138092230\">PR review</a>.</p>",
        "id": 303511673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518899
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992734157\">PR review comment</a>:</p>\n<blockquote>\n<p>(The suggestion is great though, applying that; thanks!)</p>\n</blockquote>",
        "id": 303511674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518900
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303511735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665518935
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303511980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519022
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138102916\">PR review</a>.</p>",
        "id": 303513162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519480
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992741327\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed, that works!</p>\n</blockquote>",
        "id": 303513163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519481
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303513184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519483
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138103008\">PR review</a>.</p>",
        "id": 303513215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519485
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992741390\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah! I had fought with this for a bit when I first wrote it to try to get the type-inference to work; it never occurred to me to just parameterize directly on the node type. That indeed works. Thanks!</p>\n</blockquote>",
        "id": 303513217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519485
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992741471\">PR review comment</a>:</p>\n<blockquote>\n<p>I like that; named it <code>with_capacity_for_dfg</code> to make its semantics clearer (just <code>for_dfg</code> might imply that it somehow translates the contents of the DFG or something like that).</p>\n</blockquote>",
        "id": 303513229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519490
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138103107\">PR review</a>.</p>",
        "id": 303513230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519490
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138103191\">PR review</a>.</p>",
        "id": 303513246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992741529\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, verified it's not needed; deleted!</p>\n</blockquote>",
        "id": 303513248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519495
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138085235\">PR review</a>.</p>",
        "id": 303519441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665522074
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992760429\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe this <code>unwrap()</code> will panic on <code>StackLoad</code> instructions.</p>\n</blockquote>",
        "id": 303519442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665522074
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138085235\">PR review</a>.</p>",
        "id": 303519443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665522074
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992773551\">PR review comment</a>:</p>\n<blockquote>\n<p>Assuming the post-processing of the new eclass ID doesn't use this <code>side_effect</code> flag, instead checking whether the added node was <code>Node::Pure</code> or not... Maybe this use of the flag can be replaced like so, and the definition of the flag above can be deleted:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                } else if has_side_effect(func, inst) || opcode.can_load() {\n</code></pre></div>\n<p>The flag is currently the disjunction of three cases:</p>\n<ol>\n<li>Does this instruction have side effects according to <code>has_side_effect</code>?</li>\n<li>Is this a non-<code>readonly</code> load?</li>\n<li>Can this instruction store?</li>\n</ol>\n<p>Case 3 is already covered by case 1: <code>opcode.can_store()</code> implies <code>has_side_effect</code>. So that case should be deleted regardless.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;The relationship between case 1 and 2 is confusing though.&lt;/summary&gt;</p>\n<p>If an instruction:<br>\n- <code>can_load</code>, and<br>\n- it is not a <code>StackLoad</code>, and<br>\n- it is either not the <code>Load</code> instruction format, or it does not have the <code>notrap</code> flag set,<br>\nthen <code>has_side_effect</code> is implied.</p>\n<p>At this <code>else</code>, we've already ruled out the possibility that the instruction is a load with both <code>readonly</code> and <code>notrap</code> flags set. So there are two remaining cases where case 2 is not implied by case 1:<br>\n- it could be a <code>Load</code>-format instruction with <code>notrap</code> but without <code>readonly</code><br>\n- it could be a <code>StackLoad</code></p>\n<p>In those cases, this PR currently uses <code>Node::Inst</code>, but if we just use <code>has_side_effect</code>, those cases would use <code>Node::Pure</code> instead.</p>\n<p>&lt;/details&gt;</p>\n<p>I think it makes sense that all loads need their order and execution preserved unless they fall into one of the two earlier special cases:<br>\n- either they're in read-only memory (so they can be re-ordered past stores) and they can't trap (so they can be deleted if unused),<br>\n- or alias analysis proves that it's okay to delete or forward a load.</p>\n</blockquote>",
        "id": 303519444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665522074
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992737535\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not suggesting using <code>op.can_load()</code>. The version I proposed here checks that the instruction uses the <code>Load</code> instruction format, which excludes all the atomics and other magic loads. So that actually is a \"normal load but maybe extending\" predicate, as far as I can tell. I think you just need to delete the <code>opcode: Opcode::Load</code> pattern if you want to cover the other cases.</p>\n</blockquote>",
        "id": 303519445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665522074
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992729398\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm having trouble convincing myself that these conditions agree with corresponding conditionals above. So, let's say after the <code>let node = ...</code> block above, there's something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">is_pure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">node</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"n\">Pure</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And assume <code>id</code> is <code>mut</code> above. Then this block could look something like the following. I'm choosing to call <code>store_to_load</code> on all new enodes: that function already has to guard against being handed an eclass ID that is not a load, so this doesn't affect correctness. It might affect performance, but that's not clear to me, and it's hard to be precise here without duplicating big parts of <code>store_to_load</code>.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                if let NewOrExisting::New(new_id) = id {\n                    // Loads: do store-to-load forwarding.\n                    let opt_id = crate::opts::store_to_load(new_id, self);\n                    trace!(\"store_to_load: {} -&gt; {}\", new_id, opt_id);\n                    if opt_id != new_id {\n                        id = NewOrExisting::Existing(opt_id);\n                    }\n                }\n                let id = match id {\n                    NewOrExisting::Existing(id) =&gt; id,\n                    NewOrExisting::New(id) if is_pure =&gt; {\n                        // Apply all optimization rules immediately; the\n                        // aegraph (acyclic egraph) works best when we do\n                        // this so all uses pick up the eclass with all\n                        // possible enodes.\n                        crate::opts::optimize_eclass(id, self)\n                    }\n                    NewOrExisting::New(id) =&gt; {\n                        self.side_effect_ids.push(id);\n                        self.stats.side_effect_nodes += 1;\n                        id\n                    }\n                };\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303519447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665522074
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992786309\">PR review comment</a>:</p>\n<blockquote>\n<p>Unfortunately I think this will be a meaningful performance regression -- I remember specifically restricting store-to-load logic to run only on loads while tuning.</p>\n<p>Happy to add comments here to clarify as needed -- any thoughts (while keeping the structure the same)?</p>\n</blockquote>",
        "id": 303521676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665523038
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138166994\">PR review</a>.</p>",
        "id": 303521677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665523038
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303522524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665523439
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138173064\">PR review</a>.</p>",
        "id": 303522529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665523440
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992790608\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 303522530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665523440
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138180661\">PR review</a>.</p>",
        "id": 303523551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665523945
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992796119\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm afraid I'm not completely following this suggestion, sorry. If I understand correctly, you're proposing a change, then going through a (fairly complex) case analysis to argue why it's correct? Or is the concern that the code as-written is incorrect? (I agree that the <code>can_store()</code> check is redundant and I've removed it, thanks!)</p>\n<p>I think that at the point we are looking at the definition of predicates and their exhaustive cases, and effectively \"inlining\" that in our reasoning, we are doing something wrong here: we're writing more brittle code that has less modularity. E.g. I'd prefer not to rely on the intersection of specific load flags in two different files to reason about removing a condition here.</p>\n<p>I think that as-written, the conditions are not too bad to understand from first principles: we want to handle the four categories of (i) readonly loads, (ii) all other loads, (iii) all side-effecting ops, and (iv) all pure ops. I like that there are boolean flags that indicate each of these (except the implicit <code>Some</code>-ness of <code>mem_state</code> for loads; I can add <code>is_load</code> if you'd prefer there). I don't like inlining e.g. a <code>|| can_load</code> condition in this if-ladder: it makes the reasoning a lot muddier to me.</p>\n<p>It's possible I've missed the whole point of this comment though; please do let me know if so!</p>\n</blockquote>",
        "id": 303523552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665523945
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303523582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665523963
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992842320\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, talked with @jameysharp offline about this one and I think we can get around the perf regression with another conditional; and the rest of this is actually nice and clean and I like it better. So I'll accept this then tweak it a bit.</p>\n</blockquote>",
        "id": 303533912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665529143
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138245006\">PR review</a>.</p>",
        "id": 303533913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665529143
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303533925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665529160
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303534310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665529372
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138249420\">PR review</a>.</p>",
        "id": 303534639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665529578
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992845648\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, talked with @jameysharp about this one too and it makes more sense now -- accepting suggestion. Thanks!</p>\n</blockquote>",
        "id": 303534640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665529578
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303534675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665529608
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303534985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665529866
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303536112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665530677
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303536619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665531012
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138257580\">PR review</a>.</p>",
        "id": 303539450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533023
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992856858\">PR review comment</a>:</p>\n<blockquote>\n<p>Alternatively:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                            .fold(Cost::zero(), Cost::add);\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303539451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533023
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138257580\">PR review</a>.</p>",
        "id": 303539452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533023
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992863382\">PR review comment</a>:</p>\n<blockquote>\n<p>This return value isn't used in the only caller of this function (<code>elaborate_block</code>). Given that there's already a <code>debug_assert</code>, how about this? Instead of a conditional branch to check the condition, just write a 0 to the Vec's length field:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        self.elab_result_stack.clear();\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303539453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533023
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992854801\">PR review comment</a>:</p>\n<blockquote>\n<p>There's an <code>Opcode::is_terminator</code> which is true for some of the same cases as <code>is_term</code>, but not all the varieties of branches. So I think this is a confusing name for this variable.</p>\n<p>Also, <code>is_terminator</code> includes <code>Trap</code>, which this condition does not. Should it?</p>\n</blockquote>",
        "id": 303539454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533023
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992852069\">PR review comment</a>:</p>\n<blockquote>\n<p>You can make <code>result_tys</code> a slice in both cases and just loop over it later without having to re-check which case you're in:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let (instdata, result_tys) = match node {\n            Node::Pure { op, types, .. } | Node::Inst { op, types, .. } =&gt; (\n                op.with_args(args, &amp;mut self.func.dfg.value_lists),\n                types.as_slice(&amp;self.node_ctx.types),\n            ),\n            Node::Load { op, ty, .. } =&gt; (\n                op.with_args(args, &amp;mut self.func.dfg.value_lists),\n                std::slice::from_ref(ty),\n            ),\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303539455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533023
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992867905\">PR review comment</a>:</p>\n<blockquote>\n<p>Out of curiosity: since block params are unique, each such enode _should_ be absent at this point, right?</p>\n</blockquote>",
        "id": 303539456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533023
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303539848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533290
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303539942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533391
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303540026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533439
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992871947\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, here we are actually returning the result, so unfortunately we can't do that...</p>\n</blockquote>",
        "id": 303540139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533524
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138283422\">PR review</a>.</p>",
        "id": 303540140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533524
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303540173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533538
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138283865\">PR review</a>.</p>",
        "id": 303540230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533584
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992872282\">PR review comment</a>:</p>\n<blockquote>\n<p>Err, apparently I'm reading too fast because I see you noted this above and further noted it isn't used :-) Yes, actually, this is a nice cleanup, thanks!</p>\n</blockquote>",
        "id": 303540231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533584
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303540284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665533640
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a> from <code>mid-end</code> to <code>main</code>.</p>",
        "id": 303541150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665534198
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138289069\">PR review</a>.</p>",
        "id": 303541187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665534235
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992876238\">PR review comment</a>:</p>\n<blockquote>\n<p>This is different than <code>is_terminator</code> I think as it needs to cover conditional branches as well.</p>\n<p>The mechanism actually has a pretty interesting and subtle reason for existing, which I've added in a longer comment here -- I had forgotten as well until I rediscovered it via test failures :-)</p>\n</blockquote>",
        "id": 303541188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665534236
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#discussion_r992876754\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, but the only API we have is <code>insert_if_absent</code>, not <code>insert_if_absent_and_assert_otherwise</code> :-)</p>\n</blockquote>",
        "id": 303541321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665534323
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138289761\">PR review</a>.</p>",
        "id": 303541322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665534323
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953#pullrequestreview-1138291214\">PR review</a>.</p>",
        "id": 303541592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665534503
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4953\">PR #4953</a>.</p>",
        "id": 303545571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665537355
    }
]