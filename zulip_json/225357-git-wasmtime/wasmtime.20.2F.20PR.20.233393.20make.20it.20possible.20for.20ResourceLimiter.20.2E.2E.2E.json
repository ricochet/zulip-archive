[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 255326733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632878284
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-766736756\">PR review</a>.</p>",
        "id": 255407489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925289
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-766736756\">PR review</a>.</p>",
        "id": 255407490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925289
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718557635\">PR review comment</a>:</p>\n<blockquote>\n<p>I've commented more about this below but I'd ideally prefer to not have this since if you're asking for the store and someone forgot to configure it that's a bug rather than something we'll gracefully want to handle.</p>\n</blockquote>",
        "id": 255407491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925289
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718556326\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it's probably ok to skip the <code>limiter_</code> prefix on these methods (micro-nit)</p>\n</blockquote>",
        "id": 255407492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925289
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718551331\">PR review comment</a>:</p>\n<blockquote>\n<p>This'll either need a different signature (taking <code>&amp;mut self</code>) or need to be <code>unsafe</code> because otherwise I don't think it's safe in Rust to go from <code>&amp;self</code> to <code>&amp;mut T</code></p>\n</blockquote>",
        "id": 255407493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925289
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718561285\">PR review comment</a>:</p>\n<blockquote>\n<p>To prevent all consumers fo this trait from using <code>async_trait</code> I think it might be good to change this to have a default implementation of calling the <code>memory_growing</code> method?</p>\n<p>I think it's a bit of a bummer to have both methods because if you're async you only want one and if you're not async you only want the other, but I don't know otherwise of a great way to manage this.</p>\n<p>This does raise the question though of what happens when <code>Memory::new</code> (or <code>Memory::grow</code>) is called when async is configured? Even some async embeddings don't necessarily want async memory growth so enabling async doesn't guarantee that this method is configured. Ideally it's an embedder bug if <code>Memory::new</code> is called when async memory growth is desired though.</p>\n<p>I think this might mean that we'll want a method here (perhaps default <code>false</code>?) which indicates which growth method to use (sync-or-async) and we dispatch with that on memory growth?</p>\n</blockquote>",
        "id": 255407494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925289
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718564783\">PR review comment</a>:</p>\n<blockquote>\n<p>In addition to this change in this file I think we'll also want to add <code>Memory::new_async</code> and <code>Memory::grow_async</code> both as <code>async</code> methods. That may actually be pretty tricky though because currently the async implementation of <code>block_on</code> requires stack-switching and assumes we're on a wasm stack. </p>\n<p>Otherwise adding these methods though would require open-coding a bit the limit logic where we could directly <code>.await</code> the future in these functions returned by the limiter. That may be the best route here though? (should ideally only be a small amount of duplication in the runtime implementation to have a method and an <code>async</code> method)</p>\n</blockquote>",
        "id": 255407495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925289
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718558240\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to <code>Memory</code> I think we'll want this to be <code>&amp;mut dyn Store</code> instead of an <code>Option</code></p>\n</blockquote>",
        "id": 255407496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925289
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718554708\">PR review comment</a>:</p>\n<blockquote>\n<p>With taking a store here instead of a limiter I think it's actually a bug in Wasmtime if we ever create a table/memory <em>without</em> a store because that means if there were a registered limiter we'd be skipping that. I think we probably want to change this constructor to take <code>&amp;mut dyn Store</code> instead of <code>Option&lt;_&gt;</code> to reflect that and we can fix it if it ever trips a panic (I don't believe it will checking Wasmtime's current usage).</p>\n</blockquote>",
        "id": 255407497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925290
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718562111\">PR review comment</a>:</p>\n<blockquote>\n<p>Does there need to be an async counterpart for this as well as <code>memory_grow_failed</code>? I figured the use case was \"blocking\" until there's enough memory to allow, but I'm not sure what sort of blocking work you'd want to do on growth failure.</p>\n</blockquote>",
        "id": 255407498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925290
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718557179\">PR review comment</a>:</p>\n<blockquote>\n<p>That being said I'm also wary of this because anything that looks at the store should require that the store is set, so I'd ideally prefer to not have this method and if anyone needs to observe the store then they're on the path that already has the store set and it's safe to assert it's there.</p>\n</blockquote>",
        "id": 255407499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925290
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718566511\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we'll need to handle this because in this case a trap means that the future was dropped on the outside, so we need to propagate this trap to wasm to make wasm \"abort\" gracefully as well. Basically once the future is dropped we just need to clean it up quickly so the thinking is to propagate the error all the way back to the start.</p>\n</blockquote>",
        "id": 255407500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925290
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718555894\">PR review comment</a>:</p>\n<blockquote>\n<p>I think changing this to not-an-option will also propagate out relatively far-ish.  That's ok though because almost all instance allocation requests should have a store configured, only the initial blank module as well as host functions should skip their stores during construction, and the <code>Option</code>-handling is basically just here to make sure those two cases don't panic/segfault.</p>\n</blockquote>",
        "id": 255407501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925290
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718565699\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah to expand on some thoughts from above, I don't think we'll want this conditional on the <code>async</code> cargo feature since that's on-by-default but rather some runtime configuration in the limiter itself which indicates which version to use.</p>\n</blockquote>",
        "id": 255407502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632925290
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-766950194\">PR review</a>.</p>",
        "id": 255432327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632933953
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718705522\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point, I can probably leave this out. was keeping it in for completeness but I don't have a compelling use case</p>\n</blockquote>",
        "id": 255432328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632933953
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-766951589\">PR review</a>.</p>",
        "id": 255432601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632934035
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718706590\">PR review comment</a>:</p>\n<blockquote>\n<p>So, I tried having a default implementation, but it turns out that with async_trait those arent object-safe and rustc rejects them.</p>\n<p>The other possibility is to have two public traits, <code>ResourceLimiter</code> and <code>ResourceLimiterAsync</code>, and an internal <code>enum RLimiter { Sync(&amp;mut dyn ResourceLimiter), Async(&amp;mut dyn ResourceLimiterAsync) }</code> and <code>StoreInner::limiter</code> has type <code>Option&lt;Box&lt;dyn FnMut(&amp;mut T) -&gt; RLimiter&gt;&gt;</code> and some chrome on the config methods to wrap the closure's return value in the Sync or Async variant.<br>\n</p>\n</blockquote>",
        "id": 255432602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632934035
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-766954176\">PR review</a>.</p>",
        "id": 255433020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632934186
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718708608\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep my initial constructor took just a <code>&amp;mut dyn Store</code> and the option fell out of some complications elsewhere, and I hadn't thought that all the way through to indicate a bug in Wasmtime. I'll have to chase that out.</p>\n</blockquote>",
        "id": 255433021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632934186
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718710695\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point, I meant to check this assumption by you. I forgot about the whole future dropped thing.</p>\n</blockquote>",
        "id": 255433562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632934353
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-766956937\">PR review</a>.</p>",
        "id": 255433563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632934353
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-767139203\">PR review</a>.</p>",
        "id": 255465821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632946126
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r718847282\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah ok then yeah I like your idea if we can't have defaulted <code>async fn</code> in traits, that seems reasonable to me and also solves the issue of async-runtime-still-uses-sync-limiter.</p>\n</blockquote>",
        "id": 255465822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632946126
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258295198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634690202
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-783907286\">PR review</a>.</p>",
        "id": 258296896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634691488
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r732342173\">PR review comment</a>:</p>\n<blockquote>\n<p>This is done now!</p>\n</blockquote>",
        "id": 258296897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634691488
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258448726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634765948
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258462928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634774023
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258473315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634780082
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r733728183\">PR review comment</a>:</p>\n<blockquote>\n<p>With this new signature it may also be worth mentioning in the safety documentation that this is only safe if <code>store: &amp;mut dyn Store</code> is not used to get access to the <code>Memory</code> that lives within the store. Technically you could safely, from <code>store</code>, reach <code>self</code> via an instance and get two mutable references. So long as the trait implementation of <code>Store</code> doesn't do that though this should be safe.</p>\n</blockquote>",
        "id": 258555344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826573
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-785760861\">PR review</a>.</p>",
        "id": 258555345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826573
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r733731176\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah this is a bummer, I tried to avoid this because if the instance didn't have any start function it would avoid the need for a fiber which can be somewhat expensive. I see though how this is required for memories/tables and limiting their growth. I think let's leave this as you have it here and if it's an issue in the future we can try to optimize the further if truly necessary (and it may not be at all necessary)</p>\n</blockquote>",
        "id": 258555346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826573
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r733723675\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this can probably be removed now?</p>\n</blockquote>",
        "id": 258555347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826573
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r733725066\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I think that this will want to be <code>unsafe</code> b/c there's no guarantee that this <code>StorePtr</code> wasn't used outside the original lifetime of the borrow.</p>\n</blockquote>",
        "id": 258555348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826573
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r733738891\">PR review comment</a>:</p>\n<blockquote>\n<p>This is one case where this can probably come up as a user error but we're not prepared to catch this panic and re-raise it across the boundary when we get back to wasm. Arguably we probably should <code>catch_panic</code> an intrinsic like this though because we're calling arbitrary user code limiting memory growth now that I think about it though.</p>\n<p>Would you be up for adding a <code>catch_panic</code> around <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e04357505eb05760f2ea94cebeef6e8370cd9458/crates/runtime/src/libcalls.rs#L187-L199\">this block</a> (and the table version) which <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e04357505eb05760f2ea94cebeef6e8370cd9458/crates/runtime/src/traphandlers.rs#L101-L111\">reraises the panic</a>? (similar treatment for <code>table_grow</code> as well, and to be clear this isn't something new about this PR it's just something I'm realizing here. That wouldmake this <code>.expect</code> safe and we could leave it as-is.</p>\n</blockquote>",
        "id": 258555349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826573
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r733741034\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah the meaning of this is that the future representing the execution of wasm was dropped by the host so the coroutine has been resumed and should \"finish ASAP\", so the trap here means \"please stop executing code on the coroutine as fast as you can\". To do that I think it'd be best to propagate the trap to wasm here, which should skip execution of all remaining wasm. I think that can be done by returning <code>Result&lt;bool, Trap&gt;</code> from this <code>Store</code> funtion most likely.</p>\n</blockquote>",
        "id": 258555350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826573
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r733723917\">PR review comment</a>:</p>\n<blockquote>\n<p>stray newline removal?</p>\n</blockquote>",
        "id": 258555351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826574
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-785760861\">PR review</a>.</p>",
        "id": 258555352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r733734391\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this (and other grow/new methods affected) have a <code># Panics</code> section which indicates the scenario where a non-async store is used will cause a panic? Also it might be good to link to the <code>store</code> method which configures the async limiter to indicate that it's how this is intended to be used.</p>\n</blockquote>",
        "id": 258555356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r733731756\">PR review comment</a>:</p>\n<blockquote>\n<p>One thing I'll say though is that now that the inner loop of <code>run_async</code> and <code>run</code> are the same we could probably pull those into a shared method so they do precisely the same thing.</p>\n</blockquote>",
        "id": 258555357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634826574
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258598795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634842584
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258600876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634843414
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258601504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634843715
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-786213792\">PR review</a>.</p>",
        "id": 258621662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634852427
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r734057014\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, could you add a comment that the <code>catch_unwind</code> is specifically necessary here because we could run arbitrary user-provided code on growth?</p>\n</blockquote>",
        "id": 258621663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634852427
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#pullrequestreview-786213792\">PR review</a>.</p>",
        "id": 258621665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634852427
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393#discussion_r734056663\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be structured with a <code>match</code> to avoid needing the <code>.unwrap()</code>?</p>\n</blockquote>",
        "id": 258621666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634852427
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258624887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634854076
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258626452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634854883
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258633161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634858640
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3393\">PR #3393</a> from <code>pch/async_limiting</code> to <code>main</code>.</p>",
        "id": 258634978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634859804
    }
]