[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a> from <code>cfallin:async-nostd</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>â€¦ Wasmtime.</p>\n<p>This PR allows a <code>no_std</code> Wasmtime build to be configured with the <code>async</code> feature. (Previously, a minimal <code>no_std</code> configuration could only run with sync entry points, without suspending of stacks.)</p>\n<p>The main hurdle to this support was the <code>wasmtime-fiber</code> crate. Fortunately, the \"unix\" variant of fibers was almost entirely portable to a <code>no_std</code> environment, owing to the fact that it implements stack-switching manually in assembly itself. I moved the per-ISA implementations to a shared submodule and built the nostd platform backend for <code>wasmtime-fiber</code> with a stripped-down version of the unix backend.</p>\n<p>The nostd backend does not support mmap'd stacks, does not support custom stack allocators, and does not propagate panics.</p>\n<p>I've updated the <code>min-platform</code> example to ensure this builds but have not yet actually tested it (I am in the middle of a larger porting effort); hence, a draft PR for initial feedback.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 484626658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732672937
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#issuecomment-2502494660\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>:</p>\n<blockquote>\n<p>cc @alexcrichton -- I think you're on vacation now but I'd be very curious what you think of this in general!</p>\n</blockquote>",
        "id": 484626700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732672964
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 484626711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732672973
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>:</p>\n<blockquote>\n<p>This PR allows a <code>no_std</code> Wasmtime build to be configured with the <code>async</code> feature. (Previously, a minimal <code>no_std</code> configuration could only run with sync entry points, without suspending of stacks.)</p>\n<p>The main hurdle to this support was the <code>wasmtime-fiber</code> crate. Fortunately, the \"unix\" variant of fibers was almost entirely portable to a <code>no_std</code> environment, owing to the fact that it implements stack-switching manually in assembly itself. I moved the per-ISA implementations to a shared submodule and built the nostd platform backend for <code>wasmtime-fiber</code> with a stripped-down version of the unix backend.</p>\n<p>The nostd backend does not support mmap'd stacks, does not support custom stack allocators, and does not propagate panics.</p>\n<p>I've updated the <code>min-platform</code> example to ensure this builds but have not yet actually tested it (I am in the middle of a larger porting effort); hence, a draft PR for initial feedback.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 484626722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732672980
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 484627328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732673369
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2464625655\">PR review</a>.</p>",
        "id": 484687790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732703542
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1860413846\">PR review comment</a>:</p>\n<blockquote>\n<p>If you do unwind when the std feature is disabled, are you guaranteed to hit an <code>extern \"C\"</code> boundary to abort unwinding? Or will you get arbitrary corruption?</p>\n</blockquote>",
        "id": 484687791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732703542
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2465507007\">PR review</a>.</p>",
        "id": 484758511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732724988
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1860960768\">PR review comment</a>:</p>\n<blockquote>\n<p>Excellent question! (@alexcrichton when you're around it'd be great to get your canonical answer on this)</p>\n<p>Currently in my porting context I have a <code>#[panic_handler]</code> that will abort, so I haven't thought through this in much detail. One option is certainly to say that panic unwinding is not supported in <code>no_std</code> builds with <code>async</code>, and the build must provide a custom aborting panic handler or specify <code>panic=abort</code>. However if we wanted to support propagation of unwinds I think we might be able to do something custom here (the <code>catch_unwind</code>/<code>resume_unwind</code> functions in <code>std::panic</code> don't exist in <code>core::panic</code> but one could roll one's own unwinding). I wonder if there's a way to make this safe (build only when <code>panic=abort</code> for example) in the meantime?</p>\n</blockquote>",
        "id": 484758513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732724988
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 484764552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732727094
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2465586485\">PR review</a>.</p>",
        "id": 484764817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732727170
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1861008914\">PR review comment</a>:</p>\n<blockquote>\n<p>@sunfishcode helpfully pointed out that <code>#[cfg(panic = \"unwind\")]</code> and <code>#[cfg(panic = \"abort\")]</code> work, so I've added a <code>compile_error!()</code> to the fiber library when built with <code>panic=unwind</code> without <code>std</code>. So this is at least now safe!</p>\n</blockquote>",
        "id": 484764818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732727170
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 484766427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732727743
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 484766690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732727834
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 484772011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732729933
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2473079878\">PR review</a>:</p>\n<blockquote>\n<p>This all looks quite reasonable to me, happy to see this merged <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>.</p>\n<p>Could you also add a <code>cargo test -p wasmtime-fiber --no-default-features</code> in CI? I generally try to make sure that if there's nontrivial code added with no_std/etc (as is the case for the <code>nostd.rs</code> file here) that we have some at least smoke testing of what's going on. I think that this should be testable when the <code>std</code> feature is disabled? (might have to conditionally enable/disable some panicking tests, and it's ok to use <code>std</code> in tests just want to be sure to test <code>nostd.rs</code> somehow)</p>\n</blockquote>",
        "id": 485655734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154783
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1866088598\">PR review comment</a>:</p>\n<blockquote>\n<p>Was this necessary because it was otherwise broken? Or just keeping the same behavior tested?</p>\n<p>If broken, could <code>wasmtime</code> enable the <code>std</code> feature as part of the async feature for now? (until that's fixed)</p>\n<p>Otherwise if just keeping the same behavior mind also adding <code>-p wasmtime-fiber --features std</code> and <code>-p wasmtime-fiber</code> to this matrix?</p>\n</blockquote>",
        "id": 485655735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154783
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1866089294\">PR review comment</a>:</p>\n<blockquote>\n<p>It's ok to drop this if it's empty, and due to this being an internal crate I think it's reasonable to not have default features here anyway.</p>\n</blockquote>",
        "id": 485655737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154783
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1866091388\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it's ok to leave this out for now and mostly just ensure this is <code>cargo check</code>'d somewhere in CI (to avoid someone copy/pasting this <code>Cargo.toml</code> example and forgetting to turn this back off)</p>\n</blockquote>",
        "id": 485655739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154783
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1866090236\">PR review comment</a>:</p>\n<blockquote>\n<p>I might recommend <code>wasmtime-fiber?/std</code> (note the <code>?</code>) to only enable the <code>wasmtime-fiber</code> dependency if it's already activated via some other means.</p>\n</blockquote>",
        "id": 485655740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154783
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1866096826\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind scoping this import to just where it's needed below? (avoid the duplicate <code>#[cfg]</code>)</p>\n</blockquote>",
        "id": 485655742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154783
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1866094525\">PR review comment</a>:</p>\n<blockquote>\n<p>A nice trick to avoid <code>core::result::Result</code> here is to, in each module, change:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>That way you can use any <code>Result</code> type-alias as the actual real <code>Result</code> without worry</p>\n</blockquote>",
        "id": 485655743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154783
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1866098930\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be avoided by having a <code>#[cfg]</code> for std/unwind on the <code>Panicked</code> variant? That way we can statically provide that it's never constructed</p>\n</blockquote>",
        "id": 485655744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154783
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1866096293\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I think it's reasonable to skip the <code>compile_error!</code> here and just let this happen as normal. With <code>panic = \"abort\"</code> nothing should be unsafe, it just means the extra unwind bits here aren't too useful (and they'll get optimized out)</p>\n</blockquote>",
        "id": 485655746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154783
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2473101928\">PR review</a>.</p>",
        "id": 485656012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154847
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1866103742\">PR review comment</a>:</p>\n<blockquote>\n<p>I commented below as well, but I think it's fine to rely on unconditional aborts via <code>extern \"C\"</code> boundary in the panic=unwind std=false mode and skip the <code>compile_error!</code></p>\n</blockquote>",
        "id": 485656014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733154848
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2475203724\">PR review</a>.</p>",
        "id": 485809461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733221059
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1867438640\">PR review comment</a>:</p>\n<blockquote>\n<p>This error only happens when using <code>panic = \"unwind\"</code>, which is unsound if not using <code>catch_unwind</code>.</p>\n</blockquote>",
        "id": 485809462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733221060
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2476265825\">PR review</a>.</p>",
        "id": 485902390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733244636
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868076138\">PR review comment</a>:</p>\n<blockquote>\n<p>Could you clarify the unsoundness? Looking at <a href=\"https://godbolt.org/z/rYfzE1h6s\">this disassembly</a> it looks like even in <code>no_std</code> mode unwinds are caught and abort correctly</p>\n</blockquote>",
        "id": 485902391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733244636
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2476714419\">PR review</a>.</p>",
        "id": 485949200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733258635
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868343876\">PR review comment</a>:</p>\n<blockquote>\n<p>@alexcrichton just so I understand: that example uses the <code>C-unwind</code> ABI; currently (and in this PR) the stackswitching bits in assembly are called with the <code>C</code> ABI. In a <code>no_std</code> world with <code>panic=unwind</code> and a custom unwinder (not my use-case, but what this error statically disables for now) I think we could otherwise get an unwind going off the top of a fiber stack. Or it's possible I'm missing something? I don't have all the compiler configuration options here fully internalized.</p>\n</blockquote>",
        "id": 485949201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733258635
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2476737426\">PR review</a>.</p>",
        "id": 485951446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733259430
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868358027\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah sorry that's just \"faking\" a non-inlined call to something that can theoretically unwind. You don't actually need <code>C-unwind</code> but with <code>panic=unwind</code> all normal rust functions can possibly unwind so a catch-and-panic should be inserted for all calls. Basically I'm still not sure how <code>#![no_std]</code> + <code>-Cpanic=unwind</code> is unsound myself</p>\n</blockquote>",
        "id": 485951447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733259430
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2476953798\">PR review</a>.</p>",
        "id": 485973721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733268131
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868493212\">PR review comment</a>:</p>\n<blockquote>\n<p>I see: my confusion is the dual to your confusion I think, that is, I'm still not sure how <code>#![no_std]</code> + <code>-Cpanic=unwind</code> is sound :-)</p>\n<p>Restating mostly for my own benefit, but to verify we're on the same page: so with the current state of <code>main</code>, we wrap a call to the entrypoint on the new stack in a call to <code>catch_unwind</code> (e.g. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/db956669a5bc7de1ac247c63b4ad895965469144/crates/fiber/src/lib.rs#L225\">here</a>). If the fiber's body panics while on the fiber stack, system <code>libunwind</code> reaches this point, the panic is reified as a <code>RunResult</code>, and that <code>RunResult</code> is passed back to the caller on the original stack and rethrown with <code>resume_unwind</code>.</p>\n<p>With this PR, in <code>no_std</code>, we don't have <code>catch_unwind</code>/<code>resume_unwind</code>. So a panic happens in a fiber's body; say that there is a custom unwinder (there must be I think, for one to be doing unwinding at all in <code>no_std</code>?); this unwinder iterates up the stack frames on the fiber stack. It reaches the top, there's no callsite in a <code>catch_unwind</code>; this is an unwind error / UB / something bad. Or is this prevented some other way?</p>\n</blockquote>",
        "id": 485973722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733268131
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2476973056\">PR review</a>.</p>",
        "id": 485976448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733269384
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868506441\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh sorry! Good point getting on the same page (can also talk more during the Cranelift meeting tomorrow if helpful)</p>\n<p>I think the main thing to add is that <code>extern \"C\" fn foo() { panic!() }</code> unconditionally, and soundly, aborts the process. That happens irrespective of <code>-Cunwind=...</code> settings. Starting in Rust 1.81 all <code>extern \"C\"</code> functions have an implicit catch-and-abort. That means that even if we were to remove the <code>catch_unwind</code> happening in wasmtime-fiber the crate would still be sound, just not too helpful on panics. The <code>catch_unwind</code> is mostly still there to assist with debugging panics by shepherding the panic across the boundary. That's always optional though since it's sound to abort the process at any time (just better to not do so if possible).</p>\n<p>That to me is why it's currently sound if we skip the <code>catch_unwind</code>. A bit of a historical note though is that Rust 1.81 is very recent and prior versions of rustc didn't catch-and-abort at <code>extern \"C\"</code> boundaries. That means that historically <code>catch_unwind</code> was indeed required for soundness but that's no longer the case.</p>\n</blockquote>",
        "id": 485976450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733269384
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2476979563\">PR review</a>.</p>",
        "id": 485977397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733269808
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868510850\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah! OK, that's the detail I had missed; thanks for your patience here. I guess since our MSRV is now 1.81, we can rely on this behavior unconditionally. I'll remove the compile-error and add a comment detailing this.</p>\n</blockquote>",
        "id": 485977398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733269808
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 485982003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271764
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2477009402\">PR review</a>.</p>",
        "id": 485982013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271771
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868531030\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 485982014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271771
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2477009434\">PR review</a>.</p>",
        "id": 485982018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271773
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868531066\">PR review comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 485982019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271773
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868531145\">PR review comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 485982029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271779
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2477009540\">PR review</a>.</p>",
        "id": 485982031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271779
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2477009600\">PR review</a>.</p>",
        "id": 485982038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271784
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868531175\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 485982039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271784
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2477009663\">PR review</a>.</p>",
        "id": 485982047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271789
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868531215\">PR review comment</a>:</p>\n<blockquote>\n<p>I think I had added it at some point while debugging failures but indeed it should work with just <code>async</code>, no <code>std</code> -- so, restored that, added <code>std</code> separately, and added the <code>wasmtime-fiber</code> variants.</p>\n</blockquote>",
        "id": 485982049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271789
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2477010022\">PR review</a>.</p>",
        "id": 485982094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271814
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868531434\">PR review comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 485982096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271814
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2477010330\">PR review</a>.</p>",
        "id": 485982134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271834
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1868531640\">PR review comment</a>:</p>\n<blockquote>\n<p>Done -- refactored a bit in <code>Suspend::execute()</code> to statically avoid constructing the panic case as well.</p>\n</blockquote>",
        "id": 485982135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271834
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 485982360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271951
    },
    {
        "content": "<p><strong>cfallin</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a> as ready for review.</p>",
        "id": 485982439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271975
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 485982442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271976
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 485982443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271976
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 485982444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271976
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#issuecomment-2515864834\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>:</p>\n<blockquote>\n<p>Updated and out of draft mode now; thanks!</p>\n</blockquote>",
        "id": 485982478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733271998
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2477059316\">PR review</a>:</p>\n<blockquote>\n<p>Is it possible to add a `cargo test -p wasmtime-fiber --no-default-features to CI as well? </p>\n</blockquote>",
        "id": 485988218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733274903
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486016667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733290509
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486017483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733291203
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486017733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733291413
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#issuecomment-2516251521\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>:</p>\n<blockquote>\n<p>Sure thing, done!</p>\n</blockquote>",
        "id": 486017750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733291432
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486017889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733291546
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486018711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733292117
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486018789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733292141
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#issuecomment-2516349538\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>:</p>\n<blockquote>\n<p>The CI failures are fairly perplexing -- the only failing job I see is \"report failure on cancelation\", and a bunch of other jobs are canceled midway through their runs. @alexcrichton any ideas?</p>\n</blockquote>",
        "id": 486023717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733295216
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#issuecomment-2517802774\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>:</p>\n<blockquote>\n<p>This happened on another PR the other night and I couldn't figure out what was happening. I then re-queued in the morning and it merged so I assumed it was a transient failure in CI infrastructure... Let's see if that still holds true?</p>\n</blockquote>",
        "id": 486121098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733326597
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2479132128\">PR review</a>.</p>",
        "id": 486121361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733326672
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1869808280\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh when adding a new job like this you'll need to also add a \"join\" to the <code>ci-status</code> below so it's handled for failure-vs-not.</p>\n</blockquote>",
        "id": 486121362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733326672
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486144707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733333348
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#issuecomment-2518096704\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>:</p>\n<blockquote>\n<p>I've pushed a commit to run full CI on this PR where the PR run can't cancel itself, so let's see what happens...</p>\n</blockquote>",
        "id": 486144741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733333364
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#issuecomment-2518107257\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>:</p>\n<blockquote>\n<p>Bleh ok so this is a known issue (at least to me) on github actions. For the merge queue there's no way to cancel a failed job so our <code>main.yml</code> self-cancels whenever a job fails. This works fine on all platforms except Windows. On Windows self-cancelling sometimes gives you a big red X on the job and sometimes gives you the icon of \"this was cancelled by someone else\". Basically there seems to be a race of the self-cancel and the job actually failing.</p>\n<p>In any case it's the Windows build. Just some minor things to update.</p>\n</blockquote>",
        "id": 486145602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733333656
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486156965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733337727
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486157152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733337795
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#discussion_r1870100977\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 486157157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733337796
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#pullrequestreview-2479609441\">PR review</a>.</p>",
        "id": 486157158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733337796
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689#issuecomment-2518258591\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>:</p>\n<blockquote>\n<p>Ah, that was entirely unintuitive, GitHub CI user-interface! Thanks for working that out.</p>\n</blockquote>",
        "id": 486157235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733337833
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486158269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733338260
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9689\">PR #9689</a>.</p>",
        "id": 486166994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733341691
    }
]