[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is an implementation of <a href=\"https://github.com/bytecodealliance/rfcs/pull/11\">RFC 11</a> which is a redesign of Wasmtime's APIs.</p>\n<blockquote>\n<p><strong>Note</strong>: The RFC is not merged at this time, so this PR is purely meant for informational purposes and review. This should not merge until the RFC itself has been approved and merged.</p>\n</blockquote>\n<p>I've gotten this impelmentation to the point now where it should be passing all in-tree tests. I think the performance is suitable for performance testing as well to ensure that it doesn't regress anything. I'd like to ideally get some review on this so by the time the RFC merges it's ready to go, and I'm also curious for design feedback which may influence the RFC itself as well.</p>\n<p>I don't recommend paying attention to the commits themselves. They're all a mess and 95% of the changes are in the first commit. I plan on squashing everything and making a better commit message before merging.</p>\n<p>Currently the only remaining TODO item is documentation. I have not yet update the API documentation of the <code>wasmtime</code> crate or the C API, and a lot of love needs to be poured into there. I would consider this a blocker before merging, I'm just working on the actual implementation itself first (Python/Go bindings are up next). I would also like to put more work into documenting some internal design decisions in inline comments, currently I don't think there's a sufficient amount. I plan on doing this with the general documentation pass I'll be doing later this week.</p>\n</blockquote>",
        "id": 238352082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620754451
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 238352249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620754523
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 238352328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620754556
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 238581794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620882159
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 238582428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620882815
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 238582531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620882914
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 238626356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620915159
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 238638822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920458
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-658973623\">PR review</a>.</p>",
        "id": 238639050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-658973623\">PR review</a>.</p>",
        "id": 238639051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631864033\">PR review comment</a>:</p>\n<blockquote>\n<p>@fitzgen this is something I added here I mentioned on chat, basically the location that globals of type <code>externref</code> get their reference count decremented.</p>\n</blockquote>",
        "id": 238639054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631869164\">PR review comment</a>:</p>\n<blockquote>\n<p>@peterhuene you might be interested in this. I inserted the call to <code>drop_globals</code> above to fix an issue where when an instance was dropped its <code>externref</code> globals weren't deallocated (this was a problem with the on-demand allocator as well). </p>\n<p>In doing so, though, I realized the pooling allocator was attempting to double-drop them. This is fine because the \"drop\" zeros out the memory so next time around it looks like a <code>null</code> externref, but I figured it was best to fix that. Here I cleared the <code>module</code>/<code>offsets</code> field back to their original values when the instance was first initialized. I think that'll help prevent accidental leaks of data between instances or trying to interpret an instance as something it's not. Additionally this helps reclaim the memory used by <code>Arc&lt;Module&gt;</code> if this was the last reference to a module on the system.</p>\n</blockquote>",
        "id": 238639055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631870631\">PR review comment</a>:</p>\n<blockquote>\n<p>This was something that I caught in the <code>Static</code> variant below and applied here. This previously prevented memories from growing to 65536 pages (exactly 4gb), but now this allows it. I've added a test that allocates this many pages to ensure this continues to work, but rereading the spec I believe this is allowed by the spec.</p>\n</blockquote>",
        "id": 238639056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631866264\">PR review comment</a>:</p>\n<blockquote>\n<p>Technically the <code>module</code> can be inferred from <code>InstanceHandle</code>, but having a separate argument here as well made the implementations below much easier. The problem was that acquiring the <code>module</code> from <code>InstanceHandle</code> looked like we borrowed the entirety of <code>InstanceHandle</code> (since it was acquired through a method), which then prevents getting another mutable borrow on it.</p>\n<p>For exaple during table initialization we'd want to call <code>get_table</code> which \"borrows\" the whole <code>Instance</code>. Having  these be separate borrrows on input basically proves that the <code>Arc&lt;Module&gt;</code> is rooted elsewhere on the stack above this. That avoided having to <code>clone()</code> the module temporarily in all the below places.</p>\n</blockquote>",
        "id": 238639057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631862466\">PR review comment</a>:</p>\n<blockquote>\n<p>@fitzgen I mentioned this on chat, but this was one of the important removals I made because technically globals should only work by reference so if you pull out an <code>externref</code> the reference count is increased.</p>\n</blockquote>",
        "id": 238639058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631860761\">PR review comment</a>:</p>\n<blockquote>\n<p>@fitzgen this is probably worth pointing out here, but with <code>&amp;mut self</code> we are now free from having to worry about recursive gc-in-gc so a lot of the bits and pieces here got simplified.</p>\n</blockquote>",
        "id": 238639059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631866918\">PR review comment</a>:</p>\n<blockquote>\n<p>@fitzgen this is the second issue I mentioned on chat, this is the location where the reference count is now implemented relative to before when it was just copied over.</p>\n</blockquote>",
        "id": 238639060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631874236\">PR review comment</a>:</p>\n<blockquote>\n<p>This was a major representation change for both memories and tables, the limiter is now passed in to all relevant operations rather than stored alongside each memory/table. This allows exclusive ownership to reside within the <code>Store</code> itself and, if necessary, it's passed down for operations. The limiter is also acquired through the new <code>Store</code> trait in the <code>wasmtime_runtime</code>  crate</p>\n</blockquote>",
        "id": 238639061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631872510\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW this was a semantic change where previously we'd allocate the memory, then realize we shouldn't have, and drop the memory if the limiter disallowed the <code>new</code> request. Now the limit happens before the allocation and we only proceed with alloating if the limiter allows it.</p>\n</blockquote>",
        "id": 238639062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631871954\">PR review comment</a>:</p>\n<blockquote>\n<p>I've changed the representation of <code>Static</code> here to be more amenable to auto-impl of <code>Send</code> and <code>Sync</code>. I also folded the <code>maximum</code> field into the length of the <code>base</code> slice here.</p>\n<p>My thinking is that this is faithful to the actual implementation as well where for the lifetime of this <code>Memory</code> it does indeed have exclusive access to the memory internally. There are other representations possible, too, which just require <code>unsafe impl Send</code> and such that can be implemented too.</p>\n</blockquote>",
        "id": 238639063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631875191\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW before reading this file I'd recommend reading <code>memory.rs</code> above. Many of the changes here are similar to changes there, and I've commented the changes above to memories.</p>\n</blockquote>",
        "id": 238639064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631884265\">PR review comment</a>:</p>\n<blockquote>\n<p>Note that the async bits here are a little different from before, but I think in a way that makes things a bit clearer. The <code>async_cx</code> is a \"separately owned\" structure which is connected (via unsafety) but not lifetimes to the original <code>caller</code>. This allows us to pass the entire <code>caller</code> to the future and let it close over it. The Wasmtime implementation, though, has to be careful that the fields referenced by <code>async_cx</code> may be aliased, hence their <code>UnsafeCell</code> wrappers.</p>\n</blockquote>",
        "id": 238639065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631876367\">PR review comment</a>:</p>\n<blockquote>\n<p>This in particular was a very important removal from this crate. This removes the need for <code>Any</code> which removes the need for <code>'static</code> from <code>Store</code>, allowing any <code>T</code> to be used with a <code>Store</code>.</p>\n<p>The store pointer is learned via the <code>VMContext</code> and the <code>*mut dyn wasmtime_runtime::Store</code> contained within now.</p>\n</blockquote>",
        "id": 238639066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631887558\">PR review comment</a>:</p>\n<blockquote>\n<p>I removed this in favor of <code>TypedFunc::new_unchecked</code> to make its presence a little less prominent.</p>\n</blockquote>",
        "id": 238639067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631879581\">PR review comment</a>:</p>\n<blockquote>\n<p>I moved this here from <code>Store</code>, mostly just for aesthetic reasons, no real motivation other than that. This could arguably move to <code>Config</code> too, but it felt a little more appropriate here. Doesn't really matter one way or another though.</p>\n</blockquote>",
        "id": 238639068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631889216\">PR review comment</a>:</p>\n<blockquote>\n<p>I moved this to <code>tests/all/func.rs</code></p>\n</blockquote>",
        "id": 238639069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631886845\">PR review comment</a>:</p>\n<blockquote>\n<p>This is an interesting bound. This is required by internals (notably the <code>opaque_send()</code> function). I think it would be possible to make this future conditionally <code>Send</code> if desired based on <code>T</code> (rather than always requiring <code>T: Send</code>), it'll just require some refactoring internally from what the current structure is. I'm not sure that it's all too useful to have that, so I went ahead and just added <code>T: Send</code> to the various async methods and if users really want non-<code>Send</code> futures with wasmtime we can come back and remove this via other means in the future. </p>\n</blockquote>",
        "id": 238639070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631888360\">PR review comment</a>:</p>\n<blockquote>\n<p>Previously this function would have used <code>with_last_info</code> from the <code>traphandlers</code> module, but now it looks up the store from within the provided <code>caller</code> <code>*mut VMContext</code>. Note that previously the pointer could be null but I've now had it arranged such that this pointer is never null.</p>\n</blockquote>",
        "id": 238639071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631892390\">PR review comment</a>:</p>\n<blockquote>\n<p>Note that this doesn't use <code>AsContextMut</code> so the liftetime can be explicitly closed over in the returned iterator</p>\n</blockquote>",
        "id": 238639072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631891472\">PR review comment</a>:</p>\n<blockquote>\n<p>It's worth pointing out that I shifted functionality around here a bit. Now <code>into_abi</code> bakes in the <code>compatible_with_store</code> check as well as <code>invoke</code> takes/returns \"ABI things\" instead of raw values. This makes some more captures/closures <code>Copy</code> in the above <code>_call</code> function, but also notably means that the <code>invoke</code> function no longer needs a borrow on <code>Store</code> somewhow, which was much more difficult to provide.</p>\n<p>Now the borrow is only required on <code>into_abi</code> here, then the call can happen without an explicit borrow on the store, and then re-ification back into actual values can happen after the call finishes.</p>\n</blockquote>",
        "id": 238639073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920574
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631897711\">PR review comment</a>:</p>\n<blockquote>\n<p>Note that this doesn't take <code>impl AsContext</code> so we can tie to the precise lifetime.</p>\n</blockquote>",
        "id": 238639074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631897012\">PR review comment</a>:</p>\n<blockquote>\n<p>This was a very satisfying thing to remove. This was originally added to prevent cycles, but now there are no cycles, so we could just delete everything related to this!</p>\n</blockquote>",
        "id": 238639075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631896081\">PR review comment</a>:</p>\n<blockquote>\n<p>It's worth pointing out that I haven't implemented the <code>sub_linker</code> API from the RFC. I'm not sure if that's actually useful to implement or whether someone wants it. The intention was to preserve the functionality where today you can create global functions via <code>Config</code> and then each store-based <code>Linker</code> can add its own set of functions after-the-fact. </p>\n<p>If that's used by applications and still desired I can add the <code>sub_linker</code> functionality here, but I figured it might be good to start with something simpler and only add that later if necessary.</p>\n</blockquote>",
        "id": 238639076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631894054\">PR review comment</a>:</p>\n<blockquote>\n<p>Note that this requires <code>Mut</code> where it doesn't actually need it, but I left it here for the same reason as <code>exports</code> above.</p>\n</blockquote>",
        "id": 238639077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631894810\">PR review comment</a>:</p>\n<blockquote>\n<p>R.e. <code>Instance::exports</code> above, this loop and this <code>collect()</code> are what I'd like to avoid in the future. This is an unnecessary allocation that instantiation performs which I think we can get rid of at no extra cost.</p>\n</blockquote>",
        "id": 238639078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631899404\">PR review comment</a>:</p>\n<blockquote>\n<p>These are only used for <code>HostFunc</code> and correspond to the creation of a <code>HostFunc</code> and its deletion.</p>\n</blockquote>",
        "id": 238639079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631900084\">PR review comment</a>:</p>\n<blockquote>\n<p>Note that I removed this in favor of a <code>Store::limiter</code> configuration API</p>\n</blockquote>",
        "id": 238639080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631898650\">PR review comment</a>:</p>\n<blockquote>\n<p>The movement here was basically just movement of code from the <code>ModuleRegistry</code> to the <code>GlobalModuleRegistry</code>. These functions should only be accessed during trap creation so the slow locking should be ok, and it means that we didn't need the store during trap creation which was made a few things easier. </p>\n<p>Data-representation-wise, though, nothing changed. The global registry already had all the information we needed.</p>\n</blockquote>",
        "id": 238639081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631900510\">PR review comment</a>:</p>\n<blockquote>\n<p>A double-check on my logic here would be greatly appreciated.</p>\n</blockquote>",
        "id": 238639082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631876860\">PR review comment</a>:</p>\n<blockquote>\n<p>This also, I think, keeps the usage of thread locals entirely contained within this file (except for manual management on async yields). One day I hope that we can actually remove the thread locals here entirely.</p>\n</blockquote>",
        "id": 238639083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631905157\">PR review comment</a>:</p>\n<blockquote>\n<p>More eyes on this in particular would be appreciated.</p>\n</blockquote>",
        "id": 238639084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631893781\">PR review comment</a>:</p>\n<blockquote>\n<p>It's also worth pointing out that <code>Mut</code> isn't technically needed here, yet. I realized that today, though, if you instantiate something we'll create a separate hash map in the wasmtime crate for all the exports (and their corresponding <code>Extern</code> value). </p>\n<p>That feels inefficient and not necessary since the hash map is already stored within <code>Arc&lt;Module&gt;</code>. I'd like to improve this in the future so instantiation simply records the <code>InstanceId</code> and nothing else, and then lookup/fetching here actually mutates the store to create a new <code>Func</code> (or whatever it is) on-demand rather than doing it all up front.</p>\n<p>This means that in the future mutability may be required, so I went ahead and added it here.</p>\n</blockquote>",
        "id": 238639085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631902158\">PR review comment</a>:</p>\n<blockquote>\n<p>And another option of course is some sort of compile-time configuration where the number of bits allocated to the index is a build time variable which specific embeddings could configure. This is so obscure, though, that I'd prefer no one else have to ever worry about this.</p>\n</blockquote>",
        "id": 238639086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631906215\">PR review comment</a>:</p>\n<blockquote>\n<p>This is, uh, very verbose. I'm not really sure how best to solve it though</p>\n</blockquote>",
        "id": 238639087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631904300\">PR review comment</a>:</p>\n<blockquote>\n<p>(I think that <code>GuestPtr</code> needs to be rethought for other reasons too)</p>\n</blockquote>",
        "id": 238639088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631904099\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW I think this is a real open question. I don't know what to do about this really. The way that <code>GuestPtr</code> works and how we need it <code>Send</code> and <code>Sync</code> necessitates this <code>Mutex</code> for now, but there's no threads here so there's no reason this <em>should</em> have a mutex. I'm hoping we can basically leave this to get improved later, probably by rethinking the way <code>GuestPtr</code> works.</p>\n</blockquote>",
        "id": 238639089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r631901745\">PR review comment</a>:</p>\n<blockquote>\n<p>After writing all this and thinking more about it, I think another possible solution could be:</p>\n<ul>\n<li>In Rust <code>Stored&lt;T&gt;</code> is 128 bits, 64 for the store and <code>usize</code> for the index within the store.</li>\n<li>In the C API we discard the 64 for the store and only have 64 for the <code>usize</code>, so the C API still uses 64-bit integers.</li>\n</ul>\n<p>That would make the C API more unsafe than it is right now, but this change could be implemented backwards compatibly (even ABI-compatibly!). That makes me much less worried about the limits imposed here.</p>\n</blockquote>",
        "id": 238639090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620920575
    },
    {
        "content": "<p><strong>peterhuene</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a>.</p>",
        "id": 239176589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621295422
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a>.</p>",
        "id": 239269125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621350220
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239273301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621351629
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239274947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621352217
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634580705\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>// Data contained is always Send+Sync so these should be safe.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 239291408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621358174
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-662345094\">PR review</a>.</p>",
        "id": 239291409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621358174
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634584410\">PR review comment</a>:</p>\n<blockquote>\n<p>I kinda feel like we should remove this method at this point -- or alternatively give it an <code>Ordering</code> param -- because we use different orderings in different places, and its a bit subtle and something to be aware of, and so having this other method that makes the choice non-obvious and hidden from you seems a bit sketch.</p>\n<p>Also, this method is only used twice now: once in an assertion and once in the <code>strong_count</code> method.</p>\n</blockquote>",
        "id": 239291410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621358175
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-662345094\">PR review</a>.</p>",
        "id": 239291411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621358175
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634587079\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                    // Cast from `*mut T` to `*mut dyn Any` here.\n</code></pre></div>\n<p>That's a lot easier than the way I was doing the casting :-p</p>\n<p>I swear casting to <code>dyn</code> is the thing I have the most trouble with in Rust at this point.</p>\n</blockquote>",
        "id": 239291412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621358175
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634589443\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice that we can use <code>&amp;mut self</code> down here too, I hadn't realized that we could propagate these changes this deep.</p>\n</blockquote>",
        "id": 239291413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621358175
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634590859\">PR review comment</a>:</p>\n<blockquote>\n<p>Very nice!!!</p>\n</blockquote>",
        "id": 239291414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621358175
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634591530\">PR review comment</a>:</p>\n<blockquote>\n<p>Wait -- is this actually true? What about <code>Drop</code> impls that call back into Wasm? I guess they <em>can't</em> since they don't have a <code>StoreContextMut</code>. Nice.</p>\n</blockquote>",
        "id": 239291415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621358175
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239322078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621370364
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239322958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621370726
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634734572\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point yeah, the wasmtime API of <code>ExternRef::strong_count</code> now mentions that it does a <code>SeqCst</code> load for synchronization purposes.</p>\n</blockquote>",
        "id": 239323004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621370750
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-662557508\">PR review</a>.</p>",
        "id": 239323005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621370750
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239324896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621371491
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-662571759\">PR review</a>.</p>",
        "id": 239325548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621371738
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634745763\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm interested to hear more of your thoughts on this when you have some time!</p>\n</blockquote>",
        "id": 239325549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621371738
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239327306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621372516
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-662673971\">PR review</a>.</p>",
        "id": 239345083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621383004
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634830115\">PR review comment</a>:</p>\n<blockquote>\n<p>can we additionally have an <code>into_inner(self) -&gt; T</code>?</p>\n</blockquote>",
        "id": 239345086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621383004
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239436350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621435361
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-663302579\">PR review</a>.</p>",
        "id": 239436549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621435438
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635312256\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah I'd forgotten to come back and implement this, now implemented though!</p>\n</blockquote>",
        "id": 239436551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621435439
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239493109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621457170
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-662650438\">PR review</a>.</p>",
        "id": 239510813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467009
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635587027\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: should the multiple <code>cfg</code> inside of <code>AsyncState</code> be promoted to a single one on the type itself?</p>\n</blockquote>",
        "id": 239510814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635543019\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this comment is now out of date given these changes.</p>\n</blockquote>",
        "id": 239510815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635515917\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm confused by this call to <code>drop</code>; would you mind explaining its significance?</p>\n</blockquote>",
        "id": 239510816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635643515\">PR review comment</a>:</p>\n<blockquote>\n<p>Should we update this test or delete it rather than commenting it out?</p>\n</blockquote>",
        "id": 239510817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635604051\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // ever have to worry about the `Send`-ness of Wasmtime. If rustc says\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 239510818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r634809616\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code> * cannot be called concurrently. For example, functions which correspond to\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 239510819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635561255\">PR review comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n</blockquote>",
        "id": 239510820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-662650438\">PR review</a>.</p>",
        "id": 239510821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635644777\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: we can replace this (and below) with <code>InstanceAllocationStrategy::pooling()</code> for brevity.</p>\n</blockquote>",
        "id": 239510822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635622488\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: </p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // NB it's important that this destructor does not access `self.data`. That is\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 239510823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635582516\">PR review comment</a>:</p>\n<blockquote>\n<p>At first when I reviewed this change I was concerned over the lack of registering the host func trampoline like we were doing before, but then I reviewed the changes in <code>store.rs</code> and saw how the host func trampolines are registered now directly with the store <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>.</p>\n</blockquote>",
        "id": 239510824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635604592\">PR review comment</a>:</p>\n<blockquote>\n<p>I read through this comment and the logic seems sound regarding the justification of marking our fiber-based futures as <code>Send</code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 239510825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635639225\">PR review comment</a>:</p>\n<blockquote>\n<p>Could you help me pinpoint where in the C API the 64-bit requirement is placed on <code>Stored&lt;T&gt;</code>?  I assume it's related to <code>wasmtime_extern_union</code> but I haven't been able to spot where the size assumption comes into play.</p>\n<p>That said, this scheme makes sense to me assuming that requirement.</p>\n</blockquote>",
        "id": 239510826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635528121\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for fixing this!</p>\n<p>Looking over what I wrote originally, I don't think we should be storing <code>offsets</code> in <code>InstancePool</code> at all.</p>\n<p>Instead <code>InstancePool::initialize</code> and this code here that is resetting the offsets with <code>VMOffsets::new(size_of::&lt;*const u8&gt;() as u8, &amp;*self.empty_module)</code> to ensure the current instance offsets match the associated module (empty both to start and when the instance has been deallocated).</p>\n<p>For <code>InstancePool::Initialize</code> we'd want to pass in the module and instance limits to set the capacity on the memory/table maps.</p>\n</blockquote>",
        "id": 239510827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467010
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r635528121\">PR review comment</a>.</p>",
        "id": 239511034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621467122
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-664450959\">PR review</a>.</p>",
        "id": 239599953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621520554
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r636153461\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh this was a weird one where <code>memory.reset_guard_pages()</code> required a <code>mut</code> binding on <code>memory</code> but that call only happens with uffd/linux, so other platforms would get a warning about an unused <code>mut</code>. To fix that I just unconditionally added a line that would require <code>mut memory</code> here regardless of the platform so this would compile everywhere without warnings.</p>\n</blockquote>",
        "id": 239599957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621520554
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-664491336\">PR review</a>.</p>",
        "id": 239605380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621522456
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r636183468\">PR review comment</a>:</p>\n<blockquote>\n<p>Whoops I completely forgot to come back to this test and update it apparently...</p>\n</blockquote>",
        "id": 239605381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621522456
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-664500124\">PR review</a>.</p>",
        "id": 239606617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621522866
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r636190008\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok I talked with @pchickey about this and our conclusion is that eventually <code>GuestPtr</code> will probably get phased out entirely. Instead of <code>GuestPtr</code> we'll generate the wiggle traits with raw borrowed strings already. This means that the <code>BorrowChecker</code> here can live in a mutable location and won't need interior mutability, alleviating the need for this <code>Mutex</code>. That'll happen in a future PR though</p>\n</blockquote>",
        "id": 239606619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621522866
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-664507591\">PR review</a>.</p>",
        "id": 239607596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621523220
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r636195312\">PR review comment</a>:</p>\n<blockquote>\n<p>The main requirement is that in the C API I would like to avoid types like <code>wasmtime_func_t</code> being owned types. Instead I'd like them to be POD-like with no destructor. For ergonomics they're also currently passed by-value everywhere in functions, e.g. returning <code>wasmtime_func_t</code> or taking <code>wasmtime_func_t func</code> or something like that. By-value structs always give me the willies (and I think concretely FFI interfaces like Python's <code>ctypes</code> doesn't support them) so that limited us to integers. The biggest integer for that was 64-bits, hence the 64-bit restriction.</p>\n<p>There's other ways to change this though:</p>\n<ul>\n<li>With my idea above the 64-bits in the C API are just index bits, so nothing would be part of the store bits. Then Rust could use 128 bits and C could use 64.</li>\n<li>Another possibility is having the C API use 128-bit integers. This would probably show up as <code>struct wasmtime_func_t { uint64_t hi; uint64_t low; }</code> instead of a 128-bit integer, and then all APIs would take pointers to the struct (it'd never be returned by value)</li>\n<li>Alternatively we could go back to <code>wasmtime_func_t*</code> and require dtors,  but I would personally prefer to avoid this.</li>\n</ul>\n<p>While I originally felt that it was kinda nice to have 64-bit types in the C API, I may be coming around to the 128-bit-size-struct idea. That keeps safety in both Rust &amp; C (somewhat at least) and I think shouldn't make bindings really that much more difficult. I think the ergonomics of the C bindings will go down a bit but that's not really the end of the world per se.</p>\n<p>Do you think it's worth these shenanigans to get 64-bit types? Or should we just go ahead and use 128-bits everywhere?</p>\n</blockquote>",
        "id": 239607598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621523221
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239607663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621523241
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-664614017\">PR review</a>.</p>",
        "id": 239621708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621528570
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r636270901\">PR review comment</a>:</p>\n<blockquote>\n<p>Hm so having thought a bit more about this <a href=\"https://gist.github.com/alexcrichton/25df779540182eefb8a833d0f9141160\">this is the diff</a> of \"what if all the types in the wasmtime API were 128-bit values\". That actually looks relatively clean to me and makes me think that I should probably just change to that? The Go/Python bindings had no trouble updating to using that idiom either.</p>\n<p>This also means that if we ever want to store more stuff in there it shouldn't really be a problem either?</p>\n</blockquote>",
        "id": 239621710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621528570
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239621998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621528687
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239639916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621536063
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-664781839\">PR review</a>.</p>",
        "id": 239641156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621536629
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r636382392\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, that makes complete sense.</p>\n</blockquote>",
        "id": 239641158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621536629
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-664784973\">PR review</a>.</p>",
        "id": 239641633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621536852
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-664790534\">PR review</a>.</p>",
        "id": 239642555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621537248
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r636391627\">PR review comment</a>:</p>\n<blockquote>\n<p>I think I would lean towards making that change so that we don't have to place limits on the number of stores that can be created (even if the limit seems reasonable today).</p>\n<p>I looked over that commit and it looks good (minor spelling error on \"belogns\" in a few places, though).</p>\n</blockquote>",
        "id": 239642556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621537248
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-664790804\">PR review</a>.</p>",
        "id": 239642604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621537267
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239645609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621538620
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239647920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621539679
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239648050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621539735
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239654859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621542759
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239656258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621543339
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239668245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621549466
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239763635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621608865
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239763673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621608881
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239766869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621610114
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239767680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621610431
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239772826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621612432
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239773969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621612853
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239790982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621620472
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239795660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621622746
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239803103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621626082
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239818958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621634910
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239845632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621660467
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239883480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621700086
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 239884916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621701625
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 240621232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622216093
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 240621698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622216245
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-673273534\">PR review</a>.</p>",
        "id": 240964501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622563417
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r643242663\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we set <code>default-features</code> to <code>false</code> here, please? Otherwise this results in the <code>default</code> feature of <code>wasmtime</code> being forcefully enabled (because of cargo resolver's feature unification), and making it impossible to disable it in embeddings that indirectly make use of <code>wiggle</code>.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>wasmtime = { path = \"../wasmtime\", version = \"0.27.0\", optional = true, default-features = false }\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 240964503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622563417
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-673277767\">PR review</a>.</p>",
        "id": 240964770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622563522
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r643243982\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm this is slightly wrong: should also re-enable manually the <code>async</code> feature.</p>\n</blockquote>",
        "id": 240964771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622563522
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r643242663\">PR review comment</a>.</p>",
        "id": 240964813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622563537
    },
    {
        "content": "<p>bnjbvr deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r643243982\">PR review comment</a>.</p>",
        "id": 240964834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622563545
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 240975538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622568270
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#pullrequestreview-673396205\">PR review</a>.</p>",
        "id": 240975561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622568281
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897#discussion_r643337637\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks, I missed that.</p>\n</blockquote>",
        "id": 240975562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622568281
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 241075191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622581338
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 241075305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622581403
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a> from <code>new-api</code> to <code>main</code>.</p>",
        "id": 241078785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622583140
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">PR #2897</a>.</p>",
        "id": 241395804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622729454
    }
]