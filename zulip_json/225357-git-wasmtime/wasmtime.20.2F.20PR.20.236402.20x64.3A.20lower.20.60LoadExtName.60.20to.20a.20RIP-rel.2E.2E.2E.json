[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402\">PR #6402</a> from <code>abrown:func-addr-lea</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change intends to add a new lowering for <code>MachInst::LoadExtName</code> (the pseudo-instruction behind CLIF's <code>func_addr</code> and <code>symbol_addr</code>) that uses RIP-relative addressing when the name is local to the module (<code>colocated</code>). The existing behavior is retained, which currently loads from the global offset table when the <code>is_pic</code> flag is set (a <code>X86GOTPCRel4</code> relocation) or loads a relocated immediate (an <code>Abs8</code> relocation). After this change, a <code>lea</code> instruction will calculate a RIP-relative address if the name in question is marked with CLIF's <code>colocated</code> flag.</p>\n<p>Why is this necessary? Though some users of Cranelift, like <code>cranelift-jit</code>, understand how to relocate the existing <code>Abs8</code> relocations (see [<code>CompiledBlob::perform_relocations</code>]), Wasmtime does not. Though technically Wasmtime does apply relocations (see [<code>CodeMemory::apply_relocations</code>]), these are only for libcalls. Wasmtime will attempt to resolve module-local functions, the ones targeted by <code>func_addr</code>, via some internal relocation patching in [<code>ModuleTextBuilder::append_func</code>]. When it realizes it cannot patch one of these functions, it panics because [<code>LabelUse::from_reloc</code>] only understands the <code>X86CallPCRel4</code> relocation. This prevents the use of <code>func_addr</code> when translating Wasm code. Since no current Wasmtime translation uses <code>func_addr</code> directly, this change is not technically required, but it does feel like the right option to add, normalizing <code>func_addr</code>'s behavior for local functions to <code>MachInst::CallKnown</code>'s behavior and making more useful for other Cranelift users in the future.</p>\n<p>[<code>CompiledBlob::perform_relocations</code>]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/cranelift/jit/src/compiled_blob.rs#L48\">https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/cranelift/jit/src/compiled_blob.rs#L48</a><br>\n[<code>CodeMemory::apply_relocations</code>]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/crates/jit/src/code_memory.rs#L269\">https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/crates/jit/src/code_memory.rs#L269</a><br>\n[<code>ModuleTextBuilder::append_func</code>]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/crates/cranelift-shared/src/obj.rs#L145\">https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/crates/cranelift-shared/src/obj.rs#L145</a><br>\n[<code>LabelUse::from_reloc</code>]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/cranelift/codegen/src/isa/x64/inst/mod.rs#L2759\">https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/cranelift/codegen/src/isa/x64/inst/mod.rs#L2759</a></p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 359096490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684364176
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402\">PR #6402</a>.</p>",
        "id": 359096492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684364176
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402\">PR #6402</a>.</p>",
        "id": 359096493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684364176
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402\">PR #6402</a>.</p>",
        "id": 359096604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684364251
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402\">PR #6402</a>.</p>",
        "id": 359096744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684364307
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402\">PR #6402</a>:</p>\n<blockquote>\n<p>This change intends to add a new lowering for <code>MachInst::LoadExtName</code> (the pseudo-instruction behind CLIF's <code>func_addr</code> and <code>symbol_addr</code>) that uses RIP-relative addressing when the name is local to the module (<code>colocated</code>). The existing behavior is retained, which currently loads from the global offset table when the <code>is_pic</code> flag is set (a <code>X86GOTPCRel4</code> relocation) or loads a relocated immediate (an <code>Abs8</code> relocation). After this change, a <code>lea</code> instruction will calculate a RIP-relative address if the name in question is marked with CLIF's <code>colocated</code> flag.</p>\n<p>Why is this necessary? Though some users of Cranelift, like <code>cranelift-jit</code>, understand how to relocate the existing <code>Abs8</code> relocations (see [<code>CompiledBlob::perform_relocations</code>]), Wasmtime does not. Though technically Wasmtime does apply relocations (see [<code>CodeMemory::apply_relocations</code>]), these are only for libcalls. Wasmtime will attempt to resolve module-local functions, the ones targeted by <code>func_addr</code>, via some internal relocation patching in [<code>ModuleTextBuilder::append_func</code>]. When it realizes it cannot patch one of these functions, it panics because [<code>LabelUse::from_reloc</code>] only understands the <code>X86CallPCRel4</code> relocation. This prevents the use of <code>func_addr</code> when translating Wasm code. Since no current Wasmtime translation uses <code>func_addr</code> directly, this change is not technically required, but it does feel like the right option to add, normalizing <code>func_addr</code>'s behavior for local functions to <code>MachInst::CallKnown</code>'s behavior and making it more useful for other Cranelift users in the future.</p>\n<p>[<code>CompiledBlob::perform_relocations</code>]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/cranelift/jit/src/compiled_blob.rs#L48\">https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/cranelift/jit/src/compiled_blob.rs#L48</a><br>\n[<code>CodeMemory::apply_relocations</code>]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/crates/jit/src/code_memory.rs#L269\">https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/crates/jit/src/code_memory.rs#L269</a><br>\n[<code>ModuleTextBuilder::append_func</code>]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/crates/cranelift-shared/src/obj.rs#L145\">https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/crates/cranelift-shared/src/obj.rs#L145</a><br>\n[<code>LabelUse::from_reloc</code>]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/cranelift/codegen/src/isa/x64/inst/mod.rs#L2759\">https://github.com/bytecodealliance/wasmtime/blob/752c7ea4dd83f9cb247e00cadf9d1958c0bdf9b6/cranelift/codegen/src/isa/x64/inst/mod.rs#L2759</a></p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 359096747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684364311
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402#pullrequestreview-1431795048\">PR review</a>:</p>\n<blockquote>\n<p>LGTM, thanks!</p>\n</blockquote>",
        "id": 359099875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684365977
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402\">PR #6402</a>.</p>",
        "id": 359283633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684368131
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402#discussion_r1197499482\">PR review comment</a>:</p>\n<blockquote>\n<p>There is a cranelift flag to specify if libcalls are colocated or not.</p>\n</blockquote>",
        "id": 359322447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684395115
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6402#discussion_r1197500887\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe put this before is_pic? All code in the same object file has a fixed relative location with each other.</p>\n</blockquote>",
        "id": 359322709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684395216
    }
]