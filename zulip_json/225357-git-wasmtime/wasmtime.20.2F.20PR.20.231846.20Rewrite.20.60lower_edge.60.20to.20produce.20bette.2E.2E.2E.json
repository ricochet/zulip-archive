[
    {
        "content": "<p>julian-seward1 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1846\">PR #1846</a> from <code>better-phis</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>\n<p>ensure that all const assignments are placed at the end of the sequence.<br>\n  This minimises live ranges.</p>\n</li>\n<li>\n<p>for the non-const assignments, ignore self-assignments.  This can<br>\n  dramatically reduce the total number of moves generated, because any<br>\n  self-assignments trigger the overlap-case handling, hence invoking the<br>\n  double-copy behaviour in cases where it's not necessary.</p>\n</li>\n</ul>\n<p>It's worth pointing out that self-assignments are common, and are not due to<br>\ndeficiencies in CLIR optimisation.  Rather, they occur whenever a loop back<br>\nedge doesn't modify <em>all</em> loop-carried values.  This can easily happen if<br>\nthe loop has multiple \"early\" back-edges -- \"continues\" in C parlance.  Eg:</p>\n<p>loop_header(a, b, c, d, e, f):<br>\n      ...<br>\n      a_new = ...<br>\n      b_new = ...<br>\n      if (..) goto loop_header(a_new, b_new, c, d, e, f)</p>\n<div class=\"codehilite\"><pre><span></span><code>  ...\n  c_new = ...\n  d_new = ...\n  if (..) goto loop_header(a_new, b_new, c_new, d_new, e, f)\n\n  etc\n</code></pre></div>\n\n\n<p>For functions with many live values, this can dramatically reduce the number<br>\nof spill moves we throw into the register allocator.</p>\n<p>In terms of compilation costs, this ranges from neutral for functions which<br>\nspill not at all, or minimally (joey_small, joey_med) to a 7.1% reduction in<br>\ninsn count.</p>\n<p>In terms of run costs, for one spill-heavy test (bz2 w/ custom timing harness),<br>\ninstruction counts are reduced by 4.3%, data reads by 12.3% and data writes<br>\nby 18.5%.  Note those last two figures include all reads and writes made by the<br>\ngenerated code, not just spills/reloads, so the proportional reduction in<br>\nspill/reload traffic must be greater.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 200195739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591692056
    },
    {
        "content": "<p><strong>julian-seward1</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1846\">PR #1846</a>.</p>",
        "id": 200210070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591701882
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1846#pullrequestreview-427360673\">PR Review</a>.</p>",
        "id": 200259482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591721749
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1846\">PR #1846</a>.</p>",
        "id": 200259631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591721814
    }
]