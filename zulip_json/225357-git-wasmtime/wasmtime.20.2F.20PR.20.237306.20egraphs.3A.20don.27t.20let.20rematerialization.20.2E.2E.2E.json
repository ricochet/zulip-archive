[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306\">PR #7306</a> from <code>cfallin:licm-in-the-correct-direction</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This reworks the way that remat and LICM interact during aegraph elaboration. In principle, both happen during the same single-pass \"code placement\" algorithm: we decide where to place pure instructions (those that are eligible for movement), and remat pushes them one way while LICM pushes them the other.</p>\n<p>The interaction is a little more subtle than simple heuristic priority, though -- it's really a decision ordering issue. A remat'd value wants to sink as deep into the loop nest as it can (to the use's block), but we don't know <em>where</em> the uses go until we process them (and make LICM-related choices), and we process uses after defs during elaboration. Or more precisely, we have some work at the use before recursively processing the def, and some work after the recursion returns; and the LICM decision happens after recursion returns, because LICM wants to know where the defs are to know how high we can hoist. (The recursion is itself unrolled into a state machine on an explicit stack so that's a little hard to see but that's what is happening in principle.)</p>\n<p>The solution here is to make remat a separate just-in-time thing, once we have arg values. Just before we plug the final arg values into the elaborated instruction, we ask: is this a remat'd value, and if so, do we have a copy of the computation in this block yet. If not, we make one. This has to happen in two places (the main elab loop and the toplevel driver from the skeleton).</p>\n<p>The one downside of this solution is that it doesn't handle <em>recursive</em> rematerialization by default. This means that if we, for example, decide to remat single-constant-arg adds (as we actually do in our current rules), we won't then also recursively remat the constant arg to those adds. This can be seen in the <code>licm.clif</code> test case. This doesn't seem to be a dealbreaker to me because most such cases will be able to fold the constants anyway (they happen mostly because of pointer pre-computations: a loop over structs in Wasm computes heap_base + p + offset, and naive LICM pulls a <code>heap_base + offset</code> out of the loop for every struct field accessed in the loop, with horrible register pressure resulting; that's why we have that remat rule. Most such offsets are pretty small.).</p>\n<p>Fixes #7283.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 397590708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697757757
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306\">PR #7306</a>.</p>",
        "id": 397590709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697757758
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306\">PR #7306</a>.</p>",
        "id": 397590710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697757758
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306\">PR #7306</a>.</p>",
        "id": 397590797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697757825
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306\">PR #7306</a>.</p>",
        "id": 397590799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697757830
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306\">PR #7306</a>.</p>",
        "id": 397617241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697771599
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#pullrequestreview-1689419297\">PR review</a>:</p>\n<blockquote>\n<p>This looks great to me! I had some questions, but none of it should block merging.</p>\n</blockquote>",
        "id": 397651598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697788481
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#pullrequestreview-1689419297\">PR review</a>:</p>\n<blockquote>\n<p>This looks great to me! I had some questions, but none of it should block merging.</p>\n</blockquote>",
        "id": 397651599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697788481
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#discussion_r1366587809\">PR review comment</a>:</p>\n<blockquote>\n<p>Would you mind reverting this change? I like the space between the imports and type decls :)</p>\n</blockquote>",
        "id": 397651600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697788481
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#discussion_r1366602174\">PR review comment</a>:</p>\n<blockquote>\n<p>I like how much simpler this gets as a result of moving the remat decision to when the args are being processed!</p>\n</blockquote>",
        "id": 397651602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697788481
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#discussion_r1366608840\">PR review comment</a>:</p>\n<blockquote>\n<p>Do we know if there's a single consumer for the value at this point? Would it make sense in the future to only clone when args were rematerialized if there are &gt;1 uses?</p>\n</blockquote>",
        "id": 397651603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697788481
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#discussion_r1366590802\">PR review comment</a>:</p>\n<blockquote>\n<p>Would you mind making an issue and referencing it here? This would be nice to track.</p>\n</blockquote>",
        "id": 397651605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697788481
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306\">PR #7306</a>.</p>",
        "id": 397766133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830630
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#pullrequestreview-1690804870\">PR review</a>.</p>",
        "id": 397766138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830632
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#discussion_r1367424500\">PR review comment</a>:</p>\n<blockquote>\n<p>Oops, leftover from some fiddling to get <code>Entry</code> before I found another re-export; sorry about that!</p>\n</blockquote>",
        "id": 397766139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830633
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#pullrequestreview-1690804906\">PR review</a>.</p>",
        "id": 397766147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830635
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#discussion_r1367424524\">PR review comment</a>:</p>\n<blockquote>\n<p>Done! (#7313)</p>\n</blockquote>",
        "id": 397766148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830635
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#pullrequestreview-1690804963\">PR review</a>.</p>",
        "id": 397766152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830638
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#discussion_r1367424545\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed, it reads much better now!</p>\n</blockquote>",
        "id": 397766153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830638
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#pullrequestreview-1690805009\">PR review</a>.</p>",
        "id": 397766160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830640
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306#discussion_r1367424577\">PR review comment</a>:</p>\n<blockquote>\n<p>Unfortunately we don't; and the lazy cloning we use for the main remat loop doesn't work, because while both rewrite args, we rewrite to clones that are not full eclass values (not in the unionfind, not in the extraction tables, etc); so we have to preserve the original. (Discovered the hard way while debugging!)</p>\n</blockquote>",
        "id": 397766161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830640
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306\">PR #7306</a>.</p>",
        "id": 397766210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697830664
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7306\">PR #7306</a>.</p>",
        "id": 397773854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697834681
    }
]