[
    {
        "content": "<p>jeff-hykin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4020\">issue #4020</a>:</p>\n<blockquote>\n<p>For many years now I've been eargerly waiting for a language that can compile it's own compiler to wasm/wasi. I've talked with the guy who made the llvm to wasm demo (sadly that project has quickly been going nowhere). I've talked to some rust groups about compiling a minimal subset of a rust compiler to wasm. I've talked with some people from V-lang, etc.</p>\n<p>So my question is, how unrealistic is it for cranelift to compile itself to wasm (a module function with IR input and  wasm-bytes output)? \"Unrealistic\" as-in; is there unavoidable multithreading, or raw assembly, etc in cranelift that would be a show-stopper for compiling it to WASM.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 278778888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649818751
    },
    {
        "content": "<p>jeff-hykin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4020\">issue #4020</a>:</p>\n<blockquote>\n<p>For many years now I've been eargerly waiting/searching for a language that can compile it's own compiler to wasm/wasi. I've talked with the guy who made the llvm to wasm demo (sadly that project has quickly been going nowhere). I've talked to some rust groups about compiling a minimal subset of a rust compiler to wasm. I've talked with some people from V-lang, etc.</p>\n<p>So my question is, how unrealistic is it for cranelift to compile itself to wasm (a module function with IR input and  wasm-bytes output)? \"Unrealistic\" as-in; is there unavoidable multithreading, or raw assembly, etc in cranelift that would be a show-stopper for compiling it to WASM.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 278778894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649818774
    },
    {
        "content": "<p>jeff-hykin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4020\">issue #4020</a>:</p>\n<blockquote>\n<p>For many years now I've been eargerly waiting/searching for a language that can compile it's own compiler to wasm/wasi. I've talked with the guy who made the llvm to wasm demo (sadly that project has quickly been going nowhere). I've talked to some rust groups about compiling a minimal subset of a rust compiler to wasm. I've talked with some people from V-lang, etc.</p>\n<p>So my question is, how unrealistic is it for cranelift to compile itself to wasm (a module function with IR input and  wasm-bytes output)? \"How unrealistic\" as-in; is there unavoidable multithreading, or raw assembly, etc in cranelift that would be a show-stopper for compiling it to WASM.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 278779023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649818851
    },
    {
        "content": "<p>jeff-hykin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4020\">issue #4020</a>:</p>\n<blockquote>\n<p>For many years now I've been eargerly waiting/searching for a language that can compile it's own compiler to wasm/wasi. I've talked with the guy who made the llvm to wasm demo (sadly that project has quickly been going nowhere). I've talked to some rust groups about compiling a minimal subset of a rust compiler to wasm. I've talked with some people from V-lang, etc.</p>\n<p>So my question is, how unrealistic is it for cranelift to compile itself to wasm (a module function with IR input and  wasm-bytes output)? \"How unrealistic\" as-in; does cranelift have unavoidable multithreading, or raw assembly, etc that would be a show-stopper for compiling it to WASM.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 278779054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649818887
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4020#issuecomment-1097519891\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4020\">issue #4020</a>:</p>\n<blockquote>\n<p>Hi @jeff-hykin -- this use-case would mainly depend on support for generating Wasm bytecode, which we previously discussed a bit in #2566. I think that while it's not totally unrealistic, it's a major undertaking: Wasm as an ISA is very different from our current target architectures in several important ways (stack machine, unlimited \"registers\" (locals) hence maybe no or only simple regalloc, functions are a first-class machine feature rather than software-managed via stack conventions, structured control flow, etc). I'd encourage you to read over that thread for ideas and background.</p>\n</blockquote>",
        "id": 278780639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649821040
    },
    {
        "content": "<p>jeff-hykin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4020#issuecomment-1097523380\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4020\">issue #4020</a>:</p>\n<blockquote>\n<p>Oh I'm actually embarrassed to admit I didn't realize WASM/WASI wasn't a cranelift backend. And I was just reading the internals of the IR last week <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Thanks for the pointer to that thread.  That'll certainly resolve this issue for now.</p>\n<p>I suppose I just associated wasmtime/bytecode-alliance/cranelift so much I had just always assumed WASM was a cranelift backend.</p>\n</blockquote>",
        "id": 278781038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649821569
    },
    {
        "content": "<p>jeff-hykin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4020\">issue #4020</a>:</p>\n<blockquote>\n<p>For many years now I've been eargerly waiting/searching for a language that can compile it's own compiler to wasm/wasi. I've talked with the guy who made the llvm to wasm demo (sadly that project has quickly been going nowhere). I've talked to some rust groups about compiling a minimal subset of a rust compiler to wasm. I've talked with some people from V-lang, etc.</p>\n<p>So my question is, how unrealistic is it for cranelift to compile itself to wasm (a module function with IR input and  wasm-bytes output)? \"How unrealistic\" as-in; does cranelift have unavoidable multithreading, or raw assembly, etc that would be a show-stopper for compiling it to WASM.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 278781043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649821583
    }
]