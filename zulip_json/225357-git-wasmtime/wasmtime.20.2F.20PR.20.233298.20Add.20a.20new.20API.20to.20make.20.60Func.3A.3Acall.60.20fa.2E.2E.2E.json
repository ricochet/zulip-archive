[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3298\">PR #3298</a> from <code>arguments</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fastest way to call a WebAssembly function with Wasmtime is to use<br>\nthe <code>TypedFunc</code> API and methods. This is only available to Rust code,<br>\nhowever, due to the usage of generics. The C API as a result is left to<br>\nonly be able to use <code>Func::call</code>, which is quite slow today. While<br>\n<code>Func::call</code> has a lot of reasons that it's slow, some major<br>\ncontributors are:</p>\n<ul>\n<li>\n<p>Space must be allocated for the arguments/return values to call the<br>\n  trampoline with. This <code>u128</code> storage is allocated on all<br>\n<code>Func::call</code>-based calls today.</p>\n</li>\n<li>\n<p>The function's type is loaded to typecheck the arguments, and this<br>\n  requires taking an rwlock in the <code>Engine</code> as well as cloning out the<br>\n<code>FuncType</code> itself.</p>\n</li>\n<li>\n<p>For the C API the slice of inputs needs to be translated to a slice of<br>\n<code>Val</code>, and the results are translated from a vector of <code>Val</code> back to a<br>\n  vector of <code>wasmtime_val_t</code>.</p>\n</li>\n</ul>\n<p>These two operations are particularly costly and the goal of this commit<br>\nis to solve these two issues. The solution implemented here is a new<br>\nstructure, called <code>FuncStorage</code>, which can be created within an <code>Engine</code><br>\non a per-function-type basis. This storage is then used with a new API,<br>\n<code>Func::call_with_storage</code>, which removes the first two slowdowns mentioned<br>\nabove. Each <code>FuncStorage</code> stores a copy of the <code>FuncType</code> it's intended<br>\nto be used with. Additionally it stores an appropriately-sized<br>\n<code>Vec&lt;u128&gt;</code> for storage of trampoline-encoded arguments.</p>\n<p>The final bullet above is solved with tweaks to the<br>\n<code>Func::call_with_storage</code> API relative to <code>Func::call</code> where the<br>\nparameters/results are both iterators instead of slices.</p>\n<p>This new API is intended to be a \"power user\" API for the Rust crate,<br>\nbut is expected to be more commonly used with the C API since it's such<br>\na large performance improvement to calling wasm functions.</p>\n<p>Overall I'm not overly happy with this API. It solves a lot of the slow<br>\n<code>wasmtime_func_call</code> problem, but the APIs added here are pretty<br>\nunfortunate I think. Ideally we could solve this issue with no<br>\nadditional API surface area. For example the first bullet could be<br>\nsolved with a solution along the lines of #3294 where vectors are stored<br>\nin a <code>Store</code> and reused per-call. The third bullet could probably be<br>\nfixed with the same style and also changing <code>Func::call</code> to taking a<br>\n<code>&amp;mut [Val]</code> as an argument instead of returning a boxed slice. The<br>\nsecond bullet though is probably one of the harder ones to fix. Each<br>\n<code>Func</code> could store it's fully-fleshed-out <code>FuncType</code>, but that's a<br>\nrelatively large impact and would also likely require changing<br>\n<code>FuncType</code> to internally use <code>Arc&lt;[WasmType]&gt;</code> or similar. In any case<br>\nI'm hoping that this can help spur on some creativity for someone to<br>\nfind a better solution to this issue.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 251920880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630692470
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3298\">PR #3298</a> from <code>arguments</code> to <code>main</code>.</p>",
        "id": 251927956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630695898
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3298\">PR #3298</a> from <code>arguments</code> to <code>main</code>.</p>",
        "id": 251937169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630700681
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3298\">PR #3298</a>.</p>",
        "id": 253133777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631556358
    }
]