[
    {
        "content": "<p><strong>scottmcm</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719\">PR #7719</a>.</p>",
        "id": 409456645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703188863
    },
    {
        "content": "<p>scottmcm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719\">PR #7719</a> from <code>scottmcm:modular-reduce</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is a follow-up to <strong>fitzgen</strong>'s comment in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7693#discussion_r1430497487\">https://github.com/bytecodealliance/wasmtime/pull/7693#discussion_r1430497487</a></p>\n<p>The version that was removed from that PR had some concerns because it added things to the egraph that might not be useful, since it added <em>more</em> instructions, potentially: going from <code>(small)(x OP y)</code> to <code>(small)x OP (small)y</code> isn't always a win since it's one more CLIF instruction.</p>\n<p>This PR addresses that concern by restricting the pattern only to places where it's going to be <em>strictly fewer</em> total instructions.  It does that by only applying when all the arguments to the inner operator are either extended or constants.  In those cases, pushing the <code>ireduce</code> into the arguments will collapse with the instruction that's already there -- either because extend-then-reduce back is a nop, because cprop will simplify it, or thanks to #7711.</p>\n<p>The particular motivating example for this -- which is why the <code>mulhi</code> pattern is in here too -- is Rust's <a href=\"https://doc.rust-lang.org/std/primitive.u64.html#method.widening_mul\"><code>u64::widening_mul</code></a>.  LLVM doesn't have an intrinsic for wide multiplication, so the way it's often written is by casting the arguments to a wider type, doing the multiplication, then reducing back again.  But that means the obvious translation in CLIF ends up with an expensive 128-bit multiplication.  Collapsing that down to a 64-bit <code>imul</code>+<code>umulhi</code> is much cheaper.</p>\n</blockquote>",
        "id": 409456646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703188863
    },
    {
        "content": "<p><strong>scottmcm</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719\">PR #7719</a>.</p>",
        "id": 409456648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703188863
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719#issuecomment-1867021177\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719\">PR #7719</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 409476516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703198708
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719\">PR #7719</a>.</p>",
        "id": 409523364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703222302
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719#pullrequestreview-1800761157\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 410878890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704216201
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719\">PR #7719</a>.</p>",
        "id": 410890117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704221464
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719#issuecomment-1930620396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7719\">PR #7719</a>:</p>\n<blockquote>\n<p>A bisection I just ran points to this PR as the cause of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7874\">https://github.com/bytecodealliance/wasmtime/issues/7874</a> (cc'ing here to close the loop)</p>\n</blockquote>",
        "id": 420120279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707247970
    }
]