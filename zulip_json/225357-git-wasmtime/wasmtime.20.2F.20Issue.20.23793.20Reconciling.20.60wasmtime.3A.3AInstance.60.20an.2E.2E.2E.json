[
    {
        "content": "<p>autodidaddict <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-640117346\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>I'm running into problems right now in a few downstream crates that I'm writing on top of wasmtime where I am having to jump through all kinds of hoops and create some pretty gnarly looking code because the wasmtime Instance isn't send. I can't even hide the instance under an <code>Arc&lt;RwLock&lt;...&gt;&gt;</code> because of its internal use of <code>Rc&lt;RefCell&gt;&gt;</code>s.</p>\n</blockquote>",
        "id": 199992822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591477104
    },
    {
        "content": "<p>Waridley <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-692500798\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>How does <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1363\">https://github.com/bytecodealliance/wasmtime/pull/1363</a> affect this?</p>\n</blockquote>",
        "id": 210094810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600151976
    },
    {
        "content": "<p>Waridley <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-692559781\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>It seems the most up-to-date explanation of the problem here may be at <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625942214\">https://github.com/bytecodealliance/wasmtime/issues/777#issuecomment-625942214</a><br>\nI still really hope it's possible to make <code>Instance</code> be <code>Send</code>. This issue causes me to need to decide whether to use <code>Wasmer</code> instead (speaking of which, how do they do it? Is it actually safe? What's different? I actually thought the way wasmer <code>Module</code>s need a <code>Store</code> made using threads <em>harder</em> until I tried it with wasmtime and discovered this issue.) Or just wrap it in a newtype and <code>unsafe impl Send</code> for it... But then I'll have no idea if it's actually working right until something breaks.</p>\n</blockquote>",
        "id": 210103501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600158900
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-692740254\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>At this point <code>Instance</code> is pretty unlikely to ever be <code>Send</code>. It is, however, safe to move everything connected to a <code>Store</code> to a different thread all at once. It's just not safe to use a <code>Store</code> simultaneously across threads. We haven't documented this, however, it's just a feature of the implementation that will likely always be true. I don't know how wasmer internals work, but for Wasmtime it is not memory safe to add <code>unsafe impl Send for Instance</code>.</p>\n</blockquote>",
        "id": 210134209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600178974
    },
    {
        "content": "<p>Waridley <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-692777238\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>So basically there's no way to enforce in the type system that you move everything connected to the <code>Store</code> all at once?</p>\n</blockquote>",
        "id": 210142049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600182338
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-693105534\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>Correct, yeah, we haven't implemented a way of doing that yet. (I'm not sure if it exists for us)</p>\n</blockquote>",
        "id": 210210832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600217571
    },
    {
        "content": "<p>Waridley <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-694385324\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>Thanks. Turns out Wasmer just has an <code>unsafe impl Send for InstanceHandle {}</code> <a href=\"https://github.com/wasmerio/wasmer/blob/a2e744aba6c4898841f8a67f4d56a24f204ee439/lib/vm/src/instance.rs#L769-L772\">https://github.com/wasmerio/wasmer/blob/a2e744aba6c4898841f8a67f4d56a24f204ee439/lib/vm/src/instance.rs#L769-L772</a></p>\n<p>And a comment saying <code>/// TODO: this needs extra review</code>. Not to call anyone out, but I'd rather use a library that has thoroughly considered all safety implications and decided that it's not sound to add this impl, rather than one that just assumes it's fine... I can just wrap it in a newtype and impl Send on that myself, and at least I'll have a better understanding of why it's unsafe and what invariants I need to uphold to make it sound.</p>\n</blockquote>",
        "id": 210422832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600363876
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-694430431\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>It isn't safe. There is a <code>Clone</code> impl that shares the memory. This means that you can use send a clone to another thread and then call <code>table_set</code> from multiple threads at the same time. There doesn't seem to be any synchronization, so this is a race-condition and thus UB.</p>\n</blockquote>",
        "id": 210433349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600368636
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-694430431\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>It isn't safe. There is a <code>Clone</code> impl that shares the memory. This means that you can use send a clone to another thread and then call <code>table_set</code> from multiple threads at the same time. There doesn't seem to be any synchronization, so this is a race-condition and thus UB.</p>\n<p>Edit: missed that <code>.set</code> has a lock.</p>\n</blockquote>",
        "id": 210434260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600369025
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-694430431\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>It isn't safe. There is a <code>Clone</code> impl that shares the memory. This means that you can use send a clone to another thread and then call <code>table_set</code> from multiple threads at the same time. There doesn't seem to be any synchronization, so this is a race-condition and thus UB.</p>\n<p>Edit: missed that <code>.set</code> has a lock.<br>\nEdit2: <code>host_state</code> contains <code>Box&lt;dyn Any&gt;</code>, but it can be accessed from multiple threads at the same time through the aforementioned way. This means that it must be <code>Box&lt;dyn Any + Sync&gt;</code>.</p>\n</blockquote>",
        "id": 210434932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600369298
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-694430431\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>It isn't safe. There is a <code>Clone</code> impl that shares the memory. This means that you can use send a clone to another thread and then call <code>table_set</code> from multiple threads at the same time. There doesn't seem to be any synchronization, so this is a race-condition and thus UB.</p>\n<p>Edit: missed that <code>.set</code> has a lock.<br>\nEdit2: <code>host_state</code> contains <code>Box&lt;dyn Any&gt;</code>, but it can be accessed from multiple threads at the same time through the aforementioned way. This means that it must be <code>Box&lt;dyn Any + Sync&gt;</code>.<br>\nEdit3: reported bug to wasmer</p>\n</blockquote>",
        "id": 210435515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600369558
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-694430431\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>It isn't safe. There is a <code>Clone</code> impl that shares the memory. This means that you can use send a clone to another thread and then call <code>table_set</code> from multiple threads at the same time. There doesn't seem to be any synchronization, so this is a race-condition and thus UB.</p>\n<p>Edit: missed that <code>.set</code> has a lock.<br>\nEdit2: <code>host_state</code> contains <code>Box&lt;dyn Any&gt;</code>, but it can be accessed from multiple threads at the same time through the aforementioned way. This means that it must be <code>Box&lt;dyn Any + Sync&gt;</code>.<br>\nEdit3: reported bug on the wasmer repo</p>\n</blockquote>",
        "id": 210435583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600369572
    },
    {
        "content": "<p>Knight-X <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-815086740\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>Can we run the wasi example on the async pattern now ? It looks like we just have async Func and Store, but we do not have async Linker. If we can, is there any tutorial to run wasi example on async mode?  </p>\n</blockquote>",
        "id": 233528574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617816016
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>Currently as of today the <code>Instance</code> type in the <code>wasmtime</code> crate is not <code>Send</code>. This means that you cannot send it to other threads once it's created. There's a whole bunch of technical issues as to why this is, but for the sake of this issue I'd like to assume a world where we can instantly design everything the way we want. </p>\n<p>In our eventual world, for example, <code>Module</code> is <code>Send</code> and <code>Sync</code> along with most other types in <code>wasmtime</code>. We, in this world, get to decide whether we want <code>Instance</code> to be <code>Send</code> or not. As a quick note we fundamentally cannot make <code>Instance</code> <code>Sync</code> because that would allow concurently invoking the same function and (at least) concurrently modifying globals in a non-atomic fashion. This is what we've historically discussed, where <code>Send</code> is desired to send instances to other threads.</p>\n<p>I want to write down some reasoning, though, for why I think this may actually be extremely difficult if not impossible. There's two issues I see with trying to make <code>Instance</code> a send-able type:</p>\n<ul>\n<li>\n<p>One is that all the externals today rely on reference counting. Once you put <code>Rc</code> somewhere it's fundamentally neither <code>Send</code> nor <code>Sync</code>. Types like <code>Global</code>, however, internally contain an <code>Rc</code>. We <em>may</em> be able to fix this by only allowing acquisition of <code>&amp;Global</code> from <code>Instance</code>, however. This is the easier of the constraints to solve.</p>\n</li>\n<li>\n<p>Perhaps the more fundamental constraint though is how we want to deal with function imports. Today this is done with the <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/trait.Callable.html\"><code>Callable</code></a> trait, and those values are stored within an <code>Instance</code> (transitively through <code>Func</code> and such). The <code>Callable</code>, trait, however, does not require <code>Send</code>, which means that, again, <code>Instance</code> is not send. For the rest of this issue I'll discuss this problem.</p>\n</li>\n</ul>\n<p>One possible solution to the latter point would be to add <code>Send</code> as a requirement to the <code>Callable</code> trait, but this also unfortunately is not a great API decision. That requires <em>everyone</em>, even those who don't need it, to implement the <code>Send</code> trait. That's surprisingly restrictive because there are legitimate cases where you don't want to implement <code>Send</code> or deal with the overhead. </p>\n<p>The only real solution I know of is to somehow get generics into the picture. For example we can make <code>Instance&lt;T&gt;</code> conditionally <code>Send</code> based on <code>T</code>, allowing users to enable an instance to be <code>Send</code> if they configure it accordingly, but also accomodating users who don't want to deal with <code>Send</code> and only want to work on one thread.</p>\n<p>This \"real solution\", though, doesn't really make sense to me. What is <code>T</code> in <code>Instance&lt;T&gt;</code>? Naively it's basically \"the import object\" but how can we express this? Is there a way we can create a trait to represent this?</p>\n<hr>\n<p>The tl;dr; of this issue is basically:</p>\n<ul>\n<li>I assert that it is a local maximum today (and likely beyond) for <code>Instance</code> to <strong>not</strong> be <code>Send</code>.</li>\n<li>For <code>Instance</code> to be <code>Send</code>, I think it will require a type parameter, like <code>Instance&lt;T&gt;</code> where <code>T</code> is the \"import object\" with some trait to make it work. I haven't the foggiest though how this trait would be designed that satisfies all our constraints for possible optimizations and such.</li>\n</ul>\n<p>As a result, I'd like to propose that we commit to, for now, the <code>Instance</code> type not being <code>Send</code>, and then getting as much mileage out of that as we can.</p>\n</blockquote>",
        "id": 233567087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617831248
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793#issuecomment-815280099\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">Issue #793</a>:</p>\n<blockquote>\n<p>@Knight-X currently <code>wasi-common</code> doesn't have async bindings, but that is planned for the future. Using a <code>Linker</code> you can insert <code>Func</code> values created from async host functions too.</p>\n</blockquote>",
        "id": 233567197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617831309
    }
]