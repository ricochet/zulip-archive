[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">issue #5908</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently have simplification rules in <code>opts/algebraic.isle</code> to rewrite <code>x/1</code> to <code>x</code>, and in <code>opts/cprop.isle</code> to constant-fold division when both operands are constant. But these rules can't fire, because <code>simplify</code> is only called on instructions which never have side effects, and division may trap if the divisor is 0.</p>\n<p>I'd like to be able to use simplification rules like these on trapping arithmetic.</p>\n<h4>Benefit</h4>\n<p>We could optimize away more instructions. There are comments in <code>algebraic.isle</code> suggesting more desired optimizations that we can't implement today either:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">TODO</span>: <span class=\"nc\">strength</span><span class=\"w\"> </span><span class=\"n\">reduction</span>: <span class=\"nc\">div</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">shifts</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">TODO</span>: <span class=\"nc\">div</span><span class=\"o\">/</span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">constants</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">magic</span><span class=\"w\"> </span><span class=\"n\">multiplications</span>\n</code></pre></div>\n<p>In addition to replacing expressions with simpler equivalents, we could sometimes remove them entirely if they're unused. We currently can't do that because if the instruction would trap then we need to ensure that trap occurs. But if we have a valid rewrite from a possibly-trapping instruction to an expression which can't trap, then it's actually safe to treat it as a pure instruction.</p>\n<p>I suspect this might be particularly valuable for <code>uadd_overflow_trap</code>, which is used in bounds checks for dynamic heaps in cranelift-wasm.</p>\n<h4>Implementation</h4>\n<p>One idea is in #5796, but that approach was not selected in #5800 because it \"is a little more complex than I would like\". I still like the idea of a <code>force</code> instruction to pull otherwise-pure instructions into the side-effecting skeleton, but it's possible some other approach is better.</p>\n<h4>Alternatives</h4>\n<p>We could maybe call <code>simplify</code> from the <code>is_mergeable_for_egraph</code> branch of <code>optimize_skeleton_inst</code>, or introduce a new ISLE term for simplifying idempotent instructions.</p>\n</blockquote>",
        "id": 338986555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677719659
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908#issuecomment-1451160815\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">issue #5908</a>:</p>\n<blockquote>\n<p>Strong +1 to this -- this is the right way to represent idempotent side-effects IMHO. (Doing it the simpler way was a matter of expediency on my part as I wanted to get the optimization we disabled back in, but I fully support reworking it.)</p>\n<p>Making side-effecting-but-idempotent ops part of the egraph has potential beyond arithmetic too, IMHO: the simplest case I can think of is actually just <code>trapnz vN</code> where we've rewritten <code>vN</code> to a constant 0. If a <code>trapnz</code> is really a <code>(force (trapnz vN))</code> and <code>(trapnz 0)</code> is rewritten to <code>0</code>, or <code>(nop)</code>, or something appropriately-typed, then we can elide traps lowered/legalized from other logic as well if it's safe to do so.</p>\n</blockquote>",
        "id": 338990096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677722472
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908#issuecomment-1451181939\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">issue #5908</a>:</p>\n<blockquote>\n<p>I suspect we want to optimize <code>trapnz</code> the same way we do for branches, whatever that turns out to be. I suspect that will be different than this <code>force</code> mechanism because I think <code>force</code> needs to take a <code>Value</code> operand, and traps/branches have no results.</p>\n<p>But definitely, I think it'll be important that we have some story for optimizing conditional traps too!</p>\n</blockquote>",
        "id": 338992258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677724248
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">issue #5908</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently have simplification rules in <code>opts/algebraic.isle</code> to rewrite <code>x/1</code> to <code>x</code>, and in <code>opts/cprop.isle</code> to constant-fold division when both operands are constant. But these rules can't fire, because <code>simplify</code> is only called on instructions which never have side effects, and division may trap if the divisor is 0.</p>\n<p>I'd like to be able to use simplification rules like these on trapping arithmetic.</p>\n<h4>Benefit</h4>\n<p>We could optimize away more instructions. There are comments in <code>algebraic.isle</code> suggesting more desired optimizations that we can't implement today either:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">TODO</span>: <span class=\"nc\">strength</span><span class=\"w\"> </span><span class=\"n\">reduction</span>: <span class=\"nc\">div</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">shifts</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">TODO</span>: <span class=\"nc\">div</span><span class=\"o\">/</span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">constants</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">magic</span><span class=\"w\"> </span><span class=\"n\">multiplications</span>\n</code></pre></div>\n<p>In addition to replacing expressions with simpler equivalents, we could sometimes remove them entirely if they're unused. We currently can't do that because if the instruction would trap then we need to ensure that trap occurs. But if we have a valid rewrite from a possibly-trapping instruction to an expression which can't trap, then it's actually safe to treat it as a pure instruction.</p>\n<p>I suspect this might be particularly valuable for <code>uadd_overflow_trap</code>, which is used in bounds checks for dynamic heaps in cranelift-wasm.</p>\n<h4>Implementation</h4>\n<p>One idea is in #5796, but that approach was not selected in #5800 because it \"is a little more complex than I would like\". I still like the idea of a <code>force</code> instruction to pull otherwise-pure instructions into the side-effecting skeleton, but it's possible some other approach is better.</p>\n<h4>Alternatives</h4>\n<p>We could maybe call <code>simplify</code> from the <code>is_mergeable_for_egraph</code> branch of <code>optimize_skeleton_inst</code>, or introduce a new ISLE term for simplifying idempotent instructions.</p>\n</blockquote>",
        "id": 338992324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677724322
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">issue #5908</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We currently have simplification rules in <code>opts/algebraic.isle</code> to rewrite <code>x/1</code> to <code>x</code>, and in <code>opts/cprop.isle</code> to constant-fold division when both operands are constant. But these rules can't fire, because <code>simplify</code> is only called on instructions which never have side effects, and division may trap if the divisor is 0.</p>\n<p>I'd like to be able to use simplification rules like these on trapping arithmetic.</p>\n<h4>Benefit</h4>\n<p>We could optimize away more instructions. There are comments in <code>algebraic.isle</code> suggesting more desired optimizations that we can't implement today either:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">TODO</span>: <span class=\"nc\">strength</span><span class=\"w\"> </span><span class=\"n\">reduction</span>: <span class=\"nc\">div</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">shifts</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">TODO</span>: <span class=\"nc\">div</span><span class=\"o\">/</span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">constants</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">magic</span><span class=\"w\"> </span><span class=\"n\">multiplications</span>\n</code></pre></div>\n<p>In addition to replacing expressions with simpler equivalents, we could sometimes remove them entirely if they're unused. We currently can't do that because if the instruction would trap then we need to ensure that trap occurs. But if we have a valid rewrite from a possibly-trapping instruction to an expression which can't trap, then it's actually safe to treat it as a pure instruction.</p>\n<p>I suspect this might be particularly valuable for <code>uadd_overflow_trap</code>, which is used in bounds checks for dynamic heaps in cranelift-wasm.</p>\n<h4>Implementation</h4>\n<p>One idea is in #5796, but that approach was not selected in #5800 because it \"is a little more complex than I would like\". I still like the idea of a <code>force</code> instruction to pull otherwise-pure instructions into the side-effecting skeleton, but it's possible some other approach is better.</p>\n<h4>Alternatives</h4>\n<p>We could maybe call <code>simplify</code> from the <code>is_mergeable_for_egraph</code> branch of <code>optimize_skeleton_inst</code>, or introduce a new ISLE term for simplifying idempotent instructions.</p>\n</blockquote>",
        "id": 338992328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677724323
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908#issuecomment-1485750878\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">issue #5908</a>:</p>\n<blockquote>\n<p>After discussion with @cfallin and @fitzgen today, I think this is our current plan:</p>\n<ul>\n<li>Call the <code>simplify</code> ISLE term for instructions which have idempotent side-effects, just like we do for pure instructions.</li>\n<li>If any of the equivalent values are produced by pure instructions, then we have some rewrite rule that proves that the side effects can't actually happen. Build the e-class using only the pure alternatives and don't add this instruction to the side-effecting skeleton.</li>\n<li>Otherwise, put all the side-effecting alternatives in an e-class and record that this e-class must be evaluated at this point in the side-effecting skeleton if it hasn't already been evaluated at a point which dominates this one.</li>\n</ul>\n<p>In earlier discussion we talked about introducing a <code>force</code> CLIF instruction as the way to connect the side-effecting skeleton to an e-class. But here's an alternative that I think we've agreed is reasonable:</p>\n<ul>\n<li>For each basic block, keep a list of side-effects. Each side effect is either an <code>Inst</code> or a <code>Value</code>. The last side effect will be the block's terminator <code>Inst</code>.</li>\n<li>Stop removing instructions from the <code>Layout</code> during equality saturation. Instead of tracking whether an instruction has side-effects by whether it's still in the layout, use the above explicit list.</li>\n<li>During equality saturation, add a side-effect to the list incrementally, after processing a side-effecting instruction.</li>\n<li>Between equality saturation and elaboration, clear all instructions out of the <code>Layout</code>.</li>\n<li>During elaboration, use the side-effect lists as the depth-first traversal roots, but otherwise treat the <code>Value</code> case as just like any other demanded value.</li>\n</ul>\n<p>Elaboration already duplicates a pure instruction if its existing placement doesn't dominate the new place where it's needed, which is exactly what we need for instructions with idempotent side effects too. Given that, GVN is safe for these instructions as well.</p>\n<p>Open question: what should happen if a <code>simplify</code> rule creates a side-effecting instruction somewhere other than at top-level of the right-hand side? I think that needs to be prohibited because we wouldn't know there were still side effects somewhere in the expression tree, so we'd treat it as pure. We can use the type system in the same way as #6080 to express this constraint statically.</p>\n</blockquote>",
        "id": 344952669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945567
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908#issuecomment-2381012476\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">issue #5908</a>:</p>\n<blockquote>\n<p>I'd love to get to this one day.</p>\n<p>My Wasm GC work is producing two patterns that require implementing trapping arithmetic:</p>\n<ul>\n<li><code>(uadd_overflow_trap (iconst a) (iconst b))</code> should turn into either an unconditional trap, or more likely, into <code>(iconst a+b)</code></li>\n<li><code>(uadd_overflow_trap (uextend a) (uextend b))</code> should turn into <code>(iadd a b)</code></li>\n</ul>\n<p>FWIW, these patterns <em>can</em> be matched and optimized during lowering, where we don't distinguish between side effectful vs non-side effectful lowerings. For example the Pulley backend optimizes the lowering of <code>(trap{z,nz} (iconst ...))</code>:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5c8cd228d8a7354fe69da361c6625533b296d5e2/cranelift/codegen/src/isa/pulley_shared/lower.isle#L98-L114\">https://github.com/bytecodealliance/wasmtime/blob/5c8cd228d8a7354fe69da361c6625533b296d5e2/cranelift/codegen/src/isa/pulley_shared/lower.isle#L98-L114</a></p>\n<p>However, we still can't insert block terminators early into the block (which should presumably truncate the rest of the block's lowering) so we can't turn <code>(trapz (const 0))</code> into <code>(trap)</code>, only <code>(trapz (iconst (non_zero ...)))</code> into the empty instruction sequence.</p>\n<p>Additionally, when performed at lowering time, these rules' results cannot feed into other rules to create cascading optimizations.</p>\n</blockquote>",
        "id": 473390603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727562728
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908#issuecomment-2381012476\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">issue #5908</a>:</p>\n<blockquote>\n<p>I'd love to get to this one day.</p>\n<p>My Wasm GC work is producing two patterns that require implementing the optimization of trapping arithmetic to get good code:</p>\n<ul>\n<li><code>(uadd_overflow_trap (iconst a) (iconst b))</code> should turn into either an unconditional trap, or more likely, into <code>(iconst a+b)</code></li>\n<li><code>(uadd_overflow_trap (uextend a) (uextend b))</code> should turn into <code>(iadd a b)</code></li>\n</ul>\n<p>FWIW, these patterns <em>can</em> be matched and optimized during lowering, where we don't distinguish between side effectful vs non-side effectful lowerings. For example the Pulley backend optimizes the lowering of <code>(trap{z,nz} (iconst ...))</code>:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5c8cd228d8a7354fe69da361c6625533b296d5e2/cranelift/codegen/src/isa/pulley_shared/lower.isle#L98-L114\">https://github.com/bytecodealliance/wasmtime/blob/5c8cd228d8a7354fe69da361c6625533b296d5e2/cranelift/codegen/src/isa/pulley_shared/lower.isle#L98-L114</a></p>\n<p>However, we still can't insert block terminators early into the block (which should presumably truncate the rest of the block's lowering) so we can't turn <code>(trapz (const 0))</code> into <code>(trap)</code>, only <code>(trapz (iconst (non_zero ...)))</code> into the empty instruction sequence.</p>\n<p>Additionally, when performed at lowering time, these rules' results cannot feed into other rules to create cascading optimizations.</p>\n</blockquote>",
        "id": 473390620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727562754
    }
]