[
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a>.</p>",
        "id": 204617472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595376329
    },
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204617473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595376329
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453079682\">PR Review</a>.</p>",
        "id": 204638982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595404766
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r458605237\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is because the <code>dst</code> operand in <code>xmm_rm_r</code> is the read-write operand, so we need to generate a move here, at the virtual register level. It doesn't necessarily materialize as a move instruction, because regalloc will try hard to coalesce the two virtual registers (and assign them the same physical register).</p>\n</blockquote>",
        "id": 204638983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595404766
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453079682\">PR Review</a>.</p>",
        "id": 204638984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595404766
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r458606132\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah, as Chris noted, we need a way to \"connect\" the input and output registers, so we need to generate a move instruction here; again, it won't necessarily materialize as a move instruction.</p>\n</blockquote>",
        "id": 204638986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595404766
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r458606386\">PR Review Comment</a>:</p>\n<blockquote>\n<p>pre-existing: can you use <code>Inst::gen_move</code> here, instead? (and fill in the right bits in <code>gen_move</code> to support vector instructions)?</p>\n</blockquote>",
        "id": 204638987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595404766
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r458605553\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I expect this to be incomplete, or a typo :-)</p>\n</blockquote>",
        "id": 204638988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595404766
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r458606821\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can we tweak this to add a check that the vector type is 128-bits wide?</p>\n</blockquote>",
        "id": 204638989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595404767
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453505753\">PR Review</a>.</p>",
        "id": 204692062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595436706
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r458939469\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yup, good catch <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>.</p>\n</blockquote>",
        "id": 204692064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595436706
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204720798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595450825
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204723337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595452122
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204736423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595461936
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453761189\">PR Review</a>.</p>",
        "id": 204736648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595462175
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459147982\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@cfallin I had to switch over to this version of <code>fneg</code> due to negating signed 0s (previously I had the \"subtract the value from 0.0 version\") but I believe that using this temporary register is causing this to fail again in the register allocator?</p>\n<p><code>thread '&lt;unnamed&gt;' panicked at 'register allocation: Analysis(EntryLiveinValues)', cranelift/codegen/src/machinst/compile.rs:73:9</code> </p>\n</blockquote>",
        "id": 204736650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595462175
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453761619\">PR Review</a>.</p>",
        "id": 204736707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595462259
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459148342\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I should have different paths for scalar and vector values here at some point but currently I am only running <code>simd_f32x4_arith.wast</code>.</p>\n</blockquote>",
        "id": 204736708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595462259
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453761923\">PR Review</a>.</p>",
        "id": 204736788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595462319
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459148614\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should there be a <code>gen_move</code> here as well (for <code>Opcode::Sqrt</code>)?</p>\n</blockquote>",
        "id": 204736789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595462319
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453766015\">PR Review</a>.</p>",
        "id": 204737653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595463111
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459152147\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We don't necessarily have to things this way--an alternate approach would be to have all of the different opcodes for packed shifts live separately under <code>SseOpcode</code>. I only did this to match what I saw for scalar shifts.</p>\n</blockquote>",
        "id": 204737654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595463111
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459152147\">PR Review Comment</a>.</p>",
        "id": 204739599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595464876
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453775568\">PR Review</a>.</p>",
        "id": 204739834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595465134
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459160799\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@cfallin proposed to add a <code>Inst::InputInvariant</code> (or perhaps <code>Input::InputClobber</code>) that would allow us to use <code>PXOR</code>, <code>CMPEQPS</code>, etc., to generate certain constants. That new <code>Inst</code> would have a single <code>Writable&lt;Reg&gt;</code> and it's <code>get_reg</code> would contain one def and no uses.</p>\n</blockquote>",
        "id": 204739835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595465134
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453842407\">PR Review</a>.</p>",
        "id": 204761778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595481852
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459220462\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@bnjbvr and I discussed this (the use of <code>PXOR r,r</code>, <code>CMPEQPS r,r</code> etc) to generate constants in registers, and the effect on the regalloc.  All that is needed to keep regalloc happy is for <code>get_regs</code> to spot such cases (where the two registers are the same) and report a single <code>def</code> for the register, instead of the usual <code>use+mod</code> pair.  No need for any <code>Inst::InputInvariant</code> or <code>Input::InputClobber</code> or any other form of hinting.</p>\n</blockquote>",
        "id": 204761779,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595481852
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453842764\">PR Review</a>.</p>",
        "id": 204761828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595481924
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459220781\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I agree with that; shifts are not magically different here, so they should just be part of <code>SseOpcode</code>.</p>\n</blockquote>",
        "id": 204761829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595481924
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-453870262\">PR Review</a>.</p>",
        "id": 204765074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595486830
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459244717\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, ignore my previous comment.  In fact vector shifts by immediates do need a separate <code>Inst</code> case because they have a different \"shape\" from normal XMM insns -- the read-only (<code>src</code>) operand is an immediate, not a RM.  Note that <code>RegMemImm</code> has no place in XMM-world as far as I know.  Hence I suggest the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>/// XMM shifts by immediates.\nXmmShiftByImm {\n   opcode: SseOpcode,\n   amount: u8,\n   dst: Writable&lt;Reg&gt;\n}\n</code></pre></div>\n\n\n<p>Then add the necessary extra entries to <code>SseOpcode</code>, and have the emit function panic for <code>Inst::XmmShiftByImm</code> if <code>opcode</code> is not one of the few acceptable values.</p>\n<p>Maybe this should even be called <code>XMM_I_R</code> (so as to be consistent with naming <code>XMM_RM_R</code>).  Then we could use it for any XMM insn which takes an immediate and a modifiable register.  I can't think of any except the abovementioned shifts though.</p>\n</blockquote>",
        "id": 204765075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595486830
    },
    {
        "content": "<p>julian-seward1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459244717\">PR Review Comment</a>.</p>",
        "id": 204766873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595488863
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454085513\">PR Review</a>.</p>",
        "id": 204790459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595507815
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459415685\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't think so, since sqrt doesn't have any read-write operand. Am i missing something?</p>\n</blockquote>",
        "id": 204790460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595507815
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454085938\">PR Review</a>.</p>",
        "id": 204790492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595507849
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459416010\">PR Review Comment</a>:</p>\n<blockquote>\n<p>+1 to @julian-seward1's suggestion to reuse the existing instructions for this purpose.</p>\n</blockquote>",
        "id": 204790494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595507849
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454087095\">PR Review</a>.</p>",
        "id": 204790681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595507947
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459416956\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Agreed here; the \"shape\" is equivalent to the <code>InstructionFormat</code> here, so it makes sense to add a new vcode inst.</p>\n<p>tiny nit re: naming, since we're moving to some more Rusty-like naming, I'd rather go for properly camelCased <code>XmmImmReg</code> here (there's going to be a PR to make the names more consistent soonish).</p>\n</blockquote>",
        "id": 204790682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595507947
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454113873\">PR Review</a>.</p>",
        "id": 204794432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595509797
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459436058\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I agree with @bnjbvr; the insn reads its input register and writes a different output register, but there's no <code>mod</code>-ify style behaviour.  Note that <code>get_regs</code> for <code>XMM_RegMem_Reg</code> will have to take this into account; that it, it will have to special-case <code>SseOpcode::Sqrtss</code> et al accordingly.</p>\n</blockquote>",
        "id": 204794433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595509797
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454123997\">PR Review</a>.</p>",
        "id": 204795877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595510521
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459444011\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@julian-seward1 Sqrtss uses a different Vcode inst because of this, since it's rather an \"unary\" opcode (see also <code>XmmUnaryRmR</code>).</p>\n</blockquote>",
        "id": 204795878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595510521
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454226391\">PR Review</a>.</p>",
        "id": 204809083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595516527
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459517516\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ok, makes sense.</p>\n</blockquote>",
        "id": 204809084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595516527
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454230850\">PR Review</a>.</p>",
        "id": 204809718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595516805
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459520841\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Note that RegMemImm has no place in XMM-world as far as I know</p>\n</blockquote>\n<p>I think in this case it does. Packed shifts accept either an <code>imm8</code> or a <code>xmm/m128</code> as operands. So there should be a new <code>Inst</code> like:</p>\n<div class=\"codehilite\"><pre><span></span><code>... {\n  opcode: SseOpcode,\n  src: RegMemImm,\n  dst: Writable&lt;Reg&gt;\n}\n</code></pre></div>\n\n\n<p>Right? But what do I call it?</p>\n</blockquote>",
        "id": 204809719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595516805
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454316786\">PR Review</a>.</p>",
        "id": 204822724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595522801
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459587213\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, ok.  So the src operand does have to be <code>RegMemImm</code>.</p>\n<p>As for a name, what it really wants to have is <code>Xmm_RegMemImm_Reg</code>.  But the Rust naming rules would require jamming all that together, <code>XmmRegMemImmReg</code>, which is ambiguous: the underscores give meaning.  @bnjbvr do you think this is one place where we might apply for an exemption to the normal rules?</p>\n</blockquote>",
        "id": 204822725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595522801
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454320269\">PR Review</a>.</p>",
        "id": 204823204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595523075
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459589948\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In Zulip @bnjbvr suggested <code>XmmRmiReg</code> which is shorter and avoids the ambiguity.</p>\n</blockquote>",
        "id": 204823205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595523075
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454360866\">PR Review</a>.</p>",
        "id": 204829396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595526344
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459621850\">PR Review Comment</a>:</p>\n<blockquote>\n<p>One concern I'd have in using the same instruction format for both e.g. <code>PXOR</code> and <code>PAND</code> (if that's a thing? let's say it exists as a straw-instruction if not), with the <code>get_regs</code> logic to special-case the same-register case, is that the input-invariant behavior really does depend on the opcode. So <code>PXOR r1, r1</code> zeroes <code>r1</code>, and doesn't use its initial value; but <code>PAND r1, r1</code> leaves <code>r1</code>'s final value equal to its initial value (so uses <code>r1</code>).</p>\n<p>Using a <code>mod</code> for the first reg would solve this issue (<code>PAND</code> would still be correct), but then doesn't give us the behavior we want for <code>PXOR</code>, because <code>r1</code> is still (incorrectly, or rather imprecisely) seen as an input, even though the instruction semantically does <code>r1 := 0</code> no matter what.</p>\n<p>So I think we either need variants of <code>Inst</code>, or else we need a flag inside of this variant, or else we need logic in <code>get_regs</code> to look at the opcode, to know the difference between ops where <code>a OP b = constant</code> and <code>a OP b = f(a, b)</code>. I'd prefer the first (it feels cleanest), but any is fine. Thoughts?</p>\n</blockquote>",
        "id": 204829397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595526344
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454387719\">PR Review</a>.</p>",
        "id": 204834566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595528582
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459643001\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(Actually, I'm warming up to the third option now; basically we want a helper <code>op_on_self_yields_constant</code> or somesuch, and call that in <code>get_regs</code>, which is just a match yielding a bool, which is simple enough.)</p>\n</blockquote>",
        "id": 204834567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595528582
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-454613643\">PR Review</a>.</p>",
        "id": 204875317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595560216
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r459832455\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For me, the simplest and most obvious solution is also the third.  In short we want <code>get_regs</code> to always tell us the exact truth, and if it requires looking at the opcode and/or operands, so be it.  To allow a situation where it doesn't tell us the exact truth strikes me as setting a dangerous precedent.</p>\n<p>I wouldn't even bother with a helper -- these cases are sufficiently rare to make that unnecessary.  I'd just write something like</p>\n<div class=\"codehilite\"><pre><span></span><code>if opcode == XOR &amp;&amp; src.isReg() &amp;&amp; src.Reg() == dst { // special case }\n</code></pre></div>\n\n\n<p>It's one extra line (more or less).</p>\n</blockquote>",
        "id": 204875318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595560216
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204956276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595618580
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204959603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595620645
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204963210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595622747
    },
    {
        "content": "<p><strong>abrown</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> as ready for review.</p>",
        "id": 204963246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595622787
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a>.</p>",
        "id": 204963250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595622789
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a>.</p>",
        "id": 204963252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595622790
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a>.</p>",
        "id": 204963260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595622797
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204963677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595623045
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-455192022\">PR Review</a>.</p>",
        "id": 204968965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595626160
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-455192022\">PR Review</a>.</p>",
        "id": 204968966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595626160
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460293705\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Given that this logic is duplicated, let's pull it out into a helper to ensure the two locations stay in sync.</p>\n</blockquote>",
        "id": 204968967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595626160
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460293433\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'd prefer to add a bit more detail here -- something like:</p>\n<p>\"In certain cases, instructions of this format can act as a definition of an XMM register, producing a value that is independent of its initial value. For example, a vector equality comparison (<code>cmppd</code> or <code>cmpps</code>) that compares a register to itself will generate all ones as a result, regardless of its value. From the register allocator's point of view, we should (i) record the first register, which is normally a mod, as a def instread; and (ii) not record the second register as a use, because it is the same as the first register (already handed).\"</p>\n<p>Maybe also \"Any opcode for which <code>a OP b = constant</code> is true can be included here; we may add more in the future, such as <code>XOR</code>.\"?</p>\n</blockquote>",
        "id": 204968968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595626160
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460294606\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We should be able to do something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>match (a_op_b_is_constant(op), src) {\n    (true, RegMem::Reg { reg }) if *reg == dst.to_reg() =&gt; { ... }\n    _ =&gt; { ... }\n</code></pre></div>\n\n\n<p>to combine the <code>if</code>s. (And probably ignore my half-baked name for the helper...)</p>\n</blockquote>",
        "id": 204968969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595626160
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-455199013\">PR Review</a>.</p>",
        "id": 204969625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595626673
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460299211\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, nice, let me try that...</p>\n</blockquote>",
        "id": 204969627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595626673
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-455850088\">PR Review</a>.</p>",
        "id": 205130978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-455850088\">PR Review</a>.</p>",
        "id": 205130979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460942376\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you please add a TODO comment about the fact that it might incur a cross-domain penalty for packed ints, and that we might want to specialize the move later?</p>\n</blockquote>",
        "id": 205130980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460946386\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah, it could be at an arbitrary offset. Do you mind implementing it in this PR, please?</p>\n</blockquote>",
        "id": 205130981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460942980\">PR Review Comment</a>:</p>\n<blockquote>\n<p>preexisting, but maybe we could remove <code>I128</code> and <code>B128</code> from this list, and have another match arm below with only the v128 test?</p>\n</blockquote>",
        "id": 205130982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460946588\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ditto here</p>\n</blockquote>",
        "id": 205130983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460954127\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: if no other instruction you've implemented in this PR uses this Vcode inst, how about inlining the value of <code>0x0fc2</code> where it's used, instead?</p>\n</blockquote>",
        "id": 205130984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460954516\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: can you add in comments an example of this instruction?</p>\n</blockquote>",
        "id": 205130985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460947251\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It's weird to have a commit that introduces this but don't use it directly; no need to worry, we'll just squash before merging.</p>\n</blockquote>",
        "id": 205130986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460953196\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Since we also use ucomiss/ucomisd for float comparisons, and those don't have the same set of encodable conditions, could you rename this? Good names are hard to distinguish between other float CCs and these. The main difference is that the cmpps family returns a boolean mask in the dst operand, so how about <code>CmpMaskPredicate</code>? (as opposed to the valid set of predicates that can be used in ucomiss as <code>CmpFlagsPredicate</code>, if there was the need for such an enum)</p>\n</blockquote>",
        "id": 205130987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460954759\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you add a call to <code>src.assert_reg_type_is</code> too, please? Can you also add asserts for valid immediates?</p>\n</blockquote>",
        "id": 205130988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460958927\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The way to go here would be to use the <code>OperandSize</code> (maybe add variants for lower sizes), and have it in the instruction, instead of having one SSE opcode per size. Since you need a new Inst anyways, how about doing this here?</p>\n</blockquote>",
        "id": 205130989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863295
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460963230\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Shouldn't this be cmpps or cmppd according to the input type? If not, it might be worth commenting why it's ok to do this here.</p>\n</blockquote>",
        "id": 205130990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863296
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460967448\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The shift amount should be 1 for andps and andpd, for this to work correctly.</p>\n</blockquote>",
        "id": 205130991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863296
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460961888\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: Can you use <code>FloatComparisonPredicate::from(FloatCC::Equal)</code> instead? it doesn't require the explicit type then, which is nice.</p>\n</blockquote>",
        "id": 205130992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863296
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460959866\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you add an assert on the src reg's type here too, please?</p>\n</blockquote>",
        "id": 205130993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863296
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460962429\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe put a panic with a message explaining which combination has been seen?</p>\n</blockquote>",
        "id": 205130994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863296
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460956302\">PR Review Comment</a>:</p>\n<blockquote>\n<p>light suggestion: we use <code>def</code> for <code>definition</code> / <code>define</code> in misc places in the code base, so for consistency, it'd be nice to use it here too.</p>\n</blockquote>",
        "id": 205130995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863296
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460965548\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: the above comment and this variable name hide the fact that it can be used for AND'ing and taking the absolute value too.</p>\n</blockquote>",
        "id": 205130996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863296
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460960615\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is the lowering missing for these operations?</p>\n</blockquote>",
        "id": 205130997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863296
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460961556\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, we shouldn't probably duplicate this comment everywhere, since it's the regular way to do things in x86; we may add a file doc-comment at some point explaining this, maybe. It's fine to keep this comment until then.</p>\n</blockquote>",
        "id": 205130998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595863296
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-456875233\">PR Review</a>.</p>",
        "id": 205268772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595958963
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r461767458\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hm, <code>match (..., src)</code> takes ownership and then I can't do <code>src.map_uses</code> later on.</p>\n</blockquote>",
        "id": 205268774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595958963
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-456984773\">PR Review</a>.</p>",
        "id": 205286187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595967946
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r461857033\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I had something like the <code>OperandSize</code> approach but based on someone's comments, I refactored it to this.</p>\n</blockquote>",
        "id": 205286188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595967946
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-456986487\">PR Review</a>.</p>",
        "id": 205286580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595968106
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r461858412\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Nope, see shifts.</p>\n</blockquote>",
        "id": 205286581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595968106
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-456989355\">PR Review</a>.</p>",
        "id": 205287180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595968370
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r461860682\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't think it matters since the result is all 1s either way and we don't cross domains.</p>\n</blockquote>",
        "id": 205287181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595968370
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-456996076\">PR Review</a>.</p>",
        "id": 205288381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595968962
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r461866057\">PR Review Comment</a>:</p>\n<blockquote>\n<p>They are used directly. I think what was happening is that some <code>*</code> use above was allowing things to work... which is more weird.</p>\n</blockquote>",
        "id": 205288382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595968962
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-456996599\">PR Review</a>.</p>",
        "id": 205288459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595969008
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r461866458\">PR Review Comment</a>:</p>\n<blockquote>\n<p>BTW, I purposely split these commits all up to atomic changes so we wouldn't have to squash.</p>\n</blockquote>",
        "id": 205288462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595969009
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205289717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595969706
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-457007179\">PR Review</a>.</p>",
        "id": 205290121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595969914
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r461874838\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is being done in #2071; we need to figure out a merge ordering for these two PRs.</p>\n</blockquote>",
        "id": 205290122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595969914
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-457048444\">PR Review</a>.</p>",
        "id": 205294015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595972411
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r461895859\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm open to a different name but it should probably have the <code>Float</code> in the name somewhere and I'm not too sure about <code>Mask</code>--it relates to the instruction semantics but not directly to the predicate so that is a bit confusing.</p>\n</blockquote>",
        "id": 205294019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595972411
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;register allocation: Analysis(EntryLiveinValues)&#39;, cranelift/codegen/src/machinst/compile.rs:73:9\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205299135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595975854
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"o\">&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;register</span><span class=\"w\"> </span><span class=\"n\">allocation</span>: <span class=\"nc\">Analysis</span><span class=\"p\">(</span><span class=\"n\">EntryLiveinValues</span><span class=\"p\">)</span><span class=\"err\">&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">73</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205414598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596057315
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"o\">&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;register</span><span class=\"w\"> </span><span class=\"n\">allocation</span>: <span class=\"nc\">Analysis</span><span class=\"p\">(</span><span class=\"n\">EntryLiveinValues</span><span class=\"p\">)</span><span class=\"err\">&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">73</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205414942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596057531
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a>.</p>",
        "id": 205415913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596058045
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"o\">&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;register</span><span class=\"w\"> </span><span class=\"n\">allocation</span>: <span class=\"nc\">Analysis</span><span class=\"p\">(</span><span class=\"n\">EntryLiveinValues</span><span class=\"p\">)</span><span class=\"err\">&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">73</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205496274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596124359
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"o\">&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;register</span><span class=\"w\"> </span><span class=\"n\">allocation</span>: <span class=\"nc\">Analysis</span><span class=\"p\">(</span><span class=\"n\">EntryLiveinValues</span><span class=\"p\">)</span><span class=\"err\">&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">73</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205503318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596127829
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-458652540\">PR Review</a>.</p>",
        "id": 205515324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596133945
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#pullrequestreview-458652540\">PR Review</a>.</p>",
        "id": 205515325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596133945
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r463189842\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe you can use <code>let src = input_to_reg(ctx, inputs[0]);</code> here instead, to ensure the input is always emitted in a register? (and put the current src and dst definitions under the then branch above).</p>\n</blockquote>",
        "id": 205515327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596133945
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r463191686\">PR Review Comment</a>:</p>\n<blockquote>\n<p>My convention has been to put <code>Seq</code> in the name for such synthetic instruction sequences, can you add the suffix too, please?</p>\n</blockquote>",
        "id": 205515328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596133945
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r463192535\">PR Review Comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n</blockquote>",
        "id": 205515329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596133945
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a> from <code>simd-fp-arith</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for f32x4 and f64x2 arithmetic in the x64 backend. </p>\n<p>Currently, I need some help troubleshooting the error returned by <code>cargo run --features experimental_x64 -- wast --enable-simd tests/spec_testsuite/proposals/simd/simd_f32x4_arith.wast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"o\">&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;register</span><span class=\"w\"> </span><span class=\"n\">allocation</span>: <span class=\"nc\">Analysis</span><span class=\"p\">(</span><span class=\"n\">EntryLiveinValues</span><span class=\"p\">)</span><span class=\"err\">&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">73</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 205521148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596136905
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060\">PR #2060</a>.</p>",
        "id": 205533682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596143774
    }
]