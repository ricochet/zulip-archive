[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058\">PR #2058</a> from <code>aarch64-fix-bool</code> to <code>main</code>:</p>\n<blockquote>\n<p>It seems that this is actually the correct behavior for bool types wider<br>\nthan <code>b1</code>; some of the vector instruction optimizations depend on bool<br>\nlanes representing false and true as all-zeroes and all-ones<br>\nrespectively. For <code>b8</code>..<code>b64</code>, this results in an extra negation after a<br>\n<code>cset</code> when a bool is produced by an <code>icmp</code>/<code>fcmp</code>, but the most common<br>\ncase (<code>b1</code>) is unaffected, because an all-ones one-bit value is just<br>\n<code>1</code>.</p>\n<p>An example of this assumption can be seen here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/399ee0a54c3be0f89ae07a0af5104ba929a9eba4/cranelift/codegen/src/simple_preopt.rs#L956\">https://github.com/bytecodealliance/wasmtime/blob/399ee0a54c3be0f89ae07a0af5104ba929a9eba4/cranelift/codegen/src/simple_preopt.rs#L956</a></p>\n<p>Thanks to Joey Gouly of ARM for noting this issue while implementing<br>\nSIMD support, and digging into the source (finding the above example) to<br>\ndetermine the correct behavior.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204603826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595366131
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058\">PR #2058</a>.</p>",
        "id": 204603827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595366131
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058\">PR #2058</a>.</p>",
        "id": 204603828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595366131
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058\">PR #2058</a> from <code>aarch64-fix-bool</code> to <code>main</code>:</p>\n<blockquote>\n<p>It seems that this is actually the correct behavior for bool types wider<br>\nthan <code>b1</code>; some of the vector instruction optimizations depend on bool<br>\nlanes representing false and true as all-zeroes and all-ones<br>\nrespectively. For <code>b8</code>..<code>b64</code>, this results in an extra negation after a<br>\n<code>cset</code> when a bool is produced by an <code>icmp</code>/<code>fcmp</code>, but the most common<br>\ncase (<code>b1</code>) is unaffected, because an all-ones one-bit value is just<br>\n<code>1</code>.</p>\n<p>An example of this assumption can be seen here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/399ee0a54c3be0f89ae07a0af5104ba929a9eba4/cranelift/codegen/src/simple_preopt.rs#L956\">https://github.com/bytecodealliance/wasmtime/blob/399ee0a54c3be0f89ae07a0af5104ba929a9eba4/cranelift/codegen/src/simple_preopt.rs#L956</a></p>\n<p>Thanks to Joey Gouly of ARM for noting this issue while implementing<br>\nSIMD support, and digging into the source (finding the above example) to<br>\ndetermine the correct behavior.</p>\n<p>This PR also makes an unrelated cleanup: it appears that we had two ways of saying<br>\n<code>cset</code>, namely <code>Inst::CSet</code> and <code>Inst::CondSet</code>. Probably an artifact of our<br>\nimplementation sprint with multiple people adding instructions at once. Removed<br>\n<code>Inst::CondSet</code> and settled on <code>Inst::CSet</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204603980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595366238
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#pullrequestreview-453103311\">PR Review</a>.</p>",
        "id": 204641192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595406652
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#pullrequestreview-453103311\">PR Review</a>.</p>",
        "id": 204641193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595406652
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#discussion_r458624151\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: for future proofness, maybe assert <code>to_bits == 32</code> here?</p>\n</blockquote>",
        "id": 204641194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595406652
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#discussion_r458624425\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This entire commit should go in the last branch below, if I understand correctly.</p>\n</blockquote>",
        "id": 204641195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595406652
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#discussion_r458625001\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is the AND actually necessary, that is, are B1 inputs only one bit in practice?</p>\n</blockquote>",
        "id": 204641196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595406652
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#discussion_r458625662\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: maybe use packed assignment and destructuring here: <code>let (imm_ty, alu_op) = if output_bits &gt; 32 { (I64, ALUOp::And64) } else ...</code></p>\n</blockquote>",
        "id": 204641197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595406652
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058\">PR #2058</a> from <code>aarch64-fix-bool</code> to <code>main</code>:</p>\n<blockquote>\n<p>It seems that this is actually the correct behavior for bool types wider<br>\nthan <code>b1</code>; some of the vector instruction optimizations depend on bool<br>\nlanes representing false and true as all-zeroes and all-ones<br>\nrespectively. For <code>b8</code>..<code>b64</code>, this results in an extra negation after a<br>\n<code>cset</code> when a bool is produced by an <code>icmp</code>/<code>fcmp</code>, but the most common<br>\ncase (<code>b1</code>) is unaffected, because an all-ones one-bit value is just<br>\n<code>1</code>.</p>\n<p>An example of this assumption can be seen here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/399ee0a54c3be0f89ae07a0af5104ba929a9eba4/cranelift/codegen/src/simple_preopt.rs#L956\">https://github.com/bytecodealliance/wasmtime/blob/399ee0a54c3be0f89ae07a0af5104ba929a9eba4/cranelift/codegen/src/simple_preopt.rs#L956</a></p>\n<p>Thanks to Joey Gouly of ARM for noting this issue while implementing<br>\nSIMD support, and digging into the source (finding the above example) to<br>\ndetermine the correct behavior.</p>\n<p>This PR also makes an unrelated cleanup: it appears that we had two ways of saying<br>\n<code>cset</code>, namely <code>Inst::CSet</code> and <code>Inst::CondSet</code>. Probably an artifact of our<br>\nimplementation sprint with multiple people adding instructions at once. Removed<br>\n<code>Inst::CondSet</code> and settled on <code>Inst::CSet</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204711724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595446268
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#pullrequestreview-453621836\">PR Review</a>.</p>",
        "id": 204711778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595446291
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#discussion_r459033168\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Clarified, thanks -- the first case is also semantically a sign extension, but generated specially; noted both cases in this comment.</p>\n</blockquote>",
        "id": 204711780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595446292
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#pullrequestreview-453622004\">PR Review</a>.</p>",
        "id": 204711811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595446307
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#discussion_r459033281\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done! (Could also be smaller than 32, so assert is <code>&lt;=</code>.)</p>\n</blockquote>",
        "id": 204711813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595446307
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#pullrequestreview-453628515\">PR Review</a>.</p>",
        "id": 204713006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595446891
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#discussion_r459038604\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Right now it's the case that every <code>b1</code> we generate is <code>0</code> or <code>1</code> up to the full width of the register, I think, but I'd prefer to make use of that in a followup, as it needs some careful thought and auditing of the other ops. I suppose we could say that bits 1..7 are always clear (so a <code>b1</code> is stored as a <code>0</code> or <code>1</code> in the lowest byte), then this would allow us to use the register-extending subtract format to do a zero-extend and negation at once; I'll think more about this. Thanks for bringing this up!</p>\n</blockquote>",
        "id": 204713007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595446891
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#pullrequestreview-453628791\">PR Review</a>.</p>",
        "id": 204713033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595446915
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058#discussion_r459038836\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 204713034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595446915
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2058\">PR #2058</a>.</p>",
        "id": 204717149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595448974
    }
]