[
    {
        "content": "<p>proohit labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>smartcore_wasi_lib.wasm - <a href=\"https://easyupload.io/7l8u6z\">https://easyupload.io/7l8u6z</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/6465558/test1.txt\">test1.txt</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Just run the wasm file in the same folder as <code>test1.txt</code>.</p>\n<h3>Expected Results</h3>\n<p>A new file inside <code>./</code> with the name <code>test2.txt</code> and the same contents as <code>test1.txt</code>.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"o\">=</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">smartcore_wasi_lib</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">load_model</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">opening</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">opened</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"n\">through</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"s\">\"test1.txt\"</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">opened</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.26.0</p>\n<p>Operating system: Ubuntu 20.04</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>This is the example for WASI from <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md\">https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md</a></p>\n<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"n\">Read</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">input_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">input_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">input_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening input {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"read error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">output_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening output {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">contents</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"write error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">load_model</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"usage: {} &lt;input_file&gt; &lt;output_file&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And compiled via <code>cargo build --target=wasm32-wasi --release</code></p>\n</blockquote>",
        "id": 238453215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620816055
    },
    {
        "content": "<p>proohit opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>smartcore_wasi_lib.wasm - <a href=\"https://easyupload.io/7l8u6z\">https://easyupload.io/7l8u6z</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/6465558/test1.txt\">test1.txt</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Just run the wasm file in the same folder as <code>test1.txt</code>.</p>\n<h3>Expected Results</h3>\n<p>A new file inside <code>./</code> with the name <code>test2.txt</code> and the same contents as <code>test1.txt</code>.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"o\">=</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">smartcore_wasi_lib</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">load_model</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">opening</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">opened</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"n\">through</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"s\">\"test1.txt\"</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">opened</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.26.0</p>\n<p>Operating system: Ubuntu 20.04</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>This is the example for WASI from <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md\">https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md</a></p>\n<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"n\">Read</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">input_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">input_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">input_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening input {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"read error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">output_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening output {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">contents</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"write error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">load_model</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"usage: {} &lt;input_file&gt; &lt;output_file&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And compiled via <code>cargo build --target=wasm32-wasi --release</code></p>\n</blockquote>",
        "id": 238453216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620816055
    },
    {
        "content": "<p>proohit edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>smartcore_wasi_lib.wasm - <a href=\"https://easyupload.io/7l8u6z\">https://easyupload.io/7l8u6z</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/6465558/test1.txt\">test1.txt</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Just run the wasm file in the same folder as <code>test1.txt</code>.<br>\n<code>wasmtime run --dir=. smartcore_wasi_lib.wasm --invoke load_model test1.txt test2.txt</code></p>\n<h3>Expected Results</h3>\n<p>A new file inside <code>./</code> with the name <code>test2.txt</code> and the same contents as <code>test1.txt</code>.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"o\">=</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">smartcore_wasi_lib</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">load_model</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">opening</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">opened</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"n\">through</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"s\">\"test1.txt\"</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">opened</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.26.0</p>\n<p>Operating system: Ubuntu 20.04</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>This is the example for WASI from <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md\">https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md</a></p>\n<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"n\">Read</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">input_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">input_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">input_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening input {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"read error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">output_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening output {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">contents</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"write error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">load_model</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"usage: {} &lt;input_file&gt; &lt;output_file&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And compiled via <code>cargo build --target=wasm32-wasi --release</code></p>\n</blockquote>",
        "id": 238453453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620816215
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902#issuecomment-839671657\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<p>Does it work if you specify <code>./test1.txt</code> and <code>./test2.txt</code>?</p>\n</blockquote>",
        "id": 238453694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620816368
    },
    {
        "content": "<p>proohit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902#issuecomment-839693579\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<p>Unfortunately not.. Same error:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"o\">=</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">smartcore_wasi_lib</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">load_model</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test2</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">opening</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">opened</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"n\">through</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"s\">\"./test1.txt\"</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">opened</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 238457558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620818636
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902#issuecomment-839714102\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<p>Oh, I think I now what is going on. By using <code>load_model</code> as entry point, you are skipping wasi-libc's entry point which initializes libpreopen. As it isn't initialized, libpreopen doesn't know how to open files.</p>\n</blockquote>",
        "id": 238461762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620820868
    },
    {
        "content": "<p>proohit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902#issuecomment-839725453\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<p>Hmm, this project was meant for another use-case, where it is used as a lib. I was hoping to quickly test it with wasmtime. Is this on purpose that invoked functions skip other necessary entry points?</p>\n</blockquote>",
        "id": 238463901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620822025
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902#issuecomment-839765595\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<p>Wasi has two execution models:</p>\n<ul>\n<li>command: This is like an executable. There is a single entry point and after the entry point returns you must discard the whole instance. This entry point is the <code>_start</code> function declared in wasi-libc which in turn calls the user <code>main</code>.</li>\n<li>reactor: This is like a library. There is first a call to <code>_initialize</code> declared in wasi-libc. After that it is possible to call any user defined function.</li>\n</ul>\n<p>To compile a reactor with rustc you need to use the unstable <code>-Z wasi-exec-model=reactor</code> flag. I am not sure if wasmtime cli supports reactors, but the api does, though it may be necessary to manually call <code>_initialize</code>. (not sure if wasmtime already automatically does this for your)</p>\n<p><a href=\"https://github.com/WebAssembly/WASI/issues/13\">https://github.com/WebAssembly/WASI/issues/13</a></p>\n<p><a href=\"https://github.com/rust-lang/rust/pull/79997\">https://github.com/rust-lang/rust/pull/79997</a></p>\n</blockquote>",
        "id": 238471523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620825487
    },
    {
        "content": "<p>proohit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902#issuecomment-839851434\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<p>Thanks for your valuable input! That was new to me and actually solved the problem!</p>\n<p>Compiling the project with <code>cargo rustc --release --target wasm32-wasi -- -Z wasi-exec-model=reactor</code> did the trick. Now <code>wasmtime run --dir=. smartcore_wasi_lib.wasm --invoke load_model test1.txt test2.txt</code> results in <code>test2.txt</code>.</p>\n</blockquote>",
        "id": 238490069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620832180
    },
    {
        "content": "<p>proohit closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>smartcore_wasi_lib.wasm - <a href=\"https://easyupload.io/7l8u6z\">https://easyupload.io/7l8u6z</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/6465558/test1.txt\">test1.txt</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Just run the wasm file in the same folder as <code>test1.txt</code>.<br>\n<code>wasmtime run --dir=. smartcore_wasi_lib.wasm --invoke load_model test1.txt test2.txt</code></p>\n<h3>Expected Results</h3>\n<p>A new file inside <code>./</code> with the name <code>test2.txt</code> and the same contents as <code>test1.txt</code>.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"o\">=</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">smartcore_wasi_lib</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">load_model</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">opening</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">txt</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">opened</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"n\">through</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"s\">\"test1.txt\"</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">opened</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.26.0</p>\n<p>Operating system: Ubuntu 20.04</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>This is the example for WASI from <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md\">https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md</a></p>\n<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"n\">Read</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">input_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">input_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">input_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening input {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"read error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">output_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening output {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">contents</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"write error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">load_model</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"usage: {} &lt;input_file&gt; &lt;output_file&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And compiled via <code>cargo build --target=wasm32-wasi --release</code></p>\n</blockquote>",
        "id": 238490070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620832180
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902#issuecomment-2364555680\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<p>I'm also getting a very similar error. I'm building a very simple Rust WASI binary <em>not</em> in reactor mode, that tries to opens a file.</p>\n<p>I start it in command mode via Node - see code below.</p>\n<p>I get the same <code>failed to find a pre-opened file descriptor</code> error, but I don't want to switch to \"reactor\" (why didn't they call this \"library\"?) mode. I don't understand why this still happens though because surely I am using the <code>_start</code> entry point which should initialise this <code>libpreload</code> library?</p>\n<p>(Sorry to slightly hijack this issue, but there's not much on the internet about this.)</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"s\">\"node:wasi\"</span><span class=\"p\">;</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">readFile</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"s\">\"node:fs/promises\"</span><span class=\"p\">;</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">join</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"s\">\"node:path\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">readFile</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">__dirname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"server.wasm\"</span><span class=\"p\">)),</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">env</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">RUST_BACKTRACE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"c1\">// This option is mandatory.</span>\n<span class=\"w\">        </span><span class=\"n\">version</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"preview1\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">WebAssembly</span><span class=\"p\">.</span><span class=\"n\">Imports</span><span class=\"o\">&gt;</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">getImportObject</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">main</span><span class=\"p\">();</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 471825893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726863421
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902#issuecomment-2364560054\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<p>Oh wait... you just need to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">env</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">RUST_BACKTRACE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"c1\">// This option is mandatory.</span>\n<span class=\"w\">        </span><span class=\"n\">version</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"preview1\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">preopens</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"/\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n</code></pre></div>\n<p>Sorry for the noise!</p>\n</blockquote>",
        "id": 471826530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726863638
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902#issuecomment-2364579976\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2902\">issue #2902</a>:</p>\n<blockquote>\n<p>For Windows you need this nonsense:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"s\">\"/\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"s\">\"a:/\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"a:/\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"s\">\"b:/\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"b:/\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"s\">\"c:/\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"c:/\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"s\">\"d:/\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"d:/\"</span><span class=\"p\">,</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>(Or I guess narrow it down to a specific directory if your application allows that.)</p>\n</blockquote>",
        "id": 471828899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726864511
    }
]