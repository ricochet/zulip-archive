[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4495\">PR #4495</a> from <code>table-ops-zeros</code> to <code>main</code>:</p>\n<blockquote>\n<p>I noticed that <code>TableOp::insert</code> had assertions that <code>num_params</code> and<br>\n<code>table_size</code> were greater than 0, but no assert for <code>num_globals</code>. These<br>\nasserts couldn't be hit because the <code>*_RANGE</code> constants were all set to<br>\na minimum of 1.</p>\n<p>But the only reason I can see to prohibit 0-sized tables, locals, or<br>\nglobals, was because indexes into those spaces were generated with the<br>\n<code>%</code> operator. Allowing 0-sized spaces requires not generating the<br>\ncorresponding instructions at all when there are no valid indexes.</p>\n<p>So I pushed the final selection of which table/local/global to access<br>\nearlier, to the moment when we're picking which TableOps to run. Then,<br>\ninstead of generating a random u8 or u32 and taking the remainder to get<br>\nit into the right range, I can just ask <code>arbitrary</code> to generate a number<br>\nin the right range to begin with.</p>\n<p>So this now explores some size-0 corners that it didn't before, and it<br>\ndoesn't require reasoning about whether remainder can divide by zero.<br>\nAlso I think it uses fewer bits of the <code>Unstructured</code> input to produce<br>\nthe same cases, and I hope that lets libFuzzer more quickly find bits it<br>\ncan mutate to get to novel coverage paths.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 290309460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658356997
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4495\">PR #4495</a>.</p>",
        "id": 290309461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658356997
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4495#pullrequestreview-1046878730\">PR review</a>.</p>",
        "id": 290405165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658423327
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4495\">PR #4495</a> from <code>table-ops-zeros</code> to <code>main</code>.</p>",
        "id": 290408749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658425088
    },
    {
        "content": "<p>jameysharp has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4495\">PR #4495</a>.</p>",
        "id": 290408825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658425156
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4495\">PR #4495</a>.</p>",
        "id": 290414479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658427925
    }
]