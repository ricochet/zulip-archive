[
    {
        "content": "<p>theothergraham opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<h4>C/C++ API Epoch Deadline Callback</h4>\n<p>The Rust API provides <code>pub fn epoch_deadline_callback()</code> to add callback for the store to invoke when its epoch deadline has been exceeded, allowing the provided function to decide if the WebAssembly function should be interrupted or have its epoch deadline extended. This improvement proposes to make this functionality available in the C and C++ APIs. This is related to #3111 which proposes similar functionality for fuel exhaustion.</p>\n<h4>Benefit</h4>\n<p>This makes existing Rust API functionality available when embedding Wasmtime in C/C++.</p>\n<h4>Implementation</h4>\n<p>The below patch applies to v8.0.0. It wraps the existing Rust function with a C function that takes a C callback and void pointer, which it places in a closure. It surrounds the invocation of the callback with saving and restoring the Wasmtime runtime's TLS state, in case the function does any context switching.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">vagrant</span><span class=\"o\">@</span><span class=\"n\">vagrant</span>:<span class=\"o\">~/</span><span class=\"n\">edge</span><span class=\"o\">-</span><span class=\"n\">functions</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">diff</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">lock</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">9811</span><span class=\"n\">cb8cb</span><span class=\"o\">..</span><span class=\"mi\">29</span><span class=\"n\">f22396b</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">lock</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">lock</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">3748</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">3748</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">dependencies</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">  </span><span class=\"s\">\"wasi-common\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s\">\"wasmtime\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s\">\"wasmtime-c-api-macros\"</span><span class=\"p\">,</span>\n\n<span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">\"wasmtime-runtime\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s\">\"wasmtime-wasi\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s\">\"wat\"</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">a464c0dbd</span><span class=\"o\">..</span><span class=\"n\">ed860e804</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">env_logger</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">once_cell</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">'</span><span class=\"na\">cranelift</span><span class=\"o\">'</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"o\">+</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">-</span><span class=\"n\">macros</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"macros\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">Optional</span><span class=\"w\"> </span><span class=\"n\">dependency</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wat2wasm</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">API</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">h</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">ba1d74a94</span><span class=\"o\">..</span><span class=\"mi\">4127989</span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">h</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">h</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">206</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">206</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">WASM_API_EXTERN</span><span class=\"w\"> </span><span class=\"n\">wasmtime_error_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasmtime_context_set_wasi</span><span class=\"p\">(</span><span class=\"n\">wasmtime_context_t</span><span class=\"w\"> </span><span class=\"o\">*</span>\n\n<span class=\"w\"> </span><span class=\"sd\">/**</span>\n\n<span class=\"sd\">  * \\brief Configures the relative deadline at which point WebAssembly code will</span>\n<span class=\"sd\">- * trap.</span>\n<span class=\"sd\">+ * trap or invoke the callback function.</span>\n<span class=\"sd\">  *</span>\n\n<span class=\"sd\">  * This function configures the store-local epoch deadline after which point</span>\n<span class=\"sd\">- * WebAssembly code will trap.</span>\n<span class=\"sd\">+ * WebAssembly code will trap or invoke the callback function.</span>\n<span class=\"sd\">  *</span>\n\n<span class=\"sd\">- * See also #wasmtime_config_epoch_interruption_set.</span>\n<span class=\"sd\">+ * See also #wasmtime_config_epoch_interruption_set and</span>\n<span class=\"sd\">+ * #wasmtime_store_epoch_deadline_callback.</span>\n<span class=\"sd\">  */</span>\n<span class=\"w\"> </span><span class=\"n\">WASM_API_EXTERN</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">wasmtime_context_set_epoch_deadline</span><span class=\"p\">(</span><span class=\"n\">wasmtime_context_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">uint64_t</span><span class=\"w\"> </span><span class=\"n\">ticks_beyond_current</span><span class=\"p\">);</span>\n\n<span class=\"o\">+</span><span class=\"sd\">/**</span>\n\n<span class=\"sd\">+ * \\brief Configures epoch deadline callback to C function.</span>\n<span class=\"sd\">+ *</span>\n<span class=\"sd\">+ * This function configures a store-local callback function that will be</span>\n<span class=\"sd\">+ * called when the running WebAssembly function has exceeded its epoch</span>\n<span class=\"sd\">+ * deadline. That function can return a 0 to raise a trap, or a greater</span>\n<span class=\"sd\">+ * value to add to the current epoch and resume execution of the function.</span>\n<span class=\"sd\">+ *</span>\n<span class=\"sd\">+ * See also #wasmtime_config_epoch_interruption_set and</span>\n<span class=\"sd\">+ * #wasmtime_context_set_epoch_deadline.</span>\n<span class=\"sd\">+ */</span>\n<span class=\"o\">+</span><span class=\"n\">WASM_API_EXTERN</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">wasmtime_store_epoch_deadline_callback</span><span class=\"p\">(</span><span class=\"n\">wasmtime_store_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">uint64_t</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">func</span><span class=\"p\">)(</span><span class=\"n\">void</span><span class=\"o\">*</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"o\">+</span>\n<span class=\"w\"> </span>#<span class=\"n\">ifdef</span><span class=\"w\"> </span><span class=\"n\">__cplusplus</span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">  </span><span class=\"c1\">// extern \"C\"</span>\n<span class=\"w\"> </span>#<span class=\"n\">endif</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">3949</span><span class=\"n\">d46b0</span><span class=\"o\">..</span><span class=\"n\">ba8105caf</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">c_void</span><span class=\"p\">;</span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">Arc</span><span class=\"p\">;</span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">AsContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreContextMut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreLimits</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreLimitsBuilder</span><span class=\"p\">,</span>\n\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"n\">Val</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">Trap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\"> </span><span class=\"sd\">/// This representation of a `Store` is used to implement the `wasm.h` API.</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">106</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">106</span><span class=\"p\">,</span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_store_new</span><span class=\"p\">(</span>\n<span class=\"w\">     </span><span class=\"p\">})</span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"o\">+</span><span class=\"c1\">// Internal structure to add Send/Sync to the c_void member.</span>\n<span class=\"o\">+</span><span class=\"cp\">#[derive(Debug)]</span>\n<span class=\"o\">+</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"p\">}</span>\n<span class=\"o\">+</span>\n<span class=\"o\">+</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">as_mut_ptr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptr</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"o\">+</span><span class=\"p\">}</span>\n<span class=\"o\">+</span>\n<span class=\"o\">+</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"o\">+</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"o\">+</span>\n<span class=\"o\">+</span><span class=\"c1\">// Accepts a C function pointer and opaque data pointer to invoke it with.</span>\n<span class=\"o\">+</span><span class=\"c1\">// Wraps those so we can invoke the C callback via the Rust callback, and</span>\n<span class=\"o\">+</span><span class=\"c1\">// surrounds the invocation with calls to save and restore the TLS state</span>\n<span class=\"o\">+</span><span class=\"c1\">// in case the function is doing context switching.</span>\n<span class=\"o\">+</span><span class=\"cp\">#[no_mangle]</span>\n<span class=\"o\">+</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_store_epoch_deadline_callback</span><span class=\"p\">(</span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_store_t</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">func</span>: <span class=\"nc\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sendable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"nc\">data</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">epoch_deadline_callback</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_tls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">TlsRestore</span>::<span class=\"n\">take</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)(</span><span class=\"n\">sendable</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">my_tls</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">Interrupt</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"o\">+</span><span class=\"p\">}</span>\n<span class=\"o\">+</span>\n<span class=\"w\"> </span><span class=\"cp\">#[no_mangle]</span>\n<span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_store_context</span><span class=\"p\">(</span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_store_t</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">CStoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">()</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>I am a relative amateur with both Rust and Wasmtime, so there may be better ways or places to implement this, but this is the cleanest/smallest I could come up with.<br>\n</p>\n</blockquote>",
        "id": 352343730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682358088
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1520626895\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>This seems like a good idea to me!</p>\n<p>I'd want @alexcrichton to take a look at the implementation details. Among the things I'm uncertain about:</p>\n<ul>\n<li>It looks to me like this would be the first callback exposed from the C API. I'm guessing there are going to be subtleties there.</li>\n<li>Should an epoch callback be able to return 0? This implementation prohibits that, using zero instead to signal that the guest should trap.</li>\n</ul>\n</blockquote>",
        "id": 352351795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682360367
    },
    {
        "content": "<p>theothergraham <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1520724481\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>I had the same question about returning zero. After playing with it a little, I found that returning 0 is acceptable, but as far as I can tell, not necessarily useful: It will set the new deadline to the current epoch, meaning that the function will immediately trigger the callback again.</p>\n<p>If there is some useful case for accepting 0, we can modify the C interface to return a trap/update indicator and accept a pointer to a mutable delta value for the update case.</p>\n</blockquote>",
        "id": 352366131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682365150
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1520730664\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>Agreed this is a good idea! Some thoughts I would have are:</p>\n<ul>\n<li>The callback paramter can, and probably should, take a <code>wasmtime_context_t *ctx</code> parameter (sourced from the closure argument provided to the callback)</li>\n<li>As for this being a callback, I also paused for a bit at this but <code>wasmtime_func_new</code> is another major way of creating callbacks so I don't think there's much more new to handle here.</li>\n<li>This frobs the TLS business, but I don't think that should be done here. It's not done around host functions, for example. It's only required if the whole store moves to a different thread but I'd prefer to not open that can of worms here (unless needed).</li>\n<li>Ideally I think the C API would mirror the Rust API, perhaps taking an out-param for the <code>u64</code> return and returning an error as the actual return value. There's currently no way to programmatically create errors in the C API, though, but that also wouldn't be too hard to add. Mirroring Rust would also remove the need for reinterpreting 0 or assigning special meaning to it.</li>\n</ul>\n</blockquote>",
        "id": 352366987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682365476
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1520787459\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>Given Alex's positive feedback, I'm looking forward to seeing a pull request for this. If you need any help following Alex's suggestions, let us know! Feel free to ask questions in this issue, or over at <a href=\"https://bytecodealliance.zulipchat.com/\">https://bytecodealliance.zulipchat.com/</a> if you prefer.</p>\n</blockquote>",
        "id": 352373899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682368241
    },
    {
        "content": "<p>theothergraham <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1520829279\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>Thank you both for the fast feedback. I am working on implementing some of the changes and will get a pull request created so we can iterate on it further there.</p>\n<p>As for the TLS business, I had a feeling that this is not the right place to do it, but I do need it. Like in #3111, I have an existing single-threaded event-based server that I need to incorporate running of multiple concurrent Wasmtime functions, and prevent any one of them from blocking the thread for extended periods of time. What I have presented in the above patch works, but perhaps we should expose <code>TlsRestore</code> in the C API so it can be explicitly used when it is needed.</p>\n</blockquote>",
        "id": 352379672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682370503
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1520862558\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>Ah ok, yes for something like that the need for TLS frobbing does indeed arise. Some questions for you though:</p>\n<ul>\n<li>If your server is single-threaded, why does TLS need to be saved/restored? Presumably it's not actually single-threaded, so how are wasm instances being migrated around?</li>\n<li>What do you do for host functions today? Do host functions never force a context switch or change of threads?</li>\n<li>Are you allocating stacks? If so, how?</li>\n</ul>\n<p>We've been hesitant to export details of TLS business as it's not easy to get right. Even the Rust API doesn't support this (the <code>wasmtime</code> crate is the \"official\" API, what you've used here is an internal-only API which theoretically only the <code>wasmtime</code> crate should use). Wasmtime is built to enable this sort of cooperative switching since that's what it does for the <code>async</code> support in Rust, but not really any thought has been given of how to expose this to the C API. Ideally supporting suspending/etc in the C API would be done in a \"first class\" way than as a one-off feature of this API if we can, but I realize it's a bit of an ask too.</p>\n</blockquote>",
        "id": 352383636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682372291
    },
    {
        "content": "<p>theothergraham <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1521852078\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<blockquote>\n<p>If your server is single-threaded, why does TLS need to be saved/restored? Presumably it's not actually single-threaded, so how are wasm instances being migrated around?</p>\n</blockquote>\n<p>It really is single threaded, aside from a separate thread to periodically increment the epoch. Wasm instances are not being moved from thread to thread, they are being time-sliced using <code>getcontext()</code>/<code>makecontext()</code>/<code>swapcontext()</code> during the epoch deadline callback.</p>\n<blockquote>\n<p>What do you do for host functions today? Do host functions never force a context switch or change of threads?</p>\n</blockquote>\n<p>I plan to do context switching in host calls as well, as they may kick off asynchronous jobs that will need to complete (or time out) before continuing the wasm function. Today, however, I do not have this implemented.</p>\n<blockquote>\n<p>Are you allocating stacks? If so, how?</p>\n</blockquote>\n<p>Yes, using <code>malloc()</code> and placing in <code>ucontext_t.uc_stack.ss_sp</code>.</p>\n<p>I am not familiar enough with the internals of <code>TlsRestore</code>/<code>CallThreadState</code>/<code>VMRuntimeLimits</code> to speak intelligently to why it is necessary to save and restore as I switch user-space contexts on the same thread, though it makes sense to me that it would be necessary given that async Wasmtime does it when switching contexts. I can say that without doing so, I experienced a number of crashes, stack smashing, and exiting wasm function execution on the wrong stack. Putting in the <code>take()</code> and <code>replace()</code> calls immediately cleared that up.</p>\n</blockquote>",
        "id": 352547637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682431550
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1521948959\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>Ah sorry I forget now what I was thinking, but yes even without multiple threads you still need to swap the TLS state since that's expected to be continuous per-wasm invocation. In any case definitely makes sense that this TLS swapping is required for your use case, even with one thread, and why it would remove crashes.</p>\n<p>Hm ok though if it's desired to go down the route of \"this is officially supported\" then I think there's two things we could do in the C API:</p>\n<ul>\n<li>\n<p>One is what you've done here, \"just swap the TLS\" and force embedders to take care of stack allocation, stack switching, etc. This is flexible, but it requires a lot of embedding work to get this working. For example your stacks if allocated with <code>malloc</code> don't have guard pages. Additionally the size of the stack isn't guaranteed to correspond with the stack size for wasm, so misconfiguration there may be possible.</p>\n</li>\n<li>\n<p>An alternative, however, is to take a more \"futures\" style approach that Rust uses. This would have stack switching and stack allocation all handled by Wasmtime itself (using the existing support). The complexity with this is that host functions would now have to have an interface for returning something along the lines of \"please suspend me and resume later\". This would look more-or-less like a coroutine.</p>\n</li>\n</ul>\n<p>While I realize the first is simpler and easier to implement, I would personally lean towards the second being the \"official\" way to support this. That meshes better I think with Wasmtime's existing support for async and stack switching, and I'd prefer to keep details like the TLS internal to Wasmtime if we can to avoid exposing too many implementation details.</p>\n</blockquote>",
        "id": 352563528,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682434933
    },
    {
        "content": "<p>theothergraham <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1523990181\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>Your point about my stacks not having guard pages is well taken. For my proof-of-concept that is fine, but assuming that I continue down this path, I will plan to add guard pages and tests to validate that they do their job.</p>\n<p>As for the officially supported implementation, I'd rather take the \"futures\" style approach, but I have relatively little time to work on it, and my newness to Rust continues to make everything take much, much longer than I envision. So for now, I could submit a pull request for just adding a C callback for the epoch deadline, leaving out any stack switching. Obviously it will not fulfill everything I need for my use case, but stack switching should probably be its own issue/PR anyway. Does that sound good?</p>\n</blockquote>",
        "id": 352938372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682540026
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1525761994\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>Sounds reasonable to me! I can try to take a stab at a future-style API in the C API in the future perhaps too</p>\n</blockquote>",
        "id": 353313125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682604367
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277#issuecomment-1725697119\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<p>I'm not sure if this issue is \"fixed\" after #6359 but related is my comment here: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1725689782\">https://github.com/bytecodealliance/wasmtime/issues/3111#issuecomment-1725689782</a></p>\n</blockquote>",
        "id": 391922442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695133007
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6277\">issue #6277</a>:</p>\n<blockquote>\n<h4>C/C++ API Epoch Deadline Callback</h4>\n<p>The Rust API provides <code>pub fn epoch_deadline_callback()</code> to add callback for the store to invoke when its epoch deadline has been exceeded, allowing the provided function to decide if the WebAssembly function should be interrupted or have its epoch deadline extended. This improvement proposes to make this functionality available in the C and C++ APIs. This is related to #3111 which proposes similar functionality for fuel exhaustion.</p>\n<h4>Benefit</h4>\n<p>This makes existing Rust API functionality available when embedding Wasmtime in C/C++.</p>\n<h4>Implementation</h4>\n<p>The below patch applies to v8.0.0. It wraps the existing Rust function with a C function that takes a C callback and void pointer, which it places in a closure. It surrounds the invocation of the callback with saving and restoring the Wasmtime runtime's TLS state, in case the function does any context switching.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">vagrant</span><span class=\"o\">@</span><span class=\"n\">vagrant</span>:<span class=\"o\">~/</span><span class=\"n\">edge</span><span class=\"o\">-</span><span class=\"n\">functions</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">diff</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">lock</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">9811</span><span class=\"n\">cb8cb</span><span class=\"o\">..</span><span class=\"mi\">29</span><span class=\"n\">f22396b</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">lock</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">lock</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">3748</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">3748</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">dependencies</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">  </span><span class=\"s\">\"wasi-common\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s\">\"wasmtime\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s\">\"wasmtime-c-api-macros\"</span><span class=\"p\">,</span>\n\n<span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">\"wasmtime-runtime\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s\">\"wasmtime-wasi\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s\">\"wat\"</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">a464c0dbd</span><span class=\"o\">..</span><span class=\"n\">ed860e804</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">env_logger</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">once_cell</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">'</span><span class=\"na\">cranelift</span><span class=\"o\">'</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"o\">+</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">-</span><span class=\"n\">macros</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"macros\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">Optional</span><span class=\"w\"> </span><span class=\"n\">dependency</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wat2wasm</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">API</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">h</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">ba1d74a94</span><span class=\"o\">..</span><span class=\"mi\">4127989</span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">h</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">h</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">206</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">206</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">WASM_API_EXTERN</span><span class=\"w\"> </span><span class=\"n\">wasmtime_error_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasmtime_context_set_wasi</span><span class=\"p\">(</span><span class=\"n\">wasmtime_context_t</span><span class=\"w\"> </span><span class=\"o\">*</span>\n\n<span class=\"w\"> </span><span class=\"sd\">/**</span>\n\n<span class=\"sd\">  * \\brief Configures the relative deadline at which point WebAssembly code will</span>\n<span class=\"sd\">- * trap.</span>\n<span class=\"sd\">+ * trap or invoke the callback function.</span>\n<span class=\"sd\">  *</span>\n\n<span class=\"sd\">  * This function configures the store-local epoch deadline after which point</span>\n<span class=\"sd\">- * WebAssembly code will trap.</span>\n<span class=\"sd\">+ * WebAssembly code will trap or invoke the callback function.</span>\n<span class=\"sd\">  *</span>\n\n<span class=\"sd\">- * See also #wasmtime_config_epoch_interruption_set.</span>\n<span class=\"sd\">+ * See also #wasmtime_config_epoch_interruption_set and</span>\n<span class=\"sd\">+ * #wasmtime_store_epoch_deadline_callback.</span>\n<span class=\"sd\">  */</span>\n<span class=\"w\"> </span><span class=\"n\">WASM_API_EXTERN</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">wasmtime_context_set_epoch_deadline</span><span class=\"p\">(</span><span class=\"n\">wasmtime_context_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">uint64_t</span><span class=\"w\"> </span><span class=\"n\">ticks_beyond_current</span><span class=\"p\">);</span>\n\n<span class=\"o\">+</span><span class=\"sd\">/**</span>\n\n<span class=\"sd\">+ * \\brief Configures epoch deadline callback to C function.</span>\n<span class=\"sd\">+ *</span>\n<span class=\"sd\">+ * This function configures a store-local callback function that will be</span>\n<span class=\"sd\">+ * called when the running WebAssembly function has exceeded its epoch</span>\n<span class=\"sd\">+ * deadline. That function can return a 0 to raise a trap, or a greater</span>\n<span class=\"sd\">+ * value to add to the current epoch and resume execution of the function.</span>\n<span class=\"sd\">+ *</span>\n<span class=\"sd\">+ * See also #wasmtime_config_epoch_interruption_set and</span>\n<span class=\"sd\">+ * #wasmtime_context_set_epoch_deadline.</span>\n<span class=\"sd\">+ */</span>\n<span class=\"o\">+</span><span class=\"n\">WASM_API_EXTERN</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">wasmtime_store_epoch_deadline_callback</span><span class=\"p\">(</span><span class=\"n\">wasmtime_store_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">uint64_t</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">func</span><span class=\"p\">)(</span><span class=\"n\">void</span><span class=\"o\">*</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"o\">+</span>\n<span class=\"w\"> </span>#<span class=\"n\">ifdef</span><span class=\"w\"> </span><span class=\"n\">__cplusplus</span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">  </span><span class=\"c1\">// extern \"C\"</span>\n<span class=\"w\"> </span>#<span class=\"n\">endif</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">3949</span><span class=\"n\">d46b0</span><span class=\"o\">..</span><span class=\"n\">ba8105caf</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">c_void</span><span class=\"p\">;</span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">Arc</span><span class=\"p\">;</span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">AsContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreContextMut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreLimits</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreLimitsBuilder</span><span class=\"p\">,</span>\n\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"n\">Val</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">Trap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\"> </span><span class=\"sd\">/// This representation of a `Store` is used to implement the `wasm.h` API.</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">106</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">106</span><span class=\"p\">,</span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_store_new</span><span class=\"p\">(</span>\n<span class=\"w\">     </span><span class=\"p\">})</span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"o\">+</span><span class=\"c1\">// Internal structure to add Send/Sync to the c_void member.</span>\n<span class=\"o\">+</span><span class=\"cp\">#[derive(Debug)]</span>\n<span class=\"o\">+</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"p\">}</span>\n<span class=\"o\">+</span>\n<span class=\"o\">+</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">as_mut_ptr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptr</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"o\">+</span><span class=\"p\">}</span>\n<span class=\"o\">+</span>\n<span class=\"o\">+</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"o\">+</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"o\">+</span>\n<span class=\"o\">+</span><span class=\"c1\">// Accepts a C function pointer and opaque data pointer to invoke it with.</span>\n<span class=\"o\">+</span><span class=\"c1\">// Wraps those so we can invoke the C callback via the Rust callback, and</span>\n<span class=\"o\">+</span><span class=\"c1\">// surrounds the invocation with calls to save and restore the TLS state</span>\n<span class=\"o\">+</span><span class=\"c1\">// in case the function is doing context switching.</span>\n<span class=\"o\">+</span><span class=\"cp\">#[no_mangle]</span>\n<span class=\"o\">+</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_store_epoch_deadline_callback</span><span class=\"p\">(</span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_store_t</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">func</span>: <span class=\"nc\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sendable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CallbackDataPtr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"nc\">data</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">epoch_deadline_callback</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_tls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">TlsRestore</span>::<span class=\"n\">take</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)(</span><span class=\"n\">sendable</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">my_tls</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">Interrupt</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"o\">+</span><span class=\"p\">}</span>\n<span class=\"o\">+</span>\n<span class=\"w\"> </span><span class=\"cp\">#[no_mangle]</span>\n<span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_store_context</span><span class=\"p\">(</span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_store_t</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">CStoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">()</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>I am a relative amateur with both Rust and Wasmtime, so there may be better ways or places to implement this, but this is the cleanest/smallest I could come up with.<br>\n</p>\n</blockquote>",
        "id": 394653593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696345256
    }
]