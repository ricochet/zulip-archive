[
    {
        "content": "<p>kaseyc <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622#issuecomment-769692003\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622\">Issue #2622</a>:</p>\n<blockquote>\n<p>Hi @cfallin,</p>\n<p>This is still WIP but I wanted to get a sign-off on the general direction before I actually start rewriting all the other instructions to use OperandSize.</p>\n<p>This won't handle Nop instructions, but they're kind of a special case and maybe don't need to use OperandSize. </p>\n</blockquote>",
        "id": 224447639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611912858
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622#issuecomment-769928221\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622\">Issue #2622</a>:</p>\n<blockquote>\n<p>@kaseyc yes, this is the right general direction; thanks for tackling this!</p>\n<blockquote>\n<p>This won't handle Nop instructions, but they're kind of a special case and maybe don't need to use OperandSize.</p>\n</blockquote>\n<p>Yes, NOPs don't really have operands, per-se, so I don't think it would make sense to try to use this enum for their size specification (i.e. in that case it is instruction size, not operand size).</p>\n</blockquote>",
        "id": 224502612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611939835
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622#issuecomment-770156608\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622\">Issue #2622</a>:</p>\n<blockquote>\n<p>almost-useless pedantry: x86 nops' memory operands have something of a history of turning into prefetches with the memory operand interpreted as encoded. i would pretty strongly disrecommend treating <code>OperandSize</code> differently in their case unless there's a good representation win for it. 0f1f /0 nops will always be nop, but the adjacent hinted nops may grow future semantics.</p>\n<p>and my closing argument: Intel's <code>xed</code> decoder does report <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/x64/inst/emit.rs#L2964-L2972\"><code>66 0f1f 44 0000</code></a> f.ex as <code>nop word ptr [rax+rax*1], ax</code> (and a <code>67</code> prefix makes the address decode with <code>eax</code> instead!) - for the wide nops (and prefetches) the memory operand is decoded as the bytes would mean for any other memory-operand instruction</p>\n</blockquote>",
        "id": 224565495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611981859
    },
    {
        "content": "<p>iximeow edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622#issuecomment-770156608\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622\">Issue #2622</a>:</p>\n<blockquote>\n<p>almost-useless pedantry: x86 nops' memory operands have something of a history of turning into prefetches with the memory operand interpreted as encoded. i would pretty strongly disrecommend treating <code>OperandSize</code> differently in their case unless there's a good representation win for it. 0f1f /0 nops will always be nop, but the adjacent hinted nops may grow future semantics.</p>\n<p>and my closing argument: Intel's <code>xed</code> decoder does report <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/x64/inst/emit.rs#L2964-L2972\"><code>66 0f1f 44 0000</code></a> f.ex as <code>nop word ptr [rax+rax*1], ax</code> (and a <code>67</code> prefix makes the address decode with <code>eax</code> instead!) - for the wide nops (and prefetches) the memory operand is decoded as the bytes would mean for any other memory-operand instruction</p>\n<p>edit: but to be clear i totally support _ignoring_ <code>OperandSize</code> in the case of emitting nops :D</p>\n</blockquote>",
        "id": 224565530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611981955
    },
    {
        "content": "<p>kaseyc <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622#issuecomment-770511025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2622\">Issue #2622</a>:</p>\n<blockquote>\n<p>I've updated most of the instructions to use OperandSize now.</p>\n<p>There are a couple that get from ir::Type such as LockCmpXxchg and AtomicRmwSeq, but those are trickier to modify.</p>\n<p>For the clarity/readability I have put the u8-&gt;OperandSize and bool-&gt;OperandSize refactors into separate commits.</p>\n</blockquote>",
        "id": 224678002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612144232
    }
]