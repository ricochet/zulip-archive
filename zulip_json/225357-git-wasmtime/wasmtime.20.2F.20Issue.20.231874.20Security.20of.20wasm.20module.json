[
    {
        "content": "<p>donovano opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>Hi, I’ve read the Webassembly security document at <a href=\"https://webassembly.org/docs/security/\">https://webassembly.org/docs/security/</a>. I presume wasmtime is (mostly) alligned with the described security aspects in this document - except maybe some of the discussion about future features.</p>\n<p>So is it correct that… after calling some wasm module function (from a host hosting the guest wasm), all wasm module code will be in a defined state i.e. that of a freshly initialized module, but the linear memory might be altered? </p>\n<p>If one clears the linear memory space after the host calls the guest, can it then be said that the wasm module should be in an original state i.e. the state immediately after it was loaded but before any functions were executed? To put it another way: An attacker (maybe by passing crafty parameters to the wasm function) can have messed around with the memory and could have tried to execute functions but could not have altered anything else that persists after the function call exits except the memory, which can be cleared or reset by the caller (the host) upon completion of the function call?</p>\n</blockquote>",
        "id": 200687217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591976979
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-643362249\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>It could also have modified globals or tables, not just linear memory.</p>\n</blockquote>",
        "id": 200691244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591978801
    },
    {
        "content": "<p>donovano <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-643408599\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>OK you're right those too. It seems the only way for the host to know about all globals and tables is to call the instance or module <code>exports</code> function and iterate over them. Not sure if you can save and restore these. I think you can save and restore a Global but not sure about a Table.</p>\n<p>It would be nice if there was a restore capability that would do all this for you i.e. get the wasm module into its initial state after calling some wasm function(s).</p>\n</blockquote>",
        "id": 200702539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591984474
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-643421411\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<blockquote>\n<p>It would be nice if there was a restore capability that would do all this for you i.e. get the wasm module into its initial state after calling some wasm function(s).</p>\n</blockquote>\n<p>I wonder how it will be different from just <code>Instance::new</code>. Notice that <code>Module</code> holds the code that can be (re)used in different instances.</p>\n</blockquote>",
        "id": 200706318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591986213
    },
    {
        "content": "<p>donovano <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-643428372\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>OK. In my case after the call to <code>Module::from_file(…</code> there are some <code>linker.func(…</code> calls followed by a <code>linker.instantiate(…</code>. So I could maybe just create a new linker and call instantiate on this new linker with the module. Will have to see if it is necessary to ‘uninstantiate’ the old linker or remove it somehow.</p>\n</blockquote>",
        "id": 200708510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591987263
    },
    {
        "content": "<p>donovano <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-643490882\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>This approach does work. I only have a problem with memory not being released. This is not a problem if the store and module are recreated after every function call, but if you keep the store and module and only create a new linker each time the memory increases steadily. I'll investigate further to get to the bottom unless you have some suggestions. Thanks for the help anyway.</p>\n</blockquote>",
        "id": 200726616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591997354
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-643497184\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<blockquote>\n<p>the store and module are recreated after every function call</p>\n</blockquote>\n<p>A module does not need to be recreated (just cloned). Normally you will just create a Store and new Instance (in this Store), in your case you are using linker to assist with that.</p>\n</blockquote>",
        "id": 200728342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591998641
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-643504548\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>Please look at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/threads.rs\">https://github.com/bytecodealliance/wasmtime/blob/master/examples/threads.rs</a> -- it is looks like you use case (if threads are removed)</p>\n</blockquote>",
        "id": 200730710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592000243
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-643504548\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>Please look at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/threads.rs\">https://github.com/bytecodealliance/wasmtime/blob/master/examples/threads.rs</a> -- it is looks like your use case (if threads are removed)</p>\n</blockquote>",
        "id": 200730721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592000254
    },
    {
        "content": "<p>donovano <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-644142840\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>I was still on 0.16.0 so moving to 0.17.0 I got this to work thanks. This is a good approach except that CPU overhead caused by the processing to link functions and WASI each time is obviously much higher than doing that only once. Maybe this can improve over time or a different method can be used to re-initialize the module each time. But this is progress thanks.</p>\n</blockquote>",
        "id": 200890094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592228528
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-644186059\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<blockquote>\n<p>except that CPU overhead caused by the processing to link functions</p>\n</blockquote>\n<p>The only overhead is memory re-creation, but I believe it can be re-used if wasm module imports it and the same storage (as memory) used during <code>Instance::new</code>. Other operations, such as looking up exports by string name, can be optimized by not using a linker at all.</p>\n<p>@donovano is anything else needs to be addressed for this issue to be closed? IMHO I'm not sure it is a security issue at all.</p>\n</blockquote>",
        "id": 200900118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592232998
    },
    {
        "content": "<p>donovano <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874#issuecomment-644217442\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>OK can look at further optimizations. Thanks you can close it, this has helped.</p>\n<p>I dont think it is a security problem or bug as such. I originally had a concern that one invocation of a wasm exported function can compromise the wasm guest to a limited degree (based on the good security protections that wasm offers) that might affect further calls to the exported functions. Re-initializing the module as described above each time prior to calling an exported function, specifically for a different initiator or user that calls this function, will mitigate this issue. So from security point of view I think it looks good.</p>\n</blockquote>",
        "id": 200908406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592236250
    },
    {
        "content": "<p>yurydelendik closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1874\">Issue #1874</a>:</p>\n<blockquote>\n<p>Hi, I’ve read the Webassembly security document at <a href=\"https://webassembly.org/docs/security/\">https://webassembly.org/docs/security/</a>. I presume wasmtime is (mostly) alligned with the described security aspects in this document - except maybe some of the discussion about future features.</p>\n<p>So is it correct that… after calling some wasm module function (from a host hosting the guest wasm), all wasm module code will be in a defined state i.e. that of a freshly initialized module, but the linear memory might be altered? </p>\n<p>If one clears the linear memory space after the host calls the guest, can it then be said that the wasm module should be in an original state i.e. the state immediately after it was loaded but before any functions were executed? To put it another way: An attacker (maybe by passing crafty parameters to the wasm function) can have messed around with the memory and could have tried to execute functions but could not have altered anything else that persists after the function call exits except the memory, which can be cleared or reset by the caller (the host) upon completion of the function call?</p>\n</blockquote>",
        "id": 200911270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592237649
    }
]