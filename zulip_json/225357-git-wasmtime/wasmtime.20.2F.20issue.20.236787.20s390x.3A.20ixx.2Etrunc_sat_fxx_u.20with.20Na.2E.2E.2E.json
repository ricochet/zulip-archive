[
    {
        "content": "<p>candymate opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787\">issue #6787</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Cases with <code>i64.trunc_sat_f32_u</code>, <code>i64.trunc_sat_f64_u</code>, <code>i32.trunc_sat_f32_u</code>, <code>i32.trunc_sat_f64_u</code> work</p>\n<p>One example</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">f32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">f32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"kt\">i64</span><span class=\"err\">.trunc_sat_</span><span class=\"kt\">f32</span><span class=\"err\">_u</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"test.wat\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"main(NaN) = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">NAN</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Run the following code with s390x</p>\n<p><code>cargo run --release --target=s390x-unknown-linux-gnu</code></p>\n<h3>Expected Results</h3>\n<p><code>ixx.trunc_sat_fxx_u</code> with NaN should result in 0. (<a href=\"https://webassembly.github.io/spec/core/exec/numerics.html#op-trunc-sat-u\">https://webassembly.github.io/spec/core/exec/numerics.html#op-trunc-sat-u</a>)</p>\n<p><code>main(NaN) = 0</code></p>\n<h3>Actual Results</h3>\n<p><code>main(NaN) = -1</code></p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v11.0.1 Release</p>\n<p>Operating system: Ubuntu 20.04.6</p>\n<p>Architecture: s390x<br>\n</p>\n</blockquote>",
        "id": 380190866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690779601
    },
    {
        "content": "<p><a href=\"https://github.com/candymate\">candymate</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787\">Issue #6787</a>.</p>",
        "id": 380190868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690779601
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787#issuecomment-1657596276\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787\">issue #6787</a>:</p>\n<blockquote>\n<p>cc @uweigand, can you take a look?</p>\n</blockquote>",
        "id": 380191069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690779678
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787#issuecomment-1658544681\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787\">issue #6787</a>:</p>\n<blockquote>\n<p>Unfortunately I'm unable to reproduce the problem, the provided test case gives the correct output for me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">NaN</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>Not sure what exactly is different in your situation, it must be some environment issue.  Which Rust version are you using?  Which s390x processor version?</p>\n<p>Note that there is a spec conformance test in the wasmtime testsuite that verifies these specific corner cases:<br>\n<a href=\"https://github.com/WebAssembly/testsuite/blob/7ef86ddeed81458f9031a49a40b3a3f99c1c6a8a/conversions.wast#L399\">https://github.com/WebAssembly/testsuite/blob/7ef86ddeed81458f9031a49a40b3a3f99c1c6a8a/conversions.wast#L399</a><br>\nThis test is continually passing in CI on s390x, so the core implementation should be correct.</p>\n</blockquote>",
        "id": 380378406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690815570
    },
    {
        "content": "<p>candymate <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787#issuecomment-1659467576\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787\">issue #6787</a>:</p>\n<blockquote>\n<p>Thanks for the response.</p>\n<p>I was using an old QEMU, and it seemed to be the cause of the problem. After updating QEMU, it now gives me the correct output.</p>\n</blockquote>",
        "id": 380542007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690856734
    },
    {
        "content": "<p>candymate closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787\">issue #6787</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Cases with <code>i64.trunc_sat_f32_u</code>, <code>i64.trunc_sat_f64_u</code>, <code>i32.trunc_sat_f32_u</code>, <code>i32.trunc_sat_f64_u</code> work</p>\n<p>One example</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">f32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">f32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"kt\">i64</span><span class=\"err\">.trunc_sat_</span><span class=\"kt\">f32</span><span class=\"err\">_u</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"test.wat\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"main(NaN) = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">NAN</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Run the following code with s390x</p>\n<p><code>cargo run --release --target=s390x-unknown-linux-gnu</code></p>\n<h3>Expected Results</h3>\n<p><code>ixx.trunc_sat_fxx_u</code> with NaN should result in 0. (<a href=\"https://webassembly.github.io/spec/core/exec/numerics.html#op-trunc-sat-u\">https://webassembly.github.io/spec/core/exec/numerics.html#op-trunc-sat-u</a>)</p>\n<p><code>main(NaN) = 0</code></p>\n<h3>Actual Results</h3>\n<p><code>main(NaN) = -1</code></p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v11.0.1 Release</p>\n<p>Operating system: Ubuntu 20.04.6</p>\n<p>Architecture: s390x<br>\n</p>\n</blockquote>",
        "id": 380542011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690856734
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787#issuecomment-1659742421\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6787\">issue #6787</a>:</p>\n<blockquote>\n<blockquote>\n<p>I was using an old QEMU, and it seemed to be the cause of the problem. </p>\n</blockquote>\n<p>Ah yes, some older QEMU versions had a bug in the emulation of the float-to-int conversion instructions - that would explain it.</p>\n</blockquote>",
        "id": 380586774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690875563
    }
]