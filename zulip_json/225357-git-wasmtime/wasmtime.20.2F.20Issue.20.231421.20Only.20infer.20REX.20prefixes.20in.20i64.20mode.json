[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1421\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1421\">Issue #1421</a>:</p>\n<blockquote>\n<p>In looking over <a href=\"https://github.com/abrown/wasmtime/blob/906e92200941732f4dd72ea9827733877afb9bf3/cranelift/codegen/meta/src/isa/x86/encodings.rs#L319\" title=\"https://github.com/abrown/wasmtime/blob/906e92200941732f4dd72ea9827733877afb9bf3/cranelift/codegen/meta/src/isa/x86/encodings.rs#L319\"><code>encodings.rs</code></a> again in #1208, I noticed that I had allowed x86's 32-bit mode in cranelift-codegen-meta to infer REX prefixes. This should not be allowed since REX prefixes are only available in 64-bit mode.</p>\n<p>Once this is changed in <code>enc_both_inferred*</code> (and after adding size calculator functions to the <code>{g,f}pr{,disp8,disp32}</code> recipes), a simplification is possible. Loads and stores could be simplified from:</p>\n<div class=\"codehilite\"><pre><span></span>            e.enc32_maybe_isap(inst.clone().bind(I32), template.clone(), isap);\n            // REX-less encoding must come after REX encoding so we don&#39;t use it by\n            // default. Otherwise reg-alloc would never use r8 and up.\n            e.enc64_maybe_isap(inst.clone().bind(I32), template.clone().rex(), isap);\n            e.enc64_maybe_isap(inst.clone().bind(I32), template.clone(), isap);\n            // Similar to above; TODO some of this duplication can be cleaned up by infer_rex()\n            // tracked in https://github.com/bytecodealliance/cranelift/issues/1090\n            e.enc64_maybe_isap(inst.clone().bind(I64), template.clone().rex(), isap);\n            e.enc64_maybe_isap(inst.bind(I64), template, isap);\n</pre></div>\n\n\n<p>to:</p>\n<div class=\"codehilite\"><pre><span></span>            e.enc_both_inferred_maybe_isap(inst.clone().bind(I32), template.clone(), isap);\n            e.enc64_maybe_isap(inst.bind(I64), template.infer_rex(), isap);\n</pre></div>\n\n\n</blockquote>",
        "id": 192058384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585332794
    },
    {
        "content": "<p>abrown labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1421\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1421\">Issue #1421</a>:</p>\n<blockquote>\n<p>In looking over <a href=\"https://github.com/abrown/wasmtime/blob/906e92200941732f4dd72ea9827733877afb9bf3/cranelift/codegen/meta/src/isa/x86/encodings.rs#L319\" title=\"https://github.com/abrown/wasmtime/blob/906e92200941732f4dd72ea9827733877afb9bf3/cranelift/codegen/meta/src/isa/x86/encodings.rs#L319\"><code>encodings.rs</code></a> again in #1208, I noticed that I had allowed x86's 32-bit mode in cranelift-codegen-meta to infer REX prefixes. This should not be allowed since REX prefixes are only available in 64-bit mode.</p>\n<p>Once this is changed in <code>enc_both_inferred*</code> (and after adding size calculator functions to the <code>{g,f}pr{,disp8,disp32}</code> recipes), a simplification is possible. Loads and stores could be simplified from:</p>\n<div class=\"codehilite\"><pre><span></span>            e.enc32_maybe_isap(inst.clone().bind(I32), template.clone(), isap);\n            // REX-less encoding must come after REX encoding so we don&#39;t use it by\n            // default. Otherwise reg-alloc would never use r8 and up.\n            e.enc64_maybe_isap(inst.clone().bind(I32), template.clone().rex(), isap);\n            e.enc64_maybe_isap(inst.clone().bind(I32), template.clone(), isap);\n            // Similar to above; TODO some of this duplication can be cleaned up by infer_rex()\n            // tracked in https://github.com/bytecodealliance/cranelift/issues/1090\n            e.enc64_maybe_isap(inst.clone().bind(I64), template.clone().rex(), isap);\n            e.enc64_maybe_isap(inst.bind(I64), template, isap);\n</pre></div>\n\n\n<p>to:</p>\n<div class=\"codehilite\"><pre><span></span>            e.enc_both_inferred_maybe_isap(inst.clone().bind(I32), template.clone(), isap);\n            e.enc64_maybe_isap(inst.bind(I64), template.infer_rex(), isap);\n</pre></div>\n\n\n</blockquote>",
        "id": 192093591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585352866
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1421\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1421\">Issue #1421</a>:</p>\n<blockquote>\n<p>In looking over <a href=\"https://github.com/abrown/wasmtime/blob/906e92200941732f4dd72ea9827733877afb9bf3/cranelift/codegen/meta/src/isa/x86/encodings.rs#L319\" title=\"https://github.com/abrown/wasmtime/blob/906e92200941732f4dd72ea9827733877afb9bf3/cranelift/codegen/meta/src/isa/x86/encodings.rs#L319\"><code>encodings.rs</code></a> again in #1208, I noticed that I had allowed x86's 32-bit mode in cranelift-codegen-meta to infer REX prefixes. This should not be allowed since REX prefixes are only available in 64-bit mode.</p>\n<p>Once this is changed in <code>enc_both_inferred*</code> (and after adding size calculator functions to the <code>{g,f}pr{,disp8,disp32}</code> recipes), a simplification is possible. Loads and stores could be simplified from:</p>\n<div class=\"codehilite\"><pre><span></span>            e.enc32_maybe_isap(inst.clone().bind(I32), template.clone(), isap);\n            // REX-less encoding must come after REX encoding so we don&#39;t use it by\n            // default. Otherwise reg-alloc would never use r8 and up.\n            e.enc64_maybe_isap(inst.clone().bind(I32), template.clone().rex(), isap);\n            e.enc64_maybe_isap(inst.clone().bind(I32), template.clone(), isap);\n            // Similar to above; TODO some of this duplication can be cleaned up by infer_rex()\n            // tracked in https://github.com/bytecodealliance/cranelift/issues/1090\n            e.enc64_maybe_isap(inst.clone().bind(I64), template.clone().rex(), isap);\n            e.enc64_maybe_isap(inst.bind(I64), template, isap);\n</pre></div>\n\n\n<p>to:</p>\n<div class=\"codehilite\"><pre><span></span>            e.enc_both_inferred_maybe_isap(inst.clone().bind(I32), template.clone(), isap);\n            e.enc64_maybe_isap(inst.bind(I64), template.infer_rex(), isap);\n</pre></div>\n\n\n</blockquote>",
        "id": 192707172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585852125
    }
]