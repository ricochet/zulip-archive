[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3917\">issue #3917</a>:</p>\n<blockquote>\n<p>I was poking around the coverage reports today and found that a surprising piece of dead code was <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc1170c2ddba9b8667ad888ac9080bb49410cbad/crates/runtime/src/externref.rs#L942-L969\">this block</a> which is where we actually walk the stack map of a stack frame and find the live externref values to keep alive. This means that we have no fuzzing support for stack maps right now which exercises keeping live externref values on the stack alive.</p>\n<p>I believe this is unintended so I'm opening an issue for this as this is definitely something that we're going to want to fuzz. The current <code>table_ops</code> fuzzer was thought to cover this but it does not ever make any gc calls with actual live values on the stack. We should either modify that fuzzer or make a new similar fuzzer which generates wasms which deal with <code>externref</code> and have live values on the stack when calls to gc (either explicit or implicit) are made.</p>\n</blockquote>",
        "id": 274887219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646942249
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3917\">issue #3917</a>:</p>\n<blockquote>\n<p>I was poking around the coverage reports today and found that a surprising piece of dead code was <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc1170c2ddba9b8667ad888ac9080bb49410cbad/crates/runtime/src/externref.rs#L942-L969\">this block</a> which is where we actually walk the stack map of a stack frame and find the live externref values to keep alive. This means that we have no fuzzing support for stack maps right now which exercises keeping live externref values on the stack alive.</p>\n<p>I believe this is unintended so I'm opening an issue for this as this is definitely something that we're going to want to fuzz. The current <code>table_ops</code> fuzzer was thought to cover this but it does not ever make any gc calls with actual live values on the stack. We should either modify that fuzzer or make a new similar fuzzer which generates wasms which deal with <code>externref</code> and have live values on the stack when calls to gc (either explicit or implicit) are made.</p>\n</blockquote>",
        "id": 274887220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646942249
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3917\">issue #3917</a>:</p>\n<blockquote>\n<p>I was poking around the coverage reports today and found that a surprising piece of dead code was <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc1170c2ddba9b8667ad888ac9080bb49410cbad/crates/runtime/src/externref.rs#L942-L969\">this block</a> which is where we actually walk the stack map of a stack frame and find the live externref values to keep alive. This means that we have no fuzzing support for stack maps right now which exercises keeping live externref values on the stack alive.</p>\n<p>I believe this is unintended so I'm opening an issue for this as this is definitely something that we're going to want to fuzz. The current <code>table_ops</code> fuzzer was thought to cover this but it does not ever make any gc calls with actual live values on the stack. We should either modify that fuzzer or make a new similar fuzzer which generates wasms which deal with <code>externref</code> and have live values on the stack when calls to gc (either explicit or implicit) are made.</p>\n</blockquote>",
        "id": 274887222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646942249
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3917\">issue #3917</a>:</p>\n<blockquote>\n<p>I was poking around the coverage reports today and found that a surprising piece of dead code was <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc1170c2ddba9b8667ad888ac9080bb49410cbad/crates/runtime/src/externref.rs#L942-L969\">this block</a> which is where we actually walk the stack map of a stack frame and find the live externref values to keep alive. This means that we have no fuzzing support for stack maps right now which exercises keeping live externref values on the stack alive.</p>\n<p>I believe this is unintended so I'm opening an issue for this as this is definitely something that we're going to want to fuzz. The current <code>table_ops</code> fuzzer was thought to cover this but it does not ever make any gc calls with actual live values on the stack. We should either modify that fuzzer or make a new similar fuzzer which generates wasms which deal with <code>externref</code> and have live values on the stack when calls to gc (either explicit or implicit) are made.</p>\n</blockquote>",
        "id": 274887223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646942250
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3917\">issue #3917</a>:</p>\n<blockquote>\n<p>I was poking around the coverage reports today and found that a surprising piece of dead code was <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc1170c2ddba9b8667ad888ac9080bb49410cbad/crates/runtime/src/externref.rs#L942-L969\">this block</a> which is where we actually walk the stack map of a stack frame and find the live externref values to keep alive. This means that we have no fuzzing support for stack maps right now which exercises keeping live externref values on the stack alive.</p>\n<p>I believe this is unintended so I'm opening an issue for this as this is definitely something that we're going to want to fuzz. The current <code>table_ops</code> fuzzer was thought to cover this but it does not ever make any gc calls with actual live values on the stack. We should either modify that fuzzer or make a new similar fuzzer which generates wasms which deal with <code>externref</code> and have live values on the stack when calls to gc (either explicit or implicit) are made.</p>\n</blockquote>",
        "id": 278620144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649712808
    }
]