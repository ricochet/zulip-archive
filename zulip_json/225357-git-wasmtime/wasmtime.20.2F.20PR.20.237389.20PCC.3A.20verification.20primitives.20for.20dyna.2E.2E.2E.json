[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389\">PR #7389</a>.</p>",
        "id": 398832386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698388624
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389\">PR #7389</a>.</p>",
        "id": 398832393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698388625
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389\">PR #7389</a> from <code>cfallin:pcc-dynamic</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This PR adds new kinds of facts on value <code>dynamic_range</code>, <code>dynamic_mem</code>, and <code>compare</code>; a new kind of memory type <code>dynamic_memory</code>; and a notion of symbolic expressions (a sum of either an SSA value or global value and a static offset) for min and max values in those ranges that are just rich enough to express the expected CLIF sequence for Wasm dynamic memory bounds-checks with Spectre mitigations (cmp/select rather than control-flow-based). It is sufficient to validate the following</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Equivalent</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">i64</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">dynamic</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">.</span>\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">checked</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">base</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">checked</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">size</span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">mock</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"> </span><span class=\"k\">struct</span>:\n    <span class=\"nc\">mt0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span>: <span class=\"kt\">i64</span> <span class=\"nc\">readonly</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">dynamic_mem</span><span class=\"p\">(</span><span class=\"n\">mt1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"mi\">8</span>: <span class=\"kt\">i64</span> <span class=\"nc\">readonly</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">dynamic_range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">mock</span><span class=\"w\"> </span><span class=\"n\">dynamic</span><span class=\"w\"> </span><span class=\"n\">memory</span>: <span class=\"nc\">dynamic</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">GiB</span><span class=\"w\"> </span><span class=\"n\">guard</span>\n<span class=\"w\">    </span><span class=\"n\">mt1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dynamic_memory</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mh\">0x8000_0000</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">(</span><span class=\"n\">mt0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">dynamic_range</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">dynamic_range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span><span class=\"w\">            </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\">       </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">extended</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"n\">offset</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">dynamic_mem</span><span class=\"p\">(</span><span class=\"n\">mt1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\">               </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">base</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">dynamic_range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"p\">)</span><span class=\"w\">          </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">size</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">uge</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"p\">)</span><span class=\"w\">                </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">uge</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"o\">-</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">compare</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">extended</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">size</span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">dynamic_mem</span><span class=\"p\">(</span><span class=\"n\">mt1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span><span class=\"w\">              </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\">      </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">compute</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"> </span><span class=\"n\">address</span>: <span class=\"nc\">memory</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"> </span><span class=\"n\">extended</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"n\">offset</span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">dynamic_mem</span><span class=\"p\">(</span><span class=\"n\">mt1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nullable</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">         </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">null</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">speculative</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">dynamic_mem</span><span class=\"p\">(</span><span class=\"n\">mt1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nullable</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select_spectre_guard</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">OOB</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pick</span><span class=\"w\"> </span><span class=\"n\">null</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">otherwise</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"n\">address</span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"w\">                                        </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">checked</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v9</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>on both x86-64 and aarch64.</p>\n<p>The first half of this was:</p>\n<p>Co-authored-by: Nick Fitzgerald &lt;<a href=\"mailto:fitzgen@gmail.com\">fitzgen@gmail.com</a>&gt;</p>\n</blockquote>",
        "id": 398832397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698388625
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389\">PR #7389</a>.</p>",
        "id": 398833886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698389180
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702070620\">PR review</a>:</p>\n<blockquote>\n<p>r=me with some comments below</p>\n</blockquote>",
        "id": 398933859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702070620\">PR review</a>:</p>\n<blockquote>\n<p>r=me with some comments below</p>\n</blockquote>",
        "id": 398933860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374763165\">PR review comment</a>:</p>\n<blockquote>\n<p>It seems potentially wrong that both <code>union</code> and <code>intersection</code> take the <code>or</code> of nullability. I guess I'd expect one to <code>and</code> or have guards on the match arm that they are both null or both not null. Intuitively, the <code>or</code> behavior makes sense to me for <code>union</code>, but not for intersection above. But I'm also not 100% sure that it is incorrect? It just feels funky.</p>\n<p>Care to calm my nerves a bit by explaining why this is okay? And probably putting some part of that explanation in comments here?</p>\n</blockquote>",
        "id": 398933862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374750598\">PR review comment</a>:</p>\n<blockquote>\n<p>Should this not return an <code>Expr</code> with <code>BaseExpr::Max</code>? I guess I'm not seeing (yet) what the point of that variant is if we aren't going to use it for something like this.</p>\n</blockquote>",
        "id": 398933864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374766537\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe we can rename this to <code>is_symbol</code> or something? Because a constant value range is also a single value, but it is not symbolic. If I was just reading some code that called this method, I might assume that it would return <code>true</code> for things it does not check for.</p>\n</blockquote>",
        "id": 398933865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374791139\">PR review comment</a>:</p>\n<blockquote>\n<p>Style nitpick: might be easier to read if the <code>try_from</code> expression was pulled out to its own variable, similar to how the <code>end_offset</code> is.</p>\n</blockquote>",
        "id": 398933866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374768201\">PR review comment</a>:</p>\n<blockquote>\n<p>Above we have <code>bw_lhs &gt;= bw_rhs</code> -- do we need that here? Or, even if we don't <em>need</em> it, is it still correct to have it here for the sake of consistency? And if not, then we should probably explain that rather than say \"same as above\" when it isn't the same as above.</p>\n</blockquote>",
        "id": 398933867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374772076\">PR review comment</a>:</p>\n<blockquote>\n<p>Style nitpick: can move the <code>*min == 0 &amp;&amp; *max == 0 &amp;&amp; *nullable</code> from the guard to the pattern, and it will be a little easier to read, IMO.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">Fact</span>::<span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">bit_width</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"n\">max</span>: <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">                </span><span class=\"n\">Fact</span>::<span class=\"n\">DynamicMem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">nullable</span>: <span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"o\">..</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">bit_width</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">pointer_width</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 398933868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374795416\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we define an <code>enum</code> to replace the <code>strict: bool</code> parameter? This should both make this code easier to follow and make it more obvious what callers are doing vs just passing a random bool parameter or needing to do stuff like <code>foo(/* strict = */ false)</code>.</p>\n<p>Something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">InequalityKind</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">GreaterThanOrEqual</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">LessThan</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 398933869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374808412\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's either clean up these traces and give them more context to make them readable by general wasmtime/cranelift devs or remove them.</p>\n</blockquote>",
        "id": 398933870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374802110\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh also, maybe we can call this <code>as_symbol</code> since it returns something. Just got confused for a second when reading callers.</p>\n</blockquote>",
        "id": 398933871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374810857\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    v6 ! dynamic_mem(mt1, v1, v1)             = iadd.i64 v3, v2      ;; compute access address: memory base plus extended Wasm offset\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 398933872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374803374\">PR review comment</a>:</p>\n<blockquote>\n<p>Seems like maybe not the most useful trace long term.</p>\n</blockquote>",
        "id": 398933873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424776
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374809831\">PR review comment</a>:</p>\n<blockquote>\n<p>Ditto regarding traces.</p>\n</blockquote>",
        "id": 398933875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424777
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1374796632\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, it seems like maybe the comment is incorrect and this is <code>&lt;=</code> or <code>&lt;</code>, not <code>&gt;=</code> or <code>&lt;</code>?</p>\n</blockquote>",
        "id": 398933876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698424777
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389\">PR #7389</a>.</p>",
        "id": 398969188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441248
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702549751\">PR review</a>.</p>",
        "id": 398969489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441427
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052008\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, good point! It arose out of a need for the other side of the lattice when defining <code>min</code> and <code>max</code>, but now that we have it we can saturate to it here too.</p>\n</blockquote>",
        "id": 398969490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441428
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702549809\">PR review</a>.</p>",
        "id": 398969497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441431
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052051\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yeah, intersect was wrong -- it should have been an AND. Fixed, thanks!</p>\n</blockquote>",
        "id": 398969499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441431
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702549874\">PR review</a>.</p>",
        "id": 398969503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441434
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052094\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 398969504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441435
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702549929\">PR review</a>.</p>",
        "id": 398969508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441439
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052129\">PR review comment</a>:</p>\n<blockquote>\n<p>I was having some trouble convincing myself it works here... in the static case, we know that the concrete limit values are within the range provided by the bitwidth, so if the range gets bigger on the RHS (the subsuming case), and the bitwidth gets smaller, that implies that the claimed range values also fit within the bitwidth on the left, and so no claims are being made about upper bits. Whereas we don't know that about symbolic values. (It's still a little handwavy but that's the gist) I've added a comment to this effect.</p>\n</blockquote>",
        "id": 398969509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441439
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702549986\">PR review</a>.</p>",
        "id": 398969517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441443
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052175\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 398969518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441443
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702550027\">PR review</a>.</p>",
        "id": 398969522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441446
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052195\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 398969523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441446
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702550063\">PR review</a>.</p>",
        "id": 398969530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441450
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052234\">PR review comment</a>:</p>\n<blockquote>\n<p>Done on both -- indeed, the comment was incorrect in the second case, thanks!</p>\n</blockquote>",
        "id": 398969531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441450
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702550155\">PR review</a>.</p>",
        "id": 398969537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441456
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052285\">PR review comment</a>:</p>\n<blockquote>\n<p>Removed; I neglected to go through and clean these up after getting things working, sorry!</p>\n</blockquote>",
        "id": 398969539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441456
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702550234\">PR review</a>.</p>",
        "id": 398969552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441461
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052346\">PR review comment</a>:</p>\n<blockquote>\n<p>Done</p>\n</blockquote>",
        "id": 398969553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441462
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702550278\">PR review</a>.</p>",
        "id": 398969564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441465
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052371\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 398969565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441465
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#pullrequestreview-1702550339\">PR review</a>.</p>",
        "id": 398969572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441470
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389#discussion_r1375052414\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 398969573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441470
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389\">PR #7389</a>.</p>",
        "id": 398969654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441490
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389\">PR #7389</a>.</p>",
        "id": 398970063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698441718
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7389\">PR #7389</a>.</p>",
        "id": 398977728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698446965
    }
]