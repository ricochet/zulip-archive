[
    {
        "content": "<p>rylev opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811\">issue #6811</a>:</p>\n<blockquote>\n<p>Moving streams to async has introduced a race condition. The <code>AsyncWriteStream</code> often gets dropped before the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bb3734bd724683cce8aa20de0cad9f9086e07b50/crates/wasi/src/preview2/pipe.rs#L237\">receiver inside the spawned task</a> has time to receive a message.</p>\n<p>This makes sense as there's nothing to tie the spawned task's completion to the <code>Store</code> that contains the <code>AsyncWriteStream</code>. It's very easy to drop the <code>Store</code> before any handlers are allowed to run to completition.</p>\n<h3>Test Case</h3>\n<p>Take the following \"hello world\" case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"p\">{</span><span class=\"n\">Table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"cp\">#[tokio::main]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Table</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">command</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Data</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span>: <span class=\"nc\">Table</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span>: <span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">Table</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">table_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">Table</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ctx_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The <code>example.wasm</code> file is just a simple wasm component that has one export <code>hello</code> which just uses Rust's <code>println!</code> to print \"Hello, World!\" to stdout. </p>\n<p>This technically works, but only by coincidence. If we see when the \"Hello, World\" gets flushed to stdout, it happens <em>after</em> the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bb3734bd724683cce8aa20de0cad9f9086e07b50/crates/wasi/src/preview2/pipe.rs#L113-L129\">spawned task</a> that is handling IO is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bb3734bd724683cce8aa20de0cad9f9086e07b50/crates/wasi/src/preview2/pipe.rs#L297\">aborted in the Drop handler</a>. </p>\n<h3>Steps to Reproduce</h3>\n<p>You can reproduce those by running the above example with a local checkout of <code>wasmtime</code>. Simply add a logging statement to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bb3734bd724683cce8aa20de0cad9f9086e07b50/crates/wasi/src/preview2/pipe.rs#L295-L299\">drop handler of <code>AsyncWriteStream</code></a> and you'll see that the drop (and thus the cancellation of the spawned task) happens <em>before</em> the output to stdout. </p>\n<p>I've found this to be reliably reproducible in a user visible way if the wasm binary prints more than 1 line of text to stdout. The first line usually gets successfully flushed, but the second does not. Adding something to slow down the execution of the runtime can eliminates the bug (e.g., adding <code>tokio::time::sleep(std::time::Duration::from_millis(1)).await;</code> after the function call, gets rid of the race condition). </p>\n<p>I first caught this bug first when upgrading <a href=\"https://github.com/fermyon/spin\">Spin</a> to the latest version of <code>wasmtime</code>. The exported function would complete and the containing <code>Store</code> would be dropped before the underlying <code>AsyncWriteStream</code>'s spawned task had a chance to receive the bytes to be written to the inner <code>AsyncWrite</code> type. Only every ~10th invocation would see the spawned task actually process the bytes before the <code>AsyncWriteStream</code>'s drop handler canceled the task.</p>\n<h3>Expected Results</h3>\n<p>I would expect that there would be some mechanism for ensuring that ongoing async writes complete before the <code>Store</code> is dropped.</p>\n<h3>Versions and Environment</h3>\n<p>This is the case on the <a href=\"https://github.com/bytecodealliance/wasmtime/commit/bb3734bd724683cce8aa20de0cad9f9086e07b50\">latest version of <code>wasmtime</code></a> as of this writing.</p>\n</blockquote>",
        "id": 382584983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691406138
    },
    {
        "content": "<p><a href=\"https://github.com/rylev\">rylev</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811\">Issue #6811</a>.</p>",
        "id": 382584986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691406139
    },
    {
        "content": "<p>pchickey assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811\">issue #6811</a> to pchickey.</p>",
        "id": 382676474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691422335
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811#issuecomment-1668343328\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811\">issue #6811</a>:</p>\n<blockquote>\n<p>Thanks for the report! @alexcrichton and @elliottt and I had talked about this hypothetical but I hadn't realized how trivial it is to trip over. We'll work on a mechanism to hold onto the <code>JoinHandle</code>s created inside a Store beyond the lifetime of the Store.</p>\n</blockquote>",
        "id": 382718193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691430805
    },
    {
        "content": "<p>rylev <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811#issuecomment-1669208442\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811\">issue #6811</a>:</p>\n<blockquote>\n<p>Think about this more, I think the right thing to do is to just <em>remove</em> the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3878a0025e8c2f44f8ed2e7064cd5188574e7d6c/crates/wasi/src/preview2/pipe.rs#L297\">call to abort inside <code>AsyncWriteStream</code>'s drop impl</a>. I don't see why an immediate abort would be necessary, and if there is such a use case, it seems like it should be opt-in. </p>\n<p>If we remove the call to <code>abort</code>, then the spawned task will still cleanly exit. Either the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3878a0025e8c2f44f8ed2e7064cd5188574e7d6c/crates/wasi/src/preview2/pipe.rs#L237\">call to <code>recv</code></a> will return <code>None</code> because the channel is empty and the sender has been dropped <em>OR</em> a normal expected exit occurs <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3878a0025e8c2f44f8ed2e7064cd5188574e7d6c/crates/wasi/src/preview2/pipe.rs#L243\">here</a> or <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3878a0025e8c2f44f8ed2e7064cd5188574e7d6c/crates/wasi/src/preview2/pipe.rs#L256\">here</a>. </p>\n<p>The only additional thing I think that needs to changed is what happens when the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3878a0025e8c2f44f8ed2e7064cd5188574e7d6c/crates/wasi/src/preview2/pipe.rs#L249\"><code>result_sender</code> errors</a> because the channel is closed. I believe this shouldn't break out of the outer loop (i.e., we should just ignore the return value). We should continue normally trying to perform the current write and exit in one of the normal spots listed above. Otherwise we still have a race condition where the write is trying to finish, but the result channel has already been dropped. If there's no one on the other side of the <code>result_sender</code> then that's fine - the side effect of writing is still important and should be completed.</p>\n</blockquote>",
        "id": 382875330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691485165
    },
    {
        "content": "<p>rylev edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811#issuecomment-1669208442\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811\">issue #6811</a>:</p>\n<blockquote>\n<p>Think about this more, I think the right thing to do is to just <em>remove</em> the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3878a0025e8c2f44f8ed2e7064cd5188574e7d6c/crates/wasi/src/preview2/pipe.rs#L297\">call to abort inside <code>AsyncWriteStream</code>'s drop impl</a>. I don't see why an immediate abort would be necessary, and if there is such a use case, it seems like it should be opt-in. </p>\n<p>If we remove the call to <code>abort</code>, then the spawned task will still cleanly exit. Either the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3878a0025e8c2f44f8ed2e7064cd5188574e7d6c/crates/wasi/src/preview2/pipe.rs#L237\">call to <code>recv</code></a> will return <code>None</code> because the channel is empty and the sender has been dropped <em>OR</em> a normal expected exit occurs <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3878a0025e8c2f44f8ed2e7064cd5188574e7d6c/crates/wasi/src/preview2/pipe.rs#L243\">here</a> or <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3878a0025e8c2f44f8ed2e7064cd5188574e7d6c/crates/wasi/src/preview2/pipe.rs#L256\">here</a>. </p>\n</blockquote>",
        "id": 382875736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691485235
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811#issuecomment-1669862510\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811\">issue #6811</a>:</p>\n<blockquote>\n<p>The main consequence of letting things run in the background though was that each wasm guest could keep work arbitrarily sitting in the background for a long time, meaning that work could accumulate over time by accident before it's all flushed out and finished. The thinking was the we could add the ability for a host to explicitly opt-in to daemon-ing the background work to keep it going but additionally allow hosts to learn about the background work via some object too.</p>\n<p>In light of this we may want to revisit the considered default though since I think it's true that almost all the time having background work won't harm anyone or anything. So while I think it'd still be good to package up the background work for an embedder to get access to, @pchickey what do you think about switch to not-abort-by-default?</p>\n</blockquote>",
        "id": 383002436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691509373
    },
    {
        "content": "<p>elliottt closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6811\">issue #6811</a>:</p>\n<blockquote>\n<p>Moving streams to async has introduced a race condition. The <code>AsyncWriteStream</code> often gets dropped before the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bb3734bd724683cce8aa20de0cad9f9086e07b50/crates/wasi/src/preview2/pipe.rs#L237\">receiver inside the spawned task</a> has time to receive a message.</p>\n<p>This makes sense as there's nothing to tie the spawned task's completion to the <code>Store</code> that contains the <code>AsyncWriteStream</code>. It's very easy to drop the <code>Store</code> before any handlers are allowed to run to completition.</p>\n<h3>Test Case</h3>\n<p>Take the following \"hello world\" case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"p\">{</span><span class=\"n\">Table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"cp\">#[tokio::main]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Table</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">command</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Data</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span>: <span class=\"nc\">Table</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span>: <span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">Table</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">table_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">Table</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ctx_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The <code>example.wasm</code> file is just a simple wasm component that has one export <code>hello</code> which just uses Rust's <code>println!</code> to print \"Hello, World!\" to stdout. </p>\n<p>This technically works, but only by coincidence. If we see when the \"Hello, World\" gets flushed to stdout, it happens <em>after</em> the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bb3734bd724683cce8aa20de0cad9f9086e07b50/crates/wasi/src/preview2/pipe.rs#L113-L129\">spawned task</a> that is handling IO is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bb3734bd724683cce8aa20de0cad9f9086e07b50/crates/wasi/src/preview2/pipe.rs#L297\">aborted in the Drop handler</a>. </p>\n<h3>Steps to Reproduce</h3>\n<p>You can reproduce those by running the above example with a local checkout of <code>wasmtime</code>. Simply add a logging statement to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bb3734bd724683cce8aa20de0cad9f9086e07b50/crates/wasi/src/preview2/pipe.rs#L295-L299\">drop handler of <code>AsyncWriteStream</code></a> and you'll see that the drop (and thus the cancellation of the spawned task) happens <em>before</em> the output to stdout. </p>\n<p>I've found this to be reliably reproducible in a user visible way if the wasm binary prints more than 1 line of text to stdout. The first line usually gets successfully flushed, but the second does not. Adding something to slow down the execution of the runtime can eliminates the bug (e.g., adding <code>tokio::time::sleep(std::time::Duration::from_millis(1)).await;</code> after the function call, gets rid of the race condition). </p>\n<p>I first caught this bug first when upgrading <a href=\"https://github.com/fermyon/spin\">Spin</a> to the latest version of <code>wasmtime</code>. The exported function would complete and the containing <code>Store</code> would be dropped before the underlying <code>AsyncWriteStream</code>'s spawned task had a chance to receive the bytes to be written to the inner <code>AsyncWrite</code> type. Only every ~10th invocation would see the spawned task actually process the bytes before the <code>AsyncWriteStream</code>'s drop handler canceled the task.</p>\n<h3>Expected Results</h3>\n<p>I would expect that there would be some mechanism for ensuring that ongoing async writes complete before the <code>Store</code> is dropped.</p>\n<h3>Versions and Environment</h3>\n<p>This is the case on the <a href=\"https://github.com/bytecodealliance/wasmtime/commit/bb3734bd724683cce8aa20de0cad9f9086e07b50\">latest version of <code>wasmtime</code></a> as of this writing.</p>\n</blockquote>",
        "id": 390572614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694542469
    }
]