[
    {
        "content": "<p>cdisselkoen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595\">Issue #1595</a>:</p>\n<blockquote>\n<p>On a clean git checkout of wasmtime <code>master</code>, I'm getting test failures when running <code>cargo test</code> in the <code>cranelift/wasm</code> directory.  At a minimum, I'm getting failures in the tests <code>use_name_section</code>, <code>use_fallthrough_return</code>, and <code>testsuite</code>.  All three failures appear to be due to lacking support for riscv64, causing failures in the <code>unwrap</code>s on <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\">this line</a> or <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\">this line</a>.</p>\n<p>Am I doing something wrong / missing a step?  Do some crate features need to be enabled in order for tests to pass?  I got the same results with plain <code>cargo test</code> and with <code>cargo test --all-features</code>.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Detailed test output:&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>&gt; cargo test --all-features\n    Finished test [unoptimized + debuginfo] target(s) in 0.08s\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/cranelift_wasm-42dfb56b7188030c\n\nrunning 3 tests\ntest func_translator::tests::small2 ... ok\ntest func_translator::tests::small1 ... ok\ntest func_translator::tests::infloop ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/wasm_testsuite-7a98d34c19ece58b\n\nrunning 3 tests\ntest use_name_section ... FAILED\ntest use_fallthrough_return ... FAILED\ntest testsuite ... FAILED\n\nfailures:\n\n---- use_name_section stdout ----\nthread &#39;use_name_section&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:60:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n---- use_fallthrough_return stdout ----\nthread &#39;use_fallthrough_return&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n---- testsuite stdout ----\n=== ../wasmtests/arith.wat ===\nthread &#39;testsuite&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n\nfailures:\n    testsuite\n    use_fallthrough_return\n    use_name_section\n\ntest result: FAILED. 0 passed; 3 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass &#39;--test wasm_testsuite&#39;\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>Tested on both macOS and Linux, on x86_64.  Wasmtime commit <code>6cd92f913</code>.</p>\n</blockquote>",
        "id": 195253325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587768447
    },
    {
        "content": "<p>cdisselkoen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595\">Issue #1595</a>:</p>\n<blockquote>\n<p>On a clean git checkout of wasmtime <code>master</code>, I'm getting test failures when running <code>cargo test</code> in the <code>cranelift/wasm</code> directory.  At a minimum, I'm getting failures in the tests <code>use_name_section</code>, <code>use_fallthrough_return</code>, and <code>testsuite</code>.  All three failures appear to be due to lacking support for riscv64, causing failures in the <code>unwrap</code>s on <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\">this line</a> or <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\">this line</a>.</p>\n<p>Am I doing something wrong / missing a step?  Do some crate features need to be enabled in order for tests to pass?  I got the same results with plain <code>cargo test</code> and with <code>cargo test --all-features</code>.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Detailed test output:&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>&gt; cargo test --all-features\n    Finished test [unoptimized + debuginfo] target(s) in 0.08s\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/cranelift_wasm-42dfb56b7188030c\n\nrunning 3 tests\ntest func_translator::tests::small2 ... ok\ntest func_translator::tests::small1 ... ok\ntest func_translator::tests::infloop ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/wasm_testsuite-7a98d34c19ece58b\n\nrunning 3 tests\ntest use_name_section ... FAILED\ntest use_fallthrough_return ... FAILED\ntest testsuite ... FAILED\n\nfailures:\n\n---- use_name_section stdout ----\nthread &#39;use_name_section&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:60:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n---- use_fallthrough_return stdout ----\nthread &#39;use_fallthrough_return&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n---- testsuite stdout ----\n=== ../wasmtests/arith.wat ===\nthread &#39;testsuite&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n\nfailures:\n    testsuite\n    use_fallthrough_return\n    use_name_section\n\ntest result: FAILED. 0 passed; 3 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass &#39;--test wasm_testsuite&#39;\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>Tested on both macOS and Linux, on x86_64.  Wasmtime commit <code>6cd92f913</code>.</p>\n</blockquote>",
        "id": 195253327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587768447
    },
    {
        "content": "<p>cdisselkoen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595\">Issue #1595</a>:</p>\n<blockquote>\n<p>On a clean git checkout of wasmtime <code>master</code>, I'm getting test failures when running <code>cargo test</code> in the <code>cranelift/wasm</code> directory.  At a minimum, I'm getting failures in the tests <code>use_name_section</code>, <code>use_fallthrough_return</code>, and <code>testsuite</code>.  All three failures appear to be due to lacking support for riscv64, causing failures in the <code>unwrap</code>s on <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\">this line</a> or <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\">this line</a>.</p>\n<p>Am I doing something wrong / missing a step?  Do some crate features need to be enabled in order for tests to pass?  I got the same results with plain <code>cargo test</code> and with <code>cargo test --all-features</code>.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Detailed test output:&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>&gt; cargo test --all-features\n    Finished test [unoptimized + debuginfo] target(s) in 0.08s\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/cranelift_wasm-42dfb56b7188030c\n\nrunning 3 tests\ntest func_translator::tests::small2 ... ok\ntest func_translator::tests::small1 ... ok\ntest func_translator::tests::infloop ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/wasm_testsuite-7a98d34c19ece58b\n\nrunning 3 tests\ntest use_name_section ... FAILED\ntest use_fallthrough_return ... FAILED\ntest testsuite ... FAILED\n\nfailures:\n\n---- use_name_section stdout ----\nthread &#39;use_name_section&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:60:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n---- use_fallthrough_return stdout ----\nthread &#39;use_fallthrough_return&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n---- testsuite stdout ----\n=== ../wasmtests/arith.wat ===\nthread &#39;testsuite&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n\nfailures:\n    testsuite\n    use_fallthrough_return\n    use_name_section\n\ntest result: FAILED. 0 passed; 3 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass &#39;--test wasm_testsuite&#39;\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>Tested on both macOS and Linux, on x86_64.  Wasmtime commit <code>6cd92f913</code>.</p>\n</blockquote>",
        "id": 195253328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587768447
    },
    {
        "content": "<p>cdisselkoen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595\">Issue #1595</a>:</p>\n<blockquote>\n<p>On a clean git checkout of wasmtime <code>master</code>, I'm getting test failures when running <code>cargo test</code> in the <code>cranelift/wasm</code> directory.  At a minimum, I'm getting failures in the tests <code>use_name_section</code>, <code>use_fallthrough_return</code>, and <code>testsuite</code>.  All three failures appear to be due to lacking support for riscv64, causing failures in the <code>unwrap</code>s on <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\">this line</a> or <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\">this line</a>.</p>\n<p>Am I doing something wrong / missing a step?  Do some crate features need to be enabled in order for tests to pass?  I got the same results with plain <code>cargo test</code> and with <code>cargo test --all-features</code>.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Detailed test output:&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>&gt; cargo test --all-features\n    Finished test [unoptimized + debuginfo] target(s) in 0.08s\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/cranelift_wasm-42dfb56b7188030c\n\nrunning 3 tests\ntest func_translator::tests::small2 ... ok\ntest func_translator::tests::small1 ... ok\ntest func_translator::tests::infloop ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/wasm_testsuite-7a98d34c19ece58b\n\nrunning 3 tests\ntest use_name_section ... FAILED\ntest use_fallthrough_return ... FAILED\ntest testsuite ... FAILED\n\nfailures:\n\n---- use_name_section stdout ----\nthread &#39;use_name_section&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:60:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n---- use_fallthrough_return stdout ----\nthread &#39;use_fallthrough_return&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n---- testsuite stdout ----\n=== ../wasmtests/arith.wat ===\nthread &#39;testsuite&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n\nfailures:\n    testsuite\n    use_fallthrough_return\n    use_name_section\n\ntest result: FAILED. 0 passed; 3 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass &#39;--test wasm_testsuite&#39;\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>Tested on both macOS and Linux, on x86_64, with Rust 1.43.0.  Wasmtime commit <code>6cd92f913</code>.</p>\n</blockquote>",
        "id": 195253463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587768560
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595#issuecomment-619275116\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595#issuecomment-619275116\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595\">Issue #1595</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 195254837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587769802
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595#issuecomment-619808525\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595#issuecomment-619808525\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595\">Issue #1595</a>:</p>\n<blockquote>\n<p>Thanks for opening an issue! I suspect that when run in automation, we run it from an higher-up directory, which will select the feature that enables codegen support for all the architectures. So if tested independently, it might not work; but tested with the rest of Cranelift, it should work fine. Probably the fix is to enable the riscv codegen backend for testing.</p>\n</blockquote>",
        "id": 195384199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587974737
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595#issuecomment-619808525\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595#issuecomment-619808525\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595\">Issue #1595</a>:</p>\n<blockquote>\n<p>Thanks for opening an issue! I suspect that when run in automation, we run it from an higher-up directory, which will select the feature that enables codegen support for all the architectures. So if tested independently, it might not work; but tested with the rest of Cranelift, it should work fine. Probably the fix is to enable the riscv codegen backend for testing of cranelift-wasm.</p>\n</blockquote>",
        "id": 195384209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587974746
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1595\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1595\">Issue #1595</a>:</p>\n<blockquote>\n<p>On a clean git checkout of wasmtime <code>master</code>, I'm getting test failures when running <code>cargo test</code> in the <code>cranelift/wasm</code> directory.  At a minimum, I'm getting failures in the tests <code>use_name_section</code>, <code>use_fallthrough_return</code>, and <code>testsuite</code>.  All three failures appear to be due to lacking support for riscv64, causing failures in the <code>unwrap</code>s on <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L60\">this line</a> or <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\" title=\"https://github.com/bytecodealliance/wasmtime/blob/6cd92f91328b538076f8d724ee2a205edf5b70fc/cranelift/wasm/tests/wasm_testsuite.rs#L94\">this line</a>.</p>\n<p>Am I doing something wrong / missing a step?  Do some crate features need to be enabled in order for tests to pass?  I got the same results with plain <code>cargo test</code> and with <code>cargo test --all-features</code>.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Detailed test output:&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>&gt; cargo test --all-features\n    Finished test [unoptimized + debuginfo] target(s) in 0.08s\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/cranelift_wasm-42dfb56b7188030c\n\nrunning 3 tests\ntest func_translator::tests::small2 ... ok\ntest func_translator::tests::small1 ... ok\ntest func_translator::tests::infloop ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running /usr/local/home/cdisselk/wasmtime/target/debug/deps/wasm_testsuite-7a98d34c19ece58b\n\nrunning 3 tests\ntest use_name_section ... FAILED\ntest use_fallthrough_return ... FAILED\ntest testsuite ... FAILED\n\nfailures:\n\n---- use_name_section stdout ----\nthread &#39;use_name_section&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:60:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n---- use_fallthrough_return stdout ----\nthread &#39;use_fallthrough_return&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n---- testsuite stdout ----\n=== ../wasmtests/arith.wat ===\nthread &#39;testsuite&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SupportDisabled&#39;, cranelift/wasm/tests/wasm_testsuite.rs:94:15\n\n\nfailures:\n    testsuite\n    use_fallthrough_return\n    use_name_section\n\ntest result: FAILED. 0 passed; 3 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass &#39;--test wasm_testsuite&#39;\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>Tested on both macOS and Linux, on x86_64, with Rust 1.43.0.  Wasmtime commit <code>6cd92f913</code>.</p>\n</blockquote>",
        "id": 195482941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588026509
    }
]