[
    {
        "content": "<p>Froidoh edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>EDIT:</p>\n<p>So it all boils down to: </p>\n<blockquote>\n<p>how can I invoke a function on an interface?!</p>\n</blockquote>\n<p>ORIGINAL:</p>\n<p>Okay, so I am a total noob with <code>wasm(time)</code> and my mistake is totally a layer 8 problem. But after digging I couldn't find the solution, so here I am, opening an issue (sorry for that!)</p>\n<p>What I want:</p>\n<p>I want to leverage <code>cargo component</code> and <code>wasmtime</code> to create a simple plugin system experiment.</p>\n<p>So I created a new (binary) webassembly component via: <code>cargo component new test-plugin</code>.</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"test-plugin\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">wit-bindgen-rt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.26.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"bitflags\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"k\">[profile.release]</span>\n<span class=\"n\">codegen-units</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">opt-level</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"s\"</span>\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span>\n<span class=\"n\">strip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span>\n<span class=\"n\">lto</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span>\n\n<span class=\"c1\"># [package.metadata.component]</span>\n<span class=\"c1\"># package = \"component:test-plugin\"</span>\n\n<span class=\"k\">[package.metadata.component.target]</span>\n<span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"wit\"</span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"test-plugin\"</span>\n\n<span class=\"k\">[package.metadata.component.dependencies]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package justatest:testplugin@0.1.0;\n\ninterface greetings {\n  hello: func(s: string) -&gt; string;\n}\n\nworld test-plugin {\n  export greetings;\n}\n</code></pre></div>\n<p>And my <code>src/main.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(warnings)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">justatest</span><span class=\"p\">::</span><span class=\"n\">testplugin</span><span class=\"p\">::</span><span class=\"n\">greetings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Hello {s}\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">with_types_in</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">);</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello from test-plugin!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I then generated the binary via <code>cargo component build --release</code> and let it run via:</p>\n<blockquote>\n<p>wasmtime target/wasm32-wasi/release/test-plugin.wasm <br>\nHello from test-plugin!</p>\n</blockquote>\n<p>As expected. Via the <code>wasmtime</code> cli I cannot <code>--invoke</code> any functions on a <code>wasm32-wasi</code> webassembly module (at least that's what the cli tells me)...</p>\n<p>So then I created a <code>simple-host</code> as a \"normal\", \"native\" rust project, compiled via <code>llvm</code>:</p>\n<p>Cargo.toml:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"simple-host\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1.0.86\"</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"22.0.0\"</span>\n<span class=\"n\">wasmtime-wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"22.0.0\"</span>\n<span class=\"c1\">#wit-component = \"0.211.1\"</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\">fn convert_to_component(path: impl AsRef&lt;Path&gt;) -&gt; wasmtime::Result&lt;Vec&lt;u8&gt;&gt; {</span>\n\n<span class=\"cm\">    let bytes = &amp;std::fs::read(&amp;path).context(\"failed to read input file\")?;</span>\n<span class=\"cm\">    wit_component::ComponentEncoder::default()</span>\n<span class=\"cm\">        .module(&amp;bytes)?</span>\n<span class=\"cm\">        .encode()</span>\n<span class=\"cm\">}</span>\n<span class=\"cm\">*/</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">//config.async_support(true);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// Load the component from disk</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"../test-plugin/target/wasm32-wasi/release/test-plugin.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">//println!(\"bytes: {bytes:?}\");</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// As `cargo component` by default builds as `wasm32-wasi` webassembly module, we need to also include `wasmtime-wasi` and provide certain native functionality (in my own words)</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"--help\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasi</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// Configure the linker</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// The component expects one import `name` that</span>\n<span class=\"w\">    </span><span class=\"c1\">// takes no params and returns a string</span>\n\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"c1\">//.func_wrap(\"name\", |_store, _params: ()| Ok((String::from(\"Alice\"),)))?</span>\n<span class=\"w\">        </span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"have linker\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// Instantiate the component</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// TODO: find out whethere there is a way to programmatically \"explore\" an instance,</span>\n<span class=\"w\">    </span><span class=\"c1\">// to see it's \"API\" so to speak.</span>\n<span class=\"w\">    </span><span class=\"c1\">// Could be useful for generating some docs or whatnot</span>\n<span class=\"w\">    </span><span class=\"cm\">/*</span>\n<span class=\"cm\">    let mut exports = instance.exports(&amp;mut store);</span>\n<span class=\"cm\">    let root = exports.instance(\"greetings\").expect(\"greetings to exist\");</span>\n<span class=\"cm\">    let modules = root.modules();</span>\n<span class=\"cm\">    for (name, module) in modules {</span>\n<span class=\"cm\">        println!(\"module: {module:?}\")</span>\n<span class=\"cm\">    }</span>\n<span class=\"cm\">    println!(\"no modules?!\");</span>\n<span class=\"cm\">    */</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"have instance\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"cm\">/*</span>\n<span class=\"cm\">    // TODO: I definitely misunderstood modules, because \"greetings\" does not exist</span>\n<span class=\"cm\">    let module = instance</span>\n<span class=\"cm\">        .get_module(&amp;mut store, \"greetings\")</span>\n<span class=\"cm\">        .expect(\"module not found\");</span>\n<span class=\"cm\">    */</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Call the `greet` function</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"hello export not found\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())];</span>\n<span class=\"w\">    </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"s\">\"freund nachtigall\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())],</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Greeting: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When I run this I get a <code>panic</code> for <code>hello export not found</code>.</p>\n<p>What am I doing wrong? I also tried with: <code>greetings.hello</code> and <code>greetings:hello</code> for <code>get_func</code> but to no avail.</p>\n<p>On the other hand, if I create a library component via <code>cargo component new test-plugin-lib --lib</code> which creates a default wit file and impl for it:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package component:test-plugin-lib;\n\n/// An example world for the component to target.\nworld example {\n    export hello-world: func() -&gt; string;\n}\n</code></pre></div>\n<p>and then load this and call it like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello-world\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"hello export not found\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())];</span>\n<span class=\"w\">    </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[],</span>\n<span class=\"w\">        </span><span class=\"c1\">//&amp;[Val::String(\"freund nachtigall\".to_string())],</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Greeting: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>it works like a charm.</p>\n<p>So I guess my problem boils down to one or two things:</p>\n<p>1) How do I get a function in an <code>interface</code> programmatically like <code>hello</code> if the wit file looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">justatest</span><span class=\"p\">:</span><span class=\"nc\">testplugin</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">greetings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">hello</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">greetings</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>~2) Maybe it's different when it's a \"<code>binary</code>\" webassembly component in contrast to a lib?~</p>\n<p>I can answer that one: It's not!</p>\n<p>If I add a <code>helloto</code> function like to:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package justatest:testplugin@0.1.0;\n\ninterface greetings {\n  hello: func(s: string) -&gt; string;\n}\n\nworld test-plugin {\n  export greetings;\n  export helloto: func(name: string) -&gt; string;\n}\n</code></pre></div>\n<p>and implement it like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(warnings)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">justatest</span><span class=\"p\">::</span><span class=\"n\">testplugin</span><span class=\"p\">::</span><span class=\"n\">greetings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">WorldGuest</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Hello {s}\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WorldGuest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">helloto</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Bonjour {name}\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">with_types_in</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">);</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello from test-plugin!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>then I can invoke <code>helloto</code> just fine :)</p>\n<p>So it all boils down to: </p>\n<blockquote>\n<p>how can I invoke a function on an interface?!</p>\n</blockquote>\n</blockquote>",
        "id": 446018735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718953429
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857#issuecomment-2182978287\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>Hi! You did a lot of figuring things out in your journey to this point, in a brand new technology with docs we know could use some work, so great job so far. It looks like the bit missing here is that when <code>hello</code> is in an interface called <code>greetings</code>, so first you must get the <code>greetings</code> instance out of your root instance: <code>instance.exports(&amp;mut store).instance(\"greetings\").expect(\"root has greetings instance\").typed_func(\"hello\")</code>.</p>\n<p>An alternative is to use <code>wasmtime::component::bindgen!</code> in your host, which will generate, among other things, a <code>TestPlugin</code> struct, which has typed, string-name-free methods to access all of the world's exports. You can use <code>cargo doc --document-private-items</code> to see the extent of what that macro generates, or if <code>WASMTIME_DEBUG_BINDGEN</code> is set during build, the generated code will be in <code>OUT_DIR</code>. That generated code should be able to replace everything in your host from println!(have linker) down.</p>\n</blockquote>",
        "id": 446107164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718984002
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857#issuecomment-2182978287\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>Hi! You did a lot of figuring things out in your journey to this point, in a brand new technology with docs we know could use some work, so great job so far. It looks like the bit missing here is that when <code>hello</code> is in an interface called <code>greetings</code>, so first you must get the <code>greetings</code> instance out of your root instance: <code>instance.exports(&amp;mut store).instance(\"greetings\").expect(\"root has greetings instance\").typed_func(\"hello\")</code>.</p>\n<p>An alternative is to use <code>wasmtime::component::bindgen!</code> in your host, which will generate, among other things, a <code>TestPlugin</code> struct, which has typed, string-name-free methods to access all of the world's exports. You can use <code>cargo doc --document-private-items</code> to see the extent of what that macro generates, or if <code>WASMTIME_DEBUG_BINDGEN</code> is set during build, the generated code will be in <code>OUT_DIR</code>. That generated code should be able to replace everything in your host from println!(have linker) down.</p>\n<p>The other reason to recommend bindgen is that wasmtime 23 will change the way instance exports work in order to make reuse more efficient, so the answer in the first paragraph will need to be rewritten (<a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.Instance.html\">https://docs.wasmtime.dev/api/wasmtime/component/struct.Instance.html</a>, you'll need to call, pardon shorthand, <code>get_typed_func(get_export(get_export(\"greetings\"), \"hello\"))</code>)</p>\n</blockquote>",
        "id": 446108234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718984323
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857#issuecomment-2182978287\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>Hi! You did a lot of figuring things out in your journey to this point, in a brand new technology with docs we know could use some work, so great job so far. It looks like the bit missing here is that when <code>hello</code> is in an interface called <code>greetings</code>, so first you must get the <code>greetings</code> instance out of your root instance: <code>instance.exports(&amp;mut store).instance(\"greetings\").expect(\"root has greetings instance\").typed_func(\"hello\")</code>.</p>\n<p>An alternative is to use <code>wasmtime::component::bindgen!</code> in your host, which will generate, among other things, a <code>TestPlugin</code> struct, which has typed, string-name-free methods to access all of the world's exports. You can use <code>cargo doc --document-private-items</code> to see the extent of what that macro generates, or if <code>WASMTIME_DEBUG_BINDGEN</code> is set during build, the generated code will be in <code>OUT_DIR</code>. That generated code should be able to replace everything in your host from println!(have linker) down.</p>\n<p>The other reason to recommend bindgen is that wasmtime 23 will change the way instance exports work in order to make reuse more efficient, so the answer in the first paragraph will need to be rewritten (<a href=\"https://docs.wasmtime.dev/api/wasmtime/component/struct.Instance.html\">https://docs.wasmtime.dev/api/wasmtime/component/struct.Instance.html</a>, you'll need to call, pardon shorthand, <code>get_typed_func(get_export(get_export(\"greetings\"), \"hello\"))</code>)</p>\n<p>One final suggestion - its fine to file issues like these, and also we invite this sort of question / debugging journey on <a href=\"https://bytecodealliance.zulipchat.com/\">https://bytecodealliance.zulipchat.com/</a>.</p>\n</blockquote>",
        "id": 446109538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718984692
    },
    {
        "content": "<p>Froidoh <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857#issuecomment-2183007231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>@pchickey thanks for taking the time to answer!</p>\n<p>The problem with the macro approach is that I want to write a dynamic plugin system, so I don't know the wasm components aka plugins that are available at runtime.</p>\n<p>I would definitely prefer the \"non stringified function calls\" but, correct me if wrong, that's currently not possible then.</p>\n<p>What I would need to get this dynamically at runtike working is something like a \"interpret this component as an instance of this (rust) trait\" or a \"cast\" so to speak </p>\n</blockquote>",
        "id": 446110493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718984966
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857#issuecomment-2183066172\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>The bindgen! happens at rustc compile time, yes, so you have to know the world required to run your component at that time.</p>\n<p>If you have some known set of rust traits that are your cast targets, then you might be able to generate code for the set of worlds that correspond to those targets. You could use bindgen! for that, but you don't have to - bindgen is just a convenience on top of the public wasmtime API, so you can get the same type safety by just using Instance exports and typed_func: wasmtime will check at runtime to make sure the component you load corresponds to those types. So, there are many ways to go about solving this depending on your use case.</p>\n</blockquote>",
        "id": 446119388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718987289
    },
    {
        "content": "<p>cryarchy <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857#issuecomment-2241234962\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>@pchickey I have a wasm component whose interface is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">docs</span><span class=\"p\">:</span><span class=\"nc\">adder</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I have tried to invoke the exported add function using the following Rust code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">ResourceTable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Create an engine and store</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ServerWasiView</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">wasi</span><span class=\"p\">));</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Load the component</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-wasip1/release/add.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a linker</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">ServerWasiView</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Add WASI to the linker</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Instantiate the component</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">possible_names</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"s\">\"add#add\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"docs:adder/add@0.1.0#add\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"adder/add@0.1.0#add\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"/add@0.1.0#add\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"add@0.1.0#add\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"#add\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"add\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">possible_names</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Found add instance with name: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Try to get the add function with different possible names</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"docs:adder/add@0.1.0#add\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"adder/add@0.1.0#add\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"/add@0.1.0#add\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add@0.1.0#add\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"#add\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"add function not found\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Found add function\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Prepare the arguments and results</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"n\">S32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)];</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Call the function</span>\n<span class=\"w\">    </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"n\">S32</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"n\">S32</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Extract the result</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"n\">S32</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Unexpected result type\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"5 + 3 = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">ServerWasiView</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ServerWasiView</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ServerWasiView</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>as per your suggestion above and have not managed to get a reference to the exported function in the host code. What am I missing?</p>\n<p>I have created a <a href=\"#narrow/stream/217126-wasmtime/topic/How.20do.20I.20get.20an.20interface.20method.20programmatically.3F/near/452865805\">help request topic on Zulip</a>.</p>\n</blockquote>",
        "id": 452866675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721496029
    },
    {
        "content": "<p>cryarchy <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857#issuecomment-2242754959\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>Thank you, @pchickey.</p>\n<p>The solution you provided above is correct. It still took me a while to get things working right. There were some naming mismatches that I kept missing.</p>\n<p>I have figured out what I was doing wrong and provided <a href=\"https://github.com/cryarchy/add-workspace-basic\">an example for future users who run into the same issue.</a></p>\n</blockquote>",
        "id": 453156348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721648609
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>EDIT:</p>\n<p>So it all boils down to: </p>\n<blockquote>\n<p>how can I invoke a function on an interface?!</p>\n</blockquote>\n<p>ORIGINAL:</p>\n<p>Okay, so I am a total noob with <code>wasm(time)</code> and my mistake is totally a layer 8 problem. But after digging I couldn't find the solution, so here I am, opening an issue (sorry for that!)</p>\n<p>What I want:</p>\n<p>I want to leverage <code>cargo component</code> and <code>wasmtime</code> to create a simple plugin system experiment.</p>\n<p>So I created a new (binary) webassembly component via: <code>cargo component new test-plugin</code>.</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"test-plugin\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">wit-bindgen-rt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.26.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"bitflags\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"k\">[profile.release]</span>\n<span class=\"n\">codegen-units</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">opt-level</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"s\"</span>\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span>\n<span class=\"n\">strip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span>\n<span class=\"n\">lto</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span>\n\n<span class=\"c1\"># [package.metadata.component]</span>\n<span class=\"c1\"># package = \"component:test-plugin\"</span>\n\n<span class=\"k\">[package.metadata.component.target]</span>\n<span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"wit\"</span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"test-plugin\"</span>\n\n<span class=\"k\">[package.metadata.component.dependencies]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package justatest:testplugin@0.1.0;\n\ninterface greetings {\n  hello: func(s: string) -&gt; string;\n}\n\nworld test-plugin {\n  export greetings;\n}\n</code></pre></div>\n<p>And my <code>src/main.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(warnings)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">justatest</span><span class=\"p\">::</span><span class=\"n\">testplugin</span><span class=\"p\">::</span><span class=\"n\">greetings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Hello {s}\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">with_types_in</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">);</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello from test-plugin!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I then generated the binary via <code>cargo component build --release</code> and let it run via:</p>\n<blockquote>\n<p>wasmtime target/wasm32-wasi/release/test-plugin.wasm <br>\nHello from test-plugin!</p>\n</blockquote>\n<p>As expected. Via the <code>wasmtime</code> cli I cannot <code>--invoke</code> any functions on a <code>wasm32-wasi</code> webassembly module (at least that's what the cli tells me)...</p>\n<p>So then I created a <code>simple-host</code> as a \"normal\", \"native\" rust project, compiled via <code>llvm</code>:</p>\n<p>Cargo.toml:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"simple-host\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1.0.86\"</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"22.0.0\"</span>\n<span class=\"n\">wasmtime-wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"22.0.0\"</span>\n<span class=\"c1\">#wit-component = \"0.211.1\"</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\">fn convert_to_component(path: impl AsRef&lt;Path&gt;) -&gt; wasmtime::Result&lt;Vec&lt;u8&gt;&gt; {</span>\n\n<span class=\"cm\">    let bytes = &amp;std::fs::read(&amp;path).context(\"failed to read input file\")?;</span>\n<span class=\"cm\">    wit_component::ComponentEncoder::default()</span>\n<span class=\"cm\">        .module(&amp;bytes)?</span>\n<span class=\"cm\">        .encode()</span>\n<span class=\"cm\">}</span>\n<span class=\"cm\">*/</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">//config.async_support(true);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// Load the component from disk</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"../test-plugin/target/wasm32-wasi/release/test-plugin.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">//println!(\"bytes: {bytes:?}\");</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// As `cargo component` by default builds as `wasm32-wasi` webassembly module, we need to also include `wasmtime-wasi` and provide certain native functionality (in my own words)</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"--help\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasi</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// Configure the linker</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// The component expects one import `name` that</span>\n<span class=\"w\">    </span><span class=\"c1\">// takes no params and returns a string</span>\n\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"c1\">//.func_wrap(\"name\", |_store, _params: ()| Ok((String::from(\"Alice\"),)))?</span>\n<span class=\"w\">        </span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"have linker\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// Instantiate the component</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// TODO: find out whethere there is a way to programmatically \"explore\" an instance,</span>\n<span class=\"w\">    </span><span class=\"c1\">// to see it's \"API\" so to speak.</span>\n<span class=\"w\">    </span><span class=\"c1\">// Could be useful for generating some docs or whatnot</span>\n<span class=\"w\">    </span><span class=\"cm\">/*</span>\n<span class=\"cm\">    let mut exports = instance.exports(&amp;mut store);</span>\n<span class=\"cm\">    let root = exports.instance(\"greetings\").expect(\"greetings to exist\");</span>\n<span class=\"cm\">    let modules = root.modules();</span>\n<span class=\"cm\">    for (name, module) in modules {</span>\n<span class=\"cm\">        println!(\"module: {module:?}\")</span>\n<span class=\"cm\">    }</span>\n<span class=\"cm\">    println!(\"no modules?!\");</span>\n<span class=\"cm\">    */</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"have instance\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"cm\">/*</span>\n<span class=\"cm\">    // TODO: I definitely misunderstood modules, because \"greetings\" does not exist</span>\n<span class=\"cm\">    let module = instance</span>\n<span class=\"cm\">        .get_module(&amp;mut store, \"greetings\")</span>\n<span class=\"cm\">        .expect(\"module not found\");</span>\n<span class=\"cm\">    */</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Call the `greet` function</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"hello export not found\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())];</span>\n<span class=\"w\">    </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"s\">\"freund nachtigall\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())],</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Greeting: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When I run this I get a <code>panic</code> for <code>hello export not found</code>.</p>\n<p>What am I doing wrong? I also tried with: <code>greetings.hello</code> and <code>greetings:hello</code> for <code>get_func</code> but to no avail.</p>\n<p>On the other hand, if I create a library component via <code>cargo component new test-plugin-lib --lib</code> which creates a default wit file and impl for it:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package component:test-plugin-lib;\n\n/// An example world for the component to target.\nworld example {\n    export hello-world: func() -&gt; string;\n}\n</code></pre></div>\n<p>and then load this and call it like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello-world\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"hello export not found\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())];</span>\n<span class=\"w\">    </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[],</span>\n<span class=\"w\">        </span><span class=\"c1\">//&amp;[Val::String(\"freund nachtigall\".to_string())],</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Greeting: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>it works like a charm.</p>\n<p>So I guess my problem boils down to one or two things:</p>\n<p>1) How do I get a function in an <code>interface</code> programmatically like <code>hello</code> if the wit file looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">justatest</span><span class=\"p\">:</span><span class=\"nc\">testplugin</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">greetings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">hello</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">greetings</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>~2) Maybe it's different when it's a \"<code>binary</code>\" webassembly component in contrast to a lib?~</p>\n<p>I can answer that one: It's not!</p>\n<p>If I add a <code>helloto</code> function like to:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package justatest:testplugin@0.1.0;\n\ninterface greetings {\n  hello: func(s: string) -&gt; string;\n}\n\nworld test-plugin {\n  export greetings;\n  export helloto: func(name: string) -&gt; string;\n}\n</code></pre></div>\n<p>and implement it like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(warnings)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">justatest</span><span class=\"p\">::</span><span class=\"n\">testplugin</span><span class=\"p\">::</span><span class=\"n\">greetings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">WorldGuest</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Hello {s}\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WorldGuest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">helloto</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Bonjour {name}\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">with_types_in</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">);</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello from test-plugin!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>then I can invoke <code>helloto</code> just fine :)</p>\n<p>So it all boils down to: </p>\n<blockquote>\n<p>how can I invoke a function on an interface?!</p>\n</blockquote>\n</blockquote>",
        "id": 453236577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721669600
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857#issuecomment-2243471225\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8857\">issue #8857</a>:</p>\n<blockquote>\n<p>I think the questions here have been answered so I'm going to close this, but if there are other questions feel free to comment here or open a new issue.</p>\n</blockquote>",
        "id": 453236584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721669602
    }
]