[
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a> from <code>saulecabrera:winch-loads-stores</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6529\">https://github.com/bytecodealliance/wasmtime/issues/6529</a></p>\n<p>This patch adds support for all the instructions involving WebAssembly loads and stores for 32-bit memories. Given that the <code>memory64</code> proposal is not enabled by default, this patch doesn't include an implementation/tests for it; in theory minimal tweaks to the currrent implementation will be needed in order to support 64-bit memories.</p>\n<p>Implemenation-wise, this change, follows a similar pattern as Cranelift in order to calculate addresses for dynamic/static heaps, the main difference being that in some cases, doing less work at compile time is preferred; the current implemenation only checks for the general case of out-of-bounds access for dynamic heaps for example.</p>\n<p>Another important detail regarding the implementation, is the introduction of <code>MacroAssembler::wasm_load</code> and<br>\n<code>MacroAssembler::wasm_store</code>, which internally use a common implemenation for loads and stores, with the only difference that the <code>wasm_*</code> variants set the right flags in order to signal that these operations are not trusted and might trap.</p>\n<p>Finally, given that this change introduces support for the last set of instructions missing for a Wasm MVP, it removes most of Winch's copy of the spectest suite, and switches over to using the official test suite where possible (for tests that don't use SIMD or Reference Types).</p>\n<p>Follow-up items:</p>\n<ul>\n<li>Before doing any deep benchmarking I'm planning on landing a couple of improvements regarding compile times that I've identified in parallel to this change.</li>\n<li>The <code>imports.wast</code> tests are disabled because I've identified a bug with <code>call_indirect</code>, which is not related to this change and exists in main.</li>\n<li>Find a way to run the <code>tests/all/memory.rs</code> (or perhaps most of integration tests) with Winch.</li>\n</ul>\n<p>--<br>\nprtest:full</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 420448980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707396313
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>.</p>",
        "id": 420448986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707396314
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>.</p>",
        "id": 420448987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707396314
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>.</p>",
        "id": 420448988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707396314
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>.</p>",
        "id": 420448992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707396314
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>.</p>",
        "id": 420448993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707396314
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>.</p>",
        "id": 420448995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707396315
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#issuecomment-1934154752\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen, @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"fuzzing\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 420460521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707399901
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>:</p>\n<blockquote>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">https://github.com/bytecodealliance/wasmtime/issues/6528</a></p>\n<p>This patch adds support for all the instructions involving WebAssembly loads and stores for 32-bit memories. Given that the <code>memory64</code> proposal is not enabled by default, this patch doesn't include an implementation/tests for it; in theory minimal tweaks to the currrent implementation will be needed in order to support 64-bit memories.</p>\n<p>Implemenation-wise, this change, follows a similar pattern as Cranelift in order to calculate addresses for dynamic/static heaps, the main difference being that in some cases, doing less work at compile time is preferred; the current implemenation only checks for the general case of out-of-bounds access for dynamic heaps for example.</p>\n<p>Another important detail regarding the implementation, is the introduction of <code>MacroAssembler::wasm_load</code> and<br>\n<code>MacroAssembler::wasm_store</code>, which internally use a common implemenation for loads and stores, with the only difference that the <code>wasm_*</code> variants set the right flags in order to signal that these operations are not trusted and might trap.</p>\n<p>Finally, given that this change introduces support for the last set of instructions missing for a Wasm MVP, it removes most of Winch's copy of the spectest suite, and switches over to using the official test suite where possible (for tests that don't use SIMD or Reference Types).</p>\n<p>Follow-up items:</p>\n<ul>\n<li>Before doing any deep benchmarking I'm planning on landing a couple of improvements regarding compile times that I've identified in parallel to this change.</li>\n<li>The <code>imports.wast</code> tests are disabled because I've identified a bug with <code>call_indirect</code>, which is not related to this change and exists in main.</li>\n<li>Find a way to run the <code>tests/all/memory.rs</code> (or perhaps most of integration tests) with Winch.</li>\n</ul>\n<p>--<br>\nprtest:full</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 420461515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400180
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#pullrequestreview-1870912539\">PR review</a>:</p>\n<blockquote>\n<p>So happy to see this PR, congratulations on closing out #6528!</p>\n<p>The structure of this change makes sense to me, so I went ahead and made a bunch of smaller suggestions.</p>\n</blockquote>",
        "id": 420562533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436684
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#pullrequestreview-1870912539\">PR review</a>:</p>\n<blockquote>\n<p>So happy to see this PR, congratulations on closing out #6528!</p>\n<p>The structure of this change makes sense to me, so I went ahead and made a bunch of smaller suggestions.</p>\n</blockquote>",
        "id": 420562535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483518701\">PR review comment</a>:</p>\n<blockquote>\n<p><code>index</code> is passed out unmodified as the first result here, would it be reasonable to change this return type to just <code>ImmOffset</code>?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>) -&gt; ImmOffset {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 420562536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483385689\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it make sense to invert this case, and name the unsupported ops at this point? That would also give us a nice list for what ops still need to be implemented.</p>\n</blockquote>",
        "id": 420562537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483526599\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this argument necessary? There's already a <code>masm</code> argument, which could be used to call <code>scratch_reg</code> again.</p>\n</blockquote>",
        "id": 420562538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483489268\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// Loads the bounds of the dynamic heap.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 420562539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483689176\">PR review comment</a>:</p>\n<blockquote>\n<p>This pattern shows up in a few places, would it be easy to special case the <code>0</code> offset and avoid the <code>add</code>?</p>\n</blockquote>",
        "id": 420562540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483635660\">PR review comment</a>:</p>\n<blockquote>\n<p>What about casting where <code>ptr_size</code> is defined instead? I think would leave all other uses of <code>ptr_size</code> unchanged.</p>\n</blockquote>",
        "id": 420562541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483717612\">PR review comment</a>:</p>\n<blockquote>\n<p>Was this change unintentional?</p>\n</blockquote>",
        "id": 420562542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483528746\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// Load the requested heap address into the specified destination register.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 420562543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483659080\">PR review comment</a>:</p>\n<blockquote>\n<p>I think you can remove the <code>&lt;M&gt;</code> type argument by changing how the <code>Masm</code> impl is referenced (unless the intent is to reuse this implementation with a different <code>Masm</code> impl in the future). I like this a little bit more, as seeing <code>self.store_impl&lt;Self&gt;</code> at a call site was a little surprising :)</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    fn store_impl(&amp;mut self, src: RegImm, dst: Address, size: OperandSize, flags: MemFlags)\n    {\n        let scratch = &lt;Self as Masm&gt;::ABI::scratch_reg();\n        let float_scratch = &lt;Self as Masm&gt;::ABI::float_scratch_reg();\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 420562544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483529919\">PR review comment</a>:</p>\n<blockquote>\n<p>What do you think about calling this function <code>load_heap_addr_unchecked</code>? Similarly, we could rename <code>check_addr</code> to <code>load_heap_addr_checked</code> so that it's clear what the difference between the two is?</p>\n</blockquote>",
        "id": 420562545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1483665117\">PR review comment</a>:</p>\n<blockquote>\n<p>The <code>trusted_flags</code> field doesn't look like it's modified once created, are there plans in the future to mutate this throughout the lifetime of the <code>MacroAssembler</code>, or would this be better extracted out as a constant?</p>\n</blockquote>",
        "id": 420562546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707436685
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>.</p>",
        "id": 420668319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707490556
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#pullrequestreview-1872588984\">PR review</a>.</p>",
        "id": 420668640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707490641
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1484433175\">PR review comment</a>:</p>\n<blockquote>\n<p>I've done a small refactoring here, and aside from inverting the list, I've disabled the Wasm proposals that are not supported yet.</p>\n</blockquote>",
        "id": 420668643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707490641
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#pullrequestreview-1872590078\">PR review</a>.</p>",
        "id": 420668751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707490672
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1484433823\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, makes sense to me!</p>\n</blockquote>",
        "id": 420668752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707490672
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#pullrequestreview-1872590863\">PR review</a>.</p>",
        "id": 420668857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707490696
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1484434301\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah good call, I do like the proposed naming better. </p>\n</blockquote>",
        "id": 420668858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707490696
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1484435311\">PR review comment</a>:</p>\n<blockquote>\n<p>Good catch, yeah definitely unintentional. </p>\n</blockquote>",
        "id": 420669024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707490746
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#pullrequestreview-1872592562\">PR review</a>.</p>",
        "id": 420669025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707490746
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#pullrequestreview-1872605344\">PR review</a>.</p>",
        "id": 420670206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707491117
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1484442994\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, this could definitely be improved I guess, the current implementation is already an improvement to what was there before in the sense that we were creating a <code>MemFlags::trusted</code> per load / store, now it's created once per MacroAssembler (and by definition once per function). Given that the flags won't be modified, I think that sharing both (trusted and untrusted) through all the functions might make sense. That said, it was not evident to me how to go about the constant route, were you thinking about introducing something like <code>OnceCell</code>? Having a pure constant won't work given that <code>MemFlags::trusted</code> is not <code>const</code>. Another approach could be to create a <code>MacroAssemblerContext</code> that is created verly early in the process and passed in to each <code>MacroAssembler</code> implementation and reused across all the functions. </p>\n</blockquote>",
        "id": 420670207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707491117
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#pullrequestreview-1872614160\">PR review</a>.</p>",
        "id": 420671035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707491384
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1484448311\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, a bit unfortunate, there are a couple of patterns like this throughout Winch. I was hoping that we would be able to get rid of them once we start exploring the optimizations that we could apply ; right now this would require introducing at least a new abstraction at the <code>CodeGenContext</code> to enable peeking at constants at certain points of the code generation. This is not too difficult I think, but before getting into any optimizations for the generated code, I was hoping to make all the possible improvements to the compilation times to have a good sense of what our baseline is. </p>\n</blockquote>",
        "id": 420671036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707491384
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1484448311\">PR review comment</a>.</p>",
        "id": 420671579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707491527
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1484448311\">PR review comment</a>.</p>",
        "id": 420671630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707491545
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#issuecomment-1936106300\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>:</p>\n<blockquote>\n<p>@elliottt Thanks for the detailed review and all the great suggestions, I've resolved most of them, excluding two of them which I've left open for further discussion. Happy to continue the discussion and/or create follow-up PRs!</p>\n</blockquote>",
        "id": 420671936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707491615
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">PR #7894</a>.</p>",
        "id": 420683678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707494958
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#pullrequestreview-1872820784\">PR review</a>.</p>",
        "id": 420692067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707497453
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894#discussion_r1484572767\">PR review comment</a>:</p>\n<blockquote>\n<p>I made a change that should allow this in #7903 -- it turned out to be easier than I expected to make the MemFlags have a <code>const</code>-compatible interface :)</p>\n</blockquote>",
        "id": 420692068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707497453
    }
]