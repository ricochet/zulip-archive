[
    {
        "content": "<p>sunfishcode opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2712\">Issue #2712</a>:</p>\n<blockquote>\n<p>In WebAssembly, a <code>br</code> instruction with a depth equal the the current control-flow stack depth is equivalent to a <code>return</code>. However, in the current fuel implementation, these are handled differently:</p>\n<ul>\n<li><code>return</code> consumes 0 fuel, while a <code>br</code> to the control-flow stack depth consumes 1.</li>\n<li><code>return</code> updates the fuel usage field in <code>VMInterrupts</code>, while a <code>br</code>, <code>br_if</code>, or <code>br_table</code> to the control-flow stack depth does not, even though they also exit the function</li>\n</ul>\n</blockquote>",
        "id": 229308742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615214392
    },
    {
        "content": "<p>sunfishcode labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2712\">Issue #2712</a>:</p>\n<blockquote>\n<p>In WebAssembly, a <code>br</code> instruction with a depth equal the the current control-flow stack depth is equivalent to a <code>return</code>. However, in the current fuel implementation, these are handled differently:</p>\n<ul>\n<li><code>return</code> consumes 0 fuel, while a <code>br</code> to the control-flow stack depth consumes 1.</li>\n<li><code>return</code> updates the fuel usage field in <code>VMInterrupts</code>, while a <code>br</code>, <code>br_if</code>, or <code>br_table</code> to the control-flow stack depth does not, even though they also exit the function</li>\n</ul>\n</blockquote>",
        "id": 229308743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615214392
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2712#issuecomment-792916133\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2712\">Issue #2712</a>:</p>\n<blockquote>\n<p>FWIW the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8bd1c33fec08f27bfde02121b3a06d470a2eefe5/crates/cranelift/src/func_environ.rs#L492-L508\">current heuristic for fuel consumed per-op</a> is pretty primitive. It's <a href=\"https://github.com/bytecodealliance/lucet/blob/fb52d58ac88fb17940602dce5b7352fd91bf8a33/lucetc/src/function.rs#L249-L280\">based on the lucet one</a> but slightly adjusted.</p>\n<p>The thinking behind <code>return</code> taking 0 fuel is that the cost was already incurred with the original <code>call</code>, but we could pretty easily just update it to cost 1 fuel as well. In general my hope is that folks don't rely on the precise amount of fuel  consumed by instructions too too much because it can make changes to the code generator brittle and/or future peformance improvements somewhat more difficult.</p>\n<p>For the second point, though, I believe that all of these branching/control-flow opcodes update fuel correctly, even if <code>br</code> goes to the exit of the function. Was a bug seen in the wild though?</p>\n</blockquote>",
        "id": 229338338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615223836
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2712#issuecomment-792947528\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2712\">Issue #2712</a>:</p>\n<blockquote>\n<p>Ah, no, this is just from me diving into the middle of the code. Good point about <code>br</code> going to the exit and being handled there.</p>\n</blockquote>",
        "id": 229343697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615225840
    }
]