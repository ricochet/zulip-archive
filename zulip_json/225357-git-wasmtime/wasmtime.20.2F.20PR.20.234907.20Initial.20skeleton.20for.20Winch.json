[
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change introduces the initial skeleton for Winch, the \"baseline\" compiler, discussed <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">https://github.com/bytecodealliance/rfcs/pull/28</a></p>\n<p>The skeleton contains the just the necessary code for the main abstractions to support the following:</p>\n<ul>\n<li>Function prologue and epilogue (excluding stack checks)</li>\n<li>Calculation of local slots</li>\n<li>An initial pass on a generic MacroAssembler interface</li>\n<li>An initial pass on a x64 Assembler</li>\n<li>A simple CLI tools to compile WebAssembly programs (<code>crates/winch/src/main.rs</code>)</li>\n<li>String based emission for programs that use the following WebAssembly instructions: <code>i32.add</code>, <code>local.get</code>, <code>local.set</code></li>\n</ul>\n<p>As of this change, the high-level structure of the compiler is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"o\">+-----------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+---------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Compiler</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">--</span>-&gt; <span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">ISA</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">---------------------------------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+---------------------+</span><span class=\"w\">                                                                </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"n\">v</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+-----+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">+&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Registers</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ABI</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"n\">CodeGen</span><span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MacroAssembler</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stack</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"o\">+-----------+-----+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"o\">^</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"o\">+-----+------------------------------------------------------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"o\">+---------------------+</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Register</span><span class=\"w\"> </span><span class=\"n\">Allocation</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"o\">+---------------------+</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p><strong>Next steps</strong></p>\n<p>As mentioned above, this change doesn't use any of Cranelift's backends for code emission, yet. These are the immediate next steps after landing this change:</p>\n<ul>\n<li>Extract the relevant Cranelift pieces into the <code>cranelift_asm</code> crate, which will be used by Winch</li>\n<li>Swap the string based implementation of the x64 assembler and use the assembler provided by <code>cranelift_asm</code></li>\n<li>Add initial support for arm64 through <code>cranelift_asm</code></li>\n<li>Increase test coverage</li>\n</ul>\n<hr>\n<p><strong>Misc</strong> </p>\n<p>Winch's CLI can be used by running `cargo run -- path/to/file.wat --target=&lt;target&gt;</p>\n<p>Here's a set of WebAssembly programs and their corresponding x64 output:<br>\n&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 add&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt; i32 add with local operators &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$foo</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$bar</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rdx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 with function arguments &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nb\">i32.add</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">edi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">esi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rcx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the <br>\n[message truncated]</li>\n</ul>\n</blockquote>",
        "id": 304595570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666058655
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 304657850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666092356
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 304658704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666092683
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 304659005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666092810
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change introduces the initial skeleton for Winch, the \"baseline\" compiler, discussed <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">https://github.com/bytecodealliance/rfcs/pull/28</a></p>\n<p>The skeleton contains the just the necessary code for the main abstractions to support the following:</p>\n<ul>\n<li>Function prologue and epilogue (excluding stack checks)</li>\n<li>Calculation of local slots</li>\n<li>An initial pass on a generic MacroAssembler interface</li>\n<li>An initial pass on a x64 Assembler</li>\n<li>A simple CLI tools to compile WebAssembly programs (<code>crates/winch/src/main.rs</code>)</li>\n<li>String based emission for programs that use the following WebAssembly instructions: <code>i32.add</code>, <code>local.get</code>, <code>local.set</code></li>\n</ul>\n<p>As of this change, the high-level structure of the compiler is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"o\">+-----------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+---------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Compiler</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">--</span>-&gt; <span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">ISA</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">---------------------------------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+---------------------+</span><span class=\"w\">                                                                </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"n\">v</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+-----+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">+&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Registers</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ABI</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"n\">CodeGen</span><span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MacroAssembler</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stack</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"o\">+-----------+-----+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"o\">^</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"o\">+-----+------------------------------------------------------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"o\">+---------------------+</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Register</span><span class=\"w\"> </span><span class=\"n\">Allocation</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"o\">+---------------------+</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p><strong>Next steps</strong></p>\n<p>As mentioned above, this change doesn't use any of Cranelift's backends for code emission, yet. These are the immediate next steps after landing this change:</p>\n<ul>\n<li>Extract the relevant Cranelift pieces into the <code>cranelift_asm</code> crate, which will be used by Winch</li>\n<li>Swap the string based implementation of the x64 assembler and use the assembler provided by <code>cranelift_asm</code></li>\n<li>Add initial support for arm64 through <code>cranelift_asm</code></li>\n<li>Increase test coverage, and include tests in CI. Opted to not do that in this change since the emission mechanism will change, so it might be easier to wait and add verification tests once we are using Cranelift's backends. </li>\n</ul>\n<hr>\n<p><strong>Misc</strong> </p>\n<p>Winch's CLI can be used by running `cargo run -- path/to/file.wat --target=&lt;target&gt;</p>\n<p>Here's a set of WebAssembly programs and their corresponding x64 output:<br>\n&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 add&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt; i32 add with local operators &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$foo</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$bar</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rdx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 with function arguments &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nb\">i32.add</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">edi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">esi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rcx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, <br>\n[message truncated]</li>\n</ul>\n</blockquote>",
        "id": 304660315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666093321
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 304809704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666116700
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change introduces the initial skeleton for Winch, the \"baseline\" compiler, discussed <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">https://github.com/bytecodealliance/rfcs/pull/28</a></p>\n<p>The skeleton contains the just the necessary code for the main abstractions to support the following:</p>\n<ul>\n<li>Function prologue and epilogue (excluding stack checks)</li>\n<li>Calculation of local slots</li>\n<li>An initial pass on a generic MacroAssembler interface</li>\n<li>An initial pass on a x64 Assembler</li>\n<li>A simple CLI tools to compile WebAssembly programs (<code>crates/winch/src/main.rs</code>)</li>\n<li>String based emission for programs that use the following WebAssembly instructions: <code>i32.add</code>, <code>local.get</code>, <code>local.set</code></li>\n</ul>\n<p>As of this change, the high-level structure of the compiler is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"o\">+-----------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+---------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Compiler</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">--</span>-&gt; <span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">ISA</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">---------------------------------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+---------------------+</span><span class=\"w\">                                                                </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"n\">v</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+-----+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">+&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Registers</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ABI</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"n\">CodeGen</span><span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MacroAssembler</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stack</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"o\">+-----------+-----+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"o\">^</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                                                                    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"o\">+-----+------------------------------------------------------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"o\">+---------------------+</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Register</span><span class=\"w\"> </span><span class=\"n\">Allocation</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"o\">+---------------------+</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p><strong>Next steps</strong></p>\n<p>As mentioned above, this change doesn't use any of Cranelift's backends for code emission, yet. These are the immediate next steps after landing this change:</p>\n<ul>\n<li>Extract the relevant Cranelift pieces into the <code>cranelift_asm</code> crate, which will be used by Winch</li>\n<li>Swap the string based implementation of the x64 assembler and use the assembler provided by <code>cranelift_asm</code></li>\n<li>Add initial support for arm64 through <code>cranelift_asm</code></li>\n<li>Increase test coverage, and include tests in CI. Opted to not do that in this change since the emission mechanism will change, so it might be easier to wait and add verification tests once we are using Cranelift's backends. </li>\n</ul>\n<hr>\n<p><strong>Misc</strong> </p>\n<p>Winch's CLI can be used by running <code>cargo run -- path/to/file.wat --target=&lt;target&gt;</code></p>\n<p>Here's a set of WebAssembly programs and their corresponding x64 output:<br>\n&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 add&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt; i32 add with local operators &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$foo</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$bar</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rdx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 with function arguments &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nb\">i32.add</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">edi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">esi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rcx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases,<br>\n[message truncated]</li>\n</ul>\n</blockquote>",
        "id": 304810344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666116937
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change introduces the initial skeleton for Winch, the \"baseline\" compiler, discussed <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">https://github.com/bytecodealliance/rfcs/pull/28</a></p>\n<p>The skeleton contains the just the necessary code for the main abstractions to support the following:</p>\n<ul>\n<li>Function prologue and epilogue (excluding stack checks)</li>\n<li>Calculation of local slots</li>\n<li>An initial pass on a generic MacroAssembler interface</li>\n<li>An initial pass on a x64 Assembler</li>\n<li>A simple CLI tools to compile WebAssembly programs (<code>crates/winch/src/main.rs</code>)</li>\n<li>String based emission for programs that use the following WebAssembly instructions: <code>i32.add</code>, <code>local.get</code>, <code>local.set</code></li>\n</ul>\n<p>As of this change, the high-level structure of the compiler is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">       </span><span class=\"o\">+--------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+-----------------------+</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Compiler</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">--</span>-&gt; <span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">ISA</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Registers</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ABI</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGen</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Register</span><span class=\"w\"> </span><span class=\"n\">Allocation</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MacroAssembler</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stack</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                      </span><span class=\"o\">^</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                          </span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+------------------------------------------+</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p><strong>Next steps</strong></p>\n<p>As mentioned above, this change doesn't use any of Cranelift's backends for code emission, yet. These are the immediate next steps after landing this change:</p>\n<ul>\n<li>Extract the relevant Cranelift pieces into the <code>cranelift_asm</code> crate, which will be used by Winch</li>\n<li>Swap the string based implementation of the x64 assembler and use the assembler provided by <code>cranelift_asm</code></li>\n<li>Add initial support for arm64 through <code>cranelift_asm</code></li>\n<li>Increase test coverage, and include tests in CI. Opted to not do that in this change since the emission mechanism will change, so it might be easier to wait and add verification tests once we are using Cranelift's backends. </li>\n</ul>\n<hr>\n<p><strong>Misc</strong> </p>\n<p>Winch's CLI can be used by running <code>cargo run -- path/to/file.wat --target=&lt;target&gt;</code></p>\n<p>Here's a set of WebAssembly programs and their corresponding x64 output:<br>\n&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 add&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt; i32 add with local operators &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$foo</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$bar</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rdx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 with function arguments &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nb\">i32.add</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">edi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">esi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rcx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 304817495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666118196
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change introduces the initial skeleton for Winch, the \"baseline\" compiler, discussed <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">https://github.com/bytecodealliance/rfcs/pull/28</a></p>\n<p>The skeleton contains the just the necessary code for the main abstractions to support the following:</p>\n<ul>\n<li>Function prologue and epilogue (excluding stack checks)</li>\n<li>Calculation of local slots</li>\n<li>An initial pass on a generic MacroAssembler interface</li>\n<li>An initial pass on a x64 Assembler</li>\n<li>A simple CLI tool to compile WebAssembly programs (<code>crates/winch/src/main.rs</code>)</li>\n<li>String based emission for programs that use the following WebAssembly instructions: <code>i32.add</code>, <code>local.get</code>, <code>local.set</code></li>\n</ul>\n<p>As of this change, the high-level structure of the compiler is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">       </span><span class=\"o\">+--------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+-----------------------+</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Compiler</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">--</span>-&gt; <span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">ISA</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Registers</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ABI</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGen</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Register</span><span class=\"w\"> </span><span class=\"n\">Allocation</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MacroAssembler</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stack</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                      </span><span class=\"o\">^</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                          </span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+------------------------------------------+</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p><strong>Next steps</strong></p>\n<p>As mentioned above, this change doesn't use any of Cranelift's backends for code emission, yet. These are the immediate next steps after landing this change:</p>\n<ul>\n<li>Extract the relevant Cranelift pieces into the <code>cranelift_asm</code> crate, which will be used by Winch</li>\n<li>Swap the string based implementation of the x64 assembler and use the assembler provided by <code>cranelift_asm</code></li>\n<li>Add initial support for arm64 through <code>cranelift_asm</code></li>\n<li>Increase test coverage, and include tests in CI. Opted to not do that in this change since the emission mechanism will change, so it might be easier to wait and add verification tests once we are using Cranelift's backends. </li>\n</ul>\n<hr>\n<p><strong>Misc</strong> </p>\n<p>Winch's CLI can be used by running <code>cargo run -- path/to/file.wat --target=&lt;target&gt;</code></p>\n<p>Here's a set of WebAssembly programs and their corresponding x64 output:<br>\n&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 add&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt; i32 add with local operators &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$foo</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$bar</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rdx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 with function arguments &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nb\">i32.add</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">edi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">esi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rcx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 304817673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666118266
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 304821465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666119633
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 304823856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666120515
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change introduces the initial skeleton for Winch, the \"baseline\" compiler, discussed <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">https://github.com/bytecodealliance/rfcs/pull/28</a></p>\n<p>The skeleton contains the just the necessary code for the main abstractions to support the following:</p>\n<ul>\n<li>Function prologue and epilogue (excluding stack checks)</li>\n<li>Calculation of local slots</li>\n<li>An initial pass on a generic MacroAssembler interface</li>\n<li>An initial pass on a x64 Assembler</li>\n<li>A simple CLI tool to compile WebAssembly programs (<code>crates/winch/src/main.rs</code>)</li>\n<li>String based emission for programs that use the following WebAssembly instructions: <code>i32.add</code>, <code>local.get</code>, <code>local.set</code></li>\n</ul>\n<p>As of this change, the high-level structure of the compiler is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">       </span><span class=\"o\">+--------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+-----------------------+</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Compiler</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">--</span>-&gt; <span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">ISA</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Registers</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ABI</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGen</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Register</span><span class=\"w\"> </span><span class=\"n\">Allocation</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MacroAssembler</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stack</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                      </span><span class=\"o\">^</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                          </span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+------------------------------------------+</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p><strong>Next steps</strong></p>\n<p>As mentioned above, this change doesn't use any of Cranelift's backends for code emission, yet. These are the immediate next steps after landing this change:</p>\n<ul>\n<li>Extract the relevant Cranelift pieces into the <code>cranelift_asm</code> crate, which will be used by Winch</li>\n<li>Swap the string based implementation of the x64 assembler and use the assembler provided by <code>cranelift_asm</code></li>\n<li>Add initial support for arm64 through <code>cranelift_asm</code></li>\n<li>Increase test coverage, and include tests in CI. Opted to not do that in this change since the emission mechanism will change, so it might be easier to wait and add verification tests once we are using Cranelift's backends. </li>\n<li>There are a handful of <code>TODO</code>s in the code that are expected to be addressed in the next iterations. I left them there as a reminder mostly; but if preferred they could be removed and placed into issues instead. </li>\n</ul>\n<hr>\n<p><strong>Misc</strong> </p>\n<p>Winch's CLI can be used by running <code>cargo run -- path/to/file.wat --target=&lt;target&gt;</code></p>\n<p>Here's a set of WebAssembly programs and their corresponding x64 output:<br>\n&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 add&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt; i32 add with local operators &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$foo</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$bar</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rdx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 with function arguments &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nb\">i32.add</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">edi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">esi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rcx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 304824121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666120632
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change introduces the initial skeleton for Winch, the \"baseline\" compiler, discussed <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">https://github.com/bytecodealliance/rfcs/pull/28</a></p>\n<p>The skeleton contains the just the necessary code for the main abstractions to support the following:</p>\n<ul>\n<li>Function prologue and epilogue (excluding stack checks)</li>\n<li>Calculation of local slots</li>\n<li>An initial pass on a generic MacroAssembler interface</li>\n<li>An initial pass on a x64 Assembler</li>\n<li>A simple CLI tool to compile WebAssembly programs (<code>crates/winch/src/main.rs</code>)</li>\n<li>String based emission for programs that use the following WebAssembly instructions: <code>i32.add</code>, <code>local.get</code>, <code>local.set</code></li>\n</ul>\n<p>As of this change, the high-level structure of the compiler is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">       </span><span class=\"o\">+--------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+-----------------------+</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Compiler</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">--</span>-&gt; <span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">ISA</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Registers</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ABI</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGen</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Register</span><span class=\"w\"> </span><span class=\"n\">Allocation</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MacroAssembler</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stack</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                      </span><span class=\"o\">^</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                          </span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+------------------------------------------+</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p><strong>Next steps</strong></p>\n<p>As mentioned above, this change doesn't use any of Cranelift's backends for code emission, yet. These are the immediate next steps after landing this change:</p>\n<ul>\n<li>Extract the relevant Cranelift pieces into the <code>cranelift_asm</code> crate, which will be used by Winch</li>\n<li>Swap the string based implementation of the x64 assembler and use the assembler provided by <code>cranelift_asm</code></li>\n<li>Add initial support for arm64 through <code>cranelift_asm</code></li>\n<li>Improve error handling</li>\n<li>Increase test coverage, and include tests in CI. Opted to not do that in this change since the emission mechanism will change, so it might be easier to wait and add verification tests once we are using Cranelift's backends. </li>\n<li>There are a handful of <code>TODO</code>s in the code that are expected to be addressed in the next iterations. I left them there as a reminder mostly; but if preferred they could be removed and placed into issues instead. </li>\n</ul>\n<hr>\n<p><strong>Misc</strong> </p>\n<p>Winch's CLI can be used by running <code>cargo run -- path/to/file.wat --target=&lt;target&gt;</code></p>\n<p>Here's a set of WebAssembly programs and their corresponding x64 output:<br>\n&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 add&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt; i32 add with local operators &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$foo</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$bar</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rdx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 with function arguments &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nb\">i32.add</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">edi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">esi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rcx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 304826743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666121630
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 304833069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666124136
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 304843077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666128185
    },
    {
        "content": "<p><strong>saulecabrera</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> as ready for review.</p>",
        "id": 304853671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666133281
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change introduces the initial skeleton for Winch, the \"baseline\" compiler, discussed <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">https://github.com/bytecodealliance/rfcs/pull/28</a></p>\n<p>The skeleton contains the just the necessary code for the main abstractions to support the following:</p>\n<ul>\n<li>Function prologue and epilogue (excluding stack checks)</li>\n<li>Calculation of local slots</li>\n<li>An initial pass on a generic MacroAssembler interface</li>\n<li>An initial pass on a x64 Assembler</li>\n<li>A simple CLI tool to compile WebAssembly programs (<code>crates/winch/src/main.rs</code>)</li>\n<li>String based emission for programs that use the following WebAssembly instructions: <code>i32.add</code>, <code>local.get</code>, <code>local.set</code></li>\n</ul>\n<p>This change doesn't fully integrate Winch with Wasmtime yet. </p>\n<p><strong>Overview</strong></p>\n<p>As of this change, the high-level structure of the compiler is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">       </span><span class=\"o\">+--------------------------------------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                                      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+-----------------------+</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Compiler</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">--</span>-&gt; <span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">ISA</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+</span><span class=\"w\">      </span><span class=\"o\">+--------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"o\">+&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Registers</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ABI</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGen</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Register</span><span class=\"w\"> </span><span class=\"n\">Allocation</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MacroAssembler</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stack</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"o\">+-----------+-----+---------+</span><span class=\"w\">     </span><span class=\"o\">+---------------------+</span><span class=\"w\">     </span><span class=\"o\">+----------------+</span><span class=\"w\">     </span><span class=\"o\">+-------+----------------+-------+</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\">                      </span><span class=\"o\">^</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                          </span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"o\">+----------------------+</span><span class=\"w\">     </span><span class=\"o\">+------------------------------------------+</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p><strong>Next steps</strong></p>\n<p>As mentioned above, this change doesn't use any of Cranelift's backends for code emission, yet. These are the immediate next steps after landing this change:</p>\n<ul>\n<li>Extract the relevant Cranelift pieces into the <code>cranelift_asm</code> crate, which will be used by Winch</li>\n<li>Swap the string based implementation of the x64 assembler and use the assembler provided by <code>cranelift_asm</code></li>\n<li>Add initial support for arm64 through <code>cranelift_asm</code></li>\n<li>Improve error handling</li>\n<li>Increase test coverage, and include tests in CI. Opted to not do that in this change since the emission mechanism will change, so it might be easier to wait and add verification tests once we are using Cranelift's backends. </li>\n<li>There are a handful of <code>TODO</code>s in the code that are expected to be addressed in the next iterations. I left them there as a reminder mostly; but if preferred they could be removed and placed into issues instead. </li>\n</ul>\n<hr>\n<p><strong>Misc</strong> </p>\n<p>Winch's CLI can be used by running <code>cargo run -- path/to/file.wat --target=&lt;target&gt;</code></p>\n<p>Here's a set of WebAssembly programs and their corresponding x64 output:<br>\n&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 add&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt; i32 add with local operators &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$foo</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$bar</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.add</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">qword</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rdx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Basic i32 with function arguments &lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nb\">i32.add</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">push</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"w\"></span>\n<span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">edi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"no\">esi</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">rsp</span><span class=\"w\"> </span><span class=\"err\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">eax</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">rcx</span><span class=\"w\"></span>\n<span class=\"nf\">add</span><span class=\"w\"> </span><span class=\"no\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"nf\">pop</span><span class=\"w\"> </span><span class=\"no\">rbp</span><span class=\"w\"></span>\n<span class=\"nf\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 304854967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666134077
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305027621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666207984
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1148201980\">PR review</a>.</p>",
        "id": 305038890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1148201980\">PR review</a>.</p>",
        "id": 305038891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999884687\">PR review comment</a>:</p>\n<blockquote>\n<p>I think there are two different ways we could go here: a <code>winch</code> crate in its own subdirectory, as <code>cranelift</code> is, or a <code>wasmtime-winch</code> crate in <code>crates/winch</code> with a version number synchronized with the rest of the Wasmtime crates. Given the dependency on <code>wasmtime-environ</code> below I think it's probably more properly considered part of the Wasmtime family of crates, but if eventually factor that out, then it at least in theory could be its own thing usable separately (in the way that Cranelift is).</p>\n<p>but tl;dr, a crate in <code>crates/$NAME</code> is part of Wasmtime and is named as <code>wasmtime-$NAME</code>...</p>\n</blockquote>",
        "id": 305038893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999885088\">PR review comment</a>:</p>\n<blockquote>\n<p>Comment here too that this is a temporary dependency?</p>\n</blockquote>",
        "id": 305038894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999888054\">PR review comment</a>:</p>\n<blockquote>\n<p><code>word_size</code> should probably be obtained from the <code>MacroAssembler</code> or other platform-specific trait?</p>\n</blockquote>",
        "id": 305038895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999889923\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we factor out this logic into a <code>memset</code> helper on the <code>MacroAssembler</code>, that either unrolls a short sequence of stores or calls a helper?</p>\n</blockquote>",
        "id": 305038896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999886321\">PR review comment</a>:</p>\n<blockquote>\n<p>I'll note here but applies generally: overall in doc-comments we've tried to stick to capitalized-with-periods-at-end style; many comments here don't end with a <code>.</code>.</p>\n</blockquote>",
        "id": 305038897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999891453\">PR review comment</a>:</p>\n<blockquote>\n<p>If we want to break the dependency on Wasmtime, the way to do that would be to have a <code>crates/winch</code> crate analogous to <code>crates/cranelift</code> (<code>wasmtime-cranelift</code>) that pulls in the actual Winch toplevel crate (just <code>winch</code>, or <code>winch-codegen</code> or somesuch) and impls this Wasmtime trait. We can always refactor in that direction later, but if you wanted to do it now I think that could be reasonable as well.</p>\n</blockquote>",
        "id": 305038898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999895996\">PR review comment</a>:</p>\n<blockquote>\n<p>s/Aarch/AArch64/</p>\n</blockquote>",
        "id": 305038900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999892766\">PR review comment</a>:</p>\n<blockquote>\n<p>References to SpiderMonkey are fine here but for the benefit of readers later, links to the source (via searchfox) might be helpful -- so e.g. starting out with \"This algorithm is similar to SpiderMonkey's frame layout logic in LINK... The main differences are: ...\"</p>\n</blockquote>",
        "id": 305038901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999895345\">PR review comment</a>:</p>\n<blockquote>\n<p>We should assert here that there is only one result type, right? (I think that wasmparser probably accepts multi-value Wasm by default now)</p>\n<p>Doing the fully general thing is fine to defer to later, but we'll need to support it at some point; in Cranelift our ABI uses the arg regs (x0-x7 on aarch64) as eight returns and then has a \"return value area\" on the stack for more than that...</p>\n</blockquote>",
        "id": 305038902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212147
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999896732\">PR review comment</a>:</p>\n<blockquote>\n<p>We could also have dynamic settings on the <code>TargetIsa</code> and skip the builder abstraction entirely -- in general I'm open to reconsidering complexity here (as more important than exact analogues to Cranelift design).</p>\n</blockquote>",
        "id": 305038903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999897399\">PR review comment</a>:</p>\n<blockquote>\n<p>s/endianess/endianness/ (not a real word or in dictionaries! But that's at least how Wikipedia spells it, in addition to <code>target_lexicon</code>)</p>\n</blockquote>",
        "id": 305038904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999895751\">PR review comment</a>:</p>\n<blockquote>\n<p>name should be <code>aarch64</code> here?</p>\n</blockquote>",
        "id": 305038905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999899037\">PR review comment</a>:</p>\n<blockquote>\n<p>s/byets/bytes/</p>\n</blockquote>",
        "id": 305038907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999901396\">PR review comment</a>:</p>\n<blockquote>\n<p>A general thought about two-arg vs three-arg forms (I recall having some sort of this conversation before, but don't remember all of our conclusions): would it make sense maybe to define the three-arg form as canonical in the trait, and then add a move here in the x64 implementation (mov dst, src1; add dst, src2)? And skip the move if dst == src1? That to me seems a little more general, as x64 can support it with no reduction in code quality (the move otherwise has to be generated by the translator driving the macroassembler) while it allows aarch64 and other three-arg RISCs to possibly generate better code.</p>\n</blockquote>",
        "id": 305038909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999903870\">PR review comment</a>:</p>\n<blockquote>\n<p>If we move this crate into <code>winch/codegen/</code>, then the <code>winch/</code> subdirectory can contain a crate <code>winch-cli</code> or <code>winch-tools</code>, just like Cranelift, and <code>winch/src/main.rs</code> is the main entrypoint for a <code>winch-cli</code> command. I like that a little more than having a <code>main.rs</code> inside Wasmtime's <code>crates/</code> that is unrelated to Wasmtime. Thoughts?</p>\n</blockquote>",
        "id": 305038911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999906673\">PR review comment</a>:</p>\n<blockquote>\n<p>It's worth writing a bit more about how this will extend to cases where we really do want machine-specific lowerings for Wasm ops; SIMD will be a forcing function there, if not before, I think. E.g., do we have a way for the Wasm-op translator to delegate to some machine-specific sequence of calls to masm? Or maybe we just put direct Wasm-op equivalents on MacroAssembler in that case and do the right thing on each platform. (Actually I like the latter approach best, so maybe it's OK that everything goes through this with no other conditionals/hooks.)</p>\n</blockquote>",
        "id": 305038912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999904841\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, here we go; commented on this above but now that I read this, I'm glad it's already captured! Happy to see this kept as a TODO, if you don't want to do the refactor right away (though I suspect it may be an easy change and easier now than later as the instructions are built out)</p>\n</blockquote>",
        "id": 305038913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999911461\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, now I understand why two-arg <code>add</code> is kind of OK actually: Wasm <code>add</code> (and other binops) always consume their args, so it's fine to overwrite <code>dst</code>. That actually makes a lot of sense to me, so maybe it's fine to keep two-arg forms of the masm methods, unless it later hinders lowerings of e.g. SIMD ops or address computations or ... that use temps.</p>\n</blockquote>",
        "id": 305038914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999907258\">PR review comment</a>:</p>\n<blockquote>\n<p>A short doc-comment on the approach would be helpful here -- something about how it's a single-pass allocator, taking registers from a freelist until we run out then spill everything (or something like that)?</p>\n</blockquote>",
        "id": 305038915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999913974\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm wondering if it's possible to avoid the complexity of these macros -- I don't like them for several reasons:</p>\n<ul>\n<li>It duplicates knowledge here (the whole set of Wasm opcodes) unnecessarily;</li>\n<li>It's very unreadable;</li>\n<li>The dispatching mechanism feels somewhat \"magic\" as a result, in a bad way (I can't trace what's going on).</li>\n</ul>\n<p>I think I'd prefer a toplevel translation driver loop that's something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">operators</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Operator</span>::<span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">visit_add</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>maybe with that <code>match</code> in a handwritten <code>fn visit()</code>. In other words, just expand out what this macro would generate by hand.</p>\n<p>Or said another way: it seems these macros are only used once. Given that, why not expand them in the place that they're used, to reduce complexity?</p>\n</blockquote>",
        "id": 305038916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r999898284\">PR review comment</a>:</p>\n<blockquote>\n<p>(Ah, reading further below to the x64 version, I see an assert there, so I think it's just missing here)</p>\n</blockquote>",
        "id": 305038917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666212148
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305135082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666267416
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1149119384\">PR review</a>.</p>",
        "id": 305135802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666267709
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1000540515\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm wondering if it's possible to avoid the complexity of these macros</p>\n</blockquote>\n<p>Yeah, definitely possible. I've addressed this in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907/commits/147f901ea630bb39b2a59fa956293c6c232f4e41\">https://github.com/bytecodealliance/wasmtime/pull/4907/commits/147f901ea630bb39b2a59fa956293c6c232f4e41</a></p>\n<p>FWIW, I like the visitor pattern recently introduced in <code>wasmparser</code>,  but when I was exploring introducing it I couldn't find a cleaner way to manage the support/unsupported operator sets, which led to duplication. I'd still like to keep the implementation of the <code>visit</code> function and each of the emitters in the <code>visit.rs</code> module though; I expect that this file is going to get very big as more operators are added.</p>\n</blockquote>",
        "id": 305135803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666267709
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1000540515\">PR review comment</a>.</p>",
        "id": 305137503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666268405
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1149403385\">PR review</a>.</p>",
        "id": 305165740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666276998
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1000733256\">PR review comment</a>:</p>\n<blockquote>\n<p>Given that winch's goal is compilation speed I might caution against going this direction since the <code>Operator</code>-based approach to both validation and translation is known to be double-digit percentage slower when at least purely validating and would likely have similar impact to the design of winch as well. </p>\n<p>I won't disagree that the enum-based approach is clearer to read when only a small handful of opcodes are implemented, but if you'd like I can try to help manage the macro-complexity. For example a reasonable approach might be:</p>\n<ul>\n<li>Use the macro to generate a visitor which recursively calls two other visitors. The first of the two visitors would be the validator itself and the second visitor could be a winch-defined visitor for per-op translations.</li>\n<li>The winch-defined visitor would be defined as usual with manually-written methods per op. You would then need to also maintain a macro with a list of handwritten ops so it could serve as acting as a catch-all for all unimplemented ops to return an error.</li>\n</ul>\n<p>Overall I'm hesitant to prioritize readability ergonomics here given the impact on speed. This is all equally applicable to Cranelift-based compilation but the speedup there is likely small-to-unmeasurable given that validation is such a small portion of translation time.</p>\n</blockquote>",
        "id": 305165741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666276998
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1149484454\">PR review</a>.</p>",
        "id": 305175190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666279589
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1000787893\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it's reasonable to do this since this is common for all ISAs and will be cleaner if we put this in the masm. A few clarification questions: </p>\n<ol>\n<li>With this logic you mean the entire piece to zero out a locals range?</li>\n<li>By helper, is your idea to have this in the masm module, but not necessarily part of the trait?</li>\n</ol>\n</blockquote>",
        "id": 305175192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666279589
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1149537363\">PR review</a>.</p>",
        "id": 305181049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666281224
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1000823576\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for chiming in here @alexcrichton; I wasn't aware of the speed benefits; I wrongly assumed the change was mostly around ergonomics. But taking a closer look at the details and <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/697#issuecomment-1210517471\">some of the comments</a>, your comment makes sense to me. </p>\n<p>I'll try out your suggestion, hopefully it'll be less complex that my previous attempt. </p>\n</blockquote>",
        "id": 305181050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666281224
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1149545349\">PR review</a>.</p>",
        "id": 305181837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666281458
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1000828866\">PR review comment</a>:</p>\n<blockquote>\n<p>I do realize that macros are nontrivial to work with for sure though and I'm still not 100% satisfied with where <code>wasmparser</code> ended up. If you'd like some help I'm happy to assist, or additionally at this point getting something working is probably more prudent than the highest levels of optimization, so I'm happy to try to come work on this small part as a follow-up if you'd prefer too</p>\n</blockquote>",
        "id": 305181838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666281458
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1149601077\">PR review</a>.</p>",
        "id": 305189283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666283571
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1000866957\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Given that winch's goal is compilation speed I might caution against going this direction since the Operator-based approach to both validation and translation is known to be double-digit percentage slower when at least purely validating and would likely have similar impact to the design of winch as well.</p>\n</blockquote>\n<p>Ah, OK, I think we're slightly talking past each other, and my hand expansion into a <code>match</code> was based on my misunderstanding of what this was generating (sorry!). My main point though wasn't about the actual matching/control-flow strategy, but about the way we generate it.</p>\n<p>Basically my point can be reduced to: there are some macros here; each macro is invoked once; can we inline the macros' expansion at that point instead? (Since this doesn't change what eventually gets compiled into the winch crate, it should be completely performance-neutral.) It didn't seem like the redundancy that the macros reduced (method args, ..) was that significant compared to the complexity of having the macros at all. And my confusion on what they were actually doing is only slightly more evidence of (either my denseness or...) the confusion imparted by macro use :-)</p>\n</blockquote>",
        "id": 305189285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666283571
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1149623123\">PR review</a>.</p>",
        "id": 305192812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666284538
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1000882549\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Basically my point can be reduced to: there are some macros here; each macro is invoked once; can we inline the macros' expansion at that point instead? </p>\n</blockquote>\n<p>I think that in this case, the approach would be to manually define each method expected by the visitor trait, and error out on the ones that are not supported. This satisfies the readability and the performance aspects, at the cost of having to manually define a method per operator.  I'd would still like to explore if there's a middle ground in which we are able to use macros without hindering too much the readability, (e.g. following Alex's suggestion of only having a single list of unsupported operators) and perhaps the complexity can be reduced further with comments? And, thinking a bit more, if we go with this approach, as we support more and more operators, this \"unsupported\" list is going to shrink over time. </p>\n</blockquote>",
        "id": 305192813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666284538
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305210829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666289941
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305211768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666290260
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305453741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666391215
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305453965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666391363
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1002225707\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah this is a good idea, I've completed this and I'm happy how things are shaping up. </p>\n</blockquote>",
        "id": 305454581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666391707
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1151610288\">PR review</a>.</p>",
        "id": 305454582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666391707
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1151611277\">PR review</a>.</p>",
        "id": 305454691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666391765
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1002226268\">PR review comment</a>:</p>\n<blockquote>\n<p>I've tackled this too, I think that it's better to do this earlier rather than later. </p>\n</blockquote>",
        "id": 305454692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666391766
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1002226892\">PR review comment</a>:</p>\n<blockquote>\n<p>I've tackled this as part of restructuring the multiple Winch crates, so now we have this tool in it's own directory, not related with Wasmtime at all.</p>\n<p>ref: <a href=\"https://github.com/bytecodealliance/wasmtime/commit/3c6f23acb5b992fe936ec4bd9dd28f8077bd8580\">https://github.com/bytecodealliance/wasmtime/commit/3c6f23acb5b992fe936ec4bd9dd28f8077bd8580</a></p>\n</blockquote>",
        "id": 305454820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666391872
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1151612128\">PR review</a>.</p>",
        "id": 305454822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666391873
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1002228344\">PR review comment</a>:</p>\n<blockquote>\n<p>Had a chat with Alex (thanks for the help Alex!) in which we were able to simplify the macro. @cfallin let me know if you have further thoughts on this; I'd like to keep a macro if possible, assuming that it will temporary as more operators are supported. If not I'm happy to manually define all the Visitor traits in a follow up PR. In general I feel that this is cleaner than my previous attempt. </p>\n</blockquote>",
        "id": 305455181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666392084
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1151613744\">PR review</a>.</p>",
        "id": 305455183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666392084
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1002231564\">PR review comment</a>:</p>\n<blockquote>\n<p>Right, the entire bit to zero a range of memory; and I think it'd be pretty reasonable to have it as a trait method on <code>MacroAssembler</code> that has a default body (which does some basic lowering to either unrolled stores or a loop that will work on any architecture). That also leaves room for more efficient implementations per machine later (e.g. <code>rep movsb</code> on x86 machines with <a href=\"https://stackoverflow.com/questions/43343231/enhanced-rep-movsb-for-memcpy\">ERMS</a> where that's fast, or something using SIMD, or ...).</p>\n</blockquote>",
        "id": 305455971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666392594
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1151618874\">PR review</a>.</p>",
        "id": 305455972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666392594
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1002228344\">PR review comment</a>.</p>",
        "id": 305458206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666393927
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1151647911\">PR review</a>.</p>",
        "id": 305458530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666394137
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1002250780\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, yeah, I'm happy with how this looks -- thank you for iterating on this!</p>\n</blockquote>",
        "id": 305458531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666394137
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1002228344\">PR review comment</a>.</p>",
        "id": 305459700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666394852
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305682862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666543308
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305683056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666543480
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305718440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666565074
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1002784396\">PR review comment</a>:</p>\n<blockquote>\n<p>Makes sense to me; I've factored this out into a method in the trait with a default implementation. I've also made the code a bit simpler. </p>\n</blockquote>",
        "id": 305718595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666565189
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1152386556\">PR review</a>.</p>",
        "id": 305718596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666565189
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305718850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666565397
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305794765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666609984
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305846700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666625504
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305847231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666625623
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1153376380\">PR review</a>.</p>",
        "id": 305849695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666626353
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1003476499\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, it's actually obtained <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2ab7f382d25d6d6caf68fb239e8e713093ed2f2b/winch/codegen/src/codegen.rs#L68\">from each ISA's ABI</a>.  I've modified this to make more obvious, so instead of passing in a u32 to the <code>CodeGen</code> constructor I'm passing in the <code>ABI</code>.</p>\n</blockquote>",
        "id": 305849704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666626354
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305849936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666626410
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1003476499\">PR review comment</a>.</p>",
        "id": 305850234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666626490
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305884767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666634610
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305889642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666636254
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305892782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666637446
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 305903294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666641290
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306018813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666701746
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1154738653\">PR review</a>.</p>",
        "id": 306019286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666701851
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1004438880\">PR review comment</a>:</p>\n<blockquote>\n<p>Done, thanks! Sorry for not noticing this earlier!</p>\n</blockquote>",
        "id": 306019287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666701851
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306019567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666701911
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306022650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666702747
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1004458140\">PR review comment</a>:</p>\n<blockquote>\n<p>That's indeed something that came to mind when looking at this piece of code. I didn't go really deep on this idea though; but I'm going to keep in mind for whe we need to introduce this for Winch. </p>\n</blockquote>",
        "id": 306023122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666702898
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1154767010\">PR review</a>.</p>",
        "id": 306023123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666702898
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1004458140\">PR review comment</a>.</p>",
        "id": 306023143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666702906
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306053923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666711776
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306057611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666712786
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306088212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666720225
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1155266804\">PR review</a>.</p>",
        "id": 306088563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666720334
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1004804736\">PR review comment</a>:</p>\n<blockquote>\n<p>Added, thanks! </p>\n</blockquote>",
        "id": 306088564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666720334
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306090200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666720865
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306135427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666736337
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1005012453\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I recall having some sort of this conversation before, but don't remember all of our conclusions</p>\n</blockquote>\n<p>Yeah we concluded that three-arg form is probably better and that we should go with it. My original intention was to do this in the next iteration once I add some actual codegen for <code>aarch64</code> but while doing the refactoring I took care of it. </p>\n</blockquote>",
        "id": 306135710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666736460
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1155609943\">PR review</a>.</p>",
        "id": 306135711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666736460
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1005012596\">PR review comment</a>:</p>\n<blockquote>\n<p>Agreed, I've added this, thanks!</p>\n</blockquote>",
        "id": 306135744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666736478
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1155610486\">PR review</a>.</p>",
        "id": 306135745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666736478
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a>.</p>",
        "id": 306136376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666736836
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306137038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666737124
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306140651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666739139
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306141537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666739710
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306143169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666740873
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306143366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666741010
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306525893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666900119
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306533151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666902038
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306536917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666903348
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306638279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666958120
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306638650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666958238
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1160486904\">PR review</a>.</p>",
        "id": 306726870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666982928
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1160486904\">PR review</a>.</p>",
        "id": 306726871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666982929
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1008352918\">PR review comment</a>:</p>\n<blockquote>\n<p>Here we need an assert that storing just one i32 will bump the start address up to <code>word_size</code>-aligned, right? (I guess one can show this is always the case on 64-bit systems; if not 8-byte aligned, but 4-byte aligned, one can be at most 4 bytes off; but that conclusion isn't generic to word size so I'd rather at least assert it here.)</p>\n</blockquote>",
        "id": 306726872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666982929
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306743298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666988938
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#discussion_r1008447859\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed; and yeah good catch; definitely I had assumed what you pointed out, that it's always the case in 64-bit systems.</p>\n</blockquote>",
        "id": 306743530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666989017
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1160687228\">PR review</a>.</p>",
        "id": 306743531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666989017
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a> from <code>winch-skeleton</code> to <code>main</code>.</p>",
        "id": 306743772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666989077
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907#pullrequestreview-1160702585\">PR review</a>.</p>",
        "id": 306746199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666989955
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4907\">PR #4907</a>.</p>",
        "id": 306751407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666991976
    }
]