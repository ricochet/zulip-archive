[
    {
        "content": "<p>JonasKruckenberg opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a> from <code>JonasKruckenberg:no_once_lock</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This removes the dependency on <code>std::sync::SpinLock</code> by lifting the state out of a static and into the <code>Callee</code> struct.</p>\n<p>This PR also removes the <code>call_conv</code> parameter since it was not used by any of the trait implementations.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 435555038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714125753
    },
    {
        "content": "<p><strong>JonasKruckenberg</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>.</p>",
        "id": 435555040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714125754
    },
    {
        "content": "<p><strong>JonasKruckenberg</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>.</p>",
        "id": 435555041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714125754
    },
    {
        "content": "<p>JonasKruckenberg edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>.</p>",
        "id": 435910176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714339492
    },
    {
        "content": "<p>JonasKruckenberg edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>:</p>\n<blockquote>\n<p>This removes the dependency on <code>std::sync::OnceLock</code> by lifting the state out of a static and into the <code>Callee</code> struct.</p>\n<p>This PR also removes the <code>call_conv</code> parameter since it was not used by any of the trait implementations.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 435910191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714339507
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489#issuecomment-2091164147\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>:</p>\n<blockquote>\n<p>ping @elliottt (or other cranelift folks on this), I don't know enough about <code>MachineEnv</code> myself to know if the lift here is reasonable to apply</p>\n</blockquote>",
        "id": 436746298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714672212
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489#issuecomment-2091301918\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>:</p>\n<blockquote>\n<p>This could possibly result in a performance degradation in the compiler: it removes the caching of the <code>MachineEnv</code>, which contains lists of registers (heap-allocated <code>Vec</code>s), and recreates it for each function that is compiled. Especially for small functions this could be a measurable/non-negligible portion of the total work.</p>\n<p>@JonasKruckenberg, could you say more about the motivation here? And have you measured the performance impact?</p>\n</blockquote>",
        "id": 436758884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714676732
    },
    {
        "content": "<p>JonasKruckenberg <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489#issuecomment-2091774873\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>:</p>\n<blockquote>\n<p>Yeah thats a concern I had too.<br>\nThe motivation is to support #8341 and since <code>OnceLock</code> is the only thing in cranelift that cant be ported to <code>no_std+alloc</code> or gated behind flags the idea was to replace it by something else. <br>\nAdding another dependency on something like <code>spin</code> for <code>no_std</code> targets doesn't seem appropriate either.</p>\n<p>I'll do some benchmarking next week and report back <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n</blockquote>",
        "id": 436781298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714686111
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489#issuecomment-2091875500\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>:</p>\n<blockquote>\n<p>Ah, one other option could be to put it in the <code>MachBackend</code> instead -- if it's the case that it no longer depends on the <code>call_conv</code>. If it does on some backends (x64 might differentiate with fastcall?), we could statically construct the various options. That way, it's constructed once per compiler session, but without the lazy init.</p>\n</blockquote>",
        "id": 436789009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714690365
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489#issuecomment-2105129901\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>:</p>\n<blockquote>\n<p>FWIW I ran this locally and on sightglass it reported a 1-3% slowdown in compiling spidermonkey.wasm, but no changes compiling other benchmarks. (I didn't re-run to see if that number was noise.</p>\n</blockquote>",
        "id": 438033209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715367920
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489#issuecomment-2105129901\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>:</p>\n<blockquote>\n<p>FWIW I ran this locally and on sightglass it reported a 1-3% slowdown in compiling spidermonkey.wasm, but no changes compiling other benchmarks. (I didn't re-run to see if that number was noise)</p>\n</blockquote>",
        "id": 438033218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715367925
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489#issuecomment-2106379885\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>:</p>\n<blockquote>\n<p>@uweigand introduced the <code>call_conv</code> parameter on <code>get_machine_env</code> in #6957 with the intent to use it to have different sets of allocatable registers for the tail calling convention than for the system calling convention. We talked about that a little at the Cranelift meeting last week and it sounds to me like he still wants to use it that way, so I don't think we should remove it.</p>\n<p>Regarding the main point of this PR though: I believe we can get rid of the need for <code>OnceLock</code> here by changing regalloc2 so <code>MachineEnv</code> holds a pair of <code>PRegSet</code>, which are small and const-evaluatable, instead of the six <code>Vec</code>s. Then a <code>MachineEnv</code> can be constructed in the initializer of a <code>static</code> item (note that Cranelift always sets <code>fixed_stack_slots</code> to an empty <code>Vec</code>, and <code>Vec::new</code> is a const fn). Then we can just return a borrow of a constant static in all of these cases, possibly choosing between several definitions based on the flags or calling convention.</p>\n</blockquote>",
        "id": 438213519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715549429
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489#issuecomment-2107972151\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8489\">PR #8489</a>:</p>\n<blockquote>\n<blockquote>\n<p>@uweigand introduced the <code>call_conv</code> parameter on <code>get_machine_env</code> in #6957 with the intent to use it to have different sets of allocatable registers for the tail calling convention than for the system calling convention. We talked about that a little at the Cranelift meeting last week and it sounds to me like he still wants to use it that way, so I don't think we should remove it.</p>\n</blockquote>\n<p>It's not completely certain, depending on choice of frame pointer register, but in general it would be good to have this option.  Allocatable registers in general may depend on calling convention.</p>\n</blockquote>",
        "id": 438388817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715613635
    }
]