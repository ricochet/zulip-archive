[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322#issuecomment-1325876744\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322\">issue #5322</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:docs\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 311934176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669257844
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322#issuecomment-1326542990\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322\">issue #5322</a>:</p>\n<blockquote>\n<p>Most of the s390x instances appear to be of the same pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">scalar</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"o\">-</span><span class=\"n\">purpose</span><span class=\"w\"> </span><span class=\"n\">register</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scalar_to_vector</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"n\">in_ty</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_int_ref_scalar_64</span><span class=\"w\"> </span><span class=\"n\">in_ty</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">vec_insert_lane</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vec_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">be_lane_idx</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">zero_reg</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"n\">scalar</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">floating</span><span class=\"o\">-</span><span class=\"n\">point</span><span class=\"w\"> </span><span class=\"n\">register</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scalar_to_vector</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_scalar_float</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)))))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">vec_move_lane_and_zero</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">be_lane_idx</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where it says that the rule with higher priority will always shadow the rule with lower priority.  But that's not actually the case because the first rule has an <code>if</code> that should prevent it from firing, and in that case the second rule may apply.</p>\n<p>Am I mistaken in my interpretation here, or does the checker not consider <code>if</code> here?</p>\n<p>(Of course, in these instances, the rules can be rewritten without <code>if</code> as well.  Still, I think the checker should handle <code>if</code>.)</p>\n</blockquote>",
        "id": 312030529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669300983
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322#issuecomment-1326548144\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322\">issue #5322</a>:</p>\n<blockquote>\n<p>The remaining s390x case also seems a false positive.   The higher-priority rule is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vec_imm_splat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">multi_lane</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u32_pair</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u16_pair</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u8_pair</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">vec_imm_splat</span><span class=\"w\"> </span><span class=\"cp\">$I8X16</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u8_as_u64</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and the lower-priority rule is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vec_imm_splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">multi_lane</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">vec_imm_replicate</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_as_i16</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But the higher-priority rule does <em>not</em> always fire, it requires a match of the two operands of the inner <code>u8_pair</code>.  I.e. it only matches on constants N where (N &gt;&gt; 8) &amp; 0xFF == N &amp; 0xFF.<br>\n</p>\n</blockquote>",
        "id": 312031518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669301263
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322#issuecomment-1328334001\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322\">issue #5322</a>:</p>\n<blockquote>\n<p>It should be handling <code>if</code> correctly. I believe the trouble with the first case is that I'm not handling pure (and therefore fallible) constructors like <code>ty_int_ref_scalar_64</code> correctly. As for the second, I've definitely had a hard time reasoning about equality constraints; I thought I had fixed the false positives I previously encountered with those, but apparently not.</p>\n<p>I'll look into both issues tomorrow. Thanks for digging into these!</p>\n</blockquote>",
        "id": 312515779,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669581157
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322#issuecomment-1329581337\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322\">issue #5322</a>:</p>\n<blockquote>\n<p>Fixing the false positive for <code>vec_imm_splat</code> was easy. That didn't eliminate any other errors in any backend, so that was apparently the only false positive of that form.</p>\n<p>Fixing the other issues is turning out to be more of a pain. Naively adding constraints for all uses of fallible constructors effectively disables all overlap checking, because constructors on the right-hand side of the rule shouldn't count, and by convention all our lowerings delegate to other internal constructors. But I think I have a workable plan.</p>\n</blockquote>",
        "id": 312697004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669661132
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322#issuecomment-1329668860\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322\">issue #5322</a>:</p>\n<blockquote>\n<p>Now that I've fixed pure constructors, there are no errors left in s390x. Thanks @uweigand! That also fixed most of the aarch64 errors and some of the x64 errors. The new <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/3567908912/jobs/5996168726\">failure output from CI</a> shows:</p>\n<ul>\n<li>3 over-general rules in x64, all in the implementation of <code>imul</code> on vectors (cc: @elliottt)</li>\n<li>2 over-general rules in aarch64</li>\n</ul>\n</blockquote>",
        "id": 312709147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669665061
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322#issuecomment-1329978708\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5322\">issue #5322</a>:</p>\n<blockquote>\n<p>For review and history purposes, I've extracted the various bug fixes and cleanups as #5337 and #5338. Once #5337 lands I'll rebase bf51b793d0a9065fbb53a12312d7b399189972e2 from this PR on it to start enforcing the unreachable-rule check. So on this PR, please review only that commit.</p>\n</blockquote>",
        "id": 312754825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669687476
    }
]