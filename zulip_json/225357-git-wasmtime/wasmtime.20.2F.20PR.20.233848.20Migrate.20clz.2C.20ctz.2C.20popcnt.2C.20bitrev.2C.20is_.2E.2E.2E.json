[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848\">PR #3848</a> from <code>isle-bitops</code> to <code>main</code>:</p>\n<blockquote>\n<p>Along the way this introduces a few new utility bits to the ISLE bindings, e.g. some constructors to do integer arithmetic on constants (I'm surprised we got this far without it!). The bit-twiddling algorithms are, at least to my eye, a bit more legible in this form, but I'm happy to add more comments here if desired since we're making a pass over everything anyway.</p>\n<p>Also updated a few stray places I had missed earlier where we can use implicit conversions (the <code>def_inst</code> removals).</p>\n</blockquote>",
        "id": 273184078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645758493
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-893903735\">PR review</a>.</p>",
        "id": 273253647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645808050
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-893903735\">PR review</a>.</p>",
        "id": 273253649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645808050
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814911847\">PR review comment</a>:</p>\n<blockquote>\n<p>It seems weird that these extractors (and above) are in any way related to <code>Type</code>... logically confusing, I can see the pragmatic part of it.</p>\n</blockquote>",
        "id": 273253650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645808050
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814922331\">PR review comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n</blockquote>",
        "id": 273253651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645808050
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814915810\">PR review comment</a>:</p>\n<blockquote>\n<p>The <code>CMOV</code> here uses <code>BSR</code>'s flag-setting behavior to work correctly. Just to check: we don't need to use <code>ConsumesFlags/ProducesFlags</code> here because these instructions are back-to-back and emitted in order? If that is the case, is a comment to that effect useful here?</p>\n</blockquote>",
        "id": 273253652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645808050
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814929960\">PR review comment</a>:</p>\n<blockquote>\n<p>The comments below are pretty helpful; any high-level comments here that explain the general gist of how this is counting bits?</p>\n</blockquote>",
        "id": 273253653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645808050
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814912314\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>;; Helper for emitting immediates with an `i64` value. Note that\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 273253654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645808050
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814921568\">PR review comment</a>:</p>\n<blockquote>\n<p>(Also, if this is allowed, then shouldn't the new <code>CmoveOr</code> and <code>XmmCmoveOr</code> sequences have been written in ISLE?)</p>\n</blockquote>",
        "id": 273253655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645808050
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814928674\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>;; For SSE4.2 we use Mula's algorithm (https://arxiv.org/pdf/1611.07612.pdf)\n</code></pre></div>\n<p>?</p>\n</blockquote>",
        "id": 273253656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645808050
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-893952196\">PR review</a>.</p>",
        "id": 273256447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645809154
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814946724\">PR review comment</a>:</p>\n<blockquote>\n<p>When I introduced the first of these extractors, I did it this way so that you read them near the type constraints because they are most often related to those, e.g. whether to use AVX512 is related to whether we are lowering a vector type.</p>\n<p>/me shrugs</p>\n</blockquote>",
        "id": 273256449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645809154
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-893983636\">PR review</a>.</p>",
        "id": 273260683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645811050
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814969492\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm, yeah, I realize now that this is exactly the same circumstance that led me to suggest <code>CmoveOr</code> previously; the output of the bsr is one of the inputs to the cmove. I'm thinking now maybe we can add a new variant to <code>ConsumesFlags</code> for this; I'll play with it a bit, and clean up by removing <code>CmoveOr</code> at the same time if I can work something out. Sorry for the inconsistency and churn!</p>\n</blockquote>",
        "id": 273260684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645811050
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-893984628\">PR review</a>.</p>",
        "id": 273260807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645811113
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814970304\">PR review comment</a>:</p>\n<blockquote>\n<p>I had copied this comment from <code>lower.rs</code> but it seems that the instructions used only require SSE 4.2 (right?) so I can update accordingly.</p>\n</blockquote>",
        "id": 273260808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645811113
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-893987299\">PR review</a>.</p>",
        "id": 273261162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645811284
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r814972278\">PR review comment</a>:</p>\n<blockquote>\n<p>Yup, the advantage is that it lets us use these in a context that's already common. Though I wonder now if it could make sense to have an extractor result value (the input) that is something like a unit type: in other words, the extractor takes nothing as input, but can be used in any context. I'll think more about it; it probably muddies the waters a bit wrt clean/simple semantics; but it could work...</p>\n</blockquote>",
        "id": 273261163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645811284
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848\">PR #3848</a> from <code>isle-bitops</code> to <code>main</code>.</p>",
        "id": 273275179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645817874
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-894085994\">PR review</a>.</p>",
        "id": 273275275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645817914
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r815043272\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, so I've reworked things so that <code>CmoveOr</code>/<code>XmmCmoveOr</code> no longer exist. Thanks for noticing this! The <code>i128</code> case needs a new <code>ConsumesFlags</code> variant that contains four consumer instructions, but this seems reasonable-ish to me.</p>\n</blockquote>",
        "id": 273275277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645817914
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-894086048\">PR review</a>.</p>",
        "id": 273275284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645817918
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r815043310\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 273275285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645817919
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-894086583\">PR review</a>.</p>",
        "id": 273275363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645817959
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r815043729\">PR review comment</a>:</p>\n<blockquote>\n<p>Added comments describing how this popcount algorithm works -- it was pretty fun to work out :-)</p>\n</blockquote>",
        "id": 273275364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645817959
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-894201466\">PR review</a>.</p>",
        "id": 273281583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645821434
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-894201466\">PR review</a>.</p>",
        "id": 273281584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645821434
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r815131936\">PR review comment</a>:</p>\n<blockquote>\n<p>Does it make sense to duplicate <code>(imm $i64 0x7777777777777777)</code> at each use site, rather than reusing the named register, to reduce register pressure?</p>\n</blockquote>",
        "id": 273281585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645821434
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#pullrequestreview-894219335\">PR review</a>.</p>",
        "id": 273283063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645822051
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848#discussion_r815144886\">PR review comment</a>:</p>\n<blockquote>\n<p>I thought about this a bit, but I think it's very likely better to load it once and reuse it: the instruction to load an arbitrary 64-bit value (<code>movabs</code>) is pretty long, the immediate can't fit in the normal <code>simm32</code> so we need a register in any case, and the live-range across 7 instructions is not really any worse than across one (any other value that wants to be live across this sequence will conflict with the register anyway, whether loaded once or loaded three times).</p>\n</blockquote>",
        "id": 273283064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645822051
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848\">PR #3848</a> from <code>isle-bitops</code> to <code>main</code>.</p>",
        "id": 273301283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645833239
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3848\">PR #3848</a>.</p>",
        "id": 273526929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646070314
    }
]