[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395\">PR #2395</a> from <code>lucet-x64-support</code> to <code>main</code>:</p>\n<blockquote>\n<p><code>lucetc</code> currently <em>almost</em>, but not quite, works with the new x64<br>\nbackend; the only missing piece is support for the particular<br>\ninstructions emitted as part of its prologue stack-check.</p>\n<p>We do not normally see <code>brff</code>, <code>brif</code>, or <code>ifcmp_sp</code> in CLIF generated by<br>\n<code>cranelift-wasm</code> without the old-backend legalization rules, so these<br>\nwere not supported in the new x64 backend as they were not necessary for<br>\nWasm MVP support. Using them resulted in an <code>unimplemented!()</code> panic.</p>\n<p>This PR adds support for <code>brff</code> and <code>brif</code> analogously to how AArch64<br>\nimplements them, by pattern-matching the <code>ifcmp</code> / <code>ffcmp</code> directly.<br>\nThen <code>ifcmp_sp</code> is a straightforward variant of <code>ifcmp</code>.</p>\n<p>Along the way, this also removes the notion of \"fallthrough block\" from<br>\nthe branch-group lowering method; instead, <code>fallthrough</code> instructions<br>\nare handled as normal branches to their explicitly-provided targets,<br>\nwhich (in the original CLIF) match the fallthrough block. The reason for<br>\nthis is that the block reordering done as part of lowering can change<br>\nthe fallthrough block. We were not using <code>fallthrough</code> instructions in<br>\nthe output produced by <code>cranelift-wasm</code>, so this, too, was not<br>\npreviously caught.</p>\n<p>With these changes (and with #2394), the <code>lucetc</code> crate in Lucet<br>\npasses all tests with the <code>x64</code> feature-flag added to its<br>\n<code>cranelift-codegen</code> dependency.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 216403743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605131915
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395\">PR #2395</a>.</p>",
        "id": 216403744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605131915
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395\">PR #2395</a>.</p>",
        "id": 216403745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605131915
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395#pullrequestreview-529428251\">PR Review</a>.</p>",
        "id": 216516795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605209703
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395#pullrequestreview-529428251\">PR Review</a>.</p>",
        "id": 216516796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605209703
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395#discussion_r522370535\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Here's the applicable <code>fallthrough</code> documentation: \"Fall through to the next block. This is the same as <code>jump</code>, except the destination block must be the next one in the layout.\"</p>\n</blockquote>",
        "id": 216516797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605209703
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395#discussion_r522369768\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hm... so we _have_ to jump for both sides of the branch, right? I would hope this doesn't affect performance too much (it's an unconditional jump) but it basically means that the Cranelift <code>fallthrough</code> instruction does not have the meaning Cranelift users might expect (I would expect no instruction would be necessary because <code>fallthrough</code> would imply the blocks are contiguous). I would suggest we resolve this in some way: </p>\n<ul>\n<li>perhaps add an issue to figure out how to preserve the <code>fallthrough</code> assumptions in the new backend?</li>\n<li>perhaps remove <code>fallthrough</code>, forcing users to use an unconditional jump instead?</li>\n</ul>\n</blockquote>",
        "id": 216516798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605209703
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395#pullrequestreview-529434440\">PR Review</a>.</p>",
        "id": 216517461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605210113
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395#discussion_r522374525\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>fallthrough</code> mainly exists for the old backend. The old backend automatically replaces unconditional jumps to the next block with it.</p>\n</blockquote>",
        "id": 216517462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605210113
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395#pullrequestreview-529451426\">PR Review</a>.</p>",
        "id": 216520186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211488
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395#discussion_r522387985\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed, I think that what this patch does is semantically correct (if the code-generator follows the rules, then we will generate correct machine code), and in fact even correct for a superset of defined behavior (if the code-gen puts the blocks in the wrong order, we will still use the named target of <code>fallthrough</code>), but loses the block-ordering hint because our block-ordering logic in <code>BlockLoweringOrder</code> does its own DFS.</p>\n<p>So I think the right thing to do here would be to (i) define <code>fallthrough</code> to be a hint, i.e., equivalent to a jump but expressing a desire to place the named block next in final code (this is compatible with current definition), and (ii) use that hint in the lowering logic. I can create an issue for this, as @abrown suggests. Thanks!</p>\n</blockquote>",
        "id": 216520188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211488
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2395\">PR #2395</a>.</p>",
        "id": 216520921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211853
    }
]