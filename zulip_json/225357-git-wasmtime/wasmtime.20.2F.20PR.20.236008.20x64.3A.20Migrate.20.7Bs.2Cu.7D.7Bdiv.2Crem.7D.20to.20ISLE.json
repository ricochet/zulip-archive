[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008\">PR #6008</a> from <code>x64-div-in-isle</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit migrates most of the logic of the div/rem CLIF instructions to ISLE for the x64 backend. Previously most of the logic was encapsulated between the <code>emit_div_rem_seq</code> method and the <code>CheckedDivOrRemSeq</code> pseudo-instruction. Nick and I found last week, however, that this poorly interacts with division-by-constants because despite being a constant checks were still emitted to ensure it wasn't a divide-by-zero or similar. To improve this constant case I figured it'd be a good opportunity to move things to ISLE.</p>\n<p>Unfortunately though these instructions couldn't be moved 100% to ISLE. Signed division, for example, needs to access labels/jumps to check for <code>INT_MIN / -1</code>. Signed remainder needs to not actually execute <code>idiv</code> when the divisor is -1 and instead return 0 as well. This means that while the bulk of the logic now lives in ISLE but a chunk still lives inside the pseudo-instructions in <code>emit.rs</code>.</p>\n<p>Specifically the changes in this PR are:</p>\n<ul>\n<li>The <code>CheckedDivOrRemSeq</code> pseudo-instruction and its helpers were removed.</li>\n<li>The <code>Div</code> instruction was split into <code>Div</code> and <code>Div8</code> since 8-bit division has different regalloc behavior.</li>\n<li>New <code>ValidateSdivDivisor{,64}</code> instructions were added. The 64-bit one is different because it needs a temporary register as input.</li>\n<li>New <code>CheckedSRem{,8}</code> instructions were added. These assume a check-for-zero has already happened but internally do branching to handle a -1 divisor. The 8-bit version is different due to different regalloc behavior.</li>\n<li>The ISLE for x64 now special-cases div/rem by constants to elide checks if it can.</li>\n</ul>\n<p>Overall despite replacing one pseudo-op with 4 I feel that this is a simplification relative to prior. The majority of the logic now resides in ISLE and the isel optimizations around constants are more obvious and easier to understand. Additionally the fiddly-bits about how idiv/div work on x64 are encoded in ISLE rules too.</p>\n<p>I still think there's room to improve here in the long run. For example Wasmtime currently sets <code>avoid_div_traps=true</code> which isn't actually necessary. Most checks can be elided here to defer to signal handling to catch issues for x64. I hope to do this in a follow-up PR later on.</p>\n</blockquote>",
        "id": 341570160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678740404
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1337958351\">PR review</a>.</p>",
        "id": 341575317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742510
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1337958351\">PR review</a>.</p>",
        "id": 341575318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742510
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134619919\">PR review comment</a>:</p>\n<blockquote>\n<p>Want to fill out this TODO a little?</p>\n</blockquote>",
        "id": 341575319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742511
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134624346\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>;; Two registers are returned through `ValueRegs` where the first is the\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 341575320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742511
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1337927799\">PR review</a>.</p>",
        "id": 341575452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742567
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1337927799\">PR review</a>.</p>",
        "id": 341575453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134599972\">PR review comment</a>:</p>\n<blockquote>\n<p>s/use/used/</p>\n</blockquote>",
        "id": 341575454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134601367\">PR review comment</a>:</p>\n<blockquote>\n<p>s/wher ethe/where the/</p>\n</blockquote>",
        "id": 341575455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134606974\">PR review comment</a>:</p>\n<blockquote>\n<p>The <code>rax</code> here is outdated (left over from when we used pinned vregs rather then SSA temps); just \"into the destination\" is correct I think.</p>\n</blockquote>",
        "id": 341575456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134609703\">PR review comment</a>:</p>\n<blockquote>\n<p>It doesn't look like these instructions were removed -- any reason the tests are (left over from older iteration maybe)?</p>\n</blockquote>",
        "id": 341575457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134618878\">PR review comment</a>:</p>\n<blockquote>\n<p>Slightly unclear comment here -- not quite \"equal to itself\" but \"zero flag set\" (Z is only eq for cmp). Maybe just \"and trap if zero\"?</p>\n</blockquote>",
        "id": 341575458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742567
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134622153\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's add a comment here why: on x64, INT_MIN / -1 will cause a hardware trap, and this is a legal way to signal the out-of-bounds error with <code>avoid_div_traps=false</code>.</p>\n</blockquote>",
        "id": 341575460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742568
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134623788\">PR review comment</a>:</p>\n<blockquote>\n<p>It's a little thing, but the <code>bool</code> here got fairly confusing to read in uses of this rule elsewhere, out of context -- can we define a little helper enum <code>DivSignedness</code> or similar and use that in the inst?</p>\n</blockquote>",
        "id": 341575462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678742568
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134690750\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah this ended up going away in a later commit (was sort of figuring out my way through things as I went along)</p>\n</blockquote>",
        "id": 341588196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678747498
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1338067058\">PR review</a>.</p>",
        "id": 341588197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678747498
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1338070692\">PR review</a>.</p>",
        "id": 341588765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678747775
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134693717\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh I forgot to update this, but I'll leave it as rax/rdx since this is still using fixed registers for the <code>idiv</code> instruction it embeds. For 8-bit srem this'll be <code>%rax</code> and for 16-to-64-bits this is <code>%rdx</code>. It's a bit subtle where this opcode always produces the remainder (due to this branch) but only conditionally produces the quotient due to the branch here not defining the quotient. That works for the lowerings today (since only srem uses this which uses the remainder)</p>\n<p>Is there a better way to model this with regalloc constraints though? Should I remove the <code>dst_quotient</code> parameter to the instruction and inform regalloc that otherwise rax/rdx are both defined during the instruction?</p>\n</blockquote>",
        "id": 341588768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678747775
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1338071145\">PR review</a>.</p>",
        "id": 341588885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678747812
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134694072\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh for these tests I've started removing some when I get conflicts due to the capstone integration which is much easier to update and I figured served the same purpose. If you'd like though I can add them back here to be individually tested</p>\n</blockquote>",
        "id": 341588887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678747812
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1338075015\">PR review</a>.</p>",
        "id": 341589501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678748121
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134697064\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, no, now that I think of it the disassemblies we have in the precise-output tests are verifying the same thing; so removing this is fine <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 341589502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678748121
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008\">PR #6008</a> from <code>x64-div-in-isle</code> to <code>main</code>.</p>",
        "id": 341589872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678748305
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1338078088\">PR review</a>.</p>",
        "id": 341589968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678748368
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134699272\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, no, the constraints are the right way; the \"separate reservation of rax/rdx\" was the pre-SSA methodology that carries other issues and that we've moved away from.</p>\n<p>I guess it's just a matter of semantics; the shift in mindset has us referring to sources/dests symbolically everywhere except at the constraints, even if here at emit time it is always rax. Happy to keep the comment here though if you'd prefer it to be clearer/more explicit.</p>\n</blockquote>",
        "id": 341589969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678748368
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008\">PR #6008</a> from <code>x64-div-in-isle</code> to <code>main</code>.</p>",
        "id": 341603617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678756379
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#pullrequestreview-1338267004\">PR review</a>.</p>",
        "id": 341603779,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678756459
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008#discussion_r1134774302\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok makes sense. I've reworked the comments in this area to hopefully be a bit more precise about what's going on on both halves of this branching and why <code>dst_quotient</code> isn't initialized on one branch.</p>\n</blockquote>",
        "id": 341603780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678756459
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008\">PR #6008</a> from <code>x64-div-in-isle</code> to <code>main</code>.</p>",
        "id": 341603797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678756471
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008\">PR #6008</a>.</p>",
        "id": 341603824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678756492
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6008\">PR #6008</a>.</p>",
        "id": 341609703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678760851
    }
]