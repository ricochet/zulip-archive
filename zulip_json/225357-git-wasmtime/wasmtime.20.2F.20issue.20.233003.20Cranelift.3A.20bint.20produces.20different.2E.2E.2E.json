[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003\">issue #3003</a>:</p>\n<blockquote>\n<p>Hey,</p>\n<p>While working on #2978, i found that we are lowering constants inconsistently between backends. x64 always lowers as -1 (i.e. all bits 1) while aarch64 lowers as 1.</p>\n<p>I don't know which one is correct, but they should agree with each other. According to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b506bc30b1c8692995e3297fcf1a5d498d4d36d6/cranelift/codegen/src/isa/x64/lower.rs#L3281\">this comment</a> I think the behavior on x64 is wrong.</p>\n<p>It looks like <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/75eff64977ff149ead73bc0077bac5872d599aa2/src/intrinsics/mod.rs#L293\">cg_clif depends on this behavior</a>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">machinst</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b8</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFF</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b16</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Run the above test</p>\n<h3>Expected Results</h3>\n<p>The aarch64 and x64 backends should produce identical results</p>\n<h3>Actual Results</h3>\n<p>Bools are lowered as either 1 or -1 depending on the backend.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: current main branch<br>\nOperating system: Windows 10<br>\nArchitecture: x64 / aarch64</p>\n</blockquote>",
        "id": 243269985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624138186
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003\">issue #3003</a>:</p>\n<blockquote>\n<p>Hey,</p>\n<p>While working on #2978, i found that we are lowering constants inconsistently between backends. x64 always lowers as -1 (i.e. all bits 1) while aarch64 lowers as 1.</p>\n<p>I don't know which one is correct, but they should agree with each other. According to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b506bc30b1c8692995e3297fcf1a5d498d4d36d6/cranelift/codegen/src/isa/x64/lower.rs#L3281\">this comment</a> I think the behavior on x64 is wrong.</p>\n<p>It looks like <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/75eff64977ff149ead73bc0077bac5872d599aa2/src/intrinsics/mod.rs#L293\">cg_clif depends on this behavior</a>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">machinst</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b8</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFF</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b16</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Run the above test</p>\n<h3>Expected Results</h3>\n<p>The aarch64 and x64 backends should produce identical results</p>\n<h3>Actual Results</h3>\n<p>Bools are lowered as either 1 or -1 depending on the backend.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: current main branch<br>\nOperating system: Windows 10<br>\nArchitecture: x64 / aarch64</p>\n</blockquote>",
        "id": 243269986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624138186
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003\">issue #3003</a>:</p>\n<blockquote>\n<p>Hey,</p>\n<p>While working on #2978, i found that we are lowering constants inconsistently between backends. x64 always lowers as -1 (i.e. all bits 1) while aarch64 lowers as 1.</p>\n<p>I don't know which one is correct, but they should agree with each other. According to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b506bc30b1c8692995e3297fcf1a5d498d4d36d6/cranelift/codegen/src/isa/x64/lower.rs#L3281\">this comment</a> I think the behavior on x64 is wrong.</p>\n<p>It looks like <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/75eff64977ff149ead73bc0077bac5872d599aa2/src/intrinsics/mod.rs#L293\">cg_clif depends on this behavior</a>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">machinst</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b8</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFF</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b16</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Run the above test</p>\n<h3>Expected Results</h3>\n<p>The aarch64 and x64 backends should produce identical results</p>\n<h3>Actual Results</h3>\n<p>Bools are lowered as either 1 or -1 depending on the backend.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: current main branch<br>\nOperating system: Windows 10<br>\nArchitecture: x64 / aarch64</p>\n</blockquote>",
        "id": 243269987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624138186
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003#issuecomment-864467994\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003\">issue #3003</a>:</p>\n<blockquote>\n<p>-1 is the expected behavior for bmask I think, not for bint.</p>\n</blockquote>",
        "id": 243270840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624139435
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003#issuecomment-865065357\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003\">issue #3003</a>:</p>\n<blockquote>\n<p>The <code>bint</code> documentation <a href=\"https://docs.rs/cranelift-codegen/0.75.0/cranelift_codegen/ir/trait.InstBuilder.html#method.bint\">states</a> that either 0 or 1 is the expected result. As for <code>bconst</code>, both backends seem to behave identically.</p>\n</blockquote>",
        "id": 243387778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624284691
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003#issuecomment-865212058\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003\">issue #3003</a>:</p>\n<blockquote>\n<p>Thanks for finding this!</p>\n<p>I did a bit of archaeology just now to try to work out what's going on here, as I recalled we had had some discussions about this already. It turns out that we <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2310#pullrequestreview-519133477\">have</a>, also #2058.</p>\n<p>The <code>bconst</code> is indeed correct, as per above -- it generates all-ones into the register (this is so that it can be used as a mask). The issue is that I think the <code>bint</code> implementation on x64 does not properly mask this down to 0 or 1. It appears that I had added the masking in aarch64 when I made the change in #2058 above but the x64 backend wasn't updated at the same time. I'll do a quick PR to rectify this!</p>\n</blockquote>",
        "id": 243414564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624296158
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3003\">issue #3003</a>:</p>\n<blockquote>\n<p>Hey,</p>\n<p>While working on #2978, i found that we are lowering constants inconsistently between backends. x64 always lowers as -1 (i.e. all bits 1) while aarch64 lowers as 1.</p>\n<p>I don't know which one is correct, but they should agree with each other. According to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b506bc30b1c8692995e3297fcf1a5d498d4d36d6/cranelift/codegen/src/isa/x64/lower.rs#L3281\">this comment</a> I think the behavior on x64 is wrong.</p>\n<p>It looks like <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/75eff64977ff149ead73bc0077bac5872d599aa2/src/intrinsics/mod.rs#L293\">cg_clif depends on this behavior</a>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">machinst</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b8</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFF</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b8_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b16</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Passes</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x86</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bint_b16_i16</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Run the above test</p>\n<h3>Expected Results</h3>\n<p>The aarch64 and x64 backends should produce identical results</p>\n<h3>Actual Results</h3>\n<p>Bools are lowered as either 1 or -1 depending on the backend.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: current main branch<br>\nOperating system: Windows 10<br>\nArchitecture: x64 / aarch64</p>\n</blockquote>",
        "id": 243558946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624386381
    }
]