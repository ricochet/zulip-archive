[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3106\">issue #3106</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>In certain cases, the Wasm-to-CLIF translation loses track of the alignment of loads. In the snippet below, we 1) know that loading the heap offset from <code>v0</code> (i.e., <code>VMContext</code>) is aligned, 2) could assume that the heap is aligned, and 3) see that an aligned heap address plus 16 is still aligned for the <code>i8x16</code> type:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">b</span><span class=\"w\">                               </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0051</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>#2943 discovered a bug with load-coalescing SIMD operations: they can only be coalesced when the load is aligned. Implementing this feature would allow load-coalescing in more situations.</p>\n<p>There may be other benefits of keeping track of load/store alignment. This all seems closely related to constant propagation so perhaps a solution there would also solve this issue.</p>\n<h4>Implementation</h4>\n<p>It does not seem impossible to detect the following Wasm pattern and combine it into a \"load with offset:\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">....</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This could be done in the Wasm-to-CLIF translator (if it isn't already) or in a separate CLIF pass.</p>\n<h4>Alternatives</h4>\n<p>Do nothing.<br>\n</p>\n</blockquote>",
        "id": 246760841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626892602
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3106#issuecomment-887010553\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3106\">issue #3106</a>:</p>\n<blockquote>\n<p>See @cfallin's comments at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3107#pullrequestreview-715145673\">https://github.com/bytecodealliance/wasmtime/pull/3107#pullrequestreview-715145673</a>: one alternative is to thread alignment hints through CLIF so that we can catch the error and jump to a non-coalesced snippet. </p>\n</blockquote>",
        "id": 247258489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627331916
    },
    {
        "content": "<p>abrown labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3106\">issue #3106</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>In certain cases, the Wasm-to-CLIF translation loses track of the alignment of loads. In the snippet below, we 1) know that loading the heap offset from <code>v0</code> (i.e., <code>VMContext</code>) is aligned, 2) could assume that the heap is aligned, and 3) see that an aligned heap address plus 16 is still aligned for the <code>i8x16</code> type:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">b</span><span class=\"w\">                               </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0051</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>#2943 discovered a bug with load-coalescing SIMD operations: they can only be coalesced when the load is aligned. Implementing this feature would allow load-coalescing in more situations.</p>\n<p>There may be other benefits of keeping track of load/store alignment. This all seems closely related to constant propagation so perhaps a solution there would also solve this issue.</p>\n<h4>Implementation</h4>\n<p>It does not seem impossible to detect the following Wasm pattern and combine it into a \"load with offset:\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">....</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This could be done in the Wasm-to-CLIF translator (if it isn't already) or in a separate CLIF pass.</p>\n<h4>Alternatives</h4>\n<p>Do nothing.<br>\n</p>\n</blockquote>",
        "id": 251956232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630713039
    }
]