[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[ ] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[ ] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[ ] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a></li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 275706251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647541886
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[ ] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[ ] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[ ] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a></li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 275706357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647541930
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[ ] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[ ] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[ ] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a></li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">percentage</span><span class=\"w\"> </span><span class=\"n\">improvement</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"p\">)</span>:\n\n<span class=\"nc\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n\n<span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">ratios</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">percent</span><span class=\"w\"> </span><span class=\"n\">improvement</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">speedup_ratio</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mf\">1.34</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                </span><span class=\"mf\">1.38</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mf\">1.24</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                </span><span class=\"mf\">1.21</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mf\">1.21</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mf\">1.18</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mf\">1.26</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mf\">1.71</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n\n<span class=\"n\">Methodology</span>:\n\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Sightglass</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">processes</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">iterations</span><span class=\"o\">-</span><span class=\"n\">per</span><span class=\"o\">-</span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"mf\">5.</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Last</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">benchmarks</span><span class=\"w\"> </span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"n\">commandline</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"p\">.</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">once</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">ensure</span><span class=\"w\"> </span><span class=\"n\">compiled</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">measure</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"n\">best</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">five</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">measure</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"n\">best</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">five</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">doesn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">harness</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">only</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Testing</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"o\">-</span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">Ryzen</span><span class=\"w\"> </span><span class=\"mi\">3900</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linux</span><span class=\"o\">/</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"w\"></span>\n\n<span class=\"n\">Comparing</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Wasmtime</span><span class=\"w\"> </span><span class=\"n\">fdf063df98ad3839b0e0b78ea55b53b1a296abb0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">from</span><span class=\"w\"></span>\n<span class=\"n\">Mar</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">against</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"w\"> </span><span class=\"n\">internal</span><span class=\"w\"> </span><span class=\"n\">regalloc2</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"></span>\n<span class=\"mi\">9</span><span class=\"n\">b89942cf62d262ee9ac3e7eab525ea8544a458b</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">Mar</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"n\">synced</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"></span>\n<span class=\"n\">Wasmtime</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">eb1b71e31c035ff4250c5013ca0268deb931aa7c</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">Feb</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">).</span><span class=\"w\"></span>\n\n<span class=\"n\">Raw</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Sightglass</span><span class=\"w\"> </span><span class=\"n\">below</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiation</span><span class=\"w\"> </span><span class=\"n\">excluded</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">interesting</span><span class=\"p\">).</span><span class=\"w\"></span>\n\n<span class=\"o\">----</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">121531866.00</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">51042761.18</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.14</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.34</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.72</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.89</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">478052996</span><span class=\"w\"> </span><span class=\"mf\">501410277.40</span><span class=\"w\"> </span><span class=\"mi\">591983000</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">604955098</span><span class=\"w\"> </span><span class=\"mf\">622942143.40</span><span class=\"w\"> </span><span class=\"mi\">709527450</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">31981472.00</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">13432120.92</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.14</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.34</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.72</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.89</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">125802142</span><span class=\"w\"> </span><span class=\"mf\">131948268.40</span><span class=\"w\"> </span><span class=\"mi\">155782325</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">159196645</span><span class=\"w\"> </span><span class=\"mf\">163929740.40</span><span class=\"w\"> </span><span class=\"mi\">186715328</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">36931.50</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">3272.72</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.32</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.38</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.72</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.77</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">105358</span><span class=\"w\"> </span><span class=\"mf\">106660.00</span><span class=\"w\"> </span><span class=\"mi\">110728</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">140608</span><span class=\"w\"> </span><span class=\"mf\">143591.50</span><span class=\"w\"> </span><span class=\"mi\">149787</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">140341.60</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">12437.21</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.32</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.38</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.72</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.77</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">400368</span><span class=\"w\"> </span><span class=\"mf\">405315.60</span><span class=\"w\"> </span><span class=\"mi\">420774</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">534318</span><span class=\"w\"> </span><span class=\"mf\">545657.20</span><span class=\"w\"> </span><span class=\"mi\">569202</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"o\">----</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">112727304</span><span class=\"w\"> </span><span class=\"mf\">139448014.80</span><span class=\"w\"> </span><span class=\"mi\">189082604</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">123143218</span><span class=\"w\"> </span><span class=\"mf\">156732493.40</span><span class=\"w\"> </span><span class=\"mi\">233512432</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">29664800</span><span class=\"w\"> </span><span class=\"mf\">36696541.20</span><span class=\"w\"> </span><span class=\"mi\">49758219</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">32405712</span><span class=\"w\"> </span><span class=\"mf\">41244760.40</span><span class=\"w\"> </span><span class=\"mi\">61449541</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">400672</span><span class=\"w\"> </span><span class=\"mf\">739521.80</span><span class=\"w\"> </span><span class=\"mi\">1042226</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">498142</span><span class=\"w\"> </span><span class=\"mf\">828791.40</span><span class=\"w\"> </span><span class=\"mi\">1160786</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">105439</span><span class=\"w\"> </span><span class=\"mf\">194609.20</span><span class=\"w\"> </span><span class=\"mi\">274267</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">131088</span><span class=\"w\"> </span><span class=\"mf\">218099.20</span><span class=\"w\"> </span><span class=\"mi\">305464</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"o\">----</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">meshoptimizer</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">483775336.20</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">24646158.96</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.22</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.24</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.80</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.82</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2090515508</span><span class=\"w\"> </span><span class=\"mf\">2113482784.00</span><span class=\"w\"> </span><span class=\"mi\">2150210240</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2554359582</span><span class=\"w\"> </span><span class=\"mf\">2597258120.20</span><span class=\"w\"> </span><span class=\"mi\">2630111328</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">meshoptimizer</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">127275628.40</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">6480546.57</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.22</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.24</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.80</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.82</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">550127669</span><span class=\"w\"> </span><span class=\"mf\">556172437.60</span><span class=\"w\"> </span><span class=\"mi\">565836581</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">672188482</span><span class=\"w\"> </span><span class=\"mf\">683448066.00</span><span class=\"w\"> </span><span class=\"mi\">692063546</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">meshoptimizer</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3386913742.00</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">454568778.61</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.16</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.21</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.82</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.86</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">17786842514</span><span class=\"w\"> </span><span class=\"mf\">17978520795.40</span><span class=\"w\"> </span><span class=\"mi\">18352029814</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">20863697992</span><span class=\"w\"> </span><span class=\"mf\">21365434537.40</span><span class=\"w\"> </span><span class=\"mi\">22139271504</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">meshoptimizer</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">891020039.40</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">119694835.02</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.16</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.21</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.82</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.86</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">4680694128</span><span class=\"w\"> </span><span class=\"mf\">4731128047.40</span><span class=\"w\"> </span><span class=\"mi\">4829411387</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">5489883512</span><span class=\"w\"> </span><span class=\"mf\">5622148086.80</span><span class=\"w\"> </span><span class=\"mi\">5826025212</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"o\">----</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">213252595.20</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">29303757.92</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.16</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.21</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.82</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.86</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1120180378</span><span class=\"w\"> </span><span class=\"mf\">1148350389.80</span><span class=\"w\"> </span><span class=\"mi\">1203069094</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1340768136</span><span class=\"w\"> </span><span class=\"mf\">1361602985.00</span><span class=\"w\"> </span><span class=\"mi\">1397014596</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">56118120.00</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">7711578.76</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.16</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.21</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.82</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.86</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">294780634</span><span class=\"w\"> </span><span class=\"mf\">302193792.40</span><span class=\"w\"> </span><span class=\"mi\">316593182</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">352828441</span><span class=\"w\"> </span><span class=\"mf\">358311912.40</span><span class=\"w\"> </span><span class=\"mi\">367631343</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">8257780</span><span class=\"w\"> </span><span class=\"mf\">8443755.80</span><span class=\"w\"> </span><span class=\"mi\">8560944</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">8455570</span><span class=\"w\"> </span><span class=\"mf\">9495162.60</span><span class=\"w\"> </span><span class=\"mi\">17648568</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2173072</span><span class=\"w\"> </span><span class=\"mf\">2222013.50</span><span class=\"w\"> </span><span class=\"mi\">2252853</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2225116</span><span class=\"w\"> </span><span class=\"mf\">2498693.60</span><span class=\"w\"> </span><span class=\"mi\">4644290</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"o\">----</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">58684068.80</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">36909440.37</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.04</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.18</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.84</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.96</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">498967588</span><span class=\"w\"> </span><span class=\"mf\">545831464.20</span><span class=\"w\"> </span><span class=\"mi\">586460840</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">540660276</span><span class=\"w\"> </span><span class=\"mf\">604515533.00</span><span class=\"w\"> </span><span class=\"mi\">635005118</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">15436153.00</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">9714229.01</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.04</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.18</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.84</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.96</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">131305387</span><span class=\"w\"> </span><span class=\"mf\">143637939.40</span><span class=\"w\"> </span><span class=\"mi\">154329874</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">142264400</span><span class=\"w\"> </span><span class=\"mf\">159074092.40</span><span class=\"w\"> </span><span class=\"mi\">167089438</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">25932760</span><span class=\"w\"> </span><span class=\"mf\">35978222.50</span><span class=\"w\"> </span><span class=\"mi\">53794238</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">28960083</span><span class=\"w\"> </span><span class=\"mf\">29737468.90</span><span class=\"w\"> </span><span class=\"mi\">35137211</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">-</span><span class=\"n\">next</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">98545894</span><span class=\"w\"> </span><span class=\"mf\">136719075.20</span><span class=\"w\"> </span><span class=\"mi\">204420658</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">110059628</span><span class=\"w\"> </span><span class=\"mf\">113008690.20</span><span class=\"w\"> </span><span class=\"mi\">133522880</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 275706427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647541968
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[ ] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[ ] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[ ] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a></li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\n&lt;pre&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/pre&gt;<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 275706501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647542007
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942#issuecomment-1071424796\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>(Can we add spidermonkey.wasm and clang.wasm to Sightglass?)</p>\n</blockquote>",
        "id": 275723378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647549731
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942#issuecomment-1071623331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<blockquote>\n<p>(Can we add spidermonkey.wasm and clang.wasm to Sightglass?)</p>\n</blockquote>\n<p>We could perhaps, yeah, with some hackery (building a toplevel harness mostly). In the SpiderMonkey case we need to add a WASI directory capability and feed in a JS file, and in the clang case we need a way to tell the infra that it's compile-only (I don't know how to run it). For now it's not too bad to run by hand though :-)</p>\n</blockquote>",
        "id": 275735271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647555253
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942#issuecomment-1071724974\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>A little more benchmarking -- taking most of the modules from #911 and compiling with baseline and regalloc2:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SHA256</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span>#<span class=\"mi\">911</span><span class=\"w\">         </span><span class=\"n\">baseline</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">regalloc2</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"n\">ddff0dac47311846e831cb25df5ec5fcb7c59a4</span><span class=\"w\">  </span><span class=\"mf\">1.201</span><span class=\"w\">                 </span><span class=\"mf\">0.262</span><span class=\"w\"></span>\n<span class=\"mf\">256e0360</span><span class=\"n\">aa2774d6ad1bb5589030b7a944a81c5d</span><span class=\"w\">  </span><span class=\"mf\">0.680</span><span class=\"w\">                 </span><span class=\"mf\">0.671</span><span class=\"w\"></span>\n<span class=\"mi\">28276</span><span class=\"n\">a409e576044bea8cdc46068426484bf7b06</span><span class=\"w\">  </span><span class=\"mf\">0.035</span><span class=\"w\">                 </span><span class=\"mf\">0.039</span><span class=\"w\"></span>\n<span class=\"mf\">2e746</span><span class=\"n\">b5b07c0a022415d6c1527815af44daae33e</span><span class=\"w\">  </span><span class=\"mf\">0.006</span><span class=\"w\">                 </span><span class=\"mf\">0.006</span><span class=\"w\"></span>\n<span class=\"mf\">4286371e64</span><span class=\"n\">c07f853a5d4de482d658f3c7f2c711</span><span class=\"w\">  </span><span class=\"mf\">0.137</span><span class=\"w\">                 </span><span class=\"mf\">0.365</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"n\">ccd889e8a97b9adb2697f9f60477e511ad50be4</span><span class=\"w\">  </span><span class=\"mf\">0.721</span><span class=\"w\">                 </span><span class=\"mf\">0.329</span><span class=\"w\"></span>\n<span class=\"mi\">9850</span><span class=\"n\">b3172ddb705be8caa06599cb92ead3cd251c</span><span class=\"w\">  </span><span class=\"mf\">0.509</span><span class=\"w\">                 </span><span class=\"mf\">0.645</span><span class=\"w\"></span>\n<span class=\"n\">bdb6099c0073360613f17cc9a7d2380d50f8eb9e</span><span class=\"w\">  </span><span class=\"mf\">2.725</span><span class=\"w\">                 </span><span class=\"mf\">0.061</span><span class=\"w\"></span>\n<span class=\"n\">bf8490f3bd1f3350a0d4a83670bb1d3d017cf8ef</span><span class=\"w\">  </span><span class=\"mf\">0.074</span><span class=\"w\">                 </span><span class=\"mf\">0.283</span><span class=\"w\"></span>\n<span class=\"n\">cb46921624763cf50eb826585d224bb3975a4234</span><span class=\"w\">  </span><span class=\"mf\">0.693</span><span class=\"w\">                 </span><span class=\"mf\">0.035</span><span class=\"w\"></span>\n<span class=\"n\">d31a6a6de65a08096dc855a17f49499114826a3e</span><span class=\"w\">  </span><span class=\"mf\">0.057</span><span class=\"w\">                 </span><span class=\"mf\">0.284</span><span class=\"w\"></span>\n<span class=\"n\">d51589b35a521c29420fc140b292383f2ca5fd70</span><span class=\"w\">  </span><span class=\"mf\">3.180</span><span class=\"w\">                 </span><span class=\"mf\">0.617</span><span class=\"w\"></span>\n<span class=\"n\">dfafaa30ecd41ab9bece126eec8129b42925a4dd</span><span class=\"w\">  </span><span class=\"mf\">1.367</span><span class=\"w\">                 </span><span class=\"mf\">1.011</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In almost all cases things got faster, sometimes significantly so (3.18s -&gt; 0.61s, 1.2s -&gt; 0.26s, 2.7s -&gt; 0.061s (!)). This tracks with my understanding of some of the bottlenecks I saw in profiling before and the efforts to keep away from quadratic explosions and nonlinear behavior in general in regalloc2 as far as possible. Some of the smaller modules see some increases (0.137s -&gt; 0.365s, 0.057s -&gt; 0.284s); I haven't conclusively resolved what's going on in those but it wouldn't surprise me if this comes from splitting heuristics being a little more aggressive. In any case nothing immediately jumps out in the profile.</p>\n</blockquote>",
        "id": 275738529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647557386
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[ ] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[ ] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[ ] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a></li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\n&lt;pre&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/pre&gt;<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 276392906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648066273
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[ ] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[ ] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[ ] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a></li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\n&lt;pre&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/pre&gt;<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 276392907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648066273
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[x] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[ ] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[ ] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a></li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\n&lt;pre&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/pre&gt;<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 277352856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648768865
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[x] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[x] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[ ] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a></li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\n&lt;pre&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/pre&gt;<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 277352858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648768867
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[x] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[x] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[x] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a></li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\n&lt;pre&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/pre&gt;<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 277352863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648768871
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[x] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[x] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[x] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a> (<a href=\"https://crates.io/crates/regalloc2\">done</a>)</li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\n&lt;pre&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/pre&gt;<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 277352879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648768903
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[x] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[x] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[x] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a> (<a href=\"https://crates.io/crates/regalloc2\">done</a>)</li>\n<li>[ ] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\n&lt;pre&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/pre&gt;<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 278996281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649957303
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3942\">issue #3942</a>:</p>\n<blockquote>\n<p>This issue is meant to track the status of migrating Cranelift to use <a href=\"https://github.com/bytecodealliance/regalloc2\">regalloc2</a>, our new register allocator. We started this work a while ago, and as detailed in our <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we plan to finish the migration this year.</p>\n<p>The major tasks remaining are:</p>\n<ul>\n<li>[x] Develop regalloc2 as a standalone project</li>\n<li>[x] Get a second reviewer to triple-check the symbolic checker we've been using to fuzz regalloc2, since regalloc correctness is essential for correctness/security of all layers above it (@fitzgen is currently looking this over)</li>\n<li>[x] Integrate any remaining regalloc2 tweaks/improvements (I have a few queued up, mostly API-related; <a href=\"https://github.com/cfallin/regalloc2/tree/allow-pinned-liveins\">this</a> is my running branch as I bring it up with Cranelift.)</li>\n<li>[x] Release regalloc2 crate on <a href=\"http://crates.io\">crates.io</a> (<a href=\"https://crates.io/crates/regalloc2\">done</a>)</li>\n<li>[x] Merge support for regalloc2 into Cranelift</li>\n</ul>\n<p>The last task has been under development for the past 2.5 weeks or so. I'll make my private branch public shortly, after a bit of cleanup. Its current status is that it is fully functional (passes tests, runs benchmarks) on x86-64. There is work to do to move the other two backends over (aarch64, s390x) and I will do this before we merge. (I might not be able to do this before Mon Mar 28; I'm out-of-office and offline all of next week unfortunately, but wanted to get these results out first!)</p>\n<p>The nature of the changes to Cranelift are such that we do have to do the transition atomically and remove <a href=\"http://regalloc.rs\">regalloc.rs</a> support at the same time; the whole MachInst infrastructure is basically built up around the regalloc abstractions, so swapping it out has a large effect. Fortunately though I think there is not too much of a downside (aside from the usual code-churn risk, which we mitigate with ongoing fuzzing and careful review) -- performance numbers look good.</p>\n<p>Here is a current snapshot of some benchmark results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\">       </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wallclock</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">scalar</span><span class=\"w\">   </span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">28</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">blake3</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\">                     </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">meshoptimizer</span><span class=\"w\">   </span><span class=\"mi\">19</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">bz2</span><span class=\"w\">             </span><span class=\"mi\">15</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"n\">SpiderMonkey</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">21</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">clang</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">      </span><span class=\"mi\">42</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\">                  </span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"n\">A</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with full details here:</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Benchmark methodology and raw output&lt;/summary&gt;<br>\n&lt;pre&gt;<br>\nAs percentage improvement over baseline (old):</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   25% faster                  28% faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   19% faster                  17% faster<br>\npulldown-cmark  17% faster                  no diff<br>\nbz2             15% faster                  no diff<br>\nSpiderMonkey,   21% faster                  2% faster<br>\n  fib(30)<br>\nclang.wasm      42% faster                  N/A</p>\n<p>As ratios (percent improvement above = 100% * (1 - 1/speedup_ratio))</p>\n<p>Benchmark       Compilation (wallclock)     Execution (wallclock)<br>\nblake3-scalar   1.34x faster                1.38x faster<br>\nblake3-simd     no diff                     no diff<br>\nmeshoptimizer   1.24x faster                1.21x faster<br>\npulldown-cmark  1.21x faster                no diff<br>\nbz2             1.18x faster                no diff<br>\nSpiderMonkey,   1.26x faster                1.02x faster<br>\n  fib(30)<br>\nclang.wasm      1.71x faster                N/A</p>\n<p>Methodology:</p>\n<ul>\n<li>Sightglass with --processes 2 --iterations-per-process 5.</li>\n<li>Last two benchmarks running commandline wasmtime<ul>\n<li>rm -r ~/.cache/wasmtime</li>\n<li>run <code>wasmtime run</code> once to ensure compiled</li>\n<li>measure runtime 5x, take best of five</li>\n<li>measure compile time with <code>wasmtime compile</code> 5x, take best of five</li>\n<li>clang.wasm doesn't have a test harness, so is compile-only</li>\n</ul>\n</li>\n<li>Testing on 12-core / 24-thread Ryzen 3900X, Linux/x86-64</li>\n</ul>\n<p>Comparing baseline of Wasmtime fdf063df98ad3839b0e0b78ea55b53b1a296abb0 (from<br>\nMar 16) against my internal regalloc2 branch<br>\n9b89942cf62d262ee9ac3e7eab525ea8544a458b (from Mar 17) which last synced with<br>\nWasmtime at eb1b71e31c035ff4250c5013ca0268deb931aa7c (from Feb 24).</p>\n<p>Raw output of Sightglass below (instantiation excluded, not interesting).</p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 121531866.00 ± 51042761.18 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[478052996 501410277.40 591983000] <a href=\"http://new.so\">new.so</a><br>\n  [604955098 622942143.40 709527450] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 31981472.00 ± 13432120.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.14x to 1.34x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.89x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[125802142 131948268.40 155782325] <a href=\"http://new.so\">new.so</a><br>\n  [159196645 163929740.40 186715328] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 36931.50 ± 3272.72 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[105358 106660.00 110728] <a href=\"http://new.so\">new.so</a><br>\n  [140608 143591.50 149787] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-scalar/benchmark.wasm</p>\n<p>Δ = 140341.60 ± 12437.21 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.32x to 1.38x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.72x to 0.77x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[400368 405315.60 420774] <a href=\"http://new.so\">new.so</a><br>\n  [534318 545657.20 569202] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[112727304 139448014.80 189082604] <a href=\"http://new.so\">new.so</a><br>\n  [123143218 156732493.40 233512432] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[29664800 36696541.20 49758219] <a href=\"http://new.so\">new.so</a><br>\n  [32405712 41244760.40 61449541] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[400672 739521.80 1042226] <a href=\"http://new.so\">new.so</a><br>\n  [498142 828791.40 1160786] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/blake3-simd/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[105439 194609.20 274267] <a href=\"http://new.so\">new.so</a><br>\n  [131088 218099.20 305464] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 483775336.20 ± 24646158.96 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[2090515508 2113482784.00 2150210240] <a href=\"http://new.so\">new.so</a><br>\n  [2554359582 2597258120.20 2630111328] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 127275628.40 ± 6480546.57 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.22x to 1.24x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.80x to 0.82x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[550127669 556172437.60 565836581] <a href=\"http://new.so\">new.so</a><br>\n  [672188482 683448066.00 692063546] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 3386913742.00 ± 454568778.61 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[17786842514 17978520795.40 18352029814] <a href=\"http://new.so\">new.so</a><br>\n  [20863697992 21365434537.40 22139271504] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/meshoptimizer/benchmark.wasm</p>\n<p>Δ = 891020039.40 ± 119694835.02 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[4680694128 4731128047.40 4829411387] <a href=\"http://new.so\">new.so</a><br>\n  [5489883512 5622148086.80 5826025212] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 213252595.20 ± 29303757.92 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[1120180378 1148350389.80 1203069094] <a href=\"http://new.so\">new.so</a><br>\n  [1340768136 1361602985.00 1397014596] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 56118120.00 ± 7711578.76 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.16x to 1.21x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.82x to 0.86x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[294780634 302193792.40 316593182] <a href=\"http://new.so\">new.so</a><br>\n  [352828441 358311912.40 367631343] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[8257780 8443755.80 8560944] <a href=\"http://new.so\">new.so</a><br>\n  [8455570 9495162.60 17648568] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[2173072 2222013.50 2252853] <a href=\"http://new.so\">new.so</a><br>\n  [2225116 2498693.60 4644290] <a href=\"http://old.so\">old.so</a></p>\n<hr>\n<p>compilation :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 58684068.80 ± 36909440.37 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[498967588 545831464.20 586460840] <a href=\"http://new.so\">new.so</a><br>\n  [540660276 604515533.00 635005118] <a href=\"http://old.so\">old.so</a></p>\n<p>compilation :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>Δ = 15436153.00 ± 9714229.01 (confidence = 99%)</p>\n<p><a href=\"http://new.so\">new.so</a> is 1.04x to 1.18x faster than <a href=\"http://old.so\">old.so</a>!<br>\n<a href=\"http://old.so\">old.so</a> is 0.84x to 0.96x faster than <a href=\"http://new.so\">new.so</a>!</p>\n<p>[131305387 143637939.40 154329874] <a href=\"http://new.so\">new.so</a><br>\n  [142264400 159074092.40 167089438] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: nanoseconds :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[25932760 35978222.50 53794238] <a href=\"http://new.so\">new.so</a><br>\n  [28960083 29737468.90 35137211] <a href=\"http://old.so\">old.so</a></p>\n<p>execution :: cycles :: benchmarks-next/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[98545894 136719075.20 204420658] <a href=\"http://new.so\">new.so</a><br>\n  [110059628 113008690.20 133522880] <a href=\"http://old.so\">old.so</a><br>\n&lt;/pre&gt;<br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 278996408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649957380
    }
]