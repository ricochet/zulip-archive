[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a> from <code>isle-new-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>I've replaced the overlap checker with one that uses my new IR for ISLE. This is a step toward using the new IR for codegen too. This step gives me some confidence in the correctness of the IR construction without having to get all the codegen details right yet.</p>\n<p>This isn't quite ready to merge yet, but it's at a milestone where I think it should pass CI, so I thought folks like @elliottt or @fitzgen might want to take a look.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 307867958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667524678
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1167917337\">PR review</a>.</p>",
        "id": 307881511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667535486
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1013592386\">PR review comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> </p>\n</blockquote>",
        "id": 307881512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667535486
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a> from <code>isle-new-ir</code> to <code>main</code>.</p>",
        "id": 308051979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667597166
    },
    {
        "content": "<p><strong>jameysharp</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a> as ready for review.</p>",
        "id": 308052126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667597251
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a> from <code>isle-new-ir</code> to <code>main</code>.</p>",
        "id": 308079829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667612491
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a> from <code>isle-new-ir</code> to <code>main</code>.</p>",
        "id": 308210936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667705119
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1171196416\">PR review</a>.</p>",
        "id": 308491854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015971036\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we call this an \"unreachable rule\"? I agree that \"unmatchable\" is a little more specific to a term-rewriting system and may otherwise be a better descriptor, but I think that \"unreachable\" has more immediate and intuitive connotations for someone trying to learn how to write ISLE rules.</p>\n</blockquote>",
        "id": 308491857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015973282\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we make these actual newtype wrappers, like <code>pub struct TupleIndex(u8);</code> with all the necessary derives?</p>\n<p>I used to define index types like this as well (and islec may have artifacts of that still) but I tend to prefer the actual-newtype style now to avoid the silent assignments of one type to another that's possible with shallow aliases.</p>\n</blockquote>",
        "id": 308491859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015975789\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a neat little data-structure -- perhaps it could be factored out? I guess it's semantically equivalent to a union-find with a set of all elements stored at the UF root as well, but it's nicer than that because it's constant-space (per binding). <code>EquivClasses&lt;T&gt;</code> or something like that...</p>\n<p>(Similar comment as above re: ensuring the <code>HashMap</code> nondeterminism doesn't leak to users of this IR, as well)</p>\n</blockquote>",
        "id": 308491860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015977903\">PR review comment</a>:</p>\n<blockquote>\n<p>In general I've tried to use <code>BTreeMap</code> where possible in IR to maintain dete rministic codegen. It probably doesn't matter now for overlap checking but this may become an issue later, if we don't remember to sort. Is it reasonable to use a <code>BTreeMap</code> here to ensure that at the top level? Or if you'd prefer to keep a <code>HashMap</code>, make this non-<code>pub</code> and either just the per-key <code>get</code>/<code>get_mut</code> as methods, or a \"return sorted constrained binding IDs\" method if needed?</p>\n</blockquote>",
        "id": 308491861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015981664\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you say why this is needed for correctness in this comment, for clarity?</p>\n<p>(Because the iteration pattern below catches (present in small, not present in big) and we would miss that case if iterating over <code>big</code> in the outermost loop, right?)</p>\n</blockquote>",
        "id": 308491863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015983134\">PR review comment</a>:</p>\n<blockquote>\n<p>Probably doesn't matter too much in practice right now (rule bodies should have O(a dozen) or so bindings at most?) but to avoid potential quadratic behavior here we could use a doubly-linked circular list. Genuine question: I wonder if this will become an ISLE compilations-speed issue in the future if we have very large machine-generated rule bodies of some sort?</p>\n</blockquote>",
        "id": 308491864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015984939\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you expand this comment a bit more, explaining the overall scheme and why it works? Copy the constraints, meaning... push all constraints to one member of the equivalence class? Or...?</p>\n</blockquote>",
        "id": 308491865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015982211\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we have a comment here for now stating that we're ignoring <code>equals</code> and that this is fine (albeit imprecise) and why?</p>\n</blockquote>",
        "id": 308491866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015987870\">PR review comment</a>:</p>\n<blockquote>\n<p>This one is a bit mystifying too, sorry -- leaves a few questions for me: why remove an equivalence class after processing just one link? What do you mean by \"all the constraints are equal\"? Where did that check happen?</p>\n</blockquote>",
        "id": 308491868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863277
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015988458\">PR review comment</a>:</p>\n<blockquote>\n<p>what are the \"bindings\" here -- can you name this variable more descriptively? They're sub-bindings (bindings whose value must be computed first), or...? Can we factor out the logic here into a helper?</p>\n</blockquote>",
        "id": 308491869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863277
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015989333\">PR review comment</a>:</p>\n<blockquote>\n<p>OK so we're following an equivalence link, somehow rebuilding any Variants (ie renormalizing the <code>source</code>), and then pushing that constraint back on the workqueue?</p>\n</blockquote>",
        "id": 308491870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863277
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015991926\">PR review comment</a>:</p>\n<blockquote>\n<p>And after reading the body of this function -- it's <em>extremely</em> confusing. Variable names are actively trying to melt my brain (<code>constraints</code> is a workqueue of sorts, <code>constraint</code> is a local thing; <code>binding</code> is something that comes from <code>constraints</code>, but <code>bindings</code> is something pulled out of <code>constraint</code>). It sort of reads like it's meant to normalize variant extractions.</p>\n<p>I have to ask -- would it be better to take a more immutable approach to normalization here, where we (i) hashcons expression nodes, (ii) normalize all args (using e.g. a union-find) before creating a node on those args, and (iii) eagerly process equalities to create the union-find ahead of time (or as we go, at least)? Trying to reprocess post-facto here seems fraught with complexity and in any case is quite hard to understand (and thus maintain)!</p>\n</blockquote>",
        "id": 308491871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863277
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1171196416\">PR review</a>.</p>",
        "id": 308491872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863277
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1171233660\">PR review</a>.</p>",
        "id": 308493267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863905
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1015998168\">PR review comment</a>:</p>\n<blockquote>\n<p><code>BTreeMap</code> has the disadvantage of being slower to compile than <code>HashMap</code> due to generating a lot more LLVM ir. cranelift-isle is decently fast to compule, so it doesn't matter that much right now, but it might be something to keep in mind.</p>\n</blockquote>",
        "id": 308493268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667863905
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a> from <code>isle-new-ir</code> to <code>main</code>.</p>",
        "id": 308507607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667873917
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1171347840\">PR review</a>.</p>",
        "id": 308507838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667874130
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1016080828\">PR review comment</a>:</p>\n<blockquote>\n<p>I originally tried to maintain an invariant during construction that every binding site could have a concrete constraint, or could participate in an equality constraint, but not both. I couldn't reason through making that work. My head hurt less when I just established that invariant after construction instead.</p>\n<p>I've renamed many of the variables and added about 60 lines of comments to this function. Could you take another look and see if it makes more sense now?</p>\n</blockquote>",
        "id": 308507839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667874130
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1016086306\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I thought about using union-find until I realized I needed to visit every element of the equivalence class starting from an arbitrary element of the class. Although I'm not 100% sure that's as important as I thought it was, so union-find might still be an option.</p>\n<p>I'm amused to realize that union-find plus a set for each root is _also_ O(1) space per binding, it just has larger constants... I think you could maintain first-child/next-sibling pointers in a union-find data structure, which would only triple the constant factors over my version.</p>\n<p>I'm not immediately convinced it's worth factoring out a separate type for this though. I'm inclined to see if it gets more complex in the rest of review first.</p>\n</blockquote>",
        "id": 308508694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667874904
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1171355427\">PR review</a>.</p>",
        "id": 308508695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667874904
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1171357188\">PR review</a>.</p>",
        "id": 308508927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667875096
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1016087561\">PR review comment</a>:</p>\n<blockquote>\n<p>The way I'm expecting to use this is to iterate over <code>RuleSet::bindings</code> and then look up constraints accordingly. I guess a public <code>get</code> method with a private <code>HashMap</code> should be fine for that...</p>\n</blockquote>",
        "id": 308508928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667875096
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1171381783\">PR review</a>.</p>",
        "id": 308511564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667877618
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1171381783\">PR review</a>.</p>",
        "id": 308511565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667877618
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1016105441\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm -- now that I think about it more, I'm not sure this is always a valid transform as a general IR normalization/canonicalization (as opposed to something useful just for overlap-checking). Specifically, I think it loses information -- consider</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">term</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">T.A</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"nv\">--&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">term</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">T.A</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">T.A</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>if we then match against the input <code>(term (T.A 1 2) (T.A 1 3))</code>, the original form will not match, but the rewritten form will match (incorrectly, wrt the original pattern).</p>\n<p>I suppose this is fine for overlap checking -- the rule always \"expands\" (matches more) under this transform, I think, since we can lose equality constraints -- but I think it is only exact (my inner thermodynamicist is going to invent the word \"isoconstraining\" for this) if the constraint on the constrained-and-equals site <em>fully captures the value</em> (if a variant, all fields have patterns that, recursively, fully capture the value, or are just a variable binding).</p>\n<p>So if we hope to use this IR as a basis for compilation, I think we need to avoid this transform, though I suppose we will want to find a way to get the same effect for overlap checking, unless we have a more direct way of handling the equality constraints. (It feels like maybe there should be a more direct way to handle the equality constraints, but I don't have any good ideas right now, sorry!)</p>\n</blockquote>",
        "id": 308511566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667877618
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1016105441\">PR review comment</a>.</p>",
        "id": 308511596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667877662
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1016105441\">PR review comment</a>.</p>",
        "id": 308511622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667877699
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1171385647\">PR review</a>.</p>",
        "id": 308512004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667878029
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1016108120\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, and now that I write all that, I see the <code>y</code> term in the above, and I've looked at the code again and am understanding the bit about handling all bindings within the variant -- I think I've convinced myself of the need for what you are actually doing already. So, nevermind all of the above :-)</p>\n</blockquote>",
        "id": 308512005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667878029
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1016953673\">PR review comment</a>:</p>\n<blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=qTA0RuZoIxM\">https://www.youtube.com/watch?v=qTA0RuZoIxM</a></p>\n</blockquote>",
        "id": 308640820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667930220
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1172601349\">PR review</a>.</p>",
        "id": 308640821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667930220
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a> from <code>isle-new-ir</code> to <code>main</code>.</p>",
        "id": 308666640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667938648
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a> from <code>isle-new-ir</code> to <code>main</code>.</p>",
        "id": 308674831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667942024
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1172849590\">PR review</a>.</p>",
        "id": 308675343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667942233
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1017121600\">PR review comment</a>:</p>\n<blockquote>\n<p>I went ahead and used union-find, factored out to a separate type since that's a little more complex.</p>\n<p>It's a good change, except that now removing a set from the data structure requires visiting every member of every set to figure out whether it's part of the desired set.</p>\n<p>I'm inclined to not try to improve that, but I have some ideas if we find it's a performance problem later.</p>\n</blockquote>",
        "id": 308675345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667942233
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1017122194\">PR review comment</a>:</p>\n<blockquote>\n<p>I've fixed this potential quadratic behavior, using union-find.</p>\n</blockquote>",
        "id": 308675435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667942277
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1172850426\">PR review</a>.</p>",
        "id": 308675436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667942277
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1017131101\">PR review comment</a>:</p>\n<blockquote>\n<p>I've tried making the equality normalization incremental, in commit 0b9fe9040. It turns out to be pretty much exactly the same amount of code as doing it in a post-processing pass, unless I've missed a trick somewhere.</p>\n<p>Also, I think it will do more work if three or more binding sites with enum-variant constraints get set equal to each other. In that case it runs n-1 times, and each time it builds all fields for two of the binding sites, instead of running once and building the fields for n binding sites all together. Then, if any field on the first binding site had a constraint, the same reasoning applies recursively.</p>\n<p>So I'm thinking about dropping that change before merging. Would you take a look and see what you think?</p>\n</blockquote>",
        "id": 308676946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667942958
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1172863052\">PR review</a>.</p>",
        "id": 308676947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667942958
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1018516219\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's make a specific note of the <code>y</code> here -- this is why it is still exactly equivalent, and not a coarsening</p>\n</blockquote>",
        "id": 308897455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668038881
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1018515933\">PR review comment</a>:</p>\n<blockquote>\n<p>can we say \"entry in <code>equals</code>\" as a parenthetical to reminder the reader here?</p>\n</blockquote>",
        "id": 308897456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668038881
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1174895337\">PR review</a>.</p>",
        "id": 308897457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668038881
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1174895337\">PR review</a>.</p>",
        "id": 308897458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668038881
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1018528237\">PR review comment</a>:</p>\n<blockquote>\n<p>Add a comment here why convert to expr-land and dedup -- so that we strongly normalize external-extractor-of-a-given-binding-site</p>\n</blockquote>",
        "id": 308897460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668038881
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1018525460\">PR review comment</a>:</p>\n<blockquote>\n<p>Add a comment here describing why safe to only check for constraint on <code>b</code> if we didn't invoke <code>set_constraint_on_class(a, ...)</code> above -- because the above will otherwise see any constraints on <code>b</code> because it's part of the same equivalence class now (due to merge above).</p>\n</blockquote>",
        "id": 308897461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668038881
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a> from <code>isle-new-ir</code> to <code>main</code>.</p>",
        "id": 309520314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668390110
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#pullrequestreview-1178360288\">PR review</a>.</p>",
        "id": 309520609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668390411
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195#discussion_r1021012626\">PR review comment</a>:</p>\n<blockquote>\n<p>Strongly normalizing is a red herring in this case. External extractor calls would be normalized whether we represent them as an <code>Expr</code> or as a <code>Binding</code> here. The entire reason for converting from pattern to expression and back around external extractor calls is because I designed this representation to closely resemble what we can easily implement with Rust as our codegen target, and you can't do a function call in a Rust pattern match. I've added comments in a variety of places which I hope would have clarified this for you if I'd written them before your code review.</p>\n</blockquote>",
        "id": 309520610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668390411
    },
    {
        "content": "<p>jameysharp has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a>.</p>",
        "id": 309520654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668390481
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5195\">PR #5195</a>.</p>",
        "id": 309522892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668392964
    }
]