[
    {
        "content": "<p>thepowersgang opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1323\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1323\">Issue #1323</a>:</p>\n<blockquote>\n<p>Steps to reproduce:</p>\n<ul>\n<li>Structure code to seal blocks early (instead of sealing in bulk)</li>\n<li>Use <code>cranelift_frontend::Switch</code> to generate a sparse switch such that it generates chained comparisons instead of a jump table.</li>\n<li>Observe debug assertion regarding unsealed blocks.</li>\n</ul>\n<p>Version:</p>\n<ul>\n<li>As of current HEAD (832666c45ead73fd833ea86da94cacb2f30a530c), there is no reference to <code>seal_block</code> in the <code>switch</code> module. Issue originally seen with <code>v0.58</code> from <code>crates.io</code></li>\n</ul>\n</blockquote>",
        "id": 190575704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584153887
    },
    {
        "content": "<p>thepowersgang labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1323\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1323\">Issue #1323</a>:</p>\n<blockquote>\n<p>Steps to reproduce:</p>\n<ul>\n<li>Structure code to seal blocks early (instead of sealing in bulk)</li>\n<li>Use <code>cranelift_frontend::Switch</code> to generate a sparse switch such that it generates chained comparisons instead of a jump table.</li>\n<li>Observe debug assertion regarding unsealed blocks.</li>\n</ul>\n<p>Version:</p>\n<ul>\n<li>As of current HEAD (832666c45ead73fd833ea86da94cacb2f30a530c), there is no reference to <code>seal_block</code> in the <code>switch</code> module. Issue originally seen with <code>v0.58</code> from <code>crates.io</code></li>\n</ul>\n</blockquote>",
        "id": 190575705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584153887
    },
    {
        "content": "<p>thepowersgang labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1323\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1323\">Issue #1323</a>:</p>\n<blockquote>\n<p>Steps to reproduce:</p>\n<ul>\n<li>Structure code to seal blocks early (instead of sealing in bulk)</li>\n<li>Use <code>cranelift_frontend::Switch</code> to generate a sparse switch such that it generates chained comparisons instead of a jump table.</li>\n<li>Observe debug assertion regarding unsealed blocks.</li>\n</ul>\n<p>Version:</p>\n<ul>\n<li>As of current HEAD (832666c45ead73fd833ea86da94cacb2f30a530c), there is no reference to <code>seal_block</code> in the <code>switch</code> module. Issue originally seen with <code>v0.58</code> from <code>crates.io</code></li>\n</ul>\n</blockquote>",
        "id": 190575706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584153887
    },
    {
        "content": "<p>teapotd <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1323#issuecomment-599871655\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1323#issuecomment-599871655\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1323\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1323\">Issue #1323</a>:</p>\n<blockquote>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_ctx</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">block0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Switch</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">switch</span><span class=\"p\">.</span><span class=\"n\">set_entry</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">switch</span><span class=\"p\">.</span><span class=\"n\">set_entry</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">switch</span><span class=\"p\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">block1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// panic: &#39;all blocks should be sealed before dropping a FunctionBuilder&#39;</span>\n<span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This panics in <code>finalize</code>, because <code>Switch</code> generates additional blocks and it doesn't seal them:</p>\n<div class=\"codehilite\"><pre><span></span>function u0:0() fast {\nblock0:\n    v0 = iconst.i32 2\n    v1 = icmp_imm eq v0, 4\n    brnz v1, block2\n    jump block4\n\nblock4: ; this block is not sealed\n    v2 = icmp_imm.i32 eq v0, 2\n    brnz v2, block1\n    jump block3\n\nblock1:\n    return\n\nblock2:\n    return\n\nblock3:\n    return\n}\n</pre></div>\n\n\n<p>An obvious way to fix this issue would be to seal generated blocks when switch is built, but it would break code that seal sections in bulk using <code>seal_all_blocks</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_ctx</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_all_blocks</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// panic: &#39;Attempting to seal block0 which is already sealed.&#39;</span>\n</pre></div>\n\n\n<p>We could change <code>seal_all_blocks</code> to ignore already sealed blocks instead of panicking.</p>\n</blockquote>",
        "id": 190807436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584419349
    },
    {
        "content": "<p>thepowersgang <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1323#issuecomment-601198811\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1323#issuecomment-601198811\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1323\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1323\">Issue #1323</a>:</p>\n<blockquote>\n<p>I feel that having <code>Switch::emit</code> (configurably) seal created blocks is the more correct option from a \"user\" point of view. Needing to call <code>seal_all_blocks</code> just because you used a <code>Switch</code> prevents you from catching cases where you forgot to seal one of your own blocks.</p>\n</blockquote>",
        "id": 191117572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584626871
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1323\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1323\">Issue #1323</a>:</p>\n<blockquote>\n<p>Steps to reproduce:</p>\n<ul>\n<li>Structure code to seal blocks early (instead of sealing in bulk)</li>\n<li>Use <code>cranelift_frontend::Switch</code> to generate a sparse switch such that it generates chained comparisons instead of a jump table.</li>\n<li>Observe debug assertion regarding unsealed blocks.</li>\n</ul>\n<p>Version:</p>\n<ul>\n<li>As of current HEAD (832666c45ead73fd833ea86da94cacb2f30a530c), there is no reference to <code>seal_block</code> in the <code>switch</code> module. Issue originally seen with <code>v0.58</code> from <code>crates.io</code></li>\n</ul>\n</blockquote>",
        "id": 195752744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588185764
    }
]