[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321#issuecomment-1531857919\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321\">issue #6321</a>:</p>\n<blockquote>\n<p>Oh one thing I thought of this morning -- this means that the backtrace code is no longer guaranteed to walk the stack in-order of activations. I don't believe there's any issues with that, but it's worth being aware of. The reason for this is that while the activations are ordered when we walk each activation we walk its <code>old_*</code> pointers which are the previous pointers for the limits. </p>\n<p>If you had A call B call A which trapped, then you'd get the first contiguous region in A but then when you walk over the <code>CallThreadState</code> the first one points to the first A on the stack. The next <code>CallThreadState</code> would... actually I think B would be dropped entirely?</p>\n<p>Hm ok so now as I write this out, I think it means that <code>Backtrace</code> is no longer guaranteed to capture all frames on the stack, no in order. That's ok though since it's guaranteed to capture everything within one store's limits in order which is all we need.</p>\n</blockquote>",
        "id": 355217952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683048052
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321#issuecomment-1531875287\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321\">issue #6321</a>:</p>\n<blockquote>\n<p>I don't understand the issue you're raising, Alex, but my profiling work will produce misleading results if the subset of stack frames which are part of the user-selected modules are returned out of order. Should I be concerned about this?</p>\n</blockquote>",
        "id": 355221416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683048859
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321#issuecomment-1531884497\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321\">issue #6321</a>:</p>\n<blockquote>\n<p>Sort of yes and sort of no. Within a single <code>Store&lt;T&gt;</code> there's nothing to worry about, everything will always be in-order. What this means though is that if there are multiple stores on the stack then the frames will be out of order. Or more precisely, the originating store will have in-order frames and the other stores may or may not have frames interspersed in whatever order (depends on exact details).</p>\n<p>This is ok for <code>WasmBacktrace</code> since it goes through a symbolication phase that discards anything it can't symbolicate, and it can only symbolicate modules registered in the store. In theory this discards any non-store frames, although as I'm typing this I'm now realizing that the same module can be instantiated in different stores so this isn't quite true.</p>\n<p>For the profiler just added, however, it doesn't do any filtering, so it does mean that frames will be out of order since non-store-local frames are not filtered out.</p>\n<p>@fitzgen I'm actually going to bump this out of the queue now that I think on this more. I'm worried about the case where a module is instantiated in two stores and then the store are interleaved. All frames will symbolicate in either store but the stacks are going to be quite odd. I think we should actually explicitly update backtracing to take a <code>*mut VMRuntimeLimits</code> parameter and only trace activations for those limits?</p>\n</blockquote>",
        "id": 355223509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683049280
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321#issuecomment-1531896962\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321\">issue #6321</a>:</p>\n<blockquote>\n<p>The new profiler actually does filter to only frames from a specified set of modules, but your point still stands because it has the same problem that <code>WasmBacktrace</code> does, that the same module might be instantiated in multiple stores.</p>\n</blockquote>",
        "id": 355225994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683049859
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321#issuecomment-1532246983\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6321\">issue #6321</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen, @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:ref-types\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: wasmtime:ref-types</li>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 355278503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683067495
    }
]