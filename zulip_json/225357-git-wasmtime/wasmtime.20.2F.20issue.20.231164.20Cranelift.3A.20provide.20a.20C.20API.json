[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">issue #1164</a>:</p>\n<blockquote>\n<p>What I'd like to see is a way to use Cranelift apis from another (non rust) language. Currently the cranelift apis are rust only, but having a layer on top of that like \"llvm-c\" is, would make the cranelift api usable from all languages, and thus a much wider range of compilers could use it as a backend.</p>\n</blockquote>",
        "id": 281228733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651703233
    },
    {
        "content": "<p>rishavs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-1280321946\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">issue #1164</a>:</p>\n<blockquote>\n<p>Is this likely to happen? I'd really like to try out cranelift for my toy language, but the lack of a simple c api will mean that I will have to stick with llvm instead.</p>\n</blockquote>",
        "id": 304384364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665985706
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-1280329512\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">issue #1164</a>:</p>\n<blockquote>\n<p>I personally think it would be nice to have this, but it's not a small task to build, and no one currently has the time to do it. If you (or anyone) would like to contribute this, we'd be happy to talk further -- the first step would probably be gathering feedback in an RFC.</p>\n</blockquote>",
        "id": 304385785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665986453
    },
    {
        "content": "<p>rishavs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-1288522493\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">issue #1164</a>:</p>\n<blockquote>\n<p>This is way out of my league so likely a stupid question; but if I build a so/dll of all the cranelift crates like <code>cranelift = \"0.89.0\"</code> using cargo, can I use this .so file in other languages which support FFI?</p>\n</blockquote>",
        "id": 305759441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666595513
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-1288567528\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">issue #1164</a>:</p>\n<blockquote>\n<p>No, rust's ABI is not stable, so you can't call any of the methods in this dylib. You have to write a C interface for every function you want to call from non-rust code and then use this C interface.</p>\n</blockquote>",
        "id": 305764705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666597892
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-1289517463\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">issue #1164</a>:</p>\n<blockquote>\n<blockquote>\n<p>This is way out of my league so likely a stupid question; but if I build a so/dll of all the cranelift crates like cranelift = \"0.89.0\" using cargo, can I use this .so file in other languages which support FFI?</p>\n</blockquote>\n<p>To add a little more nuance: (i) Rust does have the ability to produce <code>.so</code>s that can be called with a C ABI; but (ii) that requires explicit work, in defining the C-ABI-compatible exports (<code>#[no_mangle]</code> and <code>extern \"C\" fn</code> are the relevant search terms, as well as care about data structure layout and use of <code>#[repr(C)]</code> on structs where needed).</p>\n</blockquote>",
        "id": 305901985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666640780
    },
    {
        "content": "<p>tgross35 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-2005736750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">issue #1164</a>:</p>\n<blockquote>\n<p>Is there a place for a C API in-tree, or is that solidly out of scope?</p>\n<p>@coffeebe4code did some reworking of @carlokok's gist, <a href=\"https://github.com/coffeebe4code/craneliftc\">https://github.com/coffeebe4code/craneliftc</a>. If the methodology looks correct enough, that could likely be a reasonable starting point.</p>\n</blockquote>",
        "id": 427618861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710822841
    },
    {
        "content": "<p>tgross35 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-2005736750\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">issue #1164</a>:</p>\n<blockquote>\n<p>Is there a place for a C API in-tree, or is that solidly out of scope for the time being?</p>\n<p>@coffeebe4code did some reworking of @carlokok's gist, <a href=\"https://github.com/coffeebe4code/craneliftc\">https://github.com/coffeebe4code/craneliftc</a>. If the methodology looks correct enough, that could likely be a reasonable starting point.</p>\n</blockquote>",
        "id": 427618923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710822862
    }
]