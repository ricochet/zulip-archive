[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#issuecomment-973072075\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">issue #3545</a>:</p>\n<blockquote>\n<p>Thanks for tackling this -- excited to see the fast progress!</p>\n<p>I wanted to note specifically on</p>\n<blockquote>\n<p>a lot of the logic in put_input_in_rse_imm12_maybe_negated and alu_inst_imm12 is being inlined into the ISLE definitions for each instruction</p>\n</blockquote>\n<p>One of the things I had imagined when designing the compilation model (each internal constructor becomes a Rust function) is that we could actually replicate what we did in the handwritten code -- namely, we could have a helper that gives a <code>ResultRSEImm12</code>-like thing. I think doing so would help both from an expressivity point of view (less repetition, easier to understand) and code-size point of view.</p>\n<p>An interesting question is whether this is an extractor (part of the pattern) or a constructor; IMHO it makes sense to do it as a constructor because it's infallible -- we know we can always do something, we can't fall back to other rules -- so something like <code>(put_in_reg_shift_extend_imm12 value)</code> would make sense to me, then <em>that</em> constructor can have <code>(rule (put_in_reg_shift_extend_imm12 (imm12 val)) (ResultRSEImm12.Imm12 val))</code> etc. Thoughts?</p>\n</blockquote>",
        "id": 261958624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637255555
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#issuecomment-973093347\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">issue #3545</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 261960499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637256383
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#issuecomment-973099465\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">issue #3545</a>:</p>\n<blockquote>\n<blockquote>\n<p>An interesting question is whether this is an extractor (part of the pattern) or a constructor; IMHO it makes sense to do it as a constructor because it's infallible -- we know we can always do something, we can't fall back to other rules -- so something like <code>(put_in_reg_shift_extend_imm12 value)</code> would make sense to me, then _that_ constructor can have <code>(rule (put_in_reg_shift_extend_imm12 (imm12 val)) (ResultRSEImm12.Imm12 val))</code> etc. Thoughts?</p>\n</blockquote>\n<p>Because addition is commutative, we want to use a fallible extractor here that we can try in both the left and right operands, and then have a fallback base case for putting everything into registers.</p>\n<p>If this were subtraction, and we would want to just call this once for the right operand and accept whatever answer it gave, then I would agree that it should be a plain constructor.</p>\n<p>This is analogous to why there is both <code>put_in_reg_mem</code> and the <code>sinkable_load</code> extractor and <code>sink_load</code> constructor in the x86 ISLE code.</p>\n</blockquote>",
        "id": 261961479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637256789
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#issuecomment-973099465\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">issue #3545</a>:</p>\n<blockquote>\n<blockquote>\n<p>An interesting question is whether this is an extractor (part of the pattern) or a constructor; IMHO it makes sense to do it as a constructor because it's infallible -- we know we can always do something, we can't fall back to other rules -- so something like <code>(put_in_reg_shift_extend_imm12 value)</code> would make sense to me, then _that_ constructor can have <code>(rule (put_in_reg_shift_extend_imm12 (imm12 val)) (ResultRSEImm12.Imm12 val))</code> etc. Thoughts?</p>\n</blockquote>\n<p>Because addition is commutative, we want to use a fallible extractor here -- one that doesn't ever put the value into a register, only the immediate or shift or extend operand forms -- that we can try in both the left and right operands, and then have a fallback base case for putting everything into registers if those preferred operand modes fail.</p>\n<p>If this were subtraction, and we would want to just call this once for the right operand and accept whatever answer it gave, then I would agree that it should be a plain constructor.</p>\n<p>This is analogous to why there is both <code>put_in_reg_mem</code> and the <code>sinkable_load</code> extractor and <code>sink_load</code> constructor in the x86 ISLE code.</p>\n</blockquote>",
        "id": 261961723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637256877
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#issuecomment-973099465\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">issue #3545</a>:</p>\n<blockquote>\n<blockquote>\n<p>An interesting question is whether this is an extractor (part of the pattern) or a constructor; IMHO it makes sense to do it as a constructor because it's infallible -- we know we can always do something, we can't fall back to other rules -- so something like <code>(put_in_reg_shift_extend_imm12 value)</code> would make sense to me, then _that_ constructor can have <code>(rule (put_in_reg_shift_extend_imm12 (imm12 val)) (ResultRSEImm12.Imm12 val))</code> etc. Thoughts?</p>\n</blockquote>\n<p>Because addition is commutative, we want to use a fallible extractor here -- one that doesn't ever put the value into a register, only the immediate or shift or extend operand forms -- that we can try in both the left and right operands, and then have a fallback base case for putting everything into registers if those preferred operand modes fail.</p>\n<p>If this were subtraction, and we would want to just call this once for the right operand and accept whatever answer it gave, then I would agree that it should be a plain constructor.</p>\n<p>This is analogous to why there is both <code>put_in_reg_mem</code> and the <code>sinkable_load</code> extractor and <code>sink_load</code> constructor pair in the x86 ISLE code.</p>\n</blockquote>",
        "id": 261961821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637256921
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#issuecomment-973107551\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">issue #3545</a>:</p>\n<blockquote>\n<p>This is definitely one of the things I went back and forth on a lot of how to design this support. I was originally thinking I would do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">extract_rse_imm12</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">value_reg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alu_rse</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd_op</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">put_in_reg</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>extract_rse_imm12</code> basically corresponds to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1141169ff8c72e9b375acdbb1aaa2c27ee135a4c/cranelift/codegen/src/isa/aarch64/lower.rs#L453\"><code>put_input_in_rse_imm</code></a>. This gets kinda unfortunate I think relatively quickly for a few reasons:</p>\n<ul>\n<li>One is that for add/subtraction we actually want <code>extract_rse_maybe_negated_imm12</code> which has two outputs which is sorta wonky to describe in ISLE.</li>\n<li>Currently I think <code>extract_rse_imm12</code> can only be implemented in Rust, not in ISLE itself, which means that ISLE has no visibility into trees of expressions for a better trie to build. This also means that a lot of \"pattern matching code\" would still be present in Rust which I figured the goal was to move most of it to ISLE.</li>\n</ul>\n<p>My end-conclusion was that for all the <code>put_input_in_rs*</code>-style functions we'd have custom extractors for each variant of the <code>rs*</code> (one for extending, one for shifting, one for immediates, etc). This gives ISLE more visibility into the entire trie. For cases like shifts and immediates ISLE has the entire trie, but for extends ISLE doesn't get any part of the trie because we want to match a suite of extending operations and ISLE extractors can only have one \"arm\" right now in a sense. But I was hopeful that maybe one day this could be worked out where ISLE has the whole trie and is able to optimize with that where Rust is doing the bare minimum of converting between immediates and such.</p>\n<p>My conclusion was also the same as Nick's though where we want to have these as extractors rather than constructors. Today the AArch64 backend doesn't actually handle the case of an <code>iadd</code> with a left-hand-side immediate, that generates movement instructions and such. I think we might want to feasibly handle the commutative sides as well here in lowering.</p>\n</blockquote>",
        "id": 261963005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637257412
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#issuecomment-973125051\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">issue #3545</a>:</p>\n<blockquote>\n<p>Ah, good points. I agree that given the need to try both operand orders and pick the better one, and given subtle variations in some instructions, the current approach probably makes the most sense.</p>\n<p>One thought that does strike me is: if there are instructions with exactly the same cases, modulo opcode itself (e.g., all of the logical insts -- and, or, xor as a group, and and-not / or-not / xor-not as a group), we could have an extractor that matches any of the group, and returns the opcode; then use this opcode in the <code>(alu_rr_immlogical ...)</code> or whatnot. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">aarch64_logical_inst</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.))</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">alu_rr_immlogical</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">put_in_reg</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">put_in_reg</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with the N cases for immediates, shifts, etc., laid out here but only once for the and/or/not/... group.</p>\n</blockquote>",
        "id": 261966476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637258772
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#issuecomment-974152724\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">issue #3545</a>:</p>\n<blockquote>\n<p>Ah yeah I want to stay on the lookout for whether iadd/isub will have lots of duplication with other instructions, and if that's the case I think it's worth figuring out a different route here like the <code>aarch64_logical_inst</code> you mentioned @cfallin.</p>\n<p>Otherwise should be updated with your review @fitzgen!</p>\n</blockquote>",
        "id": 262078374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637334572
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#issuecomment-974293614\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">issue #3545</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 262105444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637345304
    }
]