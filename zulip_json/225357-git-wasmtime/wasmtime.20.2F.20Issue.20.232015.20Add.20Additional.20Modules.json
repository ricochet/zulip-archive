[
    {
        "content": "<p>AldaronLau opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2015\">Issue #2015</a>:</p>\n<blockquote>\n<p>In the readme, it says \"Initially, the focus is on WASI Core, an API module that covers files, networking, and a few other things. Additional modules are expected to be added in the future.\"</p>\n<p>I'm curious as to what it would take to start adding additional modules (I'm interested in contributing, and possibly helping design APIs outside of file management and networking).</p>\n<h4>Feature</h4>\n<p>Adding an API modules to cover something like a canvas (using JavaScript terminology), audio support, etc.</p>\n<h4>Benefit</h4>\n<p>Opens up possibilities to make graphics applications on WASI, or make a WASI virtual machine operating system (both are things I'm interested in doing).</p>\n<h4>Implementation</h4>\n<p>I think fairly minimal and simple asynchronous APIs inspired from <a href=\"https://docs.rs/cala/0.8.0/cala/speaker/index.html\">cala::speaker</a>/<a href=\"https://docs.rs/cala/0.8.0/cala/microphone/index.html\">cala::microphone</a> and <a href=\"https://docs.rs/cala/0.8.0/cala/pixels/index.html\">cala::pixels</a>/<a href=\"https://docs.rs/cala/0.8.0/cala/draw/index.html\">cala::draw</a> could be used (Cala is my project that I would like to use these features for).  wasmtime could possibly depend on it too or borrow some of the code from it in order to implement a \"canvas\" or \"audio\" module in the runtime.  A current issue with that proposal at the moment, is that most of the cala APIs currently only work on Linux, but that will likely change in the (hopefully) near future.</p>\n<h4>Alternatives</h4>\n<p>I'm guessing there's a way to link a WASI program to a native program, with some FFI calls, say between a Rust program that includes wasmtime to run the web assembly (similar to just using the wasm32-unknown-unknown target).  Although, at that point it would be fine to just use the wasm32-unknown-unknown target.  I think it would be better if wasmtime included the additional modules.</p>\n<p>Also, has any work been done to add any other modules besides WASI Core, that I am not aware of?</p>\n</blockquote>",
        "id": 203797903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594701155
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2015#issuecomment-658287475\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2015\">Issue #2015</a>:</p>\n<blockquote>\n<p>This may help: I'm working on a POC for an inference module, trying to follow the <a href=\"https://github.com/WebAssembly/WASI/blob/master/docs/Process.md\">proposal process</a>. I started by creating a draft spec, <a href=\"https://github.com/WebAssembly/wasi-nn/\">wasi-nn</a> and proposing it in one of the WASI meetings. That was enough to get the idea into stage 0 (or 1? not sure) to start proving out the concept. That approach might help you with this idea.</p>\n</blockquote>",
        "id": 203856341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594744905
    },
    {
        "content": "<p>AldaronLau <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2015#issuecomment-658333978\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2015\">Issue #2015</a>:</p>\n<blockquote>\n<p>Thanks!  This helped me find relevant issues to what I'm trying to accomplish: <a href=\"https://github.com/WebAssembly/WASI/issues/53\">https://github.com/WebAssembly/WASI/issues/53</a>, <a href=\"https://github.com/WebAssembly/WASI/issues/171\">https://github.com/WebAssembly/WASI/issues/171</a>, <a href=\"https://github.com/WebAssembly/WASI/issues/285\">https://github.com/WebAssembly/WASI/issues/285</a>.</p>\n</blockquote>",
        "id": 203867900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594750544
    },
    {
        "content": "<p>AldaronLau edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2015\">Issue #2015</a>:</p>\n<blockquote>\n<p>In the readme, it says \"Initially, the focus is on WASI Core, an API module that covers files, networking, and a few other things. Additional modules are expected to be added in the future.\"</p>\n<p>I'm curious as to what it would take to start adding additional modules (I'm interested in contributing, and possibly helping design APIs outside of file management and networking).</p>\n<h4>Feature</h4>\n<p>Adding an API modules to cover something like a canvas (using JavaScript terminology), audio support, etc.</p>\n<h4>Benefit</h4>\n<p>Opens up possibilities to make graphics applications on WASI, or make a WASI virtual machine operating system (both are things I'm interested in doing).</p>\n<h4>Implementation</h4>\n<p>I think fairly minimal and simple asynchronous APIs inspired from <a href=\"https://docs.rs/cala/0.8.0/cala/speaker/index.html\">cala::speaker</a>/<a href=\"https://docs.rs/cala/0.8.0/cala/microphone/index.html\">cala::microphone</a> and <a href=\"https://docs.rs/cala/0.8.0/cala/pixels/index.html\">cala::pixels</a>/<a href=\"https://docs.rs/cala/0.8.0/cala/draw/index.html\">cala::draw</a> could be used (Cala is my project that I would like to use these features for).  wasmtime could possibly depend on it too or borrow some of the code from it in order to implement a \"canvas\" or \"audio\" module in the runtime.  A current issue with that proposal at the moment, is that most of the cala APIs currently only work on Linux, but that will likely change in the (hopefully) near future.</p>\n<h4>Alternatives</h4>\n<p>I'm guessing there's a way to link a WASI program to a native program, with some FFI calls, say between a Rust program that includes wasmtime to run the web assembly (similar to just using the wasm32-unknown-unknown target).  Although, at that point it would be fine to just use the wasm32-unknown-unknown target.  I think it would be better if wasmtime included the additional modules.</p>\n<p>Also, has any work been done to add any other modules besides WASI Core, that I am not aware of?</p>\n<p><strong>edit</strong>: A WebGPU-based API could work as a (probably better) alternative for graphics</p>\n</blockquote>",
        "id": 203868085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594750646
    },
    {
        "content": "<p>jpryne <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2015#issuecomment-667685558\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2015\">Issue #2015</a>:</p>\n<blockquote>\n<p>I've been very interested in this concept for some time, yet am not confident I could hammer it out alone. If you reach a point of having a one or more WebGPU features implemented, I'd be happy to study that code, deriving from it further functions towards completion.</p>\n</blockquote>",
        "id": 205731019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596380798
    }
]