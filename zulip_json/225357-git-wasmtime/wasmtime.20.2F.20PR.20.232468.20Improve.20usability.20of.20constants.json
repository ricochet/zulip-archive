[
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468\">PR #2468</a>.</p>",
        "id": 218631431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949315
    },
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468\">PR #2468</a> from <code>improve-constants</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds a higher-level method, <code>LowerCtx::emit_constant</code> for lowering a constant in one of two ways:</p>\n<ul>\n<li>using a <code>DataValue</code> (instead of the previous <code>u64</code>), a value can be generated into a register using <code>MachInst::gen_constant</code></li>\n<li>alternately, if <code>MachInst::should_genenerate_constant_in_pool</code> is true, then a value is emitted into the constant pool/island and loaded from memory at runtime; this path uses <code>MachInst::gen_constant_in_pool</code>.</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 218631432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949315
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468\">PR #2468</a>.</p>",
        "id": 218631433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949315
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468\">PR #2468</a> from <code>improve-constants</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds a higher-level method, <code>LowerCtx::emit_constant</code> for lowering a constant in one of two ways:</p>\n<ul>\n<li>using a <code>DataValue</code> (instead of the previous <code>u64</code>), a value can be generated into a register using <code>MachInst::gen_constant</code></li>\n<li>alternately, if <code>MachInst::should_genenerate_constant_in_pool</code> is true, then a value is emitted into the constant pool/island and loaded from memory at runtime; this path uses <code>MachInst::gen_constant_in_pool</code>.</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 218632711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606950060
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#pullrequestreview-543326380\">PR Review</a>.</p>",
        "id": 218636154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606952472
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#pullrequestreview-543326380\">PR Review</a>.</p>",
        "id": 218636155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606952472
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#discussion_r534555538\">PR Review Comment</a>:</p>\n<blockquote>\n<p>s/in place/into a constant pool/, no? (Or perhaps \"should be generated into a constant pool and loaded (if true); otherwise, it should be generated in place by an instruction or instruction sequence.\"</p>\n<p>We should also clarify that if this function returns <code>false</code>, then <code>gen_constant</code> must be able to handle this value, and if <code>true</code>, then <code>gen_constant_in_pool</code> should.</p>\n</blockquote>",
        "id": 218636157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606952472
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#discussion_r534555633\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps we can call this <code>gen_constant_in_place</code> now (analogous to ...<code>_in_pool</code> below)?</p>\n</blockquote>",
        "id": 218636158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606952472
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#pullrequestreview-547318973\">PR Review</a>.</p>",
        "id": 219216466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607439727
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#discussion_r538469963\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Looks like there's a solution involving more traits that could avoid the assertions and the dummy unimplemented:</p>\n<ul>\n<li>have a trait <code>ConstantGenerator</code> that has a method \"gen_constant\"</li>\n<li>have a trait <code>PooledConstantGenerator</code>, that has three methods \"gen_constant_without_pool\", \"gen_constant_with_pool\", \"must_generate_in_pool\"</li>\n<li>then <code>PooledConstantGenerator</code> gets an blanket impl of <code>ConstantGenerator</code> based on these three functions above.</li>\n</ul>\n<p>Then backends have to implement <code>ConstantGenerator</code> either directly, or via an opt-in choice to use the pooled variant. It's a bit more involved though...</p>\n</blockquote>",
        "id": 219216467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607439727
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#discussion_r538469963\">PR Review Comment</a>.</p>",
        "id": 219216543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607439759
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#pullrequestreview-547333424\">PR Review</a>.</p>",
        "id": 219218329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607440589
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#pullrequestreview-547505379\">PR Review</a>.</p>",
        "id": 219242473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607451627
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#discussion_r538689283\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I like this scheme -- @abrown, does this seem reasonable to incorporate in your PR? I'd be happy to review it as a refactoring followup otherwise.</p>\n</blockquote>",
        "id": 219242474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607451627
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#pullrequestreview-547521889\">PR Review</a>.</p>",
        "id": 219245126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607452906
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468#discussion_r538711199\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I like it in principle! Let me dive back in and see how it comes out in practice.</p>\n</blockquote>",
        "id": 219245127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607452907
    },
    {
        "content": "<p>abrown closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468\">PR #2468</a>.</p>",
        "id": 327124670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676055380
    }
]