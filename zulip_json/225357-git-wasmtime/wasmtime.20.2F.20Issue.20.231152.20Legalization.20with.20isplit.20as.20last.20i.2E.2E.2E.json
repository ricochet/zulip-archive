[
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1152#issuecomment-620649642\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1152#issuecomment-620649642\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1152\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1152\">Issue #1152</a>:</p>\n<blockquote>\n<p>This legalization is added in #1616, using an intermediate copy.</p>\n</blockquote>",
        "id": 195573699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588084816
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1152#issuecomment-772721235\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1152\">Issue #1152</a>:</p>\n<blockquote>\n<p>The new backend framework doesn't use legalizations as much as the old backend framework anymore.</p>\n</blockquote>",
        "id": 225058341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612376680
    },
    {
        "content": "<p>bjorn3 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1152\">Issue #1152</a>:</p>\n<blockquote>\n<ul>\n<li>\n<p>What are the steps to reproduce the issue? Can you include a CLIF test case,<br>\n  ideally reduced with the <code>bugpoint</code> clif-util command?</p>\n<p>1. Add the following as legalization:</p>\n<p><code>rust\n  for &amp;(ty, ty_half) in &amp;[(I64, I32), (I128, I64)] {\n      let inst = ireduce.bind(ty_half).bind(ty);\n      expand.legalize(\n          def!(a = inst(x)),\n          vec![\n              def!((a, xh) = isplit(x)),\n          ]\n      )\n  }\n  </code></p>\n<p>2. Try to compile:</p>\n<p>```<br>\n  test run<br>\n  target x86_64</p>\n<p>function u0:0() -&gt; i64 system_v {<br>\n  ebb0:<br>\n      v0 = iconst.i64 0<br>\n      v2 = iconcat v0, v0<br>\n      v3 = ireduce.i64 v2<br>\n      return v3<br>\n  }<br>\n  ; run<br>\n  ```</p>\n</li>\n<li>\n<p>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</p>\n<p>I expected the <code>ireduce</code> to be legalized to <code>v3, v999 = isplit v2</code>. The result however was a verifier error:</p>\n<p>```<br>\n  function u0:0() -&gt; i64 [%rax] system_v {<br>\n                                  ebb0:<br>\n  [RexOp1pu_id#b8]                    v0 = iconst.i64 0<br>\n  [-]                                 v2 = iconcat v0, v0<br>\n  [Op1ret#c3]                         return v3<br>\n  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>\n  ; error: inst3: v3 is defined by inst2 which has no EBB</p>\n<p>}<br>\n  ```</p>\n<p>The problem is that the following legalization code is generated:</p>\n<p><code>rust\n  pos.func.dfg.clear_results(inst);\n  let curpos = pos.position();\n  let srcloc = pos.srcloc();\n  let (a, xh) = split::isplit(pos.func, cfg, curpos, srcloc, x);\n  let removed = pos.remove_inst();\n  debug_assert_eq!(removed, inst);\n  return true;\n  </code></p>\n<p>The inst results are never attached to an instruction again, nor turned into aliases.</p>\n</li>\n<li>\n<p>Which Cranelift version / commit hash / branch are you using? <a href=\"http://bed9a72a777f1b972e58ad250ead851585d9ab1e\">master</a><br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 225058342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612376681
    }
]