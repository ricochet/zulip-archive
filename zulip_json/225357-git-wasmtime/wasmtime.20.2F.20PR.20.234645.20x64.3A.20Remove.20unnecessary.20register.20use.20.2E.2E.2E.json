[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645\">PR #4645</a> from <code>trevor/x64-opt-cmp-with-constant</code> to <code>main</code>:</p>\n<blockquote>\n<ul>\n<li>Add a test case for icmps we hope to optimize</li>\n<li>Add a rule to better lower comparisons against constants</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 292491746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659990277
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645\">PR #4645</a> from <code>trevor/x64-opt-cmp-with-constant</code> to <code>main</code>.</p>",
        "id": 292492003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659990426
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645\">PR #4645</a> from <code>trevor/x64-opt-cmp-with-constant</code> to <code>main</code>:</p>\n<blockquote>\n<p>When lowering instructions like <code>icmp eq (iconst 0), v2</code>, we currently store the constant <code>0</code> in a register before performing the comparison. The result is that for inputs like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">brnz</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we generate this assembly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9d</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r10d</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">cmpl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r9d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r10d</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">jz</span><span class=\"w\">      </span><span class=\"n\">label1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">label2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This PR introduces a case into <code>emit_cmp</code> that handles constants on the left-hand side of a comparison by swapping the order and reversing the operation. With this new rule, we emit the following assembly for the clif snippet above:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r8d</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">cmpl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r8d</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">jz</span><span class=\"w\">      </span><span class=\"n\">label1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">label2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 292492675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659990781
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645#pullrequestreview-1065758867\">PR review</a>.</p>",
        "id": 292492920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659990911
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645#discussion_r940641160\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not super happy with the need for a rule priority here, and would have expected the <code>simm32_from_value</code> use to render it unnecessary. Any idea why it doesn't fire without higher priority?</p>\n</blockquote>",
        "id": 292492921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659990911
    },
    {
        "content": "<p><strong>elliottt</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645\">PR #4645</a> as ready for review.</p>",
        "id": 292493386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659991164
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645#pullrequestreview-1066080807\">PR review</a>.</p>",
        "id": 292525340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660018947
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645#pullrequestreview-1067223359\">PR review</a>.</p>",
        "id": 292635647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660070527
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645#discussion_r941689789\">PR review comment</a>:</p>\n<blockquote>\n<p>This can go away once #4661 is merged.</p>\n</blockquote>",
        "id": 292635648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660070527
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645\">PR #4645</a> from <code>trevor/x64-opt-cmp-with-constant</code> to <code>main</code>.</p>",
        "id": 292649719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660075884
    },
    {
        "content": "<p>elliottt has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645\">PR #4645</a>.</p>",
        "id": 292654481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660077826
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645\">PR #4645</a> from <code>trevor/x64-opt-cmp-with-constant</code> to <code>main</code>.</p>",
        "id": 292658717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660079624
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645\">PR #4645</a> from <code>trevor/x64-opt-cmp-with-constant</code> to <code>main</code>.</p>",
        "id": 292668378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660084450
    },
    {
        "content": "<p>elliottt merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4645\">PR #4645</a>.</p>",
        "id": 292675939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660089233
    }
]