[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1286158008\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<p>Seems reasonable to me! Instead of a crate feature, though, could this be added to <code>CodegenSettings</code>?</p>\n</blockquote>",
        "id": 305238915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666300329
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1286183228\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @kubkon</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasi\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>kubkon: wasi</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 305242352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666301764
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1286188290\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<p>Ok, pushed a version using <code>CodegenSettings</code>; the parent crates still have Cargo features, though, since this is how the <code>wasmtime</code> feature is enabled.</p>\n</blockquote>",
        "id": 305243069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666302103
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1286194589\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<p>I don't remember enough of the rationale here to remember for sure, but can the features be removed entirely? I think it's reasonable to leave <code>tracing</code> off-by-default and turn it back on for <code>wasi-common</code> to preserve its current feature set.</p>\n</blockquote>",
        "id": 305243743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666302521
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1286197712\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<p>Not sure I understand how you want it to be turned on-off by the users of <code>from_witx!</code> and <code>wasmtime_integration!</code>...</p>\n</blockquote>",
        "id": 305244050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666302720
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1286205148\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<p>In fact... I think there might even be an additional level of feature propagation needed up to <code>crates/wasi</code>, <code>crates/wasi-common</code>, etc. Those users of wiggle are the places where I want to turn tracing on or off and the only way I see to do that is through Cargo features (just like the Wasmtime integration).</p>\n</blockquote>",
        "id": 305245062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666303238
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1286265964\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<p>Oh never mind me! I think I understand now that you mean use the parse-able configuration of the macro. The latest commit attempts that. Unfortunately, when I add <code>tracing: false</code> to a <code>from_witx!</code> macro, I see build errors like:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">wasmtime/crates/wasi-common$ cargo build</span>\n<span class=\"go\">   Compiling wasi-common v3.0.0 (/.../wasmtime/crates/wasi-common)</span>\n<span class=\"go\">error[E0728]: `await` is only allowed inside `async` functions and blocks</span>\n<span class=\"go\">  --&gt; crates/wasi-common/src/snapshots/preview_1.rs:21:1</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">21 | / wiggle::from_witx!({</span>\n<span class=\"go\">22 | |     witx: [\"$WASI_ROOT/phases/snapshot/witx/wasi_snapshot_preview1.witx\"],</span>\n<span class=\"go\">23 | |     errors: { errno =&gt; Error },</span>\n<span class=\"go\">24 | |     // Note: not every function actually needs to be async, however, nearly all of them do, and</span>\n<span class=\"go\">...  |</span>\n<span class=\"go\">29 | |     wasmtime: false</span>\n<span class=\"go\">30 | | });</span>\n<span class=\"go\">   | |  ^</span>\n<span class=\"go\">   | |  |</span>\n<span class=\"go\">   | |__only allowed inside `async` functions and blocks</span>\n<span class=\"go\">   |    this is not `async`</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">   = note: this error originates in the macro `wiggle::from_witx` (in Nightly builds, run with -Z macro-backtrace for more info)</span>\n\n<span class=\"go\">e</span>\n<span class=\"go\">...</span>\n</code></pre></div>\n<p>So somehow the macro now thinks it should async when it shouldn't?</p>\n</blockquote>",
        "id": 305253942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666308038
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1286265964\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<p>Oh never mind me! I think I understand now that you mean use the parse-able configuration of the macro. The latest commit attempts that. Unfortunately, when I add <code>tracing: false</code> to a <code>from_witx!</code> macro, I see build errors like:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">wasmtime/crates/wasi-common$ cargo build</span>\n<span class=\"go\">   Compiling wasi-common v3.0.0 (/.../wasmtime/crates/wasi-common)</span>\n<span class=\"go\">error[E0728]: `await` is only allowed inside `async` functions and blocks</span>\n<span class=\"go\">  --&gt; crates/wasi-common/src/snapshots/preview_1.rs:21:1</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">21 | / wiggle::from_witx!({</span>\n<span class=\"go\">22 | |     witx: [\"$WASI_ROOT/phases/snapshot/witx/wasi_snapshot_preview1.witx\"],</span>\n<span class=\"go\">23 | |     errors: { errno =&gt; Error },</span>\n<span class=\"go\">24 | |     // Note: not every function actually needs to be async, however, nearly all of them do, and</span>\n<span class=\"go\">...  |</span>\n<span class=\"go\">29 | |     wasmtime: false</span>\n<span class=\"go\">30 | | });</span>\n<span class=\"go\">   | |  ^</span>\n<span class=\"go\">   | |  |</span>\n<span class=\"go\">   | |__only allowed inside `async` functions and blocks</span>\n<span class=\"go\">   |    this is not `async`</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">   = note: this error originates in the macro `wiggle::from_witx` (in Nightly builds, run with -Z macro-backtrace for more info)</span>\n\n<span class=\"go\">e</span>\n<span class=\"go\">...</span>\n</code></pre></div>\n<p>So somehow the macro now thinks it should async when it shouldn't or viceversa?</p>\n</blockquote>",
        "id": 305253958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666308054
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1287035139\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<p>Unfortunately wiggle hasn't really seen much bug fixing and battle-testing over its lifespan, so what you're seeing may be a bug in wiggle. CI isn't failing, though, so is this with an individual build rather than an always-happens things?</p>\n<p>As for the <code>wasmtime</code> feature, wiggle-of-old was used for both Lucet and Wasmtime so it had a feature to avoid using Wasmtime, but nowadays I don't think there's necessarily any need for it and we should probably eventually remove that. No need to do that here of course, mostly just that the prior design decisions of wiggle aren't necessarily great guides for what to do with it going forward since times have changed.</p>\n</blockquote>",
        "id": 305366641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666362045
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087#issuecomment-1293837203\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5087\">issue #5087</a>:</p>\n<blockquote>\n<p>Closing in favor of the rebased #5146.</p>\n</blockquote>",
        "id": 306498997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666891137
    }
]