[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3415\">issue #3415</a>:</p>\n<blockquote>\n<p>This issue is similar to #3414 where a fuzz-generated test case generated an odd-looking function which ended up taking a fair bit of time to compile.</p>\n<p>This module: <a href=\"https://github.com/bytecodealliance/wasmtime/files/7280587/baz.wasm.gz\">baz.wasm.gz</a> takes ~20ms to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">  </span><span class=\"mf\">0.03</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"mf\">0.022</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With the multiplicative factors in fuzzing and multiple copies of this function being in the fuzz input, that generally accounts for the timeout when fuzzing. Like #3414 this is almost surely improved by the new register allocator but in the meantime we can probably do better at compiling this particular function.</p>\n</blockquote>",
        "id": 256112811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633373778
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3415\">issue #3415</a>:</p>\n<blockquote>\n<p>This issue is similar to #3414 where a fuzz-generated test case generated an odd-looking function which ended up taking a fair bit of time to compile.</p>\n<p>This module: <a href=\"https://github.com/bytecodealliance/wasmtime/files/7280587/baz.wasm.gz\">baz.wasm.gz</a> takes ~20ms to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">  </span><span class=\"mf\">0.03</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"mf\">0.022</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With the multiplicative factors in fuzzing and multiple copies of this function being in the fuzz input, that generally accounts for the timeout when fuzzing. Like #3414 this is almost surely improved by the new register allocator but in the meantime we can probably do better at compiling this particular function.</p>\n</blockquote>",
        "id": 256112812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633373778
    },
    {
        "content": "<p>jlb6740 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3415\">issue #3415</a>:</p>\n<blockquote>\n<p>This issue is similar to #3414 where a fuzz-generated test case generated an odd-looking function which ended up taking a fair bit of time to compile.</p>\n<p>This module: <a href=\"https://github.com/bytecodealliance/wasmtime/files/7280587/baz.wasm.gz\">baz.wasm.gz</a> takes ~20ms to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">  </span><span class=\"mf\">0.03</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"mf\">0.022</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With the multiplicative factors in fuzzing and multiple copies of this function being in the fuzz input, that generally accounts for the timeout when fuzzing. Like #3414 this is almost surely improved by the new register allocator but in the meantime we can probably do better at compiling this particular function.</p>\n</blockquote>",
        "id": 261210174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636690013
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3415\">issue #3415</a>:</p>\n<blockquote>\n<p>This issue is similar to #3414 where a fuzz-generated test case generated an odd-looking function which ended up taking a fair bit of time to compile.</p>\n<p>This module: <a href=\"https://github.com/bytecodealliance/wasmtime/files/7280587/baz.wasm.gz\">baz.wasm.gz</a> takes ~20ms to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">  </span><span class=\"mf\">0.03</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"mf\">0.022</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With the multiplicative factors in fuzzing and multiple copies of this function being in the fuzz input, that generally accounts for the timeout when fuzzing. Like #3414 this is almost surely improved by the new register allocator but in the meantime we can probably do better at compiling this particular function.</p>\n</blockquote>",
        "id": 262089520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637339020
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3415#issuecomment-1109906039\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3415\">issue #3415</a>:</p>\n<blockquote>\n<p>I'm going to close this given the discussion on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4060\">https://github.com/bytecodealliance/wasmtime/issues/4060</a>, these sorts of outliers are expected and eventually we'll want to tweak fuzzers to not generate these patterns of code.</p>\n</blockquote>",
        "id": 280222892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650985218
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3415\">issue #3415</a>:</p>\n<blockquote>\n<p>This issue is similar to #3414 where a fuzz-generated test case generated an odd-looking function which ended up taking a fair bit of time to compile.</p>\n<p>This module: <a href=\"https://github.com/bytecodealliance/wasmtime/files/7280587/baz.wasm.gz\">baz.wasm.gz</a> takes ~20ms to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">  </span><span class=\"mf\">0.03</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"mf\">0.022</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With the multiplicative factors in fuzzing and multiple copies of this function being in the fuzz input, that generally accounts for the timeout when fuzzing. Like #3414 this is almost surely improved by the new register allocator but in the meantime we can probably do better at compiling this particular function.</p>\n</blockquote>",
        "id": 280222893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650985218
    }
]