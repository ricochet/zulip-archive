[
    {
        "content": "<p>yuyang-ok opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070\">issue #4070</a>:</p>\n<blockquote>\n<p>here is my code. <br>\n<a href=\"https://github.com/yuyang-ok/wasmtime/tree/risc-v/cranelift/codegen/src/isa/risc_v\">https://github.com/yuyang-ok/wasmtime/tree/risc-v/cranelift/codegen/src/isa/risc_v</a> </p>\n<p>right now I have basic compile functionality.<br>\n</p>\n</blockquote>\n<p>function body function %test0(i32) -&gt; i32 system_v {<br>\nblock0(v0: i32):<br>\n    brz v0, block1<br>\n    jump block2</p>\n<p>block1:<br>\n    v1 = iconst.i32 1<br>\n    return v1</p>\n<p>block2:<br>\n    v2 = iconst.i32 2<br>\n    return v2<br>\n}</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>VCode_Debug {<br>\n  Entry block: 0<br>\nBlock 0:<br>\n  (successor: Block 1)<br>\n  (successor: Block 2)<br>\n  (instruction range: 0 .. 2)<br>\n  Inst 0: Mov { rd: Writable { reg: v0J }, rm: r17J }<br>\n  Inst 1: CondBr { taken: Label(MachLabel(1)), not_taken: Label(MachLabel(2)), ty: types::I32, kind: CondBrKind { kind: Equal, rs1: v0J, rs2: r57J } }       <br>\nBlock 1:<br>\n  (instruction range: 2 .. 6)<br>\n  Inst 2: AluRRImm12 { alu_op: ORI, rd: Writable { reg: v5J }, rs: r57J, imm12: Imm12 { bits: 1 } }<br>\n  Inst 3: Mov { rd: Writable { reg: v3J }, rm: v5J }<br>\n  Inst 4: Extend { rd: Writable { reg: r17J }, rn: v3J, signed: true, from_bits: 32, to_bits: 64 }<br>\n  Inst 5: Ret<br>\nBlock 2:<br>\n  (instruction range: 6 .. 10)<br>\n  Inst 6: AluRRImm12 { alu_op: ORI, rd: Writable { reg: v4J }, rs: r57J, imm12: Imm12 { bits: 2 } }<br>\n  Inst 7: Mov { rd: Writable { reg: v3J }, rm: v4J }<br>\n  Inst 8: Extend { rd: Writable { reg: r17J }, rn: v3J, signed: true, from_bits: 32, to_bits: 64 }<br>\n  Inst 9: Ret<br>\n}</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>VCode_ShowWithRRU {{<br>\n  Entry block: 0<br>\nBlock 0:<br>\n  (original IR block: block0)<br>\n  (successor: Block 1)<br>\n  (successor: Block 2)<br>\n  (instruction range: 0 .. 4)<br>\n  Inst 0:   add sp,-8<br>\n  Inst 1:   sd fp,0(sp)<br>\n  Inst 2:   mov fp,sp<br>\n  Inst 3:   beq a0,zero,label1,label2<br>\nBlock 1:<br>\n  (original IR block: block1)<br>\n  (instruction range: 4 .. 9)<br>\n  Inst 4:   ori x5,zero,1<br>\n  Inst 5:   sext a0,x5<br>\n  Inst 6:   ld fp,0(sp)<br>\n  Inst 7:   add sp,8<br>\n  Inst 8:   ret<br>\nBlock 2:<br>\n  (original IR block: block2)<br>\n  (instruction range: 9 .. 14)<br>\n  Inst 9:   ori x5,zero,2<br>\n  Inst 10:   sext a0,x5<br>\n  Inst 11:   ld fp,0(sp)<br>\n  Inst 12:   add sp,8<br>\n  Inst 13:   ret<br>\n}}</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>\n</code></pre></div>",
        "id": 280147279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650932504
    },
    {
        "content": "<p>yuyang-ok <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070#issuecomment-1109470658\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070\">issue #4070</a>:</p>\n<blockquote>\n<p>Right now , there are a lot of warnnings.<br>\nI just began this project.</p>\n</blockquote>",
        "id": 280173148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650959774
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070#issuecomment-1110204548\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070\">issue #4070</a>:</p>\n<blockquote>\n<p>Hi @yuyang-ok -- thank you for sharing this with us! It's really exciting that someone is tackling this project.</p>\n<p>Right now it looks like there is a lot still left to be implemented; please let us know if you have questions about how to build something!</p>\n<p>I think that a new backend should be considered for inclusion in-tree when it supports at least Wasm MVP, passes tests in CI (using qemu), and assuming it has a community built up around it that will participate here and help to maintain it: triage bugs, address questions and review improvements, etc. I don't mean to discourage you at all; I just want to describe what the \"next steps\" might look like and what will eventually need to exist. In the meantime, best of luck and let us know how we can help.</p>\n</blockquote>",
        "id": 280265659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651003895
    },
    {
        "content": "<p>yuyang-ok <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070#issuecomment-1110347494\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070\">issue #4070</a>:</p>\n<blockquote>\n<p>yes. this is just a notice for someone want to do the risc-v backend too . avoid repeat work.</p>\n</blockquote>",
        "id": 280286300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651016062
    },
    {
        "content": "<p>yuyang-ok closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070\">issue #4070</a>:</p>\n<blockquote>\n<p>here is my code. <br>\n<a href=\"https://github.com/yuyang-ok/wasmtime/tree/risc-v/cranelift/codegen/src/isa/risc_v\">https://github.com/yuyang-ok/wasmtime/tree/risc-v/cranelift/codegen/src/isa/risc_v</a> </p>\n<p>right now I have basic compile functionality.<br>\n</p>\n</blockquote>\n<p>function body function %test0(i32) -&gt; i32 system_v {<br>\nblock0(v0: i32):<br>\n    brz v0, block1<br>\n    jump block2</p>\n<p>block1:<br>\n    v1 = iconst.i32 1<br>\n    return v1</p>\n<p>block2:<br>\n    v2 = iconst.i32 2<br>\n    return v2<br>\n}</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>VCode_Debug {<br>\n  Entry block: 0<br>\nBlock 0:<br>\n  (successor: Block 1)<br>\n  (successor: Block 2)<br>\n  (instruction range: 0 .. 2)<br>\n  Inst 0: Mov { rd: Writable { reg: v0J }, rm: r17J }<br>\n  Inst 1: CondBr { taken: Label(MachLabel(1)), not_taken: Label(MachLabel(2)), ty: types::I32, kind: CondBrKind { kind: Equal, rs1: v0J, rs2: r57J } }       <br>\nBlock 1:<br>\n  (instruction range: 2 .. 6)<br>\n  Inst 2: AluRRImm12 { alu_op: ORI, rd: Writable { reg: v5J }, rs: r57J, imm12: Imm12 { bits: 1 } }<br>\n  Inst 3: Mov { rd: Writable { reg: v3J }, rm: v5J }<br>\n  Inst 4: Extend { rd: Writable { reg: r17J }, rn: v3J, signed: true, from_bits: 32, to_bits: 64 }<br>\n  Inst 5: Ret<br>\nBlock 2:<br>\n  (instruction range: 6 .. 10)<br>\n  Inst 6: AluRRImm12 { alu_op: ORI, rd: Writable { reg: v4J }, rs: r57J, imm12: Imm12 { bits: 2 } }<br>\n  Inst 7: Mov { rd: Writable { reg: v3J }, rm: v4J }<br>\n  Inst 8: Extend { rd: Writable { reg: r17J }, rn: v3J, signed: true, from_bits: 32, to_bits: 64 }<br>\n  Inst 9: Ret<br>\n}</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>VCode_ShowWithRRU {{<br>\n  Entry block: 0<br>\nBlock 0:<br>\n  (original IR block: block0)<br>\n  (successor: Block 1)<br>\n  (successor: Block 2)<br>\n  (instruction range: 0 .. 4)<br>\n  Inst 0:   add sp,-8<br>\n  Inst 1:   sd fp,0(sp)<br>\n  Inst 2:   mov fp,sp<br>\n  Inst 3:   beq a0,zero,label1,label2<br>\nBlock 1:<br>\n  (original IR block: block1)<br>\n  (instruction range: 4 .. 9)<br>\n  Inst 4:   ori x5,zero,1<br>\n  Inst 5:   sext a0,x5<br>\n  Inst 6:   ld fp,0(sp)<br>\n  Inst 7:   add sp,8<br>\n  Inst 8:   ret<br>\nBlock 2:<br>\n  (original IR block: block2)<br>\n  (instruction range: 9 .. 14)<br>\n  Inst 9:   ori x5,zero,2<br>\n  Inst 10:   sext a0,x5<br>\n  Inst 11:   ld fp,0(sp)<br>\n  Inst 12:   add sp,8<br>\n  Inst 13:   ret<br>\n}}</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>\n</code></pre></div>",
        "id": 280286304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651016065
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070#issuecomment-1110866141\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070\">issue #4070</a>:</p>\n<blockquote>\n<p>In that case we should probably link issue #2217 here.</p>\n</blockquote>",
        "id": 280333473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651057336
    },
    {
        "content": "<p>a1phyr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070#issuecomment-1115910852\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4070\">issue #4070</a>:</p>\n<blockquote>\n<p>Woah, this is neat ! Maybe you could open a draft PR to make it easier to follow your work ?</p>\n</blockquote>",
        "id": 280988087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651570841
    }
]