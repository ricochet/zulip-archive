[
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743#issuecomment-1642739070\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743\">issue #6743</a>:</p>\n<blockquote>\n<p>@alexcrichton or @cfallin, could you take a look at this?</p>\n</blockquote>",
        "id": 376788113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689799875
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743#issuecomment-1643816681\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743\">issue #6743</a>:</p>\n<blockquote>\n<p>Sure yeah I can help review. Looking over this I can't help but personally feel that a bit of a refactor is in order (preexisting issue, not a new one) as I find it a bit odd to follow. This feels similar to the addressing that historically happened in x64 but <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986\">I changed awhile back</a> where it was recursive and walked thorugh an entire <code>iadd</code> chain to compute the final amode. To me the problem here is that all add operands are collected into a vector but if the vector is larger than 1 or 2 elements everything falls back to the normal operands and amodes instead.</p>\n<p>Instead I liked the idea in the x64 backend where you start with an <code>AMode</code> and then add items to it which might extend the amode. This is the <code>to_amode_add</code> function in the x64 lowering where it's iteratively modified as possible through subsequent \"peeling\" of add operands. This avoided the x64-specific problem of recursing entirely and blowing the stack on large <code>iadd</code> chains, but I think would be appropriate for aarch64 as well since it avoids collecting large 32/64-bit operand lists and collects only precisely what's needed (in theory).</p>\n<p>Now I realize though that the refactoring may be a bit bigger than desired though on this PR. I bring this up though because this PR has a few bugs I'll list below. I think the bugs stem from the fact that currently the only pattern matched is \"a bunch of adds\" and the pattern matching add here should only match a single shift in a very specific location as opposed to any location.</p>\n<p><strong>Multiple shifted operands</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">  </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">  </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">  </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">  </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">shifted</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">303</span>:<span class=\"mi\">21</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p><strong>A single shifted operand</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">  </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"mi\">32</span><span class=\"err\">`</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"mi\">64</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">inst</span><span class=\"o\">/</span><span class=\"n\">emit</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1030</span>:<span class=\"mi\">25</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p><strong>Shift not actually taken into account</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">  </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl_imm</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">  </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">  </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span>\n<span class=\"p\">.</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">72</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">97</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">184</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">214</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">61</span><span class=\"w\"> </span><span class=\"n\">b8</span><span class=\"w\">             </span><span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">uxtw</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">c0</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">d6</span><span class=\"w\">             </span><span class=\"n\">ret</span>\n</code></pre></div>\n<p>(note that processing of <code>x2</code> is missing here)</p>\n<p>There's also a number of other cases here where <code>shifted</code> is only taken into account in one case rather than all of them so the fall-through is ignoring <code>shifted</code> in more cases than just this.</p>\n<hr>\n<p>Those are some examples which are currently incorrect with this PR, and at least personally I don't see an \"easy fix\" with a small piece of handling here-or-there to fix these issues. That's why I think that it may be best to refactor this amode computation to be a bit simpler than before (probably in ISLE rather than Rust) and then I think it might be less brittle to add a special case. For example a <code>to_amode_add</code> function for AArch64 could pattern match an existing amode of <code>UnsignedOffset</code> with offset 0 with a shifting operation to produce <code>RegScaled</code>. Once <code>RegScaled</code> is produced, however, no further amode massaging would be done.</p>\n<p>I could very well be wrong though and there may be an easy fix to these issues.</p>\n</blockquote>",
        "id": 376955950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689855247
    },
    {
        "content": "<p>maekawatoshiki <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743#issuecomment-1643888553\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743\">issue #6743</a>:</p>\n<blockquote>\n<p>I appreciate your detailed comment.</p>\n<p>I totally agree that we need to refactor this amode computation, since I thought so when I first read the code... Also the bugs you mentioned are really helpful (and I should have tested on such cases).</p>\n<p>I plan on adding ISLE rules that replaces the existing amode computation.<br>\n</p>\n</blockquote>",
        "id": 376970658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689858178
    },
    {
        "content": "<p>maekawatoshiki <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743#issuecomment-1656000369\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743\">issue #6743</a>:</p>\n<blockquote>\n<p>I tried adding ISLE rules that replace existing <code>lower_address</code>, while referring to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5986\">https://github.com/bytecodealliance/wasmtime/pull/5986</a>.<br>\nBut I figured out that it's hard to be done for me and, for someone, we should open an issue for it :)</p>\n</blockquote>",
        "id": 379574011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690563133
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743#issuecomment-1666264782\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6743\">issue #6743</a>:</p>\n<blockquote>\n<p>I've made a first attempt in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805\">https://github.com/bytecodealliance/wasmtime/pull/6805</a> to move <code>lower_address</code> into ISLE</p>\n</blockquote>",
        "id": 381992023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691190856
    }
]