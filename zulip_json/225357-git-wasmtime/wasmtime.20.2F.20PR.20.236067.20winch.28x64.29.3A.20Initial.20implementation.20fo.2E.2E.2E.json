[
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds the main building blocks for calling locally defined<br>\nfunctions. Support for function imports will be added iteratively after this<br>\nchange lands and once trampolines are supported.</p>\n<p>To support function calls, this change introduces the following functionality to<br>\nthe MacroAssembler:</p>\n<ul>\n<li>\n<p><code>pop</code> to pop the machine stack into a given register, which in the case of<br>\nthis change, translates to the x64 pop instruction.</p>\n</li>\n<li>\n<p><code>call</code> to a emit a call to locally defined functions.</p>\n</li>\n<li>\n<p><code>address_from_sp</code> to construct memory addresses with the SP as a base.</p>\n</li>\n<li>\n<p><code>free_stack</code> to emit the necessary instrunctions to claim stack space.</p>\n</li>\n</ul>\n<p>The heavy lifting of setting up and emitting the function call is done through<br>\nthe implementation of <code>FnCall</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 343139876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679323415
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a>.</p>",
        "id": 343139914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679323428
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds the main building blocks for calling locally defined<br>\nfunctions. Support for function imports will be added iteratively after this<br>\nchange lands and once trampolines are supported. Which is also when <br>\nwe plan to introduce support for the <code>Wasmtime*</code> calling conventions.</p>\n<p>To support function calls, this change introduces the following functionality to<br>\nthe MacroAssembler:</p>\n<ul>\n<li>\n<p><code>pop</code> to pop the machine stack into a given register, which in the case of<br>\nthis change, translates to the x64 pop instruction.</p>\n</li>\n<li>\n<p><code>call</code> to a emit a call to locally defined functions.</p>\n</li>\n<li>\n<p><code>address_from_sp</code> to construct memory addresses with the SP as a base.</p>\n</li>\n<li>\n<p><code>free_stack</code> to emit the necessary instrunctions to claim stack space.</p>\n</li>\n</ul>\n<p>The heavy lifting of setting up and emitting the function call is done through<br>\nthe implementation of <code>FnCall</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 343140509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679323550
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>.</p>",
        "id": 343148259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679325155
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>.</p>",
        "id": 343148828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679325272
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1348785990\">PR review</a>.</p>",
        "id": 343149570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679325456
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1142280363\">PR review comment</a>:</p>\n<blockquote>\n<p>The work by <code>pop_to_reg</code> and <code>pop_to_named_reg</code> was very similar, so I realized I could remove some repetition here through this refactor.</p>\n</blockquote>",
        "id": 343149596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679325461
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1142280363\">PR review comment</a>.</p>",
        "id": 343149632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679325469
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1351137866\">PR review</a>.</p>",
        "id": 343490358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679423348
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1351137866\">PR review</a>.</p>",
        "id": 343490361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679423348
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1143822612\">PR review comment</a>:</p>\n<blockquote>\n<p>Does this need to be a special case? It seems that if instead the <code>spill_regs_in</code> method accepted an empty range, this case would work with the code below...</p>\n</blockquote>",
        "id": 343490363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679423348
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1143826499\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a bit confusing, and I think a comment could help. First I had forgotten that \"spill\" in this context means reifying the state of the logical Wasm value stack onto the actual machine stack; then given that the top <code>callee_params</code> values are the args to the call, we want to put those last so they are actually in the right place. Perhaps something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// \"Spill\" state to the machine stack. At this point, some of the logical Wasm stack may still be in</span>\n<span class=\"c1\">// registers. We need to save registers because they may be clobbered by the callee. At the same</span>\n<span class=\"c1\">// time, we also need to put parameters to the function on the stack. The logic below takes the</span>\n<span class=\"c1\">// current Wasm stack and partitions it into two parts: the values beyond the function args, which</span>\n<span class=\"c1\">// we just need to save; and the function args, which we save last so they are lowest on the stack</span>\n<span class=\"c1\">// (where our calling convention expects them).</span>\n</code></pre></div>\n<p>or something like that?</p>\n</blockquote>",
        "id": 343490364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679423348
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1143838598\">PR review comment</a>:</p>\n<blockquote>\n<p>It might be good to have a test initially that exercises the spilling behavior (here we can't because <code>$add</code> is called in tail position). Perhaps call it multiple times, with some values on the stack that live \"under\" the call?</p>\n</blockquote>",
        "id": 343490365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679423348
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1143828701\">PR review comment</a>:</p>\n<blockquote>\n<p>A top-level module comment describing the calling convention would be really helpful here! In particular, which registers are clobbered or saved, and where arguments are passed.</p>\n</blockquote>",
        "id": 343490366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679423349
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>.</p>",
        "id": 344982602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679957886
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1359983334\">PR review</a>.</p>",
        "id": 344983524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958258
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149868028\">PR review comment</a>:</p>\n<blockquote>\n<p>I was not able to find a better way to do this. In this case we still want to spill everything, to save any live registers, but we are no interested in the count returned by <code>spill_regs_and_count_memory_in</code>, since they are not part of the function arguments so we can't claim that memory after the function call, so that's why I'm handling <code>0</code> in this way. </p>\n</blockquote>",
        "id": 344983525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958259
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1359983484\">PR review</a>.</p>",
        "id": 344983554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958270
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149868134\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 344983555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958270
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1359984849\">PR review</a>.</p>",
        "id": 344983833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958386
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1359984849\">PR review</a>.</p>",
        "id": 344983834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958386
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149869112\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed! Thanks.</p>\n</blockquote>",
        "id": 344983835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958387
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1359985340\">PR review</a>.</p>",
        "id": 344983890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958419
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149869424\">PR review comment</a>:</p>\n<blockquote>\n<p>Agreed! Added the documentation in the abi module, and added a reference to it from here. </p>\n</blockquote>",
        "id": 344983891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958419
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149868028\">PR review comment</a>.</p>",
        "id": 344983964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679958467
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1359995517\">PR review</a>.</p>",
        "id": 344985857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679959496
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1359995517\">PR review</a>.</p>",
        "id": 344985858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679959496
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149877174\">PR review comment</a>:</p>\n<blockquote>\n<p>\"Amount of registers\" -&gt; \"number of registers\"? (register is a count-noun so the \"amount of\" reads ambiguously to me: in bytes, or whole registers, or ...)</p>\n</blockquote>",
        "id": 344985859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679959496
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149876243\">PR review comment</a>:</p>\n<blockquote>\n<p>I definitely appreciate the docs here, but a few things are slightly unclear to me at least:</p>\n<ul>\n<li>The terminology of \"memory entries\" is confusing -- does this just mean \"values on the stack\"?</li>\n<li>The \"That is, any memory entries ... \" sentence is really hard to parse. I <em>think</em> what this is saying is: values already on the stack that are args?</li>\n<li>\"Claim\" means \"reclaim\" here?</li>\n</ul>\n<p>Is it the case that <code>memory_consumed + spill_stack_space == total_arg_stack_space</code>? If so, could we use that alone to pop args off the stack? Fundamentally it seems like we shouldn't have to know where the args originally came from when we're cleaning up.</p>\n</blockquote>",
        "id": 344985860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679959496
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149878368\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm a little confused here: shouldn't we be popping just <code>total_arg_stack_space</code>, without also popping <code>memory_consumed</code> and <code>spill_stack_space</code>? It seems like this is double-counting, unless I'm misunderstanding what the above amounts mean.</p>\n<p>(Labeling portions of the stack in the figure might help clarify, too, or else noting the state of hte stack at points in the sequence above)</p>\n</blockquote>",
        "id": 344985861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679959496
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1360030301\">PR review</a>.</p>",
        "id": 344993164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679962503
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149901778\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is it the case that memory_consumed + spill_stack_space == total_arg_stack_space?</p>\n</blockquote>\n<p>I see where you're coming from and I agree that it's a bit confusing, I think I can make it so that it's more clear and so that we have to deal with less terms.</p>\n<p>But to give a bit more context:</p>\n<ul>\n<li>\n<p>total_arg_stack_space is the total space that needs to be explicitly allocated at the callsite, and covers: the stack space needed for arguments plus any alignment needed for the caller's frame. </p>\n</li>\n<li>\n<p>memory_consumed, represents the memory used by any <code>Memory</code> entries existing in the value stack at the moment of assigning those entries to the function arguments (in the case of a register argument, that memory will be loaded to the register used as argument, and in the case of a stack argument, that memory will be loaded to the scratch register and then stored to the particular argument slot). We could emit a <code>pop</code> instruction when doing this assignment and will potentially simplify things here in terms of what we are tracking, but I think it's more efficient to track the amount of memory used and reclaim it in the end.</p>\n</li>\n<li>\n<p>spill_stack_space is the space created to save any live registers.</p>\n</li>\n</ul>\n<p>Does that clarify things to you? </p>\n<p>As I write this, I believe we can simplify this by tracking all the memory used in a single field. Initially I thought that separating where things come from would make the code more understandable and easier to reason about, but maybe the opposite is better. </p>\n</blockquote>",
        "id": 344993167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679962504
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>.</p>",
        "id": 345001191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679964686
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>.</p>",
        "id": 345001347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679964753
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>.</p>",
        "id": 345003961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679966127
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>.</p>",
        "id": 345004017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679966160
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1360067522\">PR review</a>.</p>",
        "id": 345004206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679966252
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149928841\">PR review comment</a>:</p>\n<blockquote>\n<p>I've simplified how we track these values in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067/commits/2e5372c8ffb430e75442ef33cc5cd7a3b408800e\">https://github.com/bytecodealliance/wasmtime/pull/6067/commits/2e5372c8ffb430e75442ef33cc5cd7a3b408800e</a> and also added more extensive documentation. Hopefully this clarifies the code. </p>\n</blockquote>",
        "id": 345004208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679966253
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1360070078\">PR review</a>.</p>",
        "id": 345004673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679966463
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149930276\">PR review comment</a>:</p>\n<blockquote>\n<p>Agreed, I've added a figure of how the stack looks like at each point in time in <a href=\"https://github.com/bytecodealliance/wasmtime/commit/2e5372c8ffb430e75442ef33cc5cd7a3b408800e\">https://github.com/bytecodealliance/wasmtime/commit/2e5372c8ffb430e75442ef33cc5cd7a3b408800e</a>, hopefully this helps clarify!</p>\n</blockquote>",
        "id": 345004674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679966463
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149930276\">PR review comment</a>.</p>",
        "id": 345004704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679966486
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>.</p>",
        "id": 345086314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679999148
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#discussion_r1149901778\">PR review comment</a>.</p>",
        "id": 345125766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680008621
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a> from <code>winch-x64-initial-calls</code> to <code>main</code>.</p>",
        "id": 345131448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680009771
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067#pullrequestreview-1361694673\">PR review</a>.</p>",
        "id": 345210369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680028214
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6067\">PR #6067</a>.</p>",
        "id": 345217354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680030377
    }
]