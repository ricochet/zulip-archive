[
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a> from <code>saulecabrera:winch-control-flow-fixes</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change fixes two issues with the control flow implementation found when working on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6610\">https://github.com/bytecodealliance/wasmtime/pull/6610</a></p>\n<p>The two fixes included in this change are:</p>\n<ol>\n<li>\n<p>Correctly handle the stack pointer at jump sites: when emitting an unconditional jump, the stack pointer might be left unbalanced due to register spilling, this could cause invalid memory accesses.</p>\n</li>\n<li>\n<p>Explicitly track the exit label of the if block: previously the continuation label of the if block was implicitly treated as the exit label, which would cause undefined behaviour in programs that use unconditional branches in the <code>if</code> and <code>else</code> branches. This slight disadvantage of the approach in this change is that it involves special casing the emission of the end of an if block (without else) to account for the continuation label, since the continuation label is only naturally bound when there's an else branch.</p>\n</li>\n</ol>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 372415791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688504956
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372415792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688504956
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372415793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688504957
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372415794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688504957
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372415795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688504957
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372415802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688504964
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372415803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688504964
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372416065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688505120
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372416976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688505719
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685#pullrequestreview-1514900270\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 372648794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688573992
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685#pullrequestreview-1514900270\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 372648795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688573992
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685#discussion_r1253346783\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add an assert here that <code>current_sp_offset &gt;= original_sp_offset</code>? The invariant we want in the end is that the offsets are equal, and we handle the greater-than case above; I think we should never see the less-than case because we're going \"up\" the control-stack, is that right?</p>\n</blockquote>",
        "id": 372648796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688573992
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372677966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688580640
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685#discussion_r1253463968\">PR review comment</a>:</p>\n<blockquote>\n<p>Good catch. Done, thanks!</p>\n</blockquote>",
        "id": 372678491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688580757
    },
    {
        "content": "<p>saulecabrera has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372678641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688580784
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685#discussion_r1253590856\">PR review comment</a>:</p>\n<blockquote>\n<p>CI disagrees, and after digging into it a bit I think that the invariant in question not always holds, legitimately:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"cont-inner\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.add</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">loop</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">loop</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">br</span> <span class=\"mi\">1</span><span class=\"p\">)))))</span> <span class=\"c1\">;; &lt;====</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.add</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">loop</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.ctz</span> <span class=\"p\">(</span><span class=\"nb\">br</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.add</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">loop</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.ctz</span> <span class=\"p\">(</span><span class=\"k\">loop</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">br</span> <span class=\"mi\">1</span><span class=\"p\">))))))</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>When entering the second loop (in the second <code>local.set</code>), there are no values to spill so the current stack pointer offset is 24, same as the sp offset at the outer loop which spilled one local, then when reaching <code>br 1</code>, since the value stack only contains spilled values we need to pop that value to account for the return of the loop, which will leave the current sp at 16, effectively less than the original.</p>\n<p>This makes sense to me, but do let me know if you see anything different. </p>\n</blockquote>",
        "id": 372702463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688587389
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372702591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688587442
    },
    {
        "content": "<p>saulecabrera has disabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372703243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688587672
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685#discussion_r1253599829\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, hmm, OK. Can we leave a comment as to how this works then? It's not obvious to me at least how this local bit of code works -- why is it OK that we can branch to a place if we have a mismatched stack -- unless the needed values are pushed somewhere else?</p>\n</blockquote>",
        "id": 372704564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688588042
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372712290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688590603
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372713420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688590992
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685#discussion_r1253666976\">PR review comment</a>:</p>\n<blockquote>\n<p>Added a comment and put back an assert that goes along with the comment: in general the stack pointer can only be <code>word_bytes</code> less than stack pointer offset of destination frame, which accounts for the handling of the return values at the jump site. I hope this clarifies things!</p>\n</blockquote>",
        "id": 372716654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688592304
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685#discussion_r1253671303\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds good!</p>\n</blockquote>",
        "id": 372717072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688592484
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6685\">PR #6685</a>.</p>",
        "id": 372723486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688595302
    }
]