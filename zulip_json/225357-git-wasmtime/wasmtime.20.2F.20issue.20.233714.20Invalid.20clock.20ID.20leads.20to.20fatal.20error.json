[
    {
        "content": "<p>kripken labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714\">issue #3714</a>:</p>\n<blockquote>\n<p>This happens when sending an invalid clock id to <code>wasi_snapshot_preview1::clock_time_get</code> or <code>clock_res_get</code>. In emscripten we have a test that sends <code>42</code>, if the specific value matters, which is how we noticed this. (The test is checking for error handling.)</p>\n<p>History:</p>\n<ul>\n<li>In wasmtime 0.8.0 an error is returned.</li>\n<li>In 0.18.0 a warning is printed out. (This extra logging makes the emscripten test fail, which is how we noticed this.)</li>\n<li>In 0.33.0 the VM hits a fatal error:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">In</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">clock_time_get</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Clockid</span>: <span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">value</span><span class=\"w\"> </span><span class=\"n\">Clockid</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x917</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__clock_gettime</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:  <span class=\"mh\">0x6cb</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">2</span>:  <span class=\"mh\">0x8e5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I would assume that an invalid clock id should lead to an error and not extra logging or a fatal VM error, but reading the docs I can't actually find an answer to that... Apologies if this is not a bug!</p>\n<p>Emscripten issue where this was noticed: <a href=\"https://github.com/emscripten-core/emscripten/pull/16076\">https://github.com/emscripten-core/emscripten/pull/16076</a></p>\n</blockquote>",
        "id": 268921838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642810511
    },
    {
        "content": "<p>kripken opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714\">issue #3714</a>:</p>\n<blockquote>\n<p>This happens when sending an invalid clock id to <code>wasi_snapshot_preview1::clock_time_get</code> or <code>clock_res_get</code>. In emscripten we have a test that sends <code>42</code>, if the specific value matters, which is how we noticed this. (The test is checking for error handling.)</p>\n<p>History:</p>\n<ul>\n<li>In wasmtime 0.8.0 an error is returned.</li>\n<li>In 0.18.0 a warning is printed out. (This extra logging makes the emscripten test fail, which is how we noticed this.)</li>\n<li>In 0.33.0 the VM hits a fatal error:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">In</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">clock_time_get</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Clockid</span>: <span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">value</span><span class=\"w\"> </span><span class=\"n\">Clockid</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x917</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__clock_gettime</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:  <span class=\"mh\">0x6cb</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">2</span>:  <span class=\"mh\">0x8e5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I would assume that an invalid clock id should lead to an error and not extra logging or a fatal VM error, but reading the docs I can't actually find an answer to that... Apologies if this is not a bug!</p>\n<p>Emscripten issue where this was noticed: <a href=\"https://github.com/emscripten-core/emscripten/pull/16076\">https://github.com/emscripten-core/emscripten/pull/16076</a></p>\n</blockquote>",
        "id": 268921839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642810511
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714#issuecomment-1019001209\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714\">issue #3714</a>:</p>\n<blockquote>\n<p>Clockid is defined in the witx as an enum (as opposed to as a handle, like an fd is), its an ABI error to pass an out-of-bounds value for it, and ABI errors trap execution, rather than return an error value.</p>\n<p>This behavior has been in wasmtime for a while, since <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2487\">https://github.com/bytecodealliance/wasmtime/pull/2487</a>.</p>\n</blockquote>",
        "id": 268925598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642813685
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714#issuecomment-1020124912\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714\">issue #3714</a>:</p>\n<blockquote>\n<p>I can also add that this is something we'll revisit with the switch to wit tooling. The Unix/Linux <code>clock_gettime</code> operates on several different kinds of clocks, so I'm imagining wasi libc will take over the initial clock ID dispatch, and it can report an <code>EINVAL</code>, allowing users to dynamically detect supported clocks.</p>\n</blockquote>",
        "id": 269108313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643032483
    },
    {
        "content": "<p>kripken <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714#issuecomment-1020284090\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714\">issue #3714</a>:</p>\n<blockquote>\n<p>I see, thanks for the info @pchickey and @sunfishcode !</p>\n<p>Is this documented somewhere? Just curious where I should have looked. Also, this is not consistent between wasm VMs - I see that latest wasmer returns an error code.</p>\n<p>I wonder if this is a settled issue? If not, I'd actually support the older behavior. That is, if the VM is going to check the code anyhow at runtime, in order to abort if it is incorrect, then it could as easily return an error code in that case, and doing so would allow libc code to be smaller (if it has chosen the constants properly to allow that). It's just a few bytes, of course, but the same principle would apply elsewhere, and maybe all those extra unnecessary bytes add up. Seems nicer to do such things once in the VM when possible rather than constantly in userspace?<br>\n</p>\n</blockquote>",
        "id": 269130708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643041550
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714#issuecomment-1020360124\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714\">issue #3714</a>:</p>\n<blockquote>\n<p>It's not specified or documented yet. WASI has been a complex landscape while interface-types has gone through several rounds of evolution underneath it.</p>\n<p>If the only goal is minimal code size in C programs in the short term, we could go even further, and bake <code>clock_gettime</code> directly into WASI, along with <code>errno</code> for reporting errors. However, while we do care about code size, we care about it along with other things too.</p>\n<p>Outside of C and its descendents, there often isn't a single unified clock index space. For example, in Rust's standard library, there's a different function for querying the real-time clock versus querying the monotonic clock. These two clocks have mostly disjoint use cases. It's also the case that the real-time clock may want to return a wider value (often secs + nsecs) to be able to talk about dates at points in the far (but not impossibly far) future, while a single <code>u64</code> nsecs is likely to be sufficient for the monotonic clock. Having separate imports for the two <em>reduces</em> code size in programs that just want to use one or the other. For example, users of the monotonic clock don't need all that extra logic for subtracting or adding (secs+nsecs) pairs. And, in terms of static analyzability, having separate imports for real-time and monotonic clocks means we can statically know which clocks a program might care about.</p>\n<p>And even in C programs, LLVM and/or binaryen could pattern-match certain library call idioms, so in the fullness of time, we should be able to pattern-match <code>clock_gettime(CLOCK_MONOTONIC, ...)</code>, and translate it into a simple call to the dedicated monotonic-clock import. If we do that, it would get us lower per-call codesize than we could get with a dynamic clock index. Since it's per-call, this will save us much more than just saving a few bytes in one place in libc. So in the long run, this will be even better for code size, and have other advantages.</p>\n</blockquote>",
        "id": 269140695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643045615
    },
    {
        "content": "<p>kripken <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714#issuecomment-1020402215\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714\">issue #3714</a>:</p>\n<blockquote>\n<p>I see, thanks @sunfishcode Very good points about code size in the long run.</p>\n<p>For now we'll add the code to handle this for wasmtime in emscripten, and I guess the larger issues here will wait for the stabilization of WASI in the long term, as you mentioned. And I'll close this issue.</p>\n</blockquote>",
        "id": 269147117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643048377
    },
    {
        "content": "<p>kripken closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3714\">issue #3714</a>:</p>\n<blockquote>\n<p>This happens when sending an invalid clock id to <code>wasi_snapshot_preview1::clock_time_get</code> or <code>clock_res_get</code>. In emscripten we have a test that sends <code>42</code>, if the specific value matters, which is how we noticed this. (The test is checking for error handling.)</p>\n<p>History:</p>\n<ul>\n<li>In wasmtime 0.8.0 an error is returned.</li>\n<li>In 0.18.0 a warning is printed out. (This extra logging makes the emscripten test fail, which is how we noticed this.)</li>\n<li>In 0.33.0 the VM hits a fatal error:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">In</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">clock_time_get</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Clockid</span>: <span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">value</span><span class=\"w\"> </span><span class=\"n\">Clockid</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x917</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__clock_gettime</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:  <span class=\"mh\">0x6cb</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">2</span>:  <span class=\"mh\">0x8e5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I would assume that an invalid clock id should lead to an error and not extra logging or a fatal VM error, but reading the docs I can't actually find an answer to that... Apologies if this is not a bug!</p>\n<p>Emscripten issue where this was noticed: <a href=\"https://github.com/emscripten-core/emscripten/pull/16076\">https://github.com/emscripten-core/emscripten/pull/16076</a></p>\n</blockquote>",
        "id": 269147119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643048378
    }
]