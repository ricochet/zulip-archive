[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1676497681\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 384602489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691970276
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1677839354\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<p>I'll take a closer look after you do whatever changes you have planned to fix CI; just out of curiosity, though, what motivated looking more at <code>select</code>? I vaguely recall it being problematic in the past...</p>\n</blockquote>",
        "id": 384866799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692036740
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1678023837\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'll take a closer look after you do whatever changes you have planned to fix CI; just out of curiosity, though, what motivated looking more at select? I vaguely recall it being problematic in the past...</p>\n</blockquote>\n<p>Huh, I don't remember there being issues with <code>select</code>, I think <code>select_spectre_guard</code> is the instruction that shall not be touched, right? Or are you referring to something else?</p>\n<p>I'm looking at <code>select</code> because I was looking at some benchmarks for a project that uses cranelift and noticed some CLIF code that was missing some optimization opportunities. These optimizations aren't really what makes the difference, but It's just something that jumped out at me from looking at that code.</p>\n</blockquote>",
        "id": 384903402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692045420
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1680371586\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<p>I'm still looking into the CI failure, but I've had to back out one of the optimizations, <code>(bmask (fcmp x)) -&gt; (fcmp x)</code> is wrong since for scalars <code>icmp/fcmp</code> actually return 1 or 0. Only for vectors do they return -1, which is slightly confusing but ¯\\\\\\_(ツ)\\_\\/¯</p>\n<p>I think there is a somewhat similar optimization that we can pursue with <code>(select c 1 0)</code> however we no longer have the convenient intermediary <code>bint</code> to replace <code>bmask</code>. Doing something like <code>(select c 1 0) -&gt; (and (bmask c) 1)</code> would work, but I'm not entirely sure how great that is.</p>\n<p>It might be worth thinking about this and submitting a future PR more targeted towards that since this one is getting kinda big.</p>\n</blockquote>",
        "id": 385434727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692182534
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1682716847\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<p>This is looking great! I hadn't thought of bswap/bitrev/popcount also being in the \"truthiness-preserving\" category.</p>\n<p>It might help to introduce a \"truthy\" term that extracts the argument from a \"truthiness-preserving\" operation, then use that in both the <code>bmask</code> and <code>select</code> cases.</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">multi</span><span class=\"w\"> </span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sextend</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">uextend</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bmask</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ineg</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bswap</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bitrev</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">popcnt</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bmask</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bmask</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">select</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nv\">lhs</span><span class=\"w\"> </span><span class=\"nv\">rhs</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">truthy</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">select</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nv\">lhs</span><span class=\"w\"> </span><span class=\"nv\">rhs</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>The <code>(select c 1 0)</code> case could be generalized with another <code>truthy</code> rule, matching whenever the true branch is a non-zero constant and the false branch is a zero constant. That might be more useful than rewriting <code>(select c -1 0)</code> to bmask, even?</p>\n<p>Definitely feel free to stop at any point though; you're right that there's quite a bit going on here already.</p>\n</blockquote>",
        "id": 385724454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692294609
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1682752677\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<p>Oh, it occurs to me that rotate left/right also preserves truthiness. Now I'm wondering how to systematically find all instructions where the result is zero if and only if the input is zero...</p>\n</blockquote>",
        "id": 385728337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692296256
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1683752208\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<blockquote>\n<p>It might help to introduce a \"truthy\" term that extracts the argument from a \"truthiness-preserving\" operation, then use that in both the bmask and select cases.</p>\n</blockquote>\n<p>Yeah, that's a nice simplification of these rules!</p>\n<blockquote>\n<p>Now I'm wondering how to systematically find all instructions where the result is zero if and only if the input is zero...</p>\n</blockquote>\n<p>I always think about Z3 with these things, but I have no idea how to actually do that. And I think we would need a way to rewrite CLIF ops into Z3 expressions, right?<br>\n</p>\n</blockquote>",
        "id": 385887782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692356771
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1684226551\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<p>If I'm not mistaken, the test case that's failing in CI is </p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"s\">\"f32.no_fold_lt_select\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">param</span><span class=\"w\"> </span><span class=\"nv\">$x</span><span class=\"w\"> </span><span class=\"nv\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">param</span><span class=\"w\"> </span><span class=\"nv\">$y</span><span class=\"w\"> </span><span class=\"nv\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nv\">f32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">select</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">local.get</span><span class=\"w\"> </span><span class=\"nv\">$x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">local.get</span><span class=\"w\"> </span><span class=\"nv\">$y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">f32.lt</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">local.get</span><span class=\"w\"> </span><span class=\"nv\">$x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">local.get</span><span class=\"w\"> </span><span class=\"nv\">$y</span><span class=\"p\">)))</span>\n<span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">assert_return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">invoke</span><span class=\"w\"> </span><span class=\"s\">\"f32.no_fold_lt_select\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">f32.const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">f32.const</span><span class=\"w\"> </span><span class=\"nv\">nan</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">f32.const</span><span class=\"w\"> </span><span class=\"nv\">nan</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>According to <code>wasmtime compile --emit-clif</code> that compiles to this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"nc\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">lt</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"o\">@</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"o\">@</span><span class=\"mi\">003</span><span class=\"n\">e</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"o\">@</span><span class=\"mi\">003</span><span class=\"n\">f</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v7</span><span class=\"p\">)</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v4</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">003</span><span class=\"n\">f</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>With this PR, after the <code>uextend</code> is removed, the select/fcmp pair matches the egraph rules to rewrite to <code>fmin_pseudo.f32</code>, and I guess that produces the wrong result on this input?</p>\n</blockquote>",
        "id": 385960314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692380053
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1684317962\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<blockquote>\n<p>With this PR, after the uextend is removed, the select/fcmp pair matches the egraph rules to rewrite to fmin_pseudo.f32, and I guess that produces the wrong result on this input?</p>\n</blockquote>\n<p>Yeah, that's pretty much it! I was waiting for an OK to make sure this wouldn't affect wasmtime before publishing the PR removing the <code>f{min,max}_pseudo</code> rules, which are wrong. Sorry for the delay.</p>\n</blockquote>",
        "id": 385971015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692384928
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1684317962\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<blockquote>\n<p>With this PR, after the uextend is removed, the select/fcmp pair matches the egraph rules to rewrite to fmin_pseudo.f32, and I guess that produces the wrong result on this input?</p>\n</blockquote>\n<p>Yeah, that's pretty much it! I was waiting for an OK to make sure this wouldn't affect wasmtime before publishing the PR removing the <code>f{min,max}_pseudo</code> rules, which are wrong. Sorry for the delay.</p>\n<p>Once this is rebased on top of #6859 it should start passing the tests.</p>\n</blockquote>",
        "id": 385971067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692384952
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1686873626\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<p>With <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6859\">https://github.com/bytecodealliance/wasmtime/pull/6859</a> now merged this should start passing CI.</p>\n<p>I've also added a entrypoint to the <code>thruthy</code> rule for <code>(icmp ne v 0)</code>, and also added that as a truthiness preserving expression.</p>\n</blockquote>",
        "id": 386456494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692644685
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1687012063\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<p>Looks like the bench-api crate is failing to build, but I've ran sightglass manually, and sadly we don't get any improvements.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Results&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">sightglass</span><span class=\"o\">-</span><span class=\"n\">cli</span><span class=\"w\"> </span><span class=\"n\">benchmark</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">processes</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">iterations</span><span class=\"o\">-</span><span class=\"n\">per</span><span class=\"o\">-</span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"err\">`</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">9966144</span><span class=\"w\"> </span><span class=\"mf\">10602864.64</span><span class=\"w\"> </span><span class=\"mi\">13498656</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">9952064</span><span class=\"w\"> </span><span class=\"mf\">11139933.44</span><span class=\"w\"> </span><span class=\"mi\">26247104</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">715466496</span><span class=\"w\"> </span><span class=\"mf\">839635031.68</span><span class=\"w\"> </span><span class=\"mi\">1025560928</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">749480032</span><span class=\"w\"> </span><span class=\"mf\">821139647.16</span><span class=\"w\"> </span><span class=\"mi\">1066050816</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">instantiation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">199200</span><span class=\"w\"> </span><span class=\"mf\">244094.72</span><span class=\"w\"> </span><span class=\"mi\">403680</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">191488</span><span class=\"w\"> </span><span class=\"mf\">249337.60</span><span class=\"w\"> </span><span class=\"mi\">390976</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">instantiation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">539328</span><span class=\"w\"> </span><span class=\"mf\">646485.76</span><span class=\"w\"> </span><span class=\"mi\">1049376</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">556704</span><span class=\"w\"> </span><span class=\"mf\">634736.68</span><span class=\"w\"> </span><span class=\"mi\">798432</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1427180032</span><span class=\"w\"> </span><span class=\"mf\">1502991738.48</span><span class=\"w\"> </span><span class=\"mi\">1606635646</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1447102577</span><span class=\"w\"> </span><span class=\"mf\">1527005523.92</span><span class=\"w\"> </span><span class=\"mi\">1715667119</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">instantiation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">271264</span><span class=\"w\"> </span><span class=\"mf\">329072.64</span><span class=\"w\"> </span><span class=\"mi\">416160</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">267264</span><span class=\"w\"> </span><span class=\"mf\">334138.88</span><span class=\"w\"> </span><span class=\"mi\">644704</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">18601799200</span><span class=\"w\"> </span><span class=\"mf\">19312205390.44</span><span class=\"w\"> </span><span class=\"mi\">19938090464</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">18438769888</span><span class=\"w\"> </span><span class=\"mf\">19192694238.76</span><span class=\"w\"> </span><span class=\"mi\">20311795325</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">271569902</span><span class=\"w\"> </span><span class=\"mf\">329694138.04</span><span class=\"w\"> </span><span class=\"mi\">502450045</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">257652896</span><span class=\"w\"> </span><span class=\"mf\">327933358.56</span><span class=\"w\"> </span><span class=\"mi\">541305504</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">123519936</span><span class=\"w\"> </span><span class=\"mf\">133585408.76</span><span class=\"w\"> </span><span class=\"mi\">146265844</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">121208800</span><span class=\"w\"> </span><span class=\"mf\">132945476.16</span><span class=\"w\"> </span><span class=\"mi\">176276736</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 386472199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692650373
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843#issuecomment-1687016403\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6843\">issue #6843</a>:</p>\n<blockquote>\n<p>Oh well, thanks for checking. My approval still stands; feel free to merge!</p>\n</blockquote>",
        "id": 386472648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692650583
    }
]