[
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656\">issue #3656</a>:</p>\n<blockquote>\n<p>We have a wasm module that's been compiled with Rustc on Windows, and enabling debug information generation when running it in wasmtime causes the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">DWARF</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">attribute</span>: <span class=\"nc\">Block</span><span class=\"p\">(</span><span class=\"n\">EndianSlice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">slice</span>: <span class=\"p\">[</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">endian</span>: <span class=\"nc\">LittleEndian</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't know much about DWARF in general, but a quick search in the DWARF 5 specification says 123 == 0x7b is the binary encoding of the <code>DW_AT_call_all_source_calls</code> attribute, which documentation says that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">indicates</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">every</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"></span>\n<span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subprogram</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">including</span><span class=\"w\"> </span><span class=\"n\">every</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">inlined</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">described</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"></span>\n<span class=\"n\">either</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_TAG_call_site</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_TAG_inlined_subroutine</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">further</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">nonetheless</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"n\">described</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">DW_TAG_call_site</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">neither</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_pc</span><span class=\"w\"> </span><span class=\"n\">nor</span><span class=\"w\"></span>\n<span class=\"n\">DW_AT_call_return_pc</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">intended</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"></span>\n<span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">consumers</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">analyze</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">graphs</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">If</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">present</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"></span>\n<span class=\"n\">DW_AT_call_all_calls</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_tail_calls</span><span class=\"w\"> </span><span class=\"n\">attributes</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"></span>\n<span class=\"n\">implicitly</span><span class=\"w\"> </span><span class=\"n\">present</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(The fact that gimli parses the data as a Block suggests something goes wrong before it even recognizes this is an attribute, but I can't tell for sure.)</p>\n<p>I can't reproduce the issue when compiling from the same commit, with the same version of Rustc, on Linux, so I suspect there is some platform-specific DWARF encoding in there.</p>\n<p>cc @fitzgen @yurydelendik in case you have any ideas, or hints towards how I could help debug this further.</p>\n</blockquote>",
        "id": 267069105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641480762
    },
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656\">issue #3656</a>:</p>\n<blockquote>\n<p>We have a wasm module that's been compiled with Rustc on Windows, and enabling debug information generation when running it in wasmtime causes the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">DWARF</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">attribute</span>: <span class=\"nc\">Block</span><span class=\"p\">(</span><span class=\"n\">EndianSlice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">slice</span>: <span class=\"p\">[</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">endian</span>: <span class=\"nc\">LittleEndian</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't know much about DWARF in general, but a quick search in the DWARF 5 specification says 123 == 0x7b is the binary encoding of the <code>DW_AT_call_all_source_calls</code> attribute, which documentation says that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">indicates</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">every</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"></span>\n<span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subprogram</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">including</span><span class=\"w\"> </span><span class=\"n\">every</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">inlined</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">described</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"></span>\n<span class=\"n\">either</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_TAG_call_site</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_TAG_inlined_subroutine</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">further</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">nonetheless</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"n\">described</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">DW_TAG_call_site</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">neither</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_pc</span><span class=\"w\"> </span><span class=\"n\">nor</span><span class=\"w\"></span>\n<span class=\"n\">DW_AT_call_return_pc</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">intended</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"></span>\n<span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">consumers</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">analyze</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">graphs</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">If</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">present</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"></span>\n<span class=\"n\">DW_AT_call_all_calls</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_tail_calls</span><span class=\"w\"> </span><span class=\"n\">attributes</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"></span>\n<span class=\"n\">implicitly</span><span class=\"w\"> </span><span class=\"n\">present</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(The fact that gimli parses the data as a Block suggests something goes wrong before it even recognizes this is an attribute, but I can't tell for sure.)</p>\n<p>I can't reproduce the issue when compiling from the same commit, with the same version of Rustc, on Linux, so I suspect there is some platform-specific DWARF encoding in there.</p>\n<p>cc @fitzgen @yurydelendik in case you have any ideas, or hints towards how I could help debug this further.</p>\n</blockquote>",
        "id": 267069106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641480762
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656\">issue #3656</a>:</p>\n<blockquote>\n<p>We have a wasm module that's been compiled with Rustc on Windows, and enabling debug information generation when running it in wasmtime causes the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">DWARF</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">attribute</span>: <span class=\"nc\">Block</span><span class=\"p\">(</span><span class=\"n\">EndianSlice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">slice</span>: <span class=\"p\">[</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">endian</span>: <span class=\"nc\">LittleEndian</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't know much about DWARF in general, but a quick search in the DWARF 5 specification says 123 == 0x7b is the binary encoding of the <code>DW_AT_call_all_source_calls</code> attribute, which documentation says that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">indicates</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">every</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"></span>\n<span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subprogram</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">including</span><span class=\"w\"> </span><span class=\"n\">every</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">inlined</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">described</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"></span>\n<span class=\"n\">either</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_TAG_call_site</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_TAG_inlined_subroutine</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">further</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">nonetheless</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"n\">described</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">DW_TAG_call_site</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">neither</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_pc</span><span class=\"w\"> </span><span class=\"n\">nor</span><span class=\"w\"></span>\n<span class=\"n\">DW_AT_call_return_pc</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">intended</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"></span>\n<span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">consumers</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">analyze</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">graphs</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">If</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">present</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"></span>\n<span class=\"n\">DW_AT_call_all_calls</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_tail_calls</span><span class=\"w\"> </span><span class=\"n\">attributes</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"></span>\n<span class=\"n\">implicitly</span><span class=\"w\"> </span><span class=\"n\">present</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(The fact that gimli parses the data as a Block suggests something goes wrong before it even recognizes this is an attribute, but I can't tell for sure.)</p>\n<p>I can't reproduce the issue when compiling from the same commit, with the same version of Rustc, on Linux, so I suspect there is some platform-specific DWARF encoding in there.</p>\n<p>cc @fitzgen @yurydelendik in case you have any ideas, or hints towards how I could help debug this further.</p>\n</blockquote>",
        "id": 267069107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641480762
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656#issuecomment-1006704532\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656\">issue #3656</a>:</p>\n<blockquote>\n<p>According to the source it should be parsed as flag: <a href=\"https://github.com/gimli-rs/gimli/blob/ef97809efe9adeda039c5f5397480522d25cebaa/src/read/unit.rs#L1675-L1677\">https://github.com/gimli-rs/gimli/blob/ef97809efe9adeda039c5f5397480522d25cebaa/src/read/unit.rs#L1675-L1677</a></p>\n</blockquote>",
        "id": 267077236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641484811
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656#issuecomment-1006765586\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656\">issue #3656</a>:</p>\n<blockquote>\n<p>I don't have any particular insight here, sorry.</p>\n<p>What does <code>dwarfdump</code> say about it?</p>\n</blockquote>",
        "id": 267088035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641489677
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656#issuecomment-1008945233\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656\">issue #3656</a>:</p>\n<blockquote>\n<blockquote>\n<p>What does dwarfdump say about it?</p>\n</blockquote>\n<p>Ah thanks, didn't know this tool. It does generate a 200 MB file for this particular wasm module. Is there something in particular I should look for?</p>\n</blockquote>",
        "id": 267447630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641826152
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656#issuecomment-1009169367\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656\">issue #3656</a>:</p>\n<blockquote>\n<p>I guess I was curious whether it parsed okay with <code>dwarfdump</code>. Can you see the relevant attribute in the output?</p>\n<p>There is also <a href=\"https://github.com/gimli-rs/gimli/blob/master/examples/dwarfdump.rs\">a <code>dwarfdump</code> clone</a> in the <code>gimli</code> repo. You could try running that (if it supports Wasm files, it might not) on this file as well and if the <code>gimli</code> version fails to parse the DWARF but the binutils version doesn't, then that's a strong hint that this is a bug in <code>gimli</code>.</p>\n<p>But yeah, this is pretty hard to debug without being able to create a smaller test case. You could try running <code>wasm-tools shrink</code> on it (from <a href=\"https://github.com/bytecodealliance/wasm-tools\">https://github.com/bytecodealliance/wasm-tools</a>) but it will just shrink the Wasm bits and not the DWARF bits because we haven't added mutators for custom sections <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/415\">yet</a>.</p>\n</blockquote>",
        "id": 267473161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641836542
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656#issuecomment-1119465855\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656\">issue #3656</a>:</p>\n<blockquote>\n<p>Don't think we have seen this for a while, so closing.</p>\n</blockquote>",
        "id": 281419234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651832220
    },
    {
        "content": "<p>bnjbvr closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3656\">issue #3656</a>:</p>\n<blockquote>\n<p>We have a wasm module that's been compiled with Rustc on Windows, and enabling debug information generation when running it in wasmtime causes the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">DWARF</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">attribute</span>: <span class=\"nc\">Block</span><span class=\"p\">(</span><span class=\"n\">EndianSlice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">slice</span>: <span class=\"p\">[</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">endian</span>: <span class=\"nc\">LittleEndian</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't know much about DWARF in general, but a quick search in the DWARF 5 specification says 123 == 0x7b is the binary encoding of the <code>DW_AT_call_all_source_calls</code> attribute, which documentation says that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">indicates</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">every</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"></span>\n<span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">subprogram</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">including</span><span class=\"w\"> </span><span class=\"n\">every</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">inlined</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">described</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"></span>\n<span class=\"n\">either</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_TAG_call_site</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_TAG_inlined_subroutine</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">further</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">nonetheless</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"n\">described</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">DW_TAG_call_site</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">neither</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_pc</span><span class=\"w\"> </span><span class=\"n\">nor</span><span class=\"w\"></span>\n<span class=\"n\">DW_AT_call_return_pc</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">intended</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"></span>\n<span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">consumers</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">analyze</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">graphs</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">If</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_source_calls</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">present</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"></span>\n<span class=\"n\">DW_AT_call_all_calls</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">DW_AT_call_all_tail_calls</span><span class=\"w\"> </span><span class=\"n\">attributes</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"></span>\n<span class=\"n\">implicitly</span><span class=\"w\"> </span><span class=\"n\">present</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(The fact that gimli parses the data as a Block suggests something goes wrong before it even recognizes this is an attribute, but I can't tell for sure.)</p>\n<p>I can't reproduce the issue when compiling from the same commit, with the same version of Rustc, on Linux, so I suspect there is some platform-specific DWARF encoding in there.</p>\n<p>cc @fitzgen @yurydelendik in case you have any ideas, or hints towards how I could help debug this further.</p>\n</blockquote>",
        "id": 281419235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651832220
    }
]