[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018\">Issue #2018</a>:</p>\n<blockquote>\n<p>I noticed recently that jitdump support seems broken on master when used through the wasmtime CLI. I'm pretty perplexed by this, especially because bisection pointed to #1565 as a cause. I think, though, that #1565 as a cause is a red herring, and this has always been a bug. Given this <code>fib.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;fib({}) = {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>along with this embedding:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">profiler</span><span class=\"p\">(</span><span class=\"n\">ProfilingStrategy</span>::<span class=\"n\">JitDump</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;./fib.wasm&quot;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"s\">&quot;main&quot;</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">get2</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// changeme</span>\n<span class=\"w\">        </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([]),</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([]));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>When this is run as:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rustc --target wasm32-unknown-unknown fib.rs -O\n$ cargo build &amp;&amp; perf record -k mono ./target/debug/wasmtime\n$ perf inject --jit --input perf.data --output perf.jit.data\n$ perf report --input perf.jit.data\n</code></pre></div>\n\n\n<p>this will not attribute time to <code>fib::fib</code>, but instead lots of jit addresses show up:</p>\n<div class=\"codehilite\"><pre><span></span><code># Overhead  Command   Shared Object       Symbol                                                                                                                                                                                     &gt;\n# ........  ........  ..................  ...........................................................................................................................................................................................&gt;\n#\n     2.02%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c418\n     1.73%  wasmtime  libc-2.31.so        [.] __memmove_avx_unaligned_erms\n     1.34%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c422\n     1.32%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c499\n     1.29%  wasmtime  wasmtime            [.] crossbeam_epoch::internal::Local::pin\n     1.20%  wasmtime  wasmtime            [.] core::ptr::swap_nonoverlapping_one\n     1.09%  wasmtime  wasmtime            [.] core::sync::atomic::atomic_load\n     1.05%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c479\n     1.03%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c428\n</code></pre></div>\n\n\n<p>If, however, the line with <code>//changeme</code> is switched to <code>true</code> then you'll get the profile as expected:</p>\n<div class=\"codehilite\"><pre><span></span><code># Overhead  Command   Shared Object       Symbol\n# ........  ........  ..................  ...........................................................................................................................................................\n#\n    25.77%  wasmtime  jitted-142410-4.so  [.] fib::fib\n     1.80%  wasmtime  libc-2.31.so        [.] __memmove_avx_unaligned_erms\n     1.14%  wasmtime  wasmtime            [.] crossbeam_epoch::internal::Local::pin\n     0.91%  wasmtime  wasmtime            [.] core::sync::atomic::atomic_load\n     0.91%  wasmtime  wasmtime            [.] core::sync::atomic::atomic_compare_exchange\n</code></pre></div>\n\n\n<p>I'm honestly not entirely sure what's going on. I don't think that our jitdump integration is what's broken. The <code>*.dump</code> file emitted looks reasonable, <code>perf inject</code> appears to work, <code>*.so</code> files pop up and they've all got functions in them with names as expected. I'm not really sure what's happening here.</p>\n<p>@jlb6740 do you know more about <code>perf</code> perhaps to help debug? It'd be great to know why <code>perf</code> is failing to recognize the function in one case but not the other.</p>\n<p>The only real difference here seems to be what's on the stack, whether it's native versions of trampolines (<code>Func::wrap</code>) or runtime-generated versions of trampolines (<code>Func::new</code>). We don't tell jitdump about the trampolines generated by <code>Func::new</code> but after doing that it didn't seem to fix anything. Additionally I think we have unwind info for everything registered, but I'm not even sure why perf would want to unwind since we're not collecting stacks, just samples.</p>\n<p>Overall I'm at a loss myself and I'm not sure what to do next. I'm hoping @jlb6740 you've got ideas of what might be going on :(</p>\n</blockquote>",
        "id": 203849822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741618
    },
    {
        "content": "<p>jlb6740 assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018\">Issue #2018</a>:</p>\n<blockquote>\n<p>I noticed recently that jitdump support seems broken on master when used through the wasmtime CLI. I'm pretty perplexed by this, especially because bisection pointed to #1565 as a cause. I think, though, that #1565 as a cause is a red herring, and this has always been a bug. Given this <code>fib.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;fib({}) = {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>along with this embedding:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">profiler</span><span class=\"p\">(</span><span class=\"n\">ProfilingStrategy</span>::<span class=\"n\">JitDump</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;./fib.wasm&quot;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"s\">&quot;main&quot;</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">get2</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// changeme</span>\n<span class=\"w\">        </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([]),</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([]));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>When this is run as:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rustc --target wasm32-unknown-unknown fib.rs -O\n$ cargo build &amp;&amp; perf record -k mono ./target/debug/wasmtime\n$ perf inject --jit --input perf.data --output perf.jit.data\n$ perf report --input perf.jit.data\n</code></pre></div>\n\n\n<p>this will not attribute time to <code>fib::fib</code>, but instead lots of jit addresses show up:</p>\n<div class=\"codehilite\"><pre><span></span><code># Overhead  Command   Shared Object       Symbol                                                                                                                                                                                     &gt;\n# ........  ........  ..................  ...........................................................................................................................................................................................&gt;\n#\n     2.02%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c418\n     1.73%  wasmtime  libc-2.31.so        [.] __memmove_avx_unaligned_erms\n     1.34%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c422\n     1.32%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c499\n     1.29%  wasmtime  wasmtime            [.] crossbeam_epoch::internal::Local::pin\n     1.20%  wasmtime  wasmtime            [.] core::ptr::swap_nonoverlapping_one\n     1.09%  wasmtime  wasmtime            [.] core::sync::atomic::atomic_load\n     1.05%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c479\n     1.03%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c428\n</code></pre></div>\n\n\n<p>If, however, the line with <code>//changeme</code> is switched to <code>true</code> then you'll get the profile as expected:</p>\n<div class=\"codehilite\"><pre><span></span><code># Overhead  Command   Shared Object       Symbol\n# ........  ........  ..................  ...........................................................................................................................................................\n#\n    25.77%  wasmtime  jitted-142410-4.so  [.] fib::fib\n     1.80%  wasmtime  libc-2.31.so        [.] __memmove_avx_unaligned_erms\n     1.14%  wasmtime  wasmtime            [.] crossbeam_epoch::internal::Local::pin\n     0.91%  wasmtime  wasmtime            [.] core::sync::atomic::atomic_load\n     0.91%  wasmtime  wasmtime            [.] core::sync::atomic::atomic_compare_exchange\n</code></pre></div>\n\n\n<p>I'm honestly not entirely sure what's going on. I don't think that our jitdump integration is what's broken. The <code>*.dump</code> file emitted looks reasonable, <code>perf inject</code> appears to work, <code>*.so</code> files pop up and they've all got functions in them with names as expected. I'm not really sure what's happening here.</p>\n<p>@jlb6740 do you know more about <code>perf</code> perhaps to help debug? It'd be great to know why <code>perf</code> is failing to recognize the function in one case but not the other.</p>\n<p>The only real difference here seems to be what's on the stack, whether it's native versions of trampolines (<code>Func::wrap</code>) or runtime-generated versions of trampolines (<code>Func::new</code>). We don't tell jitdump about the trampolines generated by <code>Func::new</code> but after doing that it didn't seem to fix anything. Additionally I think we have unwind info for everything registered, but I'm not even sure why perf would want to unwind since we're not collecting stacks, just samples.</p>\n<p>Overall I'm at a loss myself and I'm not sure what to do next. I'm hoping @jlb6740 you've got ideas of what might be going on :(</p>\n</blockquote>",
        "id": 204242922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595011220
    },
    {
        "content": "<p>jlb6740 unassigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018\">Issue #2018</a> (assigned to jlb6740):</p>\n<blockquote>\n<p>I noticed recently that jitdump support seems broken on master when used through the wasmtime CLI. I'm pretty perplexed by this, especially because bisection pointed to #1565 as a cause. I think, though, that #1565 as a cause is a red herring, and this has always been a bug. Given this <code>fib.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;fib({}) = {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>along with this embedding:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">profiler</span><span class=\"p\">(</span><span class=\"n\">ProfilingStrategy</span>::<span class=\"n\">JitDump</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;./fib.wasm&quot;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"s\">&quot;main&quot;</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">get2</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// changeme</span>\n<span class=\"w\">        </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([]),</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([]));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>When this is run as:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rustc --target wasm32-unknown-unknown fib.rs -O\n$ cargo build &amp;&amp; perf record -k mono ./target/debug/wasmtime\n$ perf inject --jit --input perf.data --output perf.jit.data\n$ perf report --input perf.jit.data\n</code></pre></div>\n\n\n<p>this will not attribute time to <code>fib::fib</code>, but instead lots of jit addresses show up:</p>\n<div class=\"codehilite\"><pre><span></span><code># Overhead  Command   Shared Object       Symbol                                                                                                                                                                                     &gt;\n# ........  ........  ..................  ...........................................................................................................................................................................................&gt;\n#\n     2.02%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c418\n     1.73%  wasmtime  libc-2.31.so        [.] __memmove_avx_unaligned_erms\n     1.34%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c422\n     1.32%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c499\n     1.29%  wasmtime  wasmtime            [.] crossbeam_epoch::internal::Local::pin\n     1.20%  wasmtime  wasmtime            [.] core::ptr::swap_nonoverlapping_one\n     1.09%  wasmtime  wasmtime            [.] core::sync::atomic::atomic_load\n     1.05%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c479\n     1.03%  wasmtime  [JIT] tid 142064    [.] 0x00007f6d16b4c428\n</code></pre></div>\n\n\n<p>If, however, the line with <code>//changeme</code> is switched to <code>true</code> then you'll get the profile as expected:</p>\n<div class=\"codehilite\"><pre><span></span><code># Overhead  Command   Shared Object       Symbol\n# ........  ........  ..................  ...........................................................................................................................................................\n#\n    25.77%  wasmtime  jitted-142410-4.so  [.] fib::fib\n     1.80%  wasmtime  libc-2.31.so        [.] __memmove_avx_unaligned_erms\n     1.14%  wasmtime  wasmtime            [.] crossbeam_epoch::internal::Local::pin\n     0.91%  wasmtime  wasmtime            [.] core::sync::atomic::atomic_load\n     0.91%  wasmtime  wasmtime            [.] core::sync::atomic::atomic_compare_exchange\n</code></pre></div>\n\n\n<p>I'm honestly not entirely sure what's going on. I don't think that our jitdump integration is what's broken. The <code>*.dump</code> file emitted looks reasonable, <code>perf inject</code> appears to work, <code>*.so</code> files pop up and they've all got functions in them with names as expected. I'm not really sure what's happening here.</p>\n<p>@jlb6740 do you know more about <code>perf</code> perhaps to help debug? It'd be great to know why <code>perf</code> is failing to recognize the function in one case but not the other.</p>\n<p>The only real difference here seems to be what's on the stack, whether it's native versions of trampolines (<code>Func::wrap</code>) or runtime-generated versions of trampolines (<code>Func::new</code>). We don't tell jitdump about the trampolines generated by <code>Func::new</code> but after doing that it didn't seem to fix anything. Additionally I think we have unwind info for everything registered, but I'm not even sure why perf would want to unwind since we're not collecting stacks, just samples.</p>\n<p>Overall I'm at a loss myself and I'm not sure what to do next. I'm hoping @jlb6740 you've got ideas of what might be going on :(</p>\n</blockquote>",
        "id": 204277382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595036429
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018#issuecomment-660416778\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018\">Issue #2018</a>:</p>\n<blockquote>\n<p>@alexcrichton Sorry for taking so long to chime in. Yes you're right, the only difference does look like how the func is created. I have not run jitdump with an embedded instantiation in this way but will try to trace to see what is going wrong. If the difference between wrap and new is really just when the trampoline is created then I guess they should have no bearing. Also not sure the impact of #1565 but will investigate. </p>\n</blockquote>",
        "id": 204281415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595042978
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018#issuecomment-661091494\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018\">Issue #2018</a>:</p>\n<blockquote>\n<p>Oh no worries! What I gisted above was basically a reduction of the CLI to a smaller thing to poke around with. I did some investigation over the weekend, though, and I don't think that this is our bug. I believe that this behavior is a \"feature\" of <code>perf</code>'s support for JIT code.</p>\n<p>I managed to <a href=\"https://gist.github.com/alexcrichton/ba66d506b48723a72574111ccbbfd0fc\">reduce this code even more</a> to something that was pretty bizarre. That gist sort of simulates what we're doing in <code>Func::new</code>, which is to map some memory as read/write and then remap it as read/execute. I get symbols correctly in that gist if the mmap size is 4096, but it fails for anything larger than that (like 8192).</p>\n<p>Digging into <code>perf</code> itself I found that, for the bad profiles where symbols didn't appear correctly, <code>perf</code> was actually finding and loading all the <code>jitted-*.so</code> executables emitted by <code>perf inject</code>. The only gotcha was that <em>after</em> it loaded everything emitted by <code>perf inject</code> there was a \"mmap2\" event which claimed that it mapped over all our previously emitted JIT code. AFAIK what's happening under the hood is that <code>perf inject</code> is injecting events into the data stream, feigning loading all the little <code>*.so</code> files into the address space. The <code>perf report</code> tool then recognizes all this and knows what executables (synthetic files created by <code>perf inject</code>) are mapped into the address space and where. </p>\n<p>The problem is that this extra \"mmap2\" event claims that it spans the entire area of JIT code we just emitted. So what <code>perf report</code> is seeing is a careful construction of the address space with a bunch of <code>jitted-*.so</code> files, and then it all gets blown away with the call to <code>mprotect</code> which thinks that <em>new</em> code was mapped over all the previous code. Then <code>perf report</code> has no connection for this \"new\" region to files on disk, so it presents no symbols.</p>\n<p>I did my best to figure out why perf thinks there's an mmap2 event for such a large region of the address space when clearly <code>mprotect</code> is not for a large amount. In the debug logs I was seeing perf think that it was hundreds of kilobytes large when the size passed to <code>mprotect</code> was only 8k. Digging in though it appears that <code>perf</code>, at runtime, will dynamically attempt to guess the size of <code>mprotect</code> and such calls by parsing <code>/proc/self/maps</code>. That, AFAIK, lists all the regions of a process's address space and where they're mapped to with what permissions and such. Digging in to what was happening with the address space this is what I got:</p>\n<p>First, just after the call to <code>mmap</code> in the example program above, the process's mappings changed to look like:</p>\n<div class=\"codehilite\"><pre><span></span><code>--- m1  2020-07-19 10:25:13.379913654 -0700\n+++ m2  2020-07-19 10:25:16.219914330 -0700\n@@ -118,6 +118,7 @@\n 7f6cdcaa6000-7f6cdcca6000 rw-p 00000000 00:00 0\n 7f6cdcca6000-7f6cdcca7000 ---p 00000000 00:00 0\n 7f6cdcca7000-7f6cdcea7000 rw-p 00000000 00:00 0\n+7f6cdd147000-7f6cdd149000 rw-p 00000000 00:00 0\n 7f6cdd149000-7f6cdd161000 r-xp 00000000 00:00 0\n 7f6cdd161000-7f6cdd162000 ---p 00000000 00:00 0\n 7f6cdd162000-7f6cdd164000 rw-p 00000000 00:00 0\n</code></pre></div>\n\n\n<p>After the <code>mprotect</code> call it looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code>--- m2  2020-07-19 10:25:16.219914330 -0700\n+++ m3  2020-07-19 10:25:18.543914882 -0700\n@@ -118,8 +118,7 @@\n 7f6cdcaa6000-7f6cdcca6000 rw-p 00000000 00:00 0\n 7f6cdcca6000-7f6cdcca7000 ---p 00000000 00:00 0\n 7f6cdcca7000-7f6cdcea7000 rw-p 00000000 00:00 0\n-7f6cdd147000-7f6cdd149000 rw-p 00000000 00:00 0\n-7f6cdd149000-7f6cdd161000 r-xp 00000000 00:00 0\n+7f6cdd147000-7f6cdd161000 r-xp 00000000 00:00 0\n 7f6cdd161000-7f6cdd162000 ---p 00000000 00:00 0\n 7f6cdd162000-7f6cdd164000 rw-p 00000000 00:00 0\n 7f6cdd164000-7f6cdd165000 ---p 00000000 00:00 0\n</code></pre></div>\n\n\n<p>which I think starts to explain things. It <em>just so happens</em> that our trampoline JIT memory sits just before the rest of the module's JIT memory, so that when we map them all as the same permissions the <code>/proc/self/maps</code> file coalesces everything into one block. This makes <code>perf report</code> think that on the small <code>mprotect</code> it actually affected a very large region, including our JIT code.</p>\n<p>The tl;dr; I think is basically:</p>\n<ul>\n<li><code>perf report</code> uses /proc/self/maps to figure out the length of a modification to the address space when something like <code>mmap</code> or <code>mprotect</code> happens</li>\n<li>This can cause larger-than-actual-lengths to be reported for operations if regions of memory are coalesced in how they're listed in <code>/proc/self/maps</code></li>\n<li>This can then cause <code>perf report</code> to think that JIT code was overwritten when it in fact was not, which causes <code>perf report</code> to forget about all the information loaded by <code>perf inject</code>.</li>\n</ul>\n<p>Overall there's no bug in Wasmtime from what I understand. I'm not even sure if this is a bug in <code>perf</code>, it sort of seems like it's just how it works. In any case I think we may still be able to fix this. One thing we could do is that when <code>--jitdump</code> is enabled we could allocate JIT code with an extra empty page at the end of it all the time. This means that <code>/proc/self/maps</code> won't be able to ever coalesce anything and everything will be disjoint regions. This I believe means that we won't have this issue since <code>perf report</code> will see mmap2 events for all disjoint regions.</p>\n</blockquote>",
        "id": 204432601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595256973
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018#issuecomment-661186421\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018\">Issue #2018</a>:</p>\n<blockquote>\n<p>@alexcrichton excellent. Hi Alex, very good analysis. What you describes sounds like a good explanation and I would like to go through your steps and see for myself if I can duplicate your findings. Also, maybe off base but I am wondering about the other record, JIT_CODE_MOVE, and whether it may be of help here? Specifically, if we describe the trampoline and jitted code with the JIT_CODE_LOAD record (are we including the trampoline properly??)  then should we be using JIT_CODE_MOVE when the mprotect call happens.</p>\n</blockquote>",
        "id": 204447189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595264145
    }
]