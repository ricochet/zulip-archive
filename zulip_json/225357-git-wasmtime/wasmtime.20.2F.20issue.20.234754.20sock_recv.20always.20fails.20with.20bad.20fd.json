[
    {
        "content": "<p>tiran opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/9404031/recv.zip\">recv.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>wasmtime run --tcplisten 127.0.0.1:8080 recv.wasm</code></li>\n<li><code>curl http://localhost:8080</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I expect that <code>recv()</code> can read from the fd that has been returned from <code>accept</code>.</p>\n<h3>Actual Results</h3>\n<p><code>recv()</code> calls always fail with <code>Bad file descriptor</code>. Output from my reproducer:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">accept</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">accept</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"n\">recv</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">Bad</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.39.1 and 418dbc15bd2a5269b338587661387e05fc77b983</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>I did a bit of debugging with <code>rust-gdb</code>. It looks like <code>wasi_common::snapshots::preview_1::sock_recv</code> calls <code>wasi_common::file::WasiFile::sock_recv</code> which always fails with <code>badf</code>. <code>sock_accept</code> on the other hand is provided by wasi_cap_std_sync::net (<code>crates/wasi-common/cap-std-sync/src/net.rs</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"w\"></span>\n#<span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"n\">wasi_common</span>::<span class=\"n\">file</span>::<span class=\"n\">WasiFile</span>::<span class=\"n\">sock_recv</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_cap_std_sync</span>::<span class=\"n\">net</span>::<span class=\"n\">TcpStream</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"mh\">0x555557ab9230</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ri_data</span><span class=\"o\">=&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">IoSliceMut</span><span class=\"p\">](</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.},</span><span class=\"w\"> </span><span class=\"n\">_ri_flags</span><span class=\"o\">=..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">32</span><span class=\"w\"></span>\n#<span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555c2d01f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">19</span><span class=\"p\">}</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">snapshots</span><span class=\"o\">/</span><span class=\"n\">preview_1</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1268</span><span class=\"w\"></span>\n#<span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555c5e64c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">from_generator</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"n\">poll</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">19</span><span class=\"p\">}</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block_env</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=..</span><span class=\"p\">.,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cx</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffff5718</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">builddir</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">BUILD</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.63.0</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">91</span><span class=\"w\"></span>\n#<span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555a0504f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">future</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"n\">poll</span><span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"n\">core</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">types</span>::<span class=\"n\">Roflags</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Send</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=..</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffff5718</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">builddir</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">BUILD</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.63.0</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">124</span><span class=\"w\"></span>\n#<span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555af06d7</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">ctx</span>::<span class=\"n\">WasiCtx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">snapshots</span><span class=\"o\">/</span><span class=\"n\">preview_1</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">21</span><span class=\"w\"></span>\n#<span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555a713e5</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">from_generator</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"n\">poll</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block_env</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">ctx</span>::<span class=\"n\">WasiCtx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=..</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffff5718</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">builddir</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">BUILD</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.63.0</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>reproducer</h4>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">_POSIX_C_SOURCE</span><span class=\"w\"> </span><span class=\"mi\">200809</span><span class=\"n\">L</span><span class=\"w\"></span>\n\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">errno</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">netinet</span><span class=\"o\">/</span><span class=\"k\">in</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n#<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">ACCEPT_FD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">128</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr_in</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">socklen_t</span><span class=\"w\"> </span><span class=\"n\">addr_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr_in</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">timespec</span><span class=\"w\"> </span><span class=\"n\">tv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"accept() on fd %i</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ACCEPT_FD</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"n\">ACCEPT_FD</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">addr_size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">nanosleep</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">tv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NULL</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// hack</span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\".\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fflush</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">accept returned fd %i</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sizeof</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"recv %zd</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"recv(%i, ...) failed: %s (%i)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">errno</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"buf %.*s (%zd)\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 294892791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661268837
    },
    {
        "content": "<p>tiran labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/9404031/recv.zip\">recv.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>wasmtime run --tcplisten 127.0.0.1:8080 recv.wasm</code></li>\n<li><code>curl http://localhost:8080</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I expect that <code>recv()</code> can read from the fd that has been returned from <code>accept</code>.</p>\n<h3>Actual Results</h3>\n<p><code>recv()</code> calls always fail with <code>Bad file descriptor</code>. Output from my reproducer:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">accept</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">accept</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"n\">recv</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">Bad</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.39.1 and 418dbc15bd2a5269b338587661387e05fc77b983</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>I did a bit of debugging with <code>rust-gdb</code>. It looks like <code>wasi_common::snapshots::preview_1::sock_recv</code> calls <code>wasi_common::file::WasiFile::sock_recv</code> which always fails with <code>badf</code>. <code>sock_accept</code> on the other hand is provided by wasi_cap_std_sync::net (<code>crates/wasi-common/cap-std-sync/src/net.rs</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"w\"></span>\n#<span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"n\">wasi_common</span>::<span class=\"n\">file</span>::<span class=\"n\">WasiFile</span>::<span class=\"n\">sock_recv</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_cap_std_sync</span>::<span class=\"n\">net</span>::<span class=\"n\">TcpStream</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"mh\">0x555557ab9230</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ri_data</span><span class=\"o\">=&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">IoSliceMut</span><span class=\"p\">](</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.},</span><span class=\"w\"> </span><span class=\"n\">_ri_flags</span><span class=\"o\">=..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">32</span><span class=\"w\"></span>\n#<span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555c2d01f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">19</span><span class=\"p\">}</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">snapshots</span><span class=\"o\">/</span><span class=\"n\">preview_1</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1268</span><span class=\"w\"></span>\n#<span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555c5e64c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">from_generator</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"n\">poll</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">19</span><span class=\"p\">}</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block_env</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=..</span><span class=\"p\">.,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cx</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffff5718</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">builddir</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">BUILD</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.63.0</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">91</span><span class=\"w\"></span>\n#<span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555a0504f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">future</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"n\">poll</span><span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"n\">core</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">types</span>::<span class=\"n\">Roflags</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Send</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=..</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffff5718</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">builddir</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">BUILD</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.63.0</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">124</span><span class=\"w\"></span>\n#<span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555af06d7</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">ctx</span>::<span class=\"n\">WasiCtx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">snapshots</span><span class=\"o\">/</span><span class=\"n\">preview_1</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">21</span><span class=\"w\"></span>\n#<span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555a713e5</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">from_generator</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"n\">poll</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block_env</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">ctx</span>::<span class=\"n\">WasiCtx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=..</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffff5718</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">builddir</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">BUILD</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.63.0</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>reproducer</h4>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">_POSIX_C_SOURCE</span><span class=\"w\"> </span><span class=\"mi\">200809</span><span class=\"n\">L</span><span class=\"w\"></span>\n\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">errno</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">netinet</span><span class=\"o\">/</span><span class=\"k\">in</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n#<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">ACCEPT_FD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">128</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr_in</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">socklen_t</span><span class=\"w\"> </span><span class=\"n\">addr_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr_in</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">timespec</span><span class=\"w\"> </span><span class=\"n\">tv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"accept() on fd %i</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ACCEPT_FD</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"n\">ACCEPT_FD</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">addr_size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">nanosleep</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">tv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NULL</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// hack</span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\".\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fflush</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">accept returned fd %i</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sizeof</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"recv %zd</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"recv(%i, ...) failed: %s (%i)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">errno</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"buf %.*s (%zd)\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 294892792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661268837
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754#issuecomment-1224250115\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<p>I think you have to use <code>fd_read</code> and <code>fd_write</code> to read from and write to sockets.</p>\n</blockquote>",
        "id": 294894154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661269206
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754#issuecomment-1224250115\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<p>I think you have to use <code>read</code> and <code>write</code> to read from and write to sockets.</p>\n</blockquote>",
        "id": 294894199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661269215
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754#issuecomment-1224252967\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<p>@bjorn3 <code>sock_recv</code> and <code>sock_send</code> correspond to POSIX <code>recv</code> and <code>send</code>, and are expected to work with sockets. It seems likely something else is going on here.</p>\n</blockquote>",
        "id": 294894602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661269332
    },
    {
        "content": "<p>tiran edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/9404031/recv.zip\">recv.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>wasmtime run --tcplisten 127.0.0.1:8080 recv.wasm</code></li>\n<li><code>curl http://localhost:8080</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I expect that <code>recv()</code> can read from the fd that has been returned from <code>accept</code>.</p>\n<h3>Actual Results</h3>\n<p><code>recv()</code> calls always fail with <code>Bad file descriptor</code>. Output from my reproducer:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">accept</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">accept</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"n\">recv</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">Bad</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.39.1 and 418dbc15bd2a5269b338587661387e05fc77b983</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>I did a bit of debugging with <code>rust-gdb</code>. It looks like <code>wasi_common::snapshots::preview_1::sock_recv</code> calls <code>wasi_common::file::WasiFile::sock_recv</code> which always fails with <code>badf</code>. <code>sock_accept</code> on the other hand is provided by <code>wasi_cap_std_sync::net</code> (<code>crates/wasi-common/cap-std-sync/src/net.rs</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"w\"></span>\n#<span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"n\">wasi_common</span>::<span class=\"n\">file</span>::<span class=\"n\">WasiFile</span>::<span class=\"n\">sock_recv</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_cap_std_sync</span>::<span class=\"n\">net</span>::<span class=\"n\">TcpStream</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"mh\">0x555557ab9230</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ri_data</span><span class=\"o\">=&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">IoSliceMut</span><span class=\"p\">](</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.},</span><span class=\"w\"> </span><span class=\"n\">_ri_flags</span><span class=\"o\">=..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">32</span><span class=\"w\"></span>\n#<span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555c2d01f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">19</span><span class=\"p\">}</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">snapshots</span><span class=\"o\">/</span><span class=\"n\">preview_1</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1268</span><span class=\"w\"></span>\n#<span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555c5e64c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">from_generator</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"n\">poll</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">19</span><span class=\"p\">}</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block_env</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=..</span><span class=\"p\">.,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cx</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffff5718</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">builddir</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">BUILD</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.63.0</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">91</span><span class=\"w\"></span>\n#<span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555a0504f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">future</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"n\">poll</span><span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"n\">core</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">types</span>::<span class=\"n\">Roflags</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Send</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=..</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffff5718</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">builddir</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">BUILD</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.63.0</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">124</span><span class=\"w\"></span>\n#<span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555af06d7</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">ctx</span>::<span class=\"n\">WasiCtx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">snapshots</span><span class=\"o\">/</span><span class=\"n\">preview_1</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">21</span><span class=\"w\"></span>\n#<span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x0000555555a713e5</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">from_generator</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">1</span><span class=\"p\">}</span>::<span class=\"n\">poll</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">snapshots</span>::<span class=\"n\">preview_1</span>::<span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">sock_recv</span>::<span class=\"p\">{</span><span class=\"n\">async_block_env</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">wasi_common</span>::<span class=\"n\">ctx</span>::<span class=\"n\">WasiCtx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=..</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffff5718</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">builddir</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">BUILD</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.63.0</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">future</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>reproducer</h4>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">_POSIX_C_SOURCE</span><span class=\"w\"> </span><span class=\"mi\">200809</span><span class=\"n\">L</span><span class=\"w\"></span>\n\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">errno</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">netinet</span><span class=\"o\">/</span><span class=\"k\">in</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n#<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">ACCEPT_FD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">128</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr_in</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">socklen_t</span><span class=\"w\"> </span><span class=\"n\">addr_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr_in</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">timespec</span><span class=\"w\"> </span><span class=\"n\">tv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">500</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"accept() on fd %i</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ACCEPT_FD</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"n\">ACCEPT_FD</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">sockaddr</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">addr_size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">nanosleep</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">tv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NULL</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// hack</span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\".\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fflush</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">accept returned fd %i</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sizeof</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"recv %zd</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"recv(%i, ...) failed: %s (%i)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">errno</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"buf %.*s (%zd)\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 294898380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661270391
    },
    {
        "content": "<p>tiran <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754#issuecomment-1224276267\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<p>My example works when I replace <code>recv()</code> with <code>read()</code>. But it's kinda the wrong API call. Portable applications like Python interpreter use <code>recv()</code> because <code>read()</code> does not work with sockets on Windows. Windows treats file handles and socket handles differently.</p>\n</blockquote>",
        "id": 294898652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661270446
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754#issuecomment-1224280105\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<blockquote>\n<p>@bjorn3 sock_recv and sock_send correspond to POSIX recv and send, and are expected to work with sockets. It seems likely something else is going on here.</p>\n</blockquote>\n<p>Rust's libstd uses fd_read and fd_write for WASI, not sock_recv and sock_send. Wasmtime also doesn't seem to implement sock_recv and sock_send at all.</p>\n</blockquote>",
        "id": 294899327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661270608
    },
    {
        "content": "<p>tiran <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754#issuecomment-1224287762\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<p>I'm using WASI-SDK 16 to compile a portable C application to wasm32-wasi. To be more precise I want to get CPython's socket module working under WASI. It uses <code>recv</code> and <code>send</code> to read to and write from a socket.</p>\n</blockquote>",
        "id": 294900416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661270956
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754#issuecomment-1226311205\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4754\">issue #4754</a>:</p>\n<blockquote>\n<p>Ah, I was mistaken. Wasmtime has some code for <code>sock_send</code> and <code>sock_recv</code>, but they're not fully implemented.</p>\n<p>I've now submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4776\">https://github.com/bytecodealliance/wasmtime/pull/4776</a> to implement them. With that patch, the reproducer reported above compiles and produces the expected output.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">tcplisten</span><span class=\"w\"> </span><span class=\"mf\">127.0.0.1</span>:<span class=\"mi\">8080</span><span class=\"w\"> </span><span class=\"n\">recv</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"n\">accept</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"o\">....</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">accept</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"n\">recv</span><span class=\"w\"> </span><span class=\"mi\">78</span><span class=\"w\"></span>\n<span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"n\">GET</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"o\">/</span><span class=\"mf\">1.1</span><span class=\"w\"></span>\n<span class=\"n\">Host</span>: <span class=\"nc\">localhost</span>:<span class=\"mi\">8080</span><span class=\"w\"></span>\n<span class=\"n\">User</span><span class=\"o\">-</span><span class=\"n\">Agent</span>: <span class=\"nc\">curl</span><span class=\"o\">/</span><span class=\"mf\">7.81.0</span><span class=\"w\"></span>\n<span class=\"n\">Accept</span>: <span class=\"o\">*</span><span class=\"cm\">/*</span>\n\n<span class=\"cm\"> (78)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 295124349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661374146
    }
]