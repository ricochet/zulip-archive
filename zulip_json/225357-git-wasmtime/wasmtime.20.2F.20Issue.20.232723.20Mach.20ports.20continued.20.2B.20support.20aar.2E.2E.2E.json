[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-797653760\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">Issue #2723</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 230071039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615571471
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-799527899\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">Issue #2723</a>:</p>\n<blockquote>\n<p>I'm hitting this in CI and I've got no clue how to get around it:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">E</span>: <span class=\"nc\">The</span><span class=\"w\"> </span><span class=\"n\">repository</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">https</span>:<span class=\"c1\">//download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04  Release' no longer has a Release file.</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 230367911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615823368
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-800277465\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">Issue #2723</a>:</p>\n<blockquote>\n<p>Thanks for the reviews! This will require a review of <a href=\"https://github.com/fitzgen/mach/pull/64\">https://github.com/fitzgen/mach/pull/64</a>, which I can incorporate in this PR, if it's simpler -- would be nice to have the code be in the right places, though :)</p>\n</blockquote>",
        "id": 230515387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615902921
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-800936519\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">Issue #2723</a>:</p>\n<blockquote>\n<p>Now not depending on the Mach PR anymore; should make the verify CI task happy!</p>\n</blockquote>",
        "id": 230661602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615973647
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-801112395\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">Issue #2723</a>:</p>\n<blockquote>\n<p>To confirm, am I correct in understanding that this PR now serves two purposes and is reading for landing:</p>\n<ol>\n<li>First it fixes the combination of wasmtime and breakpad on macOS by using mach ports for exceptions instead of signal handlers.</li>\n<li>Second it adds a small bit of support for AArch64 mac machines to the point where we can \"catch\" wasm traps but the backtraces are incorrect. (maybe only one frame of wasm instead of all the frames)</li>\n</ol>\n<p>Does that sound right? If so seems reasonable to me to land!</p>\n</blockquote>",
        "id": 230696154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615990230
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-801120463\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">Issue #2723</a>:</p>\n<blockquote>\n<p>Yes, this is entirely correct! MacOS CI passing suggests that the backtraces are still properly filled (i.e. contain all the frames) on darwin x86_64.</p>\n<p>One note for readers: it's possible to get all the frames in backtrace by using a custom build of libunwind:</p>\n<ul>\n<li>clone and build libunwind from LLVM's repository. Say <code>/tmp/libunwind_build/</code> contains the build artifacts.</li>\n<li>in crates/jit/src/unwind/system.rs, add <code>#[link(lib = \"unwind\", kind = \"static\")]</code> on top of the <code>extern \"C\"</code> block that defines <code>__register_frame</code>.</li>\n<li>build with <code>RUSTFLAGS=\"-L /tmp/libunwind_build/\" cargo build</code></li>\n</ul>\n<p>This is sufficient to get all the frames appearing on backtraces on mac aarch64.</p>\n</blockquote>",
        "id": 230697740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615990850
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-801141481\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">Issue #2723</a>:</p>\n<blockquote>\n<p>Ok! Let's go ahead and land this to get to a more working state along those two points, and we can figure out later how to best handle the unwinding intricacies on macOS AArch64</p>\n</blockquote>",
        "id": 230701353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615992199
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#issuecomment-801120463\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">Issue #2723</a>:</p>\n<blockquote>\n<p>Yes, this is entirely correct! MacOS CI passing suggests that the backtraces are still properly filled (i.e. contain all the frames) on darwin x86_64.</p>\n<p>One note for readers: it's possible to get all the frames in backtrace by using a custom build of libunwind:</p>\n<ul>\n<li>clone and build libunwind from LLVM's repository. Say <code>/tmp/libunwind_build/</code> contains the build artifacts.</li>\n<li>in crates/jit/src/unwind/system.rs, add <code>#[link(name = \"unwind\", kind = \"static\")]</code> on top of the <code>extern \"C\"</code> block that defines <code>__register_frame</code>.</li>\n<li>build with <code>RUSTFLAGS=\"-L /tmp/libunwind_build/\" cargo build</code></li>\n</ul>\n<p>This is sufficient to get all the frames appearing on backtraces on mac aarch64.</p>\n</blockquote>",
        "id": 233321376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617716912
    }
]