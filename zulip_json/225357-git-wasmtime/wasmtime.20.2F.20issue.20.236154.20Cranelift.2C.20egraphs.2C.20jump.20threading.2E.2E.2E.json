[
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>At a high level this is a pretty simple issue where this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory 1)\n  (func (param i32) (result v128)\n    local.get 0\n    v128.load32_splat\n  )\n)\n</code></pre></div>\n<p>generates this code by default on x86_64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x50</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">       </span><span class=\"mi\">8</span>:       <span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">esi</span>\n<span class=\"w\">       </span><span class=\"n\">a</span>:       <span class=\"mi\">45</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r11d</span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">c3</span><span class=\"w\">          </span><span class=\"n\">vmovd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm8</span>\n<span class=\"w\">      </span><span class=\"mi\">14</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0x0</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm8</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">a</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">d</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">e</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>Naively this instruction lowering pattern matches to the cranelift-wasm lowering of the <code>v128.load32_splat</code> instruction, is to generate a load (the instruction at <code>0xa</code>) followed by a splat (the instructions at <code>0xf</code> and <code>0x14</code>). With AVX, however, this instruction should lower to a single <code>vbroadcastss</code> instruction. This is where this issue gets odd. If egraphs are disabled, then everything works ok:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">ca</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9d</span>\n<span class=\"w\">       </span><span class=\"mi\">7</span>:       <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x50</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r10</span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">vbroadcastss</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">12</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">      </span><span class=\"mi\">15</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">      </span><span class=\"mi\">16</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>So there's an issue here where egraphs are transforming the code into something that can't be pattern-matched by instruction selection. According to logging, when egraphs are enabled, this is the input CLIF into lowering (after egraphs):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">                                    </span><span class=\"n\">v3</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v9</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v9</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I believe that the issue here is that the <code>splat</code> has moved across basic blocks. This means that the load sinking can't fire. The input function to egraphs, however, was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">                                    </span><span class=\"n\">v3</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v9</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>where it can clearly be seen that egraphs are moving the <code>splat</code> and <code>bitcast</code> instructions across basic blocks.</p>\n<hr>\n<p>So that's a basic description of the problem! How best to fix this, though, depends. This was talked briefly about at today's Cranelift meeting but some ways that this could be tackled are:</p>\n<ul>\n<li>Technically there's no need for <code>cranelift-wasm</code> to generate the <code>block1</code> block in the first place. This is likely done for convenience of translation, but it may be possible to make translation \"fancier\" and not eagerly allocate a basic block for the <code>return</code> instruction.</li>\n<li>Today Cranelift does not have any sort of jump-threading/branch-folding pass. Abstractly <code>block1</code> has one predecessor which has a <code>jump</code> instruction, so there's no need for <code>block1</code> to exist and the <code>block0</code> and <code>block1</code> blocks could be fused. This optimization pass could happen before egraphs, for example. Note that this optimization does already happen to a degree during lowering due to <code>MachBuffer</code> optimizations.</li>\n<li>Perhaps even more fancifully the load sinking could be souped up to work in this case. Given the complications this is not likely to be a viable solution.</li>\n</ul>\n<p>At a basic level this I think is an issue worth fixing, but at a higher level I think that this issue showcases the lack of jump-threading in Cranelift and the need for it as egraphs are moving around instructions. Hence the title of this issue and the predicted way to fix it, which would be a jump-threading pass of sorts in Cranelift.</p>\n</blockquote>",
        "id": 347198766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680711869
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>At a high level this is a pretty simple issue where this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory 1)\n  (func (param i32) (result v128)\n    local.get 0\n    v128.load32_splat\n  )\n)\n</code></pre></div>\n<p>generates this code by default on x86_64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x50</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">       </span><span class=\"mi\">8</span>:       <span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">esi</span>\n<span class=\"w\">       </span><span class=\"n\">a</span>:       <span class=\"mi\">45</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r11d</span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">c3</span><span class=\"w\">          </span><span class=\"n\">vmovd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm8</span>\n<span class=\"w\">      </span><span class=\"mi\">14</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0x0</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm8</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">a</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">d</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">e</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>Naively this instruction lowering pattern matches to the cranelift-wasm lowering of the <code>v128.load32_splat</code> instruction, is to generate a load (the instruction at <code>0xa</code>) followed by a splat (the instructions at <code>0xf</code> and <code>0x14</code>). With AVX, however, this instruction should lower to a single <code>vbroadcastss</code> instruction. This is where this issue gets odd. If egraphs are disabled, then everything works ok:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">ca</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9d</span>\n<span class=\"w\">       </span><span class=\"mi\">7</span>:       <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x50</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r10</span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">vbroadcastss</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">12</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">      </span><span class=\"mi\">15</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">      </span><span class=\"mi\">16</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>So there's an issue here where egraphs are transforming the code into something that can't be pattern-matched by instruction selection. According to logging, when egraphs are enabled, this is the input CLIF into lowering (after egraphs):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">                                    </span><span class=\"n\">v3</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v9</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v9</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I believe that the issue here is that the <code>splat</code> has moved across basic blocks. This means that the load sinking can't fire. The input function to egraphs, however, was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">                                    </span><span class=\"n\">v3</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v9</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>where it can clearly be seen that egraphs are moving the <code>splat</code> and <code>bitcast</code> instructions across basic blocks.</p>\n<hr>\n<p>So that's a basic description of the problem! How best to fix this, though, depends. This was talked briefly about at today's Cranelift meeting but some ways that this could be tackled are:</p>\n<ul>\n<li>Technically there's no need for <code>cranelift-wasm</code> to generate the <code>block1</code> block in the first place. This is likely done for convenience of translation, but it may be possible to make translation \"fancier\" and not eagerly allocate a basic block for the <code>return</code> instruction.</li>\n<li>Today Cranelift does not have any sort of jump-threading/branch-folding pass. Abstractly <code>block1</code> has one predecessor which has a <code>jump</code> instruction, so there's no need for <code>block1</code> to exist and the <code>block0</code> and <code>block1</code> blocks could be fused. This optimization pass could happen before egraphs, for example. Note that this optimization does already happen to a degree during lowering due to <code>MachBuffer</code> optimizations.</li>\n<li>Perhaps even more fancifully the load sinking could be souped up to work in this case. Given the complications this is not likely to be a viable solution.</li>\n</ul>\n<p>At a basic level this I think is an issue worth fixing, but at a higher level I think that this issue showcases the lack of jump-threading in Cranelift and the need for it as egraphs are moving around instructions. Hence the title of this issue and the predicted way to fix it, which would be a jump-threading pass of sorts in Cranelift.</p>\n</blockquote>",
        "id": 347198767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680711869
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>At a high level this is a pretty simple issue where this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory 1)\n  (func (param i32) (result v128)\n    local.get 0\n    v128.load32_splat\n  )\n)\n</code></pre></div>\n<p>generates this code by default on x86_64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x50</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">       </span><span class=\"mi\">8</span>:       <span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">esi</span>\n<span class=\"w\">       </span><span class=\"n\">a</span>:       <span class=\"mi\">45</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r11d</span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">c3</span><span class=\"w\">          </span><span class=\"n\">vmovd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm8</span>\n<span class=\"w\">      </span><span class=\"mi\">14</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0x0</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm8</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">a</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">d</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">e</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>Naively this instruction lowering pattern matches to the cranelift-wasm lowering of the <code>v128.load32_splat</code> instruction, is to generate a load (the instruction at <code>0xa</code>) followed by a splat (the instructions at <code>0xf</code> and <code>0x14</code>). With AVX, however, this instruction should lower to a single <code>vbroadcastss</code> instruction. This is where this issue gets odd. If egraphs are disabled, then everything works ok:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">ca</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9d</span>\n<span class=\"w\">       </span><span class=\"mi\">7</span>:       <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x50</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r10</span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">vbroadcastss</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">12</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">      </span><span class=\"mi\">15</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">      </span><span class=\"mi\">16</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>So there's an issue here where egraphs are transforming the code into something that can't be pattern-matched by instruction selection. According to logging, when egraphs are enabled, this is the input CLIF into lowering (after egraphs):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">                                    </span><span class=\"n\">v3</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v9</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v9</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I believe that the issue here is that the <code>splat</code> has moved across basic blocks. This means that the load sinking can't fire. The input function to egraphs, however, was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">                                    </span><span class=\"n\">v3</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v9</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>where it can clearly be seen that egraphs are moving the <code>splat</code> and <code>bitcast</code> instructions across basic blocks.</p>\n<hr>\n<p>So that's a basic description of the problem! How best to fix this, though, depends. This was talked briefly about at today's Cranelift meeting but some ways that this could be tackled are:</p>\n<ul>\n<li>Technically there's no need for <code>cranelift-wasm</code> to generate the <code>block1</code> block in the first place. This is likely done for convenience of translation, but it may be possible to make translation \"fancier\" and not eagerly allocate a basic block for the <code>return</code> instruction.</li>\n<li>Today Cranelift does not have any sort of jump-threading/branch-folding pass. Abstractly <code>block1</code> has one predecessor which has a <code>jump</code> instruction, so there's no need for <code>block1</code> to exist and the <code>block0</code> and <code>block1</code> blocks could be fused. This optimization pass could happen before egraphs, for example. Note that this optimization does already happen to a degree during lowering due to <code>MachBuffer</code> optimizations.</li>\n<li>Perhaps even more fancifully the load sinking could be souped up to work in this case. Given the complications this is not likely to be a viable solution.</li>\n</ul>\n<p>At a basic level this I think is an issue worth fixing, but at a higher level I think that this issue showcases the lack of jump-threading in Cranelift and the need for it as egraphs are moving around instructions. Hence the title of this issue and the predicted way to fix it, which would be a jump-threading pass of sorts in Cranelift.</p>\n</blockquote>",
        "id": 347198768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680711869
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>At a high level this is a pretty simple issue where this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory 1)\n  (func (param i32) (result v128)\n    local.get 0\n    v128.load32_splat\n  )\n)\n</code></pre></div>\n<p>generates this code by default on x86_64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x50</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">       </span><span class=\"mi\">8</span>:       <span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">esi</span>\n<span class=\"w\">       </span><span class=\"n\">a</span>:       <span class=\"mi\">45</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r11d</span>\n<span class=\"w\">       </span><span class=\"n\">f</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">c3</span><span class=\"w\">          </span><span class=\"n\">vmovd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm8</span>\n<span class=\"w\">      </span><span class=\"mi\">14</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0x0</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm8</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">a</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">d</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">e</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>Naively this instruction lowering pattern matches to the cranelift-wasm lowering of the <code>v128.load32_splat</code> instruction, is to generate a load (the instruction at <code>0xa</code>) followed by a splat (the instructions at <code>0xf</code> and <code>0x14</code>). With AVX, however, this instruction should lower to a single <code>vbroadcastss</code> instruction. This is where this issue gets odd. If egraphs are disabled, then everything works ok:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_wasm_function_0</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>:       <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">1</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>:       <span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">ca</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9d</span>\n<span class=\"w\">       </span><span class=\"mi\">7</span>:       <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x50</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r10</span>\n<span class=\"w\">       </span><span class=\"n\">b</span>:       <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"mi\">82</span><span class=\"w\"> </span><span class=\"mi\">79</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">vbroadcastss</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">12</span>:       <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">      </span><span class=\"mi\">15</span>:       <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">      </span><span class=\"mi\">16</span>:       <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>So there's an issue here where egraphs are transforming the code into something that can't be pattern-matched by instruction selection. According to logging, when egraphs are enabled, this is the input CLIF into lowering (after egraphs):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">                                    </span><span class=\"n\">v3</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v9</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v9</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I believe that the issue here is that the <code>splat</code> has moved across basic blocks. This means that the load sinking can't fire. The input function to egraphs, however, was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"o\">@</span><span class=\"mi\">0020</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">                                    </span><span class=\"n\">v3</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v9</span>\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">0024</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>where it can clearly be seen that egraphs are moving the <code>splat</code> and <code>bitcast</code> instructions across basic blocks.</p>\n<hr>\n<p>So that's a basic description of the problem! How best to fix this, though, depends. This was talked briefly about at today's Cranelift meeting but some ways that this could be tackled are:</p>\n<ul>\n<li>Technically there's no need for <code>cranelift-wasm</code> to generate the <code>block1</code> block in the first place. This is likely done for convenience of translation, but it may be possible to make translation \"fancier\" and not eagerly allocate a basic block for the <code>return</code> instruction.</li>\n<li>Today Cranelift does not have any sort of jump-threading/branch-folding pass. Abstractly <code>block1</code> has one predecessor which has a <code>jump</code> instruction, so there's no need for <code>block1</code> to exist and the <code>block0</code> and <code>block1</code> blocks could be fused. This optimization pass could happen before egraphs, for example. Note that this optimization does already happen to a degree during lowering due to <code>MachBuffer</code> optimizations.</li>\n<li>Perhaps even more fancifully the load sinking could be souped up to work in this case. Given the complications this is not likely to be a viable solution.</li>\n</ul>\n<p>At a basic level this I think is an issue worth fixing, but at a higher level I think that this issue showcases the lack of jump-threading in Cranelift and the need for it as egraphs are moving around instructions. Hence the title of this issue and the predicted way to fix it, which would be a jump-threading pass of sorts in Cranelift.</p>\n</blockquote>",
        "id": 347198769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680711869
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154#issuecomment-1774937653\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>Is this still relevant with #6818 landed?</p>\n</blockquote>",
        "id": 398059345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698058539
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154#issuecomment-1775340671\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>Unfortunately, yes. The reproductions are now:</p>\n<ul>\n<li>Uses <code>vbroadcastss</code>: <code>wasmtime compile foo.wat --target x86_64 -Ccranelift-has-avx -O opt-level=0 &amp;&amp; objdump -S foo.cwasm</code></li>\n<li>Does not use <code>vbroadcastss</code>: <code>wasmtime compile foo.wat --target x86_64 -Ccranelift-has-avx  &amp;&amp; objdump -S foo.cwasm</code></li>\n</ul>\n</blockquote>",
        "id": 398098623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698071563
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154#issuecomment-1775610007\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>@jameysharp and I talked about this briefly this morning, and with a fresh look, we think that an explicit jump-threading opt that runs in the mid-end (probably before e-graphs because it exposes additional opportunities) is the simplest approach. #6818's discussion was more about whether we could remove the backend's branch opts, which include jump-threading but at a lower level, and the conclusion was that we shouldn't; but this doesn't preclude us from also doing this at the IR level (both give us different things).</p>\n<p>It's probably a relatively small pass (50-100 lines); I'll see if I can get to this at some point soon!</p>\n</blockquote>",
        "id": 398123801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698079847
    },
    {
        "content": "<p>dimitris-aspetakis <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154#issuecomment-2334157945\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>I can't help but note here my feeling from trying to implement mid-end instruction scheduling in #6260, that instruction scheduling should be more integrated with the register allocation and lowering stages. I believe the heuristics we use for register spilling might benefit from some sort of integration with the register allocator specifically.</p>\n<p>In that spirit, I tend to support the first suggestion from @alexcrichton, where (if I understood correctly), elaborating instructions back to the layout is delayed. I mention our work in #6260 also because it could probably provide a solution to the issues discussed here and in #8787, with special cases in the scheduling pass.</p>\n<p>I understand that my comments are a bit too abstract — what I mostly seek is feedback before I dive deeper with possible implementation details.</p>\n<p>As a side-note: would it make sense for pattern-matching fusing optimizations from the instruction lowering stage to work on an AST-like representation directly generated from e-graphs? It sounds more expensive, but it also seems like it could catch more of such optimizations.</p>\n</blockquote>",
        "id": 468199641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725632040
    },
    {
        "content": "<p>dimitris-aspetakis edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154#issuecomment-2334157945\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>I can't help but note here my feeling from trying to implement mid-end instruction scheduling in #6260, that instruction scheduling should be more integrated with the register allocation and lowering stages. I believe the heuristics we use for register spilling might benefit from some sort of integration with the register allocator specifically.</p>\n<p>In that spirit, I tend to support the first suggestion from @alexcrichton, where (if I understood correctly), elaborating instructions back to the layout is delayed. I mention our work in #6260 also because it could probably provide a solution to the issues discussed here and in #8787, with special cases in the scheduling pass.</p>\n<p>I understand that my comments are a bit too abstract — what I mostly seek is feedback (more like a _vibe-check_) before I dive deeper with possible implementation details.</p>\n<p>As a side-note: would it make sense for pattern-matching fusing optimizations from the instruction lowering stage to work on an AST-like representation directly generated from e-graphs? It sounds more expensive, but it also seems like it could catch more of such optimizations.</p>\n</blockquote>",
        "id": 468200632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725632341
    },
    {
        "content": "<p>dimitris-aspetakis edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154#issuecomment-2334157945\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>I can't help but note here my feeling from trying to implement mid-end instruction scheduling in #6260, that instruction scheduling should be more integrated with the register allocation and lowering stages. I believe the heuristics we use for register spilling might benefit from some sort of integration with the register allocator specifically.</p>\n<p>In that spirit, I tend to support the first suggestion from @alexcrichton, where (if I understood correctly), elaborating instructions back to the layout is delayed. I mention our work in #6260 also because it could probably provide a solution to the issues discussed here and in #8787, with special cases in the scheduling pass.</p>\n<p>I understand that my comments are a bit too abstract — what I mostly seek is feedback (more like a vibe-check) before I dive deeper with possible implementation details.</p>\n<p>As a side-note: would it make sense for pattern-matching fusing optimizations from the instruction lowering stage to work on an AST-like representation directly generated from e-graphs? It sounds more expensive, but it also seems like it could catch more of such optimizations.</p>\n</blockquote>",
        "id": 468200672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725632354
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154#issuecomment-2334372426\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">issue #6154</a>:</p>\n<blockquote>\n<p>@dimitris-aspetakis I think you're talking about two different things here:</p>\n<p>I think that if we could integrate lowering more directly with the sea-of-nodes aegraph representation, that would probably uncover some additional opportunity -- the most direct one being that lowering rules could act as a sort of natural cost function that replaces the ad-hoc one in aegraph extraction. That's probably quite a difficult thing to do (open design/research questions, maybe 6 months or so of work) but would be interesting to see the results of.</p>\n<p>Integrating <em>regalloc</em> with instruction selection and/or scheduling (basically, altering the code we produce based on regalloc signals) is I think far more difficult however. There is at least one <a href=\"https://www.cs.cmu.edu/~dkoes/research/dkoes_thesis.pdf\">PhD thesis</a> (David Koes, CMU, 2009) I'm aware of on the topic. It's a combinatorial constraint problem, everything affects everything else, and it's basically asking for a redesign of the entire compiler backend. I'm not saying it isn't possible but the scope is likely multiple years and there's no guarantee we'll come up with something that lands at a new interesting point in the design space in terms of runtime and compile time. Please do feel free to play with this more and propose designs and experiment with it (I'd recommend starting with some canonical examples that \"don't work well\" currently), just be aware of the difficulty.</p>\n</blockquote>",
        "id": 468226632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725638514
    }
]