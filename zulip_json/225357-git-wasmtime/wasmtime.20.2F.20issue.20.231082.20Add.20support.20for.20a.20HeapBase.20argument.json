[
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1082\">issue #1082</a>:</p>\n<blockquote>\n<p>This is the continuation of the closed PR <a href=\"https://github.com/bytecodealliance/cranelift/issues/624\">bytecodealliance/cranelift#624</a>.</p>\n<p>Spidermonkey uses a pinned register to contain the HeapBase on x64. It is supposed to be callee preserved, so we need a way to keep it alive (by passing it as an argument and returning it).</p>\n<p>The simplest (and less efficient) way to implement it would be to allow forbidding registers by the Cranelift compiler, so Spidermonkey can preserve the semantics of keeping its HeapBase register untouched in Cranelift.</p>\n<p>An alternative would be to have a Value holding the heap base, and reloading it before returning. Register allocation would take care of spilling it if needed. For the Spidermonkey case it's a bit unfortunate, because the function call stack frame contains a pointer to TLS state where we can reload the HeapBase register at will.</p>\n<p>The best support would be to allow load/stores Cranelift instructions to have support for a heap base, so this optimization can be valuable to other implementations as well. I think we discussed this with @sunfishcode and there was yak shaving involved to make this work (related to the number of operands a given instruction can have? I am not sure to remember!).</p>\n</blockquote>",
        "id": 281225953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651701772
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1082\">issue #1082</a>:</p>\n<blockquote>\n<p>This is the continuation of the closed PR <a href=\"https://github.com/bytecodealliance/cranelift/issues/624\">bytecodealliance/cranelift#624</a>.</p>\n<p>Spidermonkey uses a pinned register to contain the HeapBase on x64. It is supposed to be callee preserved, so we need a way to keep it alive (by passing it as an argument and returning it).</p>\n<p>The simplest (and less efficient) way to implement it would be to allow forbidding registers by the Cranelift compiler, so Spidermonkey can preserve the semantics of keeping its HeapBase register untouched in Cranelift.</p>\n<p>An alternative would be to have a Value holding the heap base, and reloading it before returning. Register allocation would take care of spilling it if needed. For the Spidermonkey case it's a bit unfortunate, because the function call stack frame contains a pointer to TLS state where we can reload the HeapBase register at will.</p>\n<p>The best support would be to allow load/stores Cranelift instructions to have support for a heap base, so this optimization can be valuable to other implementations as well. I think we discussed this with @sunfishcode and there was yak shaving involved to make this work (related to the number of operands a given instruction can have? I am not sure to remember!).</p>\n</blockquote>",
        "id": 281225962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651701776
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1082#issuecomment-2184162923\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1082\">issue #1082</a>:</p>\n<blockquote>\n<p>Is this still relevant?</p>\n</blockquote>",
        "id": 446313625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719084349
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1082\">issue #1082</a>:</p>\n<blockquote>\n<p>This is the continuation of the closed PR <a href=\"https://github.com/bytecodealliance/cranelift/issues/624\">bytecodealliance/cranelift#624</a>.</p>\n<p>Spidermonkey uses a pinned register to contain the HeapBase on x64. It is supposed to be callee preserved, so we need a way to keep it alive (by passing it as an argument and returning it).</p>\n<p>The simplest (and less efficient) way to implement it would be to allow forbidding registers by the Cranelift compiler, so Spidermonkey can preserve the semantics of keeping its HeapBase register untouched in Cranelift.</p>\n<p>An alternative would be to have a Value holding the heap base, and reloading it before returning. Register allocation would take care of spilling it if needed. For the Spidermonkey case it's a bit unfortunate, because the function call stack frame contains a pointer to TLS state where we can reload the HeapBase register at will.</p>\n<p>The best support would be to allow load/stores Cranelift instructions to have support for a heap base, so this optimization can be valuable to other implementations as well. I think we discussed this with @sunfishcode and there was yak shaving involved to make this work (related to the number of operands a given instruction can have? I am not sure to remember!).</p>\n</blockquote>",
        "id": 446341377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719097923
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1082#issuecomment-2184236739\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1082\">issue #1082</a>:</p>\n<blockquote>\n<p>I think we're unlikely to do something like this today due to multi-memory support (and expectation of significant use of it when components are common) and also regular accesses to other fields in <code>vmctx</code> as well, making it necessary to keep that around anyway. Will go ahead and close.</p>\n</blockquote>",
        "id": 446341380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719097924
    }
]