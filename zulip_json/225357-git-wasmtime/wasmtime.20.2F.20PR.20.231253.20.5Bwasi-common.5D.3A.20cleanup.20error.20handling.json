[
    {
        "content": "<p>kubkon opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1253\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1253\">PR #1253</a> from <code>error-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds on #1243.</strong></p>\n<p><code>WasiCtxBuilderError</code> is the <code>wasi-common</code> client-facing error type which is exclusively thrown when building a new <code>WasiCtx</code> instance. As such, building such an instance should not require the client to understand different WASI errno values as was assumed until now.</p>\n<p>This commit is a first step at streamlining error handling in <code>wasi-common</code> and makes way for the <code>wiggle</code> crate.</p>\n<p>When adding the <code>WasiCtxBuilderError</code>, I've had to do two things of notable importance:</p>\n<ol>\n<li>I've removed a couple of <code>ok_or</code> calls in <code>WasiCtxBuilder::build</code> and replaced them with <code>unwrap</code>s, following the same pattern in different builder methods above. This is fine since we _always_ operate on non-empty <code>Option</code>s in <code>WasiCtxBuilder</code> thus <code>unwrap</code>ing will never fail. On the other hand, this might be a good opportunity to rethink the structure of our builder, and how we good remove the said <code>Option</code>s especially since we always populate them with empty containers to begin with. I understand this is to make chaining of builder methods easier which take and return <code>&amp;mut self</code> and the same applies to <code>WasiCtxBuilder::build(&amp;mut self)</code> method, but perhaps it would more cleanly signal the intentions if we simply moved <code>WasiCtxBuilder</code> instance around. Food for thought!</li>\n<li>Methods specific to determining rights of passed around <code>std::fs::File</code> objects when populating <code>WasiCtx</code> <code>FdEntry</code> entities now return <code>io::Error</code> directly so that we can reuse them in <code>WasiCtxBuilder</code> methods (returning <code>WasiCtxBuilderError</code> error type), and in syscalls (returning WASI errno).</li>\n</ol>\n<h3>ToDo:</h3>\n<ul>\n<li>[x] introduce <code>WasiCtxBuilderError</code></li>\n<li>[ ] return <code>WasiError</code> directly in syscalls</li>\n<li>[ ] hence remove <code>error::Error</code> type</li>\n<li>[ ] fix <code>wig</code></li>\n</ul>\n</blockquote>",
        "id": 189964577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583574219
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" target=\"_blank\" title=\"https://github.com/alexcrichton\">alexcrichton</a>, <a href=\"https://github.com/pchickey\" target=\"_blank\" title=\"https://github.com/pchickey\">pchickey</a>, and <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1253\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1253\">PR #1253</a>.</p>",
        "id": 189964578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583574219
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" target=\"_blank\" title=\"https://github.com/alexcrichton\">alexcrichton</a>, <a href=\"https://github.com/pchickey\" target=\"_blank\" title=\"https://github.com/pchickey\">pchickey</a>, and <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1253\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1253\">PR #1253</a>.</p>",
        "id": 189964579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583574219
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" target=\"_blank\" title=\"https://github.com/alexcrichton\">alexcrichton</a>, <a href=\"https://github.com/pchickey\" target=\"_blank\" title=\"https://github.com/pchickey\">pchickey</a>, and <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1253\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1253\">PR #1253</a>.</p>",
        "id": 189964580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583574219
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1253\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1253\">PR #1253</a> from <code>error-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds on #1243.</strong></p>\n<p><code>WasiCtxBuilderError</code> is the <code>wasi-common</code> client-facing error type which is exclusively thrown when building a new <code>WasiCtx</code> instance. As such, building such an instance should not require the client to understand different WASI errno values as was assumed until now.</p>\n<p>This commit is a first step at streamlining error handling in <code>wasi-common</code> and makes way for the <code>wiggle</code> crate.</p>\n<p>When adding the <code>WasiCtxBuilderError</code>, I've had to do two things of notable importance:</p>\n<ol>\n<li>I've removed a couple of <code>ok_or</code> calls in <code>WasiCtxBuilder::build</code> and replaced them with <code>unwrap</code>s, following the same pattern in different builder methods above. This is fine since we _always_ operate on non-empty <code>Option</code>s in <code>WasiCtxBuilder</code> thus <code>unwrap</code>ing will never fail. On the other hand, this might be a good opportunity to rethink the structure of our builder, and how we good remove the said <code>Option</code>s especially since we always populate them with empty containers to begin with. I understand this is to make chaining of builder methods easier which take and return <code>&amp;mut self</code> and the same applies to <code>WasiCtxBuilder::build(&amp;mut self)</code> method, but perhaps it would more cleanly signal the intentions if we simply moved <code>WasiCtxBuilder</code> instance around. Food for thought!</li>\n<li>Methods specific to determining rights of passed around <code>std::fs::File</code> objects when populating <code>WasiCtx</code> <code>FdEntry</code> entities now return <code>io::Error</code> directly so that we can reuse them in <code>WasiCtxBuilder</code> methods (returning <code>WasiCtxBuilderError</code> error type), and in syscalls (returning WASI errno).</li>\n</ol>\n<h3>ToDo:</h3>\n<ul>\n<li>[x] introduce <code>WasiCtxBuilderError</code></li>\n<li>[ ] return <code>WasiError</code> directly in syscalls</li>\n<li>[ ] hence remove <code>error::Error</code> type</li>\n<li>[ ] fix <code>wig</code></li>\n</ul>\n</blockquote>",
        "id": 189984700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583612561
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1253\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1253\">PR #1253</a> from <code>error-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds on #1243.</strong></p>\n<p><code>WasiCtxBuilderError</code> is the <code>wasi-common</code> client-facing error type which is exclusively thrown when building a new <code>WasiCtx</code> instance. As such, building such an instance should not require the client to understand different WASI errno values as was assumed until now.</p>\n<p>This commit is a first step at streamlining error handling in <code>wasi-common</code> and makes way for the <code>wiggle</code> crate.</p>\n<p>When adding the <code>WasiCtxBuilderError</code>, I've had to do two things of notable importance:</p>\n<ol>\n<li>I've removed a couple of <code>ok_or</code> calls in <code>WasiCtxBuilder::build</code> and replaced them with <code>unwrap</code>s, following the same pattern in different builder methods above. This is fine since we _always_ operate on non-empty <code>Option</code>s in <code>WasiCtxBuilder</code> thus <code>unwrap</code>ing will never fail. On the other hand, this might be a good opportunity to rethink the structure of our builder, and how we good remove the said <code>Option</code>s especially since we always populate them with empty containers to begin with. I understand this is to make chaining of builder methods easier which take and return <code>&amp;mut self</code> and the same applies to <code>WasiCtxBuilder::build(&amp;mut self)</code> method, but perhaps it would more cleanly signal the intentions if we simply moved <code>WasiCtxBuilder</code> instance around. Food for thought!</li>\n<li>Methods specific to determining rights of passed around <code>std::fs::File</code> objects when populating <code>WasiCtx</code> <code>FdEntry</code> entities now return <code>io::Error</code> directly so that we can reuse them in <code>WasiCtxBuilder</code> methods (returning <code>WasiCtxBuilderError</code> error type), and in syscalls (returning WASI errno).</li>\n</ol>\n<h3>ToDo:</h3>\n<ul>\n<li>[x] introduce <code>WasiCtxBuilderError</code></li>\n<li>[ ] return <code>WasiError</code> directly in syscalls</li>\n<li>[x] hence remove <code>error::Error</code> type</li>\n<li>[ ] fix <code>wig</code></li>\n</ul>\n</blockquote>",
        "id": 189984707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583612578
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1253\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1253\">PR #1253</a> from <code>error-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds on #1243.</strong></p>\n<p><code>WasiCtxBuilderError</code> is the <code>wasi-common</code> client-facing error type which is exclusively thrown when building a new <code>WasiCtx</code> instance. As such, building such an instance should not require the client to understand different WASI errno values as was assumed until now.</p>\n<p>This commit is a first step at streamlining error handling in <code>wasi-common</code> and makes way for the <code>wiggle</code> crate.</p>\n<p>When adding the <code>WasiCtxBuilderError</code>, I've had to do two things of notable importance:</p>\n<ol>\n<li>I've removed a couple of <code>ok_or</code> calls in <code>WasiCtxBuilder::build</code> and replaced them with <code>unwrap</code>s, following the same pattern in different builder methods above. This is fine since we _always_ operate on non-empty <code>Option</code>s in <code>WasiCtxBuilder</code> thus <code>unwrap</code>ing will never fail. On the other hand, this might be a good opportunity to rethink the structure of our builder, and how we good remove the said <code>Option</code>s especially since we always populate them with empty containers to begin with. I understand this is to make chaining of builder methods easier which take and return <code>&amp;mut self</code> and the same applies to <code>WasiCtxBuilder::build(&amp;mut self)</code> method, but perhaps it would more cleanly signal the intentions if we simply moved <code>WasiCtxBuilder</code> instance around. Food for thought!</li>\n<li>Methods specific to determining rights of passed around <code>std::fs::File</code> objects when populating <code>WasiCtx</code> <code>FdEntry</code> entities now return <code>io::Error</code> directly so that we can reuse them in <code>WasiCtxBuilder</code> methods (returning <code>WasiCtxBuilderError</code> error type), and in syscalls (returning WASI errno).</li>\n</ol>\n<h3>ToDo:</h3>\n<ul>\n<li>[x] introduce <code>WasiCtxBuilderError</code></li>\n<li>[x] return <code>WasiError</code> directly in syscalls</li>\n<li>[x] hence remove <code>error::Error</code> type</li>\n<li>[ ] fix <code>wig</code></li>\n</ul>\n</blockquote>",
        "id": 189984708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583612580
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1253\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1253\">PR #1253</a> from <code>error-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds on #1243.</strong></p>\n<p><code>WasiCtxBuilderError</code> is the <code>wasi-common</code> client-facing error type which is exclusively thrown when building a new <code>WasiCtx</code> instance. As such, building such an instance should not require the client to understand different WASI errno values as was assumed until now.</p>\n<p>This commit is a first step at streamlining error handling in <code>wasi-common</code> and makes way for the <code>wiggle</code> crate.</p>\n<p>When adding the <code>WasiCtxBuilderError</code>, I've had to do two things of notable importance:</p>\n<ol>\n<li>I've removed a couple of <code>ok_or</code> calls in <code>WasiCtxBuilder::build</code> and replaced them with <code>unwrap</code>s, following the same pattern in different builder methods above. This is fine since we _always_ operate on non-empty <code>Option</code>s in <code>WasiCtxBuilder</code> thus <code>unwrap</code>ing will never fail. On the other hand, this might be a good opportunity to rethink the structure of our builder, and how we good remove the said <code>Option</code>s especially since we always populate them with empty containers to begin with. I understand this is to make chaining of builder methods easier which take and return <code>&amp;mut self</code> and the same applies to <code>WasiCtxBuilder::build(&amp;mut self)</code> method, but perhaps it would more cleanly signal the intentions if we simply moved <code>WasiCtxBuilder</code> instance around. Food for thought!</li>\n<li>Methods specific to determining rights of passed around <code>std::fs::File</code> objects when populating <code>WasiCtx</code> <code>FdEntry</code> entities now return <code>io::Error</code> directly so that we can reuse them in <code>WasiCtxBuilder</code> methods (returning <code>WasiCtxBuilderError</code> error type), and in syscalls (returning WASI errno).</li>\n</ol>\n<h3>ToDo:</h3>\n<ul>\n<li>[x] introduce <code>WasiCtxBuilderError</code></li>\n<li>[x] return <code>WasiError</code> directly in syscalls</li>\n<li>[x] hence remove <code>error::Error</code> type</li>\n<li>[x] fix <code>wig</code></li>\n</ul>\n</blockquote>",
        "id": 189984710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583612581
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1253\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1253\">PR #1253</a> from <code>error-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p><code>WasiCtxBuilderError</code> is the <code>wasi-common</code> client-facing error type which is exclusively thrown when building a new <code>WasiCtx</code> instance. As such, building such an instance should not require the client to understand different WASI errno values as was assumed until now.</p>\n<p>This commit is a first step at streamlining error handling in <code>wasi-common</code> and makes way for the <code>wiggle</code> crate.</p>\n<p>When adding the <code>WasiCtxBuilderError</code>, I've had to do two things of notable importance:</p>\n<ol>\n<li>I've removed a couple of <code>ok_or</code> calls in <code>WasiCtxBuilder::build</code> and replaced them with <code>unwrap</code>s, following the same pattern in different builder methods above. This is fine since we _always_ operate on non-empty <code>Option</code>s in <code>WasiCtxBuilder</code> thus <code>unwrap</code>ing will never fail. On the other hand, this might be a good opportunity to rethink the structure of our builder, and how we good remove the said <code>Option</code>s especially since we always populate them with empty containers to begin with. I understand this is to make chaining of builder methods easier which take and return <code>&amp;mut self</code> and the same applies to <code>WasiCtxBuilder::build(&amp;mut self)</code> method, but perhaps it would more cleanly signal the intentions if we simply moved <code>WasiCtxBuilder</code> instance around. Food for thought!</li>\n<li>Methods specific to determining rights of passed around <code>std::fs::File</code> objects when populating <code>WasiCtx</code> <code>FdEntry</code> entities now return <code>io::Error</code> directly so that we can reuse them in <code>WasiCtxBuilder</code> methods (returning <code>WasiCtxBuilderError</code> error type), and in syscalls (returning WASI errno).</li>\n</ol>\n<p>With <code>WasiCtxBuilderError</code> in place, we now can return a pure <code>WasiError</code> in all syscalls-related functions. This means we can completely remove <code>error::Error</code> type, and now, <code>io::Error</code> and<br>\nrelated are automatically converted to their corresponding WASI errno value encapsulated as <code>WasiError</code>. IMHO this makes tracking errors in syscalls a lot cleaner and simpler.</p>\n<p>While here, it also made sense to me to move <code>WasiError</code> to <code>wasi</code> module which will align itself well with the upcoming changes introduced by <code>wiggle</code>. To different standard <code>Result</code> from WASI specific, I've created a helper alias <code>WasiResult</code> also residing in <code>wasi</code> module.</p>\n<h3>Prereqs:</h3>\n<p>OK, while technically we only depend on #1243 since we're rebased on it, it'd be best if we landed #1255 before as well. So:</p>\n<ul>\n<li>[ ] #1243 landed</li>\n<li>[ ] #1255 landed</li>\n</ul>\n<h3>ToDo:</h3>\n<ul>\n<li>[x] introduce <code>WasiCtxBuilderError</code></li>\n<li>[x] return <code>WasiError</code> directly in syscalls</li>\n<li>[x] hence remove <code>error::Error</code> type</li>\n<li>[x] fix <code>wig</code></li>\n</ul>\n</blockquote>",
        "id": 189984849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583612798
    }
]