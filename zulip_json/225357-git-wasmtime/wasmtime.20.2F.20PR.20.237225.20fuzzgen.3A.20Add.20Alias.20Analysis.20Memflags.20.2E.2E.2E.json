[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a> from <code>afonso360:fuzzgen-alias-analysis</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a follow up to #7215 and @jameysharp's comments on yesterdays cranelift meeting. @jameysharp suggested that we could add heaps to clif to start testing our alias analysis pass.</p>\n<p>But having thought about it, there is nothing special about the \"Heap\" flag on <code>MemFlags</code>. It is only used by our alias analysis pass to optimize some accesses. The same happens with the other flags (\"Table\" and \"VmCtx\"). Additionally we already have a way to partition memory in the fuzzer, we call it stack slots. </p>\n<p>This PR tags each stack slot with a different Alias Analysis category (Although region might be a better name). Once we have that we just have to ensure that all accesses are correctly tagged, and we should be able to test all 4 categories.</p>\n<p>I'm opening this as a draft since I still want to get some fuzzing on this. I suspect that if there is a bug to be found here, It's going to take a while to get those conditions. </p>\n</blockquote>",
        "id": 396273129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697111886
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a follow up to #7215 and @jameysharp's comments on yesterdays cranelift meeting. @jameysharp suggested that we could add heaps to clif to start testing our alias analysis pass.</p>\n<p>But having thought about it, there is nothing special about the \"Heap\" flag on <code>MemFlags</code>. It is only used by our alias analysis pass to optimize some accesses. The same happens with the other flags (\"Table\" and \"VmCtx\"). Additionally we already have a way to partition memory in the fuzzer, we call it stack slots. Additionally we already enforce that memory accesses can't cross stack slots, so we also don't run into the risk of doing a partial update on a different region.</p>\n<p>This PR tags each stack slot with a different Alias Analysis category (Although region might be a better name). Once we have that we just have to ensure that all accesses are correctly tagged, and we should be able to test all 4 categories.</p>\n<p>I'm opening this as a draft since I still want to get some fuzzing on this. I suspect that if there is a bug to be found here, It's going to take a while to get those conditions. </p>\n</blockquote>",
        "id": 396273303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697111957
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a follow up to #7215 and @jameysharp's comments on yesterdays cranelift meeting. @jameysharp suggested that we could add heaps to clif to start testing our alias analysis pass.</p>\n<p>But having thought about it, there is nothing special about the \"Heap\" flag on <code>MemFlags</code>. It is only used by our alias analysis pass to optimize some accesses. The same happens with the other flags (\"Table\" and \"VmCtx\"). Additionally we already have a way to partition memory in the fuzzer, we call it stack slots. Additionally we already enforce that memory accesses can't cross stack slots, so we also don't run into the risk of doing a partial store/load on a different region.</p>\n<p>This PR tags each stack slot with a different Alias Analysis category (Although region might be a better name). Once we have that we just have to ensure that all accesses are correctly tagged, and we should be able to test all 4 categories.</p>\n<p>I'm opening this as a draft since I still want to get some fuzzing on this. I suspect that if there is a bug to be found here, It's going to take a while to get those conditions. </p>\n</blockquote>",
        "id": 396273341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697111970
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a follow up to #7215 and @jameysharp's comments on yesterdays cranelift meeting. @jameysharp suggested that we could add heaps to clif to start testing our alias analysis pass.</p>\n<p>But having thought about it, there is nothing special about the \"Heap\" flag on <code>MemFlags</code>. It is only used by our alias analysis pass to optimize some accesses. The same happens with the other flags (\"Table\" and \"VmCtx\"). Additionally we already have a way to partition memory in the fuzzer, we call it stack slots. And we already enforce that memory accesses can't cross stack slots, so we also don't run into the risk of doing a partial store/load on a different region.</p>\n<p>This PR tags each stack slot with a different Alias Analysis category (Although region might be a better name). Once we have that we just have to ensure that all accesses are correctly tagged, and we should be able to test all 4 categories.</p>\n<p>I'm opening this as a draft since I still want to get some fuzzing on this. I suspect that if there is a bug to be found here, It's going to take a while to get those conditions. </p>\n</blockquote>",
        "id": 396273743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697112099
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a>.</p>",
        "id": 396276058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697112927
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a> as ready for review.</p>",
        "id": 396380073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697152549
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a>.</p>",
        "id": 396380076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697152550
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a>.</p>",
        "id": 396380077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697152550
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225#pullrequestreview-1676989549\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 396546550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697218107
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225#pullrequestreview-1676989549\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 396546551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697218107
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225#discussion_r1358578192\">PR review comment</a>:</p>\n<blockquote>\n<p>Are stack slots sorted by size? Could we document that in a comment on the field definition?</p>\n</blockquote>",
        "id": 396546552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697218108
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225#discussion_r1358582316\">PR review comment</a>:</p>\n<blockquote>\n<p>Okay, I see the sorting done here. Yeah, would be good to document this invariant at the field so that it is easier for other folks extending or reading this stuff to figure it out.</p>\n</blockquote>",
        "id": 396546554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697218108
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a>.</p>",
        "id": 396760495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697381581
    },
    {
        "content": "<p>afonso360 has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a>.</p>",
        "id": 396760621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697381671
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7225\">PR #7225</a>.</p>",
        "id": 396765669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697385500
    }
]