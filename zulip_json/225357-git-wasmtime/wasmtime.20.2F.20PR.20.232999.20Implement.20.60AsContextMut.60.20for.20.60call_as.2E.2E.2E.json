[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2999\">PR #2999</a> from <code>impl-future</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit updates the <code>Func::call_async</code> and <code>TypedFunc::call_async</code><br>\nfunctions to return futures that implement the <code>AsContextMut</code> trait.<br>\nOriginally brought up as part of #2986 it was pointed out that once you<br>\ncreate a future from an async function in <code>wasmtime</code> you lose access to<br>\nthe <code>StoreContetMut</code> that was passed in. While by design this is<br>\nsomewhat unfortunate if you want to otherwise get access to it while the<br>\nfuture is not actually running.</p>\n<p>This unfortunately requires changing the function signatures to no<br>\nlonger use <code>async</code>. While not necessarily the end of the world it does<br>\nmean that the documentation might be a bit less readable. The larger<br>\nimpact, however, is that the implementation of the future needs to be<br>\nsignificantly different. The input <code>store</code> is now threaded through<br>\nby-value which requires a few more generics in a few more places which<br>\nwill end up monomorphizing more code to the user as well.</p>\n<p>Overall this wasn't too too bad. The <code>call_async</code> function bottom out in<br>\nonly a single future (one previous <code>.await</code>) where code is running on a<br>\nfiber. That code was already using a manually defined and implemented<br>\nfuture, so it wasn't moving heaven-and-earth to get that working.</p>\n<p>The significantly more difficult part, which this PR does not implement,<br>\nwas to change <code>Instance::new</code>. For now the <code>new_async</code> and<br>\n<code>instantiate_async</code> methods all continue to be <code>async</code> functions which<br>\nreturn a bland future that does not give access to the underlying<br>\n<code>StoreContetMut</code> closed over in the future. The reason for this is that<br>\nthe implementation for those functions was <em>significantly</em> more<br>\ncomplicated and would require a great deal of <code>unsafe</code> due to<br>\nself-borrows of <code>Pin</code> types (hidden for us today through the usage of<br>\n<code>async</code> in Rust).</p>\n<p>Overall I don't think this PR is in a great state, but I wanted to put<br>\nthis out there. I'm not super happy about the inconsistency of some<br>\nfutures implementing <code>AsContextMut</code> and others not implementing it. I<br>\ndon't think there's a feasible route to implementing <code>AsContextMut</code> from<br>\nthe futures returned by instantiation, due to how complicated the<br>\ninternal logic is for instantiation. It's certainly possible that we<br>\n<em>could</em> implement <code>AsContextMut</code> and have manual trait impls, but I'm<br>\nnot certain that the tradeoff is worth it.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 243183295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624033941
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2999\">PR #2999</a> from <code>impl-future</code> to <code>main</code>.</p>",
        "id": 243428053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624302267
    },
    {
        "content": "<p>ArtBlnd submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2999#pullrequestreview-1129291675\">PR review</a>.</p>",
        "id": 302189521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664858728
    },
    {
        "content": "<p>ArtBlnd created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2999#discussion_r986428960\">PR review comment</a>:</p>\n<blockquote>\n<p>I know this is old PR but just want to ask that did you used <code>UnsafeCell + ptr</code> because of self-reference?</p>\n</blockquote>",
        "id": 302189522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664858728
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2999#pullrequestreview-1130208341\">PR review</a>.</p>",
        "id": 302290152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664898092
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2999#discussion_r987051901\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe this was done for interior mutability and general \"I don't know what I'm doing so please compiler stop trying to optimize things under my feet\", it's probably not the best abstraction here.</p>\n</blockquote>",
        "id": 302290153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664898092
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2999\">PR #2999</a>.</p>",
        "id": 302290225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664898113
    }
]