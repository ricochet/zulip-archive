[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5644#issuecomment-1407173006\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5644\">issue #5644</a>:</p>\n<blockquote>\n<p>A couple of thoughts for future work, maybe:</p>\n<p>If <code>build_search_branches</code> did the subtraction of <code>first_index</code> instead of doing it in <code>build_jump_table</code>, the <code>icmp_imm_u128</code> checks there could always be tests against 0. For switch cases &gt;= 2^64 I think that would reduce the number of CLIF instructions we generate, which isn't super important. More interestingly, I think we might be able to generate fewer machine instructions on some targets that way, although I'm not sure if we need better lowering rules or anything to fully take advantage.</p>\n<p>We might generate better code by merging contiguous case ranges that have small gaps between them. We can insert branches to the \"default\" block into a combined jump-table with a code-size cost proportional to the size of the gap, which may be smaller than the size of the instructions needed to check which range to evaluate. So there's a potential code-size advantage, and as long as at least one of the ranges was going to generate a jump-table anyway, I think there's always an advantage in terms of number of instructions/branches executed.</p>\n</blockquote>",
        "id": 324175377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674860725
    }
]