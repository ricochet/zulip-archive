[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277\">PR #9277</a>.</p>",
        "id": 471314758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726681328
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277\">PR #9277</a>.</p>",
        "id": 471314759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726681328
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277\">PR #9277</a> from <code>fitzgen:refactor-store-trait</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This dates back from the <code>wasmtime</code> vs <code>wasmtime-runtime</code> crate split. Now that those crates merged, we can simplify some bits and remove unnecessary abstractions and indirections.</p>\n</blockquote>",
        "id": 471314760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726681329
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277\">PR #9277</a>.</p>",
        "id": 471315122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726681454
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277#pullrequestreview-2313373693\">PR review</a>.</p>",
        "id": 471315650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726681660
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277#discussion_r1765471444\">PR review comment</a>:</p>\n<blockquote>\n<p>Note: This can't use the <code>DerefMut</code> impl, and must instead explicitly call <code>store_opaque_mut()</code>, because mutable borrows are invariant over type parameters.</p>\n</blockquote>",
        "id": 471315651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726681660
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277\">PR #9277</a>.</p>",
        "id": 471315975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726681778
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277#discussion_r1765471444\">PR review comment</a>.</p>",
        "id": 471319058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726682786
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277#pullrequestreview-2313546960\">PR review</a>.</p>",
        "id": 471329600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726686599
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277#discussion_r1765570128\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure I understand this, can you expand on this a bit? Is this something where we're accidentally handing out <code>'static</code>? Or something is acidentally required to be <code>'static</code> when it shouldn't be? Should the deref impls become <code>impl Deref for dyn (Store + '_)</code> or something like that?</p>\n</blockquote>",
        "id": 471329602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726686599
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277#pullrequestreview-2313775869\">PR review</a>.</p>",
        "id": 471346180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726692657
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277#discussion_r1765706534\">PR review comment</a>:</p>\n<blockquote>\n<p>Here is the error, fwiw:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">lifetime</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">622</span><span class=\"p\">:</span><span class=\"mi\">13</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">554</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">VMStore</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">622</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">unwrap_gc_store_mut</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">^^^^^</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">requirement</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">mutable</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">VMStore</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">mutable</span><span class=\"w\"> </span><span class=\"n\">references</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">invariant</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"n\">their</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">parameter</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//doc.rust-lang.org/nomicon/subtyping.html&gt; for more information about variance</span>\n</code></pre></div>\n<p>My understanding is:</p>\n<ul>\n<li>We have a <code>store: &amp;mut dyn VMStore</code></li>\n<li>We are implicitly reborrowing it, in an attempt to get a shorter lifetime, by using the <code>DerefMut</code> impl at this call site</li>\n<li>However, because mutable references are invariant over their type parameter, we don't actually end up with a shorter lifetime, but the same lifetime</li>\n<li>And then for reasons I don't fully understand, that ends up forcing a <code>'static</code> constraint. I think because that is the only way that we could unify those two lifetimes? Not sure.</li>\n</ul>\n<p>FWIW, making the reborrow explicit with <code>(&amp;mut *store).unwrap_gc_store_mut()</code> results in the same error message, but pointing at the explicit reborrow instead of the method invocation.</p>\n<p>I don't know if adding a <code>T: 'static</code> on the impl would solve the problem or not. But also we don't require that for <code>Store::new</code> so I don't think it is really an option.</p>\n<p>Quite possible I am misunderstanding something here, but at the end of the day: without the <code>.store_opaque_mut()</code> we get a compiler error, with it we don't.</p>\n</blockquote>",
        "id": 471346181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726692657
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9277\">PR #9277</a>.</p>",
        "id": 471348669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726693645
    }
]