[
    {
        "content": "<p>akirilov-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3310\">issue #3310</a>:</p>\n<blockquote>\n<p>Currently (as of commit 164835ecf5adadc811937b85dc51088f0ee5457f), after code generation is finished and before execution from the newly generated code starts on AArch64, both <code>cranelift-jit</code> and <code>wasmtime-jit</code> do not perform any actions other than making the code buffers readable and executable instead of readable and writable. In particular, they skip all the actions prescribed by <a href=\"https://developer.arm.com/documentation/ddi0487/latest\">the Arm Architecture Reference Manual</a> in sections B2.2.5 and B.2.4.4.</p>\n<p>This issue has already been <a href=\"#narrow/stream/217126-wasmtime/topic/Code.20generation.20and.20CPU.20cache.20maintenance\">discussed</a> on Zulip, and potentially would affect other architectures with weak memory models (and non-coherent data and instruction caches in particular).</p>\n</blockquote>",
        "id": 252347926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631038446
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3310\">issue #3310</a>:</p>\n<blockquote>\n<p>Currently (as of commit 164835ecf5adadc811937b85dc51088f0ee5457f), after code generation is finished and before execution from the newly generated code starts on AArch64, both <code>cranelift-jit</code> and <code>wasmtime-jit</code> do not perform any actions other than making the code buffers readable and executable instead of readable and writable. In particular, they skip all the actions prescribed by <a href=\"https://developer.arm.com/documentation/ddi0487/latest\">the Arm Architecture Reference Manual</a> in sections B2.2.5 and B.2.4.4. On Linux from C code, for example, it is sufficient to perform a call to the <code>__builtin___clear_cache()</code> function on the code buffers and, if we are in a multi-threaded environment (which is the case for Wasmtime), another call to <code>membarrier(MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE, 0)</code>.</p>\n<p>This issue has already been <a href=\"#narrow/stream/217126-wasmtime/topic/Code.20generation.20and.20CPU.20cache.20maintenance\">discussed</a> on Zulip, and potentially would affect other architectures with weak memory models (and non-coherent data and instruction caches in particular).</p>\n</blockquote>",
        "id": 252350943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631039673
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3310\">issue #3310</a>:</p>\n<blockquote>\n<p>Currently (as of commit 164835ecf5adadc811937b85dc51088f0ee5457f), after code generation is finished and before execution from the newly generated code starts on AArch64, both <code>cranelift-jit</code> and <code>wasmtime-jit</code> do not perform any actions other than making the code buffers readable and executable instead of readable and writable. In particular, they skip all the actions prescribed by <a href=\"https://developer.arm.com/documentation/ddi0487/latest\">the Arm Architecture Reference Manual</a> in sections B2.2.5 and B.2.4.4. On Linux from C code, for example, it is sufficient to perform a call to the <code>__builtin___clear_cache()</code> function on the code buffers and, if we are in a multi-threaded environment (which is the case for Wasmtime), another call to <code>membarrier(MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE, 0)</code>.</p>\n<p>This issue has already been <a href=\"#narrow/stream/217126-wasmtime/topic/Code.20generation.20and.20CPU.20cache.20maintenance\">discussed</a> on Zulip, and potentially would affect other architectures with weak memory models (and non-coherent data and instruction caches in particular).</p>\n</blockquote>",
        "id": 252814698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631292046
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3310\">issue #3310</a>:</p>\n<blockquote>\n<p>Currently (as of commit 164835ecf5adadc811937b85dc51088f0ee5457f), after code generation is finished and before execution from the newly generated code starts on AArch64, both <code>cranelift-jit</code> and <code>wasmtime-jit</code> do not perform any actions other than making the code buffers readable and executable instead of readable and writable. In particular, they skip all the actions prescribed by <a href=\"https://developer.arm.com/documentation/ddi0487/latest\">the Arm Architecture Reference Manual</a> in sections B2.2.5 and B.2.4.4. On Linux from C code, for example, it is sufficient to perform a call to the <code>__builtin___clear_cache()</code> function on the code buffers and, if we are in a multi-threaded environment (which is the case for Wasmtime), another call to <code>membarrier(MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE, 0)</code>.</p>\n<p>This issue has already been <a href=\"#narrow/stream/217126-wasmtime/topic/Code.20generation.20and.20CPU.20cache.20maintenance\">discussed</a> on Zulip, and potentially would affect other architectures with weak memory models (and non-coherent data and instruction caches in particular).</p>\n</blockquote>",
        "id": 252814699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631292046
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3310#issuecomment-922116021\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3310\">issue #3310</a>:</p>\n<blockquote>\n<p>With #3355, Wasmtime now uses <code>rsix</code> for some of its system calls. I added a <code>membarrier</code> API to <code>rsix</code> 0.23.2, so this can now be implemented using the <a href=\"https://docs.rs/rsix/0.23.2/rsix/process/fn.membarrier.html\"><code>rsix::process::membarrier</code></a> function.</p>\n</blockquote>",
        "id": 253816480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631917913
    },
    {
        "content": "<p>sunfishcode edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3310#issuecomment-922116021\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3310\">issue #3310</a>:</p>\n<blockquote>\n<p>With #3355, Wasmtime now uses <code>rsix</code> for some of its system calls. I added a <code>membarrier</code> API to <code>rsix</code> 0.23.2, so this can now be implemented using the <a href=\"https://docs.rs/rsix/0.23.3/rsix/process/fn.membarrier.html\"><code>rsix::process::membarrier</code></a> function.</p>\n</blockquote>",
        "id": 253817736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631918886
    }
]