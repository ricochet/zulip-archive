[
    {
        "content": "<p>akirilov-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893\">Issue #1893</a>:</p>\n<blockquote>\n<p>The AArch64 CI test that runs using QEMU fails consistently for PR #1871 and the reasons are not clear - here's the relevant excerpt from the log:</p>\n<div class=\"codehilite\"><pre><span></span><code>2020-06-13T16:29:49.3730503Z test wast::Cranelift::spec::simd::simd_i32x4_cmp ... ok\n2020-06-13T16:29:57.9345959Z test wast::Cranelift::spec::simd::simd_i8x16_sat_arith ... ignored\n2020-06-13T16:30:08.5287111Z test wast::Cranelift::spec::simd::simd_lane ... ignored\n2020-06-13T16:30:15.8261749Z test wast::Cranelift::spec::simd::simd_load ... ignored\n2020-06-13T16:49:23.7624987Z error: test failed, to rerun pass &#39;-p wasmtime-cli --test all&#39;\n2020-06-13T16:49:23.7648421Z\n2020-06-13T16:49:23.7651248Z Caused by:\n2020-06-13T16:49:23.7664954Z   process didn&#39;t exit successfully: `/home/runner/qemu/bin/qemu-aarch64 -L /usr/aarch64-linux-gnu /home/runner/work/wasmtime/wasmtime/target/aarch64-unknown-linux-gnu/release/deps/all-0af4aa3748ec4770` (signal: 9, SIGKILL: kill)\n2020-06-13T16:49:24.0613948Z ##[error]Process completed with exit code 101.\n2020-06-13T16:49:25.4620071Z Post job cleanup.\n</code></pre></div>\n\n\n<p>I have reproduced the test environment locally using the following commands:</p>\n<div class=\"codehilite\"><pre><span></span><code>rm -rf qemu-5.0.0 ${HOME}/qemu\ncurl https://download.qemu.org/qemu-5.0.0.tar.xz | tar xJf -\ncd qemu-5.0.0\n./configure --target-list=aarch64-linux-user --prefix=${HOME}/qemu --disable-tools --disable-slirp --disable-fdt --disable-capstone --disable-docs\nmake -j$(nproc) install\ncd ..\nRUSTFLAGS=&quot;-D warnings&quot; \\\n  CARGO_INCREMENTAL=0 \\\n  CARGO_PROFILE_DEV_DEBUG=1 \\\n  CARGO_PROFILE_TEST_DEBUG=1 \\\n  CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu \\\n  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER=&quot;${HOME}/qemu/bin/qemu-aarch64 -L /usr/aarch64-linux-gnu&quot; \\\n  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc \\\n  RUST_BACKTRACE=1 \\\n  cargo test \\\n  --features test-programs/test_programs \\\n  --release \\\n  --all \\\n  --exclude lightbeam \\\n  --exclude peepmatic \\\n  --exclude peepmatic-automata \\\n  --exclude peepmatic-fuzzing \\\n  --exclude peepmatic-macro \\\n  --exclude peepmatic-runtime \\\n  --exclude peepmatic-test \\\n  --exclude wasmtime-fuzz\n</code></pre></div>\n\n\n<p>However, I don't experience any test failures. In addition to that, I don't see any issues either when I run the test natively in an AArch64 environment. In that case the list of commands can be simplified to:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo test --release --all --exclude lightbeam\n</code></pre></div>\n\n\n<p>Note that the <code>--features test-programs/test_programs</code> parameter is omitted because it requires <code>rust-lld</code>, which appears not to be a part of the native AArch64 toolchain.</p>\n<p>This issue has also been discussed in PR #1802.</p>\n<p>cc @cfallin</p>\n</blockquote>",
        "id": 201190408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592422818
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893#issuecomment-645592431\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893\">Issue #1893</a>:</p>\n<blockquote>\n<p>I suspect a qemu issue, as @alexcrichton had said earlier; it's too bad that upgrading to 5.0.0 didn't fix it.</p>\n<p>I wonder if we could transition to running CI jobs on our native aarch64 machine, now that we have one -- @alexcrichton, thoughts (I think GitHub has a native-CI-runner feature)?</p>\n</blockquote>",
        "id": 201192620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592424020
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893#issuecomment-645632568\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893\">Issue #1893</a>:</p>\n<blockquote>\n<p>Locally I ran the test suite in qemu 5.0.0 and I saw the peak memory usage jump by ~1GB after applying <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1871\">https://github.com/bytecodealliance/wasmtime/pull/1871</a>. This is the peak memory usage of QEMU itself when running the test suite. Already 10GB is pretty huge, for comparison it takes 200MB on native to run the <code>all-*</code> test suite.</p>\n<p>I ran a small test on Github Actions CI and found that a program could allocate a 10687086592-byte (9.95 GiB) vector but would fail to allocate 10791944192 bytes (10.05 GiB). Similarly in local testing (according to <code>/usr/bin/time</code>) the before <code>all-*</code> test suite in qemu took 10129944k bytes (9.6 GiB) and went to 11286384k (10.7 GiB) after enabling this test. My test program was killed by SIGKILL on Github Actions as well.</p>\n<p>Given that this doesn't feel like a bug in QEMU other than \"maybe too much memory is used?\" and it seems like we're just hitting OOM on CI. It appears that if we cross the 10GiB threshold for allocated memory we get OOM-killed. That would explain why it's not an issue locally either because we presumably have lots more ram and/or less aggressive OOM killers.</p>\n<p>In terms of fixing this, that may be a bit harder. Some options include:</p>\n<ul>\n<li>\n<p>Move to native AArch64 CI. This is unfortunately pretty tricky to do, and boils down to <a href=\"https://help.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#self-hosted-runner-security-with-public-repositories\">GitHub recommends we don't do this</a>. There are possible workarounds we could apply (rust-lang/rust is pioneering this, we'll likely just copy them). This will take some time though and rust-lang/rust is still in the process of working out all the various issues.</p>\n</li>\n<li>\n<p>Split apart our test suite. I suspect the issue is that QEMU isn't freeing something it should, so we could fewer tests inside of a single QEMU process. Unfortunately I don't know of a great way to do this automatically. Ironically we actually unified our test suite for <em>other</em> CI-related issues. Our binaries are quite large so we can't have dozens of test binaries since that'll blow our disk limit.</p>\n</li>\n<li>\n<p>There's experimental support on nightly where each test is run in a forked process, which we may be able to try out. I'm not holding my breath for this though.</p>\n</li>\n<li>\n<p>Split just the execution of the test suite by having a \"driver program\" which executes the test suite with <code>--list</code> and then manually splits that list into shards and runs the test executable multiple times with <code>--exact</code> options and a list of test names.</p>\n</li>\n</ul>\n<p>None of these AFAIK are easy-ish things to do, unfortunately... I suppose there's the option of writing fewer tests :)</p>\n</blockquote>",
        "id": 201202449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592429002
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893#issuecomment-645645646\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1893\">Issue #1893</a>:</p>\n<blockquote>\n<p>Hmm. Just now I went down a small rabbit-hole trying to work out if there's a way to reduce the translation cache size for qemu's JIT, in case that's the issue. Unfortunately it seems there's only <code>-accel tb-size=...</code> for system-mode qemu, but not user-mode qemu. (Anyone else know another option?)</p>\n<p>Another option to add to the above list would be \"fix qemu's memory blowup\". Unfortunately that doesn't seem a whole lot easier than the other options, but who knows, maybe it's a quick fix once found.</p>\n<p>@akirilov-arm: for now, while we develop aarch64 SIMD support, I think it's reasonable to keep the SIMD tests specifically disabled in-tree, in the absence of better options. (We should be careful to run tests locally on a native aarch64 machine, of course.) We'll have to find a better solution before declaring SIMD \"done\", though.</p>\n<p>I'll go ahead and rename this issue to track the qemu memory blowup (which is the root problem), if you don't mind. Sorry again about our CI wonkiness!</p>\n</blockquote>",
        "id": 201205652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592430858
    }
]