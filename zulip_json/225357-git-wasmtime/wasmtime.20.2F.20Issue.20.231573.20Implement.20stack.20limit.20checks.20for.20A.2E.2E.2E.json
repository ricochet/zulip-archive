[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-617475679\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-617475679\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 194877032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587514530
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618046004\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618046004\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<p>Thanks for taking a look @cfallin! I definitely have some documentation to shore up no matter what :). </p>\n<p>In any case I wanted to ask some questions about your comments. It sounds like you're thinking we should use vregs (which I presume is a virtual not-yet-allocated register, right?) for this stuff. I think that might be difficult though because prologue generation happens after register allocation. The saving grace, though, is that the registers used here in the prologue are only used during the prologue and never afterwards. Additionally I think that all caller-saved registers are available, not just the spilltmp one (that one just had a somewhat convenient name to pull from).</p>\n<p>Does that make sense? I could also very well be missing something about how to plumb vregs in here.</p>\n<p>I also don't mind writing more documentation about the stack limit support in cranelift. I didn't add documentation in my previous PR (boo) and would be happy to add some here which has notes about how this is implemented for each architecture's backend and how it's running at a unique time where register allocation/legalization aren't available.</p>\n</blockquote>",
        "id": 194992730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587590347
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618082313\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618082313\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<p>So, one clarification: in the new backend, the prologue generation runs <em>before</em> register allocation. So we are free to allocate temp virtual registers (vregs) and use them if we need to. (I guess the old backend design didn't do it this way; I didn't study the reasoning for that in detail, but the current approach made things a lot simpler for us.) Given that, I think it would be best if we added just a little plumbing: alloc a vreg when calling <code>gen_prologue()</code> and pass it in (as a <code>Writable&lt;Reg&gt;</code>). Sorry for the confusion on this point!</p>\n</blockquote>",
        "id": 195001382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587596311
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618082873\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618082873\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<p>(And, as a followup clarification to that, we made sure that the register allocator understands live ranges of both real regs and virtual regs, so it's totally OK to use a vreg and then later in the prologue, refer to a realreg like an argument register; the regalloc considers the real-reg live range when choosing where to allocate the vreg.)</p>\n</blockquote>",
        "id": 195001575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587596425
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618427374\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618427374\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<p>Oh that's news to me! I'm a bit confused though because <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d8920c012578147010d0f973b637f3d2dd01230f/cranelift/codegen/src/machinst/vcode.rs#L359\" title=\"https://github.com/bytecodealliance/wasmtime/blob/d8920c012578147010d0f973b637f3d2dd01230f/cranelift/codegen/src/machinst/vcode.rs#L359\">where <code>gen_prologue</code> is called</a> takes a <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d8920c012578147010d0f973b637f3d2dd01230f/cranelift/codegen/src/machinst/vcode.rs#L337\" title=\"https://github.com/bytecodealliance/wasmtime/blob/d8920c012578147010d0f973b637f3d2dd01230f/cranelift/codegen/src/machinst/vcode.rs#L337\"><code>RegAllocResult</code></a> which sounds like register allocation has already happened?</p>\n</blockquote>",
        "id": 195068754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587652146
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618992794\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-618992794\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<p>I believe <code>gen_prologue</code> is indeed run after regalloc.</p>\n</blockquote>",
        "id": 195183683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587733095
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-619075436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-619075436\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<p>@cfallin hm so given that register allocation runs before prologue/epilogue generation, do you think it'd be ok to shore up the documentation around these and say how they can use any caller-saved register and how we're doing manual register allocation because we generate the prologue so late?</p>\n</blockquote>",
        "id": 195203490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587741572
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-619144993\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-619144993\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<p>Argh, OK, I was deeply confused yesterday; my apologies. (Many balls in the air now that we're tying-up-loose-ends...) You're correct, prologue generation happens after regalloc. I think that I was thinking about the other bits of ABI-generated instruction sequences (argument/retval copies) which use vregs freely.</p>\n<p>Indeed, the prologue can use only real regs. So I think the best way forward is to use the spilltmp reg as you have, and then carefully document why it's safe -- between the def (computing the GV) and use (the check itself) no spills could have happened.</p>\n</blockquote>",
        "id": 195219822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587749065
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-619203306\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-619203306\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<p>Ok I've tried to add some comments and such, as well as rebasing and uncommenting a few tests which now pass. Mind taking another looking @cfallin?</p>\n</blockquote>",
        "id": 195234936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587756929
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-619214214\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573#issuecomment-619214214\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1573\">Issue #1573</a>:</p>\n<blockquote>\n<p>No worries at all! Thanks again for the review :)</p>\n</blockquote>",
        "id": 195237855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587758524
    }
]