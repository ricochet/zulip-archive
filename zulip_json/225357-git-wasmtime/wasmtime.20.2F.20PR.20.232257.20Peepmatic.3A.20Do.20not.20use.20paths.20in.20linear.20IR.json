[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257\">PR #2257</a> from <code>peepmatic-no-paths-in-linear-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>Rather than using paths from the root instruction to the instruction we are matching against or checking if it is constant or whatever, use temporary variables. When we successfully match an instruction's opcode, we simultaneously define these temporaries for the instruction's operands. This is similar to how open-coding these matches in Rust would use <code>match</code> expressions with pattern matching to bind the operands to variables at the same time as switching on the opcode.</p>\n<p>This shaves off about 1.8% of instructions retired when Peepmatic is enabled.</p>\n<p>@abrown would you be comfortable reviewing this? If not, no worries, I can find another reviewer. Thanks!</p>\n</blockquote>",
        "id": 212093221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601653974
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257\">PR #2257</a>.</p>",
        "id": 212093222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601653974
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257\">PR #2257</a> from <code>peepmatic-no-paths-in-linear-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>Rather than using paths from the root instruction to the instruction we are matching against or checking if it is constant or whatever, use temporary variables. When we successfully match an instruction's opcode, we simultaneously define these temporaries for the instruction's operands. This is similar to how open-coding these matches in Rust would use <code>match</code> expressions with pattern matching to bind the operands to variables at the same time as switching on the opcode.</p>\n<p>This shaves off about 1.8% of instructions retired when Peepmatic is enabled.</p>\n<p>@abrown would you be comfortable reviewing this? If not, no worries, I can find another reviewer. Thanks!</p>\n</blockquote>",
        "id": 212093590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601654145
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257#pullrequestreview-504106482\">PR Review</a>.</p>",
        "id": 212592048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602091720
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257#pullrequestreview-504106482\">PR Review</a>.</p>",
        "id": 212592051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602091721
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257#discussion_r501186045\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Remove?</p>\n</blockquote>",
        "id": 212592052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602091721
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257#discussion_r501184590\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I mean, I think I understand why this is necessary but it is a shame not to be able to use <a href=\"https://docs.rs/cranelift-codegen/0.66.0/cranelift_codegen/ir/instructions/enum.InstructionData.html#method.opcode\">opcode</a> and <a href=\"https://docs.rs/cranelift-codegen/0.66.0/cranelift_codegen/ir/instructions/enum.InstructionData.html#method.arguments\">arguments</a> off of <code>InstructionData</code> to make things a bit less verbose.</p>\n</blockquote>",
        "id": 212592053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602091721
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257#pullrequestreview-507699200\">PR Review</a>.</p>",
        "id": 213193849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602612181
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257#discussion_r504153517\">PR Review Comment</a>:</p>\n<blockquote>\n<p>There are two reasons it is the way it currently is:</p>\n<ol>\n<li>\n<p>As written, we avoid matching on the instruction data twice. I've found that sometimes LLVM can collapse these back-to-back matches into a single match, but not always and it's kind of fragile.</p>\n</li>\n<li>\n<p>The branching instructions supported by peepmatic ignore the block arguments, so we can't use <code>arguments</code> directly, we would still need to special case branches.</p>\n</li>\n</ol>\n</blockquote>",
        "id": 213193850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602612181
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257#pullrequestreview-507699295\">PR Review</a>.</p>",
        "id": 213193868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602612189
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257#discussion_r504153600\">PR Review Comment</a>:</p>\n<blockquote>\n<p>good eye! thanks</p>\n</blockquote>",
        "id": 213193869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602612189
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257\">PR #2257</a> from <code>peepmatic-no-paths-in-linear-ir</code> to <code>main</code>:</p>\n<blockquote>\n<p>Rather than using paths from the root instruction to the instruction we are matching against or checking if it is constant or whatever, use temporary variables. When we successfully match an instruction's opcode, we simultaneously define these temporaries for the instruction's operands. This is similar to how open-coding these matches in Rust would use <code>match</code> expressions with pattern matching to bind the operands to variables at the same time as switching on the opcode.</p>\n<p>This shaves off about 1.8% of instructions retired when Peepmatic is enabled.</p>\n<p>@abrown would you be comfortable reviewing this? If not, no worries, I can find another reviewer. Thanks!</p>\n</blockquote>",
        "id": 213194048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602612266
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2257\">PR #2257</a>.</p>",
        "id": 213204413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602616708
    }
]