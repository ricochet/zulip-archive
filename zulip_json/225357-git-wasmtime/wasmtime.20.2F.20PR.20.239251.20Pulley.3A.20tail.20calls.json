[
    {
        "content": "<p>Kmeakin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a> from <code>Kmeakin:km/pulley/tail-calls</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Sorry for the delay, I was on holiday.<br>\nThe proof of concept works, but codegen for <code>become</code> is not actually implemented yet and so triggers an ICE:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">internal</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">9</span><span class=\"n\">b72238eb813e9d06e9e9d270168512fbffd7ee7</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_codegen_ssa</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mir</span><span class=\"o\">/</span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">1372</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">TailCall</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">terminator</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">yet</span><span class=\"w\"> </span><span class=\"n\">supported</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc_codegen_ssa</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">pulley</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">interp</span><span class=\"o\">/</span><span class=\"n\">interp_loop</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">85</span><span class=\"p\">:</span><span class=\"mi\">25</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">85</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                           </span><span class=\"kr\">become</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">next_handler</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"p\">)(</span><span class=\"cp\">$state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$pc</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                           </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n</code></pre></div>\n<p>So for now <code>return</code> is used instead of <code>become</code> and we must hope that LLVM will be smart enough to recongize the tail call</p>\n</blockquote>",
        "id": 470391580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726437632
    },
    {
        "content": "<p><strong>Kmeakin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 470391581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726437633
    },
    {
        "content": "<p><strong>Kmeakin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 470391582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726437633
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 470392576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726438503
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2351878811\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"pulley\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: pulley</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 470409100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726448683
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2353271072\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<p>Thanks for this! I might jump in with a small recommendation on overall structure / CI here -- with a Cargo feature controlling this it unfortunately doesn't play well with our \"test with all features enabled\" in CI well because it enables the feature when a stable compiler is in use. To fix this I might recommend <code>#[cfg(pulley_tail_call)]</code> perhaps? That would require setting <code>RUSTFLAGS</code> in CI but that could be added to the \"Monolith Checks\" perhaps as a single <code>cargo check</code> of pulley on nightly? That would also enable this to land despite codegen support not being in upstream rust-lang/rust yet.</p>\n</blockquote>",
        "id": 470650149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726501220
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2353660724\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<p>Thanks! I'll take a look either later today or tomorrow.</p>\n<p>Mildly surprised about <code>become</code> not working anymore, as it was working when I did a few experiments around the time of the RFC. I guess rustc is doing a new ssa thing in the midend and hasn't extended support to <code>become</code> yet?</p>\n</blockquote>",
        "id": 470708325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726512379
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2353691497\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<p>FWIW, it looks like <a href=\"https://github.com/rust-lang/rust/issues/127520\">https://github.com/rust-lang/rust/issues/127520</a> was filed about this regression, but closed as WONTFIX, so I also cross-posted the bug to the <code>explicit_tail_calls</code> tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/112788#issuecomment-2353680606\">https://github.com/rust-lang/rust/issues/112788#issuecomment-2353680606</a></p>\n</blockquote>",
        "id": 470712351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726513239
    },
    {
        "content": "<p>WaffleLapkin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2353798379\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<p>@fitzgen I'm not sure how it could have worked for you -- <code>become</code> was never fully implemented. (maybe you tried to use it when it was just an alternative syntax for <code>return</code>?)</p>\n<p>either way the reason why <a href=\"https://github.com/rust-lang/rust/issues/127520\">https://github.com/rust-lang/rust/issues/127520</a> was WONTFIXED is that tails calls are simply not implemented yet, they are an incomplete feature. The error even says as much:</p>\n<blockquote>\n<p><code>TailCall</code> terminator is not yet supported by <code>rustc_codegen_ssa</code></p>\n</blockquote>\n<p>there is no reason to bring any more awareness to this issue -- it will be fixed naturally once the implementation is complete.</p>\n</blockquote>",
        "id": 470730118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726516661
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2310293894\">PR review</a>:</p>\n<blockquote>\n<p>Looks great! Really happy with how this shaped up.</p>\n<p>Feel free to split out subcommits if you want, but it isn't necessary. Not sure they will actually land first at this point, since the final commit doesn't have as much feedback. Probably good to do for future PRs tho, just to keep things nice and easy for reviewers <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>Big thing needed to land this is integrating with our CI infrastructure and replacing the cargo feature, as Alex mentioned.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 471064813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763572244\">PR review comment</a>:</p>\n<blockquote>\n<p>Ditto for this second commit: it could also be split out and land sooner.</p>\n<p>Also, can this <code>debug_assert!(!return_addr.is_null())</code>?</p>\n</blockquote>",
        "id": 471064815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763569363\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice! This first commit could be split out into its own PR and probably land sooner than the following bits, if you want.</p>\n</blockquote>",
        "id": 471064816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763705053\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe some docs for the module, even if we are skipping them for the individual functions?</p>\n</blockquote>",
        "id": 471064817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763582239\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW, the size of <code>ControlFlow&lt;Done&gt;</code> is going to be bigger than the size of <code>Continuation</code> was, because there will be two <code>enum</code> discriminant tags instead of one. But that is fine, and we can measure performance down the line and see if this actually matters. I suspect it might matter if it crosses an ABI threshold where returning these values goes from being in a register to going through a return pointer to a caller-supplied, stack-allocated space. But, as I said, we can always measure later.</p>\n</blockquote>",
        "id": 471064818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763711036\">PR review comment</a>:</p>\n<blockquote>\n<p>Can this take a generic <code>T: BytecodeStream</code> and return a <code>Result&lt;(...), T::Error&gt;</code>? No need to foist the unsafety upon everyone. We can make <code>unwrap_uninhabited</code> a method on an exported extension trait, if we want to make it generally available to users of the decoder.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UnwrapUninhabited</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">unwrap_uninhabited</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">T</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">UnwrapUninhabited</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Uninhabited</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">..</span><span class=\"p\">.</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"cp\">$snake_name</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"cp\">$($($field_ty</span><span class=\"p\">,)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 471064819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763576631\">PR review comment</a>:</p>\n<blockquote>\n<p>For caller ergonomics, this could still return a <code>ControlFlow::Continue(())</code>. This way, we wouldn't need to update every call site to also return that value.</p>\n</blockquote>",
        "id": 471064820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763728664\">PR review comment</a>:</p>\n<blockquote>\n<p>As Alex mentioned, to better integrate with our CI infrastructure (which passes <code>--all-features</code> to tests), let's replace all <code>feature = \"tail_calls\"</code> in <code>cfg(...)</code>s with <code>cfg(pulley_tail_calls)</code> and <code>cfg(not(pulley_tail_calls))</code>.</p>\n<p>Then we can turn it on and off via the <code>RUSTFLAGS</code> env var, for example</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">RUSTFLAGS</span><span class=\"o\">=</span><span class=\"s\">\"--cfg pulley_tail_calls\"</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">features</span>\n</code></pre></div>\n<p>And then by default CI will test the regular-calls version, but we can also <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e38ffa197cf951ed513896fc63bb8e5c7b23135a/.github/workflows/main.yml#L465-L515\">add a step to the \"Monolith Checks\" CI job</a> that sets the above <code>RUSTFLAGS</code> to check that the tail-calls version compiles.</p>\n</blockquote>",
        "id": 471064821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763723258\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice! I think this worked out really well, especially how each opcode handler doesn't need to explicitly decode immediates/operands, and everything Just Works</p>\n</blockquote>",
        "id": 471064822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763732948\">PR review comment</a>:</p>\n<blockquote>\n<p>And then we can actually use <code>become</code> here. I've tested locally and <code>cargo check</code> works with <code>become</code>, and avoids the ICE.</p>\n</blockquote>",
        "id": 471064823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1763734258\">PR review comment</a>:</p>\n<blockquote>\n<p>Although maybe we want another <code>cfg(pulley_become)</code> or something so that if people want to rely on LLVM to optimize calls in tail position into tail calls, then they can?</p>\n</blockquote>",
        "id": 471064824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726599031
    },
    {
        "content": "<p>Kmeakin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2311191366\">PR review</a>.</p>",
        "id": 471109261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726611643
    },
    {
        "content": "<p>Kmeakin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1764090543\">PR review comment</a>:</p>\n<blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4536593481e0f790a4f2d31c969b7e19\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4536593481e0f790a4f2d31c969b7e19</a></p>\n<p><code>ControlFlow&lt;Done, ()&gt;</code> and <code>Continuation</code> are both 1 byte (it seems rustc is smart enough to use the \"unused discriminants\" from <code>Done</code> as niches for <code>ControlFlow</code>).</p>\n<p><code>ControlFlow&lt;Done, OpcodeHandler&gt;</code> is 2 words. The alternative would be to return <code>ControlFlow&lt;Done, ()&gt;</code> and set the next handler via an <code>&amp;mut OpcodeHandler</code> parameter, but I expect that might be harder for LLVM to optimize. In the worst case, returning a large aggregate will be lowered to returning via an out-parameter anyway, so it shouldn't be any worse performance wise</p>\n</blockquote>",
        "id": 471109262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726611644
    },
    {
        "content": "<p>Kmeakin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2311197456\">PR review</a>.</p>",
        "id": 471110016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726611987
    },
    {
        "content": "<p>Kmeakin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1764094313\">PR review comment</a>:</p>\n<blockquote>\n<p>We could also squeeze <code>ControlFlow&lt;Done, OpcodeHandler&gt;</code> into a single word by using the lower 2 bits as the discriminant tag, since function pointers must be word aligned. I think there was a proposal for rustc to do this automatically but it has not yet been implemented.  </p>\n</blockquote>",
        "id": 471110017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726611987
    },
    {
        "content": "<p>Kmeakin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2311208630\">PR review</a>.</p>",
        "id": 471111428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726612640
    },
    {
        "content": "<p>Kmeakin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1764101222\">PR review comment</a>:</p>\n<blockquote>\n<p><code>cargo check</code> works because it doesn't actually generate LLVM/assembly, but if you try <code>cargo build</code> or <code>cargo test</code> it will</p>\n</blockquote>",
        "id": 471111430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726612640
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 471111896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726612877
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2311219852\">PR review</a>.</p>",
        "id": 471112854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726613272
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1764108172\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, that's the point: to be using <code>become</code> and still have <code>cargo check</code> type check the Rust code that we <code>cfg</code> on.</p>\n<p>Not sure if it is actually <em>implemented</em> yet, but that should check that we aren't relying on any <code>Drop</code> implementations running after the tail call (which would preclude it from being an actual tail call instead of a call in tail position).</p>\n</blockquote>",
        "id": 471112855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726613272
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1764108172\">PR review comment</a>.</p>",
        "id": 471112926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726613286
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 471124656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726617213
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 471124951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726617345
    },
    {
        "content": "<p>Kmeakin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2311367263\">PR review</a>.</p>",
        "id": 471125321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726617544
    },
    {
        "content": "<p>Kmeakin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1764226057\">PR review comment</a>:</p>\n<blockquote>\n<p>So run <code>cargo check</code>/<code>cargo clippy</code> with <code>RUSTFLAGS=\"--cfg pulley_tail_calls\"</code>, but not <code>cargo test</code>?</p>\n</blockquote>",
        "id": 471125322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726617544
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 471125799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726617720
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 471126910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726618147
    },
    {
        "content": "<p>Kmeakin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2311375685\">PR review</a>.</p>",
        "id": 471127176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726618285
    },
    {
        "content": "<p>Kmeakin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1764232078\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Also, can this debug_assert!(!return_addr.is_null())?</p>\n</blockquote>\n<p><code>NonNull::new_unchecked</code> already performs the check in debug builds: <a href=\"https://doc.rust-lang.org/1.81.0/src/core/ptr/non_null.rs.html#217\">https://doc.rust-lang.org/1.81.0/src/core/ptr/non_null.rs.html#217</a> </p>\n</blockquote>",
        "id": 471127177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726618285
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 471127723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726618571
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2311397086\">PR review</a>.</p>",
        "id": 471131883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726620165
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1764246521\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah just add a line something like</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\"># Make sure that the tail-calls version of Pulley checks okay.</span>\n<span class=\"w\">    </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">cargo check -p pulley-interpreter</span>\n<span class=\"w\">      </span><span class=\"nt\">env</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nt\">RUSTFLAGS</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"--cfg</span><span class=\"nv\"> </span><span class=\"s\">pulley_tail_calls\"</span>\n</code></pre></div>\n<p>around here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e38ffa197cf951ed513896fc63bb8e5c7b23135a/.github/workflows/main.yml#L499\">https://github.com/bytecodealliance/wasmtime/blob/e38ffa197cf951ed513896fc63bb8e5c7b23135a/.github/workflows/main.yml#L499</a></p>\n</blockquote>",
        "id": 471131885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726620165
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 471136142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726622396
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 471138310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726623474
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 471138691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726623674
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2361858984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<p>Once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9274\">https://github.com/bytecodealliance/wasmtime/pull/9274</a> lands, is this ready to merge as well?</p>\n</blockquote>",
        "id": 471539912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726769389
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2389211809\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<blockquote>\n<p>Once #9274 lands, is this ready to merge as well?</p>\n</blockquote>\n<p>@Kmeakin, now that #9274 landed, is this ready to rebase and land as well, or are there still more things left to do first?</p>\n</blockquote>",
        "id": 474354879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727889767
    },
    {
        "content": "<p>Kmeakin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2394750270\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Once #9274 lands, is this ready to merge as well?</p>\n</blockquote>\n<p>@Kmeakin, now that #9274 landed, is this ready to rebase and land as well, or are there still more things left to do first?</p>\n</blockquote>\n<p>I think it is ready to land, I don't have anything else I want to add to it.</p>\n</blockquote>",
        "id": 474909310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728081125
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 474926594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728089259
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2352674526\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 475365126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728326235
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 475368924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728327214
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2397693119\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<p>I pushed a commit moving the new CI check to the nightly tests CI job, since it requires a nightly rustc.</p>\n<p>But it looks like there are some failures running pulley tests under miri now as well, taking a quick look.</p>\n</blockquote>",
        "id": 475373985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728328495
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 475376491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728329255
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2397718041\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<p>Pushed a fix for the miri tests: <code>Done::Trap</code> needed to have the trapping PC as a payload so that we could pass that trapping PC to <code>self.trap(pc)</code> rather than the first PC passed to <code>run</code>.</p>\n</blockquote>",
        "id": 475376702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728329314
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 475376724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728329319
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>.</p>",
        "id": 475382552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728331089
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#issuecomment-2397792964\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251\">PR #9251</a>:</p>\n<blockquote>\n<p>Thanks again @Kmeakin!</p>\n</blockquote>",
        "id": 475385449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728331643
    },
    {
        "content": "<p>Rudxain submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2362128187\">PR review</a>.</p>",
        "id": 476323286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728631526
    },
    {
        "content": "<p>Rudxain created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1796536201\">PR review comment</a>:</p>\n<blockquote>\n<p>\"the the\" mistake (typo?)</p>\n</blockquote>",
        "id": 476323287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728631526
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2363086068\">PR review</a>.</p>",
        "id": 476412656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728660858
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1797125509\">PR review comment</a>:</p>\n<blockquote>\n<p>@Rudxain good eye! Care to make a PR fixing it?</p>\n</blockquote>",
        "id": 476412658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728660858
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#pullrequestreview-2363097471\">PR review</a>.</p>",
        "id": 476413649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728661200
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9251#discussion_r1797132613\">PR review comment</a>:</p>\n<blockquote>\n<p>Nevermind, I see that you already did -- thanks!</p>\n</blockquote>",
        "id": 476413651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728661200
    }
]