[
    {
        "content": "<p>spacewander opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308\">issue #3308</a>:</p>\n<blockquote>\n<p>Hi, I am studying the API of wasmtime.<br>\nI notice that there are some notes about Store: <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Store.html\">https://docs.wasmtime.dev/api/wasmtime/struct.Store.html</a></p>\n<blockquote>\n<p>A Store is intended to be a short-lived object in a program. No form of GC is implemented at this time so once an instance is created within a Store it will not be deallocated until the Store itself is dropped. </p>\n</blockquote>\n<p>I am curious about what is the scope of the \"GC\", does it cover:</p>\n<ul>\n<li>module-level variables</li>\n<li>memory allocated inside wasmtime and bound to the Store</li>\n<li>variables used in wasm functions</li>\n</ul>\n<p>And is there any documentation about the memory management inside the wasm runtime?</p>\n<p>Thanks for your reply!</p>\n</blockquote>",
        "id": 252267939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631002653
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308#issuecomment-914110298\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308\">issue #3308</a>:</p>\n<blockquote>\n<p>It covers things like instances, memories and tables. Instances contain references to module-level globals. Variables used in wasm functions are stored on the stack and are thus deallocated as soon the respective function returns.</p>\n</blockquote>",
        "id": 252270681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631004153
    },
    {
        "content": "<p>spacewander <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308#issuecomment-915037284\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308\">issue #3308</a>:</p>\n<blockquote>\n<p>Thanks. Are there any docs about the wasmtime's memory management mechanism?</p>\n</blockquote>",
        "id": 252425379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631090376
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308#issuecomment-915265001\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308\">issue #3308</a>:</p>\n<blockquote>\n<p>The only form of memory management in Wasmtime itself is an implementation of reference counting for <code>ExternRef</code> with optimizations in wasm code itself do to less reference counting. Other than that all memory management in Wasmtime is like malloc/free in normal Rust, calling functions may allocation and dropping things deallocates them.</p>\n</blockquote>",
        "id": 252464339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631109574
    },
    {
        "content": "<p>spacewander <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308#issuecomment-915724292\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308\">issue #3308</a>:</p>\n<blockquote>\n<p>I see. Thanks.</p>\n</blockquote>",
        "id": 252564825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631156851
    },
    {
        "content": "<p>spacewander closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3308\">issue #3308</a>:</p>\n<blockquote>\n<p>Hi, I am studying the API of wasmtime.<br>\nI notice that there are some notes about Store: <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Store.html\">https://docs.wasmtime.dev/api/wasmtime/struct.Store.html</a></p>\n<blockquote>\n<p>A Store is intended to be a short-lived object in a program. No form of GC is implemented at this time so once an instance is created within a Store it will not be deallocated until the Store itself is dropped. </p>\n</blockquote>\n<p>I am curious about what is the scope of the \"GC\", does it cover:</p>\n<ul>\n<li>module-level variables</li>\n<li>memory allocated inside wasmtime and bound to the Store</li>\n<li>variables used in wasm functions</li>\n</ul>\n<p>And is there any documentation about the memory management inside the wasm runtime?</p>\n<p>Thanks for your reply!</p>\n</blockquote>",
        "id": 252564826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631156851
    }
]