[
    {
        "content": "<p><a href=\"https://github.com/mmcloughlin\">mmcloughlin</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9537\">Issue #9537</a>.</p>",
        "id": 479973032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730416976
    },
    {
        "content": "<p><a href=\"https://github.com/mmcloughlin\">mmcloughlin</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9537\">Issue #9537</a>.</p>",
        "id": 479973033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730416976
    },
    {
        "content": "<p>mmcloughlin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9537\">issue #9537</a>:</p>\n<blockquote>\n<p>There may be a bug in the lowering of narrow <code>sdiv</code> instructions on AArch64.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">div8</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sdiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">div8</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">128</span>\n</code></pre></div>\n<p>Note: I believe this would affect 16-bit <code>sdiv</code> as well, though I have not tested this case as thoroughly.</p>\n<h3>Steps to Reproduce</h3>\n<p>Run test case in <code>clif-util</code> via the interpreter and JIT on an AArch64 platform.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>interpret<span class=\"w\"> </span>sdiv.clif\n<span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>run<span class=\"w\"> </span>sdiv.clif\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The CLIF execution should trap, via interpreter and JIT.</p>\n<h3>Actual Results</h3>\n<p>In the interpreter, we get <code>Unexpected returned control flow</code> which I confirmed with a small edit is actually a trap:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>interpret<span class=\"w\"> </span>--verbose<span class=\"w\"> </span>sdiv.clif\n<span class=\"go\">thread 'main' panicked at cranelift/src/interpret.rs:129:34:</span>\n<span class=\"go\">Unexpected returned control flow--this is likely a bug.</span>\n<span class=\"go\">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span>\n</code></pre></div>\n<p>JIT passes the test case:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>run<span class=\"w\"> </span>--verbose<span class=\"w\"> </span>sdiv.clif\n<span class=\"go\">sdiv.clif</span>\n<span class=\"go\">1 file</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: recent main branch commit <code>a82bdd833d1787953b866b2c375832dd9b911f1b</code></p>\n<p>Operating system: macOS 15.0.1</p>\n<p>Architecture: AArch64 (Apple M1)</p>\n<h3>Extra Info</h3>\n<h4>Diagnosis</h4>\n<p>I believe the problem lies in the <code>trap_if_div_overflow</code> rule:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/2a7f065335ae2ff48c0b8cc486e20ab83d1a1690/cranelift/codegen/src/isa/aarch64/inst.isle#L3681-L3689\">https://github.com/bytecodealliance/wasmtime/blob/2a7f065335ae2ff48c0b8cc486e20ab83d1a1690/cranelift/codegen/src/isa/aarch64/inst.isle#L3681-L3689</a></p>\n<p>For the 8 and 16 bit case, the value we are checking for is not in fact the minimum 32-bit signed value. Subtracting 1 from -128 as a 32-bit value does not cause overflow, therefore the trap on the <code>Vs</code> condition does not fire.</p>\n<h4>Security</h4>\n<p>Discussed with @cfallin on Zulip who confirmed this is not a security-critical miscompile.<br>\n</p>\n</blockquote>",
        "id": 479973034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730416977
    },
    {
        "content": "<p>mmcloughlin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9537\">issue #9537</a>:</p>\n<blockquote>\n<p>There may be a bug in the lowering of narrow <code>sdiv</code> instructions on AArch64.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">div8</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sdiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">div8</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">128</span>\n</code></pre></div>\n<p>Note: I believe this would affect 16-bit <code>sdiv</code> as well, though I have not tested this case as thoroughly.</p>\n<h3>Steps to Reproduce</h3>\n<p>Run test case in <code>clif-util</code> via the interpreter and JIT on an AArch64 platform.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>interpret<span class=\"w\"> </span>sdiv.clif\n<span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>run<span class=\"w\"> </span>sdiv.clif\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The CLIF execution should trap, via interpreter and JIT.</p>\n<h3>Actual Results</h3>\n<p>In the interpreter, we get <code>Unexpected returned control flow</code> which I confirmed with a small edit is actually a trap:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>interpret<span class=\"w\"> </span>--verbose<span class=\"w\"> </span>sdiv.clif\n<span class=\"go\">thread 'main' panicked at cranelift/src/interpret.rs:129:34:</span>\n<span class=\"go\">Unexpected returned control flow--this is likely a bug.</span>\n<span class=\"go\">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span>\n</code></pre></div>\n<p>JIT passes the test case:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>run<span class=\"w\"> </span>--verbose<span class=\"w\"> </span>sdiv.clif\n<span class=\"go\">sdiv.clif</span>\n<span class=\"go\">1 file</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: recent main branch commit <code>a82bdd833d1787953b866b2c375832dd9b911f1b</code></p>\n<p>Operating system: macOS 15.0.1</p>\n<p>Architecture: AArch64 (Apple M1)</p>\n<h3>Extra Info</h3>\n<h4>Diagnosis</h4>\n<p>I believe the problem lies in the <code>trap_if_div_overflow</code> rule:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/2a7f065335ae2ff48c0b8cc486e20ab83d1a1690/cranelift/codegen/src/isa/aarch64/inst.isle#L3681-L3689\">https://github.com/bytecodealliance/wasmtime/blob/2a7f065335ae2ff48c0b8cc486e20ab83d1a1690/cranelift/codegen/src/isa/aarch64/inst.isle#L3681-L3689</a></p>\n<p>This code is checking for the minimum 32-bit signed value, but this is not correct for the 8/16-bit cases. Subtracting 1 from -128 as a 32-bit value does not cause overflow, therefore the trap on the <code>Vs</code> condition does not fire.</p>\n<h4>Security</h4>\n<p>Discussed with @cfallin on Zulip who confirmed this is not a security-critical miscompile.<br>\n</p>\n</blockquote>",
        "id": 479973563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730417338
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9537\">issue #9537</a>:</p>\n<blockquote>\n<p>There may be a bug in the lowering of narrow <code>sdiv</code> instructions on AArch64.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">div8</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sdiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">div8</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">128</span>\n</code></pre></div>\n<p>Note: I believe this would affect 16-bit <code>sdiv</code> as well, though I have not tested this case as thoroughly.</p>\n<h3>Steps to Reproduce</h3>\n<p>Run test case in <code>clif-util</code> via the interpreter and JIT on an AArch64 platform.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>interpret<span class=\"w\"> </span>sdiv.clif\n<span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>run<span class=\"w\"> </span>sdiv.clif\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The CLIF execution should trap, via interpreter and JIT.</p>\n<h3>Actual Results</h3>\n<p>In the interpreter, we get <code>Unexpected returned control flow</code> which I confirmed with a small edit is actually a trap:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>interpret<span class=\"w\"> </span>--verbose<span class=\"w\"> </span>sdiv.clif\n<span class=\"go\">thread 'main' panicked at cranelift/src/interpret.rs:129:34:</span>\n<span class=\"go\">Unexpected returned control flow--this is likely a bug.</span>\n<span class=\"go\">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span>\n</code></pre></div>\n<p>JIT passes the test case:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>clif-util<span class=\"w\"> </span>run<span class=\"w\"> </span>--verbose<span class=\"w\"> </span>sdiv.clif\n<span class=\"go\">sdiv.clif</span>\n<span class=\"go\">1 file</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: recent main branch commit <code>a82bdd833d1787953b866b2c375832dd9b911f1b</code></p>\n<p>Operating system: macOS 15.0.1</p>\n<p>Architecture: AArch64 (Apple M1)</p>\n<h3>Extra Info</h3>\n<h4>Diagnosis</h4>\n<p>I believe the problem lies in the <code>trap_if_div_overflow</code> rule:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/2a7f065335ae2ff48c0b8cc486e20ab83d1a1690/cranelift/codegen/src/isa/aarch64/inst.isle#L3681-L3689\">https://github.com/bytecodealliance/wasmtime/blob/2a7f065335ae2ff48c0b8cc486e20ab83d1a1690/cranelift/codegen/src/isa/aarch64/inst.isle#L3681-L3689</a></p>\n<p>This code is checking for the minimum 32-bit signed value, but this is not correct for the 8/16-bit cases. Subtracting 1 from -128 as a 32-bit value does not cause overflow, therefore the trap on the <code>Vs</code> condition does not fire.</p>\n<h4>Security</h4>\n<p>Discussed with @cfallin on Zulip who confirmed this is not a security-critical miscompile.<br>\n</p>\n</blockquote>",
        "id": 480097344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730485370
    }
]