[
    {
        "content": "<p>Robbepop opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668\">issue #6668</a>:</p>\n<blockquote>\n<p>As can be seen in the docs (<a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/trait.ResourceLimiter.html\">https://docs.rs/wasmtime/10.0.1/wasmtime/trait.ResourceLimiter.html</a>) the <code>ResourceLimiter</code> provides limits for <code>Instance</code>, <code>Memory</code> and <code>Table</code> instance counts but not for <code>Global</code> and <code>Func</code>.</p>\n<p>This question came up in <a href=\"https://github.com/paritytech/wasmi/pull/737\">https://github.com/paritytech/wasmi/pull/737</a> and we were wondering about the rationals behind this design.</p>\n<p>Clarifications would be very welcome. :)<br>\n</p>\n</blockquote>",
        "id": 370706801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688032250
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668\">issue #6668</a>:</p>\n<blockquote>\n<p>As can be seen in the docs (<a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/trait.ResourceLimiter.html\">https://docs.rs/wasmtime/10.0.1/wasmtime/trait.ResourceLimiter.html</a>) the <code>ResourceLimiter</code> provides limits for <code>Instance</code>, <code>Memory</code> and <code>Table</code> instance counts but not for <code>Global</code> and <code>Func</code>.</p>\n<p>This question came up in <a href=\"https://github.com/paritytech/wasmi/pull/737\">https://github.com/paritytech/wasmi/pull/737</a> and we were wondering about the rationals behind this design.</p>\n<p>Clarifications would be very welcome. :)<br>\n</p>\n</blockquote>",
        "id": 370706842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688032259
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668#issuecomment-1613353730\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668\">issue #6668</a>:</p>\n<blockquote>\n<p>I don't think there's a main principle behind this per se, but I can attempt to retcon it a bit by saying that one difference between memories/tables vs funcs/globals is that the former have runtime lengths associated with them where the latter have a static size which doesn't change. Not to say functions/globals couldn't be limited, however.</p>\n<p>In Wasmtime at least the number of functions/globals factors into the size of a <code>VMContext</code> which is where limits would be placed, but the limit there is somewhat abstract where you'd say, for example, \"instances should get at most 1MB of state\" but what exactly is in that 1MB is up to Wasmtime (but globals/funcs fit in there and factor into that)</p>\n</blockquote>",
        "id": 370820229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688051365
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668#issuecomment-1613498007\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668\">issue #6668</a>:</p>\n<blockquote>\n<p>Thank you a lot for providing me with the rationals behind the design @alexcrichton !</p>\n<p>Given that Wasmtime has a multitude of users compared to <code>wasmi</code> I was wondering why this was not asked before by users. At least for embedded systems were <code>wasmi</code> is used primarily I see a potential for users who want to limit <code>globals</code> and <code>funcs</code> as well. However, at the same time <code>wasmi</code> tries at best effort to stay as close to the Wasmtime API as possible for the benefit of all users only having to learn a single, reasonable API.</p>\n</blockquote>",
        "id": 370847798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688056179
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668#issuecomment-1613498007\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668\">issue #6668</a>:</p>\n<blockquote>\n<p>Thank you a lot for providing me with the rationals behind the design @alexcrichton !</p>\n<p>Given that Wasmtime has a multitude of users compared to <code>wasmi</code> I was wondering why this was not asked before by users. At least for embedded systems were <code>wasmi</code> is used primarily I see a potential for users who want to limit <code>globals</code> and <code>funcs</code> as well. However, at the same time <code>wasmi</code> tries at best effort to stay as close to the Wasmtime API as possible for the benefit of all users only having to learn a single, reasonable API.</p>\n<p>I guess this issue can be closed. If people actually need this they can open another issue with the request.</p>\n</blockquote>",
        "id": 370848045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688056212
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668#issuecomment-1613498007\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668\">issue #6668</a>:</p>\n<blockquote>\n<p>Thank you a lot for providing me with the rationals behind the design @alexcrichton !</p>\n<p>Given that Wasmtime has a multitude of users compared to <code>wasmi</code> I was wondering why this was not asked before by users. At least for embedded systems were <code>wasmi</code> is used primarily I see a potential for users who want to limit <code>globals</code> and <code>funcs</code> as well. However, at the same time <code>wasmi</code> tries its best to stay as close to the Wasmtime API as possible for the benefit of all users only having to learn a single, reasonable API.</p>\n<p>I guess this issue can be closed. If people actually need this they can open another issue with the request.</p>\n</blockquote>",
        "id": 370848353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688056263
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668#issuecomment-1613550280\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668\">issue #6668</a>:</p>\n<blockquote>\n<p>Ok, sounds reasonable!</p>\n</blockquote>",
        "id": 370861285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688058704
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6668\">issue #6668</a>:</p>\n<blockquote>\n<p>As can be seen in the docs (<a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/trait.ResourceLimiter.html\">https://docs.rs/wasmtime/10.0.1/wasmtime/trait.ResourceLimiter.html</a>) the <code>ResourceLimiter</code> provides limits for <code>Instance</code>, <code>Memory</code> and <code>Table</code> instance counts but not for <code>Global</code> and <code>Func</code>.</p>\n<p>This question came up in <a href=\"https://github.com/paritytech/wasmi/pull/737\">https://github.com/paritytech/wasmi/pull/737</a> and we were wondering about the rationals behind this design.</p>\n<p>Clarifications would be very welcome. :)<br>\n</p>\n</blockquote>",
        "id": 370861287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688058705
    }
]