[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5276\">PR #5276</a> from <code>pch/trappable_error</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 310314579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668555920
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5276\">PR #5276</a> from <code>pch/trappable_error</code> to <code>main</code>.</p>",
        "id": 310315077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668556197
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5276\">PR #5276</a> from <code>pch/trappable_error</code> to <code>main</code>.</p>",
        "id": 310320699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668559650
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5276\">PR #5276</a> from <code>pch/trappable_error</code> to <code>main</code>.</p>",
        "id": 310320830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668559750
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5276\">PR #5276</a> from <code>pch/trappable_error</code> to <code>main</code>:</p>\n<blockquote>\n<p>Largely due to pains in wasi-common and experimentation in wit-bindgen, I have added a slightly different error handling strategy to <code>wiggle</code>.</p>\n<p>When the user specifies <code>errno =&gt; trappable Error</code> in the macro's optional <code>errors: {...}</code>argument, wiggle will now generate a type named <code>Error</code> to be used in all positions where a function returned a witx <code>errno</code> in the error position.</p>\n<p>The generated error type is an opaque struct. Internally, it contains either the errno (which wiggle generates as an <code>enum Errno</code>), or an <code>anyhow::Error</code> for trapping execution. These are constructed using either the generated <code>impl From&lt;Errno&gt; for Error</code> impl, or the <code>Error::trap(t: anyhow::Error) -&gt; Self</code> constructor.</p>\n<p>The error can be destructured using <code>Error::downcast(self) -&gt; Result&lt;Errno, anyhow::Error&gt;</code>, inspected using <code>Error::downcast_ref(&amp;self) -&gt; Option&lt;&amp;Errno&gt;</code>, and it can have context added via <code>Error::context(self, s: Into&lt;String&gt;) -&gt; Self</code>. The context is only observable via the Debug and Display impls.</p>\n<p>This design came about because the user defined error type wasn't really serving our needs in <code>wasi-common</code>. There, we had essentially 2 choices:</p>\n<ol>\n<li>the user maintains a <code>thiserror</code> style error enum that contains all of the <code>errno</code> values, plus a <code>Trap(anyhow::Error)</code> variation for trapping execution. They then write <code>From</code> impls for all of the foreign error types that need to be converted into their error enum, e.g. <code>impl From&lt;std::io::Error&gt; for MyErrno</code>. They then implement the (very mechanical) translation to the wiggle generated <code>Errno</code> cases in <code>UserErrorConversion</code>.</li>\n<li>They use <code>anyhow::Error</code>. To implement the translation to <code>Errno</code> or trap, the user downcasts all of the foreign error types they suspect may be thrown in their implementations.</li>\n</ol>\n<p>I used both of these designs in wasi-common, in that chronological order. I found that both had real drawbacks:</p>\n<ol>\n<li>This error enum is repetitive to define and maintain. Additionally, it doesn't provide any way to keep additional context around on an error, which makes debugging harder.</li>\n<li>Suffers from safety problems. Since introducing this design in the 2019 wasi-common rewrite, I (unknowingly) introduced a bug where a <code>cap_rand::Error</code> was thrown in the random methods, but I never tried to downcast to it in <code>UserErrorConversion</code>. The end result is that any error in the cap_rand crate would end up trapping execution of the wasm module, rather than returning it an appropriate errno. I don't think I ever would have discovered this bug if I hadn't attempted a refactor back towards design 1.</li>\n</ol>\n<p>So, my design here basically uses code generation to generate an acceptable implementation of design 1, while providing the <code>.context(\"help figuring out what went wrong\")</code> method available in design 2. I was reluctant to give up the ergonomics of approach 2, but the design of wasi is evolving to give us lots of different concrete errnos in the preview 2 interfaces, so I wanted to give us as much type safety as possible when managing the complexity of the coming evolution in this crate.</p>\n</blockquote>",
        "id": 310323890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668561889
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5276\">PR #5276</a> from <code>pch/trappable_error</code> to <code>main</code>.</p>",
        "id": 310324570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668562367
    },
    {
        "content": "<p><strong>pchickey</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5276\">PR #5276</a> as ready for review.</p>",
        "id": 310325771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668563370
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5276#pullrequestreview-1182972452\">PR review</a>.</p>",
        "id": 310453862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668617676
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5276\">PR #5276</a>.</p>",
        "id": 310453872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668617683
    }
]