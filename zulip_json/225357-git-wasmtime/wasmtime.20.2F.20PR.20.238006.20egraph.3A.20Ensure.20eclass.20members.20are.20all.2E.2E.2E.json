[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a> from <code>jameysharp:egraph-available-block</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>During elaboration, we want the property that it's safe to pick any member of an eclass to implement that eclass. To establish that property, this commit defines a notion of the \"available block\" for every value, and enforces that all values in an eclass have the same available block.</p>\n<p>TODO: this needs more comments, especially documenting the <code>available_block</code> structure and the linear-time filtering loop in <code>optimize_pure_enode</code>. If somebody else wants to write those I would really appreciate it.</p>\n<p>Future work: immediately after <code>optimized_values.push(orig_value)</code>, we should try <code>optimized_values.sort_unstable()</code> and then <code>optimized_values.dedup()</code>. That avoids creating union nodes for duplicate values, which should save a little time downstream in the compiler pipeline, but causes values to get renumbered in some filetests so they need more inspection. It also means we can delete the <code>if optimized_value == orig_value</code> test in the loop afterward. But it's an O(n log n) pass over a potentially large list so we should benchmark the change too.</p>\n<p>cc: @elliottt @cfallin @lpereira</p>\n</blockquote>",
        "id": 423733453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709086087
    },
    {
        "content": "<p>jameysharp edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>:</p>\n<blockquote>\n<p>During elaboration, we want the property that it's safe to pick any member of an eclass to implement that eclass. To establish that property, this commit defines a notion of the \"available block\" for every value, and enforces that all values in an eclass have the same available block.</p>\n<p>Closes #7891 where we devised this plan.</p>\n<p>TODO: this needs more comments, especially documenting the <code>available_block</code> structure and the linear-time filtering loop in <code>optimize_pure_enode</code>. If somebody else wants to write those I would really appreciate it.</p>\n<p>Future work: immediately after <code>optimized_values.push(orig_value)</code>, we should try <code>optimized_values.sort_unstable()</code> and then <code>optimized_values.dedup()</code>. That avoids creating union nodes for duplicate values, which should save a little time downstream in the compiler pipeline, but causes values to get renumbered in some filetests so they need more inspection. It also means we can delete the <code>if optimized_value == orig_value</code> test in the loop afterward. But it's an O(n log n) pass over a potentially large list so we should benchmark the change too.</p>\n<p>cc: @elliottt @cfallin @lpereira</p>\n</blockquote>",
        "id": 423734509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709086976
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>.</p>",
        "id": 423734701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709087146
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1906436622\">PR review</a>.</p>",
        "id": 423832671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709131362
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1506078450\">PR review comment</a>:</p>\n<blockquote>\n<p>Might be worth pre-reserving space here, since IIUC we are going to end up filling this in for every single value.</p>\n</blockquote>",
        "id": 423832672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709131362
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1906436622\">PR review</a>.</p>",
        "id": 423832673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709131362
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1506066467\">PR review comment</a>:</p>\n<blockquote>\n<p>Rather than the indirect pushing and then popping, this could be</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let mut union_value = optimized_values.pop().unwrap_or(orig_value);\n</code></pre></div>\n<p>Then, as a reader, I don't have to wonder if the push is going to trigger a realloc or not (probably not because it is a smallvec and we limit the number of returns from ISLE in ISLE, but I think it is possible if we return the max ISLE returns and then push <code>orig_vlaue</code>?)</p>\n</blockquote>",
        "id": 423832674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709131362
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1906622321\">PR review</a>:</p>\n<blockquote>\n<p>Very nice overall! Just some comment nits below.</p>\n<p>Also, could we have a test case that triggers the trimming behavior, perhaps with our subsume-for-correctness disabled? Actually, a thought on that: we could (with this PR, not before!) add an option <code>disable_egraph_subsume</code> to Cranelift; keep it off by default, but add it to a test we know triggers this auto-subsume; then fuzz with the option; then eventually turn it on and remove our careful subsume cases.</p>\n</blockquote>",
        "id": 423850867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709136232
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1506182673\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add a comment here about the SSA property we're relying on? Something like: \"Note that the def-point of all arguments to an instruction in SSA lie on a line of direct ancestors in the domtree, and so do their available-blocks. This means that either <code>x dom y</code> or <code>y dom x</code>; they cannot be unordered wrt each other.\"</p>\n</blockquote>",
        "id": 423850869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709136232
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1906622321\">PR review</a>:</p>\n<blockquote>\n<p>Very nice overall! Just some comment nits below.</p>\n<p>Also, could we have a test case that triggers the trimming behavior, perhaps with our subsume-for-correctness disabled? Actually, a thought on that: we could (with this PR, not before!) add an option <code>disable_egraph_subsume</code> to Cranelift; keep it off by default, but add it to a test we know triggers this auto-subsume; then fuzz with the option; then eventually turn it on and remove our careful subsume cases.</p>\n</blockquote>",
        "id": 423850870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709136232
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1506200631\">PR review comment</a>:</p>\n<blockquote>\n<p>This loop looks correct to me (very slick in-place compaction!) but could we have a comment describing what it's doing? It took me a little bit, with knowledge of what it's supposed to be doing, to grok it. Perhaps something like: \"Remove any values from <code>optimized_values</code> that do not have the highest possible available block in the domtree.\" at the top, and \"This value's available block is higher; all higher indices we've already scanned have lower blocks and need to be removed, so truncate after this element.\" in the first case, and \"This value's available block is lower, and we want to skip it; remove it from the list and keep going (order does not matter so <code>swap_remove</code> is OK).\" in the second?</p>\n</blockquote>",
        "id": 423850872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709136232
    },
    {
        "content": "<p>lpereira submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1907604559\">PR review</a>.</p>",
        "id": 423917222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709160771
    },
    {
        "content": "<p>lpereira created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1506771657\">PR review comment</a>:</p>\n<blockquote>\n<p>One of the things I'm not sure here is that, when <code>swap_remove()</code> is called, the element that was at the end of <code>optimized_values</code> is put in the <code>idx-th</code> position, but then it's never used again to lookup <code>this_block</code> for the next iteration.  Is this the desirable behavior, or am I missing something here?</p>\n</blockquote>",
        "id": 423917224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709160771
    },
    {
        "content": "<p>lpereira edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1506771657\">PR review comment</a>.</p>",
        "id": 423917702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709160983
    },
    {
        "content": "<p>lpereira edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1506771657\">PR review comment</a>.</p>",
        "id": 423917742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709161008
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1907611768\">PR review</a>.</p>",
        "id": 423918034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709161145
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1506776082\">PR review comment</a>:</p>\n<blockquote>\n<p>(Re: your edit) yep, indeed; I think it might be good to add a comment with the loop invariant here, for clarity. Something like: \"Loop scans in reverse; all values at indices &gt;= idx have the same available block, which is the best (highest in domtree) available block seen so far.\"</p>\n</blockquote>",
        "id": 423918035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709161145
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1914858377\">PR review</a>:</p>\n<blockquote>\n<p>I think I've addressed all the current review comments and added comments in all the places I intended to add them. I expect this will still fail CI as I haven't investigated why it failed before yet.</p>\n</blockquote>",
        "id": 424764342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709593791
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1914858377\">PR review</a>:</p>\n<blockquote>\n<p>I think I've addressed all the current review comments and added comments in all the places I intended to add them. I expect this will still fail CI as I haven't investigated why it failed before yet.</p>\n</blockquote>",
        "id": 424764343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709593791
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1511736461\">PR review comment</a>:</p>\n<blockquote>\n<p>Pre-allocating space for this map is not totally trivial for two reasons.</p>\n<ul>\n<li>We add more values to the data-flow graph while the egraph pass is running and I don't know what bound to use if we want to avoid reallocating later.</li>\n<li><code>SecondaryMap</code> has <code>with_default</code> and <code>with_capacity</code> constructors, but no constructor that does both, and types like <code>Block</code> don't implement <code>Default</code>. This is mostly just an annoyance since we can call <code>resize</code> after construction, but <code>resize</code> initializes all of the backing memory, while <code>with_capacity</code> doesn't, so it might make a difference.</li>\n</ul>\n<p>I'll go ahead and do an initial resize to the number of values present before the start of the egraph pass, but if you have any suggestions for estimating a reasonable larger size, let me know.</p>\n</blockquote>",
        "id": 424764344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709593791
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1511497430\">PR review comment</a>:</p>\n<blockquote>\n<p>We need the ability to filter out the original value, not just the optimized values. We could add an extra check after the loop to compare the original value's available block against <code>best_block</code>, but that means pretty much duplicating the body of the loop, and I think the cleanest thing to do then would still involve pushing the original value sometimes.</p>\n<p>Besides, this smallvec is allocated with size <code>MATCHES_LIMIT</code>, which is 5, but ISLE truncates at <code>MAX_ISLE_RETURNS</code>, which is 8, so we already might heap-allocate. Now that I've learned that I have a suggestion for simplifying ISLE and fixing that discrepancy at the same time, but that should be a separate issue.</p>\n<p>The simplest way to ensure that this push can't cause a realloc is to push _before_ calling <code>constructor_simplify</code>, which does not require that the provided vector is empty on entry. I can do that if you prefer.</p>\n</blockquote>",
        "id": 424764345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709593791
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>.</p>",
        "id": 424764400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709593805
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1915541707\">PR review</a>:</p>\n<blockquote>\n<p>LGTM wrt my comments at least; thanks very much for working on this!</p>\n</blockquote>",
        "id": 424765305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709594398
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1915592943\">PR review</a>:</p>\n<blockquote>\n<p>I forgot about Chris' request for some new test cases, so I guess I haven't actually addressed all review comments yet.</p>\n<p>And I think I don't want to address Nick's request, to avoid a possible realloc, in this PR. It's an easy change but it changes a bunch of filetests unnecessarily because it means that the optimized_values and orig_value are visited in a different order.</p>\n<p>Also, and more importantly, there's something wrong with GVN.</p>\n</blockquote>",
        "id": 424769592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709596823
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1915592943\">PR review</a>:</p>\n<blockquote>\n<p>I forgot about Chris' request for some new test cases, so I guess I haven't actually addressed all review comments yet.</p>\n<p>And I think I don't want to address Nick's request, to avoid a possible realloc, in this PR. It's an easy change but it changes a bunch of filetests unnecessarily because it means that the optimized_values and orig_value are visited in a different order.</p>\n<p>Also, and more importantly, there's something wrong with GVN.</p>\n</blockquote>",
        "id": 424769593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709596823
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1511954976\">PR review comment</a>:</p>\n<blockquote>\n<p>This debug-assert is failing in a few of the wasm spec tests and I don't understand why yet.</p>\n<p>In every case that's failed, the GVN map says the instruction we looked up is equivalent to an existing instruction, but the available-block for the existing instruction is the entry block, while the available-block for the new instruction is somewhere deeper in the dominator tree.</p>\n<p>I believed that GVN would always yield the same available-block for pure instructions so this is concerning.</p>\n</blockquote>",
        "id": 424769594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709596823
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1917991256\">PR review</a>.</p>",
        "id": 424947610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709668735
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1513416187\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm still reasoning through this. For GVN to match, both instructions must be identical, except that each operand is only required to be in the same set in the union-find rather than actually equal. The assertion failing means that for some operand in the instruction, the two instructions consume values which are in the same union-find set but have different available-blocks.</p>\n<p>I had been concerned about this specific situation but Chris and I reasoned that it was okay (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/7891#issuecomment-1960531054\">https://github.com/bytecodealliance/wasmtime/pull/7891#issuecomment-1960531054</a>) and now I'm confused about whether we were right and the assertion is overly strict. If so, what is the correct available-block to use here?</p>\n</blockquote>",
        "id": 424947612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709668735
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1918344806\">PR review</a>.</p>",
        "id": 424979383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709682859
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1918344806\">PR review</a>.</p>",
        "id": 424979384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709682859
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1513636944\">PR review comment</a>:</p>\n<blockquote>\n<p>I suspect what is happening here is that the instruction gets rewritten the first time it is seen and the GVN-map entry points to the rewritten result (which could be e.g. an <code>iconst</code> available everywhere), even though the instruction per its arguments is only available in one block. So I think the assertion that we want is that the available block of <code>orig_result</code> (which we're going to use as our value here) dominates the available block of <code>inst</code>, rather than is exactly the same. I think that resolves the issue?</p>\n</blockquote>",
        "id": 424979385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709682859
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>.</p>",
        "id": 424994706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709692872
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1918634737\">PR review</a>.</p>",
        "id": 424994763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709692903
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#discussion_r1513741934\">PR review comment</a>:</p>\n<blockquote>\n<p>That does make the assert pass in all the tests we have. I think you're correct but the reason why was obscured by the surrounding code.</p>\n<p>First off, the GVN-hit case did not always return <code>orig_result</code>. If we were looking up a <code>NewOrExistingInst::Existing</code> instruction, <code>insert_pure_enode</code> actually returned the result of that instruction. But that case only happens when this function was called from <code>remove_pure_and_optimize</code>, which ignores the return value. The return value only matters for <code>make_inst_ctor</code>, which always passes <code>NewOrExistingInst::New</code>, in which case we were returning <code>orig_result</code>.</p>\n<p>Therefore it's safe to change this function to always return <code>orig_result</code>, which I think is what we probably intended in the first place, and based on your comment is what you thought we were already doing. :grin:</p>\n<p>The next observation is that if the result of <code>inst</code> never appears in the values of the <code>value_to_opt_value</code> map, then it will never get looked up in <code>available_block</code> (or in the union-find, for that matter). So we don't actually need an answer to the question of what block this instruction should be available in. In fact it's better to leave it at the \"reserved\" default value so we'll get assertion failures if we accidentally do look it up.</p>\n<p>I've made these changes; could you review again when you have a chance? Hopefully CI will pass now too.</p>\n</blockquote>",
        "id": 424994764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709692903
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#pullrequestreview-1918739438\">PR review</a>:</p>\n<blockquote>\n<p>Changes LGTM. OK to merge with a test-case added that exercises the \"auto-subsume\" behavior (or if you've seen that it's already covered by one of the existing tests, note that here and that's fine too). Thanks!</p>\n</blockquote>",
        "id": 425006686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709700677
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006#issuecomment-1980085216\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>:</p>\n<blockquote>\n<p>(Or, I guess that could be slightly tricky with our current rules around subsume; OK to punt test to followup removal of the <code>subsume</code>s if you like.)</p>\n</blockquote>",
        "id": 425006822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709700734
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>.</p>",
        "id": 425359883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709832996
    },
    {
        "content": "<p><strong>jameysharp</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a> as ready for review.</p>",
        "id": 425359984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709833030
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>.</p>",
        "id": 425359987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709833031
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>.</p>",
        "id": 425359988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709833031
    },
    {
        "content": "<p>jameysharp has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>.</p>",
        "id": 425360387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709833156
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8006\">PR #8006</a>.</p>",
        "id": 425367321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709835483
    }
]