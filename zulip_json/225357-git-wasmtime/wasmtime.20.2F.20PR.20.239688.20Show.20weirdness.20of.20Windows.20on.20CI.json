[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a> from <code>alexcrichton:show-windows-weirdness</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Work-in-progress while I get to this to the point where I can share with folks. Not intended for merge</p>\n</blockquote>",
        "id": 484602933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732658178
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>.</p>",
        "id": 484603041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732658235
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>.</p>",
        "id": 484603106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732658265
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>.</p>",
        "id": 484603365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732658392
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>.</p>",
        "id": 484604154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732658747
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>.</p>",
        "id": 484604611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732658945
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>.</p>",
        "id": 484609006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732661166
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>.</p>",
        "id": 484609432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732661416
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688#issuecomment-2502121814\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>:</p>\n<blockquote>\n<p>@jsturtevant if you don't mind and if you're willing we could use some more Windows-specific advice/help on this. For background on this I was working on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9675\">https://github.com/bytecodealliance/wasmtime/pull/9675</a> recently and was having a tough time landing it as it was consistently failing on CI. The failure was only on MinGW and not on other Windows targets (e.g. MSVC) or other platforms (e.g. macOS or Linux). The actual PR itself turned out to be largely unrelated to the crashes on MinGW since the reproduction was quite simple.</p>\n<p>I've setup the PR here to showcase what's going on. Specifically we have a bit of C code in a <a href=\"https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/wasmtime/src/runtime/vm/helpers.c#L108-L123\"><code>helpers.c</code> file</a> around calling <code>setjmp</code>. We can't call <code>setjmp</code> from Rust as the Rust compiler has no concept of a function that returns twice (e.g. <code>setjmp</code>), so we have to rely on C for this. The current version I linked here is the one with the workaround I landed in #9675. Basically we want to write a function that looks like:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">platform_jmp_buf</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">platform_setjmp</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">buf_storage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">buf</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>but this crashes on MinGW. </p>\n<p>I've arranged a number of CI jobs here to showcase the various results of what's happening. Each job is run in release/debug mode to show the effect of a \"fix\" with/without optimizations. Each CI  job is running <code>cargo run test.wat</code> which is executing the <code>test.wat</code> file in this PR in the CLI, basically just instantiating it. The <code>test.wat</code> file looks like:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module (func unreachable) (start 0))\n</code></pre></div>\n<p>so a small wasm module that traps on instantiation. The <code>longjmp</code> in our trap handler (as <code>unreachable</code> compiles to <code>ud2</code> so we execute a vectored exception handling on Windows) is what's crashing.</p>\n<p>The results of CI look like:</p>\n<table>\n<thead>\n<tr>\n<th>build mode</th>\n<th><code>-DGOOD</code></th>\n<th><code>-DBAD -DBAD_V1</code></th>\n<th><code>-DBAD -DBAD_V2</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>debug</td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span></td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n</tr>\n<tr>\n<td>release</td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span></td>\n<td><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span></td>\n</tr>\n</tbody>\n</table>\n<p>For a bit easier to digest this is what we have for diffs:</p>\n<h3><code>-DBAD_V1</code></h3>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wasmtime/src/runtime/vm/helpers.c b/crates/wasmtime/src/runtime/vm/helpers.c</span>\n<span class=\"gh\">index 84711450a..58ffea805 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/runtime/vm/helpers.c</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/runtime/vm/helpers.c</span>\n<span class=\"gu\">@@ -110,16 +110,16 @@ static bool wasmtime_setjmp_inverted(void **buf_storage,</span>\n<span class=\"w\"> </span>                                     void *payload, void *callee) {\n<span class=\"w\"> </span>  platform_jmp_buf buf;\n<span class=\"w\"> </span>  if (platform_setjmp(buf) != 0) {\n<span class=\"gd\">-    return true;</span>\n<span class=\"gi\">+    return false;</span>\n<span class=\"w\"> </span>  }\n<span class=\"w\"> </span>  *buf_storage = &amp;buf;\n<span class=\"gd\">-  return !body(payload, callee);</span>\n<span class=\"gi\">+  return body(payload, callee);</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>bool VERSIONED_SYMBOL(wasmtime_setjmp)(void **buf_storage,\n<span class=\"w\"> </span>                                       bool (*body)(void *, void *),\n<span class=\"w\"> </span>                                       void *payload, void *callee) {\n<span class=\"gd\">-  return !wasmtime_setjmp_inverted(buf_storage, body, payload, callee);</span>\n<span class=\"gi\">+  return wasmtime_setjmp_inverted(buf_storage, body, payload, callee);</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>void VERSIONED_SYMBOL(wasmtime_longjmp)(void *JmpBuf) {\n</code></pre></div>\n<h3><code>-DBAD_V2</code></h3>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wasmtime/src/runtime/vm/helpers.c b/crates/wasmtime/src/runtime/vm/helpers.c</span>\n<span class=\"gh\">index 84711450a..f40745099 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/runtime/vm/helpers.c</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/runtime/vm/helpers.c</span>\n<span class=\"gu\">@@ -110,16 +110,17 @@ static bool wasmtime_setjmp_inverted(void **buf_storage,</span>\n<span class=\"w\"> </span>                                     void *payload, void *callee) {\n<span class=\"w\"> </span>  platform_jmp_buf buf;\n<span class=\"w\"> </span>  if (platform_setjmp(buf) != 0) {\n<span class=\"gd\">-    return true;</span>\n<span class=\"gi\">+    return false;</span>\n<span class=\"w\"> </span>  }\n<span class=\"w\"> </span>  *buf_storage = &amp;buf;\n<span class=\"gd\">-  return !body(payload, callee);</span>\n<span class=\"gi\">+  bool ret = body(payload, callee);</span>\n<span class=\"gi\">+  return ret;</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>bool VERSIONED_SYMBOL(wasmtime_setjmp)(void **buf_storage,\n<span class=\"w\"> </span>                                       bool (*body)(void *, void *),\n<span class=\"w\"> </span>                                       void *payload, void *callee) {\n<span class=\"gd\">-  return !wasmtime_setjmp_inverted(buf_storage, body, payload, callee);</span>\n<span class=\"gi\">+  return wasmtime_setjmp_inverted(buf_storage, body, payload, callee);</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>void VERSIONED_SYMBOL(wasmtime_longjmp)(void *JmpBuf) {\n</code></pre></div>\n<hr>\n<p>the really weird thing is that <code>-DBAD_V2</code>, the only real change is \"put the return value in a local variable\", causes the test to be \"fixed\". In release mode this breaks down though.</p>\n<p>So overall, is this something you'd be able to help us out debugging? We have a workaround for now so it's not too urgent, but the workaround is pretty wonky and feels quite brittle, so it seems like it'd be best to get a better understanding of it.</p>\n</blockquote>",
        "id": 484610089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732661845
    },
    {
        "content": "<p>jsturtevant <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688#issuecomment-2512218764\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>:</p>\n<blockquote>\n<p>I will take look at it this week</p>\n</blockquote>",
        "id": 485673911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733160158
    },
    {
        "content": "<p>jsturtevant <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688#issuecomment-2524701528\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>:</p>\n<blockquote>\n<p>Got some time to look into this today.  I am able to reproduce it locally.  This is a bit out of my expertise zone but doing some research I found a couple possible issues:</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/cpp/cpp/using-setjmp-longjmp?view=msvc-170\">setjmp and longjmp don't support correct destruction of stack frame objects portably between C++ compilers</a></li>\n<li><a href=\"https://stackoverflow.com/a/44605790/697126\">alignment issues</a></li>\n</ul>\n<p>I have an env set up now (I hadn't used rust MinGW target before) and will spend some more time next week doing some comparisons in gdb and also see if I can get some help.<br>\n</p>\n</blockquote>",
        "id": 486615434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733531590
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688#issuecomment-2524732431\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>:</p>\n<blockquote>\n<p>Thanks for taking a look! And to be clear this isn't urgent in the sense that the current workaround seems to at least not cause CI to fall over and MinGW isn't a critical platform of ours (e.g. tier 1). </p>\n</blockquote>",
        "id": 486618205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733533841
    },
    {
        "content": "<p>syntactically <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688#issuecomment-2573367719\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>:</p>\n<blockquote>\n<p>I took a look at this (looped in by @jsturtevant). It looks like this is ultimately a codegen bug in mingw around the Windows x64 unwind ABI.  Even though there isn't any explicit unwinding going on in wasmtime, mingw64, like msvc, defaults to implementing setjmp/longjmp using stack unwinding, in order to respect SEH and C++ destructors. It looks like it's possible to turn this off with <code>-D__USE_MINGW_SETJMP_NON_SEH</code>, but this is also worth fixing upstream, so I'll send up a patch to MinGW sometime soon.</p>\n<p>In the meantime, your workaround is probably decently robust. The actual bug here is that, on x64, if you have a call instruction immediately prior to something that looks like a function epilogue, then the unwinder will, while unwinding that frame, see that the return address points into the epilogue and execute the epilogue without checking whether there was an exception handler (including one due to a setjmp) on that frame. MSVC and Clang fix this by ensuring that there is a <code>nop</code> after any call that might throw that is placed just before the function epilogue; this works because the unwinder doesn't consider <code>nop</code> to be a valid part of an epilogue.  This is, as far as I can tell, _technically_ a documented feature of the x64 unwind ABI, so not doing that is a bug in mingw. Your workaround works fairly reliably because it inserts an extra instruction for the negation between the call to the function that unwinds the stack via longjmp and the function epilogue; marking the function noinline or non-static (allowing callers in a different translation unit) to make sure the optimizer can't decide to elide the negation might add a bit of robustnes, though.</p>\n<p>I haven't checked if Cranelift also has the problematic codegen pattern, but will take a quick look relatively shortly.</p>\n</blockquote>",
        "id": 492128112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736177953
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688#issuecomment-2573414235\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>:</p>\n<blockquote>\n<p>Oh dear that's quite the bug, thank you so much for helping us diagnose this @syntactically! I'm testing out <code>-D__USE_MINGW_SETJMP_NON_SEH</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9929\">https://github.com/bytecodealliance/wasmtime/pull/9929</a> to see how that works because that feels more robust than an unusual code ordering to me.</p>\n<blockquote>\n<p>I haven't checked if Cranelift also has the problematic codegen pattern, but will take a quick look relatively shortly.</p>\n</blockquote>\n<p>Ah I can probably answer this one pretty easily which is to say that Cranelift is \"trivially not affected\" as Cranelift doesn't have support for catching exceptions at this time. We emit unwind information necessary to function (e.g. if something unwinds through Cranelift code) but at this time there's no catches via the system unwinder in Cranelift-generated code.</p>\n</blockquote>",
        "id": 492132837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736179359
    },
    {
        "content": "<p>syntactically <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688#issuecomment-2573480904\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh dear that's quite the bug, thank you so much for helping us diagnose this @syntactically! I'm testing out <code>-D__USE_MINGW_SETJMP_NON_SEH</code> in #9929 to see how that works because that feels more robust than an unusual code ordering to me.</p>\n</blockquote>\n<p>Using that as a workaround if it does work probably makes sense! Once upstream mingw64 is fixed, we might want to revisit it though.</p>\n<blockquote>\n<p>Ah I can probably answer this one pretty easily which is to say that Cranelift is \"trivially not affected\" as Cranelift doesn't have support for catching exceptions at this time. We emit unwind information necessary to function (e.g. if something unwinds through Cranelift code) but at this time there's no catches via the system unwinder in Cranelift-generated code.</p>\n</blockquote>\n<p>Ah, I saw the unwind tables for the system unwinder were being generated and was assuming that precise unwinding with them was desirable. I think the consequences of this codegen are minimal if there aren't any handlers in the functions so compiled, but it will probably mess up system-unwinder stack traces and so forth, so I wonder if it might be worth dropping in the extra nop on windows anyway?<br>\n</p>\n</blockquote>",
        "id": 492139960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736181492
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688#issuecomment-2573657305\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>:</p>\n<blockquote>\n<p>Oh if it affects stack traces as well then yeah it might be a bug in Cranelift that we'll need to insert an extra nop as those are ideally correct to work best with debuggers</p>\n</blockquote>",
        "id": 492157730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736187424
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688#issuecomment-2573659139\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>:</p>\n<blockquote>\n<p>In the meantime though I've flagged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9929\">https://github.com/bytecodealliance/wasmtime/pull/9929</a> for merge which should resolve the main issue here (or at least gets code to a more-understandable state). Thanks again @syntactically and @jsturtevant for helping out here!</p>\n<p>@syntactically if you find an issue with Cranelift feel free to open an issue to track the insertion of the nops!</p>\n</blockquote>",
        "id": 492157921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736187493
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9688\">PR #9688</a>.</p>",
        "id": 492157929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736187498
    }
]