[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\">PR #9137</a> from <code>alexcrichton:new-value-use-state</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is a result of [discussion on Zulip][Zulip] and is<br>\nattempting to fix an issue where some 128-bit instructions aren't fully<br>\nbenefitting from load sinking on x64. At a high level 128-bit<br>\naddition isn't able to sink loads into instructions for halves of the<br>\n128-bit operation. At a lower level the reason for this is that<br>\ncurrently all operands of a multiple-result instruction are considered<br>\nmultiply-used (as each result could be used) which prevents load<br>\nsinking.</p>\n<p>Operations on 128-bit integers may be coupled with <code>isplit</code> afterwards<br>\nwhich is a multi-result instruction. This then means that the <code>Multiple</code><br>\nstate flows backwards to the 128-bit operation and all its operands,<br>\nincluding whatever is necessary to produce the individual components of<br>\neach 128-bit integer.</p>\n<p>The fix in this commit is to introduce the concept of a \"root\"<br>\ninstruction from the perspective of the calculation of <code>ValueUseState</code>.<br>\nIn other words <code>ValueUseState</code> is no longer an accurate picture of the<br>\nfunction as a whole, but only the parts of the function rooted at a<br>\n\"root\" instruction. This is currently defined as multi-result<br>\ninstructions meaning that <code>isplit</code> for example is a root instruction.<br>\nThis is coupled with documentation/changes to<br>\n<code>get_value_as_source_or_const</code> to never allow looking through root<br>\ninstructions (or considering them a <code>UniqueUse</code>).</p>\n<p>This commit additionally updates some documentation in a few places and<br>\nrefactors some usage of <code>get_value_as_source_or_const</code> to use other<br>\nhelpers instead to reduce callers of <code>get_value_as_source_or_const</code> and<br>\nwho to audit when modifying this function.</p>\n<p>[Zulip]: <a href=\"#narrow/stream/217117-cranelift/topic/ValueUseState.3A.3AMultiple.20and.20multi-result.20instructions/near/462833578\">https://bytecodealliance.zulipchat.com/#narrow/stream/217117-cranelift/topic/ValueUseState.3A.3AMultiple.20and.20multi-result.20instructions/near/462833578</a></p>\n</blockquote>",
        "id": 462855340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723841735
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\">PR #9137</a>.</p>",
        "id": 462855341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723841735
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\">PR #9137</a>.</p>",
        "id": 462855342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723841735
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\">PR #9137</a>.</p>",
        "id": 462855492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723841804
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137#discussion_r1720348623\">PR review comment</a>:</p>\n<blockquote>\n<p>I would maybe rephrase as:</p>\n<p>\"Notably, we define some instructions to be \"root\" instructions, which means that we assume they will always be codegen'd at the root of a matching tree, and not matched. (This comes with the caveat that we actually enforce this property by making them \"opaque\" to subtree matching in <code>get_value_as_source_or_const</code>.) Because they will always be codegen'd once, they in some sense \"reset\" multiplicity: these root instructions can be used many times, but because their result(s) are only computed once, they only use theirinputs once.</p>\n<p>We currently define all multi-result instructions to be \"root\" instructions, because it is too complex to reason about matching through them, and they cause too-coarse-grained approximation of multiplicity otherwise: the analysis would have to assume (as it used to!) that they are <em>always</em> multiply-used, simply because they have multiple outputs even if those outputs are used only once.</p>\n<p>In the future we could define other instructions to be \"root\" instructions as well, if we make the corresponding change to <code>get_value_as_source_or_const</code> as well.\"</p>\n</blockquote>",
        "id": 462856950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723842634
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137#pullrequestreview-2243547089\">PR review</a>:</p>\n<blockquote>\n<p>Looks great; thanks for the careful thinking through this and all the additional documentation!</p>\n<p>Some edits to my own taste on one of the comments, and a note on possibly generalizing a case, but nothing major below; LGTM.</p>\n</blockquote>",
        "id": 462856951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723842634
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137#discussion_r1720359153\">PR review comment</a>:</p>\n<blockquote>\n<p>This is asserting that (in effect) we don't have any multiple-result instructions that are side-effecting, I think. That may be true today but I wouldn't want to implicitly bake it in -- could we add <code>!is_value_use_root(...)</code> as an additional condition to this if-statement instead?</p>\n</blockquote>",
        "id": 462856952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723842634
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137#issuecomment-2294454331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\">PR #9137</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 462870865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723851884
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\">PR #9137</a>.</p>",
        "id": 463429030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724079666
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137#pullrequestreview-2245796382\">PR review</a>.</p>",
        "id": 463429389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724079739
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137#discussion_r1721939330\">PR review comment</a>:</p>\n<blockquote>\n<p>I mostly wanted to make sure that the preexisting <code>self.num_outputs(src_inst) == 1</code> on this case didn't become accidentally load-bearing so I put this here to ensure that if <code>is_value_use_root</code> changed that it would alert that this needs to be changed as well. That being said I like your suggestion as well, so I've done a bit of refactoring to lift <code>is_value_use_root(...)</code> checking to the top of the conditional to handle both pure/impure cases at the same time.</p>\n</blockquote>",
        "id": 463429393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724079740
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137#pullrequestreview-2245916004\">PR review</a>.</p>",
        "id": 463441626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724082723
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137#pullrequestreview-2245916328\">PR review</a>.</p>",
        "id": 463441691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724082732
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137#discussion_r1722014527\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 463441694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724082733
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\">PR #9137</a>.</p>",
        "id": 463447075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724083750
    }
]